{"version":3,"file":"deferred_unittest.js","sourceRoot":"","sources":["../../../src/base/deferred_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,yCAA2C;AAE3C,IAAI,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;IACtC,MAAM,QAAQ,GAAmB,IAAA,gBAAK,GAAQ,CAAC;IAC/C,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAEzB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,QAAQ,CAAC,OAAO,EAAE,CAAC;IACnB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,MAAM,QAAQ,CAAC;IACf,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC3C,MAAM,QAAQ,GAAqB,IAAA,gBAAK,GAAU,CAAC;IACnD,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACxB,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAC/B,MAAM,QAAQ,GAAqB,IAAA,gBAAK,GAAU,CAAC;IACnD,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACvB,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {defer, Deferred} from './deferred';\n\ntest('deferred can resolve', async () => {\n  const deferred: Deferred<void> = defer<void>();\n  let i = 0;\n  deferred.then(() => i++);\n\n  expect(i).toBe(0);\n  deferred.resolve();\n  expect(i).toBe(0);\n  await deferred;\n  expect(i).toBe(1);\n});\n\ntest('deferred can resolve with value', () => {\n  const deferred: Deferred<string> = defer<string>();\n  deferred.resolve('foo');\n  return expect(deferred).resolves.toBe('foo');\n});\n\ntest('deferred can reject', () => {\n  const deferred: Deferred<string> = defer<string>();\n  deferred.reject('foo');\n  return expect(deferred).rejects.toBe('foo');\n});\n"]}
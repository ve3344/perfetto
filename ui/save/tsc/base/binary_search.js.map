{"version":3,"file":"binary_search.js","sourceRoot":"","sources":["../../../src/base/binary_search.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntype Numeric = number | bigint;\ntype Range = [number, number];\n\nfunction searchImpl<T extends Numeric>(\n  haystack: ArrayLike<T>,\n  needle: T,\n  i: number,\n  j: number,\n): number {\n  if (i === j) return -1;\n  if (i + 1 === j) {\n    return needle >= haystack[i] ? i : -1;\n  }\n\n  const mid = Math.floor((j - i) / 2) + i;\n  const midValue = haystack[mid];\n  if (needle < midValue) {\n    return searchImpl(haystack, needle, i, mid);\n  } else {\n    return searchImpl(haystack, needle, mid, j);\n  }\n}\n\nfunction searchRangeImpl<T extends Numeric>(\n  haystack: ArrayLike<T>,\n  needle: T,\n  i: number,\n  j: number,\n): Range {\n  if (i === j) return [i, j];\n  if (i + 1 === j) {\n    if (haystack[i] <= needle) {\n      return [i, j];\n    } else {\n      return [i, i];\n    }\n  }\n\n  const mid = Math.floor((j - i) / 2) + i;\n  const midValue = haystack[mid];\n\n  if (needle < midValue) {\n    return searchRangeImpl(haystack, needle, i, mid);\n  } else if (needle > midValue) {\n    return searchRangeImpl(haystack, needle, mid, j);\n  } else {\n    while (haystack[i] !== needle) i++;\n    while (haystack[j - 1] !== needle) j--;\n    return [i, j];\n  }\n}\n\n// Given a sorted array of numeric values |haystack| and a |needle|, return the\n// index of the last element of |haystack| which is less than or equal to\n// |needle|, or -1 if all elements of |haystack| are greater than |needle|.\nexport function search<T extends Numeric>(\n  haystack: ArrayLike<T>,\n  needle: T,\n): number {\n  return searchImpl(haystack, needle, 0, haystack.length);\n}\n\n// Given a sorted array of numeric values (|haystack|) return the half open\n// range [i, j) of indices where |haystack| is equal to needle.\nexport function searchEq<T extends Numeric>(\n  haystack: ArrayLike<T>,\n  needle: T,\n  optRange?: Range,\n): Range {\n  const range = searchRange(haystack, needle, optRange);\n  const [i, j] = range;\n  if (haystack[i] === needle) return range;\n  return [j, j];\n}\n\n// Given a sorted array of numeric values (|haystack|) and a |needle| return the\n// smallest half open range [i, j) of indexes which contains |needle|.\nexport function searchRange<T extends Numeric>(\n  haystack: ArrayLike<T>,\n  needle: T,\n  optRange?: Range,\n): Range {\n  const [left, right] = optRange ? optRange : [0, haystack.length];\n  return searchRangeImpl(haystack, needle, left, right);\n}\n\n// Given a sorted array of numeric values (|haystack|) and a |needle| return a\n// pair of indexes [i, j] such that:\n// If there is at least one element in |haystack| smaller than |needle|\n// i is the index of the largest such number otherwise -1;\n// If there is at least one element in |haystack| larger than |needle|\n// j is the index of the smallest such element otherwise -1.\n//\n// So we try to get the indexes of the two data points around needle\n// or -1 if there is no such datapoint.\nexport function searchSegment<T extends Numeric>(\n  haystack: ArrayLike<T>,\n  needle: T,\n): Range {\n  if (!haystack.length) return [-1, -1];\n\n  const left = search(haystack, needle);\n  if (left === -1) {\n    return [left, 0];\n  } else if (left + 1 === haystack.length) {\n    return [left, -1];\n  } else {\n    return [left, left + 1];\n  }\n}\n"]}
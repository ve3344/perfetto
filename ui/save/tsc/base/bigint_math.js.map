{"version":3,"file":"bigint_math.js","sourceRoot":"","sources":["../../../src/base/bigint_math.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport class BigintMath {\n  static INT64_MAX: bigint = 2n ** 63n - 1n;\n  static INT64_MIN: bigint = -(2n ** 63n);\n\n  // Returns the smallest integral power of 2 that is not smaller than n.\n  // If n is less than or equal to 0, returns 1.\n  static bitCeil(n: bigint): bigint {\n    let result = 1n;\n    while (result < n) {\n      result <<= 1n;\n    }\n    return result;\n  }\n\n  // Returns the largest integral power of 2 which is not greater than n.\n  // If n is less than or equal to 0, returns 1.\n  static bitFloor(n: bigint): bigint {\n    let result = 1n;\n    while (result << 1n <= n) {\n      result <<= 1n;\n    }\n    return result;\n  }\n\n  // Returns the largest integral value x where 2^x is not greater than n.\n  static log2(n: bigint): number {\n    let result = 1n;\n    let log2 = 0;\n    while (result << 1n <= n) {\n      result <<= 1n;\n      ++log2;\n    }\n    return log2;\n  }\n\n  // Returns the integral multiple of step which is closest to n.\n  // If step is less than or equal to 0, returns n.\n  static quant(n: bigint, step: bigint): bigint {\n    step = BigintMath.max(1n, step);\n    const halfStep = step / 2n;\n    return step * ((n + halfStep) / step);\n  }\n\n  // Returns the largest integral multiple of step which is not larger than n.\n  // If step is less than or equal to 0, returns n.\n  static quantFloor(n: bigint, step: bigint): bigint {\n    step = BigintMath.max(1n, step);\n    if (n >= 0) {\n      return n - (n % step);\n    } else {\n      // If we're negative, just subtract one more \"step\", unless we're already\n      // aligned to a step then do nothing.\n      return n - (n % step) - (n % step === 0n ? 0n : step);\n    }\n  }\n\n  // Returns the smallest integral multiple of step which is not smaller than n.\n  // If step is less than or equal to 0, returns n.\n  static quantCeil(n: bigint, step: bigint): bigint {\n    step = BigintMath.max(1n, step);\n    if (n >= 0) {\n      return n - (n % step) + (n % step === 0n ? 0n : step);\n    } else {\n      return n - (n % step);\n    }\n  }\n\n  // Returns the greater of a and b.\n  static max(a: bigint, b: bigint): bigint {\n    return a > b ? a : b;\n  }\n\n  // Returns the smaller of a and b.\n  static min(a: bigint, b: bigint): bigint {\n    return a < b ? a : b;\n  }\n\n  // Returns the number of 1 bits in n.\n  static popcount(n: bigint): number {\n    if (n < 0n) {\n      throw Error(`Can\\'t get popcount of negative number ${n}`);\n    }\n    let count = 0;\n    while (n) {\n      if (n & 1n) {\n        ++count;\n      }\n      n >>= 1n;\n    }\n    return count;\n  }\n\n  // Return the ratio between two bigints as a number.\n  static ratio(dividend: bigint, divisor: bigint): number {\n    return Number(dividend) / Number(divisor);\n  }\n\n  // Calculates the absolute value of a n.\n  static abs(n: bigint) {\n    return n < 0n ? -1n * n : n;\n  }\n}\n"]}
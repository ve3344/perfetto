{"version":3,"file":"registry_unittest.js","sourceRoot":"","sources":["../../../src/base/registry_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,yCAAoC;AAOpC,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;IAC/C,MAAM,QAAQ,GAAG,mBAAQ,CAAC,YAAY,EAAc,CAAC;IAErD,MAAM,CAAC,GAAe,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;IACxC,MAAM,CAAC,GAAe,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;IACxC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAErB,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;IACnD,MAAM,QAAQ,GAAG,mBAAQ,CAAC,YAAY,EAAc,CAAC;IAErD,MAAM,EAAE,GAAe,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;IACzC,MAAM,EAAE,GAAe,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;IAEzC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACtB,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;AAChD,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;IACvD,MAAM,QAAQ,GAAG,mBAAQ,CAAC,YAAY,EAAc,CAAC;IACrD,MAAM,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;AAC9C,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACrC,MAAM,QAAQ,GAAG,mBAAQ,CAAC,YAAY,EAAc,CAAC;IACrD,MAAM,CAAC,GAAe,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;IACxC,MAAM,CAAC,GAAe,EAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC;IACxC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAErB,MAAM,MAAM,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACtC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Registry} from './registry';\n\ninterface Registrant {\n  kind: string;\n  n: number;\n}\n\ntest('registry returns correct registrant', () => {\n  const registry = Registry.kindRegistry<Registrant>();\n\n  const a: Registrant = {kind: 'a', n: 1};\n  const b: Registrant = {kind: 'b', n: 2};\n  registry.register(a);\n  registry.register(b);\n\n  expect(registry.get('a')).toBe(a);\n  expect(registry.get('b')).toBe(b);\n});\n\ntest('registry throws error on kind collision', () => {\n  const registry = Registry.kindRegistry<Registrant>();\n\n  const a1: Registrant = {kind: 'a', n: 1};\n  const a2: Registrant = {kind: 'a', n: 2};\n\n  registry.register(a1);\n  expect(() => registry.register(a2)).toThrow();\n});\n\ntest('registry throws error on non-existent track', () => {\n  const registry = Registry.kindRegistry<Registrant>();\n  expect(() => registry.get('foo')).toThrow();\n});\n\ntest('registry allows iteration', () => {\n  const registry = Registry.kindRegistry<Registrant>();\n  const a: Registrant = {kind: 'a', n: 1};\n  const b: Registrant = {kind: 'b', n: 2};\n  registry.register(a);\n  registry.register(b);\n\n  const values = [...registry.values()];\n  expect(values.length).toBe(2);\n  expect(values.includes(a)).toBe(true);\n  expect(values.includes(b)).toBe(true);\n});\n"]}
{"version":3,"file":"string_utils_unittest.js","sourceRoot":"","sources":["../../../src/base/string_utils_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {arrayEquals} from './array_utils';\nimport {\n  base64Decode,\n  base64Encode,\n  binaryDecode,\n  binaryEncode,\n  cropText,\n  sqliteString,\n  utf8Decode,\n  utf8Encode,\n} from './string_utils';\n\ntest('string_utils.stringToBase64', () => {\n  const bytes = [...'Hello, world'].map((c) => c.charCodeAt(0));\n  const buffer = new Uint8Array(bytes);\n  const b64Encoded = base64Encode(buffer);\n  expect(b64Encoded).toEqual('SGVsbG8sIHdvcmxk');\n  expect(base64Decode(b64Encoded)).toEqual(buffer);\n});\n\ntest('string_utils.bufferToBase64', () => {\n  const buffer = new Uint8Array([0xff, 0, 0, 0x81, 0x2a, 0xfe]);\n  const b64Encoded = base64Encode(buffer);\n  expect(b64Encoded).toEqual('/wAAgSr+');\n  expect(base64Decode(b64Encoded)).toEqual(buffer);\n});\n\ntest('string_utils.utf8EncodeAndDecode', () => {\n  const testString = '¡HéllØ wörld!';\n  const buffer = utf8Encode(testString);\n  const expectedUtf8 = [\n    194, 161, 72, 195, 169, 108, 108, 195, 152, 32, 119, 195, 182, 114, 108,\n    100, 33,\n  ];\n  expect(arrayEquals(buffer, expectedUtf8)).toBe(true);\n  expect(utf8Decode(buffer)).toEqual(testString);\n});\n\ntest('string_utils.binaryEncodeAndDecode', () => {\n  const buf = new Uint8Array(256 + 4);\n  for (let i = 0; i < 256; i++) {\n    buf[i] = i;\n  }\n  buf.set([0xf0, 0x28, 0x8c, 0xbc], 256);\n  const encodedStr = binaryEncode(buf);\n  expect(encodedStr.length).toEqual(buf.length);\n  const encodedThroughJson = JSON.parse(JSON.stringify(encodedStr));\n  expect(binaryDecode(encodedStr)).toEqual(buf);\n  expect(binaryDecode(encodedThroughJson)).toEqual(buf);\n});\n\ntest('string_utils.sqliteString', () => {\n  expect(sqliteString(\"that's it\")).toEqual(\"'that''s it'\");\n  expect(sqliteString('no quotes')).toEqual(\"'no quotes'\");\n  expect(sqliteString(`foo ' bar '`)).toEqual(`'foo '' bar '''`);\n});\n\ntest('cropHelper regular text', () => {\n  const tripleDot = '\\u2026';\n  const emoji = '\\uD83D\\uDE00';\n  expect(\n    cropText(\n      'com.android.camera [4096]',\n      /* charWidth=*/ 5,\n      /* rectWidth=*/ 2 * 5,\n    ),\n  ).toBe('c');\n  expect(cropText('com.android.camera [4096]', 5, 4 * 5 + 2)).toBe(\n    'co' + tripleDot,\n  );\n  expect(cropText('com.android.camera [4096]', 5, 5 * 5 + 2)).toBe(\n    'com' + tripleDot,\n  );\n  expect(cropText('com.android.camera [4096]', 5, 13 * 5 + 2)).toBe(\n    'com.android' + tripleDot,\n  );\n  expect(cropText('com.android.camera [4096]', 5, 26 * 5 + 2)).toBe(\n    'com.android.camera [4096]',\n  );\n  expect(cropText(emoji + 'abc', 5, 2 * 5)).toBe(emoji);\n  expect(cropText(emoji + 'abc', 5, 5 * 5)).toBe(emoji + 'a' + tripleDot);\n});\n"]}
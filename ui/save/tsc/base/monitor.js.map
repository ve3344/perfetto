{"version":3,"file":"monitor.js","sourceRoot":"","sources":["../../../src/base/monitor.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAKjC;;;GAGG;AACH,MAAa,OAAO;IAGE;IAFZ,MAAM,CAAY;IAE1B,YAAoB,QAAmB;QAAnB,aAAQ,GAAR,QAAQ,CAAW;QACrC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;;;;OAQG;IACH,cAAc,CAAC,QAAmB;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvB,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/C,QAAQ,EAAE,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA3BD,0BA2BC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntype Reducer = () => unknown;\ntype Callback = () => void;\n\n/**\n * A little helper that monitors a list of immutable objects and calls a\n * callback only when at least one them changes.\n */\nexport class Monitor {\n  private cached: unknown[];\n\n  constructor(private reducers: Reducer[]) {\n    this.cached = reducers.map(() => undefined);\n  }\n\n  /**\n   * Invokes all reducers and compares values against with the previous values.\n   *\n   * If any of the values have changed, |callback| is called (if present) and\n   * returns true, otherwise no callback is called and returns false.\n   *\n   * @param callback Optional callback to call when diffs are detected.\n   * @returns True if diffs were detected, false otherwise.\n   */\n  ifStateChanged(callback?: Callback): boolean {\n    const oldState = this.cached;\n    const newState = this.reducers.map((f) => f());\n    this.cached = newState;\n    if (newState.some((x, i) => x !== oldState[i])) {\n      callback?.();\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}
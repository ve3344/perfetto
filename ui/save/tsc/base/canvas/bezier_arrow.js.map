{"version":3,"file":"bezier_arrow.js","sourceRoot":"","sources":["../../../../src/base/canvas/bezier_arrow.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Point2D, Vector2D} from '../geom';\nimport {assertUnreachable} from '../logging';\n\nexport type CardinalDirection = 'north' | 'south' | 'east' | 'west';\n\nexport type ArrowHeadOrientation =\n  | CardinalDirection\n  | 'auto_vertical' // Either north or south depending on the location of the other end of the arrow\n  | 'auto_horizontal' // Either east or west depending on the location of the other end of the arrow\n  | 'auto'; // Choose the closest cardinal direction depending on the location of the other end of the arrow\n\nexport type ArrowHeadShape = 'none' | 'triangle' | 'circle';\n\nexport interface ArrowHeadStyle {\n  orientation: ArrowHeadOrientation;\n  shape: ArrowHeadShape;\n  size?: number;\n}\n\n/**\n * Renders an curved arrow using a bezier curve.\n *\n * This arrow is comprised of a line and the arrow caps are filled shapes, so\n * the arrow's colour and width will be dictated by the current canvas\n * strokeStyle, lineWidth, and fillStyle, so adjust these accordingly before\n * calling this function.\n *\n * @param ctx - The canvas to draw on.\n * @param start - Start point of the arrow.\n * @param end - End point of the arrow.\n * @param controlPointOffset - The distance in pixels of the control points from\n * the start and end points, in the direction of the start and end orientation\n * values above.\n * @param startStyle - The style of the start of the arrow.\n * @param endStyle - The style of the end of the arrow.\n */\nexport function drawBezierArrow(\n  ctx: CanvasRenderingContext2D,\n  start: Point2D,\n  end: Point2D,\n  controlPointOffset: number = 30,\n  startStyle: ArrowHeadStyle = {\n    shape: 'none',\n    orientation: 'auto',\n  },\n  endStyle: ArrowHeadStyle = {\n    shape: 'none',\n    orientation: 'auto',\n  },\n): void {\n  const startOri = getOri(start, end, startStyle.orientation);\n  const endOri = getOri(end, start, endStyle.orientation);\n\n  const startRetreat = drawArrowEnd(ctx, start, startOri, startStyle);\n  const endRetreat = drawArrowEnd(ctx, end, endOri, endStyle);\n\n  const startRetreatVec = orientationToUnitVector(startOri).scale(startRetreat);\n  const endRetreatVec = orientationToUnitVector(endOri).scale(endRetreat);\n\n  const startVec = new Vector2D(start).add(startRetreatVec);\n  const endVec = new Vector2D(end).add(endRetreatVec);\n\n  const startOffset =\n    orientationToUnitVector(startOri).scale(controlPointOffset);\n  const endOffset = orientationToUnitVector(endOri).scale(controlPointOffset);\n\n  const cp1 = startVec.add(startOffset);\n  const cp2 = endVec.add(endOffset);\n\n  ctx.beginPath();\n  ctx.moveTo(start.x, start.y);\n  ctx.bezierCurveTo(cp1.x, cp1.y, cp2.x, cp2.y, end.x, end.y);\n  ctx.stroke();\n}\n\nfunction getOri(\n  pos: Point2D,\n  other: Point2D,\n  ori: ArrowHeadOrientation,\n): CardinalDirection {\n  switch (ori) {\n    case 'auto_vertical':\n      return other.y > pos.y ? 'south' : 'north';\n    case 'auto_horizontal':\n      return other.x > pos.x ? 'east' : 'west';\n    case 'auto':\n      const verticalDelta = Math.abs(other.y - pos.y);\n      const horizontalDelta = Math.abs(other.x - pos.x);\n      if (verticalDelta > horizontalDelta) {\n        return other.y > pos.y ? 'south' : 'north';\n      } else {\n        return other.x > pos.x ? 'east' : 'west';\n      }\n    default:\n      return ori;\n  }\n}\n\nfunction drawArrowEnd(\n  ctx: CanvasRenderingContext2D,\n  pos: Point2D,\n  orientation: CardinalDirection,\n  style: ArrowHeadStyle,\n): number {\n  switch (style.shape) {\n    case 'triangle':\n      const size = style.size ?? 5;\n      drawTriangle(ctx, pos, orientation, size);\n      return size;\n    case 'circle':\n      drawCircle(ctx, pos, style.size ?? 3);\n      return 0;\n    case 'none':\n      return 0;\n    default:\n      assertUnreachable(style.shape);\n  }\n}\n\nfunction orientationToAngle(orientation: CardinalDirection): number {\n  switch (orientation) {\n    case 'north':\n      return 0;\n    case 'east':\n      return Math.PI / 2;\n    case 'south':\n      return Math.PI;\n    case 'west':\n      return (3 * Math.PI) / 2;\n    default:\n      assertUnreachable(orientation);\n  }\n}\n\nfunction orientationToUnitVector(orientation: CardinalDirection): Vector2D {\n  switch (orientation) {\n    case 'north':\n      return new Vector2D({x: 0, y: -1});\n    case 'east':\n      return new Vector2D({x: 1, y: 0});\n    case 'south':\n      return new Vector2D({x: 0, y: 1});\n    case 'west':\n      return new Vector2D({x: -1, y: 0});\n    default:\n      assertUnreachable(orientation);\n  }\n}\n\nfunction drawTriangle(\n  ctx: CanvasRenderingContext2D,\n  pos: Point2D,\n  orientation: CardinalDirection,\n  size: number,\n) {\n  // Calculate the transformed coordinates directly\n  const angle = orientationToAngle(orientation);\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n\n  const transformedPoints = [\n    {x: 0, y: 0},\n    {x: -1, y: -1},\n    {x: 1, y: -1},\n  ].map((point) => {\n    const scaledX = point.x * size;\n    const scaledY = point.y * size;\n    const rotatedX = scaledX * cosAngle - scaledY * sinAngle;\n    const rotatedY = scaledX * sinAngle + scaledY * cosAngle;\n    return {\n      x: rotatedX + pos.x,\n      y: rotatedY + pos.y,\n    };\n  });\n\n  ctx.beginPath();\n  ctx.moveTo(transformedPoints[0].x, transformedPoints[0].y);\n  ctx.lineTo(transformedPoints[1].x, transformedPoints[1].y);\n  ctx.lineTo(transformedPoints[2].x, transformedPoints[2].y);\n  ctx.closePath();\n  ctx.fill();\n}\n\nfunction drawCircle(\n  ctx: CanvasRenderingContext2D,\n  pos: Point2D,\n  radius: number,\n) {\n  ctx.beginPath();\n  ctx.arc(pos.x, pos.y, radius, 0, 2 * Math.PI);\n  ctx.closePath();\n  ctx.fill();\n}\n"]}
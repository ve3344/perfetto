{"version":3,"file":"array_buffer_builder.js","sourceRoot":"","sources":["../../../src/base/array_buffer_builder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {length as utf8Len, write as utf8Write} from '@protobufjs/utf8';\nimport {assertTrue} from '../base/logging';\nimport {isString} from '../base/object_utils';\n\n// A token that can be appended to an `ArrayBufferBuilder`.\nexport type ArrayBufferToken = string | number | Uint8Array;\n\n// Return the length, in bytes, of a token to be inserted.\nfunction tokenLength(token: ArrayBufferToken): number {\n  if (isString(token)) {\n    return utf8Len(token);\n  } else if (token instanceof Uint8Array) {\n    return token.byteLength;\n  } else {\n    assertTrue(token >= 0 && token <= 0xffffffff);\n    // 32-bit integers take 4 bytes\n    return 4;\n  }\n}\n\n// Insert a token into the buffer, at position `byteOffset`.\n//\n// @param dataView A DataView into the buffer to write into.\n// @param typedArray A Uint8Array view into the buffer to write into.\n// @param byteOffset Position to write at, in the buffer.\n// @param token Token to insert into the buffer.\nfunction insertToken(\n  dataView: DataView,\n  typedArray: Uint8Array,\n  byteOffset: number,\n  token: ArrayBufferToken,\n): void {\n  if (isString(token)) {\n    // Encode the string in UTF-8\n    const written = utf8Write(token, typedArray, byteOffset);\n    assertTrue(written === utf8Len(token));\n  } else if (token instanceof Uint8Array) {\n    // Copy the bytes from the other array\n    typedArray.set(token, byteOffset);\n  } else {\n    assertTrue(token >= 0 && token <= 0xffffffff);\n    // 32-bit little-endian value\n    dataView.setUint32(byteOffset, token, true);\n  }\n}\n\n// Like a string builder, but for an ArrayBuffer instead of a string. This\n// allows us to assemble messages to send/receive over the wire. Data can be\n// appended to the buffer using `append()`. The data we append can be of the\n// following types:\n//\n// - string: the ASCII string is appended. Throws an error if there are\n//           non-ASCII characters.\n// - number: the number is appended as a 32-bit little-endian integer.\n// - Uint8Array: the bytes are appended as-is to the buffer.\nexport class ArrayBufferBuilder {\n  private readonly tokens: ArrayBufferToken[] = [];\n\n  // Return an `ArrayBuffer` that is the concatenation of all the tokens.\n  toArrayBuffer(): ArrayBuffer {\n    // Calculate the size of the buffer we need.\n    let byteLength = 0;\n    for (const token of this.tokens) {\n      byteLength += tokenLength(token);\n    }\n    // Allocate the buffer.\n    const buffer = new ArrayBuffer(byteLength);\n    const dataView = new DataView(buffer);\n    const typedArray = new Uint8Array(buffer);\n    // Fill the buffer with the tokens.\n    let byteOffset = 0;\n    for (const token of this.tokens) {\n      insertToken(dataView, typedArray, byteOffset, token);\n      byteOffset += tokenLength(token);\n    }\n    assertTrue(byteOffset === byteLength);\n    // Return the values.\n    return buffer;\n  }\n\n  // Add one or more tokens to the value of this object.\n  append(token: ArrayBufferToken): void {\n    this.tokens.push(token);\n  }\n}\n"]}
{"version":3,"file":"gcs_uploader.js","sourceRoot":"","sources":["../../../src/base/gcs_uploader.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {defer} from './deferred';\nimport {Time} from './time';\n\nexport const BUCKET_NAME = 'perfetto-ui-data';\nexport const MIME_JSON = 'application/json; charset=utf-8';\nexport const MIME_BINARY = 'application/octet-stream';\n\nexport interface GcsUploaderArgs {\n  /**\n   * The mime-type to use for the upload. If undefined uses\n   * application/octet-stream.\n   */\n  mimeType?: string;\n\n  /**\n   * The name to use for the uploaded file. By default it uses a hash of\n   * the passed data/blob and uses content-addressing.\n   */\n  fileName?: string;\n\n  /** An optional callback that is invoked upon upload progress (or failure) */\n  onProgress?: (uploader: GcsUploader) => void;\n}\n\n/**\n * A utility class to handle uploads of possibly large files to\n * Google Cloud Storage.\n * It returns immediately if the file exists already\n */\nexport class GcsUploader {\n  state: 'UPLOADING' | 'UPLOADED' | 'ERROR' = 'UPLOADING';\n  error = '';\n  totalSize = 0;\n  uploadedSize = 0;\n  uploadedUrl = '';\n  uploadedFileName = '';\n\n  private args: GcsUploaderArgs;\n  private onProgress: (_: GcsUploader) => void;\n  private req: XMLHttpRequest;\n  private donePromise = defer<void>();\n  private startTime = performance.now();\n\n  constructor(data: Blob | ArrayBuffer | string, args: GcsUploaderArgs) {\n    this.args = args;\n    this.onProgress = args.onProgress ?? ((_: GcsUploader) => {});\n    this.req = new XMLHttpRequest();\n    this.start(data);\n  }\n\n  async start(data: Blob | ArrayBuffer | string) {\n    let fname = this.args.fileName;\n    if (fname === undefined) {\n      // If the file name is unspecified, hash the contents.\n      if (data instanceof Blob) {\n        fname = await hashFileStreaming(data);\n      } else {\n        fname = await sha1(data);\n      }\n    }\n    this.uploadedFileName = fname;\n    this.uploadedUrl = `https://storage.googleapis.com/${BUCKET_NAME}/${fname}`;\n\n    // Check if the file has been uploaded already. If so, skip.\n    const res = await fetch(\n      `https://www.googleapis.com/storage/v1/b/${BUCKET_NAME}/o/${fname}`,\n    );\n    if (res.status === 200) {\n      console.log(\n        `Skipping upload of ${this.uploadedUrl} because it exists already`,\n      );\n      this.state = 'UPLOADED';\n      this.donePromise.resolve();\n      return;\n    }\n\n    const reqUrl =\n      'https://www.googleapis.com/upload/storage/v1/b/' +\n      `${BUCKET_NAME}/o?uploadType=media` +\n      `&name=${fname}&predefinedAcl=publicRead`;\n    this.req.onabort = (e: ProgressEvent) => this.onRpcEvent(e);\n    this.req.onerror = (e: ProgressEvent) => this.onRpcEvent(e);\n    this.req.upload.onprogress = (e: ProgressEvent) => this.onRpcEvent(e);\n    this.req.onloadend = (e: ProgressEvent) => this.onRpcEvent(e);\n    this.req.open('POST', reqUrl, /* async= */ true);\n    const mimeType = this.args.mimeType ?? MIME_BINARY;\n    this.req.setRequestHeader('Content-Type', mimeType);\n    this.req.send(data);\n  }\n\n  waitForCompletion(): Promise<void> {\n    return this.donePromise;\n  }\n\n  abort() {\n    if (this.state === 'UPLOADING') {\n      this.req.abort();\n    }\n  }\n\n  getEtaString() {\n    let str = `${Math.ceil((100 * this.uploadedSize) / this.totalSize)}%`;\n    str += ` (${(this.uploadedSize / 1e6).toFixed(2)} MB)`;\n    const elapsed = (performance.now() - this.startTime) / 1000;\n    const rate = this.uploadedSize / elapsed;\n    const etaSecs = Math.round((this.totalSize - this.uploadedSize) / rate);\n    str += ' - ETA: ' + Time.toTimecode(Time.fromSeconds(etaSecs)).dhhmmss;\n    return str;\n  }\n\n  private onRpcEvent(e: ProgressEvent) {\n    let done = false;\n    switch (e.type) {\n      case 'progress':\n        this.uploadedSize = e.loaded;\n        this.totalSize = e.total;\n        break;\n      case 'abort':\n        this.state = 'ERROR';\n        this.error = 'Upload aborted';\n        break;\n      case 'error':\n        this.state = 'ERROR';\n        this.error = `${this.req.status} - ${this.req.statusText}`;\n        break;\n      case 'loadend':\n        done = true;\n        if (this.req.status === 200) {\n          this.state = 'UPLOADED';\n        } else if (this.state === 'UPLOADING') {\n          this.state = 'ERROR';\n          this.error = `${this.req.status} - ${this.req.statusText}`;\n        }\n        break;\n      default:\n        return;\n    }\n    this.onProgress(this);\n    if (done) {\n      this.donePromise.resolve();\n    }\n  }\n}\n\n/**\n * Computes the SHA-1 of a string or ArrayBuffer(View)\n * @param data a string or ArrayBuffer to hash.\n */\nasync function sha1(data: string | ArrayBuffer): Promise<string> {\n  let buffer: ArrayBuffer;\n  if (typeof data === 'string') {\n    buffer = new TextEncoder().encode(data);\n  } else {\n    buffer = data;\n  }\n  const digest = await crypto.subtle.digest('SHA-1', buffer);\n  return digestToHex(digest);\n}\n\n/**\n * Converts a hash for the given file in streaming mode, without loading the\n * whole file into memory. The result is \"a\" SHA-1 but is not the same of\n * `shasum -a 1 file`. The reason for this is that the crypto APIs support\n * only one-shot digest computation and lack the usual update() + digest()\n * chunked API. So we end up computing a SHA-1 of the concatenation of the\n * SHA-1 of each chunk.\n * Speed: ~800 MB/s on a M2 Macbook Air 2023.\n * @param file The file to hash.\n * @returns A hex-encoded string containing the hash of the file.\n */\nasync function hashFileStreaming(file: Blob): Promise<string> {\n  const CHUNK_SIZE = 32 * 1024 * 1024; // 32MB\n  const totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n  let chunkDigests = '';\n\n  for (let i = 0; i < totalChunks; i++) {\n    const start = i * CHUNK_SIZE;\n    const end = Math.min(start + CHUNK_SIZE, file.size);\n    const chunk = await file.slice(start, end).arrayBuffer();\n    const digest = await crypto.subtle.digest('SHA-1', chunk);\n    chunkDigests += digestToHex(digest);\n  }\n  return sha1(chunkDigests);\n}\n\n/**\n * Converts the return value of crypto.digest() to a hex string.\n * @param digest an array of bytes containing the digest\n * @returns hex-encoded string of the digest.\n */\nfunction digestToHex(digest: ArrayBuffer): string {\n  return Array.from(new Uint8Array(digest))\n    .map((x) => x.toString(16).padStart(2, '0'))\n    .join('');\n}\n"]}
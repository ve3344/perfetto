{"version":3,"file":"comparison_utils.js","sourceRoot":"","sources":["../../../src/base/comparison_utils.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAUjC,kCAOC;AAED,sCAWC;AA2BD,4CA6BC;AApFD,iDAAwC;AAMxC,4EAA4E;AAC5E,iEAAiE;AACjE,SAAgB,WAAW,CACzB,MAAmB,EACnB,UAA2B;IAE3B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACd,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC;AACJ,CAAC;AAED,SAAgB,aAAa,CAC3B,UAA2B,EAC3B,aAA6B;IAE7B,IAAI,aAAa,KAAK,MAAM,EAAE,CAAC;QAC7B,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;QACd,OAAO,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC;AACJ,CAAC;AAUD,SAAS,cAAc,CAAC,CAAgB;IACtC,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;QACpB,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC1B,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,IAAA,uBAAQ,EAAC,CAAC,CAAC,EAAE,CAAC;QAChB,OAAO,CAAC,CAAC;IACX,CAAC;IACD,0BAA0B;IAC1B,OAAO,CAAC,CAAC;AACX,CAAC;AAED,SAAgB,gBAAgB,CAAC,CAAgB,EAAE,CAAgB;IACjE,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;QACvC,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QAC7B,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QACnD,OAAO,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IACD,IAAI,IAAA,uBAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,uBAAQ,EAAC,CAAC,CAAC,EAAE,CAAC;QAC/B,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IAC5B,CAAC;IACD,IAAI,CAAC,YAAY,UAAU,IAAI,CAAC,YAAY,UAAU,EAAE,CAAC;QACvD,oCAAoC;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAClD,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChB,OAAO,CAAC,CAAC,CAAC;YACZ,CAAC;YACD,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChB,OAAO,CAAC,CAAC;YACX,CAAC;QACH,CAAC;QACD,0EAA0E;QAC1E,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;IAC7B,CAAC;IAED,mDAAmD;IACnD,OAAO,cAAc,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {isString} from './object_utils';\n\nexport type ComparisonFn<X> = (a: X, b: X) => number;\n\nexport type SortDirection = 'DESC' | 'ASC';\n\n// Having a comparison function of type S and a getter that returns value of\n// type S from value of type T, values of type T can be compared.\nexport function comparingBy<T, S>(\n  getter: (t: T) => S,\n  comparison: ComparisonFn<S>,\n): ComparisonFn<T> {\n  return (x, y) => {\n    return comparison(getter(x), getter(y));\n  };\n}\n\nexport function withDirection<T>(\n  comparison: ComparisonFn<T>,\n  sortDirection?: SortDirection,\n): ComparisonFn<T> {\n  if (sortDirection !== 'DESC') {\n    return comparison;\n  }\n\n  return (x, y) => {\n    return comparison(y, x);\n  };\n}\n\nexport type SortableValue =\n  | string\n  | number\n  | bigint\n  | null\n  | Uint8Array\n  | undefined;\n\nfunction columnTypeKind(a: SortableValue): number {\n  if (a === undefined) {\n    return 0;\n  }\n  if (a === null) {\n    return 1;\n  }\n  if (typeof a === 'number') {\n    return 2;\n  }\n  if (isString(a)) {\n    return 3;\n  }\n  // a instanceof Uint8Array\n  return 4;\n}\n\nexport function compareUniversal(a: SortableValue, b: SortableValue): number {\n  if (a === undefined && b === undefined) {\n    return 0;\n  }\n  if (a === null && b === null) {\n    return 0;\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  if (isString(a) && isString(b)) {\n    return a.localeCompare(b);\n  }\n  if (a instanceof Uint8Array && b instanceof Uint8Array) {\n    // Do the lexicographical comparison\n    for (let i = 0; i < a.length && i < b.length; i++) {\n      if (a[i] < b[i]) {\n        return -1;\n      }\n      if (a[i] > b[i]) {\n        return 1;\n      }\n    }\n    // No discrepancies found in the common prefix, compare lengths of arrays.\n    return a.length - b.length;\n  }\n\n  // Values are of different kinds, compare the kinds\n  return columnTypeKind(a) - columnTypeKind(b);\n}\n"]}
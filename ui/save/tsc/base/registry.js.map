{"version":3,"file":"registry.js","sourceRoot":"","sources":["../../../src/base/registry.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAMjC,MAAa,aAAc,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC1B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACpC,CAAC;CACF;AALD,sCAKC;AAED,MAAa,QAAQ;IACX,GAAG,CAAmB;IACpB,QAAQ,CAAiB;IAEnC,MAAM,CAAC,YAAY;QACjB,OAAO,IAAI,QAAQ,CAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,YAAY,GAAqB;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAa,CAAC;QACrC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED,QAAQ,CAAC,UAAa;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,aAAa,CACrB,cAAc,IAAI,iCAAiC,CACpD,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAEpC,OAAO;YACL,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;SACnD,CAAC;IACJ,CAAC;IAED,GAAG,CAAC,IAAY;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,GAAG,CAAC,IAAY;QACd,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;YAC7B,MAAM,IAAI,aAAa,CAAC,GAAG,IAAI,2BAA2B,CAAC,CAAC;QAC9D,CAAC;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,IAAY;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,qEAAqE;IACrE,CAAC,MAAM;QACL,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAChC,CAAC;IAED,aAAa;QACX,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;CACF;AAvDD,4BAuDC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport interface HasKind {\n  kind: string;\n}\n\nexport class RegistryError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class Registry<T> {\n  private key: (t: T) => string;\n  protected registry: Map<string, T>;\n\n  static kindRegistry<T extends HasKind>(): Registry<T> {\n    return new Registry<T>((t) => t.kind);\n  }\n\n  constructor(key: (t: T) => string) {\n    this.registry = new Map<string, T>();\n    this.key = key;\n  }\n\n  register(registrant: T): Disposable {\n    const kind = this.key(registrant);\n    if (this.registry.has(kind)) {\n      throw new RegistryError(\n        `Registrant ${kind} already exists in the registry`,\n      );\n    }\n    this.registry.set(kind, registrant);\n\n    return {\n      [Symbol.dispose]: () => this.registry.delete(kind),\n    };\n  }\n\n  has(kind: string): boolean {\n    return this.registry.has(kind);\n  }\n\n  get(kind: string): T {\n    const registrant = this.registry.get(kind);\n    if (registrant === undefined) {\n      throw new RegistryError(`${kind} has not been registered.`);\n    }\n    return registrant;\n  }\n\n  tryGet(kind: string): T | undefined {\n    return this.registry.get(kind);\n  }\n\n  // Support iteration: for (const foo of fooRegistry.values()) { ... }\n  *values() {\n    yield* this.registry.values();\n  }\n\n  valuesAsArray(): ReadonlyArray<T> {\n    return Array.from(this.values());\n  }\n\n  unregisterAllForTesting(): void {\n    this.registry.clear();\n  }\n}\n"]}
{"version":3,"file":"deferred.js","sourceRoot":"","sources":["../../../src/base/deferred.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAUjC,sBAQC;AATD,8DAA8D;AAC9D,SAAgB,KAAK;IACnB,8DAA8D;IAC9D,IAAI,OAAO,GAAG,IAAW,CAAC;IAC1B,8DAA8D;IAC9D,IAAI,MAAM,GAAG,IAAW,CAAC;IACzB,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACtE,8DAA8D;IAC9D,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAC,OAAO,EAAE,MAAM,EAAC,CAAQ,CAAC;AACpD,CAAC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Promise wrapper with exposed resolve and reject callbacks.\nexport interface Deferred<T> extends Promise<T> {\n  readonly resolve: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  readonly reject: (reason?: any) => void;\n}\n\n// Create a promise with exposed resolve and reject callbacks.\nexport function defer<T>(): Deferred<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let resolve = null as any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let reject = null as any;\n  const p = new Promise((res, rej) => ([resolve, reject] = [res, rej]));\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return Object.assign(p, {resolve, reject}) as any;\n}\n"]}
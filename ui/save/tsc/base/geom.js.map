{"version":3,"file":"geom.js","sourceRoot":"","sources":["../../../src/base/geom.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// This library provides interfaces and classes for handling 2D geometry\n// operations.\n\n/**\n * Interface representing a point in 2D space.\n */\nexport interface Point2D {\n  readonly x: number;\n  readonly y: number;\n}\n\n/**\n * Class representing a 2D vector with methods for vector operations.\n *\n * Note: This class is immutable in TypeScript (not enforced at runtime). Any\n * method that modifies the vector returns a new instance, leaving the original\n * unchanged.\n */\nexport class Vector2D implements Point2D {\n  readonly x: number;\n  readonly y: number;\n\n  constructor({x, y}: Point2D) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Adds the given point to this vector and returns a new vector.\n   *\n   * @param point - The point to add.\n   * @returns A new Vector2D instance representing the result.\n   */\n  add(point: Point2D): Vector2D {\n    return new Vector2D({x: this.x + point.x, y: this.y + point.y});\n  }\n\n  /**\n   * Subtracts the given point from this vector and returns a new vector.\n   *\n   * @param point - The point to subtract.\n   * @returns A new Vector2D instance representing the result.\n   */\n  sub(point: Point2D): Vector2D {\n    return new Vector2D({x: this.x - point.x, y: this.y - point.y});\n  }\n\n  /**\n   * Scales this vector by the given scalar and returns a new vector.\n   *\n   * @param scalar - The scalar value to multiply the vector by.\n   * @returns A new Vector2D instance representing the scaled vector.\n   */\n  scale(scalar: number): Vector2D {\n    return new Vector2D({x: this.x * scalar, y: this.y * scalar});\n  }\n\n  /**\n   * Computes the Manhattan distance, which is the sum of the absolute values of\n   * the x and y components of the vector. This represents the distance\n   * travelled along axes at right angles (grid-based distance).\n   */\n  get manhattanDistance(): number {\n    return Math.abs(this.x) + Math.abs(this.y);\n  }\n\n  /**\n   * Computes the Euclidean magnitude (or length) of the vector. This is the\n   * straight-line distance from the origin (0, 0) to the point (x, y) in 2D\n   * space.\n   */\n  get magnitude(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n}\n\n/**\n * Interface representing the vertical bounds of an object (top and bottom).\n */\nexport interface VerticalBounds {\n  readonly top: number;\n  readonly bottom: number;\n}\n\n/**\n * Interface representing the horizontal bounds of an object (left and right).\n */\nexport interface HorizontalBounds {\n  readonly left: number;\n  readonly right: number;\n}\n\n/**\n * Interface combining vertical and horizontal bounds to describe a 2D bounding\n * box.\n */\nexport interface Bounds2D extends VerticalBounds, HorizontalBounds {}\n\n/**\n * Interface representing the size of a 2D object.\n */\nexport interface Size2D {\n  readonly width: number;\n  readonly height: number;\n}\n\n/**\n * Class representing a 2D rectangle, implementing bounds and size interfaces.\n */\nexport class Rect2D implements Bounds2D, Size2D {\n  readonly left: number;\n  readonly top: number;\n  readonly right: number;\n  readonly bottom: number;\n  readonly width: number;\n  readonly height: number;\n\n  /**\n   * Creates a new rect given a point and size.\n   *\n   * E.g. Rect2D.fromPointAndSize({x: 10, y: 20, width: 100, height: 80})\n   *\n   * @param pointAndSize - The combined point and size.\n   * @returns A new Rect2D object.\n   */\n  static fromPointAndSize(pointAndSize: Point2D & Size2D) {\n    const {x, y, width, height} = pointAndSize;\n    return new Rect2D({\n      top: y,\n      left: x,\n      right: x + width,\n      bottom: y + height,\n    });\n  }\n\n  constructor({left, top, right, bottom}: Bounds2D) {\n    this.left = left;\n    this.top = top;\n    this.right = right;\n    this.bottom = bottom;\n    this.width = right - left;\n    this.height = bottom - top;\n  }\n\n  /**\n   * Returns a new rectangle representing the intersection with another\n   * rectangle.\n   *\n   * @param bounds - The bounds of the other rectangle to intersect with.\n   * @returns A new Rect2D instance representing the intersected rectangle.\n   */\n  intersect(bounds: Bounds2D): Rect2D {\n    return new Rect2D({\n      top: Math.max(this.top, bounds.top),\n      left: Math.max(this.left, bounds.left),\n      bottom: Math.min(this.bottom, bounds.bottom),\n      right: Math.min(this.right, bounds.right),\n    });\n  }\n\n  /**\n   * Expands the rectangle by the given amount on all sides and returns a new\n   * rectangle.\n   *\n   * @param amount - The amount to expand the rectangle by. This can be a number\n   * which is applied evenly to each side, or it can be a Size2D object which\n   * applies a different expansion amount in the x and y dimensions.\n   * @returns A new Rect2D instance representing the expanded rectangle.\n   */\n  expand(amount: number | Size2D): Rect2D {\n    if (typeof amount === 'number') {\n      return new Rect2D({\n        top: this.top - amount,\n        left: this.left - amount,\n        bottom: this.bottom + amount,\n        right: this.right + amount,\n      });\n    } else {\n      const {width, height} = amount;\n      return new Rect2D({\n        top: this.top - height,\n        left: this.left - width,\n        bottom: this.bottom + height,\n        right: this.right + width,\n      });\n    }\n  }\n\n  /**\n   * Reframes the rectangle by shifting its origin by the given point.\n   *\n   * @param point - The point by which to shift the origin.\n   * @returns A new Rect2D instance representing the reframed rectangle.\n   */\n  reframe(point: Point2D): Rect2D {\n    return new Rect2D({\n      left: this.left - point.x,\n      right: this.right - point.x,\n      top: this.top - point.y,\n      bottom: this.bottom - point.y,\n    });\n  }\n\n  /**\n   * Checks if this rectangle fully contains another set of bounds.\n   *\n   * @param bounds - The bounds to check containment for.\n   * @returns True if this rectangle contains the given bounds, false otherwise.\n   */\n  contains(bounds: Bounds2D): boolean {\n    return !(\n      bounds.top < this.top ||\n      bounds.bottom > this.bottom ||\n      bounds.left < this.left ||\n      bounds.right > this.right\n    );\n  }\n\n  /**\n   * Checks if this rectangle contains a point in 2D space.\n   *\n   * @param point - The point to check.\n   * @returns True if this rectangle contains the given point, false otherwise.\n   */\n  containsPoint(point: Point2D): boolean {\n    return (\n      point.y >= this.top &&\n      point.y < this.bottom &&\n      point.x >= this.left &&\n      point.x < this.right\n    );\n  }\n\n  /**\n   * Checks if this rectangle overlaps another set of bounds.\n   *\n   * @param bounds - The bounds to check overlap for.\n   * @returns rue if this rectangle overlaps the given bounds, false otherwise.\n   */\n  overlaps(bounds: Bounds2D): boolean {\n    return (\n      this.left < bounds.right &&\n      this.right > bounds.left &&\n      this.top < bounds.bottom &&\n      this.bottom > bounds.top\n    );\n  }\n\n  /**\n   * Translates the rectangle by the given point and returns a new rectangle.\n   *\n   * @param point - The point by which to translate the rectangle.\n   * @returns A new Rect2D instance representing the translated rectangle.\n   */\n  translate(point: Point2D): Rect2D {\n    return new Rect2D({\n      top: this.top + point.y,\n      left: this.left + point.x,\n      bottom: this.bottom + point.y,\n      right: this.right + point.x,\n    });\n  }\n}\n"]}
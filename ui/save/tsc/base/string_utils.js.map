{"version":3,"file":"string_utils.js","sourceRoot":"","sources":["../../../src/base/string_utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  decode as b64Decode,\n  encode as b64Encode,\n  length as b64Len,\n} from '@protobufjs/base64';\nimport {assertTrue} from './logging';\n\n// Lazy initialize at first use.\nlet textDecoder: TextDecoder | undefined = undefined;\nlet textEncoder: TextEncoder | undefined = undefined;\n\nexport function base64Encode(buffer: Uint8Array): string {\n  return b64Encode(buffer, 0, buffer.length);\n}\n\nexport function base64Decode(str: string): Uint8Array {\n  // if the string is in base64url format, convert to base64\n  const b64 = str.replaceAll('-', '+').replaceAll('_', '/');\n  const arr = new Uint8Array(b64Len(b64));\n  const written = b64Decode(b64, arr, 0);\n  assertTrue(written === arr.length);\n  return arr;\n}\n\n// encode binary array to hex string\nexport function hexEncode(bytes: Uint8Array): string {\n  return bytes.reduce(\n    (prev, cur) => prev + ('0' + cur.toString(16)).slice(-2),\n    '',\n  );\n}\n\nexport function utf8Encode(str: string): Uint8Array {\n  textEncoder = textEncoder ?? new TextEncoder();\n  return textEncoder.encode(str);\n}\n\n// Note: not all byte sequences can be converted to<>from UTF8. This can be\n// used only with valid unicode strings, not arbitrary byte buffers.\nexport function utf8Decode(buffer: Uint8Array | ArrayBuffer): string {\n  textDecoder = textDecoder ?? new TextDecoder();\n  return textDecoder.decode(buffer);\n}\n\n// The binaryEncode/Decode functions below allow to encode an arbitrary binary\n// buffer into a string that can be JSON-encoded. binaryEncode() applies\n// UTF-16 encoding to each byte individually.\n// Unlike utf8Encode/Decode, any arbitrary byte sequence can be converted into a\n// valid string, and viceversa.\n// This should be only used when a byte array needs to be transmitted over an\n// interface that supports only JSON serialization (e.g., postmessage to a\n// chrome extension).\n\nexport function binaryEncode(buf: Uint8Array): string {\n  let str = '';\n  for (let i = 0; i < buf.length; i++) {\n    str += String.fromCharCode(buf[i]);\n  }\n  return str;\n}\n\nexport function binaryDecode(str: string): Uint8Array {\n  const buf = new Uint8Array(str.length);\n  const strLen = str.length;\n  for (let i = 0; i < strLen; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\n// A function used to interpolate strings into SQL query. The only replacement\n// is done is that single quote replaced with two single quotes, according to\n// SQLite documentation:\n// https://www.sqlite.org/lang_expr.html#literal_values_constants_\n//\n// The purpose of this function is to use in simple comparisons, to escape\n// strings used in GLOB clauses see escapeQuery function.\nexport function sqliteString(str: string): string {\n  return `'${str.replaceAll(\"'\", \"''\")}'`;\n}\n\n// Makes a string safe to be used as a SQL table/view/function name.\nexport function sqlNameSafe(str: string): string {\n  return str.replace(/[^a-zA-Z0-9_]+/g, '_');\n}\n\n// Chat apps (including G Chat) sometimes replace ASCII characters with similar\n// looking unicode characters that break code snippets.\n// This function attempts to undo these replacements.\nexport function undoCommonChatAppReplacements(str: string): string {\n  // Replace non-breaking spaces with normal spaces.\n  return str.replaceAll('\\u00A0', ' ');\n}\n\nexport function cropText(str: string, charWidth: number, rectWidth: number) {\n  let displayText = '';\n  const maxLength = Math.floor(rectWidth / charWidth) - 1;\n  if (str.length <= maxLength) {\n    displayText = str;\n  } else {\n    let limit = maxLength;\n    let maybeTripleDot = '';\n    if (maxLength > 1) {\n      limit = maxLength - 1;\n      maybeTripleDot = '\\u2026';\n    }\n    // Javascript strings are UTF-16. |limit| could point in the middle of a\n    // 32-bit double-wchar codepoint (e.g., an emoji). Here we detect if the\n    // |limit|-th wchar is a leading surrogate and attach the trailing one.\n    const lastCharCode = str.charCodeAt(limit - 1);\n    limit += lastCharCode >= 55296 && lastCharCode < 56320 ? 1 : 0;\n    displayText = str.substring(0, limit) + maybeTripleDot;\n  }\n  return displayText;\n}\n"]}
{"version":3,"file":"array_utils.js","sourceRoot":"","sources":["../../../src/base/array_utils.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAGjC,sBAYC;AAGD,8BAEC;AAGD,kCAMC;AAED,8BAKC;AAGD,8CAIC;AAzCD,0CAA0C;AAC1C,SAAgB,KAAK,CAAC,CAAS;IAC7B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,KAAK,CAAS,CAAC,CAAC,CAAC;IAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3B,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChB,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,0DAA0D;AAC1D,SAAgB,SAAS,CAAC,CAAW;IACnC,OAAO,CAAC,CAAC,MAAM,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AACrC,CAAC;AAED,0CAA0C;AAC1C,SAAgB,WAAW,CAAI,CAAe,EAAE,CAAe;IAC7D,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IACxC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAClC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;IAClC,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAgB,SAAS,CACvB,SAA+B,EAC/B,EAAa;IAEb,OAAO,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC;AAED,sEAAsE;AACtE,SAAgB,iBAAiB,CAC/B,KAAkD;IAElD,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAQ,CAAC;AACtC,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// A function similar to Python's `range`.\nexport function range(n: number): number[] {\n  if (n < 0) {\n    throw new Error('range size should be non-negative!');\n  }\n\n  const result = new Array<number>(n);\n\n  for (let i = 0; i < n; i++) {\n    result[i] = i;\n  }\n\n  return result;\n}\n\n// Checks whether all the strings in the array are unique.\nexport function allUnique(x: string[]): boolean {\n  return x.length == new Set(x).size;\n}\n\n// Check whether two arrays are identical.\nexport function arrayEquals<T>(a: ArrayLike<T>, b: ArrayLike<T>): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nexport function isArrayOf<P, Q>(\n  predicate: (x: P | Q) => x is P,\n  xs: (P | Q)[],\n): xs is P[] {\n  return xs.every(predicate);\n}\n\n// Filter out falsy values from an array, leaving only the truthy ones\nexport function removeFalsyValues<T>(\n  array: ReadonlyArray<T | false | null | undefined>,\n): T[] {\n  return array.filter(Boolean) as T[];\n}\n"]}
{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../src/base/events.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAajC;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAa,SAAS;IACZ,SAAS,GAAqB,EAAE,CAAC;IAEzC;;;;OAIG;IACH,WAAW,CAAC,QAAwB;QAClC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACjC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzB,OAAO;YACL,CAAC,MAAM,CAAC,OAAO,CAAC;gBACd,oEAAoE;gBACpE,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACxC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACzD,CAAC;SACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,IAAO;QAClB,MAAM,QAAQ,GAAc,EAAE,CAAC;QAC/B,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACtC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAjCD,8BAiCC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// We limit ourselves to listeners that have only one argument (or zero, if\n// using void). API-wise it's more robust to wrap arguments in an interface,\n// rather than passing them positionally.\nexport type EvtListener<T> = (args: T) => unknown | Promise<unknown>;\n\n// For use in interfaces, when we want to expose only the listen() method and\n// not the emit().\nexport interface Evt<T> {\n  addListener(listener: EvtListener<T>): Disposable;\n}\n\n/**\n * Example usage:\n *\n * interface OnLoadArgs {loadTime: number};\n *\n * class MyClass {\n *  readonly onLoad = new EvtSource<OnLoadArgs>();\n *\n *  private doLoad() {\n *   this.onLoad.notify({loadTime: 42});\n *  }\n * }\n *\n * const myClass = new MyClass();\n * const listener = (args) => console.log('Load time', args.loadTime);\n * trash = new DisposableStack();\n * trash.use(myClass.onLoad.listen(listener));\n * ...\n * trash.dispose();\n */\nexport class EvtSource<T> implements Evt<T> {\n  private listeners: EvtListener<T>[] = [];\n\n  /**\n   * Registers a new event listener.\n   * @param listener The listener to be called when the event is fired.\n   * @returns a Disposable object that will remove the listener on dispose.\n   */\n  addListener(listener: EvtListener<T>): Disposable {\n    const listeners = this.listeners;\n    listeners.push(listener);\n    return {\n      [Symbol.dispose]() {\n        // Erase the handler from the array. (splice(length, 1) is a no-op).\n        const pos = listeners.indexOf(listener);\n        listeners.splice(pos >= 0 ? pos : listeners.length, 1);\n      },\n    };\n  }\n\n  /**\n   * Fires the event, invoking all registered listeners with the provided data.\n   * @param args The data to be passed to the listeners.\n   * @returns a promise that resolves when all the listeners have fulfilled\n   * their promise - if they returned one - otherwise resolves immediately.\n   */\n  async notify(args: T): Promise<void> {\n    const promises: unknown[] = [];\n    for (const listener of this.listeners) {\n      promises.push(Promise.resolve(listener(args)));\n    }\n    await Promise.allSettled(promises);\n  }\n}\n"]}
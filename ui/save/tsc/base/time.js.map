{"version":3,"file":"time.js","sourceRoot":"","sources":["../../../src/base/time.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath} from './bigint_math';\nimport {Brand} from './brand';\nimport {assertTrue} from './logging';\n\n// The |time| type represents trace time in the same units and domain as trace\n// processor (i.e. typically boot time in nanoseconds, but most of the UI should\n// be completely agnostic to this).\nexport type time = Brand<bigint, 'time'>;\n\n// The |duration| type is used to represent the duration of time between two\n// |time|s. The domain is irrelevant because a duration is relative.\nexport type duration = bigint;\n\n// The conversion factor for converting between different time units.\nconst TIME_UNITS_PER_SEC = 1e9;\nconst TIME_UNITS_PER_MILLISEC = 1e6;\nconst TIME_UNITS_PER_MICROSEC = 1e3;\n\nexport class Time {\n  // Negative time is never found in a trace - so -1 is commonly used as a flag\n  // to represent a value is undefined or unset, without having to use a\n  // nullable or union type.\n  static readonly INVALID = Time.fromRaw(-1n);\n\n  // The min and max possible values, considering times cannot be negative.\n  static readonly MIN = Time.fromRaw(0n);\n  static readonly MAX = Time.fromRaw(BigintMath.INT64_MAX);\n\n  static readonly ZERO = Time.fromRaw(0n);\n\n  // Cast a bigint to a |time|. Supports potentially |undefined| values.\n  // I.e. it performs the following conversions:\n  // - `bigint` -> `time`\n  // - `bigint|undefined` -> `time|undefined`\n  //\n  // Use this function with caution. The function is effectively a no-op in JS,\n  // but using it tells TypeScript that \"this value is a time value\". It's up to\n  // the caller to ensure the value is in the correct units and time domain.\n  //\n  // If you're reaching for this function after doing some maths on a |time|\n  // value and it's decayed to a |bigint| consider using the static math methods\n  // in |Time| instead, as they will do the appropriate casting for you.\n  static fromRaw(v: bigint): time;\n  static fromRaw(v?: bigint): time | undefined;\n  static fromRaw(v?: bigint): time | undefined {\n    return v as time | undefined;\n  }\n\n  // Convert seconds (number) to a time value.\n  // Note: number -> BigInt conversion is relatively slow.\n  static fromSeconds(seconds: number): time {\n    return Time.fromRaw(BigInt(Math.floor(seconds * TIME_UNITS_PER_SEC)));\n  }\n\n  // Convert time value to seconds and return as a number (i.e. float).\n  // Warning: This function is lossy, i.e. precision is lost when converting\n  // BigInt -> number.\n  // Note: BigInt -> number conversion is relatively slow.\n  static toSeconds(t: time): number {\n    return Number(t) / TIME_UNITS_PER_SEC;\n  }\n\n  // Convert milliseconds (number) to a time value.\n  // Note: number -> BigInt conversion is relatively slow.\n  static fromMillis(millis: number): time {\n    return Time.fromRaw(BigInt(Math.floor(millis * TIME_UNITS_PER_MILLISEC)));\n  }\n\n  // Convert time value to milliseconds and return as a number (i.e. float).\n  // Warning: This function is lossy, i.e. precision is lost when converting\n  // BigInt -> number.\n  // Note: BigInt -> number conversion is relatively slow.\n  static toMillis(t: time): number {\n    return Number(t) / TIME_UNITS_PER_MILLISEC;\n  }\n\n  // Convert microseconds (number) to a time value.\n  // Note: number -> BigInt conversion is relatively slow.\n  static fromMicros(millis: number): time {\n    return Time.fromRaw(BigInt(Math.floor(millis * TIME_UNITS_PER_MICROSEC)));\n  }\n\n  // Convert time value to microseconds and return as a number (i.e. float).\n  // Warning: This function is lossy, i.e. precision is lost when converting\n  // BigInt -> number.\n  // Note: BigInt -> number conversion is relatively slow.\n  static toMicros(t: time): number {\n    return Number(t) / TIME_UNITS_PER_MICROSEC;\n  }\n\n  // Convert a Date object to a time value, given an offset from the unix epoch.\n  // Note: number -> BigInt conversion is relatively slow.\n  static fromDate(d: Date, offset: duration): time {\n    const millis = d.getTime();\n    const t = Time.fromMillis(millis);\n    return Time.add(t, offset);\n  }\n\n  // Convert time value to a Date object, given an offset from the unix epoch.\n  // Warning: This function is lossy, i.e. precision is lost when converting\n  // BigInt -> number.\n  // Note: BigInt -> number conversion is relatively slow.\n  static toDate(t: time, offset: duration): Date {\n    const timeSinceEpoch = Time.sub(t, offset);\n    const millis = Time.toMillis(timeSinceEpoch);\n    return new Date(millis);\n  }\n\n  // Find the closest previous midnight for a given time value.\n  static getLatestMidnight(time: time, offset: duration): time {\n    const date = Time.toDate(time, offset);\n    const floorDay = new Date(\n      Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()),\n    );\n\n    return Time.fromDate(floorDay, offset);\n  }\n\n  static add(t: time, d: duration): time {\n    return Time.fromRaw(t + d);\n  }\n\n  static sub(t: time, d: duration): time {\n    return Time.fromRaw(t - d);\n  }\n\n  static diff(a: time, b: time): duration {\n    return a - b;\n  }\n\n  static min(a: time, b: time): time {\n    return Time.fromRaw(BigintMath.min(a, b));\n  }\n\n  static max(a: time, b: time): time {\n    return Time.fromRaw(BigintMath.max(a, b));\n  }\n\n  static quantFloor(a: time, b: duration): time {\n    return Time.fromRaw(BigintMath.quantFloor(a, b));\n  }\n\n  static quantCeil(a: time, b: duration): time {\n    return Time.fromRaw(BigintMath.quantCeil(a, b));\n  }\n\n  static quant(a: time, b: duration): time {\n    return Time.fromRaw(BigintMath.quant(a, b));\n  }\n\n  static formatSeconds(time: time): string {\n    return Time.toSeconds(time).toString() + ' s';\n  }\n\n  static formatMilliseconds(time: time): string {\n    return Time.toMillis(time).toString() + ' ms';\n  }\n\n  static formatMicroseconds(time: time): string {\n    return Time.toMicros(time).toString() + ' us';\n  }\n\n  static toTimecode(time: time): Timecode {\n    return new Timecode(time);\n  }\n}\n\nexport class Duration {\n  // The min and max possible duration values - durations can be negative.\n  static MIN = BigintMath.INT64_MIN;\n  static MAX = BigintMath.INT64_MAX;\n  static ZERO = 0n;\n\n  // Cast a bigint to a |duration|. Supports potentially |undefined| values.\n  // I.e. it performs the following conversions:\n  // - `bigint` -> `duration`\n  // - `bigint|undefined` -> `duration|undefined`\n  //\n  // Use this function with caution. The function is effectively a no-op in JS,\n  // but using it tells TypeScript that \"this value is a duration value\". It's\n  // up to the caller to ensure the value is in the correct units.\n  //\n  // If you're reaching for this function after doing some maths on a |duration|\n  // value and it's decayed to a |bigint| consider using the static math methods\n  // in |duration| instead, as they will do the appropriate casting for you.\n  static fromRaw(v: bigint): duration;\n  static fromRaw(v?: bigint): duration | undefined;\n  static fromRaw(v?: bigint): duration | undefined {\n    return v as duration | undefined;\n  }\n\n  static min(a: duration, b: duration): duration {\n    return BigintMath.min(a, b);\n  }\n\n  static max(a: duration, b: duration): duration {\n    return BigintMath.max(a, b);\n  }\n\n  static fromMillis(millis: number) {\n    return BigInt(Math.floor((millis / 1e3) * TIME_UNITS_PER_SEC));\n  }\n\n  // Convert time to seconds as a number.\n  // Use this function with caution. It loses precision and is slow.\n  static toSeconds(d: duration) {\n    return Number(d) / TIME_UNITS_PER_SEC;\n  }\n\n  // Convert time to seconds as a number.\n  // Use this function with caution. It loses precision and is slow.\n  static toMilliseconds(d: duration) {\n    return Number(d) / TIME_UNITS_PER_MILLISEC;\n  }\n\n  // Convert time to seconds as a number.\n  // Use this function with caution. It loses precision and is slow.\n  static toMicroSeconds(d: duration) {\n    return Number(d) / TIME_UNITS_PER_MICROSEC;\n  }\n\n  // Print duration as as human readable string - i.e. to only a handful of\n  // significant figues.\n  // Use this when readability is more desireable than precision.\n  // Examples: 1234 -> 1.23ns\n  //           123456789 -> 123ms\n  //           123,123,123,123,123 -> 34h 12m\n  //           1,000,000,023 -> 1 s\n  //           1,230,000,023 -> 1.2 s\n  static humanise(dur: duration): string {\n    const sec = Duration.toSeconds(dur);\n    const units = ['s', 'ms', 'us', 'ns'];\n    const sign = Math.sign(sec);\n    let n = Math.abs(sec);\n    let u = 0;\n    while (n < 1 && n !== 0 && u < units.length - 1) {\n      n *= 1000;\n      u++;\n    }\n    return `${sign < 0 ? '-' : ''}${Math.round(n * 10) / 10}${units[u]}`;\n  }\n\n  // Print duration with absolute precision.\n  static format(duration: duration): string {\n    let result = '';\n    if (duration < 1) return '0s';\n    const unitAndValue: [string, bigint][] = [\n      ['h', 3_600_000_000_000n],\n      ['m', 60_000_000_000n],\n      ['s', 1_000_000_000n],\n      ['ms', 1_000_000n],\n      ['us', 1_000n],\n      ['ns', 1n],\n    ];\n    unitAndValue.forEach(([unit, unitSize]) => {\n      if (duration >= unitSize) {\n        const unitCount = duration / unitSize;\n        result += unitCount.toLocaleString() + unit + ' ';\n        duration = duration % unitSize;\n      }\n    });\n    return result.slice(0, -1);\n  }\n\n  static formatSeconds(dur: duration): string {\n    return Duration.toSeconds(dur).toString() + ' s';\n  }\n\n  static formatMilliseconds(dur: duration): string {\n    return Duration.toMilliseconds(dur).toString() + ' ms';\n  }\n\n  static formatMicroseconds(dur: duration): string {\n    return Duration.toMicroSeconds(dur).toString() + ' us';\n  }\n}\n\n// This class takes a time and converts it to a set of strings representing a\n// time code where each string represents a group of time units formatted with\n// an appropriate number of leading zeros.\nexport class Timecode {\n  public readonly sign: string;\n  public readonly days: string;\n  public readonly hours: string;\n  public readonly minutes: string;\n  public readonly seconds: string;\n  public readonly millis: string;\n  public readonly micros: string;\n  public readonly nanos: string;\n\n  constructor(time: time) {\n    this.sign = time < 0 ? '-' : '';\n\n    const absTime = BigintMath.abs(time);\n\n    const days = absTime / 86_400_000_000_000n;\n    const hours = (absTime / 3_600_000_000_000n) % 24n;\n    const minutes = (absTime / 60_000_000_000n) % 60n;\n    const seconds = (absTime / 1_000_000_000n) % 60n;\n    const millis = (absTime / 1_000_000n) % 1_000n;\n    const micros = (absTime / 1_000n) % 1_000n;\n    const nanos = absTime % 1_000n;\n\n    this.days = days.toString();\n    this.hours = hours.toString().padStart(2, '0');\n    this.minutes = minutes.toString().padStart(2, '0');\n    this.seconds = seconds.toString().padStart(2, '0');\n    this.millis = millis.toString().padStart(3, '0');\n    this.micros = micros.toString().padStart(3, '0');\n    this.nanos = nanos.toString().padStart(3, '0');\n  }\n\n  // Get the upper part of the timecode formatted as: [-]DdHH:MM:SS.\n  get dhhmmss(): string {\n    const days = this.days === '0' ? '' : `${this.days}d`;\n    return `${this.sign}${days}${this.hours}:${this.minutes}:${this.seconds}`;\n  }\n\n  // Get the subsecond part of the timecode formatted as: mmm uuu nnn.\n  // The \"space\" char is configurable but defaults to a normal space.\n  subsec(spaceChar: string = ' '): string {\n    return `${this.millis}${spaceChar}${this.micros}${spaceChar}${this.nanos}`;\n  }\n\n  // Formats the entire timecode to a string.\n  toString(spaceChar: string = ' '): string {\n    return `${this.dhhmmss}.${this.subsec(spaceChar)}`;\n  }\n}\n\nexport function currentDateHourAndMinute(): string {\n  const date = new Date();\n  return `${date\n    .toISOString()\n    .substr(0, 10)}-${date.getHours()}-${date.getMinutes()}`;\n}\n\nexport class TimeSpan {\n  static readonly ZERO = new TimeSpan(Time.ZERO, Time.ZERO);\n\n  readonly start: time;\n  readonly end: time;\n\n  constructor(start: time, end: time) {\n    assertTrue(\n      start <= end,\n      `Span start [${start}] cannot be greater than end [${end}]`,\n    );\n    this.start = start;\n    this.end = end;\n  }\n\n  static fromTimeAndDuration(start: time, duration: duration): TimeSpan {\n    return new TimeSpan(start, Time.add(start, duration));\n  }\n\n  get duration(): duration {\n    return this.end - this.start;\n  }\n\n  get midpoint(): time {\n    return Time.fromRaw((this.start + this.end) / 2n);\n  }\n\n  contains(t: time): boolean {\n    return this.start <= t && t < this.end;\n  }\n\n  containsSpan(start: time, end: time): boolean {\n    return this.start <= start && end <= this.end;\n  }\n\n  overlaps(start: time, end: time): boolean {\n    return !(end <= this.start || start >= this.end);\n  }\n\n  equals(span: TimeSpan): boolean {\n    return this.start === span.start && this.end === span.end;\n  }\n\n  translate(x: duration): TimeSpan {\n    return new TimeSpan(Time.add(this.start, x), Time.add(this.end, x));\n  }\n\n  pad(padding: duration): TimeSpan {\n    return new TimeSpan(\n      Time.sub(this.start, padding),\n      Time.add(this.end, padding),\n    );\n  }\n}\n\n// Print the date only for a given date in ISO format.\nexport function toISODateOnly(date: Date) {\n  const year = date.getUTCFullYear();\n  const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(date.getUTCDate()).padStart(2, '0');\n\n  return `${year}-${month}-${day}`;\n}\n"]}
{"version":3,"file":"http_utils.js","sourceRoot":"","sources":["../../../src/base/http_utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertTrue} from './logging';\n\nexport function fetchWithTimeout(\n  input: RequestInfo,\n  init: RequestInit,\n  timeoutMs: number,\n) {\n  return new Promise<Response>((resolve, reject) => {\n    const timer = setTimeout(\n      () =>\n        reject(new Error(`fetch(${input}) timed out after ${timeoutMs} ms`)),\n      timeoutMs,\n    );\n    fetch(input, init)\n      .then((response) => resolve(response))\n      .catch((err) => reject(err))\n      .finally(() => clearTimeout(timer));\n  });\n}\n\nexport function fetchWithProgress(\n  url: string,\n  onProgress?: (percentage: number) => void,\n): Promise<Blob> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url, /* async= */ true);\n    xhr.responseType = 'blob';\n\n    xhr.onprogress = (event) => {\n      if (event.lengthComputable) {\n        const percentComplete = Math.round((event.loaded / event.total) * 100);\n        onProgress?.(percentComplete);\n      }\n    };\n\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        resolve(xhr.response); // Resolve with the Blob response\n      } else {\n        reject(\n          new Error(`Failed to download: ${xhr.status} ${xhr.statusText}`),\n        );\n      }\n    };\n\n    xhr.onerror = () => {\n      reject(new Error(`Network error in fetchWithProgress(${url})`));\n    };\n\n    xhr.send();\n  });\n}\n\n/**\n * NOTE: this function can only be called from synchronous contexts. It will\n * fail if called in timer handlers or async continuations (e.g. after an await)\n * Use assetSrc(relPath) which caches it on startup.\n * @returns the directory where the app is served from, e.g. 'v46.0-a2082649b'\n */\nexport function getServingRoot() {\n  // Works out the root directory where the content should be served from\n  // e.g. `http://origin/v1.2.3/`.\n  const script = document.currentScript as HTMLScriptElement;\n\n  if (script === null) {\n    // Can be null in tests.\n    assertTrue(typeof jest !== 'undefined');\n    return '';\n  }\n\n  let root = script.src;\n  root = root.substring(0, root.lastIndexOf('/') + 1);\n  return root;\n}\n"]}
{"version":3,"file":"high_precision_time.js","sourceRoot":"","sources":["../../../src/base/high_precision_time.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertUnreachable} from './logging';\nimport {Time, time} from './time';\n\nexport type RoundMode = 'round' | 'floor' | 'ceil';\n\n/**\n * Represents a time value in trace processor's time units, which is capable of\n * representing a time with at least 64 bit integer precision and 53 bits of\n * fractional precision.\n *\n * This class is immutable - any methods that modify this time will return a new\n * copy containing instead.\n */\nexport class HighPrecisionTime {\n  // This is the high precision time representing 0\n  static readonly ZERO = new HighPrecisionTime(Time.fromRaw(0n));\n\n  // time value == |integral| + |fractional|\n  // |fractional| is kept in the range 0 <= x < 1 to avoid losing precision\n  readonly integral: time;\n  readonly fractional: number;\n\n  /**\n   * Constructs a HighPrecisionTime object.\n   *\n   * @param integral The integer part of the time value.\n   * @param fractional The fractional part of the time value.\n   */\n  constructor(integral: time, fractional: number = 0) {\n    // Normalize |fractional| to the range 0.0 <= x < 1.0\n    const fractionalFloor = Math.floor(fractional);\n    this.integral = (integral + BigInt(fractionalFloor)) as time;\n    this.fractional = fractional - fractionalFloor;\n  }\n\n  /**\n   * Converts to an integer time value.\n   *\n   * @param round How to round ('round', 'floor', or 'ceil').\n   */\n  toTime(round: RoundMode = 'floor'): time {\n    switch (round) {\n      case 'round':\n        return Time.fromRaw(\n          this.integral + BigInt(Math.round(this.fractional)),\n        );\n      case 'floor':\n        return Time.fromRaw(this.integral);\n      case 'ceil':\n        return Time.fromRaw(this.integral + BigInt(Math.ceil(this.fractional)));\n      default:\n        assertUnreachable(round);\n    }\n  }\n\n  /**\n   * Converts to a JavaScript number. Precision loss should be expected when\n   * integral values are large.\n   */\n  toNumber(): number {\n    return Number(this.integral) + this.fractional;\n  }\n\n  /**\n   * Adds another HighPrecisionTime to this one and returns the result.\n   *\n   * @param time A HighPrecisionTime object to add.\n   */\n  add(time: HighPrecisionTime): HighPrecisionTime {\n    return new HighPrecisionTime(\n      Time.add(this.integral, time.integral),\n      this.fractional + time.fractional,\n    );\n  }\n\n  /**\n   * Adds an integer time value to this HighPrecisionTime and returns the result.\n   *\n   * @param t A time value to add.\n   */\n  addTime(t: time): HighPrecisionTime {\n    return new HighPrecisionTime(Time.add(this.integral, t), this.fractional);\n  }\n\n  /**\n   * Adds a floating point time value to this one and returns the result.\n   *\n   * @param n A floating point value to add.\n   */\n  addNumber(n: number): HighPrecisionTime {\n    return new HighPrecisionTime(this.integral, this.fractional + n);\n  }\n\n  /**\n   * Subtracts another HighPrecisionTime from this one and returns the result.\n   *\n   * @param time A HighPrecisionTime object to subtract.\n   */\n  sub(time: HighPrecisionTime): HighPrecisionTime {\n    return new HighPrecisionTime(\n      Time.sub(this.integral, time.integral),\n      this.fractional - time.fractional,\n    );\n  }\n\n  /**\n   * Subtract an integer time value from this HighPrecisionTime and returns the\n   * result.\n   *\n   * @param t A time value to subtract.\n   */\n  subTime(t: time): HighPrecisionTime {\n    return new HighPrecisionTime(Time.sub(this.integral, t), this.fractional);\n  }\n\n  /**\n   * Subtracts a floating point time value from this one and returns the result.\n   *\n   * @param n A floating point value to subtract.\n   */\n  subNumber(n: number): HighPrecisionTime {\n    return new HighPrecisionTime(this.integral, this.fractional - n);\n  }\n\n  /**\n   * Checks if this HighPrecisionTime is approximately equal to another, within\n   * a given epsilon.\n   *\n   * @param other A HighPrecisionTime object to compare.\n   * @param epsilon The tolerance for equality check.\n   */\n  equals(other: HighPrecisionTime, epsilon: number = 1e-6): boolean {\n    return Math.abs(this.sub(other).toNumber()) < epsilon;\n  }\n\n  /**\n   * Checks if this time value is within the range defined by [start, end).\n   *\n   * @param start The start of the time range (inclusive).\n   * @param end The end of the time range (exclusive).\n   */\n  containedWithin(start: time, end: time): boolean {\n    return this.integral >= start && this.integral < end;\n  }\n\n  /**\n   * Checks if this HighPrecisionTime is less than a given time.\n   *\n   * @param t A time value.\n   */\n  lt(t: time): boolean {\n    return this.integral < t;\n  }\n\n  /**\n   * Checks if this HighPrecisionTime is less than or equal to a given time.\n   *\n   * @param t A time value.\n   */\n  lte(t: time): boolean {\n    return (\n      this.integral < t ||\n      (this.integral === t && Math.abs(this.fractional - 0.0) < Number.EPSILON)\n    );\n  }\n\n  /**\n   * Checks if this HighPrecisionTime is greater than a given time.\n   *\n   * @param t A time value.\n   */\n  gt(t: time): boolean {\n    return (\n      this.integral > t ||\n      (this.integral === t && Math.abs(this.fractional - 0.0) > Number.EPSILON)\n    );\n  }\n\n  /**\n   * Checks if this HighPrecisionTime is greater than or equal to a given time.\n   *\n   * @param t A time value.\n   */\n  gte(t: time): boolean {\n    return this.integral >= t;\n  }\n\n  /**\n   * Clamps this HighPrecisionTime to be within the specified range.\n   *\n   * @param lower The lower bound of the range.\n   * @param upper The upper bound of the range.\n   */\n  clamp(lower: time, upper: time): HighPrecisionTime {\n    if (this.integral < lower) {\n      return new HighPrecisionTime(lower);\n    } else if (this.integral >= upper) {\n      return new HighPrecisionTime(upper);\n    } else {\n      return this;\n    }\n  }\n\n  /**\n   * Returns the absolute value of this HighPrecisionTime.\n   */\n  abs(): HighPrecisionTime {\n    if (this.integral >= 0n) {\n      return this;\n    }\n    const newIntegral = Time.fromRaw(-this.integral);\n    const newFractional = -this.fractional;\n    return new HighPrecisionTime(newIntegral, newFractional);\n  }\n\n  /**\n   * Converts this HighPrecisionTime to a string representation.\n   */\n  toString(): string {\n    const fractionalAsString = this.fractional.toString();\n    if (fractionalAsString === '0') {\n      return this.integral.toString();\n    } else {\n      return `${this.integral}${fractionalAsString.substring(1)}`;\n    }\n  }\n}\n"]}
{"version":3,"file":"time_scale.js","sourceRoot":"","sources":["../../../src/base/time_scale.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAOjC,MAAa,SAAS;IACX,QAAQ,CAAwB;IAChC,QAAQ,CAAmB;IACnB,SAAS,CAAS;IAEnC,YAAY,QAA+B,EAAE,QAA0B;QACrE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC7C,IAAI,QAAQ,CAAC,QAAQ,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACrB,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,EAAQ;QACf,MAAM,UAAU,GACd,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;IAC1D,CAAC;IAED,UAAU,CAAC,IAAuB;QAChC,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC5D,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;IAC1D,CAAC;IAED,uEAAuE;IACvE,mCAAmC;IACnC,UAAU,CAAC,EAAU;QACnB,MAAM,UAAU,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QAC9D,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACnD,CAAC;IAED,YAAY,CAAC,GAAa;QACxB,OAAO,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;IACtC,CAAC;IAED,YAAY,CAAC,OAAe;QAC1B,OAAO,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC;IAClC,CAAC;CACF;AA1CD,8BA0CC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {duration, time} from './time';\nimport {HighPrecisionTime} from './high_precision_time';\nimport {HighPrecisionTimeSpan} from './high_precision_time_span';\nimport {HorizontalBounds} from './geom';\n\nexport class TimeScale {\n  readonly timeSpan: HighPrecisionTimeSpan;\n  readonly pxBounds: HorizontalBounds;\n  private readonly timePerPx: number;\n\n  constructor(timespan: HighPrecisionTimeSpan, pxBounds: HorizontalBounds) {\n    this.pxBounds = pxBounds;\n    this.timeSpan = timespan;\n    const delta = pxBounds.right - pxBounds.left;\n    if (timespan.duration <= 0 || delta <= 0) {\n      this.timePerPx = 1;\n    } else {\n      this.timePerPx = timespan.duration / delta;\n    }\n  }\n\n  timeToPx(ts: time): number {\n    const timeOffset =\n      Number(ts - this.timeSpan.start.integral) -\n      this.timeSpan.start.fractional;\n    return this.pxBounds.left + timeOffset / this.timePerPx;\n  }\n\n  hpTimeToPx(time: HighPrecisionTime): number {\n    const timeOffset = time.sub(this.timeSpan.start).toNumber();\n    return this.pxBounds.left + timeOffset / this.timePerPx;\n  }\n\n  // Convert pixels to a high precision time object, which can be further\n  // converted to other time formats.\n  pxToHpTime(px: number): HighPrecisionTime {\n    const timeOffset = (px - this.pxBounds.left) * this.timePerPx;\n    return this.timeSpan.start.addNumber(timeOffset);\n  }\n\n  durationToPx(dur: duration): number {\n    return Number(dur) / this.timePerPx;\n  }\n\n  pxToDuration(pxDelta: number): number {\n    return pxDelta * this.timePerPx;\n  }\n}\n"]}
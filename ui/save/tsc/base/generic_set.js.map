{"version":3,"file":"generic_set.js","sourceRoot":"","sources":["../../../src/base/generic_set.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,0EAA0E;AAC1E,yEAAyE;AACzE,8DAA8D;AAC9D,MAAa,UAAU;IACrB,QAAQ,CAAmB;IAE3B,8EAA8E;IAC9E,yBAAyB;IACzB,YAAY,QAA0B;QACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,UAAU,GAAG,IAAI,GAAG,EAAa,CAAC;IAElC,GAAG,CAAC,MAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,GAAG,CAAC,MAAS;QACX,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,CAAC,MAAS;QACd,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IAChD,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;CACF;AA1BD,gCA0BC","sourcesContent":["/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ES6 Set does not allow to reasonably store compound objects; this class\n// rectifies the problem by implementing generic set on top of Map and an\n// injective function from objects of generic type to strings.\nexport class GenericSet<T> {\n  interner: (t: T) => string;\n\n  // Passed function should be injective (as in never having the same output for\n  // two different inputs).\n  constructor(interner: (t: T) => string) {\n    this.interner = interner;\n  }\n\n  backingMap = new Map<string, T>();\n\n  has(column: T): boolean {\n    return this.backingMap.has(this.interner(column));\n  }\n\n  add(column: T) {\n    this.backingMap.set(this.interner(column), column);\n  }\n\n  delete(column: T) {\n    this.backingMap.delete(this.interner(column));\n  }\n\n  values(): Iterable<T> {\n    return this.backingMap.values();\n  }\n}\n"]}
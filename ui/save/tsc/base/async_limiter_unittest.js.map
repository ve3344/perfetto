{"version":3,"file":"async_limiter_unittest.js","sourceRoot":"","sources":["../../../src/base/async_limiter_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {AsyncLimiter} from './async_limiter';\n\ntest('no concurrent callbacks', async () => {\n  const limiter = new AsyncLimiter();\n\n  const mock1 = jest.fn();\n  limiter.schedule(async () => mock1());\n  expect(mock1).toHaveBeenCalled();\n\n  const mock2 = jest.fn();\n  limiter.schedule(async () => mock2());\n  expect(mock2).not.toHaveBeenCalled();\n});\n\ntest('queueing', async () => {\n  const limiter = new AsyncLimiter();\n\n  const mock1 = jest.fn();\n  limiter.schedule(async () => mock1());\n\n  const mock2 = jest.fn();\n  await limiter.schedule(async () => mock2());\n\n  expect(mock1).toHaveBeenCalled();\n  expect(mock2).toHaveBeenCalled();\n});\n\ntest('multiple queuing', async () => {\n  const limiter = new AsyncLimiter();\n\n  const mock1 = jest.fn();\n  limiter.schedule(async () => mock1());\n\n  const mock2 = jest.fn();\n  limiter.schedule(async () => mock2());\n\n  const mock3 = jest.fn();\n  await limiter.schedule(async () => mock3());\n\n  expect(mock1).toHaveBeenCalled();\n  expect(mock2).not.toHaveBeenCalled();\n  expect(mock3).toHaveBeenCalled();\n});\n\ntest('error in callback bubbles up to caller', async () => {\n  const limiter = new AsyncLimiter();\n  const failingCallback = async () => {\n    throw Error();\n  };\n\n  expect(async () => await limiter.schedule(failingCallback)).rejects.toThrow();\n});\n\ntest('chain continues even when one callback fails', async () => {\n  const limiter = new AsyncLimiter();\n\n  const failingCallback = async () => {\n    throw Error();\n  };\n  limiter.schedule(failingCallback).catch(() => {});\n\n  const mock = jest.fn();\n  await limiter.schedule(async () => mock());\n\n  expect(mock).toHaveBeenCalled();\n});\n"]}
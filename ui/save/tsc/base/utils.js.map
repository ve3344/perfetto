{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/base/utils.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAMjC,wBAEC;AAcD,8CAEC;AAaD,kCAUC;AAMD,kCAmBC;AAtED,mEAAmE;AACnE,6BAA6B;AAC7B,iCAAiC;AACjC,yDAAyD;AACzD,SAAgB,MAAM,CAAI,KAAQ;IAChC,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;AAC/C,CAAC;AAaD,+DAA+D;AAC/D,SAAgB,iBAAiB,CAAC,QAAgB;IAChD,OAAO,QAAQ,CAAC,OAAO,CAAC,wCAAwC,EAAE,MAAM,CAAC,CAAC;AAC5E,CAAC;AAaD,SAAgB,WAAW,CACzB,GAAkB,EAClB,GAAM,EACN,OAAgB;IAEhB,IAAI,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzB,IAAI,KAAK,KAAK,SAAS;QAAE,OAAO,KAAK,CAAC;IACtC,KAAK,GAAG,OAAO,EAAE,CAAC;IAClB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACpB,OAAO,KAAK,CAAC;AACf,CAAC;AAED,gFAAgF;AAChF,2EAA2E;AAC3E,+EAA+E;AAC/E,yEAAyE;AACzE,SAAgB,WAAW,CACzB,MAAS,EACT,SAAqB;IAErB,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE;QACvB,GAAG,EAAE,CAAC,MAAS,EAAE,IAAqB,EAAE,QAAQ,EAAE,EAAE;YAClD,gEAAgE;YAChE,MAAM,aAAa,GAAI,SAA0C,CAAC,IAAI,CAAC,CAAC;YACxE,IAAI,aAAa,KAAK,SAAS,EAAE,CAAC;gBAChC,OAAO,OAAO,aAAa,KAAK,UAAU;oBACxC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC/B,CAAC,CAAC,aAAa,CAAC;YACpB,CAAC;YACD,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YACtD,OAAO,OAAO,SAAS,KAAK,UAAU;gBACpC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;gBACxB,CAAC,CAAC,SAAS,CAAC;QAChB,CAAC;KACF,CAAM,CAAC;AACV,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Return true if value is not nullish - i.e. not null or undefined\n// Allows doing the following\n//   exists(val) && m('div', val)\n// Even if val is a non-nullish falsey value like 0 or ''\nexport function exists<T>(value: T): value is NonNullable<T> {\n  return value !== undefined && value !== null;\n}\n\n// Type util to make sure that exactly one of the passed keys is defined.\n// Example usage:\n// type FooOrBar = ExactlyOne<{foo: number; bar: number}>;\n// const x : FooOrBar = {foo: 42};      // OK\n// const x : FooOrBar = {bar: 42};      // OK\n// const x : FooOrBar = {};             // Compiler error\n// const x : FooOrBar = {foo:1, bar:2}; // Compiler error\nexport type ExactlyOne<T, K extends keyof T = keyof T> = K extends keyof T\n  ? {[P in K]: T[P]} & {[P in Exclude<keyof T, K>]?: undefined}\n  : never;\n\n// Escape characters that are not allowed inside a css selector\nexport function escapeCSSSelector(selector: string): string {\n  return selector.replace(/([!\"#$%&'()*+,.\\/:;<=>?@[\\\\\\]^`{|}~])/g, '\\\\$1');\n}\n\n// Make field K required in T\nexport type RequiredField<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>;\n\n// The lowest common denoninator between Map<> and WeakMap<>.\n// This is just to avoid duplication of the getOrCreate below.\ninterface MapLike<K, V> {\n  get(key: K): V | undefined;\n  set(key: K, value: V): this;\n}\n\nexport function getOrCreate<K, V>(\n  map: MapLike<K, V>,\n  key: K,\n  factory: () => V,\n): V {\n  let value = map.get(key);\n  if (value !== undefined) return value;\n  value = factory();\n  map.set(key, value);\n  return value;\n}\n\n// Allows to take an existing class instance (`target`) and override some of its\n// methods via `overrides`. We use this for cases where we want to expose a\n// \"manager\" (e.g. TrackManager, SidebarManager) to the plugins, but we want to\n// override few of its methods (e.g. to inject the pluginId in the args).\nexport function createProxy<T extends object>(\n  target: T,\n  overrides: Partial<T>,\n): T {\n  return new Proxy(target, {\n    get: (target: T, prop: string | symbol, receiver) => {\n      // If the property is overriden, use that; otherwise, use target\n      const overrideValue = (overrides as {[key: symbol | string]: {}})[prop];\n      if (overrideValue !== undefined) {\n        return typeof overrideValue === 'function'\n          ? overrideValue.bind(overrides)\n          : overrideValue;\n      }\n      const baseValue = Reflect.get(target, prop, receiver);\n      return typeof baseValue === 'function'\n        ? baseValue.bind(target)\n        : baseValue;\n    },\n  }) as T;\n}\n"]}
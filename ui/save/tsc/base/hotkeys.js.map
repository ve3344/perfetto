{"version":3,"file":"hotkeys.js","sourceRoot":"","sources":["../../../src/base/hotkeys.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// This module provides hotkey detection using type-safe human-readable strings.\n//\n// The basic premise is this: Let's say you have a KeyboardEvent |event|, and\n// you wanted to check whether it contains the hotkey 'Ctrl+O', you can execute\n// the following function:\n//\n//   checkHotkey('Shift+O', event);\n//\n// ...which will evaluate to true if 'Shift+O' is discovered in the event.\n//\n// This will only trigger when O is pressed while the Shift key is held, not O\n// on it's own, and not if other modifiers such as Alt or Ctrl were also held.\n//\n// Modifiers include 'Shift', 'Ctrl', 'Alt', and 'Mod':\n// - 'Shift' and 'Ctrl' are fairly self explanatory.\n// - 'Alt' is 'option' on Macs.\n// - 'Mod' is a special modifier which means 'Ctrl' on PC and 'Cmd' on Mac.\n// Modifiers may be combined in various ways - check the |Modifier| type.\n//\n// By default hotkeys will not register when the event target is inside an\n// editable element, such as <textarea> and some <input>s.\n// Prefixing a hotkey with a bang '!' relaxes is requirement, meaning the hotkey\n// will register inside editable fields.\n\n// E.g. '!Mod+Shift+P' will register when pressed when a text box has focus but\n// 'Mod+Shift+P' (no bang) will not.\n// Warning: Be careful using this with single key hotkeys, e.g. '!P' is usually\n// never what you want!\n//\n// Some single-key hotkeys like '?' and '!' normally cannot be activated in\n// without also pressing shift key, so the shift requirement is relaxed for\n// these keys.\n\nimport {elementIsEditable} from './dom_utils';\n\ntype Alphabet =\n  | 'A'\n  | 'B'\n  | 'C'\n  | 'D'\n  | 'E'\n  | 'F'\n  | 'G'\n  | 'H'\n  | 'I'\n  | 'J'\n  | 'K'\n  | 'L'\n  | 'M'\n  | 'N'\n  | 'O'\n  | 'P'\n  | 'Q'\n  | 'R'\n  | 'S'\n  | 'T'\n  | 'U'\n  | 'V'\n  | 'W'\n  | 'X'\n  | 'Y'\n  | 'Z';\ntype Number = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';\ntype Special =\n  | 'Enter'\n  | 'Escape'\n  | 'Delete'\n  | '/'\n  | '?'\n  | '!'\n  | 'Space'\n  | 'ArrowUp'\n  | 'ArrowDown'\n  | 'ArrowLeft'\n  | 'ArrowRight'\n  | '['\n  | ']'\n  | ','\n  | '.';\nexport type Key = Alphabet | Number | Special;\nexport type Modifier =\n  | ''\n  | 'Mod+'\n  | 'Shift+'\n  | 'Ctrl+'\n  | 'Alt+'\n  | 'Mod+Shift+'\n  | 'Mod+Alt+'\n  | 'Mod+Shift+Alt+'\n  | 'Ctrl+Shift+'\n  | 'Ctrl+Alt'\n  | 'Ctrl+Shift+Alt';\ntype AllowInEditable = '!' | '';\nexport type Hotkey = `${AllowInEditable}${Modifier}${Key}`;\n\n// The following list of keys cannot be pressed wither with or without the\n// presence of the Shift modifier on most keyboard layouts. Thus we should\n// ignore shift in these cases.\nconst shiftExceptions = [\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '/',\n  '?',\n  '!',\n  '[',\n  ']',\n];\n\nconst macModifierStrings: ReadonlyMap<Modifier, string> = new Map<\n  Modifier,\n  string\n>([\n  ['', ''],\n  ['Mod+', '⌘'],\n  ['Shift+', '⇧'],\n  ['Ctrl+', '⌃'],\n  ['Alt+', '⌥'],\n  ['Mod+Shift+', '⌘⇧'],\n  ['Mod+Alt+', '⌘⌥'],\n  ['Mod+Shift+Alt+', '⌘⇧⌥'],\n  ['Ctrl+Shift+', '⌃⇧'],\n  ['Ctrl+Alt', '⌃⌥'],\n  ['Ctrl+Shift+Alt', '⌃⇧⌥'],\n]);\n\nconst pcModifierStrings: ReadonlyMap<Modifier, string> = new Map<\n  Modifier,\n  string\n>([\n  ['', ''],\n  ['Mod+', 'Ctrl+'],\n  ['Mod+Shift+', 'Ctrl+Shift+'],\n  ['Mod+Alt+', 'Ctrl+Alt+'],\n  ['Mod+Shift+Alt+', 'Ctrl+Shift+Alt+'],\n]);\n\n// Represents a deconstructed hotkey.\nexport interface HotkeyParts {\n  // The name of the primary key of this hotkey.\n  key: Key;\n\n  // All the modifiers as one chunk. E.g. 'Mod+Shift+'.\n  modifier: Modifier;\n\n  // Whether this hotkey should register when the event target is inside an\n  // editable field.\n  allowInEditable: boolean;\n}\n\n// Deconstruct a hotkey from its string representation into its constituent\n// parts.\nexport function parseHotkey(hotkey: Hotkey): HotkeyParts | undefined {\n  const regex = /^(!?)((?:Mod\\+|Shift\\+|Alt\\+|Ctrl\\+)*)(.*)$/;\n  const result = hotkey.match(regex);\n\n  if (!result) {\n    return undefined;\n  }\n\n  return {\n    allowInEditable: result[1] === '!',\n    modifier: result[2] as Modifier,\n    key: result[3] as Key,\n  };\n}\n\n// Print the hotkey in a human readable format.\nexport function formatHotkey(\n  hotkey: Hotkey,\n  spoof?: Platform,\n): string | undefined {\n  const parsed = parseHotkey(hotkey);\n  return parsed && formatHotkeyParts(parsed, spoof);\n}\n\nfunction formatHotkeyParts(\n  {modifier, key}: HotkeyParts,\n  spoof?: Platform,\n): string {\n  return `${formatModifier(modifier, spoof)}${key}`;\n}\n\nfunction formatModifier(modifier: Modifier, spoof?: Platform): string {\n  const platform = spoof || getPlatform();\n  const strings = platform === 'Mac' ? macModifierStrings : pcModifierStrings;\n  return strings.get(modifier) ?? modifier;\n}\n\n// Like |KeyboardEvent| but all fields apart from |key| are optional.\nexport type KeyboardEventLike = Pick<KeyboardEvent, 'key'> &\n  Partial<KeyboardEvent>;\n\n// Check whether |hotkey| is present in the keyboard event |event|.\nexport function checkHotkey(\n  hotkey: Hotkey,\n  event: KeyboardEventLike,\n  spoofPlatform?: Platform,\n): boolean {\n  const result = parseHotkey(hotkey);\n  if (!result) {\n    return false;\n  }\n\n  const {key, allowInEditable} = result;\n  const {target = null} = event;\n\n  const inEditable = elementIsEditable(target);\n  if (inEditable && !allowInEditable) {\n    return false;\n  }\n  return compareKeys(event, key) && checkMods(event, result, spoofPlatform);\n}\n\n// Return true if |key| matches the event's key.\nfunction compareKeys(e: KeyboardEventLike, key: Key): boolean {\n  return e.key.toLowerCase() === key.toLowerCase();\n}\n\n// Return true if modifiers specified in |mods| match those in the event.\nfunction checkMods(\n  event: KeyboardEventLike,\n  hotkey: HotkeyParts,\n  spoofPlatform?: Platform,\n): boolean {\n  const platform = spoofPlatform ?? getPlatform();\n\n  const {key, modifier} = hotkey;\n\n  const {\n    ctrlKey = false,\n    altKey = false,\n    shiftKey = false,\n    metaKey = false,\n  } = event;\n\n  const wantShift = modifier.includes('Shift');\n  const wantAlt = modifier.includes('Alt');\n  const wantCtrl =\n    platform === 'Mac'\n      ? modifier.includes('Ctrl')\n      : modifier.includes('Ctrl') || modifier.includes('Mod');\n  const wantMeta = platform === 'Mac' && modifier.includes('Mod');\n\n  // For certain keys we relax the shift requirement, as they usually cannot be\n  // pressed without the shift key on English keyboards.\n  const shiftOk =\n    shiftExceptions.includes(key as string) || shiftKey === wantShift;\n\n  return (\n    metaKey === wantMeta &&\n    Boolean(shiftOk) &&\n    altKey === wantAlt &&\n    ctrlKey === wantCtrl\n  );\n}\n\nexport type Platform = 'Mac' | 'PC';\n\n// Get the current platform (PC or Mac).\nexport function getPlatform(): Platform {\n  return window.navigator.platform.indexOf('Mac') !== -1 ? 'Mac' : 'PC';\n}\n\n// Returns a cross-platform check for whether the event has \"Mod\" key pressed\n// (e.g. as a part of Mod-Click UX pattern).\n// On Mac, Mod-click is actually Command-click and on PC it's Control-click,\n// so this function handles this for all platforms.\nexport function hasModKey(event: {\n  readonly metaKey: boolean;\n  readonly ctrlKey: boolean;\n}): boolean {\n  if (getPlatform() === 'Mac') {\n    return event.metaKey;\n  } else {\n    return event.ctrlKey;\n  }\n}\n\nexport function modKey(): {metaKey?: boolean; ctrlKey?: boolean} {\n  if (getPlatform() === 'Mac') {\n    return {metaKey: true};\n  } else {\n    return {ctrlKey: true};\n  }\n}\n"]}
{"version":3,"file":"keyboard_layout_map.js","sourceRoot":"","sources":["../../../src/base/keyboard_layout_map.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAiBjC,0DAaC;AAlBD,MAAa,iBAAkB,SAAQ,KAAK;CAAG;AAA/C,8CAA+C;AAE/C,wCAAwC;AACxC,4EAA4E;AAC5E,8DAA8D;AACvD,KAAK,UAAU,uBAAuB;IAC3C,sEAAsE;IACtE,6CAA6C;IAC7C,4EAA4E;IAC5E,kCAAkC;IAClC,IAAI,UAAU,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;QACnC,uEAAuE;QACvE,sDAAsD;QACtD,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAAC,QAAoB,CAAC;QACvD,OAAO,MAAM,QAAQ,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,iBAAiB,CAAC,+BAA+B,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// A keyboard layout map that converts key codes to their equivalent glyphs for\n// a given keyboard layout (e.g. 'KeyX' -> 'x').\nexport interface KeyboardLayoutMap {\n  get(code: string): string | undefined;\n}\n\ninterface Keyboard {\n  getLayoutMap(): KeyboardLayoutMap;\n}\n\nexport class NotSupportedError extends Error {}\n\n// Fetch the user's keyboard layout map.\n// This function is merely a wrapper around the keyboard API, which throws a\n// specific error when used in browsers that don't support it.\nexport async function nativeKeyboardLayoutMap(): Promise<KeyboardLayoutMap> {\n  // Browser's that don't support the Keyboard API won't have a keyboard\n  // property in their window.navigator object.\n  // Note: it seems this is also what Chrome does when the website is accessed\n  // through an insecure connection.\n  if ('keyboard' in window.navigator) {\n    // Typescript's dom library doesn't know about this feature, so we must\n    // take some liberties when it comes to relaxing types\n    const keyboard = window.navigator.keyboard as Keyboard;\n    return await keyboard.getLayoutMap();\n  } else {\n    throw new NotSupportedError('Keyboard API is not supported');\n  }\n}\n"]}
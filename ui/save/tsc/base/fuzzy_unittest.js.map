{"version":3,"file":"fuzzy_unittest.js","sourceRoot":"","sources":["../../../src/base/fuzzy_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {FuzzyFinder, fuzzyMatch} from './fuzzy';\n\ndescribe('FuzzyFinder', () => {\n  const items = ['aaa', 'aba', 'zzz', 'c z d z e', 'CAPS', 'ababc'];\n  const finder = new FuzzyFinder(items, (x) => x);\n\n  it('finds all for empty search term', () => {\n    const result = finder.find('');\n    // Expect all results are returned in original order.\n    expect(result).toEqual([\n      {item: 'aaa', segments: [{matching: false, value: 'aaa'}]},\n      {item: 'aba', segments: [{matching: false, value: 'aba'}]},\n      {item: 'zzz', segments: [{matching: false, value: 'zzz'}]},\n      {item: 'c z d z e', segments: [{matching: false, value: 'c z d z e'}]},\n      {item: 'CAPS', segments: [{matching: false, value: 'CAPS'}]},\n      {item: 'ababc', segments: [{matching: false, value: 'ababc'}]},\n    ]);\n  });\n\n  it('finds exact match', () => {\n    const result = finder.find('aaa');\n    expect(result).toEqual(\n      expect.arrayContaining([\n        {item: 'aaa', segments: [{matching: true, value: 'aaa'}]},\n      ]),\n    );\n  });\n\n  it('finds approx matches', () => {\n    const result = finder.find('aa');\n    // Allow finding results in any order.\n    expect(result).toEqual(\n      expect.arrayContaining([\n        {\n          item: 'aaa',\n          // Either |aa|a or a|aa| is valid.\n          segments: expect.arrayContaining([\n            {matching: true, value: 'aa'},\n            {matching: false, value: 'a'},\n          ]),\n        },\n        {\n          item: 'aba',\n          segments: [\n            {matching: true, value: 'a'},\n            {matching: false, value: 'b'},\n            {matching: true, value: 'a'},\n          ],\n        },\n      ]),\n    );\n  });\n\n  it('does not find completely unrelated items', () => {\n    // |zzz| looks nothing like |aa| and should not be returned.\n    const result = finder.find('aa');\n    expect(result).not.toEqual(\n      expect.arrayContaining([expect.objectContaining({item: 'zzz'})]),\n    );\n  });\n\n  it('finds non-consecutive matches', () => {\n    const result = finder.find('cde');\n    expect(result).toEqual(\n      expect.arrayContaining([\n        {\n          item: 'c z d z e',\n          segments: [\n            {matching: true, value: 'c'},\n            {matching: false, value: ' z '},\n            {matching: true, value: 'd'},\n            {matching: false, value: ' z '},\n            {matching: true, value: 'e'},\n          ],\n        },\n      ]),\n    );\n  });\n\n  it('finds caps match when search term is in lower case', () => {\n    const result = finder.find('caps');\n    expect(result).toEqual(\n      expect.arrayContaining([\n        {item: 'CAPS', segments: [{matching: true, value: 'CAPS'}]},\n      ]),\n    );\n  });\n\n  it('finds match with false start', () => {\n    const result = finder.find('abc');\n    expect(result).toEqual(\n      expect.arrayContaining([\n        {\n          item: 'ababc',\n          segments: [\n            {matching: true, value: 'ab'},\n            {matching: false, value: 'ab'},\n            {matching: true, value: 'c'},\n          ],\n        },\n      ]),\n    );\n  });\n});\n\ntest('fuzzyMatch', () => {\n  expect(fuzzyMatch('foo bar baz', 'foo')).toEqual({\n    matches: true,\n    segments: [\n      {matching: true, value: 'foo'},\n      {matching: false, value: ' bar baz'},\n    ],\n  });\n\n  expect(fuzzyMatch('foo bar baz', 'qux')).toEqual({\n    matches: false,\n    segments: [],\n  });\n\n  expect(fuzzyMatch('bar baz', 'foo', 'bar')).toEqual({\n    matches: true,\n    segments: [\n      {matching: true, value: 'bar'},\n      {matching: false, value: ' baz'},\n    ],\n  });\n});\n"]}
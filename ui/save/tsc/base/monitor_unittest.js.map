{"version":3,"file":"monitor_unittest.js","sourceRoot":"","sources":["../../../src/base/monitor_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,uCAAkC;AAElC,IAAI,CAAC,uCAAuC,EAAE,GAAG,EAAE;IACjD,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACjD,MAAM,OAAO,GAAG,IAAI,iBAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IACvC,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAE/B,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrC,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAE9C,YAAY,CAAC,SAAS,EAAE,CAAC;IACzB,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrC,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IAE5C,YAAY,CAAC,SAAS,EAAE,CAAC;IACzB,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC/B,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrC,MAAM,CAAC,YAAY,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAE9C,YAAY,CAAC,SAAS,EAAE,CAAC;IACzB,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;IACrC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;AAC9C,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Monitor} from './monitor';\n\ntest('callback is called when state changes', () => {\n  const reducer = jest.fn().mockReturnValue('foo');\n  const monitor = new Monitor([reducer]);\n  const mockCallback = jest.fn();\n\n  monitor.ifStateChanged(mockCallback);\n  expect(mockCallback).toHaveBeenCalledTimes(1);\n\n  mockCallback.mockReset();\n  monitor.ifStateChanged(mockCallback);\n  monitor.ifStateChanged(mockCallback);\n  expect(mockCallback).not.toHaveBeenCalled();\n\n  mockCallback.mockReset();\n  reducer.mockReturnValue('bar');\n  monitor.ifStateChanged(mockCallback);\n  expect(mockCallback).toHaveBeenCalledTimes(1);\n\n  mockCallback.mockReset();\n  monitor.ifStateChanged(mockCallback);\n  expect(mockCallback).not.toHaveBeenCalled();\n});\n"]}
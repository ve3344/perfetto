{"version":3,"file":"pinCujScoped.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/handlers/pinCujScoped.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  expandProcessName,\n  CujScopedMetricData,\n  MetricHandler,\n  JankType,\n} from './metricUtils';\nimport {NUM} from '../../../trace_processor/query_result';\nimport {Trace} from '../../../public/trace';\n\n// TODO(primiano): make deps check stricter, we shouldn't allow plugins to\n// depend on each other.\nimport {focusOnSlice} from '../../dev.perfetto.AndroidCujs/trackUtils';\nimport {addDebugSliceTrack} from '../../../components/tracks/debug_tracks';\n\nconst ENABLE_FOCUS_ON_FIRST_JANK = true;\n\nclass PinCujScopedJank implements MetricHandler {\n  /**\n   * Matches metric key & return parsed data if successful.\n   *\n   * @param {string} metricKey The metric key to match.\n   * @returns {CujScopedMetricData | undefined} Parsed data or undefined if no match.\n   */\n  public match(metricKey: string): CujScopedMetricData | undefined {\n    const matcher =\n      /perfetto_cuj_(?<process>.*)-(?<cujName>.*)-.*-missed_(?<jankType>frames|sf_frames|app_frames)/;\n    const match = matcher.exec(metricKey);\n    if (!match?.groups) {\n      return undefined;\n    }\n    const metricData: CujScopedMetricData = {\n      process: expandProcessName(match.groups.process),\n      cujName: match.groups.cujName,\n      jankType: match.groups.jankType as JankType,\n    };\n    return metricData;\n    1;\n  }\n\n  /**\n   * Adds the debug tracks for cuj Scoped jank metrics.\n   *\n   * @param {CujScopedMetricData} metricData Parsed metric data for the cuj scoped jank\n   * @param {Trace} ctx PluginContextTrace for trace related properties and methods\n   * @returns {void} Adds one track for Jank CUJ slice and one for Janky CUJ frames\n   */\n  public async addMetricTrack(metricData: CujScopedMetricData, ctx: Trace) {\n    // TODO: b/349502258 - Refactor to single API\n    const {tableName, ...config} = await this.cujScopedTrackConfig(\n      metricData,\n      ctx,\n    );\n    addDebugSliceTrack({trace: ctx, ...config});\n    if (ENABLE_FOCUS_ON_FIRST_JANK) {\n      await this.focusOnFirstJank(ctx, tableName);\n    }\n  }\n\n  private async cujScopedTrackConfig(\n    metricData: CujScopedMetricData,\n    ctx: Trace,\n  ) {\n    let jankTypeFilter;\n    let jankTypeDisplayName = 'all';\n    if (metricData.jankType?.includes('app')) {\n      jankTypeFilter = ' AND app_missed > 0';\n      jankTypeDisplayName = 'app';\n    } else if (metricData.jankType?.includes('sf')) {\n      jankTypeFilter = ' AND sf_missed > 0';\n      jankTypeDisplayName = 'sf';\n    }\n    const cuj = metricData.cujName;\n    const processName = metricData.process;\n\n    const tableWithJankyFramesName = `_janky_frames_during_cuj_from_metric_key_${Math.floor(Math.random() * 1_000_000)}`;\n\n    const createJankyCujFrameTable = `\n      CREATE OR REPLACE PERFETTO TABLE ${tableWithJankyFramesName} AS\n      SELECT\n        f.vsync as id,\n        f.ts AS ts,\n        f.dur as dur\n      FROM android_jank_cuj_frame f LEFT JOIN android_jank_cuj cuj USING (cuj_id)\n      WHERE cuj.process_name = \"${processName}\"\n      AND cuj_name = \"${cuj}\" ${jankTypeFilter}\n    `;\n\n    await ctx.engine.query(createJankyCujFrameTable);\n\n    const jankyFramesDuringCujQuery = `\n      SELECT id, ts, dur\n      FROM ${tableWithJankyFramesName}\n    `;\n\n    const trackName = jankTypeDisplayName + ' missed frames in ' + processName;\n\n    const cujScopedJankSlice = {\n      data: {\n        sqlSource: jankyFramesDuringCujQuery,\n        columns: ['id', 'ts', 'dur'],\n      },\n      columns: {ts: 'ts', dur: 'dur', name: 'id'},\n      argColumns: ['id', 'ts', 'dur'],\n      trackName,\n    };\n\n    return {\n      ...cujScopedJankSlice,\n      tableName: tableWithJankyFramesName,\n    };\n  }\n\n  private async focusOnFirstJank(ctx: Trace, tableWithJankyFramesName: string) {\n    const queryForFirstJankyFrame = `\n      SELECT id as slice_id, track_id\n      FROM actual_frame_timeline_slice\n      WHERE name = cast_string!(\n        (SELECT id FROM ${tableWithJankyFramesName} LIMIT 1)\n      );\n    `;\n    const queryResult = await ctx.engine.query(queryForFirstJankyFrame);\n    if (queryResult.numRows() === 0) {\n      return;\n    }\n    const row = queryResult.firstRow({\n      slice_id: NUM,\n      track_id: NUM,\n    });\n    focusOnSlice(ctx, row.slice_id);\n  }\n}\n\nexport const pinCujScopedJankInstance = new PinCujScopedJank();\n"]}
{"version":3,"file":"pinBlockingCall_unittest.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/handlers/pinBlockingCall_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAGjC,uDAAiE;AAEjE,MAAM,gBAAgB,GAGhB;IACJ;QACE,WAAW,EACT,mJAAmJ;QACrJ,cAAc,EAAE;YACd,OAAO,EAAE,uCAAuC;YAChD,OAAO,EAAE,gBAAgB;YACzB,gBAAgB,EAAE,WAAW;YAC7B,WAAW,EAAE,mBAAmB;SACjC;KACF;IAED;QACE,WAAW,EACT,uMAAuM;QACzM,cAAc,EAAE;YACd,OAAO,EAAE,sBAAsB;YAC/B,OAAO,EAAE,8CAA8C;YACvD,gBAAgB,EACd,2DAA2D;YAC7D,WAAW,EAAE,UAAU;SACxB;KACF;IACD;QACE,WAAW,EACT,iLAAiL;QACnL,cAAc,EAAE;YACd,OAAO,EAAE,sBAAsB;YAC/B,OAAO,EAAE,wBAAwB;YACjC,gBAAgB,EACd,2DAA2D;YAC7D,WAAW,EAAE,UAAU;SACxB;KACF;CACF,CAAC;AAEF,MAAM,kBAAkB,GAAa;IACnC,4CAA4C;IAC5C,+EAA+E;CAChF,CAAC;AAEF,MAAM,MAAM,GAAG,gDAA8B,CAAC;AAE9C,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,KAAK,MAAM,QAAQ,IAAI,gBAAgB,EAAE,CAAC;YACxC,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtD,8DAA8D;YAC9D,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,KAAK,MAAM,QAAQ,IAAI,kBAAkB,EAAE,CAAC;YAC1C,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE1C,MAAM,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,CAAC;QACrC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BlockingCallMetricData} from './metricUtils';\nimport {pinBlockingCallHandlerInstance} from './pinBlockingCall';\n\nconst validMetricsTest: {\n  inputMetric: string;\n  expectedOutput: BlockingCallMetricData;\n}[] = [\n  {\n    inputMetric:\n      'perfetto_android_blocking_call-cuj-name-com.google.android.apps.nexuslauncher-name-TASKBAR_EXPAND-blocking_calls-name-animation-total_dur_ms-mean',\n    expectedOutput: {\n      process: 'com.google.android.apps.nexuslauncher',\n      cujName: 'TASKBAR_EXPAND',\n      blockingCallName: 'animation',\n      aggregation: 'total_dur_ms-mean',\n    },\n  },\n\n  {\n    inputMetric:\n      'perfetto_android_blocking_call-cuj-name-com.android.systemui-name-NOTIFICATION_SHADE_EXPAND_COLLAPSE::Collapse-blocking_calls-name-AIDL::java::IPackageManager::isProtectedBroadcast::server-cnt-mean',\n    expectedOutput: {\n      process: 'com.android.systemui',\n      cujName: 'NOTIFICATION_SHADE_EXPAND_COLLAPSE::Collapse',\n      blockingCallName:\n        'AIDL::java::IPackageManager::isProtectedBroadcast::server',\n      aggregation: 'cnt-mean',\n    },\n  },\n  {\n    inputMetric:\n      'perfetto_android_blocking_call-cuj-name-com.android.systemui-name-SPLASHSCREEN_EXIT_ANIM-blocking_calls-name-AIDL::java::IPackageManager::isProtectedBroadcast::server-cnt-mean',\n    expectedOutput: {\n      process: 'com.android.systemui',\n      cujName: 'SPLASHSCREEN_EXIT_ANIM',\n      blockingCallName:\n        'AIDL::java::IPackageManager::isProtectedBroadcast::server',\n      aggregation: 'cnt-mean',\n    },\n  },\n];\n\nconst invalidMetricsTest: string[] = [\n  'perfetto_ft_launcher-missed_sf_frames-mean',\n  'perfetto_cuj_launcher-RECENTS_SCROLLING-counter_metrics-missed_sf_frames-mean',\n];\n\nconst tester = pinBlockingCallHandlerInstance;\n\ndescribe('testMetricParser_match', () => {\n  it('parses metrics and returns expected data', () => {\n    for (const testCase of validMetricsTest) {\n      const parsedData = tester.match(testCase.inputMetric);\n      // without this explicit check, undefined also passes the test\n      expect(parsedData).toBeDefined();\n      if (parsedData) {\n        expect(parsedData).toEqual(testCase.expectedOutput);\n      }\n    }\n  });\n  it('parses metrics and returns undefined', () => {\n    for (const testCase of invalidMetricsTest) {\n      const parsedData = tester.match(testCase);\n\n      expect(parsedData).toBeUndefined();\n    }\n  });\n});\n"]}
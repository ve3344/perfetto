{"version":3,"file":"fullTraceJankMetricHandler_unittest.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/handlers/fullTraceJankMetricHandler_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAGjC,6EAAsE;AAEtE,MAAM,gBAAgB,GAGhB;IACJ;QACE,WAAW,EAAE,6CAA6C;QAC1D,cAAc,EAAE;YACd,OAAO,EAAE,uCAAuC;YAChD,QAAQ,EAAE,YAAY;SACvB;KACF;IACD;QACE,WAAW,EAAE,4CAA4C;QACzD,cAAc,EAAE;YACd,OAAO,EAAE,sBAAsB;YAC/B,QAAQ,EAAE,WAAW;SACtB;KACF;IACD;QACE,WAAW,EAAE,6CAA6C;QAC1D,cAAc,EAAE;YACd,OAAO,EAAE,sBAAsB;YAC/B,QAAQ,EAAE,YAAY;SACvB;KACF;CACF,CAAC;AAEF,MAAM,kBAAkB,GAAa;IACnC,+EAA+E;IAC/E,mJAAmJ;CACpJ,CAAC;AAEF,MAAM,MAAM,GAAG,qDAAwB,CAAC;AAExC,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;QAClD,KAAK,MAAM,QAAQ,IAAI,gBAAgB,EAAE,CAAC;YACxC,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;YACtD,8DAA8D;YAC9D,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;QAC9C,KAAK,MAAM,QAAQ,IAAI,kBAAkB,EAAE,CAAC;YAC1C,MAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAE1C,MAAM,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,CAAC;QACrC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {FullTraceMetricData} from './metricUtils';\nimport {pinFullTraceJankInstance} from './fullTraceJankMetricHandler';\n\nconst validMetricsTest: {\n  inputMetric: string;\n  expectedOutput: FullTraceMetricData;\n}[] = [\n  {\n    inputMetric: 'perfetto_ft_launcher-missed_app_frames-mean',\n    expectedOutput: {\n      process: 'com.google.android.apps.nexuslauncher',\n      jankType: 'app_frames',\n    },\n  },\n  {\n    inputMetric: 'perfetto_ft_systemui-missed_sf_frames-mean',\n    expectedOutput: {\n      process: 'com.android.systemui',\n      jankType: 'sf_frames',\n    },\n  },\n  {\n    inputMetric: 'perfetto_ft_systemui-missed_app_frames-mean',\n    expectedOutput: {\n      process: 'com.android.systemui',\n      jankType: 'app_frames',\n    },\n  },\n];\n\nconst invalidMetricsTest: string[] = [\n  'perfetto_cuj_launcher-RECENTS_SCROLLING-counter_metrics-missed_sf_frames-mean',\n  'perfetto_android_blocking_call-cuj-name-com.google.android.apps.nexuslauncher-name-TASKBAR_EXPAND-blocking_calls-name-animation-total_dur_ms-mean',\n];\n\nconst tester = pinFullTraceJankInstance;\n\ndescribe('testMetricParser_match', () => {\n  it('parses metrics and returns expected data', () => {\n    for (const testCase of validMetricsTest) {\n      const parsedData = tester.match(testCase.inputMetric);\n      // without this explicit check, undefined also passes the test\n      expect(parsedData).toBeDefined();\n      if (parsedData) {\n        expect(parsedData).toEqual(testCase.expectedOutput);\n      }\n    }\n  });\n  it('parses metrics and returns undefined', () => {\n    for (const testCase of invalidMetricsTest) {\n      const parsedData = tester.match(testCase);\n\n      expect(parsedData).toBeUndefined();\n    }\n  });\n});\n"]}
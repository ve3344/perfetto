{"version":3,"file":"pinBlockingCall.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/handlers/pinBlockingCall.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,+CAIuB;AAEvB,6EAAoE;AACpE,0EAA2E;AAE3E,MAAM,yBAAyB;IAC7B;;;;;OAKG;IACI,KAAK,CAAC,SAAiB;QAC5B,MAAM,OAAO,GACX,iJAAiJ,CAAC;QACpJ,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;YACnB,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,MAAM,UAAU,GAA2B;YACzC,OAAO,EAAE,IAAA,+BAAiB,EAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;YAChD,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,OAAO;YAC7B,gBAAgB,EAAE,KAAK,CAAC,MAAM,CAAC,gBAAgB;YAC/C,WAAW,EAAE,KAAK,CAAC,MAAM,CAAC,WAAW;SACtC,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACI,cAAc,CAAC,UAAkC,EAAE,GAAU;QAClE,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QACnC,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;QACxD,IAAA,iCAAkB,EAAC,EAAC,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,EAAC,CAAC,CAAC;IAC9C,CAAC;IAEO,YAAY,CAAC,GAAU,EAAE,UAAkC;QACjE,MAAM,SAAS,GAAG,aAAa,UAAU,CAAC,OAAO,EAAE,CAAC;QACpD,IAAA,+CAAoB,EAAC,GAAG,EAAE,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3D,CAAC;IAEO,uBAAuB,CAAC,UAAkC;QAChE,MAAM,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC;QAC/B,MAAM,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC;QACvC,MAAM,gBAAgB,GAAG,UAAU,CAAC,gBAAgB,CAAC;QAErD,qEAAqE;QACrE,MAAM,0BAA0B,GAAG;;;0BAGb,WAAW;wBACb,GAAG;oBACP,gBAAgB;GACjC,CAAC;QAEA,MAAM,SAAS,GAAG,oBAAoB,GAAG,WAAW,CAAC;QACrD,OAAO;YACL,IAAI,EAAE;gBACJ,SAAS,EAAE,0BAA0B;gBACrC,OAAO,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;aAC/B;YACD,OAAO,EAAE,EAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAC;YAC7C,UAAU,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;YACjC,SAAS;SACV,CAAC;IACJ,CAAC;CACF;AAEY,QAAA,8BAA8B,GAAG,IAAI,yBAAyB,EAAE,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  expandProcessName,\n  BlockingCallMetricData,\n  MetricHandler,\n} from './metricUtils';\nimport {Trace} from '../../../public/trace';\nimport {addJankCUJDebugTrack} from '../../dev.perfetto.AndroidCujs';\nimport {addDebugSliceTrack} from '../../../components/tracks/debug_tracks';\n\nclass BlockingCallMetricHandler implements MetricHandler {\n  /**\n   * Match metric key & return parsed data if successful.\n   *\n   * @param {string} metricKey The metric key to match.\n   * @returns {BlockingCallMetricData | undefined} Parsed data or undefined if no match.\n   */\n  public match(metricKey: string): BlockingCallMetricData | undefined {\n    const matcher =\n      /perfetto_android_blocking_call-cuj-name-(?<process>.*)-name-(?<cujName>.*)-blocking_calls-name-(?<blockingCallName>([^\\-]*))-(?<aggregation>.*)/;\n    const match = matcher.exec(metricKey);\n    if (!match?.groups) {\n      return undefined;\n    }\n    const metricData: BlockingCallMetricData = {\n      process: expandProcessName(match.groups.process),\n      cujName: match.groups.cujName,\n      blockingCallName: match.groups.blockingCallName,\n      aggregation: match.groups.aggregation,\n    };\n    return metricData;\n  }\n\n  /**\n   * Adds the debug tracks for Blocking Call metrics\n   *\n   * @param {BlockingCallMetricData} metricData Parsed metric data for the cuj scoped jank\n   * @param {Trace} ctx PluginContextTrace for trace related properties and methods\n   * @returns {void} Adds one track for Jank CUJ slice and one for Janky CUJ frames\n   */\n  public addMetricTrack(metricData: BlockingCallMetricData, ctx: Trace): void {\n    this.pinSingleCuj(ctx, metricData);\n    const config = this.blockingCallTrackConfig(metricData);\n    addDebugSliceTrack({trace: ctx, ...config});\n  }\n\n  private pinSingleCuj(ctx: Trace, metricData: BlockingCallMetricData) {\n    const trackName = `Jank CUJ: ${metricData.cujName}`;\n    addJankCUJDebugTrack(ctx, trackName, metricData.cujName);\n  }\n\n  private blockingCallTrackConfig(metricData: BlockingCallMetricData) {\n    const cuj = metricData.cujName;\n    const processName = metricData.process;\n    const blockingCallName = metricData.blockingCallName;\n\n    // TODO: b/296349525 - Migrate jank tables from run metrics to stdlib\n    const blockingCallDuringCujQuery = `\n  SELECT name, ts, dur\n  FROM main_thread_slices_scoped_to_cujs\n  WHERE process_name = \"${processName}\"\n      AND cuj_name = \"${cuj}\"\n      AND name = \"${blockingCallName}\"\n  `;\n\n    const trackName = 'Blocking calls in ' + processName;\n    return {\n      data: {\n        sqlSource: blockingCallDuringCujQuery,\n        columns: ['name', 'ts', 'dur'],\n      },\n      columns: {ts: 'ts', dur: 'dur', name: 'name'},\n      argColumns: ['name', 'ts', 'dur'],\n      trackName,\n    };\n  }\n}\n\nexport const pinBlockingCallHandlerInstance = new BlockingCallMetricHandler();\n"]}
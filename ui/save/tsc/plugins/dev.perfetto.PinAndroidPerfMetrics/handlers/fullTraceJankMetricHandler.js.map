{"version":3,"file":"fullTraceJankMetricHandler.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/handlers/fullTraceJankMetricHandler.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,+CAKuB;AAEvB,0EAA2E;AAE3E,MAAM,0BAA0B;IAC9B;;;;;OAKG;IACI,KAAK,CAAC,SAAiB;QAC5B,MAAM,OAAO,GACX,4EAA4E,CAAC;QAC/E,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;YACnB,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,MAAM,UAAU,GAAwB;YACtC,OAAO,EAAE,IAAA,+BAAiB,EAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;YAChD,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,QAAoB;SAC5C,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,cAAc,CAAC,UAA+B,EAAE,GAAU;QACrE,MAAM,gBAAgB,GAAG;;;KAGxB,CAAC;QACF,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACpD,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACzC,IAAA,iCAAkB,EAAC,EAAC,KAAK,EAAE,GAAG,EAAE,GAAG,MAAM,EAAC,CAAC,CAAC;IAC9C,CAAC;IAEO,mBAAmB,CAAC,UAA+B;QACzD,IAAI,cAAc,CAAC;QACnB,IAAI,mBAAmB,CAAC;QACxB,IAAI,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YACzC,cAAc,GAAG,0CAA0C,CAAC;YAC5D,mBAAmB,GAAG,KAAK,CAAC;QAC9B,CAAC;aAAM,IAAI,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YAC/C,cAAc,GAAG,yCAAyC,CAAC;YAC3D,mBAAmB,GAAG,IAAI,CAAC;QAC7B,CAAC;aAAM,CAAC;YACN,cAAc,GAAG,0BAA0B,CAAC;YAC5C,mBAAmB,GAAG,KAAK,CAAC;QAC9B,CAAC;QACD,MAAM,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC;QAEvC,2EAA2E;QAC3E,MAAM,kBAAkB,GAAG;;;;;UAKrB,cAAc,CAAC,CAAC,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,EAAE;;;;;;;;;;;;;;;;8BAgBzB,WAAW,GAAG,CAAC;QACzC,MAAM,oBAAoB,GAAG;YAC3B,MAAM;YACN,IAAI;YACJ,KAAK;YACL,UAAU;YACV,UAAU;YACV,YAAY;YACZ,UAAU;YACV,aAAa;YACb,KAAK;YACL,cAAc;YACd,KAAK;SACN,CAAC;QAEF,MAAM,SAAS,GAAG,mBAAmB,GAAG,oBAAoB,GAAG,WAAW,CAAC;QAE3E,OAAO;YACL,IAAI,EAAE;gBACJ,SAAS,EAAE,kBAAkB;gBAC7B,OAAO,EAAE,oBAAoB;aAC9B;YACD,OAAO,EAAE,EAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAC;YAC7C,UAAU,EAAE,oBAAoB;YAChC,SAAS,EAAE,SAAS;SACrB,CAAC;IACJ,CAAC;CACF;AAEY,QAAA,wBAAwB,GAAG,IAAI,0BAA0B,EAAE,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  expandProcessName,\n  FullTraceMetricData,\n  JankType,\n  MetricHandler,\n} from './metricUtils';\nimport {Trace} from '../../../public/trace';\nimport {addDebugSliceTrack} from '../../../components/tracks/debug_tracks';\n\nclass FullTraceJankMetricHandler implements MetricHandler {\n  /**\n   * Matches metric key & return parsed data if successful.\n   *\n   * @param {string} metricKey The metric key to match.\n   * @returns {FullTraceMetricData | undefined} Parsed data or undefined if no match.\n   */\n  public match(metricKey: string): FullTraceMetricData | undefined {\n    const matcher =\n      /perfetto_ft_(?<process>.*)-missed_(?<jankType>frames|sf_frames|app_frames)/;\n    const match = matcher.exec(metricKey);\n    if (!match?.groups) {\n      return undefined;\n    }\n    const metricData: FullTraceMetricData = {\n      process: expandProcessName(match.groups.process),\n      jankType: match.groups.jankType as JankType,\n    };\n    return metricData;\n  }\n\n  /**\n   * Adds the debug track for full trace jank metrics\n   *\n   * @param {FullTraceMetricData} metricData Parsed metric data for the full trace jank\n   * @param {Trace} ctx PluginContextTrace for trace related properties and methods\n   * @returns {void} Adds one track for Jank slice\n   */\n  public async addMetricTrack(metricData: FullTraceMetricData, ctx: Trace) {\n    const INCLUDE_PREQUERY = `\n    INCLUDE PERFETTO MODULE android.frames.jank_type;\n    INCLUDE PERFETTO MODULE slices.slices;\n    `;\n    const config = this.fullTraceJankConfig(metricData);\n    await ctx.engine.query(INCLUDE_PREQUERY);\n    addDebugSliceTrack({trace: ctx, ...config});\n  }\n\n  private fullTraceJankConfig(metricData: FullTraceMetricData) {\n    let jankTypeFilter;\n    let jankTypeDisplayName;\n    if (metricData.jankType?.includes('app')) {\n      jankTypeFilter = ' android_is_app_jank_type(display_value)';\n      jankTypeDisplayName = 'app';\n    } else if (metricData.jankType?.includes('sf')) {\n      jankTypeFilter = ' android_is_sf_jank_type(display_value)';\n      jankTypeDisplayName = 'sf';\n    } else {\n      jankTypeFilter = \" display_value != 'None'\";\n      jankTypeDisplayName = 'all';\n    }\n    const processName = metricData.process;\n\n    // TODO: b/324245198 - Refactor when jank_type added to android_frame_stats\n    const fullTraceJankQuery = `\n      WITH filtered_args AS (\n        SELECT DISTINCT arg_set_id\n        FROM args\n        WHERE key = 'Jank type'\n        ${jankTypeFilter ? 'AND ' + jankTypeFilter : ''}\n      )\n      SELECT\n        name,\n        ts as ts,\n        dur as dur,\n        track_id as track_id,\n        id as slice_id,\n        thread_dur as thread_dur,\n        category,\n        thread_name,\n        tid as tid,\n        process_name,\n        pid as pid\n      FROM _slice_with_thread_and_process_info\n      JOIN filtered_args ON filtered_args.arg_set_id = _slice_with_thread_and_process_info.arg_set_id\n      WHERE process_name = '${processName}'`;\n    const fullTraceJankColumns = [\n      'name',\n      'ts',\n      'dur',\n      'track_id',\n      'slice_id',\n      'thread_dur',\n      'category',\n      'thread_name',\n      'tid',\n      'process_name',\n      'pid',\n    ];\n\n    const trackName = jankTypeDisplayName + ' missed frames in ' + processName;\n\n    return {\n      data: {\n        sqlSource: fullTraceJankQuery,\n        columns: fullTraceJankColumns,\n      },\n      columns: {ts: 'ts', dur: 'dur', name: 'name'},\n      argColumns: fullTraceJankColumns,\n      tableName: trackName,\n    };\n  }\n}\n\nexport const pinFullTraceJankInstance = new FullTraceJankMetricHandler();\n"]}
{"version":3,"file":"metricUtils.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/handlers/metricUtils.ts"],"names":[],"mappings":";;AA8GA,8CAUC;AAhBD;;;;;GAKG;AACH,SAAgB,iBAAiB,CAAC,iBAAyB;IACzD,IAAI,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;QAC3C,OAAO,sBAAsB,CAAC;IAChC,CAAC;SAAM,IAAI,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;QAClD,OAAO,uCAAuC,CAAC;IACjD,CAAC;SAAM,IAAI,iBAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,EAAE,CAAC;QACxD,OAAO,4BAA4B,CAAC;IACtC,CAAC;SAAM,CAAC;QACN,OAAO,iBAAiB,CAAC;IAC3B,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {Trace} from '../../../public/trace';\n\n/**\n * Represents data for a Full trace metric\n * Eg.- perfetto_ft_launcher-missed_sf_frames-mean\n * ft here stands for full trace\n */\nexport interface FullTraceMetricData {\n  /** Process name (e.g., com.google.android.apps.nexuslauncher) */\n  process: string;\n\n  /** Jank type (e.g., app or sf missed frame) */\n  jankType: JankType;\n}\n\n/**\n * Represents data for a CUJ scoped metric\n * Eg.- perfetto_cuj_launcher-RECENTS_SCROLLING-counter_metrics-missed_sf_frames-mean\n */\nexport interface CujScopedMetricData {\n  /** Process name (e.g., com.google.android.apps.nexuslauncher) */\n  process: string;\n\n  /** Cuj interaction name (e.g., RECENTS_SCROLLING) */\n  cujName: string;\n\n  /** Jank type (e.g., app or sf missed frame) */\n  jankType: JankType;\n}\n\n/**\n * Represents data for a Blocking Call metric\n * Eg.- perfetto_android_blocking_call-cuj-name-com.google.android.apps.nexuslauncher-name-TASKBAR_EXPAND-blocking_calls-name-animation-total_dur_ms-mean\n */\nexport interface BlockingCallMetricData {\n  /** Process name (e.g., com.google.android.apps.nexuslauncher) */\n  process: string;\n\n  /** Cuj interaction name (e.g., TASKBAR_EXPAND) */\n  cujName: string;\n\n  /** Blocking Call name (e.g., animation) */\n  blockingCallName: string;\n\n  /** aggregation type (e.g., total_dur_ms-mean) */\n  aggregation: string;\n}\n\n/** Represents a cuj to be pinned. */\nexport interface CujMetricData {\n  cujName: string;\n}\n\n// Common MetricData for all handler. If new needed then add here.\nexport type MetricData =\n  | FullTraceMetricData\n  | CujScopedMetricData\n  | BlockingCallMetricData\n  | CujMetricData;\n\n// Common JankType for cujScoped and fullTrace metrics\nexport type JankType = 'sf_frames' | 'app_frames' | 'frames';\n\n/**\n * Common interface for debug track handlers\n */\nexport interface MetricHandler {\n  /**\n   * Match metric key & return parsed data if successful.\n   *\n   * @param {string} metricKey The metric key to match.\n   * @returns {MetricData | undefined} Parsed data or undefined if no match.\n   */\n  match(metricKey: string): MetricData | undefined;\n\n  /**\n   * Add debug track for parsed metric data.\n   *\n   * @param {MetricData} metricData The parsed metric data.\n   * @param {Trace} ctx context for trace methods and properties\n   * @returns {void}\n   */\n  addMetricTrack(metricData: MetricData, ctx: Trace): void;\n}\n\n// Pair for matching metric and its handler\nexport type MetricHandlerMatch = {\n  metricData: MetricData;\n  metricHandler: MetricHandler;\n};\n\n/**\n * Expand process name for specific system processes\n *\n * @param {string} metricProcessName Name of the processes\n * @returns {string} Either the same or expanded name for abbreviated process names\n */\nexport function expandProcessName(metricProcessName: string): string {\n  if (metricProcessName.includes('systemui')) {\n    return 'com.android.systemui';\n  } else if (metricProcessName.includes('launcher')) {\n    return 'com.google.android.apps.nexuslauncher';\n  } else if (metricProcessName.includes('surfaceflinger')) {\n    return '/system/bin/surfaceflinger';\n  } else {\n    return metricProcessName;\n  }\n}\n"]}
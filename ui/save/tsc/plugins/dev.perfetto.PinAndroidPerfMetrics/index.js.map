{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.PinAndroidPerfMetrics/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {METRIC_HANDLERS} from './handlers/handlerRegistry';\nimport {MetricData, MetricHandlerMatch} from './handlers/metricUtils';\nimport {PLUGIN_ID} from './pluginId';\nimport AndroidCujsPlugin from '../dev.perfetto.AndroidCujs';\n\nconst JANK_CUJ_QUERY_PRECONDITIONS = `\n  SELECT RUN_METRIC('android/android_blocking_calls_cuj_metric.sql');\n`;\n\nfunction getMetricsFromHash(): string[] {\n  const metricVal = location.hash;\n  const regex = new RegExp(`${PLUGIN_ID}:metrics=(.*)`);\n  const match = metricVal.match(regex);\n  if (match === null) {\n    return [];\n  }\n  const capturedString = match[1];\n  let metricList: string[] = [];\n  if (capturedString.includes('--')) {\n    metricList = capturedString.split('--');\n  } else {\n    metricList = [capturedString];\n  }\n  return metricList.map((metric) => decodeURIComponent(metric));\n}\n\nlet metrics: string[];\n\n/**\n * Plugin that adds and pins the debug track for the metric passed\n * For more context -\n * This plugin reads the names of regressed metrics from the url upon loading\n * It then checks the metric names against some handlers and if they\n * match it accordingly adds the debug tracks for them\n * This way when comparing two different perfetto traces before and after\n * the regression, the user will not have to manually search for the\n * slices related to the regressed metric\n */\nexport default class implements PerfettoPlugin {\n  static readonly id = PLUGIN_ID;\n  static readonly dependencies = [AndroidCujsPlugin];\n\n  static onActivate(): void {\n    metrics = getMetricsFromHash();\n  }\n\n  async onTraceLoad(ctx: Trace) {\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.PinAndroidPerfMetrics#PinAndroidPerfMetrics',\n      name: 'Add and Pin: Jank Metric Slice',\n      callback: async (metric) => {\n        metric = prompt('Metrics names (separated by comma)', '');\n        if (metric === null) return;\n        const metricList = metric.split(',');\n        this.callHandlers(metricList, ctx);\n      },\n    });\n    if (metrics.length !== 0) {\n      this.callHandlers(metrics, ctx);\n    }\n  }\n\n  private async callHandlers(metricsList: string[], ctx: Trace) {\n    // List of metrics that actually match some handler\n    const metricsToShow: MetricHandlerMatch[] =\n      this.getMetricsToShow(metricsList);\n\n    if (metricsToShow.length === 0) {\n      return;\n    }\n\n    await ctx.engine.query(JANK_CUJ_QUERY_PRECONDITIONS);\n    for (const {metricData, metricHandler} of metricsToShow) {\n      metricHandler.addMetricTrack(metricData, ctx);\n    }\n  }\n\n  private getMetricsToShow(metricList: string[]): MetricHandlerMatch[] {\n    const sortedMetricList = [...metricList].sort();\n    const validMetrics: MetricHandlerMatch[] = [];\n    const alreadyMatchedMetricData: Set<string> = new Set();\n    for (const metric of sortedMetricList) {\n      for (const metricHandler of METRIC_HANDLERS) {\n        const metricData = metricHandler.match(metric);\n        if (!metricData) continue;\n        const jsonMetricData = this.metricDataToJson(metricData);\n        if (!alreadyMatchedMetricData.has(jsonMetricData)) {\n          alreadyMatchedMetricData.add(jsonMetricData);\n          validMetrics.push({\n            metricData: metricData,\n            metricHandler: metricHandler,\n          });\n        }\n      }\n    }\n    return validMetrics;\n  }\n\n  private metricDataToJson(metricData: MetricData): string {\n    // Used to have a deterministic keys order.\n    return JSON.stringify(metricData, Object.keys(metricData).sort());\n  }\n}\n"]}
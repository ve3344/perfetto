{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.HeapProfile/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {HEAP_PROFILE_TRACK_KIND} from '../../public/track_kinds';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {LONG, NUM, STR} from '../../trace_processor/query_result';\nimport {HeapProfileTrack} from './heap_profile_track';\nimport {TrackNode} from '../../public/workspace';\nimport {createPerfettoTable} from '../../trace_processor/sql_utils';\nimport ProcessThreadGroupsPlugin from '../dev.perfetto.ProcessThreadGroups';\n\nfunction getUriForTrack(upid: number): string {\n  return `/process_${upid}/heap_profile`;\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.HeapProfile';\n  static readonly dependencies = [ProcessThreadGroupsPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const it = await ctx.engine.query(`\n      select value from stats\n      where name = 'heap_graph_non_finalized_graph'\n    `);\n    const incomplete = it.firstRow({value: NUM}).value > 0;\n\n    const result = await ctx.engine.query(`\n      select distinct upid from heap_profile_allocation\n      union\n      select distinct upid from heap_graph_object\n    `);\n    for (const it = result.iter({upid: NUM}); it.valid(); it.next()) {\n      const upid = it.upid;\n      const uri = getUriForTrack(upid);\n      const title = 'Heap Profile';\n      const tableName = `_heap_profile_${upid}`;\n\n      createPerfettoTable(\n        ctx.engine,\n        tableName,\n        `\n          with\n            heaps as (select group_concat(distinct heap_name) h from heap_profile_allocation where upid = ${upid}),\n            allocation_tses as (select distinct ts from heap_profile_allocation where upid = ${upid}),\n            graph_tses as (select distinct graph_sample_ts from heap_graph_object where upid = ${upid})\n          select\n            *,\n            0 AS dur,\n            0 AS depth\n          from (\n            select\n              (\n                select a.id\n                from heap_profile_allocation a\n                where a.ts = t.ts\n                order by a.id\n                limit 1\n              ) as id,\n              ts,\n              'heap_profile:' || (select h from heaps) AS type\n            from allocation_tses t\n            union all\n            select\n              (\n                select o.id\n                from heap_graph_object o\n                where o.graph_sample_ts = g.graph_sample_ts\n                order by o.id\n                limit 1\n              ) as id,\n              graph_sample_ts AS ts,\n              'graph' AS type\n            from graph_tses g\n          )\n        `,\n      );\n\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        tags: {\n          kind: HEAP_PROFILE_TRACK_KIND,\n          upid,\n        },\n        track: new HeapProfileTrack(ctx, uri, tableName, upid, incomplete),\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForProcess(upid);\n      const track = new TrackNode({uri, title, sortOrder: -30});\n      group?.addChildInOrder(track);\n    }\n\n    ctx.onTraceReady.addListener(async () => {\n      await selectFirstHeapProfile(ctx);\n    });\n  }\n}\n\nasync function selectFirstHeapProfile(ctx: Trace) {\n  const query = `\n    select * from (\n      select\n        min(ts) AS ts,\n        'heap_profile:' || group_concat(distinct heap_name) AS type,\n        upid\n      from heap_profile_allocation\n      group by upid\n      union\n      select distinct graph_sample_ts as ts, 'graph' as type, upid\n      from heap_graph_object\n    )\n    order by ts\n    limit 1\n  `;\n  const profile = await ctx.engine.query(query);\n  if (profile.numRows() !== 1) return;\n  const row = profile.firstRow({ts: LONG, type: STR, upid: NUM});\n  const upid = row.upid;\n\n  ctx.selection.selectTrackEvent(getUriForTrack(upid), 0);\n}\n"]}
{"version":3,"file":"heap_profile_details_panel.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.HeapProfile/heap_profile_details_panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {assertExists, assertFalse} from '../../base/logging';\nimport {time} from '../../base/time';\nimport {\n  QueryFlamegraph,\n  QueryFlamegraphMetric,\n  metricsFromTableOrSubquery,\n} from '../../components/query_flamegraph';\nimport {convertTraceToPprofAndDownload} from '../../frontend/trace_converter';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {\n  TrackEventDetailsPanel,\n  TrackEventDetailsPanelSerializeArgs,\n} from '../../public/details_panel';\nimport {ProfileType, TrackEventSelection} from '../../public/selection';\nimport {Trace} from '../../public/trace';\nimport {NUM} from '../../trace_processor/query_result';\nimport {Button} from '../../widgets/button';\nimport {Intent} from '../../widgets/common';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {Icon} from '../../widgets/icon';\nimport {Modal, showModal} from '../../widgets/modal';\nimport {Popup} from '../../widgets/popup';\nimport {\n  Flamegraph,\n  FLAMEGRAPH_STATE_SCHEMA,\n  FlamegraphState,\n} from '../../widgets/flamegraph';\n\ninterface Props {\n  ts: time;\n  type: ProfileType;\n}\n\nexport class HeapProfileFlamegraphDetailsPanel\n  implements TrackEventDetailsPanel\n{\n  private readonly flamegraph: QueryFlamegraph;\n  private readonly props: Props;\n  private flamegraphModalDismissed = false;\n\n  readonly serialization: TrackEventDetailsPanelSerializeArgs<FlamegraphState>;\n\n  constructor(\n    private trace: Trace,\n    private heapGraphIncomplete: boolean,\n    private upid: number,\n    sel: TrackEventSelection,\n  ) {\n    const {profileType, ts} = sel;\n    const metrics = flamegraphMetrics(assertExists(profileType), ts, upid);\n    this.serialization = {\n      schema: FLAMEGRAPH_STATE_SCHEMA,\n      state: Flamegraph.createDefaultState(metrics),\n    };\n    this.flamegraph = new QueryFlamegraph(trace, metrics, this.serialization);\n    this.props = {ts, type: assertExists(profileType)};\n  }\n\n  render() {\n    const {type, ts} = this.props;\n    return m(\n      '.flamegraph-profile',\n      this.maybeShowModal(this.trace, type, this.heapGraphIncomplete),\n      m(\n        DetailsShell,\n        {\n          fillParent: true,\n          title: m(\n            '.title',\n            getFlamegraphTitle(type),\n            type === ProfileType.MIXED_HEAP_PROFILE &&\n              m(\n                Popup,\n                {\n                  trigger: m(Icon, {icon: 'warning'}),\n                },\n                m(\n                  '',\n                  {style: {width: '300px'}},\n                  'This is a mixed java/native heap profile, free()s are not visualized. To visualize free()s, remove \"all_heaps: true\" from the config.',\n                ),\n              ),\n          ),\n          description: [],\n          buttons: [\n            m('.time', `Snapshot time: `, m(Timestamp, {ts})),\n            (type === ProfileType.NATIVE_HEAP_PROFILE ||\n              type === ProfileType.JAVA_HEAP_SAMPLES) &&\n              m(Button, {\n                icon: 'file_download',\n                intent: Intent.Primary,\n                onclick: () => {\n                  downloadPprof(this.trace, this.upid, ts);\n                  this.trace.scheduleFullRedraw();\n                },\n              }),\n          ],\n        },\n        assertExists(this.flamegraph).render(),\n      ),\n    );\n  }\n\n  private maybeShowModal(\n    trace: Trace,\n    type: ProfileType,\n    heapGraphIncomplete: boolean,\n  ) {\n    if (type !== ProfileType.JAVA_HEAP_GRAPH || !heapGraphIncomplete) {\n      return undefined;\n    }\n    if (this.flamegraphModalDismissed) {\n      return undefined;\n    }\n    return m(Modal, {\n      title: 'The flamegraph is incomplete',\n      vAlign: 'TOP',\n      content: m(\n        'div',\n        'The current trace does not have a fully formed flamegraph',\n      ),\n      buttons: [\n        {\n          text: 'Show the errors',\n          primary: true,\n          action: () => trace.navigate('#!/info'),\n        },\n        {\n          text: 'Skip',\n          action: () => {\n            this.flamegraphModalDismissed = true;\n            trace.scheduleFullRedraw();\n          },\n        },\n      ],\n    });\n  }\n}\n\nfunction flamegraphMetrics(\n  type: ProfileType,\n  ts: time,\n  upid: number,\n): ReadonlyArray<QueryFlamegraphMetric> {\n  switch (type) {\n    case ProfileType.NATIVE_HEAP_PROFILE:\n      return flamegraphMetricsForHeapProfile(ts, upid, [\n        {\n          name: 'Unreleased Malloc Size',\n          unit: 'B',\n          columnName: 'self_size',\n        },\n        {\n          name: 'Unreleased Malloc Count',\n          unit: '',\n          columnName: 'self_count',\n        },\n        {\n          name: 'Total Malloc Size',\n          unit: 'B',\n          columnName: 'self_alloc_size',\n        },\n        {\n          name: 'Total Malloc Count',\n          unit: '',\n          columnName: 'self_alloc_count',\n        },\n      ]);\n    case ProfileType.HEAP_PROFILE:\n      return flamegraphMetricsForHeapProfile(ts, upid, [\n        {\n          name: 'Unreleased Size',\n          unit: 'B',\n          columnName: 'self_size',\n        },\n        {\n          name: 'Unreleased Count',\n          unit: '',\n          columnName: 'self_count',\n        },\n        {\n          name: 'Total Size',\n          unit: 'B',\n          columnName: 'self_alloc_size',\n        },\n        {\n          name: 'Total Count',\n          unit: '',\n          columnName: 'self_alloc_count',\n        },\n      ]);\n    case ProfileType.JAVA_HEAP_SAMPLES:\n      return flamegraphMetricsForHeapProfile(ts, upid, [\n        {\n          name: 'Unreleased Allocation Size',\n          unit: 'B',\n          columnName: 'self_size',\n        },\n        {\n          name: 'Unreleased Allocation Count',\n          unit: '',\n          columnName: 'self_count',\n        },\n      ]);\n    case ProfileType.MIXED_HEAP_PROFILE:\n      return flamegraphMetricsForHeapProfile(ts, upid, [\n        {\n          name: 'Unreleased Allocation Size (malloc + java)',\n          unit: 'B',\n          columnName: 'self_size',\n        },\n        {\n          name: 'Unreleased Allocation Count (malloc + java)',\n          unit: '',\n          columnName: 'self_count',\n        },\n      ]);\n    case ProfileType.JAVA_HEAP_GRAPH:\n      return [\n        {\n          name: 'Object Size',\n          unit: 'B',\n          dependencySql:\n            'include perfetto module android.memory.heap_graph.class_tree;',\n          statement: `\n            select\n              id,\n              parent_id as parentId,\n              ifnull(name, '[Unknown]') as name,\n              root_type,\n              self_size as value,\n              self_count\n            from _heap_graph_class_tree\n            where graph_sample_ts = ${ts} and upid = ${upid}\n          `,\n          unaggregatableProperties: [\n            {name: 'root_type', displayName: 'Root Type'},\n          ],\n          aggregatableProperties: [\n            {\n              name: 'self_count',\n              displayName: 'Self Count',\n              mergeAggregation: 'SUM',\n            },\n          ],\n        },\n        {\n          name: 'Object Count',\n          unit: '',\n          dependencySql:\n            'include perfetto module android.memory.heap_graph.class_tree;',\n          statement: `\n            select\n              id,\n              parent_id as parentId,\n              ifnull(name, '[Unknown]') as name,\n              root_type,\n              self_size,\n              self_count as value\n            from _heap_graph_class_tree\n            where graph_sample_ts = ${ts} and upid = ${upid}\n          `,\n          unaggregatableProperties: [\n            {name: 'root_type', displayName: 'Root Type'},\n          ],\n        },\n        {\n          name: 'Dominated Object Size',\n          unit: 'B',\n          dependencySql:\n            'include perfetto module android.memory.heap_graph.dominator_class_tree;',\n          statement: `\n            select\n              id,\n              parent_id as parentId,\n              ifnull(name, '[Unknown]') as name,\n              root_type,\n              self_size as value,\n              self_count\n            from _heap_graph_dominator_class_tree\n            where graph_sample_ts = ${ts} and upid = ${upid}\n          `,\n          unaggregatableProperties: [\n            {name: 'root_type', displayName: 'Root Type'},\n          ],\n          aggregatableProperties: [\n            {\n              name: 'self_count',\n              displayName: 'Self Count',\n              mergeAggregation: 'SUM',\n            },\n          ],\n        },\n        {\n          name: 'Dominated Object Count',\n          unit: '',\n          dependencySql:\n            'include perfetto module android.memory.heap_graph.dominator_class_tree;',\n          statement: `\n            select\n              id,\n              parent_id as parentId,\n              ifnull(name, '[Unknown]') as name,\n              root_type,\n              self_size,\n              self_count as value\n            from _heap_graph_class_tree\n            where graph_sample_ts = ${ts} and upid = ${upid}\n          `,\n          unaggregatableProperties: [\n            {name: 'root_type', displayName: 'Root Type'},\n          ],\n        },\n      ];\n    case ProfileType.PERF_SAMPLE:\n      throw new Error('Perf sample not supported');\n  }\n}\n\nfunction flamegraphMetricsForHeapProfile(\n  ts: time,\n  upid: number,\n  metrics: {name: string; unit: string; columnName: string}[],\n) {\n  return metricsFromTableOrSubquery(\n    `\n      (\n        select\n          id,\n          parent_id as parentId,\n          name,\n          mapping_name,\n          source_file,\n          cast(line_number AS text) as line_number,\n          self_size,\n          self_count,\n          self_alloc_size,\n          self_alloc_count\n        from _android_heap_profile_callstacks_for_allocations!((\n          select\n            callsite_id,\n            size,\n            count,\n            max(size, 0) as alloc_size,\n            max(count, 0) as alloc_count\n          from heap_profile_allocation a\n          where a.ts <= ${ts} and a.upid = ${upid}\n        ))\n      )\n    `,\n    metrics,\n    'include perfetto module android.memory.heap_profile.callstacks',\n    [{name: 'mapping_name', displayName: 'Mapping'}],\n    [\n      {\n        name: 'source_file',\n        displayName: 'Source File',\n        mergeAggregation: 'ONE_OR_NULL',\n      },\n      {\n        name: 'line_number',\n        displayName: 'Line Number',\n        mergeAggregation: 'ONE_OR_NULL',\n      },\n    ],\n  );\n}\n\nfunction getFlamegraphTitle(type: ProfileType) {\n  switch (type) {\n    case ProfileType.HEAP_PROFILE:\n      return 'Heap profile';\n    case ProfileType.JAVA_HEAP_GRAPH:\n      return 'Java heap graph';\n    case ProfileType.JAVA_HEAP_SAMPLES:\n      return 'Java heap samples';\n    case ProfileType.MIXED_HEAP_PROFILE:\n      return 'Mixed heap profile';\n    case ProfileType.NATIVE_HEAP_PROFILE:\n      return 'Native heap profile';\n    case ProfileType.PERF_SAMPLE:\n      assertFalse(false, 'Perf sample not supported');\n      return 'Impossible';\n  }\n}\n\nasync function downloadPprof(trace: Trace, upid: number, ts: time) {\n  const pid = await trace.engine.query(\n    `select pid from process where upid = ${upid}`,\n  );\n  if (!trace.traceInfo.downloadable) {\n    showModal({\n      title: 'Download not supported',\n      content: m('div', 'This trace file does not support downloads'),\n    });\n  }\n  const blob = await trace.getTraceFile();\n  convertTraceToPprofAndDownload(blob, pid.firstRow({pid: NUM}).pid, ts);\n}\n"]}
{"version":3,"file":"heap_profile_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.HeapProfile/heap_profile_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0CAA+C;AAC/C,+EAIkD;AAClD,sDAKgC;AAGhC,qEAA6D;AAC7D,6EAA+E;AAE/E,MAAM,gBAAgB,GAAG;IACvB,GAAG,2BAAQ;IACX,IAAI,EAAE,kBAAG;CACV,CAAC;AAMF,MAAa,gBAAiB,SAAQ,iCAGrC;IAIoB;IACA;IACA;IALnB,YACE,KAAY,EACZ,GAAW,EACM,SAAiB,EACjB,IAAY,EACZ,uBAAgC;QAEjD,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAJD,cAAS,GAAT,SAAS,CAAQ;QACjB,SAAI,GAAJ,IAAI,CAAQ;QACZ,4BAAuB,GAAvB,uBAAuB,CAAS;IAGnD,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,UAAU;QACR,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED,UAAU,CAAC,GAAmB;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACvC,OAAO;YACL,GAAG,KAAK;YACR,IAAI,EAAE,IAAA,uBAAW,EAAC,GAAG,CAAC,IAAI,CAAC;SAC5B,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,IAAuC;QACjD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,EAAU;QAEV,MAAM,KAAK,GAAG;;;;;cAKJ,IAAI,CAAC,YAAY,EAAE;mBACd,EAAE;KAChB,CAAC;QAEF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;YACtB,EAAE,EAAE,mBAAI;YACR,GAAG,EAAE,mBAAI;YACT,IAAI,EAAE,kBAAG;SACV,CAAC,CAAC;QAEH,OAAO;YACL,EAAE,EAAE,WAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YACxB,GAAG,EAAE,eAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;YAC9B,WAAW,EAAE,IAAA,uBAAW,EAAC,GAAG,CAAC,IAAI,CAAC;SACnC,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,GAAwB;QACnC,OAAO,IAAI,8DAAiC,CAC1C,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,IAAI,EACT,GAAG,CACJ,CAAC;IACJ,CAAC;CACF;AAxED,4CAwEC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Duration, Time} from '../../base/time';\nimport {\n  BASE_ROW,\n  BaseSliceTrack,\n  OnSliceOverArgs,\n} from '../../components/tracks/base_slice_track';\nimport {\n  ProfileType,\n  profileType,\n  TrackEventDetails,\n  TrackEventSelection,\n} from '../../public/selection';\nimport {Trace} from '../../public/trace';\nimport {Slice} from '../../public/track';\nimport {LONG, STR} from '../../trace_processor/query_result';\nimport {HeapProfileFlamegraphDetailsPanel} from './heap_profile_details_panel';\n\nconst HEAP_PROFILE_ROW = {\n  ...BASE_ROW,\n  type: STR,\n};\ntype HeapProfileRow = typeof HEAP_PROFILE_ROW;\ninterface HeapProfileSlice extends Slice {\n  type: ProfileType;\n}\n\nexport class HeapProfileTrack extends BaseSliceTrack<\n  HeapProfileSlice,\n  HeapProfileRow\n> {\n  constructor(\n    trace: Trace,\n    uri: string,\n    private readonly tableName: string,\n    private readonly upid: number,\n    private readonly heapProfileIsIncomplete: boolean,\n  ) {\n    super(trace, uri);\n  }\n\n  getSqlSource(): string {\n    return this.tableName;\n  }\n\n  getRowSpec(): HeapProfileRow {\n    return HEAP_PROFILE_ROW;\n  }\n\n  rowToSlice(row: HeapProfileRow): HeapProfileSlice {\n    const slice = this.rowToSliceBase(row);\n    return {\n      ...slice,\n      type: profileType(row.type),\n    };\n  }\n\n  onSliceOver(args: OnSliceOverArgs<HeapProfileSlice>) {\n    args.tooltip = [args.slice.type];\n  }\n\n  async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const query = `\n      SELECT\n        ts,\n        dur,\n        type\n      FROM (${this.getSqlSource()})\n      WHERE id = ${id}\n    `;\n\n    const result = await this.engine.query(query);\n    if (result.numRows() === 0) {\n      return undefined;\n    }\n\n    const row = result.iter({\n      ts: LONG,\n      dur: LONG,\n      type: STR,\n    });\n\n    return {\n      ts: Time.fromRaw(row.ts),\n      dur: Duration.fromRaw(row.dur),\n      profileType: profileType(row.type),\n    };\n  }\n\n  detailsPanel(sel: TrackEventSelection) {\n    return new HeapProfileFlamegraphDetailsPanel(\n      this.trace,\n      this.heapProfileIsIncomplete,\n      this.upid,\n      sel,\n    );\n  }\n}\n"]}
{"version":3,"file":"counter_selection_aggregator.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Counter/counter_selection_aggregator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Duration} from '../../base/time';\nimport {ColumnDef, Sorting} from '../../public/aggregation';\nimport {AreaSelection} from '../../public/selection';\nimport {COUNTER_TRACK_KIND} from '../../public/track_kinds';\nimport {Engine} from '../../trace_processor/engine';\nimport {AreaSelectionAggregator} from '../../public/selection';\n\nexport class CounterSelectionAggregator implements AreaSelectionAggregator {\n  readonly id = 'counter_aggregation';\n\n  async createAggregateView(engine: Engine, area: AreaSelection) {\n    const trackIds: (string | number)[] = [];\n    for (const trackInfo of area.tracks) {\n      if (trackInfo?.tags?.kind === COUNTER_TRACK_KIND) {\n        trackInfo.tags?.trackIds && trackIds.push(...trackInfo.tags.trackIds);\n      }\n    }\n    if (trackIds.length === 0) return false;\n    const duration = area.end - area.start;\n    const durationSec = Duration.toSeconds(duration);\n\n    // TODO(lalitm): Rewrite this query in a way that is both simpler and faster\n    let query;\n    if (trackIds.length === 1) {\n      // Optimized query for the special case where there is only 1 track id.\n      query = `CREATE OR REPLACE PERFETTO TABLE ${this.id} AS\n      WITH aggregated AS (\n        SELECT\n          COUNT(1) AS count,\n          ROUND(SUM(\n            (MIN(ts + dur, ${area.end}) - MAX(ts,${area.start}))*value)/${duration},\n            2\n          ) AS avg_value,\n          (SELECT value FROM experimental_counter_dur WHERE track_id = ${trackIds[0]}\n            AND ts + dur >= ${area.start}\n            AND ts <= ${area.end} ORDER BY ts DESC LIMIT 1)\n            AS last_value,\n          (SELECT value FROM experimental_counter_dur WHERE track_id = ${trackIds[0]}\n            AND ts + dur >= ${area.start}\n            AND ts <= ${area.end} ORDER BY ts ASC LIMIT 1)\n            AS first_value,\n          MIN(value) AS min_value,\n          MAX(value) AS max_value\n        FROM experimental_counter_dur\n          WHERE track_id = ${trackIds[0]}\n          AND ts + dur >= ${area.start}\n          AND ts <= ${area.end})\n      SELECT\n        (SELECT name FROM counter_track WHERE id = ${trackIds[0]}) AS name,\n        *,\n        MAX(last_value) - MIN(first_value) AS delta_value,\n        ROUND((MAX(last_value) - MIN(first_value))/${durationSec}, 2) AS rate\n      FROM aggregated`;\n    } else {\n      // Slower, but general purspose query that can aggregate multiple tracks\n      query = `CREATE OR REPLACE PERFETTO TABLE ${this.id} AS\n      WITH aggregated AS (\n        SELECT track_id,\n          COUNT(1) AS count,\n          ROUND(SUM(\n            (MIN(ts + dur, ${area.end}) - MAX(ts,${area.start}))*value)/${duration},\n            2\n          ) AS avg_value,\n          value_at_max_ts(-ts, value) AS first,\n          value_at_max_ts(ts, value) AS last,\n          MIN(value) AS min_value,\n          MAX(value) AS max_value\n        FROM experimental_counter_dur\n          WHERE track_id IN (${trackIds})\n          AND ts + dur >= ${area.start} AND\n          ts <= ${area.end}\n        GROUP BY track_id\n      )\n      SELECT\n        name,\n        count,\n        avg_value,\n        last AS last_value,\n        first AS first_value,\n        last - first AS delta_value,\n        ROUND((last - first)/${durationSec}, 2) AS rate,\n        min_value,\n        max_value\n      FROM aggregated JOIN counter_track ON\n        track_id = counter_track.id\n      GROUP BY track_id`;\n    }\n    await engine.query(query);\n    return true;\n  }\n\n  getColumnDefinitions(): ColumnDef[] {\n    return [\n      {\n        title: 'Name',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'name',\n      },\n      {\n        title: 'Delta value',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'delta_value',\n      },\n      {\n        title: 'Rate /s',\n        kind: 'Number',\n        columnConstructor: Float64Array,\n        columnId: 'rate',\n      },\n      {\n        title: 'Weighted avg value',\n        kind: 'Number',\n        columnConstructor: Float64Array,\n        columnId: 'avg_value',\n      },\n      {\n        title: 'Count',\n        kind: 'Number',\n        columnConstructor: Float64Array,\n        columnId: 'count',\n        sum: true,\n      },\n      {\n        title: 'First value',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'first_value',\n      },\n      {\n        title: 'Last value',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'last_value',\n      },\n      {\n        title: 'Min value',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'min_value',\n      },\n      {\n        title: 'Max value',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'max_value',\n      },\n    ];\n  }\n\n  async getExtra() {}\n\n  getTabName() {\n    return 'Counters';\n  }\n\n  getDefaultSorting(): Sorting {\n    return {column: 'name', direction: 'DESC'};\n  }\n}\n"]}
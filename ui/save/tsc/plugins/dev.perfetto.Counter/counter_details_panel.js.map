{"version":3,"file":"counter_details_panel.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Counter/counter_details_panel.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,0CAAqD;AAGrD,qEAK4C;AAE5C,8DAAwB;AACxB,+DAAyD;AACzD,2DAAqD;AACrD,mDAA8C;AAC9C,6CAAkD;AAClD,kEAA6D;AAC7D,gEAAiE;AAEjE,oEAA6E;AAC7E,sEAAiE;AACjE,0DAA6D;AAkB7D,MAAa,mBAAmB;IACb,KAAK,CAAQ;IACb,MAAM,CAAS;IACf,OAAO,CAAS;IAChB,SAAS,CAAS;IAClB,SAAS,CAAS;IAC3B,cAAc,CAAkB;IAExC,YACE,KAAY,EACZ,OAAe,EACf,SAAiB,EACjB,SAAS,GAAG,SAAS;QAErB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,EAAC,OAAO,EAAsB;QACvC,IAAI,CAAC,cAAc,GAAG,MAAM,kBAAkB,CAC5C,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,OAAO,EACZ,OAAO,EACP,IAAI,CAAC,SAAS,CACf,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC;QACxC,IAAI,WAAW,EAAE,CAAC;YAChB,MAAM,IAAI,GACR,IAAA,oBAAO,EAAC,WAAW,CAAC,IAAI,CAAC;gBACzB,IAAA,iBAAC,EACC,iBAAO,EACP,EAAC,KAAK,EAAE,WAAW,EAAC,EACpB,IAAA,iBAAC,EAAC,WAAI,EAAE,IAAA,4BAAe,EAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CACvD,CAAC;YAEJ,OAAO,IAAA,iBAAC,EACN,4BAAY,EACZ,EAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,EAAC,EACpD,IAAA,iBAAC,EACC,wBAAU,EACV,IAAA,iBAAC,EACC,iBAAO,EACP,EAAC,KAAK,EAAE,YAAY,EAAC,EACrB,IAAA,iBAAC,EACC,WAAI,EACJ,IAAA,iBAAC,EAAC,eAAQ,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,EAAC,CAAC,EACvD,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,IAAA,iBAAC,EAAC,qBAAS,EAAE,EAAC,EAAE,EAAE,WAAW,CAAC,EAAE,EAAC,CAAC;aAC1C,CAAC,EACF,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE;aAC/C,CAAC,EACF,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,OAAO;gBACb,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,cAAc,EAAE,EAAE;aAC/C,CAAC,EACF,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,IAAA,iBAAC,EAAC,yBAAc,EAAE,EAAC,GAAG,EAAE,WAAW,CAAC,QAAQ,EAAC,CAAC;aACtD,CAAC,CACH,CACF,EACD,IAAI,CACL,CACF,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO,IAAA,iBAAC,EAAC,4BAAY,EAAE,EAAC,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAC,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,cAAc,KAAK,SAAS,CAAC;IAC3C,CAAC;CACF;AAjFD,kDAiFC;AAED,KAAK,UAAU,kBAAkB,CAC/B,MAAc,EACd,OAAe,EACf,EAAU,EACV,SAAiB;IAEjB,MAAM,KAAK,GAAG;;;;;;;;;aASH,SAAS;yBACG,OAAO;;mCAEG,EAAE;GAClC,CAAC;IAEF,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1C,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;QACvB,KAAK,EAAE,kBAAG;QACV,SAAS,EAAE,uBAAQ;QACnB,MAAM,EAAE,mBAAI;QACZ,OAAO,EAAE,wBAAS;QAClB,QAAQ,EAAE,uBAAQ;KACnB,CAAC,CAAC;IACH,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;IACxB,MAAM,MAAM,GAAG,WAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACxC,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,WAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAC1E,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;IAEjE,MAAM,KAAK,GAAG,KAAK,GAAG,SAAS,CAAC;IAChC,MAAM,QAAQ,GAAG,OAAO,GAAG,MAAM,CAAC;IAClC,MAAM,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;IAC9B,MAAM,IAAI,GACR,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,IAAA,cAAO,EAAC,MAAM,EAAE,IAAA,uBAAU,EAAC,QAAQ,CAAC,CAAC,CAAC;IAC7E,OAAO,EAAC,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;AACpD,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Time, duration, time} from '../../base/time';\nimport {Engine} from '../../trace_processor/engine';\nimport {Trace} from '../../public/trace';\nimport {\n  LONG,\n  LONG_NULL,\n  NUM,\n  NUM_NULL,\n} from '../../trace_processor/query_result';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport m from 'mithril';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout} from '../../widgets/grid_layout';\nimport {Section} from '../../widgets/section';\nimport {Tree, TreeNode} from '../../widgets/tree';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {DurationWidget} from '../../components/widgets/duration';\nimport {TrackEventSelection} from '../../public/selection';\nimport {hasArgs, renderArguments} from '../../components/details/slice_args';\nimport {asArgSetId} from '../../components/sql_utils/core_types';\nimport {Arg, getArgs} from '../../components/sql_utils/args';\n\ninterface CounterDetails {\n  // The \"left\" timestamp of the counter sample T(N)\n  ts: time;\n\n  // The delta between this sample and the next one's timestamps T(N+1) - T(N)\n  duration: duration;\n\n  // The value of the counter sample F(N)\n  value: number;\n\n  // The delta between this sample's value and the previous one F(N) - F(N-1)\n  delta: number;\n\n  args?: Arg[];\n}\n\nexport class CounterDetailsPanel implements TrackEventDetailsPanel {\n  private readonly trace: Trace;\n  private readonly engine: Engine;\n  private readonly trackId: number;\n  private readonly rootTable: string;\n  private readonly trackName: string;\n  private counterDetails?: CounterDetails;\n\n  constructor(\n    trace: Trace,\n    trackId: number,\n    trackName: string,\n    rootTable = 'counter',\n  ) {\n    this.trace = trace;\n    this.engine = trace.engine;\n    this.trackId = trackId;\n    this.trackName = trackName;\n    this.rootTable = rootTable;\n  }\n\n  async load({eventId}: TrackEventSelection) {\n    this.counterDetails = await loadCounterDetails(\n      this.engine,\n      this.trackId,\n      eventId,\n      this.rootTable,\n    );\n  }\n\n  render() {\n    const counterInfo = this.counterDetails;\n    if (counterInfo) {\n      const args =\n        hasArgs(counterInfo.args) &&\n        m(\n          Section,\n          {title: 'Arguments'},\n          m(Tree, renderArguments(this.trace, counterInfo.args)),\n        );\n\n      return m(\n        DetailsShell,\n        {title: 'Counter', description: `${this.trackName}`},\n        m(\n          GridLayout,\n          m(\n            Section,\n            {title: 'Properties'},\n            m(\n              Tree,\n              m(TreeNode, {left: 'Name', right: `${this.trackName}`}),\n              m(TreeNode, {\n                left: 'Start time',\n                right: m(Timestamp, {ts: counterInfo.ts}),\n              }),\n              m(TreeNode, {\n                left: 'Value',\n                right: `${counterInfo.value.toLocaleString()}`,\n              }),\n              m(TreeNode, {\n                left: 'Delta',\n                right: `${counterInfo.delta.toLocaleString()}`,\n              }),\n              m(TreeNode, {\n                left: 'Duration',\n                right: m(DurationWidget, {dur: counterInfo.duration}),\n              }),\n            ),\n          ),\n          args,\n        ),\n      );\n    } else {\n      return m(DetailsShell, {title: 'Counter', description: 'Loading...'});\n    }\n  }\n\n  isLoading(): boolean {\n    return this.counterDetails === undefined;\n  }\n}\n\nasync function loadCounterDetails(\n  engine: Engine,\n  trackId: number,\n  id: number,\n  rootTable: string,\n): Promise<CounterDetails> {\n  const query = `\n    WITH CTE AS (\n      SELECT\n        id,\n        ts as leftTs,\n        value,\n        LAG(value) OVER (ORDER BY ts) AS prevValue,\n        LEAD(ts) OVER (ORDER BY ts) AS rightTs,\n        arg_set_id AS argSetId\n      FROM ${rootTable}\n      WHERE track_id = ${trackId}\n    )\n    SELECT * FROM CTE WHERE id = ${id}\n  `;\n\n  const counter = await engine.query(query);\n  const row = counter.iter({\n    value: NUM,\n    prevValue: NUM_NULL,\n    leftTs: LONG,\n    rightTs: LONG_NULL,\n    argSetId: NUM_NULL,\n  });\n  const value = row.value;\n  const leftTs = Time.fromRaw(row.leftTs);\n  const rightTs = row.rightTs !== null ? Time.fromRaw(row.rightTs) : leftTs;\n  const prevValue = row.prevValue !== null ? row.prevValue : value;\n\n  const delta = value - prevValue;\n  const duration = rightTs - leftTs;\n  const argSetId = row.argSetId;\n  const args =\n    argSetId == null ? undefined : await getArgs(engine, asArgSetId(argSetId));\n  return {ts: leftTs, value, delta, duration, args};\n}\n"]}
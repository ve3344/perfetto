{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Counter/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,qEAM4C;AAE5C,0DAA4D;AAE5D,8CAAoE;AAEpE,mFAA2E;AAC3E,4CAAwC;AACxC,sDAAiD;AACjD,iFAA0E;AAC1E,mHAA4E;AAE5E,MAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,mCAAmC,CAAC,CAAC;AAC5E,MAAM,sBAAsB,GAAG,IAAI,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAIhE,mEAAmE;AACnE,qEAAqE;AACrE,oBAAoB;AACpB,MAAM,aAAa,GAAsB;IACvC,qEAAqE;IACrE,gEAAgE;IAChE,SAAS;IACT,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE,MAAM,CAAC;IAClC,mEAAmE;IACnE,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC;IAChC,6BAA6B;IAC7B,CAAC,mBAAmB,EAAE,MAAM,CAAC;IAC7B,mBAAmB;IACnB,CAAC,sBAAsB,EAAE,MAAM,CAAC;CACjC,CAAC;AAEF,SAAS,cAAc,CAAC,IAAY;IAClC,KAAK,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,aAAa,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC;YACnB,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,wBAAwB,CAAC,IAAY;IAC5C,MAAM,OAAO,GAA4B,EAAE,CAAC;IAC5C,OAAO,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IAErC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAC1B,OAAO,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC7B,OAAO,CAAC,gBAAgB,GAAG,GAAG,CAAC;QAC/B,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC;IACrB,CAAC;IAED,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC9B,OAAO,CAAC,gBAAgB,GAAG,OAAO,CAAC;IACrC,CAAC;IAED,2EAA2E;IAC3E,uEAAuE;IACvE,gEAAgE;IAEhE,iCAAiC;IACjC,sCAAsC;IACtC,IAAI;IAEJ,mEAAmE;IACnE,mDAAmD;IACnD,CAAC;QACC,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACnD,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,EAAE,CAAC;YACN,OAAO,CAAC,gBAAgB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxD,CAAC;IACH,CAAC;IAED,CAAC;QACC,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACzC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,EAAE,CAAC;YACN,OAAO,CAAC,gBAAgB,GAAG,eAAe,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;IACE,MAAM,CAAU,EAAE,GAAG,sBAAsB,CAAC;IAC5C,MAAM,CAAU,YAAY,GAAG,CAAC,0CAAyB,CAAC,CAAC;IAE3D,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACjC,MAAM,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC;QAC7C,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;QACvC,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAExC,GAAG,CAAC,SAAS,CAAC,+BAA+B,CAC3C,IAAI,yDAA0B,EAAE,CACjC,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAAC,GAAU;QACvC,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;;;KAcrC,CAAC,CAAC;QAEH,sEAAsE;QACtE,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;YACrB,IAAI,EAAE,kBAAG;YACT,IAAI,EAAE,uBAAQ;YACd,EAAE,EAAE,kBAAG;SACR,CAAC,CAAC;QAEH,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC;YACtB,MAAM,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC;YACtB,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,IAAI,SAAS,CAAC;YAElC,MAAM,GAAG,GAAG,YAAY,OAAO,EAAE,CAAC;YAClC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK;gBACL,IAAI,EAAE;oBACJ,IAAI,EAAE,gCAAkB;oBACxB,QAAQ,EAAE,CAAC,OAAO,CAAC;iBACpB;gBACD,KAAK,EAAE,IAAI,0DAA0B,CACnC,GAAG,EACH,GAAG,EACH;oBACE,GAAG,wBAAwB,CAAC,KAAK,CAAC;oBAClC,IAAI;iBACL,EACD,OAAO,EACP,KAAK,CACN;aACF,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,4BAA4B,CAAC,GAAU;QAC3C,MAAM,4BAA4B,GAAG;;;;;;KAMpC,CAAC;QAEF,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,4BAA4B,EAAE,cAAc,CAAC,CAAC;IAC9E,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,GAAU;QACtC,MAAM,uBAAuB,GAAG;;;;;;KAM/B,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,uBAAuB,EAAE,SAAS,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,GAAU;QACtC,mEAAmE;QACnE,mDAAmD;QACnD,2EAA2E;QAC3E,uEAAuE;QACvE,wEAAwE;QACxE,UAAU;QACV,MAAM,0BAA0B,GAAG;;;;;KAKlC,CAAC;QACF,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,0BAA0B,EAAE,SAAS,CAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,GAAU,EACV,GAAW,EACX,KAAa;QAEb,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAE3C,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;YACrB,IAAI,EAAE,kBAAG;YACT,EAAE,EAAE,kBAAG;SACR,CAAC,CAAC;QAEH,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACrB,MAAM,OAAO,GAAG,EAAE,CAAC,EAAE,CAAC;YACtB,MAAM,GAAG,GAAG,eAAe,OAAO,EAAE,CAAC;YACrC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE;oBACJ,IAAI,EAAE,gCAAkB;oBACxB,QAAQ,EAAE,CAAC,OAAO,CAAC;oBACnB,KAAK;iBACN;gBACD,KAAK,EAAE,IAAI,0DAA0B,CACnC,GAAG,EACH,GAAG,EACH,wBAAwB,CAAC,IAAI,CAAC,EAC9B,OAAO,EACP,IAAI,CACL;aACF,CAAC,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,EAAC,CAAC,CAAC;YACpE,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,GAAU;QACrC,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;;;KAcrC,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;YACrB,OAAO,EAAE,wBAAS;YAClB,OAAO,EAAE,kBAAG;YACZ,KAAK,EAAE,wBAAS;YAChB,SAAS,EAAE,uBAAQ;YACnB,IAAI,EAAE,kBAAG;YACT,IAAI,EAAE,uBAAQ;YACd,GAAG,EAAE,uBAAQ;YACb,UAAU,EAAE,uBAAQ;SACrB,CAAC,CAAC;QACH,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACrB,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACrB,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;YACnB,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;YAC3B,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;YAC/B,MAAM,UAAU,GAAG,EAAE,CAAC,UAAU,CAAC;YACjC,MAAM,IAAI,GAAG,gCAAkB,CAAC;YAChC,MAAM,IAAI,GAAG,IAAA,oBAAY,EAAC;gBACxB,IAAI,EAAE,SAAS;gBACf,IAAI;gBACJ,GAAG;gBACH,IAAI;gBACJ,UAAU;gBACV,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,GAAG,IAAA,0BAAkB,EAAC,IAAI,EAAE,IAAI,CAAC,YAAY,OAAO,EAAE,CAAC;YACnE,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE;oBACJ,IAAI;oBACJ,QAAQ,EAAE,CAAC,OAAO,CAAC;oBACnB,IAAI;oBACJ,IAAI,EAAE,IAAI,IAAI,SAAS;oBACvB,KAAK,EAAE,QAAQ;iBAChB;gBACD,KAAK,EAAE,IAAI,0DAA0B,CACnC,GAAG,EACH,GAAG,EACH,wBAAwB,CAAC,IAAI,CAAC,EAC9B,OAAO,EACP,IAAI,CACL;aACF,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO;iBACtB,SAAS,CAAC,0CAAyB,CAAC;iBACpC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC3B,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC,CAAC,CAAC;YAC/D,KAAK,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,GAAU;QACtC,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;KAWrC,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;YACrB,OAAO,EAAE,kBAAG;YACZ,SAAS,EAAE,uBAAQ;YACnB,IAAI,EAAE,kBAAG;YACT,GAAG,EAAE,uBAAQ;YACb,WAAW,EAAE,uBAAQ;SACtB,CAAC,CAAC;QACH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC3C,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;YAC3B,MAAM,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC;YACnB,MAAM,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;YAC/B,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACrB,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;YACnC,MAAM,IAAI,GAAG,gCAAkB,CAAC;YAChC,MAAM,IAAI,GAAG,IAAA,oBAAY,EAAC;gBACxB,IAAI,EAAE,SAAS;gBACf,IAAI;gBACJ,GAAG;gBACH,IAAI;gBACJ,WAAW;gBACX,GAAG,CAAC,IAAA,cAAM,EAAC,SAAS,CAAC,IAAI,EAAC,SAAS,EAAC,CAAC;aACtC,CAAC,CAAC;YACH,MAAM,GAAG,GAAG,YAAY,IAAI,YAAY,OAAO,EAAE,CAAC;YAClD,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE;oBACJ,IAAI;oBACJ,QAAQ,EAAE,CAAC,OAAO,CAAC;oBACnB,IAAI;oBACJ,KAAK,EAAE,SAAS;iBACjB;gBACD,KAAK,EAAE,IAAI,0DAA0B,CACnC,GAAG,EACH,GAAG,EACH,wBAAwB,CAAC,IAAI,CAAC,EAC9B,OAAO,EACP,IAAI,CACL;aACF,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO;iBACtB,SAAS,CAAC,0CAAyB,CAAC;iBACpC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAC5B,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAC,CAAC,CAAC;YAC/D,KAAK,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,qBAAqB,CAAC,GAAU;QAC5C,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QAE1B,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;KAKjC,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,EAAC,EAAE,EAAE,kBAAG,EAAE,KAAK,EAAE,kBAAG,EAAC,CAAC,CAAC;QAC9C,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,MAAM,GAAG,GAAG,kBAAkB,EAAE,CAAC,KAAK,EAAE,CAAC;YACzC,MAAM,IAAI,GAAG,OAAO,EAAE,CAAC,KAAK,YAAY,CAAC;YACzC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE;oBACJ,IAAI,EAAE,gCAAkB;oBACxB,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;oBACjB,KAAK,EAAE,SAAS;iBACjB;gBACD,KAAK,EAAE,IAAI,0DAA0B,CACnC,GAAG,EACH,GAAG,EACH,wBAAwB,CAAC,IAAI,CAAC,EAC9B,EAAE,CAAC,EAAE,EACL,IAAI,CACL;aACF,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAE,EAAC,CAAC,CAAC;YAChE,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;;AAtTH,4BAuTC","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  NUM_NULL,\n  STR_NULL,\n  LONG_NULL,\n  NUM,\n  STR,\n} from '../../trace_processor/query_result';\nimport {Trace} from '../../public/trace';\nimport {COUNTER_TRACK_KIND} from '../../public/track_kinds';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {getThreadUriPrefix, getTrackName} from '../../public/utils';\nimport {CounterOptions} from '../../components/tracks/base_counter_track';\nimport {TraceProcessorCounterTrack} from './trace_processor_counter_track';\nimport {exists} from '../../base/utils';\nimport {TrackNode} from '../../public/workspace';\nimport {CounterSelectionAggregator} from './counter_selection_aggregator';\nimport ProcessThreadGroupsPlugin from '../dev.perfetto.ProcessThreadGroups';\n\nconst NETWORK_TRACK_REGEX = new RegExp('^.* (Received|Transmitted)( KB)?$');\nconst ENTITY_RESIDENCY_REGEX = new RegExp('^Entity residency:');\n\ntype Modes = CounterOptions['yMode'];\n\n// Sets the default 'mode' for counter tracks. If the regex matches\n// then the paired mode is used. Entries are in priority order so the\n// first match wins.\nconst COUNTER_REGEX: [RegExp, Modes][] = [\n  // Power counters make more sense in rate mode since you're typically\n  // interested in the slope of the graph rather than the absolute\n  // value.\n  [new RegExp('^power..*$'), 'rate'],\n  // Same for cumulative PSI stall time counters, e.g., psi.cpu.some.\n  [new RegExp('^psi..*$'), 'rate'],\n  // Same for network counters.\n  [NETWORK_TRACK_REGEX, 'rate'],\n  // Entity residency\n  [ENTITY_RESIDENCY_REGEX, 'rate'],\n];\n\nfunction getCounterMode(name: string): Modes | undefined {\n  for (const [re, mode] of COUNTER_REGEX) {\n    if (name.match(re)) {\n      return mode;\n    }\n  }\n  return undefined;\n}\n\nfunction getDefaultCounterOptions(name: string): Partial<CounterOptions> {\n  const options: Partial<CounterOptions> = {};\n  options.yMode = getCounterMode(name);\n\n  if (name.endsWith('_pct')) {\n    options.yOverrideMinimum = 0;\n    options.yOverrideMaximum = 100;\n    options.unit = '%';\n  }\n\n  if (name.startsWith('power.')) {\n    options.yRangeSharingKey = 'power';\n  }\n\n  // TODO(stevegolton): We need to rethink how this works for virtual memory.\n  // The problem is we can easily have > 10GB virtual memory which dwarfs\n  // physical memory making other memory tracks difficult to read.\n\n  // if (name.startsWith('mem.')) {\n  //   options.yRangeSharingKey = 'mem';\n  // }\n\n  // All 'Entity residency: foo bar1234' tracks should share a y-axis\n  // with 'Entity residency: foo baz5678' etc tracks:\n  {\n    const r = new RegExp('Entity residency: ([^ ]+) ');\n    const m = r.exec(name);\n    if (m) {\n      options.yRangeSharingKey = `entity-residency-${m[1]}`;\n    }\n  }\n\n  {\n    const r = new RegExp('GPU .* Frequency');\n    const m = r.exec(name);\n    if (m) {\n      options.yRangeSharingKey = 'gpu-frequency';\n    }\n  }\n\n  return options;\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.Counter';\n  static readonly dependencies = [ProcessThreadGroupsPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    await this.addCounterTracks(ctx);\n    await this.addGpuFrequencyTracks(ctx);\n    await this.addCpuFreqLimitCounterTracks(ctx);\n    await this.addCpuTimeCounterTracks(ctx);\n    await this.addCpuPerfCounterTracks(ctx);\n    await this.addThreadCounterTracks(ctx);\n    await this.addProcessCounterTracks(ctx);\n\n    ctx.selection.registerAreaSelectionAggregator(\n      new CounterSelectionAggregator(),\n    );\n  }\n\n  private async addCounterTracks(ctx: Trace) {\n    const result = await ctx.engine.query(`\n      select name, id, unit\n      from (\n        select name, id, unit\n        from counter_track\n        join _counter_track_summary using (id)\n        where is_legacy_global\n        union\n        select name, id, unit\n        from gpu_counter_track\n        join _counter_track_summary using (id)\n        where name != 'gpufreq'\n      )\n      order by name\n    `);\n\n    // Add global or GPU counter tracks that are not bound to any pid/tid.\n    const it = result.iter({\n      name: STR,\n      unit: STR_NULL,\n      id: NUM,\n    });\n\n    for (; it.valid(); it.next()) {\n      const trackId = it.id;\n      const title = it.name;\n      const unit = it.unit ?? undefined;\n\n      const uri = `/counter_${trackId}`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        tags: {\n          kind: COUNTER_TRACK_KIND,\n          trackIds: [trackId],\n        },\n        track: new TraceProcessorCounterTrack(\n          ctx,\n          uri,\n          {\n            ...getDefaultCounterOptions(title),\n            unit,\n          },\n          trackId,\n          title,\n        ),\n      });\n      const track = new TrackNode({uri, title});\n      ctx.workspace.addChildInOrder(track);\n    }\n  }\n\n  async addCpuFreqLimitCounterTracks(ctx: Trace): Promise<void> {\n    const cpuFreqLimitCounterTracksSql = `\n      select name, id\n      from cpu_counter_track\n      join _counter_track_summary using (id)\n      where name glob \"Cpu * Freq Limit\"\n      order by name asc\n    `;\n\n    this.addCpuCounterTracks(ctx, cpuFreqLimitCounterTracksSql, 'cpuFreqLimit');\n  }\n\n  async addCpuTimeCounterTracks(ctx: Trace): Promise<void> {\n    const cpuTimeCounterTracksSql = `\n      select name, id\n      from cpu_counter_track\n      join _counter_track_summary using (id)\n      where name glob \"cpu.times.*\"\n      order by name asc\n    `;\n    this.addCpuCounterTracks(ctx, cpuTimeCounterTracksSql, 'cpuTime');\n  }\n\n  async addCpuPerfCounterTracks(ctx: Trace): Promise<void> {\n    // Perf counter tracks are bound to CPUs, follow the scheduling and\n    // frequency track naming convention (\"Cpu N ...\").\n    // Note: we might not have a track for a given cpu if no data was seen from\n    // it. This might look surprising in the UI, but placeholder tracks are\n    // wasteful as there's no way of collapsing global counter tracks at the\n    // moment.\n    const addCpuPerfCounterTracksSql = `\n      select printf(\"Cpu %u %s\", cpu, name) as name, id\n      from perf_counter_track as pct\n      join _counter_track_summary using (id)\n      order by perf_session_id asc, pct.name asc, cpu asc\n    `;\n    this.addCpuCounterTracks(ctx, addCpuPerfCounterTracksSql, 'cpuPerf');\n  }\n\n  async addCpuCounterTracks(\n    ctx: Trace,\n    sql: string,\n    scope: string,\n  ): Promise<void> {\n    const result = await ctx.engine.query(sql);\n\n    const it = result.iter({\n      name: STR,\n      id: NUM,\n    });\n\n    for (; it.valid(); it.next()) {\n      const name = it.name;\n      const trackId = it.id;\n      const uri = `counter.cpu.${trackId}`;\n      ctx.tracks.registerTrack({\n        uri,\n        title: name,\n        tags: {\n          kind: COUNTER_TRACK_KIND,\n          trackIds: [trackId],\n          scope,\n        },\n        track: new TraceProcessorCounterTrack(\n          ctx,\n          uri,\n          getDefaultCounterOptions(name),\n          trackId,\n          name,\n        ),\n      });\n      const trackNode = new TrackNode({uri, title: name, sortOrder: -20});\n      ctx.workspace.addChildInOrder(trackNode);\n    }\n  }\n\n  async addThreadCounterTracks(ctx: Trace): Promise<void> {\n    const result = await ctx.engine.query(`\n      select\n        thread_counter_track.name as trackName,\n        utid,\n        upid,\n        tid,\n        thread.name as threadName,\n        thread_counter_track.id as trackId,\n        thread.start_ts as startTs,\n        thread.end_ts as endTs\n      from thread_counter_track\n      join _counter_track_summary using (id)\n      join thread using(utid)\n      where thread_counter_track.name != 'thread_time'\n    `);\n\n    const it = result.iter({\n      startTs: LONG_NULL,\n      trackId: NUM,\n      endTs: LONG_NULL,\n      trackName: STR_NULL,\n      utid: NUM,\n      upid: NUM_NULL,\n      tid: NUM_NULL,\n      threadName: STR_NULL,\n    });\n    for (; it.valid(); it.next()) {\n      const utid = it.utid;\n      const upid = it.upid;\n      const tid = it.tid;\n      const trackId = it.trackId;\n      const trackName = it.trackName;\n      const threadName = it.threadName;\n      const kind = COUNTER_TRACK_KIND;\n      const name = getTrackName({\n        name: trackName,\n        utid,\n        tid,\n        kind,\n        threadName,\n        threadTrack: true,\n      });\n      const uri = `${getThreadUriPrefix(upid, utid)}_counter_${trackId}`;\n      ctx.tracks.registerTrack({\n        uri,\n        title: name,\n        tags: {\n          kind,\n          trackIds: [trackId],\n          utid,\n          upid: upid ?? undefined,\n          scope: 'thread',\n        },\n        track: new TraceProcessorCounterTrack(\n          ctx,\n          uri,\n          getDefaultCounterOptions(name),\n          trackId,\n          name,\n        ),\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForThread(utid);\n      const track = new TrackNode({uri, title: name, sortOrder: 30});\n      group?.addChildInOrder(track);\n    }\n  }\n\n  async addProcessCounterTracks(ctx: Trace): Promise<void> {\n    const result = await ctx.engine.query(`\n      select\n        process_counter_track.id as trackId,\n        process_counter_track.name as trackName,\n        upid,\n        process.pid,\n        process.name as processName\n      from process_counter_track\n      join _counter_track_summary using (id)\n      join process using(upid)\n      order by trackName;\n    `);\n    const it = result.iter({\n      trackId: NUM,\n      trackName: STR_NULL,\n      upid: NUM,\n      pid: NUM_NULL,\n      processName: STR_NULL,\n    });\n    for (let i = 0; it.valid(); ++i, it.next()) {\n      const trackId = it.trackId;\n      const pid = it.pid;\n      const trackName = it.trackName;\n      const upid = it.upid;\n      const processName = it.processName;\n      const kind = COUNTER_TRACK_KIND;\n      const name = getTrackName({\n        name: trackName,\n        upid,\n        pid,\n        kind,\n        processName,\n        ...(exists(trackName) && {trackName}),\n      });\n      const uri = `/process_${upid}/counter_${trackId}`;\n      ctx.tracks.registerTrack({\n        uri,\n        title: name,\n        tags: {\n          kind,\n          trackIds: [trackId],\n          upid,\n          scope: 'process',\n        },\n        track: new TraceProcessorCounterTrack(\n          ctx,\n          uri,\n          getDefaultCounterOptions(name),\n          trackId,\n          name,\n        ),\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForProcess(upid);\n      const track = new TrackNode({uri, title: name, sortOrder: 20});\n      group?.addChildInOrder(track);\n    }\n  }\n\n  private async addGpuFrequencyTracks(ctx: Trace) {\n    const engine = ctx.engine;\n\n    const result = await engine.query(`\n      select id, gpu_id as gpuId\n      from gpu_counter_track\n      join _counter_track_summary using (id)\n      where name = 'gpufreq'\n    `);\n    const it = result.iter({id: NUM, gpuId: NUM});\n    for (; it.valid(); it.next()) {\n      const uri = `/gpu_frequency_${it.gpuId}`;\n      const name = `Gpu ${it.gpuId} Frequency`;\n      ctx.tracks.registerTrack({\n        uri,\n        title: name,\n        tags: {\n          kind: COUNTER_TRACK_KIND,\n          trackIds: [it.id],\n          scope: 'gpuFreq',\n        },\n        track: new TraceProcessorCounterTrack(\n          ctx,\n          uri,\n          getDefaultCounterOptions(name),\n          it.id,\n          name,\n        ),\n      });\n      const track = new TrackNode({uri, title: name, sortOrder: -20});\n      ctx.workspace.addChildInOrder(track);\n    }\n  }\n}\n"]}
{"version":3,"file":"trace_processor_counter_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Counter/trace_processor_counter_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0CAAqC;AACrC,mFAGoD;AAIpD,qEAAwE;AACxE,mEAA4D;AAE5D,MAAa,0BAA2B,SAAQ,qCAAgB;IAK3C;IACA;IACA;IANnB,YACE,KAAY,EACZ,GAAW,EACX,OAAgC,EACf,OAAe,EACf,SAAiB,EACjB,YAAoB,SAAS;QAE9C,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAJV,YAAO,GAAP,OAAO,CAAQ;QACf,cAAS,GAAT,SAAS,CAAQ;QACjB,cAAS,GAAT,SAAS,CAAoB;IAGhD,CAAC;IAED,YAAY;QACV,OAAO;;;;;aAKE,IAAI,CAAC,SAAS;yBACF,IAAI,CAAC,OAAO;KAChC,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,EAAC,CAAC,EAAE,SAAS,EAAkB;QAC1C,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAErD,MAAM,KAAK,GAAG;;;aAGL,IAAI,CAAC,SAAS;;qBAEN,IAAI,CAAC,OAAO;mBACd,IAAI;;;KAGlB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACvC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;gBACrB,EAAE,EAAE,kBAAG;aACR,CAAC,CAAC;YACH,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC;gBAChB,OAAO;YACT,CAAC;YACD,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oEAAoE;IACpE,4EAA4E;IAC5E,2EAA2E;IAC3E,wEAAwE;IACxE,kEAAkE;IAClE,KAAK,CAAC,mBAAmB,CAAC,EAAU;QAClC,MAAM,KAAK,GAAG;;;;;;;iBAOD,IAAI,CAAC,SAAS;6BACF,IAAI,CAAC,OAAO;;qCAEJ,EAAE;KAClC,CAAC;QAEF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;YACvB,MAAM,EAAE,mBAAI;YACZ,OAAO,EAAE,wBAAS;SACnB,CAAC,CAAC;QACH,MAAM,MAAM,GAAG,WAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC,WAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAC1E,MAAM,QAAQ,GAAG,OAAO,GAAG,MAAM,CAAC;QAClC,OAAO,EAAC,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAC,CAAC;IACrC,CAAC;IAED,YAAY;QACV,OAAO,IAAI,2CAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3E,CAAC;CACF;AApFD,gEAoFC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Time} from '../../base/time';\nimport {\n  BaseCounterTrack,\n  CounterOptions,\n} from '../../components/tracks/base_counter_track';\nimport {TrackEventDetails} from '../../public/selection';\nimport {Trace} from '../../public/trace';\nimport {TrackMouseEvent} from '../../public/track';\nimport {LONG, LONG_NULL, NUM} from '../../trace_processor/query_result';\nimport {CounterDetailsPanel} from './counter_details_panel';\n\nexport class TraceProcessorCounterTrack extends BaseCounterTrack {\n  constructor(\n    trace: Trace,\n    uri: string,\n    options: Partial<CounterOptions>,\n    private readonly trackId: number,\n    private readonly trackName: string,\n    private readonly rootTable: string = 'counter',\n  ) {\n    super(trace, uri, options);\n  }\n\n  getSqlSource() {\n    return `\n      select\n        id,\n        ts,\n        value\n      from ${this.rootTable}\n      where track_id = ${this.trackId}\n    `;\n  }\n\n  onMouseClick({x, timescale}: TrackMouseEvent): boolean {\n    const time = timescale.pxToHpTime(x).toTime('floor');\n\n    const query = `\n      select\n        id\n      from ${this.rootTable}\n      where\n        track_id = ${this.trackId}\n        and ts < ${time}\n      order by ts DESC\n      limit 1\n    `;\n\n    this.engine.query(query).then((result) => {\n      const it = result.iter({\n        id: NUM,\n      });\n      if (!it.valid()) {\n        return;\n      }\n      const id = it.id;\n      this.trace.selection.selectTrackEvent(this.uri, id);\n    });\n\n    return true;\n  }\n\n  // We must define this here instead of in `BaseCounterTrack` because\n  // `BaseCounterTrack` does not require the query to have an id column. Here,\n  // however, we make the assumption that `rootTable` has an id column, as we\n  // need it ot make selections in `onMouseClick` above. Whether or not we\n  // SHOULD assume `rootTable` has an id column is another matter...\n  async getSelectionDetails(id: number): Promise<TrackEventDetails> {\n    const query = `\n      WITH \n        CTE AS (\n          SELECT\n            id,\n            ts as leftTs,\n            LEAD(ts) OVER (ORDER BY ts) AS rightTs\n          FROM ${this.rootTable}\n          WHERE track_id = ${this.trackId}\n        )\n      SELECT * FROM CTE WHERE id = ${id}\n    `;\n\n    const counter = await this.engine.query(query);\n    const row = counter.iter({\n      leftTs: LONG,\n      rightTs: LONG_NULL,\n    });\n    const leftTs = Time.fromRaw(row.leftTs);\n    const rightTs = row.rightTs !== null ? Time.fromRaw(row.rightTs) : leftTs;\n    const duration = rightTs - leftTs;\n    return {ts: leftTs, dur: duration};\n  }\n\n  detailsPanel() {\n    return new CounterDetailsPanel(this.trace, this.trackId, this.trackName);\n  }\n}\n"]}
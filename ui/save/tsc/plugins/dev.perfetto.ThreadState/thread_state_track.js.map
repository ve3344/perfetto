{"version":3,"file":"thread_state_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.ThreadState/thread_state_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0DAAyD;AACzD,+EAGkD;AAClD,uEAG8C;AAC9C,qEAA4E;AAE5E,0EAAuE;AAEvE,6EAAqE;AAErE,2DAAqE;AAExD,QAAA,gBAAgB,GAAG;IAC9B,GAAG,2BAAQ;IACX,KAAK,EAAE,kBAAG;IACV,MAAM,EAAE,uBAAQ;CACjB,CAAC;AAIF,MAAa,gBAAiB,SAAQ,iCAAqC;IAM/D;IALA,WAAW,GAAgB,EAAC,GAAG,yCAA0B,EAAC,CAAC;IAErE,YACE,KAAY,EACZ,GAAW,EACH,IAAY;QAEpB,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAFV,SAAI,GAAJ,IAAI,CAAQ;IAGtB,CAAC;IAED,iDAAiD;IACjD,UAAU;QACR,OAAO,wBAAgB,CAAC;IAC1B,CAAC;IAED,YAAY;QACV,mEAAmE;QACnE,OAAO;;;;;;;;;;;iBAWM,IAAI,CAAC,IAAI;;KAErB,CAAC;IACJ,CAAC;IAED,UAAU;QACR,OAAO,IAAI,uBAAa,CAAC;YACvB,GAAG,EAAE,cAAc;YACnB,MAAM,EAAE;gBACN,EAAE,EAAE,kBAAG;gBACP,EAAE,EAAE,mBAAI;gBACR,GAAG,EAAE,mBAAI;gBACT,GAAG,EAAE,kBAAG;gBACR,KAAK,EAAE,kBAAG;gBACV,OAAO,EAAE,uBAAQ;gBACjB,IAAI,EAAE,kBAAG;aACV;YACD,MAAM,EAAE;gBACN,GAAG,EAAE,MAAM;gBACX,EAAE,EAAE,IAAI,CAAC,IAAI;aACd;SACF,CAAC,CAAC;IACL,CAAC;IAED,UAAU,CAAC,GAAmB;QAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC;QAC9D,MAAM,KAAK,GAAG,IAAA,6BAAc,EAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAChD,MAAM,KAAK,GAAG,IAAA,yBAAa,EAAC,KAAK,CAAC,CAAC;QACnC,OAAO,EAAC,GAAG,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAC,CAAC;IACnD,CAAC;IAED,eAAe,CAAC,MAAe;QAC7B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,GAAG,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC;QACpD,CAAC;IACH,CAAC;IAED,gCAAgC;IACvB,KAAK,CAAC,mBAAmB,CAChC,EAAU;QAEV,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACpD,OAAO,OAAO,IAAI,EAAC,GAAG,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;IAClD,CAAC;IAED,YAAY,CAAC,EAAC,OAAO,EAAsB;QACzC,OAAO,IAAI,oDAAuB,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC;CACF;AA9ED,4CA8EC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {colorForState} from '../../components/colorizer';\nimport {\n  BASE_ROW,\n  BaseSliceTrack,\n} from '../../components/tracks/base_slice_track';\nimport {\n  SLICE_LAYOUT_FLAT_DEFAULTS,\n  SliceLayout,\n} from '../../components/tracks/slice_layout';\nimport {LONG, NUM, NUM_NULL, STR} from '../../trace_processor/query_result';\nimport {Slice} from '../../public/track';\nimport {translateState} from '../../components/sql_utils/thread_state';\nimport {TrackEventDetails, TrackEventSelection} from '../../public/selection';\nimport {ThreadStateDetailsPanel} from './thread_state_details_panel';\nimport {Trace} from '../../public/trace';\nimport {Dataset, SourceDataset} from '../../trace_processor/dataset';\n\nexport const THREAD_STATE_ROW = {\n  ...BASE_ROW,\n  state: STR,\n  ioWait: NUM_NULL,\n};\n\nexport type ThreadStateRow = typeof THREAD_STATE_ROW;\n\nexport class ThreadStateTrack extends BaseSliceTrack<Slice, ThreadStateRow> {\n  protected sliceLayout: SliceLayout = {...SLICE_LAYOUT_FLAT_DEFAULTS};\n\n  constructor(\n    trace: Trace,\n    uri: string,\n    private utid: number,\n  ) {\n    super(trace, uri);\n  }\n\n  // This is used by the base class to call iter().\n  getRowSpec(): ThreadStateRow {\n    return THREAD_STATE_ROW;\n  }\n\n  getSqlSource(): string {\n    // Do not display states: 'S' (sleeping), 'I' (idle kernel thread).\n    return `\n      select\n        id,\n        ts,\n        dur,\n        cpu,\n        state,\n        io_wait as ioWait,\n        0 as depth\n      from thread_state\n      where\n        utid = ${this.utid} and\n        state not in ('S', 'I')\n    `;\n  }\n\n  getDataset(): Dataset | undefined {\n    return new SourceDataset({\n      src: 'thread_state',\n      schema: {\n        id: NUM,\n        ts: LONG,\n        dur: LONG,\n        cpu: NUM,\n        state: STR,\n        io_wait: NUM_NULL,\n        utid: NUM,\n      },\n      filter: {\n        col: 'utid',\n        eq: this.utid,\n      },\n    });\n  }\n\n  rowToSlice(row: ThreadStateRow): Slice {\n    const baseSlice = this.rowToSliceBase(row);\n    const ioWait = row.ioWait === null ? undefined : !!row.ioWait;\n    const title = translateState(row.state, ioWait);\n    const color = colorForState(title);\n    return {...baseSlice, title, colorScheme: color};\n  }\n\n  onUpdatedSlices(slices: Slice[]) {\n    for (const slice of slices) {\n      slice.isHighlighted = slice === this.hoveredSlice;\n    }\n  }\n\n  // Add utid to selection details\n  override async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const details = await super.getSelectionDetails(id);\n    return details && {...details, utid: this.utid};\n  }\n\n  detailsPanel({eventId}: TrackEventSelection) {\n    return new ThreadStateDetailsPanel(this.trace, eventId);\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.ThreadState/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {THREAD_STATE_TRACK_KIND} from '../../public/track_kinds';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {getThreadUriPrefix, getTrackName} from '../../public/utils';\nimport {NUM, NUM_NULL, STR_NULL} from '../../trace_processor/query_result';\nimport {ThreadStateTrack} from './thread_state_track';\nimport {removeFalsyValues} from '../../base/array_utils';\nimport {TrackNode} from '../../public/workspace';\nimport {ThreadStateSelectionAggregator} from './thread_state_selection_aggregator';\nimport ProcessThreadGroupsPlugin from '../dev.perfetto.ProcessThreadGroups';\n\nfunction uriForThreadStateTrack(upid: number | null, utid: number): string {\n  return `${getThreadUriPrefix(upid, utid)}_state`;\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.ThreadState';\n  static readonly dependencies = [ProcessThreadGroupsPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const {engine} = ctx;\n\n    ctx.selection.registerAreaSelectionAggregator(\n      new ThreadStateSelectionAggregator(),\n    );\n\n    const result = await engine.query(`\n      include perfetto module viz.threads;\n      include perfetto module viz.summary.threads;\n\n      select\n        utid,\n        t.upid,\n        tid,\n        t.name as threadName,\n        is_main_thread as isMainThread,\n        is_kernel_thread as isKernelThread\n      from _threads_with_kernel_flag t\n      join _sched_summary using (utid)\n    `);\n\n    const it = result.iter({\n      utid: NUM,\n      upid: NUM_NULL,\n      tid: NUM_NULL,\n      threadName: STR_NULL,\n      isMainThread: NUM_NULL,\n      isKernelThread: NUM,\n    });\n    for (; it.valid(); it.next()) {\n      const {utid, upid, tid, threadName, isMainThread, isKernelThread} = it;\n      const title = getTrackName({\n        utid,\n        tid,\n        threadName,\n        kind: THREAD_STATE_TRACK_KIND,\n      });\n\n      const uri = uriForThreadStateTrack(upid, utid);\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        tags: {\n          kind: THREAD_STATE_TRACK_KIND,\n          utid,\n          upid: upid ?? undefined,\n          ...(isKernelThread === 1 && {kernelThread: true}),\n        },\n        chips: removeFalsyValues([\n          isKernelThread === 0 && isMainThread === 1 && 'main thread',\n        ]),\n        track: new ThreadStateTrack(ctx, uri, utid),\n      });\n\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForThread(utid);\n      const track = new TrackNode({uri, title, sortOrder: 10});\n      group?.addChildInOrder(track);\n    }\n\n    ctx.selection.registerSqlSelectionResolver({\n      sqlTableName: 'thread_state',\n      callback: async (id: number) => {\n        const result = await ctx.engine.query(`\n          select\n            thread_state.utid,\n            thread.upid\n          from\n            thread_state\n            join thread on thread_state.utid = thread.id\n          where thread_state.id = ${id}\n        `);\n\n        const {upid, utid} = result.firstRow({\n          upid: NUM_NULL,\n          utid: NUM,\n        });\n\n        return {\n          eventId: id,\n          trackUri: uriForThreadStateTrack(upid, utid),\n        };\n      },\n    });\n  }\n}\n"]}
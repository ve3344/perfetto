{"version":3,"file":"thread_state_details_panel.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.ThreadState/thread_state_details_panel.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,iDAA4C;AAC5C,iDAA4C;AAC5C,+DAAyD;AACzD,2DAAqD;AACrD,mDAA8C;AAC9C,mDAA6C;AAC7C,6CAAkD;AAClD,iDAA4C;AAE5C,0EAIiD;AACjD,gEAAiE;AACjE,kEAA6D;AAC7D,gEAAkE;AAClE,8DAG2C;AAC3C,wEAAqE;AACrE,oEAGuC;AACvC,0DAA8D;AAG9D,4DAA2D;AAU3D,MAAa,uBAAuB;IAKf;IACA;IALX,WAAW,CAAe;IAC1B,aAAa,CAAuB;IAE5C,YACmB,KAAY,EACZ,EAAU;QADV,UAAK,GAAL,KAAK,CAAO;QACZ,OAAE,GAAF,EAAE,CAAQ;IAC1B,CAAC;IAEJ,KAAK,CAAC,IAAI;QACR,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,MAAM,IAAA,6BAAc,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAE/D,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO;QACT,CAAC;QAED,MAAM,aAAa,GAAwB,EAAE,CAAC;QAC9C,aAAa,CAAC,IAAI,GAAG,CACnB,MAAM,IAAA,4CAA6B,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACrD,OAAO,EAAE;gBACP,cAAc,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE;gBACnC,UAAU,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE;aAC1C;YACD,KAAK,EAAE,CAAC;SACT,CAAC,CACH,CAAC,CAAC,CAAC,CAAC;QACL,aAAa,CAAC,IAAI,GAAG,CACnB,MAAM,IAAA,4CAA6B,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACrD,OAAO,EAAE;gBACP,QAAQ,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;gBACpD,UAAU,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE;aAC1C;YACD,KAAK,EAAE,CAAC;SACT,CAAC,CACH,CAAC,CAAC,CAAC,CAAC;QAEL,2EAA2E;QAC3E,0EAA0E;QAC1E,2BAA2B;QAC3B,aAAa,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC;QAErE,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3C,aAAa,CAAC,KAAK,GAAG,MAAM,IAAA,6BAAc,EACxC,IAAI,CAAC,KAAK,CAAC,MAAM,EACjB,IAAI,CAAC,WAAW,CAAC,OAAO,CACzB,CAAC;QACJ,CAAC;aAAM,IACL,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,SAAS;YACnC,aAAa,CAAC,IAAI,CAAC,OAAO,IAAI,SAAS,EACvC,CAAC;YACD,sEAAsE;YACtE,aAAa,CAAC,KAAK,GAAG,MAAM,IAAA,6BAAc,EACxC,IAAI,CAAC,KAAK,CAAC,MAAM,EACjB,aAAa,CAAC,IAAI,CAAC,OAAO,CAC3B,CAAC;YACF,aAAa,CAAC,iBAAiB,GAAG,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC;QACzE,CAAC;QAED,aAAa,CAAC,KAAK,GAAG,MAAM,IAAA,4CAA6B,EACvD,IAAI,CAAC,KAAK,CAAC,MAAM,EACjB;YACE,OAAO,EAAE;gBACP,cAAc,EAAE,EAAE;gBAClB,0CAA0C;aAC3C;SACF,CACF,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;IAED,MAAM;QACJ,2EAA2E;QAC3E,kCAAkC;QAClC,OAAO,IAAA,iBAAC,EACN,4BAAY,EACZ,EAAC,KAAK,EAAE,cAAc,EAAE,WAAW,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAC,EAC9D,IAAA,iBAAC,EACC,wBAAU,EACV,IAAA,iBAAC,EACC,iBAAO,EACP,EAAC,KAAK,EAAE,SAAS,EAAC,EAClB,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CACtD,EACD,IAAA,iBAAC,EACC,iBAAO,EACP,EAAC,KAAK,EAAE,uBAAuB,EAAC,EAChC,IAAI,CAAC,yBAAyB,EAAE,CACjC,CACF,CACF,CAAC;IACJ,CAAC;IAEO,iBAAiB;QACvB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAEO,UAAU,CAAC,WAAwB;QACzC,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;QAClC,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC;QAC5C,OAAO,IAAA,iBAAC,EACN,WAAI,EACJ,IAAA,iBAAC,EAAC,eAAQ,EAAE;YACV,IAAI,EAAE,YAAY;YAClB,KAAK,EAAE,IAAA,iBAAC,EAAC,qBAAS,EAAE,EAAC,EAAE,EAAE,WAAW,CAAC,EAAE,EAAC,CAAC;SAC1C,CAAC,EACF,IAAA,iBAAC,EAAC,eAAQ,EAAE;YACV,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,IAAA,iBAAC,EAAC,yBAAc,EAAE,EAAC,GAAG,EAAE,WAAW,CAAC,GAAG,EAAC,CAAC;SACjD,CAAC,EACF,IAAA,iBAAC,EAAC,eAAQ,EAAE;YACV,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,IAAI,CAAC,WAAW,CACrB,WAAW,CAAC,KAAK,EACjB,WAAW,CAAC,GAAG,EACf,WAAW,CAAC,UAAU,CACvB;SACF,CAAC,EACF,WAAW,CAAC,eAAe;YACzB,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,kBAAkB;gBACxB,KAAK,EAAE,WAAW,CAAC,eAAe;aACnC,CAAC,EACJ,OAAO;YACL,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,IAAA,wBAAc,EAAC,OAAO,CAAC;aAC/B,CAAC,EACJ,MAAM,IAAI,IAAA,iBAAC,EAAC,eAAQ,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAA,sBAAa,EAAC,MAAM,CAAC,EAAC,CAAC,EACrE,WAAW,CAAC,QAAQ,KAAK,SAAS;YAChC,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,UAAU;gBAChB,KAAK,EAAE,WAAW,CAAC,QAAQ;aAC5B,CAAC,EACJ,IAAA,iBAAC,EAAC,eAAQ,EAAE;YACV,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,IAAA,iBAAC,EAAC,gBAAM,EAAE,EAAC,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAC,CAAC;SAC9D,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,WAAW,CACjB,KAAa,EACb,GAAuB,EACvB,EAA0B;QAE1B,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,IAAI,CAAC;QACd,CAAC;QACD,IAAI,EAAE,KAAK,SAAS,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;YAC1C,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,IAAA,iBAAC,EACN,eAAM,EACN;YACE,KAAK,EAAE,iBAAiB;YACxB,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,sBAAc,EAAC,EAAE,CAAC;SAClC,EACD,GAAG,KAAK,WAAW,GAAG,EAAE,CACzB,CAAC;IACJ,CAAC;IAEO,yBAAyB;QAC/B,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,EAAE,CAAC;YACvE,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACpC,MAAM,SAAS,GAAG,CAAC,KAAkB,EAAE,IAAa,EAAE,EAAE,CACtD,IAAA,iBAAC,EAAC,6BAAc,EAAE;YAChB,EAAE,EAAE,KAAK,CAAC,EAAE;YACZ,IAAI;SACL,CAAC,CAAC;QAEL,MAAM,iBAAiB,GAAG,CAAC,WAAwB,EAAE,EAAE,CACrD,GAAG,WAAW,CAAC,KAAK,QAAQ,IAAA,2BAAc,EAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;QAE5E,MAAM,WAAW,GAAG,CAAC,OAA4B,EAAE,EAAE;YACnD,sBAAsB;YACtB,oEAAoE;YACpE,mEAAmE;YACnE,sCAAsC;YACtC,uEAAuE;YACvE,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC;YAC/C,iEAAiE;YACjE,MAAM,eAAe,GAAG,OAAO,CAAC,iBAAiB,KAAK,SAAS,CAAC;YAEhE,IAAI,CAAC,UAAU,IAAI,CAAC,eAAe,EAAE,CAAC;gBACpC,OAAO,IAAI,CAAC;YACd,CAAC;YACD,IAAI,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAC9B,OAAO,IAAA,iBAAC,EAAC,eAAQ,EAAE;oBACjB,IAAI,EAAE,UAAU;oBAChB,KAAK,EAAE,WAAW;iBACnB,CAAC,CAAC;YACL,CAAC;YACD,OAAO,CACL,OAAO,CAAC,KAAK;gBACb,IAAA,iBAAC,EAAC,eAAQ,EAAE;oBACV,IAAI,EAAE,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,4BAA4B;oBACjE,KAAK,EAAE,SAAS,CACd,OAAO,CAAC,KAAK,EACb,IAAA,0BAAiB,EAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CACxC;iBACF,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;QAEF,MAAM,YAAY,GAAG,CAAC,OAA4B,EAAE,EAAE;YACpD,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;gBAC7D,OAAO,IAAI,CAAC;YACd,CAAC;YACD,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,KAAK,SAAS,CAAC;YACzE,OAAO,IAAA,iBAAC,EACN,eAAQ,EACR;gBACE,IAAI,EAAE,eAAe;oBACnB,CAAC,CAAC,eAAe;oBACjB,CAAC,CAAC,iCAAiC;aACtC,EACD,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAC1B,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,IAAA,iBAAC,EAAC,qBAAS,EAAE;oBACjB,EAAE,EAAE,KAAK,CAAC,EAAE;oBACZ,OAAO,EAAE,IAAI,IAAA,2BAAc,EAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE;iBAC9D,CAAC;gBACF,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,IAAA,0BAAiB,EAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aACzD,CAAC,CACH,CACF,CAAC;QACJ,CAAC,CAAC;QAEF,OAAO;YACL,IAAA,iBAAC,EACC,WAAI,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI;gBACrB,IAAA,iBAAC,EAAC,eAAQ,EAAE;oBACV,IAAI,EAAE,gBAAgB;oBACtB,KAAK,EAAE,SAAS,CACd,IAAI,CAAC,aAAa,CAAC,IAAI,EACvB,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAC3C;iBACF,CAAC,EACJ,IAAI,CAAC,aAAa,CAAC,IAAI;gBACrB,IAAA,iBAAC,EAAC,eAAQ,EAAE;oBACV,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,SAAS,CACd,IAAI,CAAC,aAAa,CAAC,IAAI,EACvB,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAC3C;iBACF,CAAC,EACJ,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,EAC/B,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CACjC;YACD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,yCAAsB,CAAC;gBACpD,IAAA,iBAAC,EAAC,eAAM,EAAE;oBACR,KAAK,EAAE,oBAAoB;oBAC3B,MAAM,EAAE,eAAM,CAAC,OAAO;oBACtB,OAAO,EAAE,GAAG,EAAE;wBACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAC5B,yCAAsB,EACtB,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAC/B,CAAC;oBACJ,CAAC;iBACF,CAAC;YACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,oCAAiB,CAAC;gBAC/C,IAAA,iBAAC,EAAC,eAAM,EAAE;oBACR,KAAK,EAAE,eAAe;oBACtB,MAAM,EAAE,eAAM,CAAC,OAAO;oBACtB,OAAO,EAAE,GAAG,EAAE;wBACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAC5B,oCAAiB,EACjB,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAC/B,CAAC;oBACJ,CAAC;iBACF,CAAC;SACL,CAAC;IACJ,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,CAAC;IAC5E,CAAC;CACF;AA7RD,0DA6RC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use size file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Anchor} from '../../widgets/anchor';\nimport {Button} from '../../widgets/button';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout} from '../../widgets/grid_layout';\nimport {Section} from '../../widgets/section';\nimport {SqlRef} from '../../widgets/sql_ref';\nimport {Tree, TreeNode} from '../../widgets/tree';\nimport {Intent} from '../../widgets/common';\nimport {SchedSqlId} from '../../components/sql_utils/core_types';\nimport {\n  getThreadState,\n  getThreadStateFromConstraints,\n  ThreadState,\n} from '../../components/sql_utils/thread_state';\nimport {DurationWidget} from '../../components/widgets/duration';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {getProcessName} from '../../components/sql_utils/process';\nimport {\n  getFullThreadName,\n  getThreadName,\n} from '../../components/sql_utils/thread';\nimport {ThreadStateRef} from '../../components/widgets/thread_state';\nimport {\n  CRITICAL_PATH_CMD,\n  CRITICAL_PATH_LITE_CMD,\n} from '../../public/exposed_commands';\nimport {goToSchedSlice} from '../../components/widgets/sched';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {Trace} from '../../public/trace';\nimport {formatDuration} from '../../components/time_utils';\n\ninterface RelatedThreadStates {\n  prev?: ThreadState;\n  next?: ThreadState;\n  waker?: ThreadState;\n  wakerInterruptCtx?: boolean;\n  wakee?: ThreadState[];\n}\n\nexport class ThreadStateDetailsPanel implements TrackEventDetailsPanel {\n  private threadState?: ThreadState;\n  private relatedStates?: RelatedThreadStates;\n\n  constructor(\n    private readonly trace: Trace,\n    private readonly id: number,\n  ) {}\n\n  async load() {\n    const id = this.id;\n    this.threadState = await getThreadState(this.trace.engine, id);\n\n    if (!this.threadState) {\n      return;\n    }\n\n    const relatedStates: RelatedThreadStates = {};\n    relatedStates.prev = (\n      await getThreadStateFromConstraints(this.trace.engine, {\n        filters: [\n          `ts + dur = ${this.threadState.ts}`,\n          `utid = ${this.threadState.thread?.utid}`,\n        ],\n        limit: 1,\n      })\n    )[0];\n    relatedStates.next = (\n      await getThreadStateFromConstraints(this.trace.engine, {\n        filters: [\n          `ts = ${this.threadState.ts + this.threadState.dur}`,\n          `utid = ${this.threadState.thread?.utid}`,\n        ],\n        limit: 1,\n      })\n    )[0];\n\n    // note: this might be valid even if there is no |waker| slice, in the case\n    // of an interrupt wakeup while in the idle process (which is omitted from\n    // the thread_state table).\n    relatedStates.wakerInterruptCtx = this.threadState.wakerInterruptCtx;\n\n    if (this.threadState.wakerId !== undefined) {\n      relatedStates.waker = await getThreadState(\n        this.trace.engine,\n        this.threadState.wakerId,\n      );\n    } else if (\n      this.threadState.state == 'Running' &&\n      relatedStates.prev.wakerId != undefined\n    ) {\n      // For running slices, extract waker info from the preceding runnable.\n      relatedStates.waker = await getThreadState(\n        this.trace.engine,\n        relatedStates.prev.wakerId,\n      );\n      relatedStates.wakerInterruptCtx = relatedStates.prev.wakerInterruptCtx;\n    }\n\n    relatedStates.wakee = await getThreadStateFromConstraints(\n      this.trace.engine,\n      {\n        filters: [\n          `waker_id = ${id}`,\n          `(irq_context is null or irq_context = 0)`,\n        ],\n      },\n    );\n    this.relatedStates = relatedStates;\n  }\n\n  render() {\n    // TODO(altimin/stevegolton): Differentiate between \"Current Selection\" and\n    // \"Pinned\" views in DetailsShell.\n    return m(\n      DetailsShell,\n      {title: 'Thread State', description: this.renderLoadingText()},\n      m(\n        GridLayout,\n        m(\n          Section,\n          {title: 'Details'},\n          this.threadState && this.renderTree(this.threadState),\n        ),\n        m(\n          Section,\n          {title: 'Related thread states'},\n          this.renderRelatedThreadStates(),\n        ),\n      ),\n    );\n  }\n\n  private renderLoadingText() {\n    if (!this.threadState) {\n      return 'Loading';\n    }\n    return this.id;\n  }\n\n  private renderTree(threadState: ThreadState) {\n    const thread = threadState.thread;\n    const process = threadState.thread?.process;\n    return m(\n      Tree,\n      m(TreeNode, {\n        left: 'Start time',\n        right: m(Timestamp, {ts: threadState.ts}),\n      }),\n      m(TreeNode, {\n        left: 'Duration',\n        right: m(DurationWidget, {dur: threadState.dur}),\n      }),\n      m(TreeNode, {\n        left: 'State',\n        right: this.renderState(\n          threadState.state,\n          threadState.cpu,\n          threadState.schedSqlId,\n        ),\n      }),\n      threadState.blockedFunction &&\n        m(TreeNode, {\n          left: 'Blocked function',\n          right: threadState.blockedFunction,\n        }),\n      process &&\n        m(TreeNode, {\n          left: 'Process',\n          right: getProcessName(process),\n        }),\n      thread && m(TreeNode, {left: 'Thread', right: getThreadName(thread)}),\n      threadState.priority !== undefined &&\n        m(TreeNode, {\n          left: 'Priority',\n          right: threadState.priority,\n        }),\n      m(TreeNode, {\n        left: 'SQL ID',\n        right: m(SqlRef, {table: 'thread_state', id: threadState.id}),\n      }),\n    );\n  }\n\n  private renderState(\n    state: string,\n    cpu: number | undefined,\n    id: SchedSqlId | undefined,\n  ): m.Children {\n    if (!state) {\n      return null;\n    }\n    if (id === undefined || cpu === undefined) {\n      return state;\n    }\n    return m(\n      Anchor,\n      {\n        title: 'Go to CPU slice',\n        icon: 'call_made',\n        onclick: () => goToSchedSlice(id),\n      },\n      `${state} on CPU ${cpu}`,\n    );\n  }\n\n  private renderRelatedThreadStates(): m.Children {\n    if (this.threadState === undefined || this.relatedStates === undefined) {\n      return 'Loading';\n    }\n    const startTs = this.threadState.ts;\n    const renderRef = (state: ThreadState, name?: string) =>\n      m(ThreadStateRef, {\n        id: state.id,\n        name,\n      });\n\n    const nameForNextOrPrev = (threadState: ThreadState) =>\n      `${threadState.state} for ${formatDuration(this.trace, threadState.dur)}`;\n\n    const renderWaker = (related: RelatedThreadStates) => {\n      // Could be absent if:\n      // * this thread state wasn't woken up (e.g. it is a running slice).\n      // * the wakeup is from an interrupt during the idle process (which\n      //   isn't populated in thread_state).\n      // * at the start of the trace, before all per-cpu scheduling is known.\n      const hasWakerId = related.waker !== undefined;\n      // Interrupt context for the wakeups is absent from older traces.\n      const hasInterruptCtx = related.wakerInterruptCtx !== undefined;\n\n      if (!hasWakerId && !hasInterruptCtx) {\n        return null;\n      }\n      if (related.wakerInterruptCtx) {\n        return m(TreeNode, {\n          left: 'Woken by',\n          right: `Interrupt`,\n        });\n      }\n      return (\n        related.waker &&\n        m(TreeNode, {\n          left: hasInterruptCtx ? 'Woken by' : 'Woken by (maybe interrupt)',\n          right: renderRef(\n            related.waker,\n            getFullThreadName(related.waker.thread),\n          ),\n        })\n      );\n    };\n\n    const renderWakees = (related: RelatedThreadStates) => {\n      if (related.wakee === undefined || related.wakee.length == 0) {\n        return null;\n      }\n      const hasInterruptCtx = related.wakee[0].wakerInterruptCtx !== undefined;\n      return m(\n        TreeNode,\n        {\n          left: hasInterruptCtx\n            ? 'Woken threads'\n            : 'Woken threads (maybe interrupt)',\n        },\n        related.wakee.map((state) =>\n          m(TreeNode, {\n            left: m(Timestamp, {\n              ts: state.ts,\n              display: `+${formatDuration(this.trace, state.ts - startTs)}`,\n            }),\n            right: renderRef(state, getFullThreadName(state.thread)),\n          }),\n        ),\n      );\n    };\n\n    return [\n      m(\n        Tree,\n        this.relatedStates.prev &&\n          m(TreeNode, {\n            left: 'Previous state',\n            right: renderRef(\n              this.relatedStates.prev,\n              nameForNextOrPrev(this.relatedStates.prev),\n            ),\n          }),\n        this.relatedStates.next &&\n          m(TreeNode, {\n            left: 'Next state',\n            right: renderRef(\n              this.relatedStates.next,\n              nameForNextOrPrev(this.relatedStates.next),\n            ),\n          }),\n        renderWaker(this.relatedStates),\n        renderWakees(this.relatedStates),\n      ),\n      this.trace.commands.hasCommand(CRITICAL_PATH_LITE_CMD) &&\n        m(Button, {\n          label: 'Critical path lite',\n          intent: Intent.Primary,\n          onclick: () => {\n            this.trace.commands.runCommand(\n              CRITICAL_PATH_LITE_CMD,\n              this.threadState?.thread?.utid,\n            );\n          },\n        }),\n      this.trace.commands.hasCommand(CRITICAL_PATH_CMD) &&\n        m(Button, {\n          label: 'Critical path',\n          intent: Intent.Primary,\n          onclick: () => {\n            this.trace.commands.runCommand(\n              CRITICAL_PATH_CMD,\n              this.threadState?.thread?.utid,\n            );\n          },\n        }),\n    ];\n  }\n\n  isLoading() {\n    return this.threadState === undefined || this.relatedStates === undefined;\n  }\n}\n"]}
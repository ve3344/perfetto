{"version":3,"file":"thread_state_selection_aggregator.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.ThreadState/thread_state_selection_aggregator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ColumnDef, Sorting, ThreadStateExtra} from '../../public/aggregation';\nimport {AreaSelection} from '../../public/selection';\nimport {Engine} from '../../trace_processor/engine';\nimport {\n  LONG,\n  NUM,\n  NUM_NULL,\n  STR,\n  STR_NULL,\n} from '../../trace_processor/query_result';\nimport {AreaSelectionAggregator} from '../../public/selection';\nimport {UnionDataset} from '../../trace_processor/dataset';\nimport {translateState} from '../../components/sql_utils/thread_state';\nimport {TrackDescriptor} from '../../public/track';\n\nexport class ThreadStateSelectionAggregator implements AreaSelectionAggregator {\n  readonly id = 'thread_state_aggregation';\n\n  async createAggregateView(engine: Engine, area: AreaSelection) {\n    const dataset = this.getDatasetFromTracks(area.tracks);\n    if (dataset === undefined) return false;\n\n    await engine.query(`\n      create or replace perfetto table ${this.id} as\n      select\n        process.name as process_name,\n        process.pid,\n        thread.name as thread_name,\n        thread.tid,\n        tstate.state || ',' || ifnull(tstate.io_wait, 'NULL') as concat_state,\n        sum(tstate.dur) AS total_dur,\n        sum(tstate.dur) / count() as avg_dur,\n        count() as occurrences\n      from (${dataset.query()}) tstate\n      join thread using (utid)\n      left join process using (upid)\n      where\n        ts + dur > ${area.start}\n        and ts < ${area.end}\n      group by utid, concat_state\n    `);\n\n    return true;\n  }\n\n  async getExtra(\n    engine: Engine,\n    area: AreaSelection,\n  ): Promise<ThreadStateExtra | void> {\n    const dataset = this.getDatasetFromTracks(area.tracks);\n    if (dataset === undefined) return;\n\n    const query = `\n      select\n        state,\n        io_wait as ioWait,\n        sum(dur) as totalDur\n      from (${dataset.query()}) tstate\n      join thread using (utid)\n      where tstate.ts + tstate.dur > ${area.start}\n        and tstate.ts < ${area.end}\n      group by state, io_wait\n    `;\n    const result = await engine.query(query);\n\n    const it = result.iter({\n      state: STR_NULL,\n      ioWait: NUM_NULL,\n      totalDur: NUM,\n    });\n\n    let totalMs = 0;\n    const values = new Float64Array(result.numRows());\n    const states = [];\n    for (let i = 0; it.valid(); ++i, it.next()) {\n      const state = it.state == null ? undefined : it.state;\n      const ioWait = it.ioWait === null ? undefined : it.ioWait > 0;\n      states.push(translateState(state, ioWait));\n      const ms = it.totalDur / 1000000;\n      values[i] = ms;\n      totalMs += ms;\n    }\n    return {\n      kind: 'THREAD_STATE',\n      states,\n      values,\n      totalMs,\n    };\n  }\n\n  getColumnDefinitions(): ColumnDef[] {\n    return [\n      {\n        title: 'Process',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'process_name',\n      },\n      {\n        title: 'PID',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'pid',\n      },\n      {\n        title: 'Thread',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'thread_name',\n      },\n      {\n        title: 'TID',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'tid',\n      },\n      {\n        title: 'State',\n        kind: 'STATE',\n        columnConstructor: Uint16Array,\n        columnId: 'concat_state',\n      },\n      {\n        title: 'Wall duration (ms)',\n        kind: 'TIMESTAMP_NS',\n        columnConstructor: Float64Array,\n        columnId: 'total_dur',\n        sum: true,\n      },\n      {\n        title: 'Avg Wall duration (ms)',\n        kind: 'TIMESTAMP_NS',\n        columnConstructor: Float64Array,\n        columnId: 'avg_dur',\n      },\n      {\n        title: 'Occurrences',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'occurrences',\n        sum: true,\n      },\n    ];\n  }\n\n  getTabName() {\n    return 'Thread States';\n  }\n\n  getDefaultSorting(): Sorting {\n    return {column: 'total_dur', direction: 'DESC'};\n  }\n\n  // Creates an optimized dataset containing the thread state events within a\n  // given list of tracks, or returns undefined if no compatible tracks are\n  // present in the list.\n  private getDatasetFromTracks(tracks: ReadonlyArray<TrackDescriptor>) {\n    const desiredSchema = {\n      dur: LONG,\n      io_wait: NUM_NULL,\n      state: STR,\n      utid: NUM,\n    };\n    const validDatasets = tracks\n      .map((track) => track.track.getDataset?.())\n      .filter((ds) => ds !== undefined)\n      .filter((ds) => ds.implements(desiredSchema));\n    if (validDatasets.length === 0) {\n      return undefined;\n    }\n    return new UnionDataset(validDatasets).optimize();\n  }\n}\n"]}
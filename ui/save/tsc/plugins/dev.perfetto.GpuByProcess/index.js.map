{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.GpuByProcess/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,qEAAsE;AAItE,iFAImD;AACnD,sDAAiD;AACjD,MAAM,WAAY,SAAQ,mCAAe;IAIlB;IAHrB,YACE,KAAY,EACZ,GAAW,EACQ,IAAY;QAE/B,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAFC,SAAI,GAAJ,IAAI,CAAQ;QAG/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAES,UAAU;QAClB,OAAO,6BAAS,CAAC;IACnB,CAAC;IAES,UAAU,CAAC,GAAa;QAChC,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,YAAY;QACV,OAAO;;;qBAGU,IAAI,CAAC,IAAI;KACzB,CAAC;IACJ,CAAC;CACF;AAED;IACE,MAAM,CAAU,EAAE,GAAG,2BAA2B,CAAC;IACjD,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,yEAAyE;QACzE,MAAM,OAAO,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;KAKtC,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;YACtB,IAAI,EAAE,uBAAQ;YACd,GAAG,EAAE,uBAAQ;YACb,IAAI,EAAE,uBAAQ;SACf,CAAC,CAAC;QAEH,uCAAuC;QACvC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;gBACpB,SAAS;YACX,CAAC;YAED,MAAM,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACrB,IAAI,WAAW,GAAG,SAAS,CAAC;YAC5B,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;gBACpB,WAAW,GAAG,EAAE,CAAC,IAAI,CAAC;YACxB,CAAC;iBAAM,IAAI,EAAE,CAAC,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC1B,WAAW,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;YAC5B,CAAC;YAED,MAAM,GAAG,GAAG,6BAA6B,IAAI,EAAE,CAAC;YAChD,MAAM,KAAK,GAAG,OAAO,WAAW,EAAE,CAAC;YACnC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK;gBACL,KAAK,EAAE,IAAI,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC;aACvC,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;IACH,CAAC;;AAzCH,4BA0CC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {NUM_NULL, STR_NULL} from '../../trace_processor/query_result';\nimport {Trace} from '../../public/trace';\nimport {Slice} from '../../public/track';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {\n  NAMED_ROW,\n  NamedRow,\n  NamedSliceTrack,\n} from '../../components/tracks/named_slice_track';\nimport {TrackNode} from '../../public/workspace';\nclass GpuPidTrack extends NamedSliceTrack {\n  constructor(\n    trace: Trace,\n    uri: string,\n    protected readonly upid: number,\n  ) {\n    super(trace, uri);\n    this.upid = upid;\n  }\n\n  protected getRowSpec(): NamedRow {\n    return NAMED_ROW;\n  }\n\n  protected rowToSlice(row: NamedRow): Slice {\n    return this.rowToSliceBase(row);\n  }\n\n  getSqlSource(): string {\n    return `\n      SELECT *\n      FROM gpu_slice\n      WHERE upid = ${this.upid}\n    `;\n  }\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.GpuByProcess';\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    // Find all unique upid values in gpu_slices and join with process table.\n    const results = await ctx.engine.query(`\n      WITH slice_upids AS (\n        SELECT DISTINCT upid FROM gpu_slice\n      )\n      SELECT upid, pid, name FROM slice_upids JOIN process USING (upid)\n    `);\n\n    const it = results.iter({\n      upid: NUM_NULL,\n      pid: NUM_NULL,\n      name: STR_NULL,\n    });\n\n    // For each upid, create a GpuPidTrack.\n    for (; it.valid(); it.next()) {\n      if (it.upid == null) {\n        continue;\n      }\n\n      const upid = it.upid;\n      let processName = 'Unknown';\n      if (it.name != null) {\n        processName = it.name;\n      } else if (it.pid != null) {\n        processName = `${it.pid}`;\n      }\n\n      const uri = `dev.perfetto.GpuByProcess#${upid}`;\n      const title = `GPU ${processName}`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        track: new GpuPidTrack(ctx, uri, upid),\n      });\n      const track = new TrackNode({uri, title});\n      ctx.workspace.addChildInOrder(track);\n    }\n  }\n}\n"]}
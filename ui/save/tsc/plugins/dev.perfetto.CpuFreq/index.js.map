{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CpuFreq/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,sDAAiD;AACjD,0DAA6D;AAG7D,qEAAiE;AACjE,qDAA8C;AAE9C;IACE,MAAM,CAAU,EAAE,GAAG,sBAAsB,CAAC;IAC5C,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,MAAM,EAAC,MAAM,EAAC,GAAG,GAAG,CAAC;QAErB,MAAM,IAAI,GAAG,EAAE,CAAC;QAChB,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,KAAK,CACnC,0DAA0D,CAC3D,CAAC;QACF,KAAK,MAAM,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,kBAAG,EAAC,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YACnE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;QAED,MAAM,gBAAgB,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;KAM3C,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,gBAAgB,CAAC,QAAQ,CAAC,EAAC,IAAI,EAAE,kBAAG,EAAC,CAAC,CAAC,IAAI,CAAC;QAE/D,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,sDAAsD;YACtD,MAAM,iBAAiB,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;;wBAO3B,GAAG;;;;;2CAKgB,GAAG;;OAEvC,CAAC,CAAC;YAEH,IAAI,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC;gBACpC,MAAM,GAAG,GAAG,iBAAiB,CAAC,QAAQ,CAAC;oBACrC,SAAS,EAAE,kBAAG;oBACd,SAAS,EAAE,uBAAQ;iBACpB,CAAC,CAAC;gBACH,MAAM,WAAW,GAAG,GAAG,CAAC,SAAS,CAAC;gBAClC,MAAM,WAAW,GAAG,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC;gBAEvE,MAAM,MAAM,GAAG;oBACb,GAAG;oBACH,YAAY,EAAE,UAAU;oBACxB,WAAW;oBACX,WAAW;iBACZ,CAAC;gBAEF,MAAM,GAAG,GAAG,gBAAgB,GAAG,EAAE,CAAC;gBAClC,MAAM,KAAK,GAAG,OAAO,GAAG,YAAY,CAAC;gBACrC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;oBACvB,GAAG;oBACH,KAAK;oBACL,IAAI,EAAE;wBACJ,IAAI,EAAE,iCAAmB;wBACzB,GAAG;qBACJ;oBACD,KAAK,EAAE,IAAI,6BAAY,CAAC,MAAM,EAAE,GAAG,CAAC;iBACrC,CAAC,CAAC;gBACH,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,EAAE,EAAC,CAAC,CAAC;gBAC9D,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;IACH,CAAC;;AAtEH,4BAuEC","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {TrackNode} from '../../public/workspace';\nimport {CPU_FREQ_TRACK_KIND} from '../../public/track_kinds';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {NUM, NUM_NULL} from '../../trace_processor/query_result';\nimport {CpuFreqTrack} from './cpu_freq_track';\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.CpuFreq';\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const {engine} = ctx;\n\n    const cpus = [];\n    const cpusResult = await engine.query(\n      'select distinct cpu from cpu_counter_track order by cpu;',\n    );\n    for (const it = cpusResult.iter({cpu: NUM}); it.valid(); it.next()) {\n      cpus.push(it.cpu);\n    }\n\n    const maxCpuFreqResult = await engine.query(`\n      select ifnull(max(value), 0) as freq\n      from counter c\n      join cpu_counter_track t on c.track_id = t.id\n      join _counter_track_summary s on t.id = s.id\n      where name = 'cpufreq';\n    `);\n    const maxCpuFreq = maxCpuFreqResult.firstRow({freq: NUM}).freq;\n\n    for (const cpu of cpus) {\n      // Only add a cpu freq track if we have cpu freq data.\n      const cpuFreqIdleResult = await engine.query(`\n        select\n          id as cpuFreqId,\n          (\n            select id\n            from cpu_counter_track\n            where name = 'cpuidle'\n            and cpu = ${cpu}\n            limit 1\n          ) as cpuIdleId\n        from cpu_counter_track\n        join _counter_track_summary using (id)\n        where name = 'cpufreq' and cpu = ${cpu}\n        limit 1;\n      `);\n\n      if (cpuFreqIdleResult.numRows() > 0) {\n        const row = cpuFreqIdleResult.firstRow({\n          cpuFreqId: NUM,\n          cpuIdleId: NUM_NULL,\n        });\n        const freqTrackId = row.cpuFreqId;\n        const idleTrackId = row.cpuIdleId === null ? undefined : row.cpuIdleId;\n\n        const config = {\n          cpu,\n          maximumValue: maxCpuFreq,\n          freqTrackId,\n          idleTrackId,\n        };\n\n        const uri = `/cpu_freq_cpu${cpu}`;\n        const title = `Cpu ${cpu} Frequency`;\n        ctx.tracks.registerTrack({\n          uri,\n          title,\n          tags: {\n            kind: CPU_FREQ_TRACK_KIND,\n            cpu,\n          },\n          track: new CpuFreqTrack(config, ctx),\n        });\n        const trackNode = new TrackNode({uri, title, sortOrder: -40});\n        ctx.workspace.addChildInOrder(trackNode);\n      }\n    }\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AndroidLongBatteryTracing/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {Engine} from '../../trace_processor/engine';\nimport {createQuerySliceTrack} from '../../components/tracks/query_slice_track';\nimport {CounterOptions} from '../../components/tracks/base_counter_track';\nimport {createQueryCounterTrack} from '../../components/tracks/query_counter_track';\nimport {TrackNode} from '../../public/workspace';\n\ninterface ContainedTrace {\n  uuid: string;\n  subscription: string;\n  trigger: string;\n  // NB: these are millis.\n  ts: number;\n  dur: number;\n}\n\nconst PACKAGE_LOOKUP = `\n  create or replace perfetto table package_name_lookup as\n  with installed as (\n    select uid, string_agg(package_name, ',') as name\n    from package_list\n    where uid >= 10000\n    group by 1\n  ),\n  system(uid, name) as (\n    values\n      (0, 'AID_ROOT'),\n      (1000, 'AID_SYSTEM_USER'),\n      (1001, 'AID_RADIO'),\n      (1082, 'AID_ARTD')\n  )\n  select uid, name from installed\n  union all\n  select uid, name from system\n  order by uid;\n\n  -- Adds a \"package_name\" column by joining on \"uid\" from the source table.\n  create or replace perfetto macro add_package_name(src TableOrSubquery) returns TableOrSubquery as (\n    select A.*, ifnull(B.name, \"uid=\" || A.uid) as package_name\n    from $src as A\n    left join package_name_lookup as B\n    on (B.uid = (A.uid % 100000))\n  );\n`;\n\nconst DEFAULT_NETWORK = `\n  with base as (\n      select\n          ts,\n          substr(s.name, 6) as conn\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'battery_stats.conn'\n  ),\n  diff as (\n      select\n          ts,\n          conn,\n          conn != lag(conn) over (order by ts) as keep\n      from base\n  )\n  select\n      ts,\n      ifnull(lead(ts) over (order by ts), (select end_ts from trace_bounds)) - ts as dur,\n      case\n        when conn like '-1:%' then 'Disconnected'\n        when conn like '0:%' then 'Modem'\n        when conn like '1:%' then 'WiFi'\n        when conn like '4:%' then 'VPN'\n        else conn\n      end as name\n  from diff where keep is null or keep`;\n\nconst RADIO_TRANSPORT_TYPE = `\n  create or replace perfetto view radio_transport_data_conn as\n  select ts, safe_dur AS dur, value_name as data_conn, value AS data_conn_val\n  from android_battery_stats_state\n  where track_name = \"battery_stats.data_conn\";\n\n  create or replace perfetto view radio_transport_nr_state as\n  select ts, safe_dur AS dur, value AS nr_state_val\n  from android_battery_stats_state\n  where track_name = \"battery_stats.nr_state\";\n\n  drop table if exists radio_transport_join;\n  create virtual table radio_transport_join\n  using span_left_join(radio_transport_data_conn, radio_transport_nr_state);\n\n  create or replace perfetto view radio_transport as\n  select\n    ts, dur,\n    case data_conn_val\n      -- On LTE with NR connected is 5G NSA.\n      when 13 then iif(nr_state_val = 3, '5G (NSA)', data_conn)\n      -- On NR with NR state present, is 5G SA.\n      when 20 then iif(nr_state_val is null, '5G (SA or NSA)', '5G (SA)')\n      else data_conn\n    end as name\n  from radio_transport_join;`;\n\nconst TETHERING = `\n  with base as (\n      select\n          ts as ts_end,\n          EXTRACT_ARG(arg_set_id, 'network_tethering_reported.duration_millis') * 1000000 as dur\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'\n        and s.name = 'network_tethering_reported'\n  )\n  select ts_end - dur as ts, dur, 'Tethering' as name from base`;\n\nconst NETWORK_SUMMARY = `\n  create or replace perfetto table network_summary as\n  with base as (\n      select\n          cast(ts / 5000000000 as int64) * 5000000000 AS ts,\n          case\n              when track_name glob '*wlan*' then 'wifi'\n              when track_name glob '*rmnet*' then 'modem'\n              else 'unknown'\n          end as dev_type,\n          package_name as pkg,\n          sum(packet_length) AS value\n      from android_network_packets\n      where (track_name glob '*wlan*' or track_name glob '*rmnet*')\n      group by 1,2,3\n  ),\n  zeroes as (\n      select\n          ts,\n          dev_type,\n          pkg,\n          value\n      from base\n      union all\n      select\n          ts + 5000000000 as ts,\n          dev_type,\n          pkg,\n          0 as value\n      from base\n  ),\n  final as (\n      select\n          ts,\n          dev_type,\n          pkg,\n          sum(value) as value\n      from zeroes\n      group by 1, 2, 3\n  )\n  select * from final where ts is not null`;\n\nconst MODEM_RIL_STRENGTH = `\n  DROP VIEW IF EXISTS ScreenOn;\n  CREATE VIEW ScreenOn AS\n  SELECT ts, dur FROM (\n      SELECT\n          ts, value,\n          LEAD(ts, 1, TRACE_END()) OVER (ORDER BY ts)-ts AS dur\n      FROM counter, track ON (counter.track_id = track.id)\n      WHERE track.name = 'ScreenState'\n  ) WHERE value = 2;\n\n  DROP VIEW IF EXISTS RilSignalStrength;\n  CREATE VIEW RilSignalStrength AS\n  With RilMessages AS (\n      SELECT\n          ts, slice.name,\n          LEAD(ts, 1, TRACE_END()) OVER (ORDER BY ts)-ts AS dur\n      FROM slice, track\n      ON (slice.track_id = track.id)\n      WHERE track.name = 'RIL'\n        AND slice.name GLOB 'UNSOL_SIGNAL_STRENGTH*'\n  ),\n  BandTypes(band_ril, band_name) AS (\n      VALUES (\"CellSignalStrengthLte:\", \"LTE\"),\n              (\"CellSignalStrengthNr:\", \"NR\")\n  ),\n  ValueTypes(value_ril, value_name) AS (\n      VALUES (\"rsrp=\", \"rsrp\"),\n              (\"rssi=\", \"rssi\")\n  ),\n  Extracted AS (\n      SELECT ts, dur, band_name, value_name, (\n          SELECT CAST(SUBSTR(key_str, start_idx+1, end_idx-start_idx-1) AS INT64) AS value\n          FROM (\n              SELECT key_str, INSTR(key_str, \"=\") AS start_idx, INSTR(key_str, \" \") AS end_idx\n              FROM (\n                  SELECT SUBSTR(band_str, INSTR(band_str, value_ril)) AS key_str\n                  FROM (SELECT SUBSTR(name, INSTR(name, band_ril)) AS band_str)\n              )\n          )\n      ) AS value\n      FROM RilMessages\n      JOIN BandTypes\n      JOIN ValueTypes\n  )\n  SELECT\n  ts, dur, band_name, value_name, value,\n  value_name || \"=\" || IIF(value = 2147483647, \"unknown\", \"\"||value) AS name,\n  ROW_NUMBER() OVER (ORDER BY ts) as id,\n  DENSE_RANK() OVER (ORDER BY band_name, value_name) AS track_id\n  FROM Extracted;\n\n  DROP TABLE IF EXISTS RilScreenOn;\n  CREATE VIRTUAL TABLE RilScreenOn\n  USING SPAN_JOIN(RilSignalStrength PARTITIONED track_id, ScreenOn)`;\n\nconst MODEM_RIL_CHANNELS_PREAMBLE = `\n  CREATE OR REPLACE PERFETTO FUNCTION EXTRACT_KEY_VALUE(source STRING, key_name STRING) RETURNS STRING AS\n  SELECT SUBSTR(trimmed, INSTR(trimmed, \"=\")+1, INSTR(trimmed, \",\") - INSTR(trimmed, \"=\") - 1)\n  FROM (SELECT SUBSTR($source, INSTR($source, $key_name)) AS trimmed);`;\n\nconst MODEM_RIL_CHANNELS = `\n  With RawChannelConfig AS (\n      SELECT ts, slice.name AS raw_config\n      FROM slice, track\n      ON (slice.track_id = track.id)\n      WHERE track.name = 'RIL'\n      AND slice.name LIKE 'UNSOL_PHYSICAL_CHANNEL_CONFIG%'\n  ),\n  Attributes(attribute, attrib_name) AS (\n      VALUES (\"mCellBandwidthDownlinkKhz\", \"downlink\"),\n          (\"mCellBandwidthUplinkKhz\", \"uplink\"),\n          (\"mNetworkType\", \"network\"),\n          (\"mBand\", \"band\")\n  ),\n  Slots(idx, slot_name) AS (\n      VALUES (0, \"primary\"),\n          (1, \"secondary 1\"),\n          (2, \"secondary 2\")\n  ),\n  Stage1 AS (\n      SELECT *, IFNULL(EXTRACT_KEY_VALUE(STR_SPLIT(raw_config, \"}, {\", idx), attribute), \"\") AS name\n      FROM RawChannelConfig\n      JOIN Attributes\n      JOIN Slots\n  ),\n  Stage2 AS (\n      SELECT *, LAG(name) OVER (PARTITION BY idx, attribute ORDER BY ts) AS last_name\n      FROM Stage1\n  ),\n  Stage3 AS (\n      SELECT *, LEAD(ts, 1, TRACE_END()) OVER (PARTITION BY idx, attribute ORDER BY ts) - ts AS dur\n      FROM Stage2 WHERE name != last_name\n  )\n  SELECT ts, dur, slot_name || \"-\" || attrib_name || \"=\" || name AS name\n  FROM Stage3`;\n\nconst MODEM_CELL_RESELECTION = `\n  with base as (\n    select\n        ts,\n        s.name as raw_ril,\n        ifnull(str_split(str_split(s.name, 'CellIdentityLte{', 1), ', operatorNames', 0),\n            str_split(str_split(s.name, 'CellIdentityNr{', 1), ', operatorNames', 0)) as cell_id\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'RIL' and s.name like '%DATA_REGISTRATION_STATE%'\n  ),\n  base2 as (\n    select\n        ts,\n        raw_ril,\n        case\n            when cell_id like '%earfcn%' then 'LTE ' || cell_id\n            when cell_id like '%nrarfcn%' then 'NR ' || cell_id\n            when cell_id is null then 'Unknown'\n            else cell_id\n        end as cell_id\n    from base\n  ),\n  base3 as (\n    select ts, cell_id , lag(cell_id) over (order by ts) as lag_cell_id, raw_ril\n    from base2\n  )\n  select ts, 0 as dur, cell_id as name, raw_ril\n  from base3\n  where cell_id != lag_cell_id\n  order by ts`;\n\nconst SUSPEND_RESUME = `\n  SELECT\n    ts,\n    dur,\n    'Suspended' AS name\n  FROM android_suspend_state\n  WHERE power_state = 'suspended'`;\n\nconst SCREEN_STATE = `\n  WITH _counter AS (\n    SELECT counter.id, ts, 0 AS track_id, value\n    FROM counter\n    JOIN counter_track ON counter_track.id = counter.track_id\n    WHERE name = 'ScreenState'\n  )\n  SELECT\n    ts,\n    dur,\n    CASE value\n      -- Should be kept in sync with the enums in Display.java\n      WHEN 1 THEN 'Screen off'                        -- Display.STATE_OFF\n      WHEN 2 THEN 'Screen on'                         -- Display.STATE_ON\n      WHEN 3 THEN 'Always-on display (doze)'          -- Display.STATE_DOZE\n      WHEN 4 THEN 'Always-on display (doze-suspend)'  -- Display.STATE_DOZE_SUSPEND\n      WHEN 5 THEN 'Screen on (VR)'                    -- Display.STATE_VR\n      WHEN 6 THEN 'Screen on (suspend)'               -- Display.STATE_ON_SUSPEND\n      ELSE 'unknown'\n    END AS name\n  FROM counter_leading_intervals!(_counter)`;\n\n// See DeviceIdleController.java for where these states come from and how\n// they transition.\nconst DOZE_LIGHT = `\n  WITH _counter AS (\n    SELECT counter.id, ts, 0 AS track_id, value\n    FROM counter\n    JOIN counter_track ON counter_track.id = counter.track_id\n    WHERE name = 'DozeLightState'\n  )\n  SELECT\n    ts,\n    dur,\n    CASE value\n      WHEN 0 THEN 'active'\n      WHEN 1 THEN 'inactive'\n      WHEN 4 THEN 'idle'\n      WHEN 5 THEN 'waiting_for_network'\n      WHEN 6 THEN 'idle_maintenance'\n      WHEN 7 THEN 'override'\n      ELSE 'unknown'\n    END AS name\n  FROM counter_leading_intervals!(_counter)`;\n\nconst DOZE_DEEP = `\n  WITH _counter AS (\n    SELECT counter.id, ts, 0 AS track_id, value\n    FROM counter\n    JOIN counter_track ON counter_track.id = counter.track_id\n    WHERE name = 'DozeDeepState'\n  )\n  SELECT\n    ts,\n    dur,\n    CASE value\n      WHEN 0 THEN 'active'\n      WHEN 1 THEN 'inactive'\n      WHEN 2 THEN 'idle_pending'\n      WHEN 3 THEN 'sensing'\n      WHEN 4 THEN 'locating'\n      WHEN 5 THEN 'idle'\n      WHEN 6 THEN 'idle_maintenance'\n      WHEN 7 THEN 'quick_doze_delay'\n      ELSE 'unknown'\n    END AS name\n  FROM counter_leading_intervals!(_counter)`;\n\nconst CHARGING = `\n  WITH _counter AS (\n    SELECT counter.id, ts, 0 AS track_id, value\n    FROM counter\n    JOIN counter_track ON counter_track.id = counter.track_id\n    WHERE name = 'BatteryStatus'\n  )\n  SELECT\n    ts,\n    dur,\n    CASE value\n      -- 0 and 1 are both unknown\n      WHEN 2 THEN 'Charging'\n      WHEN 3 THEN 'Discharging'\n      -- special case when charger is present but battery isn't charging\n      WHEN 4 THEN 'Not charging'\n      WHEN 5 THEN 'Full'\n      ELSE 'unknown'\n    END AS name\n  FROM counter_leading_intervals!(_counter)`;\n\nconst THERMAL_THROTTLING = `\n  with step1 as (\n      select\n          ts,\n          EXTRACT_ARG(arg_set_id, 'thermal_throttling_severity_state_changed.sensor_type') as sensor_type,\n          EXTRACT_ARG(arg_set_id, 'thermal_throttling_severity_state_changed.sensor_name') as sensor_name,\n          EXTRACT_ARG(arg_set_id, 'thermal_throttling_severity_state_changed.temperature_deci_celsius') / 10.0 as temperature_celcius,\n          EXTRACT_ARG(arg_set_id, 'thermal_throttling_severity_state_changed.severity') as severity\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'\n      and s.name = 'thermal_throttling_severity_state_changed'\n  ),\n  step2 as (\n      select\n          ts,\n          lead(ts) over (partition by sensor_type, sensor_name order by ts) - ts as dur,\n          sensor_type,\n          sensor_name,\n          temperature_celcius,\n          severity\n      from step1\n      where sensor_type not like 'TEMPERATURE_TYPE_BCL_%'\n  )\n  select\n    ts,\n    dur,\n    case sensor_name\n        when 'VIRTUAL-SKIN' then ''\n        else sensor_name || ' is '\n    end || severity || ' (' || temperature_celcius || 'C)' as name\n  from step2\n  where severity != 'NONE'`;\n\nconst KERNEL_WAKELOCKS = `\n  create or replace perfetto table kernel_wakelocks as\n  with kernel_wakelock_args as (\n    select\n      arg_set_id,\n      min(iif(key = 'kernel_wakelock.name', string_value, null)) as wakelock_name,\n      min(iif(key = 'kernel_wakelock.count', int_value, null)) as count,\n      min(iif(key = 'kernel_wakelock.time_micros', int_value, null)) as time_micros\n    from args\n    where key in (\n      'kernel_wakelock.name',\n      'kernel_wakelock.count',\n      'kernel_wakelock.time_micros'\n    )\n    group by 1\n  ),\n  interesting as (\n    select wakelock_name\n    from (\n      select wakelock_name, max(time_micros)-min(time_micros) as delta_us\n      from kernel_wakelock_args\n      group by 1\n    )\n    -- Only consider wakelocks with over 1 second of time during the whole trace\n    where delta_us > 1e6\n  ),\n  step1 as (\n    select ts, wakelock_name, count, time_micros\n    from kernel_wakelock_args\n    join interesting using (wakelock_name)\n    join slice using (arg_set_id)\n  ),\n  step2 as (\n    select\n      ts,\n      wakelock_name,\n      lead(ts) over (partition by wakelock_name order by ts) as ts_end,\n      lead(count) over (partition by wakelock_name order by ts) - count as count,\n      (lead(time_micros) over (partition by wakelock_name order by ts) - time_micros) * 1000 as wakelock_dur\n    from step1\n  ),\n  step3 as (\n    select\n      ts,\n      ts_end,\n      ifnull((select sum(dur) from android_suspend_state s\n              where power_state = 'suspended'\n                and s.ts > step2.ts\n                and s.ts < step2.ts_end), 0) as suspended_dur,\n      wakelock_name,\n      count,\n      wakelock_dur\n    from step2\n    where wakelock_dur is not null\n      and wakelock_dur >= 0\n  )\n  select\n    ts,\n    ts_end - ts as dur,\n    wakelock_name,\n    min(100.0 * wakelock_dur / (ts_end - ts - suspended_dur), 100) as value\n  from step3`;\n\nconst KERNEL_WAKELOCKS_SUMMARY = `\n  select wakelock_name, max(value) as max_value\n  from kernel_wakelocks\n  where wakelock_name not in ('PowerManager.SuspendLockout', 'PowerManagerService.Display')\n  group by 1\n  having max_value > 1\n  order by 1;`;\n\nconst HIGH_CPU = `\n  create or replace perfetto table high_cpu as\n  with cpu_cycles_args AS (\n    select\n      arg_set_id,\n      min(iif(key = 'cpu_cycles_per_uid_cluster.uid', int_value, null)) as uid,\n      min(iif(key = 'cpu_cycles_per_uid_cluster.cluster', int_value, null)) as cluster,\n      min(iif(key = 'cpu_cycles_per_uid_cluster.time_millis', int_value, null)) as time_millis\n    from args\n    where key in (\n      'cpu_cycles_per_uid_cluster.uid',\n      'cpu_cycles_per_uid_cluster.cluster',\n      'cpu_cycles_per_uid_cluster.time_millis'\n    )\n    group by 1\n  ),\n  interesting AS (\n    select uid, cluster\n    from (\n      select uid, cluster, max(time_millis)-min(time_millis) as delta_ms\n      from cpu_cycles_args\n      group by 1, 2\n    )\n    -- Only consider tracks with over 1 second of cpu during the whole trace\n    where delta_ms > 1e3\n  ),\n  base as (\n    select ts, uid, cluster, sum(time_millis) as time_millis\n    from cpu_cycles_args\n    join interesting using (uid, cluster)\n    join slice using (arg_set_id)\n    group by 1, 2, 3\n  ),\n  with_windows as (\n    select\n      ts,\n      uid,\n      cluster,\n      lead(ts) over (partition by uid, cluster order by ts) - ts as dur,\n      (lead(time_millis) over (partition by uid, cluster order by ts) - time_millis) * 1000000.0 as cpu_dur\n    from base\n  ),\n  with_ratio as (\n    select\n      ts,\n      iif(dur is null, 0, max(0, 100.0 * cpu_dur / dur)) as value,\n      case cluster when 0 then 'little' when 1 then 'mid' when 2 then 'big' else 'cl-' || cluster end as cluster,\n      package_name as pkg\n    from add_package_name!(with_windows)\n  )\n  select ts, sum(value) as value, cluster, pkg\n  from with_ratio\n  group by 1, 3, 4`;\n\nconst WAKEUPS = `\n  drop table if exists wakeups;\n  create table wakeups as\n  with wakeup_reason as (\n      select\n      ts,\n      substr(i.name, 0, instr(i.name, ' ')) as id_timestamp,\n      substr(i.name, instr(i.name, ' ') + 1) as raw_wakeup\n      from track t join instant i on t.id = i.track_id\n      where t.name = 'wakeup_reason'\n  ),\n  wakeup_attribution as (\n      select\n      substr(i.name, 0, instr(i.name, ' ')) as id_timestamp,\n      substr(i.name, instr(i.name, ' ') + 1) as attribution\n      from track t join instant i on t.id = i.track_id\n      where t.name = 'wakeup_attribution'\n  ),\n  step1 as(\n    select\n      ts,\n      raw_wakeup,\n      attribution,\n      null as raw_backoff\n    from wakeup_reason r\n      left outer join wakeup_attribution using(id_timestamp)\n    union all\n    select\n      ts,\n      null as raw_wakeup,\n      null as attribution,\n      i.name as raw_backoff\n    from track t join instant i on t.id = i.track_id\n    where t.name = 'suspend_backoff'\n  ),\n  step2 as (\n    select\n      ts,\n      raw_wakeup,\n      attribution,\n      lag(raw_backoff) over (order by ts) as raw_backoff\n    from step1\n  ),\n  step3 as (\n    select\n      ts,\n      raw_wakeup,\n      attribution,\n      str_split(raw_backoff, ' ', 0) as suspend_quality,\n      str_split(raw_backoff, ' ', 1) as backoff_state,\n      str_split(raw_backoff, ' ', 2) as backoff_reason,\n      cast(str_split(raw_backoff, ' ', 3) as int) as backoff_count,\n      cast(str_split(raw_backoff, ' ', 4) as int) as backoff_millis,\n      false as suspend_end\n    from step2\n    where raw_wakeup is not null\n    union all\n    select\n      ts,\n      null as raw_wakeup,\n      null as attribution,\n      null as suspend_quality,\n      null as backoff_state,\n      null as backoff_reason,\n      null as backoff_count,\n      null as backoff_millis,\n      true as suspend_end\n    from android_suspend_state\n    where power_state = 'suspended'\n  ),\n  step4 as (\n    select\n      ts,\n      case suspend_quality\n        when 'good' then\n          min(\n            lead(ts, 1, ts + 5e9) over (order by ts) - ts,\n            5e9\n          )\n        when 'bad' then backoff_millis * 1000000\n        else 0\n      end as dur,\n      raw_wakeup,\n      attribution,\n      suspend_quality,\n      backoff_state,\n      backoff_reason,\n      backoff_count,\n      backoff_millis,\n      suspend_end\n    from step3\n  ),\n  step5 as (\n    select\n      ts,\n      dur,\n      raw_wakeup,\n      attribution,\n      suspend_quality,\n      backoff_state,\n      backoff_reason,\n      backoff_count,\n      backoff_millis\n    from step4\n    where not suspend_end\n  ),\n  step6 as (\n    select\n      ts,\n      dur,\n      raw_wakeup,\n      attribution,\n      suspend_quality,\n      backoff_state,\n      backoff_reason,\n      backoff_count,\n      backoff_millis,\n      case\n        when raw_wakeup like 'Abort: Pending Wakeup Sources: %' then 'abort_pending'\n        when raw_wakeup like 'Abort: Last active Wakeup Source: %' then 'abort_last_active'\n        when raw_wakeup like 'Abort: %' then 'abort_other'\n        else 'normal'\n      end as type,\n      case\n        when raw_wakeup like 'Abort: Pending Wakeup Sources: %' then substr(raw_wakeup, 32)\n        when raw_wakeup like 'Abort: Last active Wakeup Source: %' then substr(raw_wakeup, 35)\n        when raw_wakeup like 'Abort: %' then substr(raw_wakeup, 8)\n        else raw_wakeup\n      end as main,\n      case\n        when raw_wakeup like 'Abort: Pending Wakeup Sources: %' then ' '\n        when raw_wakeup like 'Abort: %' then 'no delimiter needed'\n        else ':'\n      end as delimiter\n    from step5\n  ),\n  step7 as (\n    select\n      ts,\n      dur,\n      raw_wakeup,\n      attribution,\n      suspend_quality,\n      backoff_state,\n      backoff_reason,\n      backoff_count,\n      backoff_millis,\n      type,\n      str_split(main, delimiter, 0) as item_0,\n      str_split(main, delimiter, 1) as item_1,\n      str_split(main, delimiter, 2) as item_2,\n      str_split(main, delimiter, 3) as item_3\n    from step6\n  ),\n  step8 as (\n    select ts, dur, raw_wakeup, attribution, suspend_quality, backoff_state, backoff_reason, backoff_count, backoff_millis, type, item_0 as item from step7\n    union all\n    select ts, dur, raw_wakeup, attribution, suspend_quality, backoff_state, backoff_reason, backoff_count, backoff_millis, type, item_1 as item from step7 where item_1 is not null\n    union all\n    select ts, dur, raw_wakeup, attribution, suspend_quality, backoff_state, backoff_reason, backoff_count, backoff_millis, type, item_2 as item from step7 where item_2 is not null\n    union all\n    select ts, dur, raw_wakeup, attribution, suspend_quality, backoff_state, backoff_reason, backoff_count, backoff_millis, type, item_3 as item from step7 where item_3 is not null\n  )\n  select\n    ts,\n    dur,\n    ts + dur as ts_end,\n    raw_wakeup,\n    attribution,\n    suspend_quality,\n    backoff_state,\n    ifnull(backoff_reason, 'none') as backoff_reason,\n    backoff_count,\n    backoff_millis,\n    type,\n    case when type = 'normal' then ifnull(str_split(item, ' ', 1), item) else item end as item\n  from step8`;\n\nconst WAKEUPS_COLUMNS = [\n  'item',\n  'type',\n  'raw_wakeup',\n  'attribution',\n  'suspend_quality',\n  'backoff_state',\n  'backoff_reason',\n  'backoff_count',\n  'backoff_millis',\n];\n\nfunction bleScanQuery(condition: string) {\n  return `\n  with step1 as (\n      select\n          ts,\n          extract_arg(arg_set_id, 'ble_scan_state_changed.attribution_node[0].tag') as name,\n          extract_arg(arg_set_id, 'ble_scan_state_changed.is_opportunistic') as opportunistic,\n          extract_arg(arg_set_id, 'ble_scan_state_changed.is_filtered') as filtered,\n          extract_arg(arg_set_id, 'ble_scan_state_changed.state') as state\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'\n      and s.name = 'ble_scan_state_changed'\n  ),\n  step2 as (\n      select\n          ts,\n          name,\n          state,\n          opportunistic,\n          filtered,\n          lead(ts) over (partition by name order by ts) - ts as dur\n      from step1\n  )\n  select ts, dur, name from step2 where state = 'ON' and ${condition} and dur is not null`;\n}\n\nconst BLE_RESULTS = `\n  with step1 as (\n      select\n          ts,\n          extract_arg(arg_set_id, 'ble_scan_result_received.attribution_node[0].tag') as name,\n          extract_arg(arg_set_id, 'ble_scan_result_received.num_results') as num_results\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'\n      and s.name = 'ble_scan_result_received'\n  )\n  select\n      ts,\n      0 as dur,\n      name || ' (' || num_results || ' results)' as name\n  from step1`;\n\nconst BT_A2DP_AUDIO = `\n  with step1 as (\n    select\n        ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_a2dp_playback_state_changed.playback_state') as playback_state,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_a2dp_playback_state_changed.audio_coding_mode') as audio_coding_mode,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_a2dp_playback_state_changed.metric_id') as metric_id\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_a2dp_playback_state_changed'\n  ),\n  step2 as (\n    select\n        ts,\n        lead(ts) over (partition by metric_id order by ts) - ts as dur,\n        playback_state,\n        audio_coding_mode,\n        metric_id\n    from step1\n  )\n  select\n    ts,\n    dur,\n    audio_coding_mode as name\n  from step2\n  where playback_state = 'PLAYBACK_STATE_PLAYING'`;\n\nconst BT_CONNS_ACL = `\n    with acl1 as (\n        select\n            ts,\n            EXTRACT_ARG(arg_set_id, 'bluetooth_acl_connection_state_changed.state') as state,\n            EXTRACT_ARG(arg_set_id, 'bluetooth_acl_connection_state_changed.transport') as transport,\n            EXTRACT_ARG(arg_set_id, 'bluetooth_acl_connection_state_changed.metric_id') as metric_id\n        from track t join slice s on t.id = s.track_id\n        where t.name = 'Statsd Atoms'\n        and s.name = 'bluetooth_acl_connection_state_changed'\n    ),\n    acl2 as (\n        select\n            ts,\n            lead(ts) over (partition by metric_id, transport order by ts) - ts as dur,\n            state,\n            transport,\n            metric_id\n        from acl1\n    )\n    select\n        ts,\n        dur,\n        'Device ' || metric_id ||\n          ' (' || case transport when 'TRANSPORT_TYPE_BREDR' then 'Classic' when 'TRANSPORT_TYPE_LE' then 'BLE' end || ')' as name\n    from acl2\n    where state != 'CONNECTION_STATE_DISCONNECTED' and dur is not null`;\n\nconst BT_CONNS_SCO = `\n  with sco1 as (\n    select\n        ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_sco_connection_state_changed.state') as state,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_sco_connection_state_changed.codec') as codec,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_sco_connection_state_changed.metric_id') as metric_id\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_sco_connection_state_changed'\n  ),\n  sco2 as (\n    select\n        ts,\n        lead(ts) over (partition by metric_id, codec order by ts) - ts as dur,\n        state,\n        codec,\n        metric_id\n    from sco1\n  )\n  select\n    ts,\n    dur,\n    case state when 'CONNECTION_STATE_CONNECTED' then '' when 'CONNECTION_STATE_CONNECTING' then 'Connecting ' when 'CONNECTION_STATE_DISCONNECTING' then 'Disconnecting ' else 'unknown ' end ||\n      'Device ' || metric_id || ' (' ||\n      case codec when 'SCO_CODEC_CVSD' then 'CVSD' when 'SCO_CODEC_MSBC' then 'MSBC' end || ')' as name\n  from sco2\n  where state != 'CONNECTION_STATE_DISCONNECTED' and dur is not null`;\n\nconst BT_LINK_LEVEL_EVENTS = `\n  with base as (\n    select\n        ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.direction') as direction,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.type') as type,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.hci_cmd') as hci_cmd,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.hci_event') as hci_event,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.hci_ble_event') as hci_ble_event,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.cmd_status') as cmd_status,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.reason_code') as reason_code,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_link_layer_connection_event.metric_id') as metric_id\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_link_layer_connection_event'\n  )\n  select\n    *,\n    0 as dur,\n    'Device '|| metric_id as name\n  from base`;\n\nconst BT_LINK_LEVEL_EVENTS_COLUMNS = [\n  'direction',\n  'type',\n  'hci_cmd',\n  'hci_event',\n  'hci_ble_event',\n  'cmd_status',\n  'reason_code',\n  'metric_id',\n];\n\nconst BT_QUALITY_REPORTS = `\n  with base as (\n      select\n          ts,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.quality_report_id') as quality_report_id,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.packet_types') as packet_types,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.connection_handle') as connection_handle,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.connection_role') as connection_role,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.tx_power_level') as tx_power_level,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.rssi') as rssi,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.snr') as snr,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.unused_afh_channel_count') as unused_afh_channel_count,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.afh_select_unideal_channel_count') as afh_select_unideal_channel_count,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.lsto') as lsto,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.connection_piconet_clock') as connection_piconet_clock,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.retransmission_count') as retransmission_count,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.no_rx_count') as no_rx_count,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.nak_count') as nak_count,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.flow_off_count') as flow_off_count,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.buffer_overflow_bytes') as buffer_overflow_bytes,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_quality_report_reported.buffer_underflow_bytes') as buffer_underflow_bytes\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'\n      and s.name = 'bluetooth_quality_report_reported'\n  )\n  select\n      *,\n      0 as dur,\n      'Connection '|| connection_handle as name\n  from base`;\n\nconst BT_QUALITY_REPORTS_COLUMNS = [\n  'quality_report_id',\n  'packet_types',\n  'connection_handle',\n  'connection_role',\n  'tx_power_level',\n  'rssi',\n  'snr',\n  'unused_afh_channel_count',\n  'afh_select_unideal_channel_count',\n  'lsto',\n  'connection_piconet_clock',\n  'retransmission_count',\n  'no_rx_count',\n  'nak_count',\n  'flow_off_count',\n  'buffer_overflow_bytes',\n  'buffer_underflow_bytes',\n];\n\nconst BT_RSSI_REPORTS = `\n  with base as (\n    select\n        ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_device_rssi_reported.connection_handle') as connection_handle,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_device_rssi_reported.hci_status') as hci_status,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_device_rssi_reported.rssi') as rssi,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_device_rssi_reported.metric_id') as metric_id\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_device_rssi_reported'\n  )\n  select\n    *,\n    0 as dur,\n    'Connection '|| connection_handle as name\n  from base`;\n\nconst BT_RSSI_REPORTS_COLUMNS = [\n  'connection_handle',\n  'hci_status',\n  'rssi',\n  'metric_id',\n];\n\nconst BT_CODE_PATH_COUNTER = `\n  with base as (\n    select\n        ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_code_path_counter.key') as key,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_code_path_counter.number') as number\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_code_path_counter'\n  )\n  select\n    *,\n    0 as dur,\n    key as name\n  from base`;\n\nconst BT_CODE_PATH_COUNTER_COLUMNS = ['key', 'number'];\n\nconst BT_HAL_CRASHES = `\n  with base as (\n      select\n          ts,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_hal_crash_reason_reported.metric_id') as metric_id,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_hal_crash_reason_reported.error_code') as error_code,\n          EXTRACT_ARG(arg_set_id, 'bluetooth_hal_crash_reason_reported.vendor_error_code') as vendor_error_code\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'\n      and s.name = 'bluetooth_hal_crash_reason_reported'\n  )\n  select\n      *,\n      0 as dur,\n      'Device ' || metric_id as name\n  from base`;\n\nconst BT_HAL_CRASHES_COLUMNS = ['metric_id', 'error_code', 'vendor_error_code'];\n\nconst BT_BYTES = `\n  with step1 as (\n    select\n        ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_bytes_transfer.uid') as uid,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_bytes_transfer.tx_bytes') as tx_bytes,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_bytes_transfer.rx_bytes') as rx_bytes\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_bytes_transfer'\n  ),\n  step2 as (\n    select\n        ts,\n        lead(ts) over (partition by uid order by ts) - ts as dur,\n        uid,\n        lead(tx_bytes) over (partition by uid order by ts) - tx_bytes as tx_bytes,\n        lead(rx_bytes) over (partition by uid order by ts) - rx_bytes as rx_bytes\n    from step1\n  ),\n  step3 as (\n    select\n        ts,\n        dur,\n        uid % 100000 as uid,\n        sum(tx_bytes) as tx_bytes,\n        sum(rx_bytes) as rx_bytes\n    from step2\n    where tx_bytes >=0 and rx_bytes >=0\n    group by 1,2,3\n    having tx_bytes > 0 or rx_bytes > 0\n  )\n    select\n        ts,\n        dur,\n        format(\"%s: TX %d bytes / RX %d bytes\", package_name, tx_bytes, rx_bytes) as name\n    from add_package_name!(step3)\n`;\n\n// See go/bt_system_context_report for reference on the bit-twiddling.\nconst BT_ACTIVITY = `\n  create perfetto table bt_activity as\n  with step1 as (\n    select\n        EXTRACT_ARG(arg_set_id, 'bluetooth_activity_info.timestamp_millis') * 1000000 as ts,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_activity_info.bluetooth_stack_state') as bluetooth_stack_state,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_activity_info.controller_idle_time_millis') * 1000000 as controller_idle_dur,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_activity_info.controller_tx_time_millis') * 1000000 as controller_tx_dur,\n        EXTRACT_ARG(arg_set_id, 'bluetooth_activity_info.controller_rx_time_millis') * 1000000 as controller_rx_dur\n    from track t join slice s on t.id = s.track_id\n    where t.name = 'Statsd Atoms'\n    and s.name = 'bluetooth_activity_info'\n  ),\n  step2 as (\n    select\n        ts,\n        lead(ts) over (order by ts) - ts as dur,\n        bluetooth_stack_state,\n        lead(controller_idle_dur) over (order by ts) - controller_idle_dur as controller_idle_dur,\n        lead(controller_tx_dur) over (order by ts) - controller_tx_dur as controller_tx_dur,\n        lead(controller_rx_dur) over (order by ts) - controller_rx_dur as controller_rx_dur\n    from step1\n  )\n  select\n    ts,\n    dur,\n    bluetooth_stack_state & 0x0000000F as acl_active_count,\n    bluetooth_stack_state & 0x000000F0 >> 4 as acl_sniff_count,\n    bluetooth_stack_state & 0x00000F00 >> 8 as acl_ble_count,\n    bluetooth_stack_state & 0x0000F000 >> 12 as advertising_count,\n    case bluetooth_stack_state & 0x000F0000 >> 16\n      when 0 then 0\n      when 1 then 5\n      when 2 then 10\n      when 3 then 25\n      when 4 then 100\n      else -1\n    end as le_scan_duty_cycle,\n    bluetooth_stack_state & 0x00100000 >> 20 as inquiry_active,\n    bluetooth_stack_state & 0x00200000 >> 21 as sco_active,\n    bluetooth_stack_state & 0x00400000 >> 22 as a2dp_active,\n    bluetooth_stack_state & 0x00800000 >> 23 as le_audio_active,\n    max(0, 100.0 * controller_idle_dur / dur) as controller_idle_pct,\n    max(0, 100.0 * controller_tx_dur / dur) as controller_tx_pct,\n    max(0, 100.0 * controller_rx_dur / dur) as controller_rx_pct\n  from step2\n`;\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.AndroidLongBatteryTracing';\n  private readonly groups = new Map<string, TrackNode>();\n\n  private addTrack(ctx: Trace, track: TrackNode, groupName?: string): void {\n    if (groupName) {\n      const existingGroup = this.groups.get(groupName);\n      if (existingGroup) {\n        existingGroup.addChildInOrder(track);\n      } else {\n        const group = new TrackNode({title: groupName, isSummary: true});\n        group.addChildInOrder(track);\n        this.groups.set(groupName, group);\n        ctx.workspace.addChildInOrder(group);\n      }\n    } else {\n      ctx.workspace.addChildInOrder(track);\n    }\n  }\n\n  async addSliceTrack(\n    ctx: Trace,\n    name: string,\n    query: string,\n    groupName?: string,\n    columns: string[] = [],\n  ) {\n    const uri = `/long_battery_tracing_${name}`;\n    const track = await createQuerySliceTrack({\n      trace: ctx,\n      uri,\n      data: {\n        sqlSource: query,\n        columns: ['ts', 'dur', 'name', ...columns],\n      },\n      argColumns: columns,\n    });\n    ctx.tracks.registerTrack({\n      uri,\n      title: name,\n      track,\n    });\n    const trackNode = new TrackNode({uri, title: name});\n    this.addTrack(ctx, trackNode, groupName);\n  }\n\n  async addCounterTrack(\n    ctx: Trace,\n    name: string,\n    query: string,\n    groupName: string,\n    options?: Partial<CounterOptions>,\n  ) {\n    const uri = `/long_battery_tracing_${name}`;\n    const track = await createQueryCounterTrack({\n      trace: ctx,\n      uri,\n      data: {\n        sqlSource: query,\n        columns: ['ts', 'value'],\n      },\n      options,\n    });\n    ctx.tracks.registerTrack({\n      uri,\n      title: name,\n      track,\n    });\n    const trackNode = new TrackNode({uri, title: name});\n    this.addTrack(ctx, trackNode, groupName);\n  }\n\n  async addBatteryStatsState(\n    ctx: Trace,\n    name: string,\n    track: string,\n    groupName: string,\n    features: Set<string>,\n  ) {\n    if (!features.has(`track.${track}`)) {\n      return;\n    }\n    await this.addSliceTrack(\n      ctx,\n      name,\n      `SELECT ts, safe_dur AS dur, value_name AS name\n    FROM android_battery_stats_state\n    WHERE track_name = \"${track}\"`,\n      groupName,\n    );\n  }\n\n  async addBatteryStatsEvent(\n    ctx: Trace,\n    name: string,\n    track: string,\n    groupName: string | undefined,\n    features: Set<string>,\n  ) {\n    if (!features.has(`track.${track}`)) {\n      return;\n    }\n\n    await this.addSliceTrack(\n      ctx,\n      name,\n      `SELECT ts, safe_dur AS dur, str_value AS name\n    FROM android_battery_stats_event_slices\n    WHERE track_name = \"${track}\"`,\n      groupName,\n    );\n  }\n\n  async addDeviceState(ctx: Trace, features: Set<string>): Promise<void> {\n    if (!features.has('track.battery_stats.*')) {\n      return;\n    }\n\n    const query = (name: string, track: string) =>\n      this.addBatteryStatsEvent(ctx, name, track, undefined, features);\n\n    const e = ctx.engine;\n    await e.query(`INCLUDE PERFETTO MODULE android.battery_stats;`);\n    await e.query(`INCLUDE PERFETTO MODULE android.suspend;`);\n    await e.query(`INCLUDE PERFETTO MODULE counters.intervals;`);\n\n    await this.addSliceTrack(ctx, 'Device State: Screen state', SCREEN_STATE);\n    await this.addSliceTrack(ctx, 'Device State: Charging', CHARGING);\n    await this.addSliceTrack(\n      ctx,\n      'Device State: Suspend / resume',\n      SUSPEND_RESUME,\n    );\n    await this.addSliceTrack(ctx, 'Device State: Doze light state', DOZE_LIGHT);\n    await this.addSliceTrack(ctx, 'Device State: Doze deep state', DOZE_DEEP);\n\n    query('Device State: Top app', 'battery_stats.top');\n\n    await this.addSliceTrack(\n      ctx,\n      'Device State: Long wakelocks',\n      `SELECT\n            ts - 60000000000 as ts,\n            safe_dur + 60000000000 as dur,\n            str_value AS name,\n            package_name as package\n        FROM add_package_name!((\n          select *, int_value as uid\n          from android_battery_stats_event_slices\n          WHERE track_name = \"battery_stats.longwake\"\n        ))`,\n      undefined,\n      ['package'],\n    );\n\n    query('Device State: Foreground apps', 'battery_stats.fg');\n    query('Device State: Jobs', 'battery_stats.job');\n\n    if (features.has('atom.thermal_throttling_severity_state_changed')) {\n      await this.addSliceTrack(\n        ctx,\n        'Device State: Thermal throttling',\n        THERMAL_THROTTLING,\n      );\n    }\n  }\n\n  async addAtomCounters(ctx: Trace): Promise<void> {\n    const e = ctx.engine;\n\n    try {\n      await e.query(\n        `INCLUDE PERFETTO MODULE\n            google3.wireless.android.telemetry.trace_extractor.modules.atom_counters_slices`,\n      );\n    } catch (e) {\n      return;\n    }\n\n    const counters = await e.query(\n      `select distinct ui_group, ui_name, ui_unit, counter_name\n       from atom_counters\n       where ui_name is not null`,\n    );\n    const countersIt = counters.iter({\n      ui_group: 'str',\n      ui_name: 'str',\n      ui_unit: 'str',\n      counter_name: 'str',\n    });\n    for (; countersIt.valid(); countersIt.next()) {\n      const unit = countersIt.ui_unit;\n      const opts =\n        unit === '%'\n          ? {yOverrideMaximum: 100, unit: '%'}\n          : unit !== undefined\n            ? {unit}\n            : undefined;\n\n      await this.addCounterTrack(\n        ctx,\n        countersIt.ui_name,\n        `select ts, ${unit === '%' ? 100.0 : 1.0} * counter_value as value\n         from atom_counters\n         where counter_name = '${countersIt.counter_name}'`,\n        countersIt.ui_group,\n        opts,\n      );\n    }\n  }\n\n  async addAtomSlices(ctx: Trace): Promise<void> {\n    const e = ctx.engine;\n\n    try {\n      await e.query(\n        `INCLUDE PERFETTO MODULE\n            google3.wireless.android.telemetry.trace_extractor.modules.atom_counters_slices`,\n      );\n    } catch (e) {\n      return;\n    }\n\n    const sliceTracks = await e.query(\n      `select distinct ui_group, ui_name, atom, field\n       from atom_slices\n       where ui_name is not null\n       order by 1, 2, 3, 4`,\n    );\n    const slicesIt = sliceTracks.iter({\n      atom: 'str',\n      ui_group: 'str',\n      ui_name: 'str',\n      field: 'str',\n    });\n\n    const tracks = new Map<\n      string,\n      {\n        ui_group: string;\n        ui_name: string;\n      }\n    >();\n    const fields = new Map<string, string[]>();\n    for (; slicesIt.valid(); slicesIt.next()) {\n      const atom = slicesIt.atom;\n      let args = fields.get(atom);\n      if (args === undefined) {\n        args = [];\n        fields.set(atom, args);\n      }\n      args.push(slicesIt.field);\n      tracks.set(atom, {\n        ui_group: slicesIt.ui_group,\n        ui_name: slicesIt.ui_name,\n      });\n    }\n\n    for (const [atom, args] of fields) {\n      function safeArg(arg: string) {\n        return arg.replaceAll(/[[\\]]/g, '').replaceAll(/\\./g, '_');\n      }\n\n      // We need to make arg names compatible with SQL here because they pass through several\n      // layers of SQL without being quoted in \"\".\n      function argSql(arg: string) {\n        return `max(case when field = '${arg}' then ifnull(string_value, int_value) end)\n                as ${safeArg(arg)}`;\n      }\n\n      await this.addSliceTrack(\n        ctx,\n        tracks.get(atom)!.ui_name,\n        `select ts, dur, slice_name as name, ${args.map((a) => argSql(a)).join(', ')}\n         from atom_slices\n         where atom = '${atom}'\n         group by ts, dur, name`,\n        tracks.get(atom)!.ui_group,\n        args.map((a) => safeArg(a)),\n      );\n    }\n  }\n\n  async addNetworkSummary(ctx: Trace, features: Set<string>): Promise<void> {\n    if (!features.has('net.modem') && !features.has('net.wifi')) {\n      return;\n    }\n\n    const groupName = 'Network Summary';\n\n    const e = ctx.engine;\n    await e.query(`INCLUDE PERFETTO MODULE android.battery_stats;`);\n    await e.query(`INCLUDE PERFETTO MODULE android.network_packets;`);\n    await e.query(NETWORK_SUMMARY);\n    await e.query(RADIO_TRANSPORT_TYPE);\n\n    await this.addSliceTrack(\n      ctx,\n      'Default network',\n      DEFAULT_NETWORK,\n      groupName,\n    );\n\n    if (features.has('atom.network_tethering_reported')) {\n      await this.addSliceTrack(ctx, 'Tethering', TETHERING, groupName);\n    }\n    if (features.has('net.wifi')) {\n      await this.addCounterTrack(\n        ctx,\n        'Wifi total bytes',\n        `select ts, sum(value) as value from network_summary where dev_type = 'wifi' group by 1`,\n        groupName,\n        {yDisplay: 'log', yRangeSharingKey: 'net_bytes', unit: 'byte'},\n      );\n      const result = await e.query(\n        `select pkg, sum(value) from network_summary where dev_type='wifi' group by 1 order by 2 desc limit 10`,\n      );\n      const it = result.iter({pkg: 'str'});\n      for (; it.valid(); it.next()) {\n        await this.addCounterTrack(\n          ctx,\n          `Top wifi: ${it.pkg}`,\n          `select ts, value from network_summary where dev_type = 'wifi' and pkg = '${it.pkg}'`,\n          groupName,\n          {yDisplay: 'log', yRangeSharingKey: 'net_bytes', unit: 'byte'},\n        );\n      }\n    }\n    this.addBatteryStatsState(\n      ctx,\n      'Wifi interface',\n      'battery_stats.wifi_radio',\n      groupName,\n      features,\n    );\n    this.addBatteryStatsState(\n      ctx,\n      'Wifi supplicant state',\n      'battery_stats.wifi_suppl',\n      groupName,\n      features,\n    );\n    this.addBatteryStatsState(\n      ctx,\n      'Wifi strength',\n      'battery_stats.wifi_signal_strength',\n      groupName,\n      features,\n    );\n    if (features.has('net.modem')) {\n      await this.addCounterTrack(\n        ctx,\n        'Modem total bytes',\n        `select ts, sum(value) as value from network_summary where dev_type = 'modem' group by 1`,\n        groupName,\n        {yDisplay: 'log', yRangeSharingKey: 'net_bytes', unit: 'byte'},\n      );\n      const result = await e.query(\n        `select pkg, sum(value) from network_summary where dev_type='modem' group by 1 order by 2 desc limit 10`,\n      );\n      const it = result.iter({pkg: 'str'});\n      for (; it.valid(); it.next()) {\n        await this.addCounterTrack(\n          ctx,\n          `Top modem: ${it.pkg}`,\n          `select ts, value from network_summary where dev_type = 'modem' and pkg = '${it.pkg}'`,\n          groupName,\n          {yDisplay: 'log', yRangeSharingKey: 'net_bytes', unit: 'byte'},\n        );\n      }\n    }\n    this.addBatteryStatsState(\n      ctx,\n      'Cellular interface',\n      'battery_stats.mobile_radio',\n      groupName,\n      features,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'Cellular connection',\n      `select ts, dur, name from radio_transport`,\n      groupName,\n    );\n    this.addBatteryStatsState(\n      ctx,\n      'Cellular strength',\n      'battery_stats.phone_signal_strength',\n      groupName,\n      features,\n    );\n  }\n\n  async addModemDetail(ctx: Trace, features: Set<string>): Promise<void> {\n    const groupName = 'Modem Detail';\n    if (features.has('track.ril')) {\n      await this.addModemRil(ctx, groupName);\n    }\n    await this.addModemTeaData(ctx, groupName);\n  }\n\n  async addModemRil(ctx: Trace, groupName: string): Promise<void> {\n    const rilStrength = async (band: string, value: string) =>\n      await this.addSliceTrack(\n        ctx,\n        `Modem signal strength ${band} ${value}`,\n        `SELECT ts, dur, name FROM RilScreenOn WHERE band_name = '${band}' AND value_name = '${value}'`,\n        groupName,\n      );\n\n    const e = ctx.engine;\n\n    await e.query(MODEM_RIL_STRENGTH);\n    await e.query(MODEM_RIL_CHANNELS_PREAMBLE);\n\n    await rilStrength('LTE', 'rsrp');\n    await rilStrength('LTE', 'rssi');\n    await rilStrength('NR', 'rsrp');\n    await rilStrength('NR', 'rssi');\n\n    await this.addSliceTrack(\n      ctx,\n      'Modem channel config',\n      MODEM_RIL_CHANNELS,\n      groupName,\n    );\n\n    await this.addSliceTrack(\n      ctx,\n      'Modem cell reselection',\n      MODEM_CELL_RESELECTION,\n      groupName,\n      ['raw_ril'],\n    );\n  }\n\n  async addModemTeaData(ctx: Trace, groupName: string): Promise<void> {\n    const e = ctx.engine;\n\n    try {\n      await e.query(\n        `INCLUDE PERFETTO MODULE\n            google3.wireless.android.telemetry.trace_extractor.modules.modem_tea_metrics`,\n      );\n    } catch {\n      return;\n    }\n\n    const counters = await e.query(\n      `select distinct name from pixel_modem_counters`,\n    );\n    const countersIt = counters.iter({name: 'str'});\n    for (; countersIt.valid(); countersIt.next()) {\n      await this.addCounterTrack(\n        ctx,\n        countersIt.name,\n        `select ts, value from pixel_modem_counters where name = '${countersIt.name}'`,\n        groupName,\n      );\n    }\n    const slices = await e.query(\n      `select distinct track_name from pixel_modem_slices`,\n    );\n    const slicesIt = slices.iter({track_name: 'str'});\n    for (; slicesIt.valid(); slicesIt.next()) {\n      await this.addSliceTrack(\n        ctx,\n        slicesIt.track_name,\n        `select ts, dur, slice_name as name from pixel_modem_slices\n            where track_name = '${slicesIt.track_name}'`,\n        groupName,\n      );\n    }\n  }\n\n  async addKernelWakelocks(ctx: Trace, features: Set<string>): Promise<void> {\n    if (!features.has('atom.kernel_wakelock')) {\n      return;\n    }\n    const groupName = 'Kernel Wakelock Summary';\n\n    const e = ctx.engine;\n    await e.query(`INCLUDE PERFETTO MODULE android.suspend;`);\n    await e.query(KERNEL_WAKELOCKS);\n    const result = await e.query(KERNEL_WAKELOCKS_SUMMARY);\n    const it = result.iter({wakelock_name: 'str'});\n    for (; it.valid(); it.next()) {\n      await this.addCounterTrack(\n        ctx,\n        it.wakelock_name,\n        `select ts, dur, value from kernel_wakelocks where wakelock_name = \"${it.wakelock_name}\"`,\n        groupName,\n        {yRangeSharingKey: 'kernel_wakelock', unit: '%'},\n      );\n    }\n  }\n\n  async addWakeups(ctx: Trace, features: Set<string>): Promise<void> {\n    if (!features.has('track.suspend_backoff')) {\n      return;\n    }\n\n    const e = ctx.engine;\n    const groupName = 'Wakeups';\n    await e.query(`INCLUDE PERFETTO MODULE android.suspend;`);\n    await e.query(WAKEUPS);\n    const result = await e.query(`select\n          item,\n          sum(dur) as sum_dur\n      from wakeups\n      group by 1\n      having sum_dur > 600e9`);\n    const it = result.iter({item: 'str'});\n    const sqlPrefix = `select\n                ts,\n                dur,\n                item || case backoff_reason\n                  when 'short' then ' (Short suspend backoff)'\n                  when 'failed' then ' (Failed suspend backoff)'\n                  else ''\n                end as name,\n                item,\n                type,\n                raw_wakeup,\n                attribution,\n                suspend_quality,\n                backoff_state,\n                backoff_reason,\n                backoff_count,\n                backoff_millis\n            from wakeups`;\n    const items = [];\n    let labelOther = false;\n    for (; it.valid(); it.next()) {\n      labelOther = true;\n      await this.addSliceTrack(\n        ctx,\n        `Wakeup ${it.item}`,\n        `${sqlPrefix} where item=\"${it.item}\"`,\n        groupName,\n        WAKEUPS_COLUMNS,\n      );\n      items.push(it.item);\n    }\n    await this.addSliceTrack(\n      ctx,\n      labelOther ? 'Other wakeups' : 'Wakeups',\n      `${sqlPrefix} where item not in ('${items.join(\"','\")}')`,\n      groupName,\n      WAKEUPS_COLUMNS,\n    );\n  }\n\n  async addHighCpu(ctx: Trace, features: Set<string>): Promise<void> {\n    if (!features.has('atom.cpu_cycles_per_uid_cluster')) {\n      return;\n    }\n    const groupName = 'CPU per UID (major users)';\n\n    const e = ctx.engine;\n\n    await e.query(HIGH_CPU);\n    const result = await e.query(\n      `select distinct pkg, cluster from high_cpu where value > 10 order by 1, 2`,\n    );\n    const it = result.iter({pkg: 'str', cluster: 'str'});\n    for (; it.valid(); it.next()) {\n      await this.addCounterTrack(\n        ctx,\n        `CPU (${it.cluster}): ${it.pkg}`,\n        `select ts, value from high_cpu where pkg = \"${it.pkg}\" and cluster=\"${it.cluster}\"`,\n        groupName,\n        {yOverrideMaximum: 100, unit: '%'},\n      );\n    }\n  }\n\n  async addBluetooth(ctx: Trace, features: Set<string>): Promise<void> {\n    if (\n      !Array.from(features.values()).some(\n        (f) => f.startsWith('atom.bluetooth_') || f.startsWith('atom.ble_'),\n      )\n    ) {\n      return;\n    }\n    const groupName = 'Bluetooth';\n    await this.addSliceTrack(\n      ctx,\n      'BLE Scans (opportunistic)',\n      bleScanQuery('opportunistic'),\n      groupName,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'BLE Scans (filtered)',\n      bleScanQuery('filtered'),\n      groupName,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'BLE Scans (unfiltered)',\n      bleScanQuery('not filtered'),\n      groupName,\n    );\n    await this.addSliceTrack(ctx, 'BLE Scan Results', BLE_RESULTS, groupName);\n    await this.addSliceTrack(ctx, 'Connections (ACL)', BT_CONNS_ACL, groupName);\n    await this.addSliceTrack(ctx, 'Connections (SCO)', BT_CONNS_SCO, groupName);\n    await this.addSliceTrack(\n      ctx,\n      'Link-level Events',\n      BT_LINK_LEVEL_EVENTS,\n      groupName,\n      BT_LINK_LEVEL_EVENTS_COLUMNS,\n    );\n    await this.addSliceTrack(ctx, 'A2DP Audio', BT_A2DP_AUDIO, groupName);\n    await this.addSliceTrack(\n      ctx,\n      'Bytes Transferred (L2CAP/RFCOMM)',\n      BT_BYTES,\n      groupName,\n    );\n    await ctx.engine.query(BT_ACTIVITY);\n    await this.addCounterTrack(\n      ctx,\n      'ACL Classic Active Count',\n      'select ts, dur, acl_active_count as value from bt_activity',\n      groupName,\n    );\n    await this.addCounterTrack(\n      ctx,\n      'ACL Classic Sniff Count',\n      'select ts, dur, acl_sniff_count as value from bt_activity',\n      groupName,\n    );\n    await this.addCounterTrack(\n      ctx,\n      'ACL BLE Count',\n      'select ts, dur, acl_ble_count as value from bt_activity',\n      groupName,\n    );\n    await this.addCounterTrack(\n      ctx,\n      'Advertising Instance Count',\n      'select ts, dur, advertising_count as value from bt_activity',\n      groupName,\n    );\n    await this.addCounterTrack(\n      ctx,\n      'LE Scan Duty Cycle Maximum',\n      'select ts, dur, le_scan_duty_cycle as value from bt_activity',\n      groupName,\n      {unit: '%'},\n    );\n    await this.addSliceTrack(\n      ctx,\n      'Inquiry Active',\n      \"select ts, dur, 'Active' as name from bt_activity where inquiry_active\",\n      groupName,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'SCO Active',\n      \"select ts, dur, 'Active' as name from bt_activity where sco_active\",\n      groupName,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'A2DP Active',\n      \"select ts, dur, 'Active' as name from bt_activity where a2dp_active\",\n      groupName,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'LE Audio Active',\n      \"select ts, dur, 'Active' as name from bt_activity where le_audio_active\",\n      groupName,\n    );\n    await this.addCounterTrack(\n      ctx,\n      'Controller Idle Time',\n      'select ts, dur, controller_idle_pct as value from bt_activity',\n      groupName,\n      {yRangeSharingKey: 'bt_controller_time', unit: '%'},\n    );\n    await this.addCounterTrack(\n      ctx,\n      'Controller TX Time',\n      'select ts, dur, controller_tx_pct as value from bt_activity',\n      groupName,\n      {yRangeSharingKey: 'bt_controller_time', unit: '%'},\n    );\n    await this.addCounterTrack(\n      ctx,\n      'Controller RX Time',\n      'select ts, dur, controller_rx_pct as value from bt_activity',\n      groupName,\n      {yRangeSharingKey: 'bt_controller_time', unit: '%'},\n    );\n    await this.addSliceTrack(\n      ctx,\n      'Quality reports',\n      BT_QUALITY_REPORTS,\n      groupName,\n      BT_QUALITY_REPORTS_COLUMNS,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'RSSI Reports',\n      BT_RSSI_REPORTS,\n      groupName,\n      BT_RSSI_REPORTS_COLUMNS,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'HAL Crashes',\n      BT_HAL_CRASHES,\n      groupName,\n      BT_HAL_CRASHES_COLUMNS,\n    );\n    await this.addSliceTrack(\n      ctx,\n      'Code Path Counter',\n      BT_CODE_PATH_COUNTER,\n      groupName,\n      BT_CODE_PATH_COUNTER_COLUMNS,\n    );\n  }\n\n  async addContainedTraces(\n    ctx: Trace,\n    containedTraces: ContainedTrace[],\n  ): Promise<void> {\n    const bySubscription = new Map<string, ContainedTrace[]>();\n    for (const trace of containedTraces) {\n      if (!bySubscription.has(trace.subscription)) {\n        bySubscription.set(trace.subscription, []);\n      }\n      bySubscription.get(trace.subscription)!.push(trace);\n    }\n\n    for (const [subscription, traces] of bySubscription) {\n      await this.addSliceTrack(\n        ctx,\n        subscription,\n        traces\n          .map(\n            (t) => `SELECT\n          CAST(${t.ts} * 1e6 AS int) AS ts,\n          CAST(${t.dur} * 1e6 AS int) AS dur,\n          '${t.trigger === '' ? 'Trace' : t.trigger}' AS name,\n          'http://go/trace-uuid/${t.uuid}' AS link\n        `,\n          )\n          .join(' UNION ALL '),\n        'Other traces',\n        ['link'],\n      );\n    }\n  }\n\n  async findFeatures(e: Engine): Promise<Set<string>> {\n    const features = new Set<string>();\n\n    const addFeatures = async (q: string) => {\n      const result = await e.query(q);\n      const it = result.iter({feature: 'str'});\n      for (; it.valid(); it.next()) {\n        features.add(it.feature);\n      }\n    };\n\n    await addFeatures(`\n      select distinct 'atom.' || s.name as feature\n      from track t join slice s on t.id = s.track_id\n      where t.name = 'Statsd Atoms'`);\n\n    await addFeatures(`\n      select distinct\n        case when name like '%wlan%' then 'net.wifi'\n            when name like '%rmnet%' then 'net.modem'\n            else 'net.other'\n        end as feature\n      from track\n      where name like '%Transmitted' or name like '%Received'`);\n\n    await addFeatures(`\n      select distinct 'track.' || lower(name) as feature\n      from track where name in ('RIL', 'suspend_backoff') or name like 'battery_stats.%'`);\n\n    await addFeatures(`\n      select distinct 'track.battery_stats.*' as feature\n      from track where name like 'battery_stats.%'`);\n\n    return features;\n  }\n\n  async addTracks(ctx: Trace): Promise<void> {\n    const features: Set<string> = await this.findFeatures(ctx.engine);\n\n    const containedTraces = (ctx.openerPluginArgs?.containedTraces ??\n      []) as ContainedTrace[];\n\n    await ctx.engine.query(PACKAGE_LOOKUP);\n    await this.addNetworkSummary(ctx, features);\n    await this.addBluetooth(ctx, features);\n    await this.addAtomCounters(ctx);\n    await this.addAtomSlices(ctx);\n    await this.addModemDetail(ctx, features);\n    await this.addKernelWakelocks(ctx, features);\n    await this.addWakeups(ctx, features);\n    await this.addDeviceState(ctx, features);\n    await this.addHighCpu(ctx, features);\n    await this.addContainedTraces(ctx, containedTraces);\n  }\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    await this.addTracks(ctx);\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/com.android.GpuWorkPeriod/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,qEAA4D;AAG5D,sDAAiD;AACjD,0DAA0D;AAC1D,iFAAgF;AAEhF;IACE,MAAM,CAAU,EAAE,GAAG,2BAA2B,CAAC;IAEjD,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,MAAM,EAAC,MAAM,EAAC,GAAG,GAAG,CAAC;QACrB,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;KAmBjC,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;YACrB,OAAO,EAAE,kBAAG;YACZ,GAAG,EAAE,kBAAG;YACR,KAAK,EAAE,kBAAG;YACV,WAAW,EAAE,kBAAG;SACjB,CAAC,CAAC;QAEH,MAAM,eAAe,GAAG,IAAI,GAAG,EAAqB,CAAC;QACrD,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,MAAM,EAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAC,GAAG,EAAE,CAAC;YAC9C,MAAM,GAAG,GAAG,oBAAoB,KAAK,IAAI,GAAG,EAAE,CAAC;YAC/C,MAAM,KAAK,GAAG,MAAM,IAAA,yCAAqB,EAAC;gBACxC,KAAK,EAAE,GAAG;gBACV,GAAG;gBACH,IAAI,EAAE;oBACJ,SAAS,EAAE;;;+BAGU,OAAO;WAC3B;iBACF;aACF,CAAC,CAAC;YACH,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE;oBACJ,QAAQ,EAAE,CAAC,OAAO,CAAC;oBACnB,IAAI,EAAE,8BAAgB;iBACvB;gBACD,KAAK;aACN,CAAC,CAAC;YACH,IAAI,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC5C,IAAI,UAAU,KAAK,SAAS,EAAE,CAAC;gBAC7B,UAAU,GAAG,IAAI,qBAAS,CAAC;oBACzB,KAAK,EAAE,wBAAwB,KAAK,GAAG;oBACvC,SAAS,EAAE,IAAI;iBAChB,CAAC,CAAC;gBACH,eAAe,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBACvC,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC5C,CAAC;YACD,UAAU,CAAC,eAAe,CAAC,IAAI,qBAAS,CAAC,EAAC,KAAK,EAAE,WAAW,EAAE,GAAG,EAAC,CAAC,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;;AApEH,4BAqEC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {NUM, STR} from '../../trace_processor/query_result';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {Trace} from '../../public/trace';\nimport {TrackNode} from '../../public/workspace';\nimport {SLICE_TRACK_KIND} from '../../public/track_kinds';\nimport {createQuerySliceTrack} from '../../components/tracks/query_slice_track';\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'com.android.GpuWorkPeriod';\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const {engine} = ctx;\n    const result = await engine.query(`\n      include perfetto module android.gpu.work_period;\n\n      with grouped_packages as materialized (\n        select\n          uid,\n          group_concat(package_name, ',') as package_name,\n          count() as cnt\n        from package_list\n        group by uid\n      )\n      select\n        t.id trackId,\n        t.uid as uid,\n        t.gpu_id as gpuId,\n        iif(g.cnt = 1, g.package_name, 'UID ' || t.uid) as packageName\n      from android_gpu_work_period_track t\n      left join grouped_packages g using (uid)\n      order by uid\n    `);\n\n    const it = result.iter({\n      trackId: NUM,\n      uid: NUM,\n      gpuId: NUM,\n      packageName: STR,\n    });\n\n    const workPeriodByGpu = new Map<number, TrackNode>();\n    for (; it.valid(); it.next()) {\n      const {trackId, gpuId, uid, packageName} = it;\n      const uri = `/gpu_work_period_${gpuId}_${uid}`;\n      const track = await createQuerySliceTrack({\n        trace: ctx,\n        uri,\n        data: {\n          sqlSource: `\n            select ts, dur, name\n            from slice\n            where track_id = ${trackId}\n          `,\n        },\n      });\n      ctx.tracks.registerTrack({\n        uri,\n        title: packageName,\n        tags: {\n          trackIds: [trackId],\n          kind: SLICE_TRACK_KIND,\n        },\n        track,\n      });\n      let workPeriod = workPeriodByGpu.get(gpuId);\n      if (workPeriod === undefined) {\n        workPeriod = new TrackNode({\n          title: `GPU Work Period (GPU ${gpuId})`,\n          isSummary: true,\n        });\n        workPeriodByGpu.set(gpuId, workPeriod);\n        ctx.workspace.addChildInOrder(workPeriod);\n      }\n      workPeriod.addChildInOrder(new TrackNode({title: packageName, uri}));\n    }\n  }\n}\n"]}
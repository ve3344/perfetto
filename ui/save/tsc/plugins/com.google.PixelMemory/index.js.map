{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/com.google.PixelMemory/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAIjC,uEAA0E;AAE1E;IACE,MAAM,CAAU,EAAE,GAAG,wBAAwB,CAAC;IAE9C,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,0CAA0C;YAC9C,IAAI,EAAE,yCAAyC;YAC/C,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;gBACtB,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;oBACtB,GAAG,GAAG,MAAM,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;oBACxC,IAAI,GAAG,KAAK,IAAI;wBAAE,OAAO;gBAC3B,CAAC;gBACD,MAAM,OAAO,GAAG;;;;;;;;;;;;SAYf,CAAC;gBACF,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAChC,MAAM,IAAA,mCAAoB,EAAC;oBACzB,KAAK,EAAE,GAAG;oBACV,IAAI,EAAE;wBACJ,SAAS,EAAE;;;;;8BAKO,GAAG;aACpB;wBACD,OAAO,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC;qBACzB;oBACD,KAAK,EAAE,GAAG,GAAG,+BAA+B;iBAC7C,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC;;AA1CH,4BA2CC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {addDebugCounterTrack} from '../../components/tracks/debug_tracks';\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'com.google.PixelMemory';\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.PixelMemory#ShowTotalMemory',\n      name: 'Add tracks: show a process total memory',\n      callback: async (pid) => {\n        if (pid === undefined) {\n          pid = prompt('Enter a process pid', '');\n          if (pid === null) return;\n        }\n        const RSS_ALL = `\n          INCLUDE PERFETTO MODULE android.gpu.memory;\n          INCLUDE PERFETTO MODULE linux.memory.process;\n\n          DROP TABLE IF EXISTS process_mem_rss_anon_file_shmem_swap_gpu;\n\n          CREATE VIRTUAL TABLE process_mem_rss_anon_file_shmem_swap_gpu\n          USING\n            SPAN_OUTER_JOIN(\n              android_gpu_memory_per_process PARTITIONED upid,\n              memory_rss_and_swap_per_process PARTITIONED upid\n            );\n        `;\n        await ctx.engine.query(RSS_ALL);\n        await addDebugCounterTrack({\n          trace: ctx,\n          data: {\n            sqlSource: `\n                SELECT\n                  ts,\n                  COALESCE(rss_and_swap, 0) + COALESCE(gpu_memory, 0) AS value\n                FROM process_mem_rss_anon_file_shmem_swap_gpu\n                WHERE pid = ${pid}\n            `,\n            columns: ['ts', 'value'],\n          },\n          title: pid + '_rss_anon_file_swap_shmem_gpu',\n        });\n      },\n    });\n  }\n}\n"]}
{"version":3,"file":"ftrace_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Ftrace/ftrace_track.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {duration, Time, time} from '../../base/time';\nimport {colorForFtrace} from '../../components/colorizer';\nimport {LIMIT} from '../../components/tracks/track_data';\nimport {Store, TimelineFetcher} from '../../components/tracks/track_helper';\nimport {checkerboardExcept} from '../../components/checkerboard';\nimport {TrackData} from '../../components/tracks/track_data';\nimport {Engine} from '../../trace_processor/engine';\nimport {Track} from '../../public/track';\nimport {LONG, NUM, STR} from '../../trace_processor/query_result';\nimport {FtraceFilter} from './common';\nimport {Monitor} from '../../base/monitor';\nimport {TrackRenderContext} from '../../public/track';\nimport {SourceDataset, Dataset} from '../../trace_processor/dataset';\n\nconst MARGIN = 2;\nconst RECT_HEIGHT = 18;\nconst RECT_WIDTH = 8;\nconst TRACK_HEIGHT = RECT_HEIGHT + 2 * MARGIN;\n\ninterface Data extends TrackData {\n  events: Array<{\n    timestamp: time;\n    color: string;\n  }>;\n}\n\nexport interface Config {\n  cpu?: number;\n}\n\nexport class FtraceRawTrack implements Track {\n  private fetcher = new TimelineFetcher(this.onBoundsChange.bind(this));\n  private engine: Engine;\n  private cpu: number;\n  private store: Store<FtraceFilter>;\n  private readonly monitor: Monitor;\n\n  constructor(engine: Engine, cpu: number, store: Store<FtraceFilter>) {\n    this.engine = engine;\n    this.cpu = cpu;\n    this.store = store;\n\n    this.monitor = new Monitor([() => store.state]);\n  }\n\n  getDataset(): Dataset {\n    return new SourceDataset({\n      // 'ftrace_event' doesn't have a dur column, but injecting dur=0 (all\n      // ftrace events are effectively 'instant') allows us to participate in\n      // generic slice aggregations\n      src: 'select id, ts, 0 as dur, name, cpu from ftrace_event',\n      schema: {\n        id: NUM,\n        name: STR,\n        ts: LONG,\n        dur: LONG,\n      },\n      filter: {\n        col: 'cpu',\n        eq: this.cpu,\n      },\n    });\n  }\n\n  async onUpdate({\n    visibleWindow,\n    resolution,\n  }: TrackRenderContext): Promise<void> {\n    this.monitor.ifStateChanged(() => {\n      this.fetcher.invalidate();\n    });\n    await this.fetcher.requestData(visibleWindow.toTimeSpan(), resolution);\n  }\n\n  async onDestroy?(): Promise<void> {\n    this.fetcher[Symbol.dispose]();\n  }\n\n  getHeight(): number {\n    return TRACK_HEIGHT;\n  }\n\n  async onBoundsChange(\n    start: time,\n    end: time,\n    resolution: duration,\n  ): Promise<Data> {\n    const excludeList = Array.from(this.store.state.excludeList);\n    const excludeListSql = excludeList.map((s) => `'${s}'`).join(',');\n    const cpuFilter = this.cpu === undefined ? '' : `and cpu = ${this.cpu}`;\n\n    const queryRes = await this.engine.query(`\n      select\n        cast(ts / ${resolution} as integer) * ${resolution} as tsQuant,\n        name\n      from ftrace_event\n      where\n        name not in (${excludeListSql}) and\n        ts >= ${start} and ts <= ${end} ${cpuFilter}\n      group by tsQuant\n      order by tsQuant limit ${LIMIT};`);\n\n    const rowCount = queryRes.numRows();\n\n    const it = queryRes.iter({tsQuant: LONG, name: STR});\n    const events = [];\n    for (let row = 0; it.valid(); it.next(), row++) {\n      events.push({\n        timestamp: Time.fromRaw(it.tsQuant),\n        color: colorForFtrace(it.name).base.cssString,\n      });\n    }\n    return {\n      start,\n      end,\n      resolution,\n      length: rowCount,\n      events,\n    };\n  }\n\n  render({ctx, size, timescale}: TrackRenderContext): void {\n    const data = this.fetcher.data;\n\n    if (data === undefined) return; // Can't possibly draw anything.\n\n    const dataStartPx = timescale.timeToPx(data.start);\n    const dataEndPx = timescale.timeToPx(data.end);\n\n    checkerboardExcept(\n      ctx,\n      this.getHeight(),\n      0,\n      size.width,\n      dataStartPx,\n      dataEndPx,\n    );\n    for (const e of data.events) {\n      ctx.fillStyle = e.color;\n      const xPos = Math.floor(timescale.timeToPx(e.timestamp));\n      ctx.fillRect(xPos - RECT_WIDTH / 2, MARGIN, RECT_WIDTH, RECT_HEIGHT);\n    }\n  }\n}\n"]}
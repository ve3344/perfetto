{"version":3,"file":"ftrace_explorer.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Ftrace/ftrace_explorer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {time, Time} from '../../base/time';\nimport {colorForFtrace} from '../../components/colorizer';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {\n  MultiSelectDiff,\n  Option as MultiSelectOption,\n  PopupMultiSelect,\n} from '../../widgets/multiselect';\nimport {PopupPosition} from '../../widgets/popup';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {FtraceFilter, FtraceStat} from './common';\nimport {Engine} from '../../trace_processor/engine';\nimport {LONG, NUM, STR, STR_NULL} from '../../trace_processor/query_result';\nimport {AsyncLimiter} from '../../base/async_limiter';\nimport {Monitor} from '../../base/monitor';\nimport {Button} from '../../widgets/button';\nimport {VirtualTable, VirtualTableRow} from '../../widgets/virtual_table';\nimport {Store} from '../../base/store';\nimport {Trace} from '../../public/trace';\n\nconst ROW_H = 20;\n\ninterface FtraceExplorerAttrs {\n  cache: FtraceExplorerCache;\n  filterStore: Store<FtraceFilter>;\n  trace: Trace;\n}\n\ninterface FtraceEvent {\n  id: number;\n  ts: time;\n  name: string;\n  cpu: number;\n  thread: string | null;\n  process: string | null;\n  args: string;\n}\n\ninterface FtracePanelData {\n  events: FtraceEvent[];\n  offset: number;\n  numEvents: number; // Number of events in the visible window\n}\n\ninterface Pagination {\n  offset: number;\n  count: number;\n}\n\nexport interface FtraceExplorerCache {\n  state: 'blank' | 'loading' | 'valid';\n  counters: FtraceStat[];\n}\n\nasync function getFtraceCounters(engine: Engine): Promise<FtraceStat[]> {\n  // TODO(stevegolton): this is an extraordinarily slow query on large traces\n  // as it goes through every ftrace event which can be a lot on big traces.\n  // Consider if we can have some different UX which avoids needing these\n  // counts\n  // TODO(mayzner): the +name below is an awful hack to workaround\n  // extraordinarily slow sorting of strings. However, even with this hack,\n  // this is just a slow query. There are various ways we can improve this\n  // (e.g. with using the vtab_distinct APIs of SQLite).\n  const result = await engine.query(`\n    select\n      name,\n      count(1) as cnt\n    from ftrace_event\n    group by name\n    order by cnt desc\n  `);\n  const counters: FtraceStat[] = [];\n  const it = result.iter({name: STR, cnt: NUM});\n  for (let row = 0; it.valid(); it.next(), row++) {\n    counters.push({name: it.name, count: it.cnt});\n  }\n  return counters;\n}\n\nexport class FtraceExplorer implements m.ClassComponent<FtraceExplorerAttrs> {\n  private pagination: Pagination = {\n    offset: 0,\n    count: 0,\n  };\n  private readonly monitor: Monitor;\n  private readonly queryLimiter = new AsyncLimiter();\n\n  // A cache of the data we have most recently loaded from our store\n  private data?: FtracePanelData;\n\n  constructor({attrs}: m.CVnode<FtraceExplorerAttrs>) {\n    this.monitor = new Monitor([\n      () => attrs.trace.timeline.visibleWindow.toTimeSpan().start,\n      () => attrs.trace.timeline.visibleWindow.toTimeSpan().end,\n      () => attrs.filterStore.state,\n    ]);\n\n    if (attrs.cache.state === 'blank') {\n      getFtraceCounters(attrs.trace.engine)\n        .then((counters) => {\n          attrs.cache.counters = counters;\n          attrs.cache.state = 'valid';\n        })\n        .catch(() => {\n          attrs.cache.state = 'blank';\n        });\n      attrs.cache.state = 'loading';\n    }\n  }\n\n  view({attrs}: m.CVnode<FtraceExplorerAttrs>) {\n    this.monitor.ifStateChanged(() => {\n      this.reloadData(attrs);\n    });\n\n    return m(\n      DetailsShell,\n      {\n        title: this.renderTitle(),\n        buttons: this.renderFilterPanel(attrs),\n        fillParent: true,\n      },\n      m(VirtualTable, {\n        className: 'pf-ftrace-explorer',\n        columns: [\n          {header: 'ID', width: '5em'},\n          {header: 'Timestamp', width: '13em'},\n          {header: 'Name', width: '24em'},\n          {header: 'CPU', width: '3em'},\n          {header: 'Process', width: '24em'},\n          {header: 'Args', width: '200em'},\n        ],\n        firstRowOffset: this.data?.offset ?? 0,\n        numRows: this.data?.numEvents ?? 0,\n        rowHeight: ROW_H,\n        rows: this.renderData(),\n        onReload: (offset, count) => {\n          this.pagination = {offset, count};\n          this.reloadData(attrs);\n        },\n        onRowHover: (id) => {\n          const event = this.data?.events.find((event) => event.id === id);\n          if (event) {\n            attrs.trace.timeline.hoverCursorTimestamp = event.ts;\n          }\n        },\n        onRowOut: () => {\n          attrs.trace.timeline.hoverCursorTimestamp = undefined;\n        },\n      }),\n    );\n  }\n\n  private reloadData(attrs: FtraceExplorerAttrs): void {\n    this.queryLimiter.schedule(async () => {\n      this.data = await lookupFtraceEvents(\n        attrs.trace,\n        this.pagination.offset,\n        this.pagination.count,\n        attrs.filterStore.state,\n      );\n      attrs.trace.scheduleFullRedraw();\n    });\n  }\n\n  private renderData(): VirtualTableRow[] {\n    if (!this.data) {\n      return [];\n    }\n\n    return this.data.events.map((event) => {\n      const {ts, name, cpu, process, args, id} = event;\n      const timestamp = m(Timestamp, {ts});\n      const color = colorForFtrace(name).base.cssString;\n\n      return {\n        id,\n        cells: [\n          id,\n          timestamp,\n          m(\n            '.pf-ftrace-namebox',\n            m('.pf-ftrace-colorbox', {style: {background: color}}),\n            name,\n          ),\n          cpu,\n          process,\n          args,\n        ],\n      };\n    });\n  }\n\n  private renderTitle() {\n    if (this.data) {\n      const {numEvents} = this.data;\n      return `Ftrace Events (${numEvents})`;\n    } else {\n      return 'Ftrace Events';\n    }\n  }\n\n  private renderFilterPanel(attrs: FtraceExplorerAttrs) {\n    if (attrs.cache.state !== 'valid') {\n      return m(Button, {\n        label: 'Filter',\n        disabled: true,\n        loading: true,\n      });\n    }\n\n    const excludeList = attrs.filterStore.state.excludeList;\n    const options: MultiSelectOption[] = attrs.cache.counters.map(\n      ({name, count}) => {\n        return {\n          id: name,\n          name: `${name} (${count})`,\n          checked: !excludeList.some((excluded: string) => excluded === name),\n        };\n      },\n    );\n\n    return m(PopupMultiSelect, {\n      label: 'Filter',\n      icon: 'filter_list_alt',\n      popupPosition: PopupPosition.Top,\n      options,\n      onChange: (diffs: MultiSelectDiff[]) => {\n        const newList = new Set<string>(excludeList);\n        diffs.forEach(({checked, id}) => {\n          if (checked) {\n            newList.delete(id);\n          } else {\n            newList.add(id);\n          }\n        });\n        attrs.filterStore.edit((draft) => {\n          draft.excludeList = Array.from(newList);\n        });\n      },\n    });\n  }\n}\n\nasync function lookupFtraceEvents(\n  trace: Trace,\n  offset: number,\n  count: number,\n  filter: FtraceFilter,\n): Promise<FtracePanelData> {\n  const {start, end} = trace.timeline.visibleWindow.toTimeSpan();\n\n  const excludeList = filter.excludeList;\n  const excludeListSql = excludeList.map((s) => `'${s}'`).join(',');\n\n  // TODO(stevegolton): This query can be slow when traces are huge.\n  // The number of events is only used for correctly sizing the panel's\n  // scroll container so that the scrollbar works as if the panel were fully\n  // populated.\n  // Perhaps we could work out some UX that doesn't need this.\n  let queryRes = await trace.engine.query(`\n    select count(id) as numEvents\n    from ftrace_event\n    where\n      ftrace_event.name not in (${excludeListSql}) and\n      ts >= ${start} and ts <= ${end}\n    `);\n  const {numEvents} = queryRes.firstRow({numEvents: NUM});\n\n  queryRes = await trace.engine.query(`\n    select\n      ftrace_event.id as id,\n      ftrace_event.ts as ts,\n      ftrace_event.name as name,\n      ftrace_event.cpu as cpu,\n      thread.name as thread,\n      process.name as process,\n      to_ftrace(ftrace_event.id) as args\n    from ftrace_event\n    join thread using (utid)\n    left join process on thread.upid = process.upid\n    where\n      ftrace_event.name not in (${excludeListSql}) and\n      ts >= ${start} and ts <= ${end}\n    order by id\n    limit ${count} offset ${offset};`);\n  const events: FtraceEvent[] = [];\n  const it = queryRes.iter({\n    id: NUM,\n    ts: LONG,\n    name: STR,\n    cpu: NUM,\n    thread: STR_NULL,\n    process: STR_NULL,\n    args: STR,\n  });\n  for (let row = 0; it.valid(); it.next(), row++) {\n    events.push({\n      id: it.id,\n      ts: Time.fromRaw(it.ts),\n      name: it.name,\n      cpu: it.cpu,\n      thread: it.thread,\n      process: it.process,\n      args: it.args,\n    });\n  }\n  return {events, offset, numEvents};\n}\n"]}
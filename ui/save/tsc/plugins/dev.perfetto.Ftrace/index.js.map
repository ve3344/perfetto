{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Ftrace/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {FtraceExplorer, FtraceExplorerCache} from './ftrace_explorer';\nimport {Engine} from '../../trace_processor/engine';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {NUM} from '../../trace_processor/query_result';\nimport {FtraceFilter, FtracePluginState} from './common';\nimport {FtraceRawTrack} from './ftrace_track';\nimport {TrackNode} from '../../public/workspace';\n\nconst VERSION = 1;\n\nconst DEFAULT_STATE: FtracePluginState = {\n  version: VERSION,\n  filter: {\n    excludeList: [],\n  },\n};\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.Ftrace';\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const store = ctx.mountStore<FtracePluginState>((init: unknown) => {\n      if (\n        typeof init === 'object' &&\n        init !== null &&\n        'version' in init &&\n        init.version === VERSION\n      ) {\n        return init as {} as FtracePluginState;\n      } else {\n        return DEFAULT_STATE;\n      }\n    });\n    ctx.trash.use(store);\n\n    const filterStore = store.createSubStore(\n      ['filter'],\n      (x) => x as FtraceFilter,\n    );\n    ctx.trash.use(filterStore);\n\n    const cpus = await this.lookupCpuCores(ctx.engine);\n    const group = new TrackNode({\n      title: 'Ftrace Events',\n      sortOrder: -5,\n      isSummary: true,\n    });\n\n    for (const cpuNum of cpus) {\n      const uri = `/ftrace/cpu${cpuNum}`;\n      const title = `Ftrace Track for CPU ${cpuNum}`;\n\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        tags: {\n          cpu: cpuNum,\n          groupName: 'Ftrace Events',\n        },\n        track: new FtraceRawTrack(ctx.engine, cpuNum, filterStore),\n      });\n\n      const track = new TrackNode({uri, title});\n      group.addChildInOrder(track);\n    }\n\n    if (group.children.length) {\n      ctx.workspace.addChildInOrder(group);\n    }\n\n    const cache: FtraceExplorerCache = {\n      state: 'blank',\n      counters: [],\n    };\n\n    const ftraceTabUri = 'perfetto.FtraceRaw#FtraceEventsTab';\n\n    ctx.tabs.registerTab({\n      uri: ftraceTabUri,\n      isEphemeral: false,\n      content: {\n        render: () =>\n          m(FtraceExplorer, {\n            filterStore,\n            cache,\n            trace: ctx,\n          }),\n        getTitle: () => 'Ftrace Events',\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'perfetto.FtraceRaw#ShowFtraceTab',\n      name: 'Show ftrace tab',\n      callback: () => {\n        ctx.tabs.showTab(ftraceTabUri);\n      },\n    });\n  }\n\n  private async lookupCpuCores(engine: Engine): Promise<number[]> {\n    const query = 'select distinct cpu from ftrace_event order by cpu';\n\n    const result = await engine.query(query);\n    const it = result.iter({cpu: NUM});\n\n    const cpuCores: number[] = [];\n\n    for (; it.valid(); it.next()) {\n      cpuCores.push(it.cpu);\n    }\n\n    return cpuCores;\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AndroidDmabuf/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,qFAGqD;AAGrD,sDAAiD;AACjD,qEAA4D;AAC5D,mHAA4E;AAE5E,KAAK,UAAU,mBAAmB,CAChC,GAAU,EACV,GAAW,EACX,UAAyB;IAEzB,MAAM,KAAK,GAAG,MAAM,IAAA,6CAAuB,EAAC;QAC1C,KAAK,EAAE,GAAG;QACV,GAAG;QACH,IAAI,EAAE,UAAU;KACjB,CAAC,CAAC;IACH,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;QACvB,GAAG;QACH,KAAK,EAAE,eAAe;QACtB,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;AACL,CAAC;AAED;IACE,MAAM,CAAU,EAAE,GAAG,4BAA4B,CAAC;IAClD,MAAM,CAAU,YAAY,GAAG,CAAC,0CAAyB,CAAC,CAAC;IAE3D,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;QACrB,MAAM,CAAC,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QAC/D,MAAM,CAAC,CAAC,KAAK,CAAC;;;;;kCAKgB,CAAC,CAAC;QAEhC,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,KAAK,CACxB,oGAAoG,CACrG,CAAC;QACF,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,uBAAQ,EAAE,IAAI,EAAE,uBAAQ,EAAC,CAAC,CAAC;QACvD,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;gBACpB,MAAM,GAAG,GAAG,gCAAgC,EAAE,CAAC,IAAI,EAAE,CAAC;gBACtD,MAAM,MAAM,GAAkB;oBAC5B,SAAS,EAAE;gCACW,EAAE,CAAC,IAAI,EAAE;iBAChC,CAAC;gBACF,MAAM,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBAC5C,GAAG,CAAC,OAAO;qBACR,SAAS,CAAC,0CAAyB,CAAC;qBACpC,kBAAkB,CAAC,EAAE,CAAC,IAAI,CAAC;oBAC5B,EAAE,eAAe,CAAC,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,eAAe,EAAC,CAAC,CAAC,CAAC;YACpE,CAAC;iBAAM,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,CAAC;gBAC3B,MAAM,GAAG,GAAG,gCAAgC,EAAE,CAAC,IAAI,EAAE,CAAC;gBACtD,MAAM,MAAM,GAAkB;oBAC5B,SAAS,EAAE;gCACW,EAAE,CAAC,IAAI,EAAE;iBAChC,CAAC;gBACF,MAAM,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;gBAC5C,GAAG,CAAC,OAAO;qBACR,SAAS,CAAC,0CAAyB,CAAC;qBACpC,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC;oBAC3B,EAAE,eAAe,CAAC,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,eAAe,EAAC,CAAC,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;IACH,CAAC;;AA3CH,4BA4CC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  createQueryCounterTrack,\n  SqlDataSource,\n} from '../../components/tracks/query_counter_track';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {Trace} from '../../public/trace';\nimport {TrackNode} from '../../public/workspace';\nimport {NUM_NULL} from '../../trace_processor/query_result';\nimport ProcessThreadGroupsPlugin from '../dev.perfetto.ProcessThreadGroups';\n\nasync function registerAllocsTrack(\n  ctx: Trace,\n  uri: string,\n  dataSource: SqlDataSource,\n) {\n  const track = await createQueryCounterTrack({\n    trace: ctx,\n    uri,\n    data: dataSource,\n  });\n  ctx.tracks.registerTrack({\n    uri,\n    title: `dmabuf allocs`,\n    track: track,\n  });\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.AndroidDmabuf';\n  static readonly dependencies = [ProcessThreadGroupsPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const e = ctx.engine;\n    await e.query(`INCLUDE PERFETTO MODULE android.memory.dmabuf`);\n    await e.query(`\n      CREATE PERFETTO TABLE _android_memory_cumulative_dmabuf AS\n      SELECT\n        upid, utid, ts,\n        SUM(buf_size) OVER(PARTITION BY COALESCE(upid, utid) ORDER BY ts) AS value\n      FROM android_dmabuf_allocs;`);\n\n    const pids = await e.query(\n      `SELECT DISTINCT upid, IIF(upid IS NULL, utid, NULL) AS utid FROM _android_memory_cumulative_dmabuf`,\n    );\n    const it = pids.iter({upid: NUM_NULL, utid: NUM_NULL});\n    for (; it.valid(); it.next()) {\n      if (it.upid != null) {\n        const uri = `/android_process_dmabuf_upid_${it.upid}`;\n        const config: SqlDataSource = {\n          sqlSource: `SELECT ts, value FROM _android_memory_cumulative_dmabuf\n                 WHERE upid = ${it.upid}`,\n        };\n        await registerAllocsTrack(ctx, uri, config);\n        ctx.plugins\n          .getPlugin(ProcessThreadGroupsPlugin)\n          .getGroupForProcess(it.upid)\n          ?.addChildInOrder(new TrackNode({uri, title: 'dmabuf allocs'}));\n      } else if (it.utid != null) {\n        const uri = `/android_process_dmabuf_utid_${it.utid}`;\n        const config: SqlDataSource = {\n          sqlSource: `SELECT ts, value FROM _android_memory_cumulative_dmabuf\n                 WHERE utid = ${it.utid}`,\n        };\n        await registerAllocsTrack(ctx, uri, config);\n        ctx.plugins\n          .getPlugin(ProcessThreadGroupsPlugin)\n          .getGroupForThread(it.utid)\n          ?.addChildInOrder(new TrackNode({uri, title: 'dmabuf allocs'}));\n      }\n    }\n  }\n}\n"]}
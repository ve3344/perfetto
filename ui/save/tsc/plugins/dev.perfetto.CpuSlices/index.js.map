{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CpuSlices/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {CPU_SLICE_TRACK_KIND} from '../../public/track_kinds';\nimport {Engine} from '../../trace_processor/engine';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {NUM, STR_NULL} from '../../trace_processor/query_result';\nimport {CpuSliceTrack} from './cpu_slice_track';\nimport {TrackNode} from '../../public/workspace';\nimport {CpuSliceSelectionAggregator} from './cpu_slice_selection_aggregator';\nimport {CpuSliceByProcessSelectionAggregator} from './cpu_slice_by_process_selection_aggregator';\nimport ThreadPlugin from '../dev.perfetto.Thread';\n\nfunction uriForSchedTrack(cpu: number): string {\n  return `/sched_cpu${cpu}`;\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.CpuSlices';\n  static readonly dependencies = [ThreadPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    ctx.selection.registerAreaSelectionAggregator(\n      new CpuSliceSelectionAggregator(),\n    );\n    ctx.selection.registerAreaSelectionAggregator(\n      new CpuSliceByProcessSelectionAggregator(),\n    );\n\n    const cpus = ctx.traceInfo.cpus;\n    const cpuToClusterType = await this.getAndroidCpuClusterTypes(ctx.engine);\n\n    for (const cpu of cpus) {\n      const size = cpuToClusterType.get(cpu);\n      const uri = uriForSchedTrack(cpu);\n\n      const threads = ctx.plugins.getPlugin(ThreadPlugin).getThreadMap();\n\n      const name = size === undefined ? `Cpu ${cpu}` : `Cpu ${cpu} (${size})`;\n      ctx.tracks.registerTrack({\n        uri,\n        title: name,\n        tags: {\n          kind: CPU_SLICE_TRACK_KIND,\n          cpu,\n        },\n        track: new CpuSliceTrack(ctx, uri, cpu, threads),\n      });\n      const trackNode = new TrackNode({uri, title: name, sortOrder: -50});\n      ctx.workspace.addChildInOrder(trackNode);\n    }\n\n    ctx.selection.registerSqlSelectionResolver({\n      sqlTableName: 'sched_slice',\n      callback: async (id: number) => {\n        const result = await ctx.engine.query(`\n          select\n            cpu\n          from sched_slice\n          where id = ${id}\n        `);\n\n        const cpu = result.firstRow({\n          cpu: NUM,\n        }).cpu;\n\n        return {\n          eventId: id,\n          trackUri: uriForSchedTrack(cpu),\n        };\n      },\n    });\n  }\n\n  async getAndroidCpuClusterTypes(\n    engine: Engine,\n  ): Promise<Map<number, string>> {\n    const cpuToClusterType = new Map<number, string>();\n    await engine.query(`\n      include perfetto module android.cpu.cluster_type;\n    `);\n    const result = await engine.query(`\n      select cpu, cluster_type as clusterType\n      from android_cpu_cluster_mapping\n    `);\n\n    const it = result.iter({\n      cpu: NUM,\n      clusterType: STR_NULL,\n    });\n\n    for (; it.valid(); it.next()) {\n      const clusterType = it.clusterType;\n      if (clusterType !== null) {\n        cpuToClusterType.set(it.cpu, clusterType);\n      }\n    }\n\n    return cpuToClusterType;\n  }\n}\n"]}
{"version":3,"file":"cpu_slice_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CpuSlices/cpu_slice_track.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath as BIMath} from '../../base/bigint_math';\nimport {search, searchEq, searchSegment} from '../../base/binary_search';\nimport {assertExists, assertTrue} from '../../base/logging';\nimport {Duration, duration, Time, time} from '../../base/time';\nimport {\n  drawDoubleHeadedArrow,\n  drawIncompleteSlice,\n  drawTrackHoverTooltip,\n} from '../../base/canvas_utils';\nimport {cropText} from '../../base/string_utils';\nimport {Color} from '../../public/color';\nimport {colorForThread} from '../../components/colorizer';\nimport {TrackData} from '../../components/tracks/track_data';\nimport {TimelineFetcher} from '../../components/tracks/track_helper';\nimport {checkerboardExcept} from '../../components/checkerboard';\nimport {Point2D} from '../../base/geom';\nimport {Track} from '../../public/track';\nimport {LONG, NUM} from '../../trace_processor/query_result';\nimport {uuidv4Sql} from '../../base/uuid';\nimport {TrackMouseEvent, TrackRenderContext} from '../../public/track';\nimport {TrackEventDetails} from '../../public/selection';\nimport {asSchedSqlId} from '../../components/sql_utils/core_types';\nimport {getSched, getSchedWakeupInfo} from '../../components/sql_utils/sched';\nimport {SchedSliceDetailsPanel} from './sched_details_tab';\nimport {Trace} from '../../public/trace';\nimport {exists} from '../../base/utils';\nimport {ThreadMap} from '../dev.perfetto.Thread/threads';\nimport {Dataset, SourceDataset} from '../../trace_processor/dataset';\n\nexport interface Data extends TrackData {\n  // Slices are stored in a columnar fashion. All fields have the same length.\n  ids: Float64Array;\n  startQs: BigInt64Array;\n  endQs: BigInt64Array;\n  utids: Uint32Array;\n  flags: Uint8Array;\n  lastRowId: number;\n}\n\nconst MARGIN_TOP = 3;\nconst RECT_HEIGHT = 24;\nconst TRACK_HEIGHT = MARGIN_TOP * 2 + RECT_HEIGHT;\n\nconst CPU_SLICE_FLAGS_INCOMPLETE = 1;\nconst CPU_SLICE_FLAGS_REALTIME = 2;\n\nexport class CpuSliceTrack implements Track {\n  private mousePos?: Point2D;\n  private utidHoveredInThisTrack?: number;\n  private fetcher = new TimelineFetcher<Data>(this.onBoundsChange.bind(this));\n\n  private lastRowId = -1;\n  private trackUuid = uuidv4Sql();\n\n  constructor(\n    private readonly trace: Trace,\n    private readonly uri: string,\n    private readonly cpu: number,\n    private readonly threads: ThreadMap,\n  ) {}\n\n  async onCreate() {\n    await this.trace.engine.query(`\n      create virtual table cpu_slice_${this.trackUuid}\n      using __intrinsic_slice_mipmap((\n        select\n          id,\n          ts,\n          iif(dur = -1, lead(ts, 1, trace_end()) over (order by ts) - ts, dur),\n          0 as depth\n        from sched\n        where cpu = ${this.cpu} and utid != 0\n      ));\n    `);\n    const it = await this.trace.engine.query(`\n      select coalesce(max(id), -1) as lastRowId\n      from sched\n      where cpu = ${this.cpu} and utid != 0\n    `);\n    this.lastRowId = it.firstRow({lastRowId: NUM}).lastRowId;\n  }\n\n  getDataset(): Dataset | undefined {\n    return new SourceDataset({\n      src: 'select id, ts, dur, cpu from sched where utid != 0',\n      schema: {\n        id: NUM,\n        ts: LONG,\n        dur: LONG,\n      },\n      filter: {\n        col: 'cpu',\n        eq: this.cpu,\n      },\n    });\n  }\n\n  async onUpdate({\n    visibleWindow,\n    resolution,\n  }: TrackRenderContext): Promise<void> {\n    await this.fetcher.requestData(visibleWindow.toTimeSpan(), resolution);\n  }\n\n  async onBoundsChange(\n    start: time,\n    end: time,\n    resolution: duration,\n  ): Promise<Data> {\n    assertTrue(BIMath.popcount(resolution) === 1, `${resolution} not pow of 2`);\n\n    const queryRes = await this.trace.engine.query(`\n      select\n        (z.ts / ${resolution}) * ${resolution} as tsQ,\n        (((z.ts + z.dur) / ${resolution}) + 1) * ${resolution} as tsEndQ,\n        s.utid,\n        s.id,\n        s.dur = -1 as isIncomplete,\n        ifnull(s.priority < 100, 0) as isRealtime\n      from cpu_slice_${this.trackUuid}(${start}, ${end}, ${resolution}) z\n      cross join sched s using (id)\n    `);\n\n    const numRows = queryRes.numRows();\n    const slices: Data = {\n      start,\n      end,\n      resolution,\n      length: numRows,\n      lastRowId: this.lastRowId,\n      ids: new Float64Array(numRows),\n      startQs: new BigInt64Array(numRows),\n      endQs: new BigInt64Array(numRows),\n      utids: new Uint32Array(numRows),\n      flags: new Uint8Array(numRows),\n    };\n\n    const it = queryRes.iter({\n      tsQ: LONG,\n      tsEndQ: LONG,\n      utid: NUM,\n      id: NUM,\n      isIncomplete: NUM,\n      isRealtime: NUM,\n    });\n    for (let row = 0; it.valid(); it.next(), row++) {\n      slices.startQs[row] = it.tsQ;\n      slices.endQs[row] = it.tsEndQ;\n      slices.utids[row] = it.utid;\n      slices.ids[row] = it.id;\n\n      slices.flags[row] = 0;\n      if (it.isIncomplete) {\n        slices.flags[row] |= CPU_SLICE_FLAGS_INCOMPLETE;\n      }\n      if (it.isRealtime) {\n        slices.flags[row] |= CPU_SLICE_FLAGS_REALTIME;\n      }\n    }\n    return slices;\n  }\n\n  async onDestroy() {\n    await this.trace.engine.tryQuery(\n      `drop table if exists cpu_slice_${this.trackUuid}`,\n    );\n    this.fetcher[Symbol.dispose]();\n  }\n\n  getHeight(): number {\n    return TRACK_HEIGHT;\n  }\n\n  render(trackCtx: TrackRenderContext): void {\n    const {ctx, size, timescale} = trackCtx;\n\n    // TODO: fonts and colors should come from the CSS and not hardcoded here.\n    const data = this.fetcher.data;\n\n    if (data === undefined) return; // Can't possibly draw anything.\n\n    // If the cached trace slices don't fully cover the visible time range,\n    // show a gray rectangle with a \"Loading...\" label.\n    checkerboardExcept(\n      ctx,\n      this.getHeight(),\n      0,\n      size.width,\n      timescale.timeToPx(data.start),\n      timescale.timeToPx(data.end),\n    );\n\n    this.renderSlices(trackCtx, data);\n  }\n\n  renderSlices(\n    {ctx, timescale, size, visibleWindow}: TrackRenderContext,\n    data: Data,\n  ): void {\n    assertTrue(data.startQs.length === data.endQs.length);\n    assertTrue(data.startQs.length === data.utids.length);\n\n    const visWindowEndPx = size.width;\n\n    ctx.textAlign = 'center';\n    ctx.font = '12px Roboto Condensed';\n    const charWidth = ctx.measureText('dbpqaouk').width / 8;\n\n    const timespan = visibleWindow.toTimeSpan();\n\n    const startTime = timespan.start;\n    const endTime = timespan.end;\n\n    const rawStartIdx = data.endQs.findIndex((end) => end >= startTime);\n    const startIdx = rawStartIdx === -1 ? 0 : rawStartIdx;\n\n    const [, rawEndIdx] = searchSegment(data.startQs, endTime);\n    const endIdx = rawEndIdx === -1 ? data.startQs.length : rawEndIdx;\n\n    for (let i = startIdx; i < endIdx; i++) {\n      const tStart = Time.fromRaw(data.startQs[i]);\n      let tEnd = Time.fromRaw(data.endQs[i]);\n      const utid = data.utids[i];\n\n      // If the last slice is incomplete, it should end with the end of the\n      // window, else it might spill over the window and the end would not be\n      // visible as a zigzag line.\n      if (\n        data.ids[i] === data.lastRowId &&\n        data.flags[i] & CPU_SLICE_FLAGS_INCOMPLETE\n      ) {\n        tEnd = endTime;\n      }\n      const rectStart = timescale.timeToPx(tStart);\n      const rectEnd = timescale.timeToPx(tEnd);\n      const rectWidth = Math.max(1, rectEnd - rectStart);\n\n      const threadInfo = this.threads.get(utid);\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      const pid = threadInfo && threadInfo.pid ? threadInfo.pid : -1;\n\n      const isHovering = this.trace.timeline.hoveredUtid !== undefined;\n      const isThreadHovered = this.trace.timeline.hoveredUtid === utid;\n      const isProcessHovered = this.trace.timeline.hoveredPid === pid;\n      const colorScheme = colorForThread(threadInfo);\n      let color: Color;\n      let textColor: Color;\n      if (isHovering && !isThreadHovered) {\n        if (!isProcessHovered) {\n          color = colorScheme.disabled;\n          textColor = colorScheme.textDisabled;\n        } else {\n          color = colorScheme.variant;\n          textColor = colorScheme.textVariant;\n        }\n      } else {\n        color = colorScheme.base;\n        textColor = colorScheme.textBase;\n      }\n      ctx.fillStyle = color.cssString;\n\n      if (data.flags[i] & CPU_SLICE_FLAGS_INCOMPLETE) {\n        drawIncompleteSlice(ctx, rectStart, MARGIN_TOP, rectWidth, RECT_HEIGHT);\n      } else {\n        ctx.fillRect(rectStart, MARGIN_TOP, rectWidth, RECT_HEIGHT);\n      }\n\n      // Don't render text when we have less than 5px to play with.\n      if (rectWidth < 5) continue;\n\n      // Stylize real-time threads. We don't do it when zoomed out as the\n      // fillRect is expensive.\n      if (data.flags[i] & CPU_SLICE_FLAGS_REALTIME) {\n        ctx.fillStyle = getHatchedPattern(ctx);\n        ctx.fillRect(rectStart, MARGIN_TOP, rectWidth, RECT_HEIGHT);\n      }\n\n      // TODO: consider de-duplicating this code with the copied one from\n      // chrome_slices/frontend.ts.\n      let title = `[utid:${utid}]`;\n      let subTitle = '';\n      if (threadInfo) {\n        if (threadInfo.pid !== undefined && threadInfo.pid !== 0) {\n          let procName = threadInfo.procName ?? '';\n          if (procName.startsWith('/')) {\n            // Remove folder paths from name\n            procName = procName.substring(procName.lastIndexOf('/') + 1);\n          }\n          title = `${procName} [${threadInfo.pid}]`;\n          subTitle = `${threadInfo.threadName} [${threadInfo.tid}]`;\n        } else {\n          title = `${threadInfo.threadName} [${threadInfo.tid}]`;\n        }\n      }\n\n      if (data.flags[i] & CPU_SLICE_FLAGS_REALTIME) {\n        subTitle = subTitle + ' (RT)';\n      }\n\n      const right = Math.min(visWindowEndPx, rectEnd);\n      const left = Math.max(rectStart, 0);\n      const visibleWidth = Math.max(right - left, 1);\n      title = cropText(title, charWidth, visibleWidth);\n      subTitle = cropText(subTitle, charWidth, visibleWidth);\n      const rectXCenter = left + visibleWidth / 2;\n      ctx.fillStyle = textColor.cssString;\n      ctx.font = '12px Roboto Condensed';\n      ctx.fillText(title, rectXCenter, MARGIN_TOP + RECT_HEIGHT / 2 - 1);\n      ctx.fillStyle = textColor.setAlpha(0.6).cssString;\n      ctx.font = '10px Roboto Condensed';\n      ctx.fillText(subTitle, rectXCenter, MARGIN_TOP + RECT_HEIGHT / 2 + 9);\n    }\n\n    const selection = this.trace.selection.selection;\n    if (selection.kind === 'track_event') {\n      if (selection.trackUri === this.uri) {\n        const [startIndex, endIndex] = searchEq(data.ids, selection.eventId);\n        if (startIndex !== endIndex) {\n          const tStart = Time.fromRaw(data.startQs[startIndex]);\n          const tEnd = Time.fromRaw(data.endQs[startIndex]);\n          const utid = data.utids[startIndex];\n          const color = colorForThread(this.threads.get(utid));\n          const rectStart = timescale.timeToPx(tStart);\n          const rectEnd = timescale.timeToPx(tEnd);\n          const rectWidth = Math.max(1, rectEnd - rectStart);\n\n          // Draw a rectangle around the slice that is currently selected.\n          ctx.strokeStyle = color.base.setHSL({l: 30}).cssString;\n          ctx.beginPath();\n          ctx.lineWidth = 3;\n          ctx.strokeRect(\n            rectStart,\n            MARGIN_TOP - 1.5,\n            rectWidth,\n            RECT_HEIGHT + 3,\n          );\n          ctx.closePath();\n          // Draw arrow from wakeup time of current slice.\n          if (selection.wakeupTs) {\n            const wakeupPos = timescale.timeToPx(selection.wakeupTs);\n            const latencyWidth = rectStart - wakeupPos;\n            drawDoubleHeadedArrow(\n              ctx,\n              wakeupPos,\n              MARGIN_TOP + RECT_HEIGHT,\n              latencyWidth,\n              latencyWidth >= 20,\n            );\n            // Latency time with a white semi-transparent background.\n            const latency = tStart - selection.wakeupTs;\n            const displayText = Duration.humanise(latency);\n            const measured = ctx.measureText(displayText);\n            if (latencyWidth >= measured.width + 2) {\n              ctx.fillStyle = 'rgba(255,255,255,0.7)';\n              ctx.fillRect(\n                wakeupPos + latencyWidth / 2 - measured.width / 2 - 1,\n                MARGIN_TOP + RECT_HEIGHT - 12,\n                measured.width + 2,\n                11,\n              );\n              ctx.textBaseline = 'bottom';\n              ctx.fillStyle = 'black';\n              ctx.fillText(\n                displayText,\n                wakeupPos + latencyWidth / 2,\n                MARGIN_TOP + RECT_HEIGHT - 1,\n              );\n            }\n          }\n        }\n      }\n\n      // Draw diamond if the track being drawn is the cpu of the waker.\n      if (this.cpu === selection.wakerCpu && selection.wakeupTs) {\n        const wakeupPos = Math.floor(timescale.timeToPx(selection.wakeupTs));\n        ctx.beginPath();\n        ctx.moveTo(wakeupPos, MARGIN_TOP + RECT_HEIGHT / 2 + 8);\n        ctx.fillStyle = 'black';\n        ctx.lineTo(wakeupPos + 6, MARGIN_TOP + RECT_HEIGHT / 2);\n        ctx.lineTo(wakeupPos, MARGIN_TOP + RECT_HEIGHT / 2 - 8);\n        ctx.lineTo(wakeupPos - 6, MARGIN_TOP + RECT_HEIGHT / 2);\n        ctx.fill();\n        ctx.closePath();\n      }\n\n      if (this.utidHoveredInThisTrack !== undefined) {\n        const hoveredThread = this.threads.get(this.utidHoveredInThisTrack);\n        if (hoveredThread && this.mousePos !== undefined) {\n          const tidText = `T: ${hoveredThread.threadName}\n          [${hoveredThread.tid}]`;\n          // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n          if (hoveredThread.pid) {\n            const pidText = `P: ${hoveredThread.procName}\n            [${hoveredThread.pid}]`;\n            drawTrackHoverTooltip(ctx, this.mousePos, size, pidText, tidText);\n          } else {\n            drawTrackHoverTooltip(ctx, this.mousePos, size, tidText);\n          }\n        }\n      }\n    }\n  }\n\n  onMouseMove({x, y, timescale}: TrackMouseEvent) {\n    const data = this.fetcher.data;\n    this.mousePos = {x, y};\n    if (data === undefined) return;\n    if (y < MARGIN_TOP || y > MARGIN_TOP + RECT_HEIGHT) {\n      this.utidHoveredInThisTrack = undefined;\n      this.trace.timeline.hoveredUtid = undefined;\n      this.trace.timeline.hoveredPid = undefined;\n      return;\n    }\n    const t = timescale.pxToHpTime(x);\n    let hoveredUtid = undefined;\n\n    for (let i = 0; i < data.startQs.length; i++) {\n      const tStart = Time.fromRaw(data.startQs[i]);\n      const tEnd = Time.fromRaw(data.endQs[i]);\n      const utid = data.utids[i];\n      if (t.gte(tStart) && t.lt(tEnd)) {\n        hoveredUtid = utid;\n        break;\n      }\n    }\n    this.utidHoveredInThisTrack = hoveredUtid;\n    const threadInfo = exists(hoveredUtid) && this.threads.get(hoveredUtid);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    const hoveredPid = threadInfo ? (threadInfo.pid ? threadInfo.pid : -1) : -1;\n    this.trace.timeline.hoveredUtid = hoveredUtid;\n    this.trace.timeline.hoveredPid = hoveredPid;\n  }\n\n  onMouseOut() {\n    this.utidHoveredInThisTrack = -1;\n    this.trace.timeline.hoveredUtid = undefined;\n    this.trace.timeline.hoveredPid = undefined;\n    this.mousePos = undefined;\n  }\n\n  onMouseClick({x, timescale}: TrackMouseEvent) {\n    const data = this.fetcher.data;\n    if (data === undefined) return false;\n    const time = timescale.pxToHpTime(x);\n    const index = search(data.startQs, time.toTime());\n    const id = index === -1 ? undefined : data.ids[index];\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!id || this.utidHoveredInThisTrack === -1) return false;\n\n    this.trace.selection.selectTrackEvent(this.uri, id);\n    return true;\n  }\n\n  async getSelectionDetails?(\n    eventId: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const sched = await getSched(this.trace.engine, asSchedSqlId(eventId));\n    if (sched === undefined) {\n      return undefined;\n    }\n    const wakeup = await getSchedWakeupInfo(this.trace.engine, sched);\n    return {\n      ts: sched.ts,\n      dur: sched.dur,\n      wakeupTs: wakeup?.wakeupTs,\n      wakerCpu: wakeup?.wakerCpu,\n    };\n  }\n\n  detailsPanel() {\n    return new SchedSliceDetailsPanel(this.trace, this.threads);\n  }\n}\n\n// Creates a diagonal hatched pattern to be used for distinguishing slices with\n// real-time priorities. The pattern is created once as an offscreen canvas and\n// is kept cached inside the Context2D of the main canvas, without making\n// assumptions on the lifetime of the main canvas.\nfunction getHatchedPattern(mainCtx: CanvasRenderingContext2D): CanvasPattern {\n  const mctx = mainCtx as CanvasRenderingContext2D & {\n    sliceHatchedPattern?: CanvasPattern;\n  };\n  if (mctx.sliceHatchedPattern !== undefined) return mctx.sliceHatchedPattern;\n  const canvas = document.createElement('canvas');\n  const SIZE = 8;\n  canvas.width = canvas.height = SIZE;\n  const ctx = assertExists(canvas.getContext('2d'));\n  ctx.strokeStyle = 'rgba(255,255,255,0.3)';\n  ctx.beginPath();\n  ctx.lineWidth = 1;\n  ctx.moveTo(0, SIZE);\n  ctx.lineTo(SIZE, 0);\n  ctx.stroke();\n  mctx.sliceHatchedPattern = assertExists(mctx.createPattern(canvas, 'repeat'));\n  return mctx.sliceHatchedPattern;\n}\n"]}
{"version":3,"file":"cpu_slice_selection_aggregator.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CpuSlices/cpu_slice_selection_aggregator.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,4CAAwC;AAGxC,0DAA8D;AAI9D,MAAa,2BAA2B;IAC7B,EAAE,GAAG,iBAAiB,CAAC;IAEhC,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,IAAmB;QAC3D,MAAM,YAAY,GAAa,EAAE,CAAC;QAClC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACpC,IAAI,SAAS,EAAE,IAAI,EAAE,IAAI,KAAK,kCAAoB,EAAE,CAAC;gBACnD,IAAA,cAAM,EAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtE,CAAC;QACH,CAAC;QACD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;QAE5C,MAAM,MAAM,CAAC,KAAK,CAAC;yCACkB,IAAI,CAAC,EAAE;;;;;;;;;;;;sBAY1B,YAAY;qCACG,IAAI,CAAC,KAAK;yBACtB,IAAI,CAAC,GAAG;;;KAG5B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,UAAU;QACR,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,QAAQ,KAAI,CAAC;IAEnB,iBAAiB;QACf,OAAO,EAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAC,CAAC;IAClD,CAAC;IAED,oBAAoB;QAClB,OAAO;YACL;gBACE,KAAK,EAAE,SAAS;gBAChB,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,cAAc;aACzB;YACD;gBACE,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,KAAK,EAAE,QAAQ;gBACf,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,aAAa;aACxB;YACD;gBACE,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,KAAK,EAAE,oBAAoB;gBAC3B,IAAI,EAAE,cAAc;gBACpB,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,WAAW;gBACrB,GAAG,EAAE,IAAI;aACV;YACD;gBACE,KAAK,EAAE,wBAAwB;gBAC/B,IAAI,EAAE,cAAc;gBACpB,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,SAAS;aACpB;YACD;gBACE,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,aAAa;gBACvB,GAAG,EAAE,IAAI;aACV;SACF,CAAC;IACJ,CAAC;CACF;AA5FD,kEA4FC","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {exists} from '../../base/utils';\nimport {ColumnDef, Sorting} from '../../public/aggregation';\nimport {AreaSelection} from '../../public/selection';\nimport {CPU_SLICE_TRACK_KIND} from '../../public/track_kinds';\nimport {Engine} from '../../trace_processor/engine';\nimport {AreaSelectionAggregator} from '../../public/selection';\n\nexport class CpuSliceSelectionAggregator implements AreaSelectionAggregator {\n  readonly id = 'cpu_aggregation';\n\n  async createAggregateView(engine: Engine, area: AreaSelection) {\n    const selectedCpus: number[] = [];\n    for (const trackInfo of area.tracks) {\n      if (trackInfo?.tags?.kind === CPU_SLICE_TRACK_KIND) {\n        exists(trackInfo.tags.cpu) && selectedCpus.push(trackInfo.tags.cpu);\n      }\n    }\n    if (selectedCpus.length === 0) return false;\n\n    await engine.query(`\n      create or replace perfetto table ${this.id} as\n      select\n        process.name as process_name,\n        pid,\n        thread.name as thread_name,\n        tid,\n        sum(dur) AS total_dur,\n        sum(dur) / count() as avg_dur,\n        count() as occurrences\n      from process\n      join thread using (upid)\n      join sched using (utid)\n      where cpu in (${selectedCpus})\n        and sched.ts + sched.dur > ${area.start}\n        and sched.ts < ${area.end}\n        and utid != 0\n      group by utid\n    `);\n    return true;\n  }\n\n  getTabName() {\n    return 'CPU by thread';\n  }\n\n  async getExtra() {}\n\n  getDefaultSorting(): Sorting {\n    return {column: 'total_dur', direction: 'DESC'};\n  }\n\n  getColumnDefinitions(): ColumnDef[] {\n    return [\n      {\n        title: 'Process',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'process_name',\n      },\n      {\n        title: 'PID',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'pid',\n      },\n      {\n        title: 'Thread',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'thread_name',\n      },\n      {\n        title: 'TID',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'tid',\n      },\n      {\n        title: 'Wall duration (ms)',\n        kind: 'TIMESTAMP_NS',\n        columnConstructor: Float64Array,\n        columnId: 'total_dur',\n        sum: true,\n      },\n      {\n        title: 'Avg Wall duration (ms)',\n        kind: 'TIMESTAMP_NS',\n        columnConstructor: Float64Array,\n        columnId: 'avg_dur',\n      },\n      {\n        title: 'Occurrences',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'occurrences',\n        sum: true,\n      },\n    ];\n  }\n}\n"]}
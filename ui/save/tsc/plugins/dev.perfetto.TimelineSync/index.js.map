{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.TimelineSync/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {Time, TimeSpan} from '../../base/time';\nimport {redrawModal, showModal} from '../../widgets/modal';\nimport {assertExists} from '../../base/logging';\n\nconst PLUGIN_ID = 'dev.perfetto.TimelineSync';\nconst DEFAULT_BROADCAST_CHANNEL = `${PLUGIN_ID}#broadcastChannel`;\nconst VIEWPORT_UPDATE_THROTTLE_TIME_FOR_SENDING_AFTER_RECEIVING_MS = 1_000;\nconst BIGINT_PRECISION_MULTIPLIER = 1_000_000_000n;\nconst ADVERTISE_PERIOD_MS = 10_000;\nconst DEFAULT_SESSION_ID = 1;\ntype ClientId = number;\ntype SessionId = number;\n\n/**\n * Synchronizes the timeline of 2 or more perfetto traces.\n *\n * To trigger the sync, the command needs to be executed on one tab. It will\n * prompt a list of other tabs to keep in sync. Each tab advertise itself\n * on a BroadcastChannel upon trace load.\n *\n * This is able to sync between traces recorded at different times, even if\n * their durations don't match. The initial viewport bound for each trace is\n * selected when the enable command is called.\n */\nexport default class implements PerfettoPlugin {\n  static readonly id = PLUGIN_ID;\n  private _chan?: BroadcastChannel;\n  private _ctx?: Trace;\n  private _traceLoadTime = 0;\n  // Attached to broadcast messages to allow other windows to remap viewports.\n  private readonly _clientId: ClientId = Math.floor(Math.random() * 1_000_000);\n  // Used to throttle sending updates after one has been received.\n  private _lastReceivedUpdateMillis: number = 0;\n  private _lastViewportBounds?: ViewportBounds;\n  private _advertisedClients = new Map<ClientId, ClientInfo>();\n  private _sessionId: SessionId = 0;\n  // Used when the url passes ?dev.perfetto.TimelineSync:enable to auto-enable\n  // timeline sync on trace load.\n  private _sessionidFromUrl: SessionId = 0;\n\n  // Contains the Viewport bounds of this window when it received the first sync\n  // message from another one. This is used to re-scale timestamps, so that we\n  // can sync 2 (or more!) traces with different length.\n  // The initial viewport will be the one visible when the command is enabled.\n  private _initialBoundsForSibling = new Map<\n    ClientId,\n    ViewportBoundsSnapshot\n  >();\n\n  async onTraceLoad(ctx: Trace) {\n    ctx.commands.registerCommand({\n      id: `dev.perfetto.SplitScreen#enableTimelineSync`,\n      name: 'Enable timeline sync with other Perfetto UI tabs',\n      callback: () => this.showTimelineSyncDialog(),\n    });\n    ctx.commands.registerCommand({\n      id: `dev.perfetto.SplitScreen#disableTimelineSync`,\n      name: 'Disable timeline sync',\n      callback: () => this.disableTimelineSync(this._sessionId),\n    });\n    ctx.commands.registerCommand({\n      id: `dev.perfetto.SplitScreen#toggleTimelineSync`,\n      name: 'Toggle timeline sync with other PerfettoUI tabs',\n      callback: () => this.toggleTimelineSync(),\n      defaultHotkey: 'Mod+Alt+S',\n    });\n\n    // Start advertising this tab. This allows the command run in other\n    // instances to discover us.\n    this._chan = new BroadcastChannel(DEFAULT_BROADCAST_CHANNEL);\n    this._chan.onmessage = this.onmessage.bind(this);\n    document.addEventListener('visibilitychange', () => this.advertise());\n    window.addEventListener('focus', () => this.advertise());\n    setInterval(() => this.advertise(), ADVERTISE_PERIOD_MS);\n\n    // Allow auto-enabling of timeline sync from the URI. The user can\n    // optionally specify a session id, otherwise we just use a default one.\n    const m = /dev.perfetto.TimelineSync:enable(=\\d+)?/.exec(location.hash);\n    if (m !== null) {\n      this._sessionidFromUrl = m[1]\n        ? parseInt(m[1].substring(1))\n        : DEFAULT_SESSION_ID;\n    }\n\n    this._ctx = ctx;\n    this._traceLoadTime = Date.now();\n    this.advertise();\n    if (this._sessionidFromUrl !== 0) {\n      this.enableTimelineSync(this._sessionidFromUrl);\n    }\n    ctx.trash.defer(() => {\n      this.disableTimelineSync(this._sessionId);\n      this._ctx = undefined;\n    });\n  }\n\n  private advertise() {\n    if (this._ctx === undefined) return; // Don't advertise if no trace loaded.\n    this._chan?.postMessage({\n      perfettoSync: {\n        cmd: 'MSG_ADVERTISE',\n        title: document.title,\n        traceLoadTime: this._traceLoadTime,\n      },\n      clientId: this._clientId,\n    } as SyncMessage);\n  }\n\n  private toggleTimelineSync() {\n    if (this._sessionId === 0) {\n      this.showTimelineSyncDialog();\n    } else {\n      this.disableTimelineSync(this._sessionId);\n    }\n  }\n\n  private showTimelineSyncDialog() {\n    let clientsSelect: HTMLSelectElement;\n\n    // This nested function is invoked when the modal dialog buton is pressed.\n    const doStartSession = () => {\n      // Disable any prior session.\n      this.disableTimelineSync(this._sessionId);\n      const selectedClients = new Array<ClientId>();\n      const sel = assertExists(clientsSelect).selectedOptions;\n      for (let i = 0; i < sel.length; i++) {\n        const clientId = parseInt(sel[i].value);\n        if (!isNaN(clientId)) selectedClients.push(clientId);\n      }\n      selectedClients.push(this._clientId); // Always add ourselves.\n      this._sessionId = Math.floor(Math.random() * 1_000_000);\n      this._chan?.postMessage({\n        perfettoSync: {\n          cmd: 'MSG_SESSION_START',\n          sessionId: this._sessionId,\n          clients: selectedClients,\n        },\n        clientId: this._clientId,\n      } as SyncMessage);\n      this._initialBoundsForSibling.clear();\n      this.scheduleViewportUpdateMessage();\n    };\n\n    // The function below is called on every mithril render pass. It's important\n    // that this function re-computes the list of other clients on every pass.\n    // The user will go to other tabs (which causes an advertise due to the\n    // visibilitychange listener) and come back on here while the modal dialog\n    // is still being displayed.\n    const renderModalContents = (): m.Children => {\n      const children: m.Children = [];\n      this.purgeInactiveClients();\n      const clients = Array.from(this._advertisedClients.entries());\n      clients.sort((a, b) => b[1].traceLoadTime - a[1].traceLoadTime);\n      for (const [clientId, info] of clients) {\n        const opened = new Date(info.traceLoadTime).toLocaleTimeString();\n        const attrs: {value: number; selected?: boolean} = {value: clientId};\n        if (this._advertisedClients.size === 1) {\n          attrs.selected = true;\n        }\n        children.push(m('option', attrs, `${info.title} (${opened})`));\n      }\n      return m(\n        'div',\n        {style: 'display: flex;  flex-direction: column;'},\n        m(\n          'div',\n          'Select the perfetto UI tab(s) you want to keep in sync ' +\n            '(Ctrl+Click to select many).',\n        ),\n        m(\n          'div',\n          \"If you don't see the trace listed here, temporarily focus the \" +\n            'corresponding browser tab and then come back here.',\n        ),\n        m(\n          'select[multiple=multiple][size=8]',\n          {\n            oncreate: (vnode: m.VnodeDOM) => {\n              clientsSelect = vnode.dom as HTMLSelectElement;\n            },\n          },\n          children,\n        ),\n      );\n    };\n\n    showModal({\n      title: 'Synchronize timeline across several tabs',\n      content: renderModalContents,\n      buttons: [\n        {\n          primary: true,\n          text: `Synchronize timelines`,\n          action: doStartSession,\n        },\n      ],\n    });\n  }\n\n  private enableTimelineSync(sessionId: SessionId) {\n    if (sessionId === this._sessionId) return; // Already in this session id.\n    this._sessionId = sessionId;\n    this._initialBoundsForSibling.clear();\n    this.scheduleViewportUpdateMessage();\n  }\n\n  private disableTimelineSync(sessionId: SessionId, skipMsg = false) {\n    if (sessionId !== this._sessionId || this._sessionId === 0) return;\n\n    if (!skipMsg) {\n      this._chan?.postMessage({\n        perfettoSync: {\n          cmd: 'MSG_SESSION_STOP',\n          sessionId: this._sessionId,\n        },\n        clientId: this._clientId,\n      } as SyncMessage);\n    }\n    this._sessionId = 0;\n    this._initialBoundsForSibling.clear();\n  }\n\n  private shouldThrottleViewportUpdates() {\n    return (\n      Date.now() - this._lastReceivedUpdateMillis <=\n      VIEWPORT_UPDATE_THROTTLE_TIME_FOR_SENDING_AFTER_RECEIVING_MS\n    );\n  }\n\n  private scheduleViewportUpdateMessage() {\n    if (!this.active) return;\n    const currentViewport = this.getCurrentViewportBounds();\n    if (\n      (!this._lastViewportBounds ||\n        !this._lastViewportBounds.equals(currentViewport)) &&\n      !this.shouldThrottleViewportUpdates()\n    ) {\n      this.sendViewportBounds(currentViewport);\n      this._lastViewportBounds = currentViewport;\n    }\n    requestAnimationFrame(this.scheduleViewportUpdateMessage.bind(this));\n  }\n\n  private sendViewportBounds(viewportBounds: ViewportBounds) {\n    this._chan?.postMessage({\n      perfettoSync: {\n        cmd: 'MSG_SET_VIEWPORT',\n        sessionId: this._sessionId,\n        viewportBounds,\n      },\n      clientId: this._clientId,\n    } as SyncMessage);\n  }\n\n  private onmessage(msg: MessageEvent) {\n    if (this._ctx === undefined) return; // Trace unloaded\n    if (!('perfettoSync' in msg.data)) return;\n    this._ctx.scheduleFullRedraw('force');\n    const msgData = msg.data as SyncMessage;\n    const sync = msgData.perfettoSync;\n    switch (sync.cmd) {\n      case 'MSG_ADVERTISE':\n        if (msgData.clientId !== this._clientId) {\n          this._advertisedClients.set(msgData.clientId, {\n            title: sync.title,\n            traceLoadTime: sync.traceLoadTime,\n            lastHeartbeat: Date.now(),\n          });\n          this.purgeInactiveClients();\n          redrawModal();\n        }\n        break;\n      case 'MSG_SESSION_START':\n        if (sync.clients.includes(this._clientId)) {\n          this.enableTimelineSync(sync.sessionId);\n        }\n        break;\n      case 'MSG_SESSION_STOP':\n        this.disableTimelineSync(sync.sessionId, /* skipMsg= */ true);\n        break;\n      case 'MSG_SET_VIEWPORT':\n        if (sync.sessionId === this._sessionId) {\n          this.onViewportSyncReceived(sync.viewportBounds, msgData.clientId);\n        }\n        break;\n    }\n  }\n\n  private onViewportSyncReceived(\n    requestViewBounds: ViewportBounds,\n    source: ClientId,\n  ) {\n    if (!this.active) return;\n    this.cacheSiblingInitialBoundIfNeeded(requestViewBounds, source);\n    const remappedViewport = this.remapViewportBounds(\n      requestViewBounds,\n      source,\n    );\n    if (!this.getCurrentViewportBounds().equals(remappedViewport)) {\n      this._lastReceivedUpdateMillis = Date.now();\n      this._lastViewportBounds = remappedViewport;\n      this._ctx?.timeline.setViewportTime(\n        remappedViewport.start,\n        remappedViewport.end,\n      );\n    }\n  }\n\n  private cacheSiblingInitialBoundIfNeeded(\n    requestViewBounds: ViewportBounds,\n    source: ClientId,\n  ) {\n    if (!this._initialBoundsForSibling.has(source)) {\n      this._initialBoundsForSibling.set(source, {\n        thisWindow: this.getCurrentViewportBounds(),\n        otherWindow: requestViewBounds,\n      });\n    }\n  }\n\n  private remapViewportBounds(\n    otherWindowBounds: ViewportBounds,\n    source: ClientId,\n  ): ViewportBounds {\n    const initialSnapshot = this._initialBoundsForSibling.get(source)!;\n    const otherInitial = initialSnapshot.otherWindow;\n    const thisInitial = initialSnapshot.thisWindow;\n\n    const [l, r] = this.percentageChange(\n      otherInitial.start,\n      otherInitial.end,\n      otherWindowBounds.start,\n      otherWindowBounds.end,\n    );\n    const thisWindowInitialLength = thisInitial.end - thisInitial.start;\n\n    return new TimeSpan(\n      Time.fromRaw(\n        thisInitial.start +\n          (thisWindowInitialLength * l) / BIGINT_PRECISION_MULTIPLIER,\n      ),\n      Time.fromRaw(\n        thisInitial.start +\n          (thisWindowInitialLength * r) / BIGINT_PRECISION_MULTIPLIER,\n      ),\n    );\n  }\n\n  /*\n   * Returns the percentage (*1e9) of the starting point inside\n   * [initialL, initialR] of [currentL, currentR].\n   *\n   * A few examples:\n   * - If current == initial, the output is expected to be [0,1e9]\n   * - If current  is inside the initial -> [>0, < 1e9]\n   * - If current is completely outside initial to the right -> [>1e9, >>1e9].\n   * - If current is completely outside initial to the left -> [<<0, <0]\n   */\n  private percentageChange(\n    initialL: bigint,\n    initialR: bigint,\n    currentL: bigint,\n    currentR: bigint,\n  ): [bigint, bigint] {\n    const initialW = initialR - initialL;\n    const dtL = currentL - initialL;\n    const dtR = currentR - initialL;\n    return [this.divide(dtL, initialW), this.divide(dtR, initialW)];\n  }\n\n  private divide(a: bigint, b: bigint): bigint {\n    // Let's not lose precision\n    return (a * BIGINT_PRECISION_MULTIPLIER) / b;\n  }\n\n  private getCurrentViewportBounds(): ViewportBounds {\n    return this._ctx!.timeline.visibleWindow.toTimeSpan();\n  }\n\n  private purgeInactiveClients() {\n    const now = Date.now();\n    const TIMEOUT_MS = 30_000;\n    for (const [clientId, info] of this._advertisedClients.entries()) {\n      if (now - info.lastHeartbeat < TIMEOUT_MS) continue;\n      this._advertisedClients.delete(clientId);\n    }\n  }\n\n  private get active() {\n    return this._sessionId !== 0;\n  }\n}\n\ntype ViewportBounds = TimeSpan;\n\ninterface ViewportBoundsSnapshot {\n  thisWindow: ViewportBounds;\n  otherWindow: ViewportBounds;\n}\n\ninterface MsgSetViewport {\n  cmd: 'MSG_SET_VIEWPORT';\n  sessionId: SessionId;\n  viewportBounds: ViewportBounds;\n}\n\ninterface MsgAdvertise {\n  cmd: 'MSG_ADVERTISE';\n  title: string;\n  traceLoadTime: number;\n}\n\ninterface MsgSessionStart {\n  cmd: 'MSG_SESSION_START';\n  sessionId: SessionId;\n  clients: ClientId[];\n}\n\ninterface MsgSessionStop {\n  cmd: 'MSG_SESSION_STOP';\n  sessionId: SessionId;\n}\n\n// In case of new messages, they should be \"or-ed\" here.\ntype SyncMessages =\n  | MsgSetViewport\n  | MsgAdvertise\n  | MsgSessionStart\n  | MsgSessionStop;\n\ninterface SyncMessage {\n  perfettoSync: SyncMessages;\n  clientId: ClientId;\n}\n\ninterface ClientInfo {\n  title: string;\n  lastHeartbeat: number; // Datetime.now() of the last MSG_ADVERTISE.\n  traceLoadTime: number; // Datetime.now() of the onTraceLoad().\n}\n"]}
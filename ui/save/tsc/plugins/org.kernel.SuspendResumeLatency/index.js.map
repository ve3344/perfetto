{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/org.kernel.SuspendResumeLatency/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,qEAAiE;AACjE,qFAA8E;AAG9E,sDAAiD;AACjD,0DAA0D;AAC1D,qEAAmE;AAEnE,yFAAkD;AAClD,mGAA4D;AAE5D,+EAA+E;AAC/E,sBAAsB;AACtB,kCAAkC;AAClC,MAAM,uBAAwB,SAAQ,mCAAe;IAMhC;IALnB,YACE,KAAY,EACZ,GAAW,EACX,QAAgB,EAChB,QAAkB,EACD,OAAkB;QAEnC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAFrB,YAAO,GAAP,OAAO,CAAW;IAGrC,CAAC;IAEQ,YAAY;QACnB,OAAO,IAAI,kDAAyB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;CACF;AAED;IACE,MAAM,CAAU,EAAE,GAAG,iCAAiC,CAAC;IACvD,MAAM,CAAU,YAAY,GAAG,CAAC,6BAAY,EAAE,kCAAiB,CAAC,CAAC;IAEjE,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,6BAAY,CAAC,CAAC,YAAY,EAAE,CAAC;QACnE,MAAM,EAAC,MAAM,EAAC,GAAG,GAAG,CAAC;QACrB,MAAM,oBAAoB,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;;;;;;;;KAmB/C,CAAC,CAAC;QACH,MAAM,EAAE,GAAG,oBAAoB,CAAC,IAAI,CAAC;YACnC,QAAQ,EAAE,uBAAQ;YAClB,QAAQ,EAAE,kBAAG;SACd,CAAC,CAAC;QACH,yDAAyD;QACzD,IAAI,EAAE,CAAC,QAAQ,IAAI,IAAI,EAAE,CAAC;YACxB,OAAO;QACT,CAAC;QACD,MAAM,WAAW,GAAG,EAAE,CAAC,QAAQ,CAAC;QAChC,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;QAE7B,MAAM,GAAG,GAAG,yBAAyB,CAAC;QACtC,MAAM,WAAW,GAAG,wBAAwB,CAAC;QAC7C,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;YACvB,GAAG;YACH,KAAK,EAAE,WAAW;YAClB,IAAI,EAAE;gBACJ,QAAQ;gBACR,IAAI,EAAE,8BAAgB;aACvB;YACD,KAAK,EAAE,IAAI,uBAAuB,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC;SAC1E,CAAC,CAAC;QAEH,+BAA+B;QAC/B,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,WAAW,EAAC,CAAC,CAAC;QACvD,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;;AAtDH,4BAuDC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {NUM, STR_NULL} from '../../trace_processor/query_result';\nimport {AsyncSliceTrack} from '../dev.perfetto.AsyncSlices/async_slice_track';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {Trace} from '../../public/trace';\nimport {TrackNode} from '../../public/workspace';\nimport {SLICE_TRACK_KIND} from '../../public/track_kinds';\nimport {SuspendResumeDetailsPanel} from './suspend_resume_details';\nimport {ThreadMap} from '../dev.perfetto.Thread/threads';\nimport ThreadPlugin from '../dev.perfetto.Thread';\nimport AsyncSlicesPlugin from '../dev.perfetto.AsyncSlices';\n\n// SuspendResumeSliceTrack exists so as to override the `onSliceClick` function\n// in AsyncSliceTrack.\n// TODO(stevegolton): Remove this?\nclass SuspendResumeSliceTrack extends AsyncSliceTrack {\n  constructor(\n    trace: Trace,\n    uri: string,\n    maxDepth: number,\n    trackIds: number[],\n    private readonly threads: ThreadMap,\n  ) {\n    super(trace, uri, maxDepth, trackIds);\n  }\n\n  override detailsPanel() {\n    return new SuspendResumeDetailsPanel(this.trace, this.threads);\n  }\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'org.kernel.SuspendResumeLatency';\n  static readonly dependencies = [ThreadPlugin, AsyncSlicesPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const threads = ctx.plugins.getPlugin(ThreadPlugin).getThreadMap();\n    const {engine} = ctx;\n    const rawGlobalAsyncTracks = await engine.query(`\n      with global_tracks_grouped as (\n        select\n          name,\n          group_concat(distinct t.id) as trackIds,\n          count() as trackCount\n        from track t\n        where t.name = \"Suspend/Resume Latency\"\n      )\n      select\n        t.trackIds as trackIds,\n        case\n          when\n            t.trackCount > 0\n          then\n            __max_layout_depth(t.trackCount, t.trackIds)\n          else 0\n        end as maxDepth\n      from global_tracks_grouped t\n    `);\n    const it = rawGlobalAsyncTracks.iter({\n      trackIds: STR_NULL,\n      maxDepth: NUM,\n    });\n    // If no Suspend/Resume tracks exist, then nothing to do.\n    if (it.trackIds == null) {\n      return;\n    }\n    const rawTrackIds = it.trackIds;\n    const trackIds = rawTrackIds.split(',').map((v) => Number(v));\n    const maxDepth = it.maxDepth;\n\n    const uri = `/suspend_resume_latency`;\n    const displayName = `Suspend/Resume Latency`;\n    ctx.tracks.registerTrack({\n      uri,\n      title: displayName,\n      tags: {\n        trackIds,\n        kind: SLICE_TRACK_KIND,\n      },\n      track: new SuspendResumeSliceTrack(ctx, uri, maxDepth, trackIds, threads),\n    });\n\n    // Display the track in the UI.\n    const track = new TrackNode({uri, title: displayName});\n    ctx.workspace.addChildInOrder(track);\n  }\n}\n"]}
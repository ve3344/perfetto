{"version":3,"file":"suspend_resume_details.js","sourceRoot":"","sources":["../../../../src/plugins/org.kernel.SuspendResumeLatency/suspend_resume_details.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Duration, duration, Time, time} from '../../base/time';\nimport {LONG, NUM, STR_NULL} from '../../trace_processor/query_result';\nimport m from 'mithril';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout} from '../../widgets/grid_layout';\nimport {Section} from '../../widgets/section';\nimport {Tree, TreeNode} from '../../widgets/tree';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {DurationWidget} from '../../components/widgets/duration';\nimport {Anchor} from '../../widgets/anchor';\nimport {Engine} from '../../trace_processor/engine';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {TrackEventSelection} from '../../public/selection';\nimport {Trace} from '../../public/trace';\nimport {ThreadMap} from '../dev.perfetto.Thread/threads';\n\ninterface SuspendResumeEventDetails {\n  ts: time;\n  dur: duration;\n  utid: number;\n  cpu: number;\n  event_type: string;\n  device_name: string;\n  driver_name: string;\n  callback_phase: string;\n  thread_state_id: number;\n}\n\nexport class SuspendResumeDetailsPanel implements TrackEventDetailsPanel {\n  private suspendResumeEventDetails?: SuspendResumeEventDetails;\n\n  constructor(\n    private readonly trace: Trace,\n    private readonly threads: ThreadMap,\n  ) {}\n\n  async load({eventId}: TrackEventSelection) {\n    this.suspendResumeEventDetails = await loadSuspendResumeEventDetails(\n      this.trace.engine,\n      eventId,\n    );\n  }\n\n  render() {\n    const eventDetails = this.suspendResumeEventDetails;\n    if (eventDetails) {\n      const threadInfo = this.threads.get(eventDetails.utid);\n      if (!threadInfo) {\n        return null;\n      }\n      return m(\n        DetailsShell,\n        {title: 'Suspend / Resume Event'},\n        m(\n          GridLayout,\n          m(\n            Section,\n            {title: 'Properties'},\n            m(\n              Tree,\n              m(TreeNode, {\n                left: 'Device Name',\n                right: eventDetails.device_name,\n              }),\n              m(TreeNode, {\n                left: 'Start time',\n                right: m(Timestamp, {ts: eventDetails.ts}),\n              }),\n              m(TreeNode, {\n                left: 'Duration',\n                right: m(DurationWidget, {dur: eventDetails.dur}),\n              }),\n              m(TreeNode, {\n                left: 'Driver Name',\n                right: eventDetails.driver_name,\n              }),\n              m(TreeNode, {\n                left: 'Callback Phase',\n                right: eventDetails.callback_phase,\n              }),\n              m(TreeNode, {\n                left: 'Thread',\n                right: m(\n                  Anchor,\n                  {\n                    icon: 'call_made',\n                    onclick: () => {\n                      this.goToThread(eventDetails.thread_state_id);\n                    },\n                  },\n                  `${threadInfo.threadName} [${threadInfo.tid}]`,\n                ),\n              }),\n              m(TreeNode, {left: 'CPU', right: eventDetails.cpu}),\n              m(TreeNode, {left: 'Event Type', right: eventDetails.event_type}),\n            ),\n          ),\n        ),\n      );\n    } else {\n      return m(DetailsShell, {\n        title: 'Suspend / Resume Event',\n        description: 'Loading...',\n      });\n    }\n  }\n\n  isLoading(): boolean {\n    return this.suspendResumeEventDetails === undefined;\n  }\n\n  goToThread(threadStateId: number) {\n    this.trace.selection.selectSqlEvent('thread_state', threadStateId, {\n      scrollToSelection: true,\n    });\n  }\n}\n\nasync function loadSuspendResumeEventDetails(\n  engine: Engine,\n  id: number,\n): Promise<SuspendResumeEventDetails> {\n  const suspendResumeDetailsQuery = `\n    SELECT\n      ts,\n      dur,\n      EXTRACT_ARG(arg_set_id, 'utid') as utid,\n      EXTRACT_ARG(arg_set_id, 'cpu') as cpu,\n      EXTRACT_ARG(arg_set_id, 'event_type') as event_type,\n      EXTRACT_ARG(arg_set_id, 'device_name') as device_name,\n      EXTRACT_ARG(arg_set_id, 'driver_name') as driver_name,\n      EXTRACT_ARG(arg_set_id, 'callback_phase') as callback_phase\n    FROM slice\n    WHERE slice_id = ${id};\n  `;\n\n  const suspendResumeDetailsResult = await engine.query(\n    suspendResumeDetailsQuery,\n  );\n  const suspendResumeEventRow = suspendResumeDetailsResult.iter({\n    ts: LONG,\n    dur: LONG,\n    utid: NUM,\n    cpu: NUM,\n    event_type: STR_NULL,\n    device_name: STR_NULL,\n    driver_name: STR_NULL,\n    callback_phase: STR_NULL,\n  });\n  if (!suspendResumeEventRow.valid()) {\n    return {\n      ts: Time.fromRaw(0n),\n      dur: Duration.fromRaw(0n),\n      utid: 0,\n      cpu: 0,\n      event_type: 'Error',\n      device_name: 'Error',\n      driver_name: 'Error',\n      callback_phase: 'Error',\n      thread_state_id: 0,\n    };\n  }\n\n  const threadStateQuery = `\n    SELECT t.id as threadStateId\n    FROM thread_state t\n    WHERE\n      t.utid = ${suspendResumeEventRow.utid}\n      AND t.ts <= ${suspendResumeEventRow.ts}\n      AND t.ts + t.dur > ${suspendResumeEventRow.ts};\n  `;\n  const threadStateResult = await engine.query(threadStateQuery);\n  let threadStateId = 0;\n  if (threadStateResult.numRows() > 0) {\n    const threadStateRow = threadStateResult.firstRow({\n      threadStateId: NUM,\n    });\n    threadStateId = threadStateRow.threadStateId;\n  }\n\n  return {\n    ts: Time.fromRaw(suspendResumeEventRow.ts),\n    dur: Duration.fromRaw(suspendResumeEventRow.dur),\n    utid: suspendResumeEventRow.utid,\n    cpu: suspendResumeEventRow.cpu,\n    event_type:\n      suspendResumeEventRow.event_type !== null\n        ? suspendResumeEventRow.event_type\n        : 'N/A',\n    device_name:\n      suspendResumeEventRow.device_name !== null\n        ? suspendResumeEventRow.device_name\n        : 'N/A',\n    driver_name:\n      suspendResumeEventRow.driver_name !== null\n        ? suspendResumeEventRow.driver_name\n        : 'N/A',\n    callback_phase:\n      suspendResumeEventRow.callback_phase !== null\n        ? suspendResumeEventRow.callback_phase\n        : 'N/A',\n    thread_state_id: threadStateId,\n  };\n}\n"]}
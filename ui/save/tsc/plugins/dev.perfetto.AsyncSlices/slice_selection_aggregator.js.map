{"version":3,"file":"slice_selection_aggregator.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AsyncSlices/slice_selection_aggregator.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAMjC,2DAA2D;AAC3D,qEAAkE;AAElE,MAAa,wBAAwB;IAC1B,EAAE,GAAG,mBAAmB,CAAC;IAElC,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,IAAmB;QAC3D,MAAM,aAAa,GAAG;YACpB,EAAE,EAAE,kBAAG;YACP,IAAI,EAAE,kBAAG;YACT,EAAE,EAAE,mBAAI;YACR,GAAG,EAAE,mBAAI;SACV,CAAC;QACF,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM;aAC9B,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC;aAC1C,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,SAAS,CAAC;aAChC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;QAChD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,YAAY,GAAG,IAAI,sBAAY,CAAC,aAAa,CAAC,CAAC;QACrD,MAAM,MAAM,CAAC,KAAK,CAAC;yCACkB,IAAI,CAAC,EAAE;;;;;;gBAMhC,YAAY,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE;;qBAE1B,IAAI,CAAC,KAAK;mBACZ,IAAI,CAAC,GAAG;;KAEtB,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,UAAU;QACR,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,QAAQ,KAAI,CAAC;IAEnB,iBAAiB;QACf,OAAO,EAAC,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAC,CAAC;IAClD,CAAC;IAED,oBAAoB;QAClB,OAAO;YACL;gBACE,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,MAAM;aACjB;YACD;gBACE,KAAK,EAAE,oBAAoB;gBAC3B,IAAI,EAAE,cAAc;gBACpB,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,WAAW;gBACrB,GAAG,EAAE,IAAI;aACV;YACD;gBACE,KAAK,EAAE,wBAAwB;gBAC/B,IAAI,EAAE,cAAc;gBACpB,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,SAAS;aACpB;YACD;gBACE,KAAK,EAAE,aAAa;gBACpB,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,aAAa;gBACvB,GAAG,EAAE,IAAI;aACV;SACF,CAAC;IACJ,CAAC;CACF;AA3ED,4DA2EC","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ColumnDef, Sorting} from '../../public/aggregation';\nimport {AreaSelection} from '../../public/selection';\nimport {Engine} from '../../trace_processor/engine';\nimport {AreaSelectionAggregator} from '../../public/selection';\nimport {UnionDataset} from '../../trace_processor/dataset';\nimport {LONG, NUM, STR} from '../../trace_processor/query_result';\n\nexport class SliceSelectionAggregator implements AreaSelectionAggregator {\n  readonly id = 'slice_aggregation';\n\n  async createAggregateView(engine: Engine, area: AreaSelection) {\n    const desiredSchema = {\n      id: NUM,\n      name: STR,\n      ts: LONG,\n      dur: LONG,\n    };\n    const validDatasets = area.tracks\n      .map((track) => track.track.getDataset?.())\n      .filter((ds) => ds !== undefined)\n      .filter((ds) => ds.implements(desiredSchema));\n    if (validDatasets.length === 0) {\n      return false;\n    }\n    const unionDataset = new UnionDataset(validDatasets);\n    await engine.query(`\n      create or replace perfetto table ${this.id} as\n      select\n        name,\n        sum(dur) AS total_dur,\n        sum(dur)/count() as avg_dur,\n        count() as occurrences\n        from (${unionDataset.optimize().query()})\n      where\n        ts + dur > ${area.start}\n        and ts < ${area.end}\n      group by name\n    `);\n\n    return true;\n  }\n\n  getTabName() {\n    return 'Slices';\n  }\n\n  async getExtra() {}\n\n  getDefaultSorting(): Sorting {\n    return {column: 'total_dur', direction: 'DESC'};\n  }\n\n  getColumnDefinitions(): ColumnDef[] {\n    return [\n      {\n        title: 'Name',\n        kind: 'STRING',\n        columnConstructor: Uint32Array,\n        columnId: 'name',\n      },\n      {\n        title: 'Wall duration (ms)',\n        kind: 'TIMESTAMP_NS',\n        columnConstructor: Float64Array,\n        columnId: 'total_dur',\n        sum: true,\n      },\n      {\n        title: 'Avg Wall duration (ms)',\n        kind: 'TIMESTAMP_NS',\n        columnConstructor: Float64Array,\n        columnId: 'avg_dur',\n      },\n      {\n        title: 'Occurrences',\n        kind: 'NUMBER',\n        columnConstructor: Uint32Array,\n        columnId: 'occurrences',\n        sum: true,\n      },\n    ];\n  }\n}\n"]}
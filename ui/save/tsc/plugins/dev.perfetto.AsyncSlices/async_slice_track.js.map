{"version":3,"file":"async_slice_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AsyncSlices/async_slice_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,wDAA4D;AAC5D,sDAA4C;AAC5C,iFAGmD;AACnD,uEAAuF;AAIvF,2DAAqE;AACrE,qEAM4C;AAE/B,QAAA,gBAAgB,GAAG;IAC9B,0CAA0C;IAC1C,GAAG,6BAAS;IAEZ,2BAA2B;IAC3B,SAAS,EAAE,wBAAS;CACrB,CAAC;AAGF,MAAa,eAAgB,SAAQ,mCAAsC;IAKtD;IAJnB,YACE,KAAY,EACZ,GAAW,EACX,QAAgB,EACC,QAAkB;QAEnC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAFD,aAAQ,GAAR,QAAQ,CAAU;QAGnC,IAAI,CAAC,WAAW,GAAG;YACjB,GAAG,gDAAiC;YACpC,UAAU,EAAE,QAAQ;SACrB,CAAC;IACJ,CAAC;IAED,UAAU;QACR,OAAO,wBAAgB,CAAC;IAC1B,CAAC;IAED,UAAU,CAAC,GAAmB;QAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAE5C,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,CAAC,SAAS,KAAK,IAAI,EAAE,CAAC;YAC3C,MAAM,SAAS,GAAG,IAAA,kBAAK,EAAC,wBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACpE,OAAO,EAAC,GAAG,UAAU,EAAE,SAAS,EAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,OAAO,UAAU,CAAC;QACpB,CAAC;IACH,CAAC;IAED,YAAY;QACV,4DAA4D;QAC5D,sEAAsE;QACtE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,OAAO;;;;;;;;;2BASc,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;OACpC,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;;;;;;;;;oCASuB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;OACpD,CAAC;QACJ,CAAC;IACH,CAAC;IAED,eAAe,CAAC,MAAe;QAC7B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,GAAG,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC;QACpD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,EAAU;QAEV,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW;YAAE,OAAO,SAAS,CAAC;QACnC,OAAO;YACL,GAAG,WAAW;YACd,SAAS,EAAE,OAAO;SACnB,CAAC;IACJ,CAAC;IAEQ,UAAU;QACjB,OAAO,IAAI,uBAAa,CAAC;YACvB,GAAG,EAAE,OAAO;YACZ,MAAM,EAAE;gBACN,GAAG,EAAE,UAAU;gBACf,EAAE,EAAE,IAAI,CAAC,QAAQ;aAClB;YACD,MAAM,EAAE;gBACN,EAAE,EAAE,kBAAG;gBACP,IAAI,EAAE,kBAAG;gBACT,EAAE,EAAE,mBAAI;gBACR,GAAG,EAAE,mBAAI;gBACT,SAAS,EAAE,uBAAQ;aACpB;SACF,CAAC,CAAC;IACL,CAAC;CACF;AA5FD,0CA4FC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath as BIMath} from '../../base/bigint_math';\nimport {clamp} from '../../base/math_utils';\nimport {\n  NAMED_ROW,\n  NamedSliceTrack,\n} from '../../components/tracks/named_slice_track';\nimport {SLICE_LAYOUT_FIT_CONTENT_DEFAULTS} from '../../components/tracks/slice_layout';\nimport {TrackEventDetails} from '../../public/selection';\nimport {Trace} from '../../public/trace';\nimport {Slice} from '../../public/track';\nimport {SourceDataset, Dataset} from '../../trace_processor/dataset';\nimport {\n  LONG,\n  LONG_NULL,\n  NUM,\n  NUM_NULL,\n  STR,\n} from '../../trace_processor/query_result';\n\nexport const THREAD_SLICE_ROW = {\n  // Base columns (tsq, ts, dur, id, depth).\n  ...NAMED_ROW,\n\n  // Thread-specific columns.\n  threadDur: LONG_NULL,\n};\nexport type ThreadSliceRow = typeof THREAD_SLICE_ROW;\n\nexport class AsyncSliceTrack extends NamedSliceTrack<Slice, ThreadSliceRow> {\n  constructor(\n    trace: Trace,\n    uri: string,\n    maxDepth: number,\n    private readonly trackIds: number[],\n  ) {\n    super(trace, uri);\n    this.sliceLayout = {\n      ...SLICE_LAYOUT_FIT_CONTENT_DEFAULTS,\n      depthGuess: maxDepth,\n    };\n  }\n\n  getRowSpec(): ThreadSliceRow {\n    return THREAD_SLICE_ROW;\n  }\n\n  rowToSlice(row: ThreadSliceRow): Slice {\n    const namedSlice = this.rowToSliceBase(row);\n\n    if (row.dur > 0n && row.threadDur !== null) {\n      const fillRatio = clamp(BIMath.ratio(row.threadDur, row.dur), 0, 1);\n      return {...namedSlice, fillRatio};\n    } else {\n      return namedSlice;\n    }\n  }\n\n  getSqlSource(): string {\n    // If we only have one track ID we can avoid the overhead of\n    // experimental_slice_layout, and just go straight to the slice table.\n    if (this.trackIds.length === 1) {\n      return `\n        select\n          ts,\n          dur,\n          id,\n          depth,\n          ifnull(name, '[null]') as name,\n          thread_dur as threadDur\n        from slice\n        where track_id = ${this.trackIds[0]}\n      `;\n    } else {\n      return `\n        select\n          id,\n          ts,\n          dur,\n          layout_depth as depth,\n          ifnull(name, '[null]') as name,\n          thread_dur as threadDur\n        from experimental_slice_layout\n        where filter_track_ids = '${this.trackIds.join(',')}'\n      `;\n    }\n  }\n\n  onUpdatedSlices(slices: Slice[]) {\n    for (const slice of slices) {\n      slice.isHighlighted = slice === this.hoveredSlice;\n    }\n  }\n\n  async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const baseDetails = await super.getSelectionDetails(id);\n    if (!baseDetails) return undefined;\n    return {\n      ...baseDetails,\n      tableName: 'slice',\n    };\n  }\n\n  override getDataset(): Dataset {\n    return new SourceDataset({\n      src: `slice`,\n      filter: {\n        col: 'track_id',\n        in: this.trackIds,\n      },\n      schema: {\n        id: NUM,\n        name: STR,\n        ts: LONG,\n        dur: LONG,\n        parent_id: NUM_NULL,\n      },\n    });\n  }\n}\n"]}
{"version":3,"file":"scroll_jank_cause_link_utils.js","sourceRoot":"","sources":["../../../../src/plugins/org.chromium.ChromeScrollJank/scroll_jank_cause_link_utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Icons} from '../../base/semantic_icons';\nimport {duration, Time, time} from '../../base/time';\nimport {exists} from '../../base/utils';\nimport {SliceSqlId} from '../../components/sql_utils/core_types';\nimport {Engine} from '../../trace_processor/engine';\nimport {LONG, NUM, STR} from '../../trace_processor/query_result';\nimport {Anchor} from '../../widgets/anchor';\nimport {\n  CauseProcess,\n  CauseThread,\n  ScrollJankCauseMap,\n} from './scroll_jank_cause_map';\nimport {scrollTo} from '../../public/scroll_helper';\nimport {Trace} from '../../public/trace';\n\nconst UNKNOWN_NAME = 'Unknown';\n\nexport interface EventLatencyStage {\n  name: string;\n  // Slice id of the top level EventLatency slice (not a stage).\n  eventLatencyId: SliceSqlId;\n  ts: time;\n  dur: duration;\n}\n\nexport interface EventLatencyCauseThreadTracks {\n  // A thread may have multiple tracks associated with it (e.g. from ATrace\n  // events).\n  trackIds: number[];\n  thread: CauseThread;\n  causeDescription: string;\n}\n\nexport async function getScrollJankCauseStage(\n  engine: Engine,\n  eventLatencyId: SliceSqlId,\n): Promise<EventLatencyStage | undefined> {\n  const queryResult = await engine.query(`\n    SELECT\n      IFNULL(cause_of_jank, '${UNKNOWN_NAME}') AS causeOfJank,\n      IFNULL(sub_cause_of_jank, '${UNKNOWN_NAME}') AS subCauseOfJank,\n      IFNULL(substage.ts, -1) AS ts,\n      IFNULL(substage.dur, -1) AS dur\n    FROM chrome_janky_frame_presentation_intervals\n      JOIN descendant_slice(event_latency_id) substage\n    WHERE event_latency_id = ${eventLatencyId}\n      AND substage.name = COALESCE(sub_cause_of_jank, cause_of_jank)\n  `);\n\n  const causeIt = queryResult.iter({\n    causeOfJank: STR,\n    subCauseOfJank: STR,\n    ts: LONG,\n    dur: LONG,\n  });\n\n  for (; causeIt.valid(); causeIt.next()) {\n    const causeOfJank = causeIt.causeOfJank;\n    const subCauseOfJank = causeIt.subCauseOfJank;\n\n    if (causeOfJank == '' || causeOfJank == UNKNOWN_NAME) return undefined;\n    const cause = subCauseOfJank == UNKNOWN_NAME ? causeOfJank : subCauseOfJank;\n    const stageDetails: EventLatencyStage = {\n      name: cause,\n      eventLatencyId: eventLatencyId,\n      ts: Time.fromRaw(causeIt.ts),\n      dur: causeIt.dur,\n    };\n\n    return stageDetails;\n  }\n\n  return undefined;\n}\n\nexport async function getEventLatencyCauseTracks(\n  engine: Engine,\n  scrollJankCauseStage: EventLatencyStage,\n): Promise<EventLatencyCauseThreadTracks[]> {\n  const threadTracks: EventLatencyCauseThreadTracks[] = [];\n  const causeDetails = ScrollJankCauseMap.getEventLatencyDetails(\n    scrollJankCauseStage.name,\n  );\n  if (causeDetails === undefined) return threadTracks;\n\n  for (const cause of causeDetails.jankCauses) {\n    switch (cause.process) {\n      case CauseProcess.RENDERER:\n      case CauseProcess.BROWSER:\n      case CauseProcess.GPU:\n        const tracksForProcess = await getChromeCauseTracks(\n          engine,\n          scrollJankCauseStage.eventLatencyId,\n          cause.process,\n          cause.thread,\n        );\n        for (const track of tracksForProcess) {\n          track.causeDescription = cause.description;\n          threadTracks.push(track);\n        }\n        break;\n      case CauseProcess.UNKNOWN:\n      default:\n        break;\n    }\n  }\n\n  return threadTracks;\n}\n\nasync function getChromeCauseTracks(\n  engine: Engine,\n  eventLatencySliceId: number,\n  processName: CauseProcess,\n  threadName: CauseThread,\n): Promise<EventLatencyCauseThreadTracks[]> {\n  const queryResult = await engine.query(`\n      INCLUDE PERFETTO MODULE chrome.scroll_jank.scroll_jank_cause_utils;\n\n      SELECT DISTINCT\n        utid,\n        id AS trackId\n      FROM thread_track\n      WHERE utid IN (\n        SELECT DISTINCT\n          utid\n        FROM chrome_select_scroll_jank_cause_thread(\n          ${eventLatencySliceId},\n          '${processName}',\n          '${threadName}'\n        )\n      );\n  `);\n\n  const it = queryResult.iter({\n    utid: NUM,\n    trackId: NUM,\n  });\n\n  const threadsWithTrack: {[id: number]: EventLatencyCauseThreadTracks} = {};\n  const utids: number[] = [];\n  for (; it.valid(); it.next()) {\n    const utid = it.utid;\n    if (!(utid in threadsWithTrack)) {\n      threadsWithTrack[utid] = {\n        trackIds: [it.trackId],\n        thread: threadName,\n        causeDescription: '',\n      };\n      utids.push(utid);\n    } else {\n      threadsWithTrack[utid].trackIds.push(it.trackId);\n    }\n  }\n\n  return utids.map((each) => threadsWithTrack[each]);\n}\n\nexport function getCauseLink(\n  trace: Trace,\n  threadTracks: EventLatencyCauseThreadTracks,\n  tracksByTrackId: Map<number, string>,\n  ts: time | undefined,\n  dur: duration | undefined,\n): m.Child {\n  const trackUris: string[] = [];\n  for (const trackId of threadTracks.trackIds) {\n    const track = tracksByTrackId.get(trackId);\n    if (track === undefined) {\n      return `Could not locate track ${trackId} for thread ${threadTracks.thread} in the global state`;\n    }\n    trackUris.push(track);\n  }\n\n  if (trackUris.length == 0) {\n    return `No valid tracks for thread ${threadTracks.thread}.`;\n  }\n\n  // Fixed length of a container to ensure that the icon does not overlap with\n  // the text due to table formatting.\n  return m(\n    `div[style='width:250px']`,\n    m(\n      Anchor,\n      {\n        icon: Icons.UpdateSelection,\n        onclick: () => {\n          scrollTo({\n            track: {uri: trackUris[0], expandGroup: true},\n          });\n          if (exists(ts) && exists(dur)) {\n            scrollTo({\n              time: {\n                start: ts,\n                end: Time.fromRaw(ts + dur),\n                viewPercentage: 0.3,\n              },\n            });\n            trace.selection.selectArea({\n              start: ts,\n              end: Time.fromRaw(ts + dur),\n              trackUris,\n            });\n          }\n        },\n      },\n      threadTracks.thread,\n    ),\n  );\n}\n"]}
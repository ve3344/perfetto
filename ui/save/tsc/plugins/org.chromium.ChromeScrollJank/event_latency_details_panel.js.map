{"version":3,"file":"event_latency_details_panel.js","sourceRoot":"","sources":["../../../../src/plugins/org.chromium.ChromeScrollJank/event_latency_details_panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Duration, duration, Time, time} from '../../base/time';\nimport {hasArgs, renderArguments} from '../../components/details/slice_args';\nimport {renderDetails} from '../../components/details/slice_details';\nimport {\n  getDescendantSliceTree,\n  getSlice,\n  SliceDetails,\n  SliceTreeNode,\n} from '../../components/sql_utils/slice';\nimport {asSliceSqlId, SliceSqlId} from '../../components/sql_utils/core_types';\nimport {\n  ColumnDescriptor,\n  Table,\n  TableData,\n  widgetColumn,\n} from '../../widgets/table';\nimport {TreeTable, TreeTableAttrs} from '../../components/widgets/treetable';\nimport {LONG, NUM, STR} from '../../trace_processor/query_result';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout, GridLayoutColumn} from '../../widgets/grid_layout';\nimport {Section} from '../../widgets/section';\nimport {MultiParagraphText, TextParagraph} from '../../widgets/text_paragraph';\nimport {Tree, TreeNode} from '../../widgets/tree';\nimport {\n  EventLatencyCauseThreadTracks,\n  EventLatencyStage,\n  getCauseLink,\n  getEventLatencyCauseTracks,\n  getScrollJankCauseStage,\n} from './scroll_jank_cause_link_utils';\nimport {ScrollJankCauseMap} from './scroll_jank_cause_map';\nimport {sliceRef} from '../../components/widgets/slice';\nimport {JANKS_TRACK_URI, renderSliceRef} from './selection_utils';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {Trace} from '../../public/trace';\n\n// Given a node in the slice tree, return a path from root to it.\nfunction getPath(slice: SliceTreeNode): string[] {\n  const result: string[] = [];\n  let node: SliceTreeNode | undefined = slice;\n  while (node.parent !== undefined) {\n    result.push(node.name);\n    node = node.parent;\n  }\n  return result.reverse();\n}\n\n// Given a slice tree node and a path, find the node following the path from\n// the given slice, or `undefined` if not found.\nfunction findSliceInTreeByPath(\n  slice: SliceTreeNode | undefined,\n  path: string[],\n): SliceTreeNode | undefined {\n  if (slice === undefined) {\n    return undefined;\n  }\n  let result = slice;\n  for (const segment of path) {\n    let found = false;\n    for (const child of result.children) {\n      if (child.name === segment) {\n        found = true;\n        result = child;\n        break;\n      }\n    }\n    if (!found) {\n      return undefined;\n    }\n  }\n  return result;\n}\n\nfunction durationDelta(value: duration, base?: duration): string {\n  if (base === undefined) {\n    return 'NULL';\n  }\n  const delta = value - base;\n  return `${delta > 0 ? '+' : ''}${Duration.humanise(delta)}`;\n}\n\nexport class EventLatencySliceDetailsPanel implements TrackEventDetailsPanel {\n  private name = '';\n  private topEventLatencyId: SliceSqlId | undefined = undefined;\n\n  private sliceDetails?: SliceDetails;\n  private jankySlice?: {\n    ts: time;\n    dur: duration;\n    id: number;\n    causeOfJank: string;\n  };\n\n  // Whether this stage has caused jank. This is also true for top level\n  // EventLatency slices where a descendant is a cause of jank.\n  private isJankStage = false;\n\n  // For top level EventLatency slices - if any descendant is a cause of jank,\n  // this field stores information about that descendant slice. Otherwise, this\n  // is stores information about the current stage;\n  private relevantThreadStage: EventLatencyStage | undefined;\n  private relevantThreadTracks: EventLatencyCauseThreadTracks[] = [];\n  // Stages tree for the current EventLatency.\n  private eventLatencyBreakdown?: SliceTreeNode;\n  // Stages tree for the next EventLatency.\n  private nextEventLatencyBreakdown?: SliceTreeNode;\n  // Stages tree for the prev EventLatency.\n  private prevEventLatencyBreakdown?: SliceTreeNode;\n\n  private tracksByTrackId: Map<number, string>;\n\n  constructor(\n    private readonly trace: Trace,\n    private readonly id: number,\n  ) {\n    this.tracksByTrackId = new Map<number, string>();\n    this.trace.tracks.getAllTracks().forEach((td) => {\n      td.tags?.trackIds?.forEach((trackId) => {\n        this.tracksByTrackId.set(trackId, td.uri);\n      });\n    });\n  }\n\n  async load() {\n    const queryResult = await this.trace.engine.query(`\n      SELECT\n        name\n      FROM slice\n      WHERE id = ${this.id}\n      `);\n\n    const iter = queryResult.firstRow({\n      name: STR,\n    });\n\n    this.name = iter.name;\n\n    await this.loadSlice();\n    await this.loadJankSlice();\n    await this.loadRelevantThreads();\n    await this.loadEventLatencyBreakdown();\n  }\n\n  async loadSlice() {\n    this.sliceDetails = await getSlice(\n      this.trace.engine,\n      asSliceSqlId(this.id),\n    );\n    this.trace.scheduleFullRedraw();\n  }\n\n  async loadJankSlice() {\n    if (!this.sliceDetails) return;\n    // Get the id for the top-level EventLatency slice (this or parent), as\n    // this id is used in the ScrollJankV3 track to identify the corresponding\n    // janky interval.\n    if (this.sliceDetails.name === 'EventLatency') {\n      this.topEventLatencyId = this.sliceDetails.id;\n    } else {\n      this.topEventLatencyId = asSliceSqlId(\n        await this.getOldestAncestorSliceId(),\n      );\n    }\n\n    const it = (\n      await this.trace.engine.query(`\n      SELECT ts, dur, id, cause_of_jank as causeOfJank\n      FROM chrome_janky_frame_presentation_intervals\n      WHERE event_latency_id = ${this.topEventLatencyId}`)\n    ).iter({\n      id: NUM,\n      ts: LONG,\n      dur: LONG,\n      causeOfJank: STR,\n    });\n\n    if (it.valid()) {\n      this.jankySlice = {\n        id: it.id,\n        ts: Time.fromRaw(it.ts),\n        dur: Duration.fromRaw(it.dur),\n        causeOfJank: it.causeOfJank,\n      };\n    }\n  }\n\n  async loadRelevantThreads() {\n    if (!this.sliceDetails) return;\n    if (!this.topEventLatencyId) return;\n\n    // Relevant threads should only be available on a \"Janky\" EventLatency\n    // slice to allow the user to jump to the possible cause of jank.\n    if (this.sliceDetails.name === 'EventLatency' && !this.jankySlice) return;\n\n    const possibleScrollJankStage = await getScrollJankCauseStage(\n      this.trace.engine,\n      this.topEventLatencyId,\n    );\n    if (this.sliceDetails.name === 'EventLatency') {\n      this.isJankStage = true;\n      this.relevantThreadStage = possibleScrollJankStage;\n    } else {\n      if (\n        possibleScrollJankStage &&\n        this.sliceDetails.name === possibleScrollJankStage.name\n      ) {\n        this.isJankStage = true;\n      }\n      this.relevantThreadStage = {\n        name: this.sliceDetails.name,\n        eventLatencyId: this.topEventLatencyId,\n        ts: this.sliceDetails.ts,\n        dur: this.sliceDetails.dur,\n      };\n    }\n\n    if (this.relevantThreadStage) {\n      this.relevantThreadTracks = await getEventLatencyCauseTracks(\n        this.trace.engine,\n        this.relevantThreadStage,\n      );\n    }\n  }\n\n  async loadEventLatencyBreakdown() {\n    if (this.topEventLatencyId === undefined) {\n      return;\n    }\n    this.eventLatencyBreakdown = await getDescendantSliceTree(\n      this.trace.engine,\n      this.topEventLatencyId,\n    );\n\n    // TODO(altimin): this should only consider EventLatencies within the same scroll.\n    const prevEventLatency = (\n      await this.trace.engine.query(`\n      INCLUDE PERFETTO MODULE chrome.event_latency;\n      SELECT\n        id\n      FROM chrome_event_latencies\n      WHERE event_type IN (\n        'FIRST_GESTURE_SCROLL_UPDATE',\n        'GESTURE_SCROLL_UPDATE',\n        'INERTIAL_GESTURE_SCROLL_UPDATE')\n      AND is_presented\n      AND id < ${this.topEventLatencyId}\n      ORDER BY id DESC\n      LIMIT 1\n      ;\n    `)\n    ).maybeFirstRow({id: NUM});\n    if (prevEventLatency !== undefined) {\n      this.prevEventLatencyBreakdown = await getDescendantSliceTree(\n        this.trace.engine,\n        asSliceSqlId(prevEventLatency.id),\n      );\n    }\n\n    const nextEventLatency = (\n      await this.trace.engine.query(`\n      INCLUDE PERFETTO MODULE chrome.event_latency;\n      SELECT\n        id\n      FROM chrome_event_latencies\n      WHERE event_type IN (\n        'FIRST_GESTURE_SCROLL_UPDATE',\n        'GESTURE_SCROLL_UPDATE',\n        'INERTIAL_GESTURE_SCROLL_UPDATE')\n      AND is_presented\n      AND id > ${this.topEventLatencyId}\n      ORDER BY id DESC\n      LIMIT 1;\n    `)\n    ).maybeFirstRow({id: NUM});\n    if (nextEventLatency !== undefined) {\n      this.nextEventLatencyBreakdown = await getDescendantSliceTree(\n        this.trace.engine,\n        asSliceSqlId(nextEventLatency.id),\n      );\n    }\n  }\n\n  private getRelevantLinks(): m.Child {\n    if (!this.sliceDetails) return undefined;\n\n    // Relevant threads should only be available on a \"Janky\" EventLatency\n    // slice to allow the user to jump to the possible cause of jank.\n    if (\n      this.sliceDetails.name === 'EventLatency' &&\n      !this.relevantThreadStage\n    ) {\n      return undefined;\n    }\n\n    const name = this.relevantThreadStage\n      ? this.relevantThreadStage.name\n      : this.sliceDetails.name;\n    const ts = this.relevantThreadStage\n      ? this.relevantThreadStage.ts\n      : this.sliceDetails.ts;\n    const dur = this.relevantThreadStage\n      ? this.relevantThreadStage.dur\n      : this.sliceDetails.dur;\n    const stageDetails = ScrollJankCauseMap.getEventLatencyDetails(name);\n    if (stageDetails === undefined) return undefined;\n\n    const childWidgets: m.Child[] = [];\n    childWidgets.push(m(TextParagraph, {text: stageDetails.description}));\n\n    interface RelevantThreadRow {\n      description: string;\n      tracks: EventLatencyCauseThreadTracks;\n      ts: time;\n      dur: duration;\n    }\n\n    const columns: ColumnDescriptor<RelevantThreadRow>[] = [\n      widgetColumn<RelevantThreadRow>('Relevant Thread', (x) =>\n        getCauseLink(this.trace, x.tracks, this.tracksByTrackId, x.ts, x.dur),\n      ),\n      widgetColumn<RelevantThreadRow>('Description', (x) => {\n        if (x.description === '') {\n          return x.description;\n        } else {\n          return m(TextParagraph, {text: x.description});\n        }\n      }),\n    ];\n\n    const trackLinks: RelevantThreadRow[] = [];\n\n    for (let i = 0; i < this.relevantThreadTracks.length; i++) {\n      const track = this.relevantThreadTracks[i];\n      let description = '';\n      if (i == 0 || track.thread != this.relevantThreadTracks[i - 1].thread) {\n        description = track.causeDescription;\n      }\n      trackLinks.push({\n        description: description,\n        tracks: this.relevantThreadTracks[i],\n        ts: ts,\n        dur: dur,\n      });\n    }\n\n    const tableData = new TableData(trackLinks);\n\n    if (trackLinks.length > 0) {\n      childWidgets.push(\n        m(Table, {\n          data: tableData,\n          columns: columns,\n        }),\n      );\n    }\n\n    return m(\n      Section,\n      {title: this.isJankStage ? `Jank Cause: ${name}` : name},\n      childWidgets,\n    );\n  }\n\n  private async getOldestAncestorSliceId(): Promise<number> {\n    let eventLatencyId = -1;\n    if (!this.sliceDetails) return eventLatencyId;\n    const queryResult = await this.trace.engine.query(`\n      SELECT\n        id\n      FROM ancestor_slice(${this.sliceDetails.id})\n      WHERE name = 'EventLatency'\n    `);\n\n    const it = queryResult.iter({\n      id: NUM,\n    });\n\n    for (; it.valid(); it.next()) {\n      eventLatencyId = it.id;\n      break;\n    }\n\n    return eventLatencyId;\n  }\n\n  private getLinksSection(): m.Child {\n    return m(\n      Section,\n      {title: 'Quick links'},\n      m(\n        Tree,\n        m(TreeNode, {\n          left: this.sliceDetails\n            ? sliceRef(\n                this.sliceDetails,\n                'EventLatency in context of other Input events',\n              )\n            : 'EventLatency in context of other Input events',\n          right: this.sliceDetails ? '' : 'N/A',\n        }),\n        this.jankySlice &&\n          m(TreeNode, {\n            left: renderSliceRef({\n              trace: this.trace,\n              id: this.jankySlice.id,\n              trackUri: JANKS_TRACK_URI,\n              title: this.jankySlice.causeOfJank,\n            }),\n          }),\n      ),\n    );\n  }\n\n  private getBreakdownSection(): m.Child {\n    if (this.eventLatencyBreakdown === undefined) {\n      return undefined;\n    }\n\n    const attrs: TreeTableAttrs<SliceTreeNode> = {\n      rows: [this.eventLatencyBreakdown],\n      getChildren: (slice) => slice.children,\n      columns: [\n        {name: 'Name', getData: (slice) => slice.name},\n        {name: 'Duration', getData: (slice) => Duration.humanise(slice.dur)},\n        {\n          name: 'vs prev',\n          getData: (slice) =>\n            durationDelta(\n              slice.dur,\n              findSliceInTreeByPath(\n                this.prevEventLatencyBreakdown,\n                getPath(slice),\n              )?.dur,\n            ),\n        },\n        {\n          name: 'vs next',\n          getData: (slice) =>\n            durationDelta(\n              slice.dur,\n              findSliceInTreeByPath(\n                this.nextEventLatencyBreakdown,\n                getPath(slice),\n              )?.dur,\n            ),\n        },\n      ],\n    };\n\n    return m(\n      Section,\n      {\n        title: 'EventLatency Stage Breakdown',\n      },\n      m(TreeTable<SliceTreeNode>, attrs),\n    );\n  }\n\n  private getDescriptionText(): m.Child {\n    return m(\n      MultiParagraphText,\n      m(TextParagraph, {\n        text: `EventLatency tracks the latency of handling a given input event\n                 (Scrolls, Touches, Taps, etc). Ideally from when the input was\n                 read by the hardware to when it was reflected on the screen.`,\n      }),\n      m(TextParagraph, {\n        text: `Note however the concept of coalescing or terminating early. This\n               occurs when we receive multiple events or handle them quickly by\n               converting them into a different event. Such as a TOUCH_MOVE\n               being converted into a GESTURE_SCROLL_UPDATE type, or a multiple\n               GESTURE_SCROLL_UPDATE events being formed into a single frame at\n               the end of the RendererCompositorQueuingDelay.`,\n      }),\n      m(TextParagraph, {\n        text: `*Important:* On some platforms (MacOS) we do not get feedback on\n               when something is presented on the screen so the timings are only\n               accurate for what we know on a given platform.`,\n      }),\n    );\n  }\n\n  render() {\n    if (this.sliceDetails) {\n      const slice = this.sliceDetails;\n\n      const rightSideWidgets: m.Child[] = [];\n      rightSideWidgets.push(\n        m(\n          Section,\n          {title: 'Description'},\n          m('.div', this.getDescriptionText()),\n        ),\n      );\n\n      const stageWidget = this.getRelevantLinks();\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      if (stageWidget) {\n        rightSideWidgets.push(stageWidget);\n      }\n      rightSideWidgets.push(this.getLinksSection());\n      rightSideWidgets.push(this.getBreakdownSection());\n\n      return m(\n        DetailsShell,\n        {\n          title: 'Slice',\n          description: this.name,\n        },\n        m(\n          GridLayout,\n          m(\n            GridLayoutColumn,\n            renderDetails(this.trace, slice),\n            hasArgs(slice.args) &&\n              m(\n                Section,\n                {title: 'Arguments'},\n                m(Tree, renderArguments(this.trace, slice.args)),\n              ),\n          ),\n          m(GridLayoutColumn, rightSideWidgets),\n        ),\n      );\n    } else {\n      return m(DetailsShell, {title: 'Slice', description: 'Loading...'});\n    }\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/org.kernel.LinuxKernelSubsystems/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,qEAAiE;AAGjE,qFAA8E;AAC9E,0DAA0D;AAC1D,sDAAiD;AACjD,mGAA4D;AAE5D,wEAAwE;AACxE;IACE,MAAM,CAAU,EAAE,GAAG,kCAAkC,CAAC;IACxD,MAAM,CAAU,YAAY,GAAG,CAAC,kCAAiB,CAAC,CAAC;IAEnD,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,MAAM,MAAM,GAAG,IAAI,qBAAS,CAAC;YAC3B,KAAK,EAAE,cAAc;YACrB,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACzC,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;YACpB,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,wEAAwE;IACxE,qDAAqD;IACrD,KAAK,CAAC,YAAY,CAAC,GAAU;QAC3B,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;;;;;;KAQrC,CAAC,CAAC;QAEH,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;YACrB,UAAU,EAAE,uBAAQ;YACpB,OAAO,EAAE,kBAAG;SACb,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,IAAI,qBAAS,CAAC;YACxB,KAAK,EAAE,0BAA0B;YACjC,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACH,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;YAC3B,MAAM,KAAK,GAAG,EAAE,CAAC,UAAU,IAAI,GAAG,OAAO,EAAE,CAAC;YAE5C,MAAM,GAAG,GAAG,cAAc,KAAK,EAAE,CAAC;YAClC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;gBACvB,GAAG;gBACH,KAAK;gBACL,KAAK,EAAE,IAAI,mCAAe,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;gBAClD,IAAI,EAAE;oBACJ,IAAI,EAAE,8BAAgB;oBACtB,QAAQ,EAAE,CAAC,OAAO,CAAC;oBACnB,SAAS,EAAE,sBAAsB;iBAClC;aACF,CAAC,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAC,CAAC,CAAC;YAC1C,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QACD,OAAO,GAAG,CAAC;IACb,CAAC;;AAxDH,4BAyDC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {NUM, STR_NULL} from '../../trace_processor/query_result';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {AsyncSliceTrack} from '../dev.perfetto.AsyncSlices/async_slice_track';\nimport {SLICE_TRACK_KIND} from '../../public/track_kinds';\nimport {TrackNode} from '../../public/workspace';\nimport AsyncSlicesPlugin from '../dev.perfetto.AsyncSlices';\n\n// This plugin renders visualizations of subsystems of the Linux kernel.\nexport default class implements PerfettoPlugin {\n  static readonly id = 'org.kernel.LinuxKernelSubsystems';\n  static readonly dependencies = [AsyncSlicesPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const kernel = new TrackNode({\n      title: 'Linux Kernel',\n      isSummary: true,\n    });\n    const rpm = await this.addRpmTracks(ctx);\n    if (rpm.hasChildren) {\n      ctx.workspace.addChildInOrder(kernel);\n      kernel.addChildInOrder(rpm);\n    }\n  }\n\n  // Add tracks to visualize the runtime power state transitions for Linux\n  // kernel devices (devices managed by Linux drivers).\n  async addRpmTracks(ctx: Trace) {\n    const result = await ctx.engine.query(`\n      select\n        t.id as trackId,\n        extract_arg(t.dimension_arg_set_id, 'linux_device') as deviceName\n      from track t\n      join _slice_track_summary using (id)\n      where classification = 'linux_rpm'\n      order by deviceName;\n    `);\n\n    const it = result.iter({\n      deviceName: STR_NULL,\n      trackId: NUM,\n    });\n    const rpm = new TrackNode({\n      title: 'Runtime Power Management',\n      isSummary: true,\n    });\n    for (; it.valid(); it.next()) {\n      const trackId = it.trackId;\n      const title = it.deviceName ?? `${trackId}`;\n\n      const uri = `/linux/rpm/${title}`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        track: new AsyncSliceTrack(ctx, uri, 0, [trackId]),\n        tags: {\n          kind: SLICE_TRACK_KIND,\n          trackIds: [trackId],\n          groupName: `Linux Kernel Devices`,\n        },\n      });\n      const track = new TrackNode({uri, title});\n      rpm.addChildInOrder(track);\n    }\n    return rpm;\n  }\n}\n"]}
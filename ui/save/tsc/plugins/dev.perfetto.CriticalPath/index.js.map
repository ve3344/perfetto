{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CriticalPath/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getThreadInfo, ThreadInfo} from '../../components/sql_utils/thread';\nimport {addDebugSliceTrack} from '../../components/tracks/debug_tracks';\nimport {Trace} from '../../public/trace';\nimport {THREAD_STATE_TRACK_KIND} from '../../public/track_kinds';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {asUtid, Utid} from '../../components/sql_utils/core_types';\nimport {addQueryResultsTab} from '../../components/query_table/query_result_tab';\nimport {showModal} from '../../widgets/modal';\nimport {\n  CRITICAL_PATH_CMD,\n  CRITICAL_PATH_LITE_CMD,\n} from '../../public/exposed_commands';\nimport {getTimeSpanOfSelectionOrVisibleWindow} from '../../public/utils';\n\nconst criticalPathSliceColumns = {\n  ts: 'ts',\n  dur: 'dur',\n  name: 'name',\n};\n\nconst criticalPathsliceColumnNames = [\n  'id',\n  'utid',\n  'ts',\n  'dur',\n  'name',\n  'table_name',\n];\n\nconst criticalPathsliceLiteColumns = {\n  ts: 'ts',\n  dur: 'dur',\n  name: 'thread_name',\n};\n\nconst criticalPathsliceLiteColumnNames = [\n  'id',\n  'utid',\n  'ts',\n  'dur',\n  'thread_name',\n  'process_name',\n  'table_name',\n];\n\nconst sliceLiteColumns = {ts: 'ts', dur: 'dur', name: 'thread_name'};\n\nconst sliceLiteColumnNames = [\n  'id',\n  'utid',\n  'ts',\n  'dur',\n  'thread_name',\n  'process_name',\n  'table_name',\n];\n\nconst sliceColumns = {ts: 'ts', dur: 'dur', name: 'name'};\n\nconst sliceColumnNames = ['id', 'utid', 'ts', 'dur', 'name', 'table_name'];\n\nfunction getFirstUtidOfSelectionOrVisibleWindow(trace: Trace): number {\n  const selection = trace.selection.selection;\n  if (selection.kind === 'area') {\n    for (const trackDesc of selection.tracks) {\n      if (\n        trackDesc?.tags?.kind === THREAD_STATE_TRACK_KIND &&\n        trackDesc?.tags?.utid !== undefined\n      ) {\n        return trackDesc.tags.utid;\n      }\n    }\n  }\n\n  return 0;\n}\n\nfunction showModalErrorAreaSelectionRequired() {\n  showModal({\n    title: 'Error: range selection required',\n    content:\n      'This command requires an area selection over a thread state track.',\n  });\n}\n\nfunction showModalErrorThreadStateRequired() {\n  showModal({\n    title: 'Error: thread state selection required',\n    content: 'This command requires a thread state slice to be selected.',\n  });\n}\n\n// If utid is undefined, returns the utid for the selected thread state track,\n// if any. If it's defined, looks up the info about that specific utid.\nasync function getThreadInfoForUtidOrSelection(\n  trace: Trace,\n  utid?: Utid,\n): Promise<ThreadInfo | undefined> {\n  if (utid === undefined) {\n    const selection = trace.selection.selection;\n    if (selection.kind === 'track_event') {\n      if (selection.utid !== undefined) {\n        utid = asUtid(selection.utid);\n      }\n    }\n  }\n  if (utid === undefined) return undefined;\n  return getThreadInfo(trace.engine, utid);\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.CriticalPath';\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    // The 3 commands below are used in two contextes:\n    // 1. By clicking a slice and using the command palette. In this case the\n    //    utid argument is undefined and we need to look at the selection.\n    // 2. Invoked via runCommand(...) by thread_state_tab.ts when the user\n    //    clicks on the buttons in the details panel. In this case the details\n    //    panel passes the utid explicitly.\n    ctx.commands.registerCommand({\n      id: CRITICAL_PATH_LITE_CMD,\n      name: 'Critical path lite (selected thread state slice)',\n      callback: async (utid?: Utid) => {\n        const thdInfo = await getThreadInfoForUtidOrSelection(ctx, utid);\n        if (thdInfo === undefined) {\n          return showModalErrorThreadStateRequired();\n        }\n        ctx.engine\n          .query(`INCLUDE PERFETTO MODULE sched.thread_executing_span;`)\n          .then(() =>\n            addDebugSliceTrack({\n              trace: ctx,\n              data: {\n                sqlSource: `\n                SELECT\n                  cr.id,\n                  cr.utid,\n                  cr.ts,\n                  cr.dur,\n                  thread.name AS thread_name,\n                  process.name AS process_name,\n                  'thread_state' AS table_name\n                FROM\n                  _thread_executing_span_critical_path(\n                    ${thdInfo.utid},\n                    trace_bounds.start_ts,\n                    trace_bounds.end_ts - trace_bounds.start_ts) cr,\n                  trace_bounds\n                JOIN thread USING(utid)\n                JOIN process USING(upid)\n              `,\n                columns: sliceLiteColumnNames,\n              },\n              title: `${thdInfo.name}`,\n              columns: sliceLiteColumns,\n              argColumns: sliceLiteColumnNames,\n            }),\n          );\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: CRITICAL_PATH_CMD,\n      name: 'Critical path (selected thread state slice)',\n      callback: async (utid?: Utid) => {\n        const thdInfo = await getThreadInfoForUtidOrSelection(ctx, utid);\n        if (thdInfo === undefined) {\n          return showModalErrorThreadStateRequired();\n        }\n        ctx.engine\n          .query(\n            `INCLUDE PERFETTO MODULE sched.thread_executing_span_with_slice;`,\n          )\n          .then(() =>\n            addDebugSliceTrack({\n              trace: ctx,\n              data: {\n                sqlSource: `\n                SELECT cr.id, cr.utid, cr.ts, cr.dur, cr.name, cr.table_name\n                  FROM\n                    _thread_executing_span_critical_path_stack(\n                      ${thdInfo.utid},\n                      trace_bounds.start_ts,\n                      trace_bounds.end_ts - trace_bounds.start_ts) cr,\n                    trace_bounds WHERE name IS NOT NULL\n              `,\n                columns: sliceColumnNames,\n              },\n              title: `${thdInfo.name}`,\n              columns: sliceColumns,\n              argColumns: sliceColumnNames,\n            }),\n          );\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'perfetto.CriticalPathLite_AreaSelection',\n      name: 'Critical path lite (over area selection)',\n      callback: async () => {\n        const trackUtid = getFirstUtidOfSelectionOrVisibleWindow(ctx);\n        const window = await getTimeSpanOfSelectionOrVisibleWindow(ctx);\n        if (trackUtid === 0) {\n          return showModalErrorAreaSelectionRequired();\n        }\n        await ctx.engine.query(\n          `INCLUDE PERFETTO MODULE sched.thread_executing_span;`,\n        );\n        await addDebugSliceTrack({\n          trace: ctx,\n          data: {\n            sqlSource: `\n                SELECT\n                  cr.id,\n                  cr.utid,\n                  cr.ts,\n                  cr.dur,\n                  thread.name AS thread_name,\n                  process.name AS process_name,\n                  'thread_state' AS table_name\n                FROM\n                  _thread_executing_span_critical_path(\n                      ${trackUtid},\n                      ${window.start},\n                      ${window.end} - ${window.start}) cr\n                JOIN thread USING(utid)\n                JOIN process USING(upid)\n                `,\n            columns: criticalPathsliceLiteColumnNames,\n          },\n          title:\n            (await getThreadInfo(ctx.engine, trackUtid as Utid)).name ??\n            '<thread name>',\n          columns: criticalPathsliceLiteColumns,\n          argColumns: criticalPathsliceLiteColumnNames,\n        });\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'perfetto.CriticalPath_AreaSelection',\n      name: 'Critical path  (over area selection)',\n      callback: async () => {\n        const trackUtid = getFirstUtidOfSelectionOrVisibleWindow(ctx);\n        const window = await getTimeSpanOfSelectionOrVisibleWindow(ctx);\n        if (trackUtid === 0) {\n          return showModalErrorAreaSelectionRequired();\n        }\n        await ctx.engine.query(\n          `INCLUDE PERFETTO MODULE sched.thread_executing_span_with_slice;`,\n        );\n        await addDebugSliceTrack({\n          trace: ctx,\n          data: {\n            sqlSource: `\n                SELECT cr.id, cr.utid, cr.ts, cr.dur, cr.name, cr.table_name\n                FROM\n                _critical_path_stack(\n                  ${trackUtid},\n                  ${window.start},\n                  ${window.end} - ${window.start}, 1, 1, 1, 1) cr\n                WHERE name IS NOT NULL\n                `,\n            columns: criticalPathsliceColumnNames,\n          },\n          title:\n            (await getThreadInfo(ctx.engine, trackUtid as Utid)).name ??\n            '<thread name>',\n          columns: criticalPathSliceColumns,\n          argColumns: criticalPathsliceColumnNames,\n        });\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'perfetto.CriticalPathPprof_AreaSelection',\n      name: 'Critical path pprof (over area selection)',\n      callback: async () => {\n        const trackUtid = getFirstUtidOfSelectionOrVisibleWindow(ctx);\n        const window = await getTimeSpanOfSelectionOrVisibleWindow(ctx);\n        if (trackUtid === 0) {\n          return showModalErrorAreaSelectionRequired();\n        }\n        addQueryResultsTab(ctx, {\n          query: `\n              INCLUDE PERFETTO MODULE sched.thread_executing_span_with_slice;\n              SELECT *\n                FROM\n                  _thread_executing_span_critical_path_graph(\n                  \"criical_path\",\n                    ${trackUtid},\n                    ${window.start},\n                    ${window.end} - ${window.start}) cr`,\n          title: 'Critical path',\n        });\n      },\n    });\n  }\n}\n"]}
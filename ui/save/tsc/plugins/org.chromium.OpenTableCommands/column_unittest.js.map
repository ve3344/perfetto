{"version":3,"file":"column_unittest.js","sourceRoot":"","sources":["../../../../src/plugins/org.chromium.OpenTableCommands/column_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {sqlColumnId} from '../../components/widgets/sql/legacy_table/column';\nimport {argSqlColumn} from './well_known_columns';\n\ntest('sql_column_id.basic', () => {\n  // Straightforward case: just a column selection.\n  expect(sqlColumnId('utid')).toBe('utid');\n});\n\ntest('sql_column_id.single_join', () => {\n  expect(\n    sqlColumnId({\n      column: 'bar',\n      source: {\n        table: 'foo',\n        joinOn: {\n          foo_id: 'id',\n        },\n      },\n    }),\n  ).toBe('foo[foo_id=id].bar');\n});\n\ntest('sql_column_id.double_join', () => {\n  expect(\n    sqlColumnId({\n      column: 'abc',\n      source: {\n        table: 'alphabet',\n        joinOn: {\n          abc_id: {\n            column: 'bar',\n            source: {\n              table: 'foo',\n              joinOn: {\n                foo_id: 'id',\n              },\n            },\n          },\n        },\n      },\n    }),\n  ).toBe('alphabet[abc_id=foo[foo_id=id].bar].abc');\n});\n\ntest('sql_column_id.join_on_id', () => {\n  // Special case: joins on `id` should be simplified.\n  expect(\n    sqlColumnId({\n      column: 'name',\n      source: {\n        table: 'foo',\n        joinOn: {\n          id: 'foo_id',\n        },\n      },\n    }),\n  ).toBe('foo[foo_id].name');\n});\n\ntest('sql_column_id.nested_join_on_id', () => {\n  // Special case: joins on `id` should be simplified in nested joins.\n  expect(\n    sqlColumnId({\n      column: 'name',\n      source: {\n        table: 'foo',\n        joinOn: {\n          id: {\n            column: 'foo_id',\n            source: {\n              table: 'bar',\n              joinOn: {\n                x: 'y',\n              },\n            },\n          },\n        },\n      },\n    }),\n  ).toBe('foo[bar[x=y].foo_id].name');\n});\n\ntest('sql_column_id.simplied_join', () => {\n  // Special case: if both sides of the join are the same, only one can be shown.\n  expect(\n    sqlColumnId({\n      column: 'name',\n      source: {\n        table: 'foo',\n        joinOn: {\n          x: 'y',\n          z: 'z',\n        },\n      },\n    }),\n  ).toBe('foo[x=y, z].name');\n});\n\ntest('sql_column_id.arg_set_id', () => {\n  // Special case: arg_set_id.\n  expect(sqlColumnId(argSqlColumn('arg_set_id', 'arg1'))).toBe(\n    \"arg_set_id['arg1']\",\n  );\n});\n\ntest('sql_column_id.arg_set_id_with_join', () => {\n  // Special case: arg_set_id.\n  expect(\n    sqlColumnId(\n      argSqlColumn(\n        {\n          column: 'arg_set_id',\n          source: {\n            table: 'foo',\n            joinOn: {\n              x: 'y',\n            },\n          },\n        },\n        'arg1',\n      ),\n    ),\n  ).toBe(\"foo[x=y].arg_set_id['arg1']\");\n});\n"]}
{"version":3,"file":"metrics_page.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.MetricsPage/metrics_page.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {errResult, Result, okResult} from '../../base/result';\nimport {MetricVisualisation} from '../../public/plugin';\nimport {Engine} from '../../trace_processor/engine';\nimport {STR} from '../../trace_processor/query_result';\nimport {Select} from '../../widgets/select';\nimport {Spinner} from '../../widgets/spinner';\nimport {VegaView} from '../../components/widgets/vega_view';\nimport {PageWithTraceAttrs} from '../../public/page';\nimport {assertExists} from '../../base/logging';\nimport {Trace} from '../../public/trace';\n\ntype Format = 'json' | 'prototext' | 'proto';\nconst FORMATS: Format[] = ['json', 'prototext', 'proto'];\n\nasync function getMetrics(engine: Engine): Promise<string[]> {\n  const metrics: string[] = [];\n  const metricsResult = await engine.query('select name from trace_metrics');\n  for (const it = metricsResult.iter({name: STR}); it.valid(); it.next()) {\n    metrics.push(it.name);\n  }\n  return metrics;\n}\n\nasync function getMetric(\n  engine: Engine,\n  metric: string,\n  format: Format,\n): Promise<string> {\n  const result = await engine.computeMetric([metric], format);\n  if (result instanceof Uint8Array) {\n    return `Uint8Array<len=${result.length}>`;\n  } else {\n    return result;\n  }\n}\n\nclass MetricsController {\n  private readonly trace: Trace;\n  private readonly engine: Engine;\n  private _metrics: string[];\n  private _selected?: string;\n  private _result: Result<string> | 'pending';\n  private _format: Format;\n  private _json: unknown;\n\n  constructor(trace: Trace) {\n    this.trace = trace;\n    this.engine = trace.engine.getProxy('MetricsPage');\n    this._metrics = [];\n    this._result = okResult('');\n    this._json = {};\n    this._format = 'json';\n    getMetrics(this.engine).then((metrics) => {\n      this._metrics = metrics;\n    });\n  }\n\n  get metrics(): string[] {\n    return this._metrics;\n  }\n\n  get visualisations(): MetricVisualisation[] {\n    return this.trace.plugins\n      .metricVisualisations()\n      .filter((v) => v.metric === this.selected);\n  }\n\n  set selected(metric: string | undefined) {\n    if (this._selected === metric) {\n      return;\n    }\n    this._selected = metric;\n    this.update();\n  }\n\n  get selected(): string | undefined {\n    return this._selected;\n  }\n\n  set format(format: Format) {\n    if (this._format === format) {\n      return;\n    }\n    this._format = format;\n    this.update();\n  }\n\n  get format(): Format {\n    return this._format;\n  }\n\n  get result(): Result<string> | 'pending' {\n    return this._result;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get resultAsJson(): any {\n    return this._json;\n  }\n\n  private update() {\n    const selected = this._selected;\n    const format = this._format;\n    if (selected === undefined) {\n      this._result = okResult('');\n      this._json = {};\n    } else {\n      this._result = 'pending';\n      this._json = {};\n      getMetric(this.engine, selected, format)\n        .then((result) => {\n          if (this._selected === selected && this._format === format) {\n            this._result = okResult(result);\n            if (format === 'json') {\n              this._json = JSON.parse(result);\n            }\n          }\n        })\n        .catch((e) => {\n          if (this._selected === selected && this._format === format) {\n            this._result = errResult(e);\n            this._json = {};\n          }\n        })\n        .finally(() => {\n          this.trace.scheduleFullRedraw();\n        });\n    }\n    this.trace.scheduleFullRedraw();\n  }\n}\n\ninterface MetricResultAttrs {\n  result: Result<string> | 'pending';\n}\n\nclass MetricResultView implements m.ClassComponent<MetricResultAttrs> {\n  view({attrs}: m.CVnode<MetricResultAttrs>) {\n    const result = attrs.result;\n    if (result === 'pending') {\n      return m(Spinner);\n    }\n\n    if (!result.ok) {\n      return m('pre.metric-error', result.error);\n    }\n\n    return m('pre', result.value);\n  }\n}\n\ninterface MetricPickerAttrs {\n  controller: MetricsController;\n}\n\nclass MetricPicker implements m.ClassComponent<MetricPickerAttrs> {\n  view({attrs}: m.CVnode<MetricPickerAttrs>) {\n    const {controller} = attrs;\n    return m(\n      '.metrics-page-picker',\n      m(\n        Select,\n        {\n          value: controller.selected,\n          oninput: (e: Event) => {\n            if (!e.target) return;\n            controller.selected = (e.target as HTMLSelectElement).value;\n          },\n        },\n        controller.metrics.map((metric) =>\n          m(\n            'option',\n            {\n              value: metric,\n              key: metric,\n            },\n            metric,\n          ),\n        ),\n      ),\n      m(\n        Select,\n        {\n          oninput: (e: Event) => {\n            if (!e.target) return;\n            controller.format = (e.target as HTMLSelectElement).value as Format;\n          },\n        },\n        FORMATS.map((f) => {\n          return m('option', {\n            selected: controller.format === f,\n            key: f,\n            value: f,\n            label: f,\n          });\n        }),\n      ),\n    );\n  }\n}\n\ninterface MetricVizViewAttrs {\n  visualisation: MetricVisualisation;\n  data: unknown;\n}\n\nclass MetricVizView implements m.ClassComponent<MetricVizViewAttrs> {\n  view({attrs}: m.CVnode<MetricVizViewAttrs>) {\n    return m(\n      '',\n      m(VegaView, {\n        spec: attrs.visualisation.spec,\n        data: {\n          metric: attrs.data,\n        },\n      }),\n    );\n  }\n}\n\nexport class MetricsPage implements m.ClassComponent<PageWithTraceAttrs> {\n  private controller?: MetricsController;\n\n  oninit({attrs}: m.Vnode<PageWithTraceAttrs>) {\n    this.controller = new MetricsController(attrs.trace);\n  }\n\n  view() {\n    const controller = assertExists(this.controller);\n    const json = controller.resultAsJson;\n    return m(\n      '.metrics-page',\n      m(MetricPicker, {\n        controller,\n      }),\n      controller.format === 'json' &&\n        controller.visualisations.map((visualisation) => {\n          let data = json;\n          for (const p of visualisation.path) {\n            data = data[p] ?? [];\n          }\n          return m(MetricVizView, {visualisation, data});\n        }),\n      m(MetricResultView, {result: controller.result}),\n    );\n  }\n}\n"]}
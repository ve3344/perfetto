{"version":3,"file":"adb.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/adb.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertExists} from '../../base/logging';\nimport {isString} from '../../base/object_utils';\nimport {utf8Decode, utf8Encode} from '../../base/string_utils';\nimport {Adb, AdbMsg, AdbStream, CmdType} from './adb_interfaces';\n\nexport const VERSION_WITH_CHECKSUM = 0x01000000;\nexport const VERSION_NO_CHECKSUM = 0x01000001;\nexport const DEFAULT_MAX_PAYLOAD_BYTES = 256 * 1024;\n\nexport enum AdbState {\n  DISCONNECTED = 0,\n  // Authentication steps, see AdbOverWebUsb's handleAuthentication().\n  AUTH_STEP1 = 1,\n  AUTH_STEP2 = 2,\n  AUTH_STEP3 = 3,\n\n  CONNECTED = 2,\n}\n\nenum AuthCmd {\n  TOKEN = 1,\n  SIGNATURE = 2,\n  RSAPUBLICKEY = 3,\n}\n\nconst DEVICE_NOT_SET_ERROR = 'Device not set.';\n\n// This class is a basic TypeScript implementation of adb that only supports\n// shell commands. It is used to send the start tracing command to the connected\n// android device, and to automatically pull the trace after the end of the\n// recording. It works through the webUSB API. A brief description of how it\n// works is the following:\n// - The connection with the device is initiated by findAndConnect, which shows\n//   a dialog with a list of connected devices. Once one is selected the\n//   authentication begins. The authentication has to pass different steps, as\n//   described in the \"handeAuthentication\" method.\n// - AdbOverWebUsb tracks the state of the authentication via a state machine\n//   (see AdbState).\n// - A Message handler loop is executed to keep receiving the messages.\n// - All the messages received from the device are passed to \"onMessage\" that is\n//   implemented as a state machine.\n// - When a new shell is established, it becomes an AdbStream, and is kept in\n//   the \"streams\" map. Each time a message from the device is for a specific\n//   previously opened stream, the \"onMessage\" function will forward it to the\n//   stream (identified by a number).\nexport class AdbOverWebUsb implements Adb {\n  state: AdbState = AdbState.DISCONNECTED;\n  streams = new Map<number, AdbStream>();\n  devProps = '';\n  maxPayload = DEFAULT_MAX_PAYLOAD_BYTES;\n  key?: CryptoKeyPair;\n  onConnected = () => {};\n\n  // Devices after Dec 2017 don't use checksum. This will be auto-detected\n  // during the connection.\n  useChecksum = true;\n\n  private lastStreamId = 0;\n  private dev?: USBDevice;\n  private usbInterfaceNumber?: number;\n  private usbReadEndpoint = -1;\n  private usbWriteEpEndpoint = -1;\n  private filter = {\n    classCode: 255, // USB vendor specific code\n    subclassCode: 66, // Android vendor specific subclass\n    protocolCode: 1, // Adb protocol\n  };\n\n  async findDevice() {\n    if (!('usb' in navigator)) {\n      throw new Error('WebUSB not supported by the browser (requires HTTPS)');\n    }\n    return navigator.usb.requestDevice({filters: [this.filter]});\n  }\n\n  async getPairedDevices() {\n    try {\n      return await navigator.usb.getDevices();\n    } catch (e) {\n      // WebUSB not available.\n      return Promise.resolve([]);\n    }\n  }\n\n  async connect(device: USBDevice): Promise<void> {\n    // If we are already connected, we are also already authenticated, so we can\n    // skip doing the authentication again.\n    if (this.state === AdbState.CONNECTED) {\n      if (this.dev === device && device.opened) {\n        this.onConnected();\n        this.onConnected = () => {};\n        return;\n      }\n      // Another device was connected.\n      await this.disconnect();\n    }\n\n    this.dev = device;\n    this.useChecksum = true;\n    this.key = await AdbOverWebUsb.initKey();\n\n    await this.dev.open();\n\n    const {configValue, usbInterfaceNumber, endpoints} =\n      this.findInterfaceAndEndpoint();\n    this.usbInterfaceNumber = usbInterfaceNumber;\n\n    this.usbReadEndpoint = this.findEndpointNumber(endpoints, 'in');\n    this.usbWriteEpEndpoint = this.findEndpointNumber(endpoints, 'out');\n\n    console.assert(this.usbReadEndpoint >= 0 && this.usbWriteEpEndpoint >= 0);\n\n    await this.dev.selectConfiguration(configValue);\n    await this.dev.claimInterface(usbInterfaceNumber);\n\n    await this.startAuthentication();\n\n    // This will start a message handler loop.\n    this.receiveDeviceMessages();\n    // The promise will be resolved after the handshake.\n    return new Promise<void>((resolve, _) => (this.onConnected = resolve));\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.state === AdbState.DISCONNECTED) {\n      return;\n    }\n    this.state = AdbState.DISCONNECTED;\n\n    if (!this.dev) return;\n\n    new Map(this.streams).forEach((stream, _id) => stream.setClosed());\n    console.assert(this.streams.size === 0);\n\n    await this.dev.releaseInterface(assertExists(this.usbInterfaceNumber));\n    this.dev = undefined;\n    this.usbInterfaceNumber = undefined;\n  }\n\n  async startAuthentication() {\n    // USB connected, now let's authenticate.\n    const VERSION = this.useChecksum\n      ? VERSION_WITH_CHECKSUM\n      : VERSION_NO_CHECKSUM;\n    this.state = AdbState.AUTH_STEP1;\n    await this.send('CNXN', VERSION, this.maxPayload, 'host:1:UsbADB');\n  }\n\n  findInterfaceAndEndpoint() {\n    if (!this.dev) throw Error(DEVICE_NOT_SET_ERROR);\n    for (const config of this.dev.configurations) {\n      for (const interface_ of config.interfaces) {\n        for (const alt of interface_.alternates) {\n          if (\n            alt.interfaceClass === this.filter.classCode &&\n            alt.interfaceSubclass === this.filter.subclassCode &&\n            alt.interfaceProtocol === this.filter.protocolCode\n          ) {\n            return {\n              configValue: config.configurationValue,\n              usbInterfaceNumber: interface_.interfaceNumber,\n              endpoints: alt.endpoints,\n            };\n          } // if (alternate)\n        } // for (interface.alternates)\n      } // for (configuration.interfaces)\n    } // for (configurations)\n\n    throw Error('Cannot find interfaces and endpoints');\n  }\n\n  findEndpointNumber(\n    endpoints: USBEndpoint[],\n    direction: 'out' | 'in',\n    type = 'bulk',\n  ): number {\n    const ep = endpoints.find(\n      (ep) => ep.type === type && ep.direction === direction,\n    );\n\n    if (ep) return ep.endpointNumber;\n\n    throw Error(`Cannot find ${direction} endpoint`);\n  }\n\n  receiveDeviceMessages() {\n    this.recv()\n      .then((msg) => {\n        this.onMessage(msg);\n        this.receiveDeviceMessages();\n      })\n      .catch((e) => {\n        // Ignore error with \"DEVICE_NOT_SET_ERROR\" message since it is always\n        // thrown after the device disconnects.\n        if (e.message !== DEVICE_NOT_SET_ERROR) {\n          console.error(`Exception in recv: ${e.name}. error: ${e.message}`);\n        }\n        this.disconnect();\n      });\n  }\n\n  async onMessage(msg: AdbMsg) {\n    if (!this.key) throw Error('ADB key not initialized');\n\n    if (msg.cmd === 'AUTH' && msg.arg0 === AuthCmd.TOKEN) {\n      this.handleAuthentication(msg);\n    } else if (msg.cmd === 'CNXN') {\n      console.assert(\n        [AdbState.AUTH_STEP2, AdbState.AUTH_STEP3].includes(this.state),\n      );\n      this.state = AdbState.CONNECTED;\n      this.handleConnectedMessage(msg);\n    } else if (\n      this.state === AdbState.CONNECTED &&\n      ['OKAY', 'WRTE', 'CLSE'].indexOf(msg.cmd) >= 0\n    ) {\n      const stream = this.streams.get(msg.arg1);\n      if (!stream) {\n        console.warn(`Received message ${msg} for unknown stream ${msg.arg1}`);\n        return;\n      }\n      stream.onMessage(msg);\n    } else {\n      console.error(`Unexpected message `, msg, ` in state ${this.state}`);\n    }\n  }\n\n  async handleAuthentication(msg: AdbMsg) {\n    if (!this.key) throw Error('ADB key not initialized');\n\n    console.assert(msg.cmd === 'AUTH' && msg.arg0 === AuthCmd.TOKEN);\n    const token = msg.data;\n\n    if (this.state === AdbState.AUTH_STEP1) {\n      // During this step, we send back the token received signed with our\n      // private key. If the device has previously received our public key, the\n      // dialog will not be displayed. Otherwise we will receive another message\n      // ending up in AUTH_STEP3.\n      this.state = AdbState.AUTH_STEP2;\n\n      const signedToken = await signAdbTokenWithPrivateKey(\n        this.key.privateKey,\n        token,\n      );\n      this.send('AUTH', AuthCmd.SIGNATURE, 0, new Uint8Array(signedToken));\n      return;\n    }\n\n    console.assert(this.state === AdbState.AUTH_STEP2);\n\n    // During this step, we send our public key. The dialog will appear, and\n    // if the user chooses to remember our public key, it will be\n    // saved, so that the next time we will only pass through AUTH_STEP1.\n    this.state = AdbState.AUTH_STEP3;\n    const encodedPubKey = await encodePubKey(this.key.publicKey);\n    this.send('AUTH', AuthCmd.RSAPUBLICKEY, 0, encodedPubKey);\n  }\n\n  private handleConnectedMessage(msg: AdbMsg) {\n    console.assert(msg.cmd === 'CNXN');\n\n    this.maxPayload = msg.arg1;\n    this.devProps = utf8Decode(msg.data);\n\n    const deviceVersion = msg.arg0;\n\n    if (![VERSION_WITH_CHECKSUM, VERSION_NO_CHECKSUM].includes(deviceVersion)) {\n      console.error('Version ', msg.arg0, ' not really supported!');\n    }\n    this.useChecksum = deviceVersion === VERSION_WITH_CHECKSUM;\n    this.state = AdbState.CONNECTED;\n\n    // This will resolve the promise returned by \"onConnect\"\n    this.onConnected();\n    this.onConnected = () => {};\n  }\n\n  shell(cmd: string): Promise<AdbStream> {\n    return this.openStream('shell:' + cmd);\n  }\n\n  socket(path: string): Promise<AdbStream> {\n    return this.openStream('localfilesystem:' + path);\n  }\n\n  openStream(svc: string): Promise<AdbStream> {\n    const stream = new AdbStreamImpl(this, ++this.lastStreamId);\n    this.streams.set(stream.localStreamId, stream);\n    this.send('OPEN', stream.localStreamId, 0, svc);\n\n    //  The stream will resolve this promise once it receives the\n    //  acknowledgement message from the device.\n    return new Promise<AdbStream>((resolve, reject) => {\n      stream.onConnect = () => {\n        stream.onClose = () => {};\n        resolve(stream);\n      };\n      stream.onClose = () =>\n        reject(new Error(`Failed to openStream svc=${svc}`));\n    });\n  }\n\n  async shellOutputAsString(cmd: string): Promise<string> {\n    const shell = await this.shell(cmd);\n\n    return new Promise<string>((resolve, _) => {\n      const output: string[] = [];\n      shell.onData = (raw) => output.push(utf8Decode(raw));\n      shell.onClose = () => resolve(output.join());\n    });\n  }\n\n  async send(\n    cmd: CmdType,\n    arg0: number,\n    arg1: number,\n    data?: Uint8Array | string,\n  ) {\n    await this.sendMsg(\n      AdbMsgImpl.create({cmd, arg0, arg1, data, useChecksum: this.useChecksum}),\n    );\n  }\n\n  //  The header and the message data must be sent consecutively. Using 2 awaits\n  //  Another message can interleave after the first header has been sent,\n  //  resulting in something like [header1] [header2] [data1] [data2];\n  //  In this way we are waiting both promises to be resolved before continuing.\n  async sendMsg(msg: AdbMsgImpl) {\n    const sendPromises = [this.sendRaw(msg.encodeHeader())];\n    if (msg.data.length > 0) sendPromises.push(this.sendRaw(msg.data));\n    await Promise.all(sendPromises);\n  }\n\n  async recv(): Promise<AdbMsg> {\n    const res = await this.recvRaw(ADB_MSG_SIZE);\n    console.assert(res.status === 'ok');\n    const msg = AdbMsgImpl.decodeHeader(res.data!);\n\n    if (msg.dataLen > 0) {\n      const resp = await this.recvRaw(msg.dataLen);\n      msg.data = new Uint8Array(\n        resp.data!.buffer,\n        resp.data!.byteOffset,\n        resp.data!.byteLength,\n      );\n    }\n    if (this.useChecksum) {\n      console.assert(AdbOverWebUsb.checksum(msg.data) === msg.dataChecksum);\n    }\n    return msg;\n  }\n\n  static async initKey(): Promise<CryptoKeyPair> {\n    const KEY_SIZE = 2048;\n\n    const keySpec = {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: KEY_SIZE,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: {name: 'SHA-1'},\n    };\n\n    const key = await crypto.subtle.generateKey(\n      keySpec,\n      /* extractable=*/ true,\n      ['sign', 'verify'],\n    );\n    return key;\n  }\n\n  static checksum(data: Uint8Array): number {\n    let res = 0;\n    for (let i = 0; i < data.byteLength; i++) res += data[i];\n    return res & 0xffffffff;\n  }\n\n  sendRaw(buf: Uint8Array): Promise<USBOutTransferResult> {\n    console.assert(buf.length <= this.maxPayload);\n    if (!this.dev) throw Error(DEVICE_NOT_SET_ERROR);\n    return this.dev.transferOut(this.usbWriteEpEndpoint, buf.buffer);\n  }\n\n  recvRaw(dataLen: number): Promise<USBInTransferResult> {\n    if (!this.dev) throw Error(DEVICE_NOT_SET_ERROR);\n    return this.dev.transferIn(this.usbReadEndpoint, dataLen);\n  }\n}\n\nenum AdbStreamState {\n  WAITING_INITIAL_OKAY = 0,\n  CONNECTED = 1,\n  CLOSED = 2,\n}\n\n// An AdbStream is instantiated after the creation of a shell to the device.\n// Thanks to this, we can send commands and receive their output. Messages are\n// received in the main adb class, and are forwarded to an instance of this\n// class based on a stream id match. Also streams have an initialization flow:\n//   1. WAITING_INITIAL_OKAY: waiting for first \"OKAY\" message. Once received,\n//      the next state will be \"CONNECTED\".\n//   2. CONNECTED: ready to receive or send messages.\n//   3. WRITING: this is needed because we must receive an ack after sending\n//      each message (so, before sending the next one). For this reason, many\n//      subsequent \"write\" calls will result in different messages in the\n//      writeQueue. After each new acknowledgement ('OKAY') a new one will be\n//      sent. When the queue is empty, the state will return to CONNECTED.\n//   4. CLOSED: entered when the device closes the stream or close() is called.\n//      For shell commands, the stream is closed after the command completed.\nexport class AdbStreamImpl implements AdbStream {\n  private adb: AdbOverWebUsb;\n  localStreamId: number;\n  private remoteStreamId = -1;\n  private state: AdbStreamState = AdbStreamState.WAITING_INITIAL_OKAY;\n  private writeQueue: Uint8Array[] = [];\n  private sendInProgress = false;\n\n  onData: AdbStreamReadCallback = (_) => {};\n  onConnect = () => {};\n  onClose = () => {};\n\n  constructor(adb: AdbOverWebUsb, localStreamId: number) {\n    this.adb = adb;\n    this.localStreamId = localStreamId;\n  }\n\n  close() {\n    console.assert(this.state === AdbStreamState.CONNECTED);\n\n    if (this.writeQueue.length > 0) {\n      console.error(\n        `Dropping ${this.writeQueue.length} queued messages due to stream closing.`,\n      );\n      this.writeQueue = [];\n    }\n\n    this.adb.send('CLSE', this.localStreamId, this.remoteStreamId);\n  }\n\n  async write(msg: string | Uint8Array) {\n    const raw = isString(msg) ? utf8Encode(msg) : msg;\n    if (\n      this.sendInProgress ||\n      this.state === AdbStreamState.WAITING_INITIAL_OKAY\n    ) {\n      this.writeQueue.push(raw);\n      return;\n    }\n    console.assert(this.state === AdbStreamState.CONNECTED);\n    this.sendInProgress = true;\n    await this.adb.send('WRTE', this.localStreamId, this.remoteStreamId, raw);\n  }\n\n  setClosed() {\n    this.state = AdbStreamState.CLOSED;\n    this.adb.streams.delete(this.localStreamId);\n    this.onClose();\n  }\n\n  onMessage(msg: AdbMsgImpl) {\n    console.assert(msg.arg1 === this.localStreamId);\n\n    if (\n      this.state === AdbStreamState.WAITING_INITIAL_OKAY &&\n      msg.cmd === 'OKAY'\n    ) {\n      this.remoteStreamId = msg.arg0;\n      this.state = AdbStreamState.CONNECTED;\n      this.onConnect();\n      return;\n    }\n\n    if (msg.cmd === 'WRTE') {\n      this.adb.send('OKAY', this.localStreamId, this.remoteStreamId);\n      this.onData(msg.data);\n      return;\n    }\n\n    if (msg.cmd === 'OKAY') {\n      console.assert(this.sendInProgress);\n      this.sendInProgress = false;\n      const queuedMsg = this.writeQueue.shift();\n      if (queuedMsg !== undefined) this.write(queuedMsg);\n      return;\n    }\n\n    if (msg.cmd === 'CLSE') {\n      this.setClosed();\n      return;\n    }\n    console.error(\n      `Unexpected stream msg ${msg.toString()} in state ${this.state}`,\n    );\n  }\n}\n\ninterface AdbStreamReadCallback {\n  (raw: Uint8Array): void;\n}\n\nconst ADB_MSG_SIZE = 6 * 4; // 6 * int32.\n\nexport class AdbMsgImpl implements AdbMsg {\n  cmd: CmdType;\n  arg0: number;\n  arg1: number;\n  data: Uint8Array;\n  dataLen: number;\n  dataChecksum: number;\n\n  useChecksum: boolean;\n\n  constructor(\n    cmd: CmdType,\n    arg0: number,\n    arg1: number,\n    dataLen: number,\n    dataChecksum: number,\n    useChecksum = false,\n  ) {\n    console.assert(cmd.length === 4);\n    this.cmd = cmd;\n    this.arg0 = arg0;\n    this.arg1 = arg1;\n    this.dataLen = dataLen;\n    this.data = new Uint8Array(dataLen);\n    this.dataChecksum = dataChecksum;\n    this.useChecksum = useChecksum;\n  }\n\n  static create({\n    cmd,\n    arg0,\n    arg1,\n    data,\n    useChecksum = true,\n  }: {\n    cmd: CmdType;\n    arg0: number;\n    arg1: number;\n    data?: Uint8Array | string;\n    useChecksum?: boolean;\n  }): AdbMsgImpl {\n    const encodedData = this.encodeData(data);\n    const msg = new AdbMsgImpl(\n      cmd,\n      arg0,\n      arg1,\n      encodedData.length,\n      0,\n      useChecksum,\n    );\n    msg.data = encodedData;\n    return msg;\n  }\n\n  get dataStr() {\n    return utf8Decode(this.data);\n  }\n\n  toString() {\n    return `${this.cmd} [${this.arg0},${this.arg1}] ${this.dataStr}`;\n  }\n\n  // A brief description of the message can be found here:\n  // https://android.googlesource.com/platform/system/core/+/main/adb/protocol.txt\n  //\n  // struct amessage {\n  //     uint32_t command;    // command identifier constant\n  //     uint32_t arg0;       // first argument\n  //     uint32_t arg1;       // second argument\n  //     uint32_t data_length;// length of payload (0 is allowed)\n  //     uint32_t data_check; // checksum of data payload\n  //     uint32_t magic;      // command ^ 0xffffffff\n  // };\n  static decodeHeader(dv: DataView): AdbMsgImpl {\n    console.assert(dv.byteLength === ADB_MSG_SIZE);\n    const cmd = utf8Decode(dv.buffer.slice(0, 4)) as CmdType;\n    const cmdNum = dv.getUint32(0, true);\n    const arg0 = dv.getUint32(4, true);\n    const arg1 = dv.getUint32(8, true);\n    const dataLen = dv.getUint32(12, true);\n    const dataChecksum = dv.getUint32(16, true);\n    const cmdChecksum = dv.getUint32(20, true);\n    console.assert(cmdNum === (cmdChecksum ^ 0xffffffff));\n    return new AdbMsgImpl(cmd, arg0, arg1, dataLen, dataChecksum);\n  }\n\n  encodeHeader(): Uint8Array {\n    const buf = new Uint8Array(ADB_MSG_SIZE);\n    const dv = new DataView(buf.buffer);\n    const cmdBytes: Uint8Array = utf8Encode(this.cmd);\n    const rawMsg = AdbMsgImpl.encodeData(this.data);\n    const checksum = this.useChecksum ? AdbOverWebUsb.checksum(rawMsg) : 0;\n    for (let i = 0; i < 4; i++) dv.setUint8(i, cmdBytes[i]);\n\n    dv.setUint32(4, this.arg0, true);\n    dv.setUint32(8, this.arg1, true);\n    dv.setUint32(12, rawMsg.byteLength, true);\n    dv.setUint32(16, checksum, true);\n    dv.setUint32(20, dv.getUint32(0, true) ^ 0xffffffff, true);\n\n    return buf;\n  }\n\n  static encodeData(data?: Uint8Array | string): Uint8Array {\n    if (data === undefined) return new Uint8Array([]);\n    if (isString(data)) return utf8Encode(data + '\\0');\n    return data;\n  }\n}\n\nfunction base64StringToArray(s: string) {\n  const decoded = atob(s.replaceAll('-', '+').replaceAll('_', '/'));\n  return [...decoded].map((char) => char.charCodeAt(0));\n}\n\nconst ANDROID_PUBKEY_MODULUS_SIZE = 2048;\nconst MODULUS_SIZE_BYTES = ANDROID_PUBKEY_MODULUS_SIZE / 8;\n\n// RSA Public keys are encoded in a rather unique way. It's a base64 encoded\n// struct of 524 bytes in total as follows (see\n// libcrypto_utils/android_pubkey.c):\n//\n// typedef struct RSAPublicKey {\n//   // Modulus length. This must be ANDROID_PUBKEY_MODULUS_SIZE.\n//   uint32_t modulus_size_words;\n//\n//   // Precomputed montgomery parameter: -1 / n[0] mod 2^32\n//   uint32_t n0inv;\n//\n//   // RSA modulus as a little-endian array.\n//   uint8_t modulus[ANDROID_PUBKEY_MODULUS_SIZE];\n//\n//   // Montgomery parameter R^2 as a little-endian array of little-endian\n//   words. uint8_t rr[ANDROID_PUBKEY_MODULUS_SIZE];\n//\n//   // RSA modulus: 3 or 65537\n//   uint32_t exponent;\n// } RSAPublicKey;\n//\n// However, the Montgomery params (n0inv and rr) are not really used, see\n// comment in android_pubkey_decode() (\"Note that we don't extract the\n// montgomery parameters...\")\nasync function encodePubKey(key: CryptoKey) {\n  const expPubKey = await crypto.subtle.exportKey('jwk', key);\n  const nArr = base64StringToArray(expPubKey.n as string).reverse();\n  const eArr = base64StringToArray(expPubKey.e as string).reverse();\n\n  const arr = new Uint8Array(3 * 4 + 2 * MODULUS_SIZE_BYTES);\n  const dv = new DataView(arr.buffer);\n  dv.setUint32(0, MODULUS_SIZE_BYTES / 4, true);\n\n  // The Mongomery params (n0inv and rr) are not computed.\n  dv.setUint32(4, 0 /* n0inv*/, true);\n  // Modulus\n  for (let i = 0; i < MODULUS_SIZE_BYTES; i++) dv.setUint8(8 + i, nArr[i]);\n\n  // rr:\n  for (let i = 0; i < MODULUS_SIZE_BYTES; i++) {\n    dv.setUint8(8 + MODULUS_SIZE_BYTES + i, 0 /* rr*/);\n  }\n  // Exponent\n  for (let i = 0; i < 4; i++) {\n    dv.setUint8(8 + 2 * MODULUS_SIZE_BYTES + i, eArr[i]);\n  }\n  return (\n    btoa(String.fromCharCode(...new Uint8Array(dv.buffer))) + ' perfetto@webusb'\n  );\n}\n\n// TODO(nicomazz): This token signature will be useful only when we save the\n// generated keys. So far, we are not doing so. As a consequence, a dialog is\n// displayed every time a tracing session is started.\n// The reason why it has not already been implemented is that the standard\n// crypto.subtle.sign function assumes that the input needs hashing, which is\n// not the case for ADB, where the 20 bytes token is already hashed.\n// A solution to this is implementing a custom private key signature with a js\n// implementation of big integers. Maybe, wrapping the key like in the following\n// CL can work:\n// https://android-review.googlesource.com/c/platform/external/perfetto/+/1105354/18\nasync function signAdbTokenWithPrivateKey(\n  _privateKey: CryptoKey,\n  token: Uint8Array,\n): Promise<ArrayBuffer> {\n  // This function is not implemented.\n  return token.buffer;\n}\n"]}
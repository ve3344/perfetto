{"version":3,"file":"record_controller.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/record_controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Message, Method, rpc, RPCImplCallback} from 'protobufjs';\nimport {isString} from '../../base/object_utils';\nimport {base64Encode} from '../../base/string_utils';\nimport {TRACE_SUFFIX} from '../../public/trace';\nimport {genTraceConfig} from './recordingV2/recording_config_utils';\nimport {TargetInfo} from './recordingV2/recording_interfaces_v2';\nimport {\n  AdbRecordingTarget,\n  isAdbTarget,\n  isChromeTarget,\n  isWindowsTarget,\n  RecordingTarget,\n} from './state';\nimport {ConsumerPort, TraceConfig} from './protos';\nimport {AdbOverWebUsb} from './adb';\nimport {AdbConsumerPort} from './adb_shell_controller';\nimport {AdbSocketConsumerPort} from './adb_socket_controller';\nimport {ChromeExtensionConsumerPort} from './chrome_proxy_record_controller';\nimport {\n  ConsumerPortResponse,\n  GetTraceStatsResponse,\n  isDisableTracingResponse,\n  isEnableTracingResponse,\n  isFreeBuffersResponse,\n  isGetTraceStatsResponse,\n  isReadBuffersResponse,\n} from './consumer_port_types';\nimport {RecordConfig} from './record_config_types';\nimport {Consumer, RpcConsumerPort} from './record_controller_interfaces';\nimport {RecordingManager} from './recording_manager';\nimport {scheduleFullRedraw} from '../../widgets/raf';\nimport {App} from '../../public/app';\n\ntype RPCImplMethod = Method | rpc.ServiceMethod<Message<{}>, Message<{}>>;\n\nexport function genConfigProto(\n  uiCfg: RecordConfig,\n  target: RecordingTarget,\n): Uint8Array {\n  return TraceConfig.encode(convertToRecordingV2Input(uiCfg, target)).finish();\n}\n\n// This method converts the 'RecordingTarget' to the 'TargetInfo' used by V2 of\n// the recording code. It is used so the logic is not duplicated and does not\n// diverge.\n// TODO(octaviant) delete this once we switch to RecordingV2.\nfunction convertToRecordingV2Input(\n  uiCfg: RecordConfig,\n  target: RecordingTarget,\n): TraceConfig {\n  let targetType: 'ANDROID' | 'CHROME' | 'CHROME_OS' | 'LINUX' | 'WINDOWS';\n  let androidApiLevel!: number;\n  switch (target.os) {\n    case 'L':\n      targetType = 'LINUX';\n      break;\n    case 'C':\n      targetType = 'CHROME';\n      break;\n    case 'CrOS':\n      targetType = 'CHROME_OS';\n      break;\n    case 'Win':\n      targetType = 'WINDOWS';\n      break;\n    case 'S':\n      androidApiLevel = 31;\n      targetType = 'ANDROID';\n      break;\n    case 'R':\n      androidApiLevel = 30;\n      targetType = 'ANDROID';\n      break;\n    case 'Q':\n      androidApiLevel = 29;\n      targetType = 'ANDROID';\n      break;\n    case 'P':\n      androidApiLevel = 28;\n      targetType = 'ANDROID';\n      break;\n    default:\n      androidApiLevel = 26;\n      targetType = 'ANDROID';\n  }\n\n  let targetInfo: TargetInfo;\n  if (targetType === 'ANDROID') {\n    targetInfo = {\n      targetType,\n      androidApiLevel,\n      dataSources: [],\n      name: '',\n    };\n  } else {\n    targetInfo = {\n      targetType,\n      dataSources: [],\n      name: '',\n    };\n  }\n\n  return genTraceConfig(uiCfg, targetInfo);\n}\n\nexport function toPbtxt(configBuffer: Uint8Array): string {\n  const msg = TraceConfig.decode(configBuffer);\n  const json = msg.toJSON();\n  function snakeCase(s: string): string {\n    return s.replace(/[A-Z]/g, (c) => '_' + c.toLowerCase());\n  }\n  // With the ahead of time compiled protos we can't seem to tell which\n  // fields are enums.\n  function isEnum(value: string): boolean {\n    return (\n      value.startsWith('MEMINFO_') ||\n      value.startsWith('VMSTAT_') ||\n      value.startsWith('STAT_') ||\n      value.startsWith('LID_') ||\n      value.startsWith('BATTERY_COUNTER_') ||\n      value.startsWith('ATOM_') ||\n      value === 'DISCARD' ||\n      value === 'RING_BUFFER' ||\n      value === 'BACKGROUND' ||\n      value === 'USER_INITIATED' ||\n      value.startsWith('PERF_CLOCK_')\n    );\n  }\n  // Since javascript doesn't have 64 bit numbers when converting protos to\n  // json the proto library encodes them as strings. This is lossy since\n  // we can't tell which strings that look like numbers are actually strings\n  // and which are actually numbers. Ideally we would reflect on the proto\n  // definition somehow but for now we just hard code keys which have this\n  // problem in the config.\n  function is64BitNumber(key: string): boolean {\n    return [\n      'maxFileSizeBytes',\n      'pid',\n      'samplingIntervalBytes',\n      'shmemSizeBytes',\n      'timestampUnitMultiplier',\n      'frequency',\n    ].includes(key);\n  }\n  function* message(msg: {}, indent: number): IterableIterator<string> {\n    for (const [key, value] of Object.entries(msg)) {\n      const isRepeated = Array.isArray(value);\n      const isNested = typeof value === 'object' && !isRepeated;\n      for (const entry of isRepeated ? (value as Array<{}>) : [value]) {\n        yield ' '.repeat(indent) + `${snakeCase(key)}${isNested ? '' : ':'} `;\n        if (isString(entry)) {\n          if (isEnum(entry) || is64BitNumber(key)) {\n            yield entry;\n          } else {\n            yield `\"${entry.replace(new RegExp('\"', 'g'), '\\\\\"')}\"`;\n          }\n        } else if (typeof entry === 'number') {\n          yield entry.toString();\n        } else if (typeof entry === 'boolean') {\n          yield entry.toString();\n        } else if (typeof entry === 'object' && entry !== null) {\n          yield '{\\n';\n          yield* message(entry, indent + 4);\n          yield ' '.repeat(indent) + '}';\n        } else {\n          throw new Error(\n            `Record proto entry \"${entry}\" with unexpected type ${typeof entry}`,\n          );\n        }\n        yield '\\n';\n      }\n    }\n  }\n  return [...message(json, 0)].join('');\n}\n\nexport class RecordController implements Consumer {\n  private app: App;\n  private recMgr: RecordingManager;\n  private config: RecordConfig | null = null;\n  private readonly extensionPort: MessagePort;\n  private recordingInProgress = false;\n  private consumerPort: ConsumerPort;\n  private traceBuffer: Uint8Array[] = [];\n  private bufferUpdateInterval: ReturnType<typeof setTimeout> | undefined;\n  private adb = new AdbOverWebUsb();\n  private recordedTraceSuffix = TRACE_SUFFIX;\n  private fetchedCategories = false;\n\n  // We have a different controller for each targetOS. The correct one will be\n  // created when needed, and stored here. When the key is a string, it is the\n  // serial of the target (used for android devices). When the key is a single\n  // char, it is the 'targetOS'\n  private controllerPromises = new Map<string, Promise<RpcConsumerPort>>();\n\n  constructor(app: App, recMgr: RecordingManager, extensionPort: MessagePort) {\n    this.app = app;\n    this.recMgr = recMgr;\n    this.consumerPort = ConsumerPort.create(this.rpcImpl.bind(this));\n    this.extensionPort = extensionPort;\n  }\n\n  private get state() {\n    return this.recMgr.state;\n  }\n\n  refreshOnStateChange() {\n    // TODO(eseckler): Use ConsumerPort's QueryServiceState instead\n    // of posting a custom extension message to retrieve the category list.\n    scheduleFullRedraw();\n    if (this.state.fetchChromeCategories && !this.fetchedCategories) {\n      this.fetchedCategories = true;\n      if (this.state.extensionInstalled) {\n        this.extensionPort.postMessage({method: 'GetCategories'});\n      }\n      this.recMgr.setFetchChromeCategories(false);\n    }\n\n    this.config = this.state.recordConfig;\n\n    const configProto = genConfigProto(this.config, this.state.recordingTarget);\n    const configProtoText = toPbtxt(configProto);\n    const configProtoBase64 = base64Encode(configProto);\n    const commandline = `\n      echo '${configProtoBase64}' |\n      base64 --decode |\n      adb shell \"perfetto -c - -o /data/misc/perfetto-traces/trace\" &&\n      adb pull /data/misc/perfetto-traces/trace /tmp/trace\n    `;\n    const traceConfig = convertToRecordingV2Input(\n      this.config,\n      this.state.recordingTarget,\n    );\n    this.state.recordCmd = {\n      commandline,\n      pbBase64: configProtoBase64,\n      pbtxt: configProtoText,\n    };\n\n    // If the recordingInProgress boolean state is different, it means that we\n    // have to start or stop recording a trace.\n    if (this.state.recordingInProgress === this.recordingInProgress) return;\n    this.recordingInProgress = this.state.recordingInProgress;\n\n    if (this.recordingInProgress) {\n      this.startRecordTrace(traceConfig);\n    } else {\n      this.stopRecordTrace();\n    }\n  }\n\n  startRecordTrace(traceConfig: TraceConfig) {\n    this.scheduleBufferUpdateRequests();\n    this.traceBuffer = [];\n    this.consumerPort.enableTracing({traceConfig});\n  }\n\n  stopRecordTrace() {\n    if (this.bufferUpdateInterval) clearInterval(this.bufferUpdateInterval);\n    this.consumerPort.flush({});\n    this.consumerPort.disableTracing({});\n  }\n\n  scheduleBufferUpdateRequests() {\n    if (this.bufferUpdateInterval) clearInterval(this.bufferUpdateInterval);\n    this.bufferUpdateInterval = setInterval(() => {\n      this.consumerPort.getTraceStats({});\n    }, 200);\n  }\n\n  readBuffers() {\n    this.consumerPort.readBuffers({});\n  }\n\n  onConsumerPortResponse(data: ConsumerPortResponse) {\n    if (data === undefined) return;\n    if (isReadBuffersResponse(data)) {\n      if (!data.slices || data.slices.length === 0) return;\n      // TODO(nicomazz): handle this as intended by consumer_port.proto.\n      console.assert(data.slices.length === 1);\n      if (data.slices[0].data) this.traceBuffer.push(data.slices[0].data);\n      // The line underneath is 'misusing' the format ReadBuffersResponse.\n      // The boolean field 'lastSliceForPacket' is used as 'lastPacketInTrace'.\n      // See http://shortn/_53WB8A1aIr.\n      if (data.slices[0].lastSliceForPacket) this.onTraceComplete();\n    } else if (isEnableTracingResponse(data)) {\n      this.readBuffers();\n    } else if (isGetTraceStatsResponse(data)) {\n      const percentage = this.getBufferUsagePercentage(data);\n      if (percentage) {\n        this.recMgr.state.bufferUsage = percentage;\n      }\n    } else if (isFreeBuffersResponse(data)) {\n      // No action required.\n    } else if (isDisableTracingResponse(data)) {\n      // No action required.\n    } else {\n      console.error('Unrecognized consumer port response:', data);\n    }\n  }\n\n  onTraceComplete() {\n    this.consumerPort.freeBuffers({});\n    this.recMgr.setRecordingStatus(undefined);\n    if (this.state.recordingCancelled) {\n      this.recMgr.setLastRecordingError('Recording cancelled.');\n      this.traceBuffer = [];\n      return;\n    }\n    const trace = this.generateTrace();\n    this.app.openTraceFromBuffer({\n      title: 'Recorded trace',\n      buffer: trace.buffer,\n      fileName: `recorded_trace${this.recordedTraceSuffix}`,\n    });\n    this.traceBuffer = [];\n  }\n\n  // TODO(nicomazz): stream each chunk into the trace processor, instead of\n  // creating a big long trace.\n  generateTrace() {\n    let traceLen = 0;\n    for (const chunk of this.traceBuffer) traceLen += chunk.length;\n    const completeTrace = new Uint8Array(traceLen);\n    let written = 0;\n    for (const chunk of this.traceBuffer) {\n      completeTrace.set(chunk, written);\n      written += chunk.length;\n    }\n    return completeTrace;\n  }\n\n  getBufferUsagePercentage(data: GetTraceStatsResponse): number {\n    if (!data.traceStats || !data.traceStats.bufferStats) return 0.0;\n    let maximumUsage = 0;\n    for (const buffer of data.traceStats.bufferStats) {\n      const used = buffer.bytesWritten as number;\n      const total = buffer.bufferSize as number;\n      maximumUsage = Math.max(maximumUsage, used / total);\n    }\n    return maximumUsage;\n  }\n\n  onError(message: string) {\n    // TODO(octaviant): b/204998302\n    console.error('Error in record controller: ', message);\n    this.recMgr.setLastRecordingError(message.substring(0, 150));\n    this.recMgr.stopRecording();\n  }\n\n  onStatus(message: string) {\n    this.recMgr.setRecordingStatus(message);\n  }\n\n  // Depending on the recording target, different implementation of the\n  // consumer_port will be used.\n  // - Chrome target: This forwards the messages that have to be sent\n  // to the extension to the frontend. This is necessary because this\n  // controller is running in a separate worker, that can't directly send\n  // messages to the extension.\n  // - Android device target: WebUSB is used to communicate using the adb\n  // protocol. Actually, there is no full consumer_port implementation, but\n  // only the support to start tracing and fetch the file.\n  async getTargetController(target: RecordingTarget): Promise<RpcConsumerPort> {\n    const identifier = RecordController.getTargetIdentifier(target);\n\n    // The reason why caching the target 'record controller' Promise is that\n    // multiple rcp calls can happen while we are trying to understand if an\n    // android device has a socket connection available or not.\n    const precedentPromise = this.controllerPromises.get(identifier);\n    if (precedentPromise) return precedentPromise;\n\n    const controllerPromise = new Promise<RpcConsumerPort>(\n      async (resolve, _) => {\n        let controller: RpcConsumerPort | undefined = undefined;\n        if (isChromeTarget(target) || isWindowsTarget(target)) {\n          controller = new ChromeExtensionConsumerPort(\n            this.extensionPort,\n            this,\n          );\n        } else if (isAdbTarget(target)) {\n          this.onStatus(`Please allow USB debugging on device.\n                 If you press cancel, reload the page.`);\n          const socketAccess = await this.hasSocketAccess(target);\n\n          controller = socketAccess\n            ? new AdbSocketConsumerPort(this.adb, this, this.recMgr.state)\n            : new AdbConsumerPort(this.adb, this, this.recMgr.state);\n        } else {\n          throw Error(`No device connected`);\n        }\n\n        /* eslint-disable @typescript-eslint/strict-boolean-expressions */\n        if (!controller) throw Error(`Unknown target: ${target}`);\n        /* eslint-enable */\n        resolve(controller);\n      },\n    );\n\n    this.controllerPromises.set(identifier, controllerPromise);\n    return controllerPromise;\n  }\n\n  private static getTargetIdentifier(target: RecordingTarget): string {\n    return isAdbTarget(target) ? target.serial : target.os;\n  }\n\n  private async hasSocketAccess(target: AdbRecordingTarget) {\n    const devices = await navigator.usb.getDevices();\n    const device = devices.find((d) => d.serialNumber === target.serial);\n    console.assert(device);\n    if (!device) return Promise.resolve(false);\n    return AdbSocketConsumerPort.hasSocketAccess(device, this.adb);\n  }\n\n  private async rpcImpl(\n    method: RPCImplMethod,\n    requestData: Uint8Array,\n    _callback: RPCImplCallback,\n  ) {\n    try {\n      const state = this.state;\n      // TODO(hjd): This is a bit weird. We implicitly send each RPC message to\n      // whichever target is currently selected (creating that target if needed)\n      // it would be nicer if the setup/teardown was more explicit.\n      const target = await this.getTargetController(state.recordingTarget);\n      this.recordedTraceSuffix = target.getRecordedTraceSuffix();\n      target.handleCommand(method.name, requestData);\n    } catch (e) {\n      console.error(`error invoking ${method}: ${e.message}`);\n    }\n  }\n}\n"]}
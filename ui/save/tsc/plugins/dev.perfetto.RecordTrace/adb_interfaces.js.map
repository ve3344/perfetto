{"version":3,"file":"adb_interfaces.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/adb_interfaces.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAwBjC,MAAa,OAAO;IAClB,OAAO,CAAC,CAAY;QAClB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,UAAU;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,CAAS;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,mBAAmB,CAAC,CAAS;QAC3B,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,CAAS;QACd,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,aAAa,EAAE,CAAC,CAAC;IAC9C,CAAC;CACF;AApBD,0BAoBC;AAED,MAAa,aAAa;IACxB,KAAK,CAAC,CAAsB;QAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IACD,SAAS,GAAG,CAAC,CAAS,EAAE,EAAE,GAAE,CAAC,CAAC;IAC9B,KAAK,KAAI,CAAC;IACV,SAAS,KAAI,CAAC;IAEd,SAAS,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;IACrB,OAAO,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;IACnB,MAAM,GAAG,CAAC,CAAa,EAAE,EAAE,GAAE,CAAC,CAAC;CAChC;AAXD,sCAWC","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport interface Adb {\n  connect(device: USBDevice): Promise<void>;\n  disconnect(): Promise<void>;\n  // Executes a shell command non-interactively.\n  shell(cmd: string): Promise<AdbStream>;\n  // Waits until the shell get closed, and returns all the output.\n  shellOutputAsString(cmd: string): Promise<string>;\n  // Opens a connection to a UNIX socket.\n  socket(path: string): Promise<AdbStream>;\n}\n\nexport interface AdbStream {\n  write(msg: string | Uint8Array): Promise<void>;\n  onMessage(message: AdbMsg): void;\n  close(): void;\n  setClosed(): void;\n\n  onConnect: VoidCallback;\n  onClose: VoidCallback;\n  onData: (raw: Uint8Array) => void;\n}\n\nexport class MockAdb implements Adb {\n  connect(_: USBDevice): Promise<void> {\n    return Promise.resolve();\n  }\n\n  disconnect(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  shell(_: string): Promise<AdbStream> {\n    return Promise.resolve(new MockAdbStream());\n  }\n\n  shellOutputAsString(_: string): Promise<string> {\n    return Promise.resolve('');\n  }\n\n  socket(_: string): Promise<AdbStream> {\n    return Promise.resolve(new MockAdbStream());\n  }\n}\n\nexport class MockAdbStream implements AdbStream {\n  write(_: string | Uint8Array): Promise<void> {\n    return Promise.resolve();\n  }\n  onMessage = (_: AdbMsg) => {};\n  close() {}\n  setClosed() {}\n\n  onConnect = () => {};\n  onClose = () => {};\n  onData = (_: Uint8Array) => {};\n}\n\nexport declare type CmdType =\n  | 'CNXN'\n  | 'AUTH'\n  | 'CLSE'\n  | 'OKAY'\n  | 'WRTE'\n  | 'OPEN';\n\nexport interface AdbMsg {\n  cmd: CmdType;\n  arg0: number;\n  arg1: number;\n  data: Uint8Array;\n  dataLen: number;\n  dataChecksum: number;\n}\n"]}
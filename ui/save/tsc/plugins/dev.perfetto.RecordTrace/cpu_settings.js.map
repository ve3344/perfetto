{"version":3,"file":"cpu_settings.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/cpu_settings.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Probe, Slider} from './record_widgets';\nimport {POLL_INTERVAL_MS, RecordingSectionAttrs} from './recording_sections';\n\nexport class CpuSettings implements m.ClassComponent<RecordingSectionAttrs> {\n  view({attrs}: m.CVnode<RecordingSectionAttrs>) {\n    const recCfg = attrs.recState.recordConfig;\n    return m(\n      `.record-section${attrs.cssClass}`,\n      m(\n        Probe,\n        {\n          title: 'Coarse CPU usage counter',\n          img: 'rec_cpu_coarse.png',\n          descr: `Lightweight polling of CPU usage counters via /proc/stat.\n                    Allows to periodically monitor CPU usage.`,\n          setEnabled: (cfg, val) => (cfg.cpuCoarse = val),\n          isEnabled: (cfg) => cfg.cpuCoarse,\n          recCfg,\n        },\n        m(Slider, {\n          title: 'Poll interval',\n          cssClass: '.thin',\n          values: POLL_INTERVAL_MS,\n          unit: 'ms',\n          set: (cfg, val) => (cfg.cpuCoarsePollMs = val),\n          get: (cfg) => cfg.cpuCoarsePollMs,\n          recCfg,\n        }),\n      ),\n      m(Probe, {\n        title: 'Scheduling details',\n        img: 'rec_cpu_fine.png',\n        descr: 'Enables high-detailed tracking of scheduling events',\n        setEnabled: (cfg, val) => (cfg.cpuSched = val),\n        isEnabled: (cfg) => cfg.cpuSched,\n        recCfg,\n      }),\n      m(\n        Probe,\n        {\n          title: 'CPU frequency and idle states',\n          img: 'rec_cpu_freq.png',\n          descr:\n            'Records cpu frequency and idle state changes via ftrace and sysfs',\n          setEnabled: (cfg, val) => (cfg.cpuFreq = val),\n          isEnabled: (cfg) => cfg.cpuFreq,\n          recCfg,\n        },\n        m(Slider, {\n          title: 'Sysfs poll interval',\n          cssClass: '.thin',\n          values: POLL_INTERVAL_MS,\n          unit: 'ms',\n          set: (cfg, val) => (cfg.cpuFreqPollMs = val),\n          get: (cfg) => cfg.cpuFreqPollMs,\n          recCfg,\n        }),\n      ),\n      m(Probe, {\n        title: 'Syscalls',\n        img: 'rec_syscalls.png',\n        descr: `Tracks the enter and exit of all syscalls. On Android\n                requires a userdebug or eng build.`,\n        setEnabled: (cfg, val) => (cfg.cpuSyscall = val),\n        isEnabled: (cfg) => cfg.cpuSyscall,\n        recCfg,\n      }),\n    );\n  }\n}\n"]}
{"version":3,"file":"record_controller_interfaces.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/record_controller_interfaces.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,8CAAgD;AAMhD,MAAsB,eAAe;IACnC,8EAA8E;IAC9E,+DAA+D;IACvD,oBAAoB,CAAW;IAEvC,YAAsB,oBAA8B;QAClD,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;IACnD,CAAC;IAKD,WAAW,CAAC,IAA0B;QACpC,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IACzD,CAAC;IAED,gBAAgB,CAAC,OAAe;QAC9B,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED,UAAU,CAAC,MAAc;QACvB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,4EAA4E;IAC5E,oEAAoE;IACpE,0EAA0E;IAC1E,0BAA0B;IAC1B,sBAAsB;QACpB,OAAO,oBAAY,CAAC;IACtB,CAAC;CACF;AA/BD,0CA+BC","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {TRACE_SUFFIX} from '../../public/trace';\nimport {ConsumerPortResponse} from './consumer_port_types';\n\nexport type ErrorCallback = (_: string) => void;\nexport type StatusCallback = (_: string) => void;\n\nexport abstract class RpcConsumerPort {\n  // The responses of the call invocations should be sent through this listener.\n  // This is done by the 3 \"send\" methods in this abstract class.\n  private consumerPortListener: Consumer;\n\n  protected constructor(consumerPortListener: Consumer) {\n    this.consumerPortListener = consumerPortListener;\n  }\n\n  // RequestData is the proto representing the arguments of the function call.\n  abstract handleCommand(methodName: string, requestData: Uint8Array): void;\n\n  sendMessage(data: ConsumerPortResponse) {\n    this.consumerPortListener.onConsumerPortResponse(data);\n  }\n\n  sendErrorMessage(message: string) {\n    this.consumerPortListener.onError(message);\n  }\n\n  sendStatus(status: string) {\n    this.consumerPortListener.onStatus(status);\n  }\n\n  // Allows the recording controller to customise the suffix added to recorded\n  // traces when they are downloaded. In the general case this will be\n  // .perfetto-trace however if the trace is recorded compressed if could be\n  // .perfetto-trace.gz etc.\n  getRecordedTraceSuffix(): string {\n    return TRACE_SUFFIX;\n  }\n}\n\nexport interface Consumer {\n  onConsumerPortResponse(data: ConsumerPortResponse): void;\n  onError: ErrorCallback;\n  onStatus: StatusCallback;\n}\n"]}
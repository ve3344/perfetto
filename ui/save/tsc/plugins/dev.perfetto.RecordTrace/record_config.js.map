{"version":3,"file":"record_config.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/record_config.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {exists} from '../../base/utils';\nimport {getDefaultRecordingTargets, RecordingTarget} from './state';\nimport {\n  createEmptyRecordConfig,\n  NamedRecordConfig,\n  NAMED_RECORD_CONFIG_SCHEMA,\n  RecordConfig,\n  RECORD_CONFIG_SCHEMA,\n} from './record_config_types';\n\nconst LOCAL_STORAGE_RECORD_CONFIGS_KEY = 'recordConfigs';\nconst LOCAL_STORAGE_AUTOSAVE_CONFIG_KEY = 'autosaveConfig';\nconst LOCAL_STORAGE_RECORD_TARGET_OS_KEY = 'recordTargetOS';\n\nexport class RecordConfigStore {\n  recordConfigs: Array<NamedRecordConfig>;\n  recordConfigNames: Set<string>;\n\n  constructor() {\n    this.recordConfigs = [];\n    this.recordConfigNames = new Set();\n    this.reloadFromLocalStorage();\n  }\n\n  private _save() {\n    window.localStorage.setItem(\n      LOCAL_STORAGE_RECORD_CONFIGS_KEY,\n      JSON.stringify(this.recordConfigs),\n    );\n  }\n\n  save(recordConfig: RecordConfig, title?: string): void {\n    // We reload from local storage in case of concurrent\n    // modifications of local storage from a different tab.\n    this.reloadFromLocalStorage();\n\n    const savedTitle = title ?? new Date().toJSON();\n    const config: NamedRecordConfig = {\n      title: savedTitle,\n      config: recordConfig,\n      key: new Date().toJSON(),\n    };\n\n    this.recordConfigs.push(config);\n    this.recordConfigNames.add(savedTitle);\n\n    this._save();\n  }\n\n  overwrite(recordConfig: RecordConfig, key: string) {\n    // We reload from local storage in case of concurrent\n    // modifications of local storage from a different tab.\n    this.reloadFromLocalStorage();\n\n    const found = this.recordConfigs.find((e) => e.key === key);\n    if (found === undefined) {\n      throw new Error('trying to overwrite non-existing config');\n    }\n\n    found.config = recordConfig;\n\n    this._save();\n  }\n\n  delete(key: string): void {\n    // We reload from local storage in case of concurrent\n    // modifications of local storage from a different tab.\n    this.reloadFromLocalStorage();\n\n    let idx = -1;\n    for (let i = 0; i < this.recordConfigs.length; ++i) {\n      if (this.recordConfigs[i].key === key) {\n        idx = i;\n        break;\n      }\n    }\n\n    if (idx !== -1) {\n      this.recordConfigNames.delete(this.recordConfigs[idx].title);\n      this.recordConfigs.splice(idx, 1);\n      this._save();\n    } else {\n      // TODO(bsebastien): Show a warning message to the user in the UI.\n      console.warn(\"The config selected doesn't exist any more\");\n    }\n  }\n\n  private clearRecordConfigs(): void {\n    this.recordConfigs = [];\n    this.recordConfigNames.clear();\n    this._save();\n  }\n\n  reloadFromLocalStorage(): void {\n    const configsLocalStorage = window.localStorage.getItem(\n      LOCAL_STORAGE_RECORD_CONFIGS_KEY,\n    );\n\n    if (exists(configsLocalStorage)) {\n      this.recordConfigNames.clear();\n\n      try {\n        const validConfigLocalStorage: Array<NamedRecordConfig> = [];\n        const parsedConfigsLocalStorage = JSON.parse(configsLocalStorage);\n\n        // Check if it's an array.\n        if (!Array.isArray(parsedConfigsLocalStorage)) {\n          this.clearRecordConfigs();\n          return;\n        }\n\n        for (let i = 0; i < parsedConfigsLocalStorage.length; ++i) {\n          const serConfig = parsedConfigsLocalStorage[i];\n          const res = NAMED_RECORD_CONFIG_SCHEMA.safeParse(serConfig);\n          if (res.success) {\n            validConfigLocalStorage.push(res.data);\n          } else {\n            console.log(\n              'Validation of saved record config has failed: ',\n              res.error.toString(),\n            );\n          }\n        }\n\n        this.recordConfigs = validConfigLocalStorage;\n        this._save();\n      } catch (e) {\n        this.clearRecordConfigs();\n      }\n    } else {\n      this.clearRecordConfigs();\n    }\n  }\n\n  canSave(title: string) {\n    return !this.recordConfigNames.has(title);\n  }\n}\n\n// This class is a singleton to avoid many instances\n// conflicting as they attempt to edit localStorage.\nexport const recordConfigStore = new RecordConfigStore();\n\nexport class AutosaveConfigStore {\n  private config: RecordConfig;\n\n  // Whether the current config is a default one or has been saved before.\n  // Used to determine whether the button to load \"last started config\" should\n  // be present in the recording profiles list.\n  hasSavedConfig: boolean;\n\n  constructor() {\n    this.hasSavedConfig = false;\n    this.config = createEmptyRecordConfig();\n    const savedItem = window.localStorage.getItem(\n      LOCAL_STORAGE_AUTOSAVE_CONFIG_KEY,\n    );\n    if (savedItem === null) {\n      return;\n    }\n    const parsed = JSON.parse(savedItem);\n    if (parsed !== null && typeof parsed === 'object') {\n      const res = RECORD_CONFIG_SCHEMA.safeParse(parsed);\n      if (res.success) {\n        this.config = res.data;\n        this.hasSavedConfig = true;\n      }\n    }\n  }\n\n  get(): RecordConfig {\n    return this.config;\n  }\n\n  save(newConfig: RecordConfig) {\n    window.localStorage.setItem(\n      LOCAL_STORAGE_AUTOSAVE_CONFIG_KEY,\n      JSON.stringify(newConfig),\n    );\n    this.config = newConfig;\n    this.hasSavedConfig = true;\n  }\n}\n\nexport const autosaveConfigStore = new AutosaveConfigStore();\n\nexport class RecordTargetStore {\n  recordTargetOS: string | null;\n\n  constructor() {\n    this.recordTargetOS = window.localStorage.getItem(\n      LOCAL_STORAGE_RECORD_TARGET_OS_KEY,\n    );\n  }\n\n  get(): string | null {\n    return this.recordTargetOS;\n  }\n\n  getValidTarget(): RecordingTarget {\n    const validTargets = getDefaultRecordingTargets();\n    const savedOS = this.get();\n\n    const validSavedTarget = validTargets.find((el) => el.os === savedOS);\n    return validSavedTarget || validTargets[0];\n  }\n\n  save(newTargetOS: string) {\n    window.localStorage.setItem(\n      LOCAL_STORAGE_RECORD_TARGET_OS_KEY,\n      newTargetOS,\n    );\n    this.recordTargetOS = newTargetOS;\n  }\n}\n\nexport const recordTargetStore = new RecordTargetStore();\n"]}
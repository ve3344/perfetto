{"version":3,"file":"chrome_proxy_record_controller.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/chrome_proxy_record_controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {binaryDecode, binaryEncode} from '../../base/string_utils';\nimport {TRACE_SUFFIX} from '../../public/trace';\nimport {\n  ConsumerPortResponse,\n  hasProperty,\n  isReadBuffersResponse,\n  Typed,\n} from './consumer_port_types';\nimport {Consumer, RpcConsumerPort} from './record_controller_interfaces';\n\nexport interface ChromeExtensionError extends Typed {\n  error: string;\n}\n\nexport interface ChromeExtensionStatus extends Typed {\n  status: string;\n}\n\nexport interface GetCategoriesResponse extends Typed {\n  categories: string[];\n}\n\nexport type ChromeExtensionMessage =\n  | ChromeExtensionError\n  | ChromeExtensionStatus\n  | ConsumerPortResponse\n  | GetCategoriesResponse;\n\nexport function isChromeExtensionError(\n  obj: Typed,\n): obj is ChromeExtensionError {\n  return obj.type === 'ChromeExtensionError';\n}\n\nexport function isChromeExtensionStatus(\n  obj: Typed,\n): obj is ChromeExtensionStatus {\n  return obj.type === 'ChromeExtensionStatus';\n}\n\nfunction isObject(obj: unknown): obj is object {\n  return typeof obj === 'object' && obj !== null;\n}\n\nexport function isGetCategoriesResponse(\n  obj: unknown,\n): obj is GetCategoriesResponse {\n  if (\n    !(\n      isObject(obj) &&\n      hasProperty(obj, 'type') &&\n      obj.type === 'GetCategoriesResponse'\n    )\n  ) {\n    return false;\n  }\n\n  return hasProperty(obj, 'categories') && Array.isArray(obj.categories);\n}\n\n// This class acts as a proxy from the record controller (running in a worker),\n// to the frontend. This is needed because we can't directly talk with the\n// extension from a web-worker, so we use a MessagePort to communicate with the\n// frontend, that will consecutively forward it to the extension.\n\n// Rationale for the binaryEncode / binaryDecode calls below:\n// Messages to/from extensions need to be JSON serializable. ArrayBuffers are\n// not supported. For this reason here we use binaryEncode/Decode.\n// See https://developer.chrome.com/extensions/messaging#simple\n\nexport class ChromeExtensionConsumerPort extends RpcConsumerPort {\n  private extensionPort: MessagePort;\n\n  constructor(extensionPort: MessagePort, consumer: Consumer) {\n    super(consumer);\n    this.extensionPort = extensionPort;\n    this.extensionPort.onmessage = this.onExtensionMessage.bind(this);\n  }\n\n  onExtensionMessage(message: {data: ChromeExtensionMessage}) {\n    if (isChromeExtensionError(message.data)) {\n      this.sendErrorMessage(message.data.error);\n      return;\n    }\n    if (isChromeExtensionStatus(message.data)) {\n      this.sendStatus(message.data.status);\n      return;\n    }\n\n    // In this else branch message.data will be a ConsumerPortResponse.\n    if (isReadBuffersResponse(message.data) && message.data.slices) {\n      const slice = message.data.slices[0].data as unknown as string;\n      message.data.slices[0].data = binaryDecode(slice);\n    }\n    this.sendMessage(message.data);\n  }\n\n  handleCommand(method: string, requestData: Uint8Array): void {\n    const reqEncoded = binaryEncode(requestData);\n    this.extensionPort.postMessage({method, requestData: reqEncoded});\n  }\n\n  getRecordedTraceSuffix(): string {\n    return `${TRACE_SUFFIX}.gz`;\n  }\n}\n"]}
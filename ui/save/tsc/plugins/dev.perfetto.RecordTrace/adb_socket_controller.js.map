{"version":3,"file":"adb_socket_controller.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/adb_socket_controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport protobuf from 'protobufjs/minimal';\nimport {\n  DisableTracingResponse,\n  EnableTracingResponse,\n  FreeBuffersResponse,\n  GetTraceStatsResponse,\n  IPCFrame,\n  ReadBuffersResponse,\n} from './protos';\nimport {AdbBaseConsumerPort, AdbConnectionState} from './adb_base_controller';\nimport {Adb, AdbStream} from './adb_interfaces';\nimport {isReadBuffersResponse} from './consumer_port_types';\nimport {Consumer} from './record_controller_interfaces';\nimport {exists} from '../../base/utils';\nimport {assertTrue} from '../../base/logging';\nimport {RecordingState} from './state';\n\nenum SocketState {\n  DISCONNECTED,\n  BINDING_IN_PROGRESS,\n  BOUND,\n}\n\n// See wire_protocol.proto for more details.\nconst WIRE_PROTOCOL_HEADER_SIZE = 4;\nconst MAX_IPC_BUFFER_SIZE = 128 * 1024;\n\nconst PROTO_LEN_DELIMITED_WIRE_TYPE = 2;\nconst TRACE_PACKET_PROTO_ID = 1;\nconst TRACE_PACKET_PROTO_TAG =\n  (TRACE_PACKET_PROTO_ID << 3) | PROTO_LEN_DELIMITED_WIRE_TYPE;\n\ndeclare type Frame = IPCFrame;\ndeclare type IMethodInfo = IPCFrame.BindServiceReply.IMethodInfo;\ndeclare type ISlice = ReadBuffersResponse.ISlice;\n\ninterface Command {\n  method: string;\n  params: Uint8Array;\n}\n\nconst TRACED_SOCKET = '/dev/socket/traced_consumer';\n\nexport class AdbSocketConsumerPort extends AdbBaseConsumerPort {\n  private socketState = SocketState.DISCONNECTED;\n\n  private socket?: AdbStream;\n  // Wire protocol request ID. After each request it is increased. It is needed\n  // to keep track of the type of request, and parse the response correctly.\n  private requestId = 1;\n\n  // Buffers received wire protocol data.\n  private incomingBuffer = new Uint8Array(MAX_IPC_BUFFER_SIZE);\n  private incomingBufferLen = 0;\n  private frameToParseLen = 0;\n\n  private availableMethods: IMethodInfo[] = [];\n  private serviceId = -1;\n\n  private resolveBindingPromise!: VoidFunction;\n  private requestMethods = new Map<number, string>();\n\n  // Needed for ReadBufferResponse: all the trace packets are split into\n  // several slices. |partialPacket| is the buffer for them. Once we receive a\n  // slice with the flag |lastSliceForPacket|, a new packet is created.\n  private partialPacket: ISlice[] = [];\n  // Accumulates trace packets into a proto trace file..\n  private traceProtoWriter = protobuf.Writer.create();\n\n  private socketCommandQueue: Command[] = [];\n\n  constructor(adb: Adb, consumer: Consumer, recState: RecordingState) {\n    super(adb, consumer, recState);\n  }\n\n  async invoke(method: string, params: Uint8Array) {\n    // ADB connection & authentication is handled by the superclass.\n    console.assert(this.state === AdbConnectionState.CONNECTED);\n    this.socketCommandQueue.push({method, params});\n\n    if (this.socketState === SocketState.BINDING_IN_PROGRESS) return;\n    if (this.socketState === SocketState.DISCONNECTED) {\n      this.socketState = SocketState.BINDING_IN_PROGRESS;\n      await this.listenForMessages();\n      await this.bind();\n      this.traceProtoWriter = protobuf.Writer.create();\n      this.socketState = SocketState.BOUND;\n    }\n\n    console.assert(this.socketState === SocketState.BOUND);\n\n    for (const cmd of this.socketCommandQueue) {\n      this.invokeInternal(cmd.method, cmd.params);\n    }\n    this.socketCommandQueue = [];\n  }\n\n  private invokeInternal(method: string, argsProto: Uint8Array) {\n    // Socket is bound in invoke().\n    console.assert(this.socketState === SocketState.BOUND);\n    const requestId = this.requestId++;\n    const methodId = this.findMethodId(method);\n    if (methodId === undefined) {\n      // This can happen with 'GetTraceStats': it seems that not all the Android\n      // <= 9 devices support it.\n      console.error(`Method ${method} not supported by the target`);\n      return;\n    }\n    const frame = new IPCFrame({\n      requestId,\n      msgInvokeMethod: new IPCFrame.InvokeMethod({\n        serviceId: this.serviceId,\n        methodId,\n        argsProto,\n      }),\n    });\n    this.requestMethods.set(requestId, method);\n    this.sendFrame(frame);\n\n    if (method === 'EnableTracing') this.setDurationStatus(argsProto);\n  }\n\n  static generateFrameBufferToSend(frame: Frame): Uint8Array {\n    const frameProto: Uint8Array = IPCFrame.encode(frame).finish();\n    const frameLen = frameProto.length;\n    const buf = new Uint8Array(WIRE_PROTOCOL_HEADER_SIZE + frameLen);\n    const dv = new DataView(buf.buffer);\n    dv.setUint32(0, frameProto.length, /* littleEndian */ true);\n    for (let i = 0; i < frameLen; i++) {\n      dv.setUint8(WIRE_PROTOCOL_HEADER_SIZE + i, frameProto[i]);\n    }\n    return buf;\n  }\n\n  async sendFrame(frame: Frame) {\n    console.assert(this.socket !== undefined);\n    if (!this.socket) return;\n    const buf = AdbSocketConsumerPort.generateFrameBufferToSend(frame);\n    await this.socket.write(buf);\n  }\n\n  async listenForMessages() {\n    this.socket = await this.adb.socket(TRACED_SOCKET);\n    this.socket.onData = (raw) => this.handleReceivedData(raw);\n    this.socket.onClose = () => {\n      this.socketState = SocketState.DISCONNECTED;\n      this.socketCommandQueue = [];\n    };\n  }\n\n  private parseMessageSize(buffer: Uint8Array) {\n    const dv = new DataView(buffer.buffer, buffer.byteOffset, buffer.length);\n    return dv.getUint32(0, true);\n  }\n\n  private parseMessage(frameBuffer: Uint8Array) {\n    // Copy message to new array:\n    const buf = new ArrayBuffer(frameBuffer.byteLength);\n    const arr = new Uint8Array(buf);\n    arr.set(frameBuffer);\n    const frame = IPCFrame.decode(arr);\n    this.handleIncomingFrame(frame);\n  }\n\n  private incompleteSizeHeader() {\n    if (!this.frameToParseLen) {\n      console.assert(this.incomingBufferLen < WIRE_PROTOCOL_HEADER_SIZE);\n      return true;\n    }\n    return false;\n  }\n\n  private canCompleteSizeHeader(newData: Uint8Array) {\n    return newData.length + this.incomingBufferLen > WIRE_PROTOCOL_HEADER_SIZE;\n  }\n\n  private canParseFullMessage(newData: Uint8Array) {\n    return (\n      this.frameToParseLen &&\n      this.incomingBufferLen + newData.length >= this.frameToParseLen\n    );\n  }\n\n  private appendToIncomingBuffer(array: Uint8Array) {\n    this.incomingBuffer.set(array, this.incomingBufferLen);\n    this.incomingBufferLen += array.length;\n  }\n\n  handleReceivedData(newData: Uint8Array) {\n    if (this.incompleteSizeHeader() && this.canCompleteSizeHeader(newData)) {\n      const newDataBytesToRead =\n        WIRE_PROTOCOL_HEADER_SIZE - this.incomingBufferLen;\n      // Add to the incoming buffer the remaining bytes to arrive at\n      // WIRE_PROTOCOL_HEADER_SIZE\n      this.appendToIncomingBuffer(newData.subarray(0, newDataBytesToRead));\n      newData = newData.subarray(newDataBytesToRead);\n\n      this.frameToParseLen = this.parseMessageSize(this.incomingBuffer);\n      this.incomingBufferLen = 0;\n    }\n\n    // Parse all complete messages in incomingBuffer and newData.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    while (this.canParseFullMessage(newData)) {\n      // All the message is in the newData buffer.\n      if (this.incomingBufferLen === 0) {\n        this.parseMessage(newData.subarray(0, this.frameToParseLen));\n        newData = newData.subarray(this.frameToParseLen);\n      } else {\n        // We need to complete the local buffer.\n        // Read the remaining part of this message.\n        const bytesToCompleteMessage =\n          this.frameToParseLen - this.incomingBufferLen;\n        this.appendToIncomingBuffer(\n          newData.subarray(0, bytesToCompleteMessage),\n        );\n        this.parseMessage(\n          this.incomingBuffer.subarray(0, this.frameToParseLen),\n        );\n        this.incomingBufferLen = 0;\n        // Remove the data just parsed.\n        newData = newData.subarray(bytesToCompleteMessage);\n      }\n      this.frameToParseLen = 0;\n      if (!this.canCompleteSizeHeader(newData)) break;\n\n      this.frameToParseLen = this.parseMessageSize(\n        newData.subarray(0, WIRE_PROTOCOL_HEADER_SIZE),\n      );\n      newData = newData.subarray(WIRE_PROTOCOL_HEADER_SIZE);\n    }\n    // Buffer the remaining data (part of the next header + message).\n    this.appendToIncomingBuffer(newData);\n  }\n\n  decodeResponse(\n    requestId: number,\n    responseProto: Uint8Array,\n    hasMore = false,\n  ) {\n    const method = this.requestMethods.get(requestId);\n    if (!method) {\n      console.error(`Unknown request id: ${requestId}`);\n      this.sendErrorMessage(`Wire protocol error.`);\n      return;\n    }\n    const decoder = decoders.get(method);\n    if (decoder === undefined) {\n      console.error(`Unable to decode method: ${method}`);\n      return;\n    }\n    const decodedResponse = decoder(responseProto);\n    const response = {type: `${method}Response`, ...decodedResponse};\n\n    // TODO(nicomazz): Fix this.\n    // We assemble all the trace and then send it back to the main controller.\n    // This is a temporary solution, that will be changed in a following CL,\n    // because now both the chrome consumer port and the other adb consumer port\n    // send back the entire trace, while the correct behavior should be to send\n    // back the slices, that are assembled by the main record controller.\n    if (isReadBuffersResponse(response)) {\n      if (response.slices) this.handleSlices(response.slices);\n      if (!hasMore) this.sendReadBufferResponse();\n      return;\n    }\n    this.sendMessage(response);\n  }\n\n  handleSlices(slices: ISlice[]) {\n    for (const slice of slices) {\n      this.partialPacket.push(slice);\n      if (slice.lastSliceForPacket) {\n        const tracePacket = this.generateTracePacket(this.partialPacket);\n        this.traceProtoWriter.uint32(TRACE_PACKET_PROTO_TAG);\n        this.traceProtoWriter.bytes(tracePacket);\n        this.partialPacket = [];\n      }\n    }\n  }\n\n  generateTracePacket(slices: ISlice[]): Uint8Array {\n    let bufferSize = 0;\n    for (const slice of slices) bufferSize += slice.data!.length;\n    const fullBuffer = new Uint8Array(bufferSize);\n    let written = 0;\n    for (const slice of slices) {\n      const data = slice.data!;\n      fullBuffer.set(data, written);\n      written += data.length;\n    }\n    return fullBuffer;\n  }\n\n  sendReadBufferResponse() {\n    this.sendMessage(\n      this.generateChunkReadResponse(\n        this.traceProtoWriter.finish(),\n        /* last */ true,\n      ),\n    );\n    this.traceProtoWriter = protobuf.Writer.create();\n  }\n\n  bind() {\n    console.assert(this.socket !== undefined);\n    const requestId = this.requestId++;\n    const frame = new IPCFrame({\n      requestId,\n      msgBindService: new IPCFrame.BindService({serviceName: 'ConsumerPort'}),\n    });\n    return new Promise<void>((resolve, _) => {\n      this.resolveBindingPromise = resolve;\n      this.sendFrame(frame);\n    });\n  }\n\n  findMethodId(method: string): number | undefined {\n    const methodObject = this.availableMethods.find((m) => m.name === method);\n    return methodObject?.id ?? undefined;\n  }\n\n  static async hasSocketAccess(device: USBDevice, adb: Adb): Promise<boolean> {\n    await adb.connect(device);\n    try {\n      const socket = await adb.socket(TRACED_SOCKET);\n      socket.close();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  handleIncomingFrame(frame: IPCFrame) {\n    const requestId = frame.requestId;\n    switch (frame.msg) {\n      case 'msgBindServiceReply': {\n        const msgBindServiceReply = frame.msgBindServiceReply;\n        if (\n          exists(msgBindServiceReply) &&\n          exists(msgBindServiceReply.methods) &&\n          exists(msgBindServiceReply.serviceId)\n        ) {\n          assertTrue(msgBindServiceReply.success === true);\n          this.availableMethods = msgBindServiceReply.methods;\n          this.serviceId = msgBindServiceReply.serviceId;\n          this.resolveBindingPromise();\n          this.resolveBindingPromise = () => {};\n        }\n        return;\n      }\n      case 'msgInvokeMethodReply': {\n        const msgInvokeMethodReply = frame.msgInvokeMethodReply;\n        if (msgInvokeMethodReply && msgInvokeMethodReply.replyProto) {\n          if (!msgInvokeMethodReply.success) {\n            console.error(\n              'Unsuccessful method invocation: ',\n              msgInvokeMethodReply,\n            );\n            return;\n          }\n          this.decodeResponse(\n            requestId,\n            msgInvokeMethodReply.replyProto,\n            msgInvokeMethodReply.hasMore === true,\n          );\n        }\n        return;\n      }\n      default:\n        console.error(`not recognized frame message: ${frame.msg}`);\n    }\n  }\n}\n\nconst decoders = new Map<string, Function>()\n  .set('EnableTracing', EnableTracingResponse.decode)\n  .set('FreeBuffers', FreeBuffersResponse.decode)\n  .set('ReadBuffers', ReadBuffersResponse.decode)\n  .set('DisableTracing', DisableTracingResponse.decode)\n  .set('GetTraceStats', GetTraceStatsResponse.decode);\n"]}
{"version":3,"file":"android_websocket_target_factory_unittest.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/target_factories/android_websocket_target_factory_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,yFAA0E;AAE1E,IAAI,CAAC,4BAA4B,EAAE,GAAG,EAAE;IACtC,MAAM,OAAO,GAAG,+BAA+B,CAAC;IAChD,MAAM,QAAQ,GAAG,IAAA,yDAAsB,EAAC,OAAO,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iDAAiD,EAAE,GAAG,EAAE;IAC3D,MAAM,OAAO,GAAG,4DAA4D,CAAC;IAC7E,MAAM,QAAQ,GAAG,IAAA,yDAAsB,EAAC,OAAO,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5E,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,8CAA8C,EAAE,GAAG,EAAE;IACxD,MAAM,OAAO,GACX,2DAA2D;QAC3D,8BAA8B,CAAC;IACjC,MAAM,QAAQ,GAAG,IAAA,yDAAsB,EAAC,OAAO,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAChC,MAAM,SAAS,GAAG,sBAAsB,CAAC;IACzC,MAAM,OAAO,GAAG,+BAA+B,SAAS,EAAE,CAAC;IAC3D,MAAM,QAAQ,GAAG,IAAA,yDAAsB,EAAC,OAAO,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACrD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjD,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IACzE,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {parseWebsocketResponse} from './android_websocket_target_factory';\n\ntest('parse device disconnection', () => {\n  const message = '001702121FQC20XXXX\\toffline\\n';\n  const response = parseWebsocketResponse(message);\n  expect(response.messageRemainder).toEqual('');\n  expect(response.listedDevices.length).toEqual(1);\n  expect(response.listedDevices[0].serialNumber).toEqual('02121FQC20XXXX');\n  expect(response.listedDevices[0].connectionState).toEqual('offline');\n});\n\ntest('parse two devices connected in the same message', () => {\n  const message = '003202121FQC20XXXX\\tdevice\\n06131FDD40YYYY\\tunauthorized\\n';\n  const response = parseWebsocketResponse(message);\n  expect(response.messageRemainder).toEqual('');\n  expect(response.listedDevices.length).toEqual(2);\n  expect(response.listedDevices[0].serialNumber).toEqual('02121FQC20XXXX');\n  expect(response.listedDevices[0].connectionState).toEqual('device');\n  expect(response.listedDevices[1].serialNumber).toEqual('06131FDD40YYYY');\n  expect(response.listedDevices[1].connectionState).toEqual('unauthorized');\n});\n\ntest('parse device connection in multiple messages', () => {\n  const message =\n    '001702121FQC20XXXX\\toffline\\n001602121FQC20XXXX\\tdevice\\n' +\n    '001602121FQC20XXXX\\tdevice\\n';\n  const response = parseWebsocketResponse(message);\n  expect(response.messageRemainder).toEqual('');\n  expect(response.listedDevices.length).toEqual(1);\n  expect(response.listedDevices[0].serialNumber).toEqual('02121FQC20XXXX');\n  expect(response.listedDevices[0].connectionState).toEqual('device');\n});\n\ntest('parse with remainder', () => {\n  const remainder = 'FFFFsome_other_stuff';\n  const message = `001602121FQC20XXXX\\tdevice\\n${remainder}`;\n  const response = parseWebsocketResponse(message);\n  expect(response.messageRemainder).toEqual(remainder);\n  expect(response.listedDevices.length).toEqual(1);\n  expect(response.listedDevices[0].serialNumber).toEqual('02121FQC20XXXX');\n  expect(response.listedDevices[0].connectionState).toEqual('device');\n});\n"]}
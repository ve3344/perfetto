{"version":3,"file":"host_os_target_factory.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/target_factories/host_os_target_factory.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0EAA2D;AAM3D,wDAAoD;AACpD,wEAAiE;AACjE,8DAAuD;AAE1C,QAAA,sBAAsB,GAAG,qBAAqB,CAAC;AAE5D,MAAa,mBAAmB;IACrB,IAAI,GAAG,8BAAsB,CAAC;IAC/B,MAAM,CAAgB;IACtB,cAAc,GAA2B,GAAG,EAAE,GAAE,CAAC,CAAC;IAE1D,gBAAgB;QACd,MAAM,IAAI,yCAAc,CACtB,sCAAsC;YACpC,0DAA0D,CAC7D,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,qBAAqB;QACnB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvB,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,qBAAqB,CAAC,YAAoB;QACxC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,YAAY,EAAE,CAAC;gBAC1C,OAAO;YACT,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAC3B,CAAC;QACH,CAAC;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,6BAAY,CAC5B,YAAY,EACZ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAChC,IAAI,CAAC,cAAc,CACpB,CAAC;QACF,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED,gBAAgB,CAAC,MAAoB;QACnC,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAED,iBAAiB,CAAC,cAAsC;QACtD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;CACF;AArDD,kDAqDC;AAED,0EAA0E;AAC1E,IAAI,IAAA,yBAAO,EAAC,SAAS,CAAC,SAAS,CAAC,IAAI,IAAA,yBAAO,EAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;IACjE,+CAAqB,CAAC,QAAQ,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;AAC5D,CAAC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {RecordingError} from '../recording_error_handling';\nimport {\n  OnTargetChangeCallback,\n  RecordingTargetV2,\n  TargetFactory,\n} from '../recording_interfaces_v2';\nimport {isLinux, isMacOs} from '../recording_utils';\nimport {targetFactoryRegistry} from '../target_factory_registry';\nimport {HostOsTarget} from '../targets/host_os_target';\n\nexport const HOST_OS_TARGET_FACTORY = 'HostOsTargetFactory';\n\nexport class HostOsTargetFactory implements TargetFactory {\n  readonly kind = HOST_OS_TARGET_FACTORY;\n  private target?: HostOsTarget;\n  private onTargetChange: OnTargetChangeCallback = () => {};\n\n  connectNewTarget(): Promise<RecordingTargetV2> {\n    throw new RecordingError(\n      'Can not create a new Host OS target.' +\n        'The Host OS target is created at factory initialisation.',\n    );\n  }\n\n  getName(): string {\n    return 'HostOs';\n  }\n\n  listRecordingProblems(): string[] {\n    return [];\n  }\n\n  listTargets(): RecordingTargetV2[] {\n    if (this.target) {\n      return [this.target];\n    }\n    return [];\n  }\n\n  tryEstablishWebsocket(websocketUrl: string) {\n    if (this.target) {\n      if (this.target.getUrl() === websocketUrl) {\n        return;\n      } else {\n        this.target.disconnect();\n      }\n    }\n    this.target = new HostOsTarget(\n      websocketUrl,\n      this.maybeClearTarget.bind(this),\n      this.onTargetChange,\n    );\n    this.onTargetChange();\n  }\n\n  maybeClearTarget(target: HostOsTarget): void {\n    if (this.target === target) {\n      this.target = undefined;\n      this.onTargetChange();\n    }\n  }\n\n  setOnTargetChange(onTargetChange: OnTargetChangeCallback): void {\n    this.onTargetChange = onTargetChange;\n  }\n}\n\n// We instantiate the host target factory only on Mac, Linux, and Windows.\nif (isMacOs(navigator.userAgent) || isLinux(navigator.userAgent)) {\n  targetFactoryRegistry.register(new HostOsTargetFactory());\n}\n"]}
{"version":3,"file":"virtual_target_factory.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/target_factories/virtual_target_factory.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0EAA2D;AAM3D,wEAAiE;AACjE,8EAAuE;AAEvE,MAAM,sBAAsB,GAAG,sBAAsB,CAAC;AAEtD,MAAa,oBAAoB;IACtB,IAAI,GAAW,sBAAsB,CAAC;IACvC,OAAO,CAAyB;IAExC;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,6CAAoB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,6CAAoB,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,6CAAoB,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,gBAAgB;QACd,MAAM,IAAI,yCAAc,CACtB,sCAAsC;YACpC,4DAA4D,CAC/D,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,qBAAqB;QACnB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,gCAAgC;IAChC,iBAAiB,CAAC,CAAyB,IAAS,CAAC;CACtD;AAhCD,oDAgCC;AAED,+CAAqB,CAAC,QAAQ,CAAC,IAAI,oBAAoB,EAAE,CAAC,CAAC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {RecordingError} from '../recording_error_handling';\nimport {\n  OnTargetChangeCallback,\n  RecordingTargetV2,\n  TargetFactory,\n} from '../recording_interfaces_v2';\nimport {targetFactoryRegistry} from '../target_factory_registry';\nimport {AndroidVirtualTarget} from '../targets/android_virtual_target';\n\nconst VIRTUAL_TARGET_FACTORY = 'VirtualTargetFactory';\n\nexport class VirtualTargetFactory implements TargetFactory {\n  readonly kind: string = VIRTUAL_TARGET_FACTORY;\n  private targets: AndroidVirtualTarget[];\n\n  constructor() {\n    this.targets = [];\n    this.targets.push(new AndroidVirtualTarget('Android Q', 29));\n    this.targets.push(new AndroidVirtualTarget('Android P', 28));\n    this.targets.push(new AndroidVirtualTarget('Android O-', 27));\n  }\n\n  connectNewTarget(): Promise<RecordingTargetV2> {\n    throw new RecordingError(\n      'Can not create a new virtual target.' +\n        'All virtual targets are created at factory initialisation.',\n    );\n  }\n\n  getName(): string {\n    return 'Virtual';\n  }\n\n  listRecordingProblems(): string[] {\n    return [];\n  }\n\n  listTargets(): RecordingTargetV2[] {\n    return this.targets;\n  }\n\n  // Virtual targets won't change.\n  setOnTargetChange(_: OnTargetChangeCallback): void {}\n}\n\ntargetFactoryRegistry.register(new VirtualTargetFactory());\n"]}
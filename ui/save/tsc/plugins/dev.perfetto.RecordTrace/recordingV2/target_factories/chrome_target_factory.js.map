{"version":3,"file":"chrome_target_factory.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/target_factories/chrome_target_factory.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0EAA2D;AAM3D,wDAK4B;AAC5B,wEAAiE;AACjE,4DAAsD;AAEzC,QAAA,qBAAqB,GAAG,qBAAqB,CAAC;AAE3D,MAAa,mBAAmB;IACrB,IAAI,GAAG,6BAAqB,CAAC;IACtC,yDAAyD;IACzD,oEAAoE;IACpE,4EAA4E;IAC5E,4EAA4E;IAC5E,+BAA+B;IAC/B,oBAAoB,GAAY,KAAK,CAAC;IAC9B,OAAO,GAAmB,EAAE,CAAC;IAErC;QACE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,8BAAY,CAAC,CAAC;QACtD,yEAAyE;QACzE,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,QAAQ,CAAC;QACvC,QAAQ,CAAC,UAAU,EAAE,CAAC;QAEtB,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC/B,OAAO;QACT,CAAC;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,4BAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QACxD,IAAI,IAAA,wBAAM,EAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,4BAAY,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;QAC/D,CAAC;QACD,0EAA0E;QAC1E,6CAA6C;QAC7C,IAAI,IAAA,2BAAS,EAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,4BAAY,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED,gBAAgB;QACd,MAAM,IAAI,yCAAc,CACtB,qCAAqC;YACnC,2DAA2D,CAC9D,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,qBAAqB;QACnB,MAAM,iBAAiB,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC/B,iBAAiB,CAAC,IAAI,CAAC,yCAAuB,CAAC,CAAC;QAClD,CAAC;QACD,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,iBAAiB,CAAC,cAAsC;QACtD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAClC,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;QACzC,CAAC;IACH,CAAC;CACF;AA9DD,kDA8DC;AAED,gFAAgF;AAChF,yEAAyE;AACzE,IAAI,UAAU,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;IACxC,+CAAqB,CAAC,QAAQ,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;AAC5D,CAAC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {RecordingError} from '../recording_error_handling';\nimport {\n  OnTargetChangeCallback,\n  RecordingTargetV2,\n  TargetFactory,\n} from '../recording_interfaces_v2';\nimport {\n  EXTENSION_ID,\n  EXTENSION_NOT_INSTALLED,\n  isCrOS,\n  isWindows,\n} from '../recording_utils';\nimport {targetFactoryRegistry} from '../target_factory_registry';\nimport {ChromeTarget} from '../targets/chrome_target';\n\nexport const CHROME_TARGET_FACTORY = 'ChromeTargetFactory';\n\nexport class ChromeTargetFactory implements TargetFactory {\n  readonly kind = CHROME_TARGET_FACTORY;\n  // We only check the connection once at the beginning to:\n  // a) Avoid creating a 'Port' object every time 'getInfo' is called.\n  // b) When a new Port is created, the extension starts communicating with it\n  // and leaves aside the old Port objects, so creating a new Port would break\n  // any ongoing tracing session.\n  isExtensionInstalled: boolean = false;\n  private targets: ChromeTarget[] = [];\n\n  constructor() {\n    this.init();\n  }\n\n  init() {\n    const testPort = chrome.runtime.connect(EXTENSION_ID);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    this.isExtensionInstalled = !!testPort;\n    testPort.disconnect();\n\n    if (!this.isExtensionInstalled) {\n      return;\n    }\n    this.targets.push(new ChromeTarget('Chrome', 'CHROME'));\n    if (isCrOS(navigator.userAgent)) {\n      this.targets.push(new ChromeTarget('ChromeOS', 'CHROME_OS'));\n    }\n    // Pass through the chrome target since it launches ETW on windows through\n    // same path as when we start chrome tracing.\n    if (isWindows(navigator.userAgent)) {\n      this.targets.push(new ChromeTarget('Windows Desktop', 'WINDOWS'));\n    }\n  }\n\n  connectNewTarget(): Promise<RecordingTargetV2> {\n    throw new RecordingError(\n      'Can not create a new Chrome target.' +\n        'All Chrome targets are created at factory initialisation.',\n    );\n  }\n\n  getName(): string {\n    return 'Chrome';\n  }\n\n  listRecordingProblems(): string[] {\n    const recordingProblems = [];\n    if (!this.isExtensionInstalled) {\n      recordingProblems.push(EXTENSION_NOT_INSTALLED);\n    }\n    return recordingProblems;\n  }\n\n  listTargets(): RecordingTargetV2[] {\n    return this.targets;\n  }\n\n  setOnTargetChange(onTargetChange: OnTargetChangeCallback): void {\n    for (const target of this.targets) {\n      target.onTargetChange = onTargetChange;\n    }\n  }\n}\n\n// We only instantiate the factory if Perfetto UI is open in the Chrome browser.\n// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\nif (globalThis.chrome && chrome.runtime) {\n  targetFactoryRegistry.register(new ChromeTargetFactory());\n}\n"]}
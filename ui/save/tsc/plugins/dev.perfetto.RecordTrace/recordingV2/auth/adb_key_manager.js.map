{"version":3,"file":"adb_key_manager.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/auth/adb_key_manager.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAmBjC,sCAiBC;AAlCD,oDAAiD;AACjD,yCAAkC;AAElC,SAAS,oBAAoB,CAC3B,IAAuB;IAEvB,OAAO,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC;AACnD,CAAC;AAED,SAAS,qBAAqB;IAC5B,OAAO,oBAAoB,IAAI,MAAM,CAAC;AACxC,CAAC;AAED,2CAA2C;AAC3C,MAAM,qBAAqB,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,aAAa;AAE3D,8CAA8C;AACvC,KAAK,UAAU,aAAa,CAAC,GAAW;IAC7C,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;QAC7B,OAAO;IACT,CAAC;IACD,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC;QACxC,EAAE,EAAE,gBAAgB;QACpB,QAAQ,EAAE,GAAG,CAAC,YAAY,EAAE;QAC5B,IAAI,EAAE,gBAAgB;QACtB,OAAO,EAAE,IAAA,iBAAQ,EAAC,oBAAoB,CAAC;KACxC,CAAC,CAAC;IACH,kEAAkE;IAClE,gCAAgC;IAChC,MAAM,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC9C,oEAAoE;IACpE,0EAA0E;IAC1E,4DAA4D;IAC5D,MAAM,SAAS,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC;AACpD,CAAC;AAED,MAAa,aAAa;IAChB,GAAG,CAAU;IACrB,qDAAqD;IAC7C,kBAAkB,CAAiC;IAE3D,4BAA4B;IAC5B,sCAAsC;IACtC,oCAAoC;IACpC,oDAAoD;IACpD,KAAK,CAAC,MAAM;QACV,uDAAuD;QACvD,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,OAAO,IAAI,CAAC,GAAG,CAAC;QAClB,CAAC;QAED,qDAAqD;QACrD,qDAAqD;QACrD,oEAAoE;QACpE,4DAA4D;QAC5D,mEAAmE;QACnE,kEAAkE;QAClE,yCAAyC;QACzC,IAAI,qBAAqB,EAAE,EAAE,CAAC;YAC5B,MAAM,OAAO,GAAqC;gBAChD,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,UAAU;aACtB,CAAC;YACF,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC5D,IAAI,oBAAoB,CAAC,UAAU,CAAC,EAAE,CAAC;gBACrC,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAM,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpE,CAAC;QACH,CAAC;QAED,iCAAiC;QACjC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,iBAAM,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,4EAA4E;IAC5E,gCAAgC;IACxB,SAAS,CAAC,GAAW;QAC3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxC,CAAC;QACD,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAClC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,EAC5B,qBAAqB,CACtB,CAAC;QACF,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AAlDD,sCAkDC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assetSrc} from '../../../../base/assets';\nimport {AdbKey} from './adb_auth';\n\nfunction isPasswordCredential(\n  cred: Credential | null,\n): cred is PasswordCredential {\n  return cred !== null && cred.type === 'password';\n}\n\nfunction hasPasswordCredential() {\n  return 'PasswordCredential' in window;\n}\n\n// how long we will store the key in memory\nconst KEY_IN_MEMORY_TIMEOUT = 1000 * 60 * 30; // 30 minutes\n\n// Update credential store with the given key.\nexport async function maybeStoreKey(key: AdbKey): Promise<void> {\n  if (!hasPasswordCredential()) {\n    return;\n  }\n  const credential = new PasswordCredential({\n    id: 'webusb-adb-key',\n    password: key.serializeKey(),\n    name: 'WebUSB ADB Key',\n    iconURL: assetSrc('assets/favicon.png'),\n  });\n  // The 'Save password?' Chrome dialogue only appears if the key is\n  // not already stored in Chrome.\n  await navigator.credentials.store(credential);\n  // 'preventSilentAccess' guarantees the user is always notified when\n  // credentials are accessed. Sometimes the user is asked to click a button\n  // and other times only a notification is shown temporarily.\n  await navigator.credentials.preventSilentAccess();\n}\n\nexport class AdbKeyManager {\n  private key?: AdbKey;\n  // Id of timer used to expire the key kept in memory.\n  private keyInMemoryTimerId?: ReturnType<typeof setTimeout>;\n\n  // Finds a key, by priority:\n  // - looking in memory (i.e. this.key)\n  // - looking in the credential store\n  // - and finally creating one from scratch if needed\n  async getKey(): Promise<AdbKey> {\n    // 1. If we have a private key in memory, we return it.\n    if (this.key) {\n      return this.key;\n    }\n\n    // 2. We try to get the private key from the browser.\n    // The mediation is set as 'optional', because we use\n    // 'preventSilentAccess', which sometimes requests the user to click\n    // on a button to allow the auth, but sometimes only shows a\n    // notification and does not require the user to click on anything.\n    // If we had set mediation to 'required', the user would have been\n    // asked to click on a button every time.\n    if (hasPasswordCredential()) {\n      const options: PasswordCredentialRequestOptions = {\n        password: true,\n        mediation: 'optional',\n      };\n      const credential = await navigator.credentials.get(options);\n      if (isPasswordCredential(credential)) {\n        return this.assignKey(AdbKey.DeserializeKey(credential.password));\n      }\n    }\n\n    // 3. We generate a new key pair.\n    return this.assignKey(await AdbKey.GenerateNewKeyPair());\n  }\n\n  // Assigns the key a new value, sets a timeout for storing the key in memory\n  // and then returns the new key.\n  private assignKey(key: AdbKey): AdbKey {\n    this.key = key;\n    if (this.keyInMemoryTimerId) {\n      clearTimeout(this.keyInMemoryTimerId);\n    }\n    this.keyInMemoryTimerId = setTimeout(\n      () => (this.key = undefined),\n      KEY_IN_MEMORY_TIMEOUT,\n    );\n    return key;\n  }\n}\n"]}
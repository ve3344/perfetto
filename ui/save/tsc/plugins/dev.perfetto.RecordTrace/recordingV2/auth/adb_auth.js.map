{"version":3,"file":"adb_auth.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/auth/adb_auth.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigInteger, RSAKey} from 'jsbn-rsa';\nimport {assertExists, assertTrue} from '../../../../base/logging';\nimport {\n  base64Decode,\n  base64Encode,\n  hexEncode,\n} from '../../../../base/string_utils';\nimport {RecordingError} from '../recording_error_handling';\n\nconst WORD_SIZE = 4;\nconst MODULUS_SIZE_BITS = 2048;\nconst MODULUS_SIZE = MODULUS_SIZE_BITS / 8;\nconst MODULUS_SIZE_WORDS = MODULUS_SIZE / WORD_SIZE;\nconst PUBKEY_ENCODED_SIZE = 3 * WORD_SIZE + 2 * MODULUS_SIZE;\nconst ADB_WEB_CRYPTO_ALGORITHM = {\n  name: 'RSASSA-PKCS1-v1_5',\n  hash: {name: 'SHA-1'},\n  publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n  modulusLength: MODULUS_SIZE_BITS,\n};\n\nconst ADB_WEB_CRYPTO_EXPORTABLE = true;\nconst ADB_WEB_CRYPTO_OPERATIONS: KeyUsage[] = ['sign'];\n\nconst SIGNING_ASN1_PREFIX = [\n  0x00, 0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05,\n  0x00, 0x04, 0x14,\n];\n\nconst R32 = BigInteger.ONE.shiftLeft(32); // 1 << 32\n\ninterface ValidJsonWebKey {\n  n: string;\n  e: string;\n  d: string;\n  p: string;\n  q: string;\n  dp: string;\n  dq: string;\n  qi: string;\n}\n\nfunction isValidJsonWebKey(key: JsonWebKey): key is ValidJsonWebKey {\n  return (\n    key.n !== undefined &&\n    key.e !== undefined &&\n    key.d !== undefined &&\n    key.p !== undefined &&\n    key.q !== undefined &&\n    key.dp !== undefined &&\n    key.dq !== undefined &&\n    key.qi !== undefined\n  );\n}\n\n// Convert a BigInteger to an array of a specified size in bytes.\nfunction bigIntToFixedByteArray(bn: BigInteger, size: number): Uint8Array {\n  const paddedBnBytes = bn.toByteArray();\n  let firstNonZeroIndex = 0;\n  while (\n    firstNonZeroIndex < paddedBnBytes.length &&\n    paddedBnBytes[firstNonZeroIndex] === 0\n  ) {\n    firstNonZeroIndex++;\n  }\n  const bnBytes = Uint8Array.from(paddedBnBytes.slice(firstNonZeroIndex));\n  const res = new Uint8Array(size);\n  assertTrue(bnBytes.length <= res.length);\n  res.set(bnBytes, res.length - bnBytes.length);\n  return res;\n}\n\nexport class AdbKey {\n  // We use this JsonWebKey to:\n  // - create a private key and sign with it\n  // - create a public key and send it to the device\n  // - serialize the JsonWebKey and send it to the device (or retrieve it\n  // from the device and deserialize)\n  jwkPrivate: ValidJsonWebKey;\n\n  private constructor(jwkPrivate: ValidJsonWebKey) {\n    this.jwkPrivate = jwkPrivate;\n  }\n\n  static async GenerateNewKeyPair(): Promise<AdbKey> {\n    // Construct a new CryptoKeyPair and keep its private key in JWB format.\n    const keyPair = await crypto.subtle.generateKey(\n      ADB_WEB_CRYPTO_ALGORITHM,\n      ADB_WEB_CRYPTO_EXPORTABLE,\n      ADB_WEB_CRYPTO_OPERATIONS,\n    );\n    const jwkPrivate = await crypto.subtle.exportKey('jwk', keyPair.privateKey);\n    if (!isValidJsonWebKey(jwkPrivate)) {\n      throw new RecordingError('Could not generate a valid private key.');\n    }\n    return new AdbKey(jwkPrivate);\n  }\n\n  static DeserializeKey(serializedKey: string): AdbKey {\n    return new AdbKey(JSON.parse(serializedKey));\n  }\n\n  // Perform an RSA signing operation for the ADB auth challenge.\n  //\n  // For the RSA signature, the token is expected to have already\n  // had the SHA-1 message digest applied.\n  //\n  // However, the adb token we receive from the device is made up of 20 randomly\n  // generated bytes that are treated like a SHA-1. Therefore, we need to update\n  // the message format.\n  sign(token: Uint8Array): Uint8Array {\n    const rsaKey = new RSAKey();\n    rsaKey.setPrivateEx(\n      hexEncode(base64Decode(this.jwkPrivate.n)),\n      hexEncode(base64Decode(this.jwkPrivate.e)),\n      hexEncode(base64Decode(this.jwkPrivate.d)),\n      hexEncode(base64Decode(this.jwkPrivate.p)),\n      hexEncode(base64Decode(this.jwkPrivate.q)),\n      hexEncode(base64Decode(this.jwkPrivate.dp)),\n      hexEncode(base64Decode(this.jwkPrivate.dq)),\n      hexEncode(base64Decode(this.jwkPrivate.qi)),\n    );\n    assertTrue(rsaKey.n.bitLength() === MODULUS_SIZE_BITS);\n\n    // Message Layout (size equals that of the key modulus):\n    // 00 01 FF FF FF FF ... FF [ASN.1 PREFIX] [TOKEN]\n    const message = new Uint8Array(MODULUS_SIZE);\n\n    // Initially fill the buffer with the padding\n    message.fill(0xff);\n\n    // add prefix\n    message[0] = 0x00;\n    message[1] = 0x01;\n\n    // add the ASN.1 prefix\n    message.set(\n      SIGNING_ASN1_PREFIX,\n      message.length - SIGNING_ASN1_PREFIX.length - token.length,\n    );\n\n    // then the actual token at the end\n    message.set(token, message.length - token.length);\n\n    const messageInteger = new BigInteger(Array.from(message));\n    const signature = rsaKey.doPrivate(messageInteger);\n    return new Uint8Array(bigIntToFixedByteArray(signature, MODULUS_SIZE));\n  }\n\n  // Construct public key to match the adb format:\n  // go/codesearch/rvc-arc/system/core/libcrypto_utils/android_pubkey.c;l=38-53\n  getPublicKey(): string {\n    const rsaKey = new RSAKey();\n    rsaKey.setPublic(\n      hexEncode(base64Decode(assertExists(this.jwkPrivate.n))),\n      hexEncode(base64Decode(assertExists(this.jwkPrivate.e))),\n    );\n\n    const n0inv = R32.subtract(rsaKey.n.modInverse(R32)).intValue();\n    const r = BigInteger.ONE.shiftLeft(1).pow(MODULUS_SIZE_BITS);\n    const rr = r.multiply(r).mod(rsaKey.n);\n\n    const buffer = new ArrayBuffer(PUBKEY_ENCODED_SIZE);\n    const dv = new DataView(buffer);\n    dv.setUint32(0, MODULUS_SIZE_WORDS, true);\n    dv.setUint32(WORD_SIZE, n0inv, true);\n\n    const dvU8 = new Uint8Array(dv.buffer, dv.byteOffset, dv.byteLength);\n    dvU8.set(\n      bigIntToFixedByteArray(rsaKey.n, MODULUS_SIZE).reverse(),\n      2 * WORD_SIZE,\n    );\n    dvU8.set(\n      bigIntToFixedByteArray(rr, MODULUS_SIZE).reverse(),\n      2 * WORD_SIZE + MODULUS_SIZE,\n    );\n\n    dv.setUint32(2 * WORD_SIZE + 2 * MODULUS_SIZE, rsaKey.e, true);\n    return base64Encode(dvU8) + ' ui.perfetto.dev';\n  }\n\n  serializeKey(): string {\n    return JSON.stringify(this.jwkPrivate);\n  }\n}\n"]}
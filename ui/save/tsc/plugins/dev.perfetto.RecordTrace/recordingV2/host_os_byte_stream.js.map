{"version":3,"file":"host_os_byte_stream.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/host_os_byte_stream.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,qDAA6C;AAO7C,yEAAyE;AACzE,6EAA6E;AAC7E,MAAa,gBAAgB;IAC3B,sEAAsE;IACtE,2BAA2B;IACnB,eAAe,GAAG,IAAA,gBAAK,GAAoB,CAAC;IAC5C,YAAY,GAAY,KAAK,CAAC;IAC9B,SAAS,CAAY;IACrB,qBAAqB,GAA2B,EAAE,CAAC;IACnD,sBAAsB,GAA4B,EAAE,CAAC;IAE7D,YAAoB,YAAoB;QACtC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,uBAAuB,CAAC,YAAkC;QACxD,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAChD,CAAC;IAED,wBAAwB,CAAC,aAAoC;QAC3D,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAClD,CAAC;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,KAAK,MAAM,aAAa,IAAI,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACxD,aAAa,EAAE,CAAC;QAClB,CAAC;QACD,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC3B,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,GAAwB;QAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,GAAiB;QACvC,KAAK,MAAM,YAAY,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACtD,MAAM,mBAAmB,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACzD,YAAY,CAAC,IAAI,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAEO,MAAM;QACZ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,YAAoB;QAChC,OAAO,IAAI,gBAAgB,CAAC,YAAY,CAAC,CAAC,eAAe,CAAC;IAC5D,CAAC;CACF;AA3DD,4CA2DC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {defer} from '../../../base/deferred';\nimport {\n  ByteStream,\n  OnStreamCloseCallback,\n  OnStreamDataCallback,\n} from './recording_interfaces_v2';\n\n// A HostOsByteStream instantiates a websocket connection to the host OS.\n// It exposes an API to write commands to this websocket and read its output.\nexport class HostOsByteStream implements ByteStream {\n  // handshakeSignal will be resolved with the stream when the websocket\n  // connection becomes open.\n  private handshakeSignal = defer<HostOsByteStream>();\n  private _isConnected: boolean = false;\n  private websocket: WebSocket;\n  private onStreamDataCallbacks: OnStreamDataCallback[] = [];\n  private onStreamCloseCallbacks: OnStreamCloseCallback[] = [];\n\n  private constructor(websocketUrl: string) {\n    this.websocket = new WebSocket(websocketUrl);\n    this.websocket.onmessage = this.onMessage.bind(this);\n    this.websocket.onopen = this.onOpen.bind(this);\n  }\n\n  addOnStreamDataCallback(onStreamData: OnStreamDataCallback): void {\n    this.onStreamDataCallbacks.push(onStreamData);\n  }\n\n  addOnStreamCloseCallback(onStreamClose: OnStreamCloseCallback): void {\n    this.onStreamCloseCallbacks.push(onStreamClose);\n  }\n\n  close(): void {\n    this.websocket.close();\n    for (const onStreamClose of this.onStreamCloseCallbacks) {\n      onStreamClose();\n    }\n    this.onStreamDataCallbacks = [];\n    this.onStreamCloseCallbacks = [];\n  }\n\n  async closeAndWaitForTeardown(): Promise<void> {\n    this.close();\n  }\n\n  isConnected(): boolean {\n    return this._isConnected;\n  }\n\n  write(msg: string | Uint8Array): void {\n    this.websocket.send(msg);\n  }\n\n  private async onMessage(evt: MessageEvent) {\n    for (const onStreamData of this.onStreamDataCallbacks) {\n      const arrayBufferResponse = await evt.data.arrayBuffer();\n      onStreamData(new Uint8Array(arrayBufferResponse));\n    }\n  }\n\n  private onOpen() {\n    this._isConnected = true;\n    this.handshakeSignal.resolve(this);\n  }\n\n  static create(websocketUrl: string): Promise<HostOsByteStream> {\n    return new HostOsByteStream(websocketUrl).handshakeSignal;\n  }\n}\n"]}
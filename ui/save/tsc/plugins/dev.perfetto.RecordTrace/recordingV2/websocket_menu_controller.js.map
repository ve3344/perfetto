{"version":3,"file":"websocket_menu_controller.js","sourceRoot":"","sources":["../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/websocket_menu_controller.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,8DAI+B;AAE/B,0GAG6D;AAC7D,sFAGmD;AACnD,uEAAgE;AAEhE,wEAAwE;AACxE,iDAAiD;AACjD,0BAA0B;AAC1B,8BAA8B;AAC9B,MAAa,uBAAuB;IAC1B,IAAI,GAAW,0CAAqB,CAAC;IAE7C,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,IAAY;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,YAAY;QACV,IAAI,+CAAqB,CAAC,GAAG,CAAC,mEAAgC,CAAC,EAAE,CAAC;YAChE,MAAM,oBAAoB,GAAG,+CAAqB,CAAC,GAAG,CACpD,mEAAgC,CACA,CAAC;YACnC,oBAAoB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,GAAG,iCAAY,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,+CAAqB,CAAC,GAAG,CAAC,+CAAsB,CAAC,EAAE,CAAC;YACtD,MAAM,iBAAiB,GAAG,+CAAqB,CAAC,GAAG,CACjD,+CAAsB,CACA,CAAC;YACzB,iBAAiB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,GAAG,oCAAe,CAAC,CAAC;QACvE,CAAC;IACH,CAAC;IAED,kBAAkB;QAChB,MAAM,eAAe,GAAG,EAAE,CAAC;QAC3B,IAAI,+CAAqB,CAAC,GAAG,CAAC,mEAAgC,CAAC,EAAE,CAAC;YAChE,eAAe,CAAC,IAAI,CAClB,+CAAqB,CAAC,GAAG,CAAC,mEAAgC,CAAC,CAC5D,CAAC;QACJ,CAAC;QACD,IAAI,+CAAqB,CAAC,GAAG,CAAC,+CAAsB,CAAC,EAAE,CAAC;YACtD,eAAe,CAAC,IAAI,CAAC,+CAAqB,CAAC,GAAG,CAAC,+CAAsB,CAAC,CAAC,CAAC;QAC1E,CAAC;QACD,OAAO,eAAe,CAAC;IACzB,CAAC;CACF;AAvCD,0DAuCC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ADB_ENDPOINT,\n  DEFAULT_WEBSOCKET_URL,\n  TRACED_ENDPOINT,\n} from '../recording_ui_utils';\nimport {TargetFactory} from './recording_interfaces_v2';\nimport {\n  ANDROID_WEBSOCKET_TARGET_FACTORY,\n  AndroidWebsocketTargetFactory,\n} from './target_factories/android_websocket_target_factory';\nimport {\n  HOST_OS_TARGET_FACTORY,\n  HostOsTargetFactory,\n} from './target_factories/host_os_target_factory';\nimport {targetFactoryRegistry} from './target_factory_registry';\n\n// The WebsocketMenuController will handle paths for all factories which\n// connect over websocket. At present, these are:\n// - adb websocket factory\n// - host OS websocket factory\nexport class WebsocketMenuController {\n  private path: string = DEFAULT_WEBSOCKET_URL;\n\n  getPath(): string {\n    return this.path;\n  }\n\n  setPath(path: string): void {\n    this.path = path;\n  }\n\n  onPathChange(): void {\n    if (targetFactoryRegistry.has(ANDROID_WEBSOCKET_TARGET_FACTORY)) {\n      const androidTargetFactory = targetFactoryRegistry.get(\n        ANDROID_WEBSOCKET_TARGET_FACTORY,\n      ) as AndroidWebsocketTargetFactory;\n      androidTargetFactory.tryEstablishWebsocket(this.path + ADB_ENDPOINT);\n    }\n\n    if (targetFactoryRegistry.has(HOST_OS_TARGET_FACTORY)) {\n      const hostTargetFactory = targetFactoryRegistry.get(\n        HOST_OS_TARGET_FACTORY,\n      ) as HostOsTargetFactory;\n      hostTargetFactory.tryEstablishWebsocket(this.path + TRACED_ENDPOINT);\n    }\n  }\n\n  getTargetFactories(): TargetFactory[] {\n    const targetFactories = [];\n    if (targetFactoryRegistry.has(ANDROID_WEBSOCKET_TARGET_FACTORY)) {\n      targetFactories.push(\n        targetFactoryRegistry.get(ANDROID_WEBSOCKET_TARGET_FACTORY),\n      );\n    }\n    if (targetFactoryRegistry.has(HOST_OS_TARGET_FACTORY)) {\n      targetFactories.push(targetFactoryRegistry.get(HOST_OS_TARGET_FACTORY));\n    }\n    return targetFactories;\n  }\n}\n"]}
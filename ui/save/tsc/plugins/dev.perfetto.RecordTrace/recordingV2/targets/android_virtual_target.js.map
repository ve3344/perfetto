{"version":3,"file":"android_virtual_target.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/targets/android_virtual_target.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0EAA2D;AAQ3D,MAAa,oBAAoB;IAErB;IACA;IAFV,YACU,IAAY,EACZ,eAAuB;QADvB,SAAI,GAAJ,IAAI,CAAQ;QACZ,oBAAe,GAAf,eAAe,CAAQ;IAC9B,CAAC;IAEJ,2BAA2B;QACzB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,uBAAuB;QACrB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,oBAAoB,CAAC,CAAyB;QAC5C,MAAM,IAAI,yCAAc,CACtB,qDAAqD,CACtD,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,CAAU;QACnB,MAAM,IAAI,yCAAc,CAAC,0CAA0C,CAAC,CAAC;IACvE,CAAC;IAED,eAAe,CAAC,CAAyB;QACvC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,OAAO;QACL,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,UAAU,EAAE,SAAS;YACrB,WAAW,EAAE,EAAE;SAChB,CAAC;IACJ,CAAC;CACF;AApCD,oDAoCC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {RecordingError} from '../recording_error_handling';\nimport {\n  RecordingTargetV2,\n  TargetInfo,\n  TracingSession,\n  TracingSessionListener,\n} from '../recording_interfaces_v2';\n\nexport class AndroidVirtualTarget implements RecordingTargetV2 {\n  constructor(\n    private name: string,\n    private androidApiLevel: number,\n  ) {}\n\n  canConnectWithoutContention(): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n\n  canCreateTracingSession(): boolean {\n    return false;\n  }\n\n  createTracingSession(_: TracingSessionListener): Promise<TracingSession> {\n    throw new RecordingError(\n      'Can not create tracing session for a virtual target',\n    );\n  }\n\n  disconnect(_?: string): Promise<void> {\n    throw new RecordingError('Can not disconnect from a virtual target');\n  }\n\n  fetchTargetInfo(_: TracingSessionListener): Promise<void> {\n    return Promise.resolve();\n  }\n\n  getInfo(): TargetInfo {\n    return {\n      name: this.name,\n      androidApiLevel: this.androidApiLevel,\n      targetType: 'ANDROID',\n      dataSources: [],\n    };\n  }\n}\n"]}
{"version":3,"file":"chrome_target.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/targets/chrome_target.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,oFAA4E;AAS5E,MAAa,YAAY;IAKb;IACA;IALV,cAAc,CAA0B;IAChC,gBAAgB,CAAY;IAEpC,YACU,IAAY,EACZ,UAA8C;QAD9C,SAAI,GAAJ,IAAI,CAAQ;QACZ,eAAU,GAAV,UAAU,CAAoC;IACrD,CAAC;IAEJ,OAAO;QACL,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE;gBACX,EAAC,IAAI,EAAE,kBAAkB,EAAE,UAAU,EAAE,IAAI,CAAC,gBAAgB,EAAC;aAC9D;SACF,CAAC;IACJ,CAAC;IAED,6EAA6E;IAC7E,oCAAoC;IACpC,uBAAuB;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,oBAAoB,CACxB,sBAA8C;QAE9C,MAAM,cAAc,GAAG,IAAI,0DAA0B,CACnD,sBAAsB,CACvB,CAAC;QACF,cAAc,CAAC,cAAc,EAAE,CAAC;QAEhC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3B,8CAA8C;YAC9C,IAAI,CAAC,gBAAgB,GAAG,MAAM,cAAc,CAAC,aAAa,EAAE,CAAC;YAC7D,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;gBACxB,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,CAAC;QACH,CAAC;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,wEAAwE;IACxE,wCAAwC;IACxC,KAAK,CAAC,eAAe,CACnB,sBAA8C;QAE9C,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,oBAAoB,CACpD,sBAAsB,CACvB,CAAC;QACF,cAAc,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAED,UAAU,CAAC,kBAA2B;QACpC,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAED,yEAAyE;IACzE,wBAAwB;IACxB,KAAK,CAAC,2BAA2B;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAhED,oCAgEC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ChromeTracedTracingSession} from '../chrome_traced_tracing_session';\nimport {\n  ChromeTargetInfo,\n  OnTargetChangeCallback,\n  RecordingTargetV2,\n  TracingSession,\n  TracingSessionListener,\n} from '../recording_interfaces_v2';\n\nexport class ChromeTarget implements RecordingTargetV2 {\n  onTargetChange?: OnTargetChangeCallback;\n  private chromeCategories?: string[];\n\n  constructor(\n    private name: string,\n    private targetType: 'CHROME' | 'CHROME_OS' | 'WINDOWS',\n  ) {}\n\n  getInfo(): ChromeTargetInfo {\n    return {\n      targetType: this.targetType,\n      name: this.name,\n      dataSources: [\n        {name: 'chromeCategories', descriptor: this.chromeCategories},\n      ],\n    };\n  }\n\n  // Chrome targets are created after we check that the extension is installed,\n  // so they support tracing sessions.\n  canCreateTracingSession(): boolean {\n    return true;\n  }\n\n  async createTracingSession(\n    tracingSessionListener: TracingSessionListener,\n  ): Promise<TracingSession> {\n    const tracingSession = new ChromeTracedTracingSession(\n      tracingSessionListener,\n    );\n    tracingSession.initConnection();\n\n    if (!this.chromeCategories) {\n      // Fetch chrome categories from the extension.\n      this.chromeCategories = await tracingSession.getCategories();\n      if (this.onTargetChange) {\n        this.onTargetChange();\n      }\n    }\n\n    return tracingSession;\n  }\n\n  // Starts a tracing session in order to fetch chrome categories from the\n  // device. Then, it cancels the session.\n  async fetchTargetInfo(\n    tracingSessionListener: TracingSessionListener,\n  ): Promise<void> {\n    const tracingSession = await this.createTracingSession(\n      tracingSessionListener,\n    );\n    tracingSession.cancel();\n  }\n\n  disconnect(_disconnectMessage?: string): Promise<void> {\n    return Promise.resolve(undefined);\n  }\n\n  // We can connect to the Chrome target without taking the connection away\n  // from another process.\n  async canConnectWithoutContention(): Promise<boolean> {\n    return true;\n  }\n}\n"]}
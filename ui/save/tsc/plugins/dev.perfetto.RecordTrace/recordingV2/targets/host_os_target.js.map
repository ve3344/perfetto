{"version":3,"file":"host_os_target.js","sourceRoot":"","sources":["../../../../../../src/plugins/dev.perfetto.RecordTrace/recordingV2/targets/host_os_target.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {HostOsByteStream} from '../host_os_byte_stream';\nimport {RecordingError} from '../recording_error_handling';\nimport {\n  DataSource,\n  HostOsTargetInfo,\n  OnDisconnectCallback,\n  OnTargetChangeCallback,\n  RecordingTargetV2,\n  TracingSession,\n  TracingSessionListener,\n} from '../recording_interfaces_v2';\nimport {\n  isLinux,\n  isMacOs,\n  WEBSOCKET_CLOSED_ABNORMALLY_CODE,\n} from '../recording_utils';\nimport {TracedTracingSession} from '../traced_tracing_session';\n\nexport class HostOsTarget implements RecordingTargetV2 {\n  private readonly targetType: 'LINUX' | 'MACOS';\n  private readonly name: string;\n  private websocket: WebSocket;\n  private streams = new Set<HostOsByteStream>();\n  private dataSources?: DataSource[];\n  private onDisconnect: OnDisconnectCallback = (_) => {};\n\n  constructor(\n    websocketUrl: string,\n    private maybeClearTarget: (target: HostOsTarget) => void,\n    private onTargetChange: OnTargetChangeCallback,\n  ) {\n    if (isMacOs(navigator.userAgent)) {\n      this.name = 'MacOS';\n      this.targetType = 'MACOS';\n    } else if (isLinux(navigator.userAgent)) {\n      this.name = 'Linux';\n      this.targetType = 'LINUX';\n    } else {\n      throw new RecordingError(\n        'Host OS target created on an unsupported operating system.',\n      );\n    }\n\n    this.websocket = new WebSocket(websocketUrl);\n    this.websocket.onclose = this.onClose.bind(this);\n    // 'onError' gets called when the websocketURL where the UI tries to connect\n    // is disallowed by the Content Security Policy. In this case, we disconnect\n    // the target.\n    this.websocket.onerror = this.disconnect.bind(this);\n  }\n\n  getInfo(): HostOsTargetInfo {\n    return {\n      targetType: this.targetType,\n      name: this.name,\n      dataSources: this.dataSources || [],\n    };\n  }\n\n  canCreateTracingSession(): boolean {\n    return true;\n  }\n\n  async createTracingSession(\n    tracingSessionListener: TracingSessionListener,\n  ): Promise<TracingSession> {\n    this.onDisconnect = tracingSessionListener.onDisconnect;\n\n    const osStream = await HostOsByteStream.create(this.getUrl());\n    this.streams.add(osStream);\n    const tracingSession = new TracedTracingSession(\n      osStream,\n      tracingSessionListener,\n    );\n    await tracingSession.initConnection();\n\n    if (!this.dataSources) {\n      this.dataSources = await tracingSession.queryServiceState();\n      this.onTargetChange();\n    }\n    return tracingSession;\n  }\n\n  // Starts a tracing session in order to fetch data sources from the\n  // device. Then, it cancels the session.\n  async fetchTargetInfo(\n    tracingSessionListener: TracingSessionListener,\n  ): Promise<void> {\n    const tracingSession = await this.createTracingSession(\n      tracingSessionListener,\n    );\n    tracingSession.cancel();\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.websocket.readyState === this.websocket.OPEN) {\n      this.websocket.close();\n      // We remove the 'onclose' callback so the 'disconnect' method doesn't get\n      // executed twice.\n      this.websocket.onclose = null;\n    }\n    for (const stream of this.streams) {\n      stream.close();\n    }\n    // We remove the existing target from the factory if present.\n    this.maybeClearTarget(this);\n    // We run the onDisconnect callback in case this target is used for tracing.\n    this.onDisconnect();\n  }\n\n  // We can connect to the Host OS without taking the connection away from\n  // another process.\n  async canConnectWithoutContention(): Promise<boolean> {\n    return true;\n  }\n\n  getUrl() {\n    return this.websocket.url;\n  }\n\n  private onClose(ev: CloseEvent): void {\n    if (ev.code === WEBSOCKET_CLOSED_ABNORMALLY_CODE) {\n      console.info(\n        `It's safe to ignore the 'WebSocket connection to ${this.getUrl()} error above, if present. It occurs when ` +\n          'checking the connection to the local Websocket server.',\n      );\n    }\n    this.disconnect();\n  }\n}\n"]}
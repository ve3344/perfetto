{"version":3,"file":"adb_shell_controller.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/adb_shell_controller.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,0DAAiE;AAEjE,6DAAwD;AACxD,+DAA8E;AAK9E,IAAK,aAIJ;AAJD,WAAK,aAAa;IAChB,mDAAK,CAAA;IACL,2DAAS,CAAA;IACT,yDAAQ,CAAA;AACV,CAAC,EAJI,aAAa,KAAb,aAAa,QAIjB;AACD,MAAM,wBAAwB,GAAG,wCAAwC,CAAC;AAE1E,MAAa,eAAgB,SAAQ,yCAAmB;IACtD,aAAa,GAAG,wBAAwB,CAAC;IACzC,UAAU,GAAkB,aAAa,CAAC,KAAK,CAAC;IACxC,WAAW,CAAa;IAEhC,YAAY,GAAQ,EAAE,QAAkB,EAAE,QAAwB;QAChE,KAAK,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC/B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAc,EAAE,MAAkB;QAC7C,gEAAgE;QAChE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,wCAAkB,CAAC,SAAS,CAAC,CAAC;QAE5D,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,eAAe;gBAClB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;gBAC3B,MAAM;YACR,KAAK,aAAa;gBAChB,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,MAAM;YACR,KAAK,gBAAgB;gBACnB,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,MAAM;YACR,KAAK,aAAa;gBAChB,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,MAAM;YACR,KAAK,eAAe;gBAClB,MAAM;YACR;gBACE,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,MAAM,EAAE,CAAC,CAAC;gBAC1D,MAAM;QACV,CAAC;IACH,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,kBAA8B;QAChD,IAAI,CAAC;YACH,MAAM,gBAAgB,GAAG,IAAA,uCAAkB,EAAC,kBAAkB,CAAC,CAAC;YAChE,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;gBACzC,OAAO;YACT,CAAC;YAED,MAAM,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;YAC5C,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;QAC7C,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,WAAuB;QAC1C,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,SAAS,CAAC;QAC1C,MAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC;QACpE,IAAI,CAAC,WAAW,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACvD,MAAM,MAAM,GAAa,EAAE,CAAC;QAC5B,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAA,yBAAU,EAAC,GAAG,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,GAAG,EAAE;YAC9B,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC7C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;gBAChC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC;gBACtC,OAAO;YACT,CAAC;YACD,IAAI,CAAC,UAAU,CAAC,oDAAoD,CAAC,CAAC;YACtE,IAAI,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,uBAAuB,EAAC,CAAC,CAAC;YAClD,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC/B,CAAC,CAAC;IACJ,CAAC;IAED,wBAAwB,CAAC,QAAgB;QACvC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,KAAK,aAAa,CAAC,SAAS,CAAC,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC;QAEzC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CACzC,IAAI,CAAC,wBAAwB,EAAE,CAChC,CAAC;QACF,cAAc,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,EAAE,CAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC;QAExD,cAAc,CAAC,OAAO,GAAG,GAAG,EAAE;YAC5B,IAAI,CAAC,WAAW,CACd,IAAI,CAAC,yBAAyB,CAAC,IAAI,UAAU,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,CAClE,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,uBAAuB;QAC3B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAC/C,6BAA6B,CAC9B,CAAC;QACF,wEAAwE;QACxE,kEAAkE;QAClE,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;QAC1D,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACnB,MAAM,KAAK,CAAC,2CAA2C,MAAM,GAAG,CAAC,CAAC;QACpE,CAAC;QACD,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO;QAC9B,IAAI,CAAC;YACH,yEAAyE;YACzE,wEAAwE;YACxE,mEAAmE;YACnE,gBAAgB;YAChB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAEjD,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBAC3C,MAAM,KAAK,CAAC;kCACc,GAAG,EAAE,CAAC,CAAC;YACnC,CAAC;YACD,8DAA8D;YAC9D,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CACnD,gBAAgB,GAAG,EAAE,CACtB,CAAC;YAEF,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,MAAM,KAAK,CAAC,4BAA4B,UAAU,EAAE,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC;QACtC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAC/B,CAAC;IACH,CAAC;IAED,yBAAyB,CACvB,IAAgB,EAChB,IAAI,GAAG,KAAK;QAEZ,OAAO;YACL,IAAI,EAAE,qBAAqB;YAC3B,MAAM,EAAE,CAAC,EAAC,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAC,CAAC;SAC3C,CAAC;IACJ,CAAC;IAED,wBAAwB;QACtB,0EAA0E;QAC1E,2EAA2E;QAC3E,yEAAyE;QACzE,uEAAuE;QACvE,kBAAkB;QAClB,OAAO,WAAW,IAAI,CAAC,aAAa,aAAa,IAAI,CAAC,aAAa,EAAE,CAAC;IACxE,CAAC;IAED,2BAA2B,CAAC,aAAyB;QACnD,MAAM,YAAY,GAAG,IAAA,2BAAY,EAAC,aAAa,CAAC,CAAC;QACjD,MAAM,WAAW,GAAG,oBAAoB,IAAI,CAAC,aAAa,EAAE,CAAC;QAC7D,OAAO,SAAS,YAAY,mBAAmB,WAAW,EAAE,CAAC;IAC/D,CAAC;CACF;AAjKD,0CAiKC","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {base64Encode, utf8Decode} from '../../base/string_utils';\nimport {RecordingState} from './state';\nimport {extractTraceConfig} from './trace_config_utils';\nimport {AdbBaseConsumerPort, AdbConnectionState} from './adb_base_controller';\nimport {Adb, AdbStream} from './adb_interfaces';\nimport {ReadBuffersResponse} from './consumer_port_types';\nimport {Consumer} from './record_controller_interfaces';\n\nenum AdbShellState {\n  READY,\n  RECORDING,\n  FETCHING,\n}\nconst DEFAULT_DESTINATION_FILE = '/data/misc/perfetto-traces/trace-by-ui';\n\nexport class AdbConsumerPort extends AdbBaseConsumerPort {\n  traceDestFile = DEFAULT_DESTINATION_FILE;\n  shellState: AdbShellState = AdbShellState.READY;\n  private recordShell?: AdbStream;\n\n  constructor(adb: Adb, consumer: Consumer, recState: RecordingState) {\n    super(adb, consumer, recState);\n    this.adb = adb;\n  }\n\n  async invoke(method: string, params: Uint8Array) {\n    // ADB connection & authentication is handled by the superclass.\n    console.assert(this.state === AdbConnectionState.CONNECTED);\n\n    switch (method) {\n      case 'EnableTracing':\n        this.enableTracing(params);\n        break;\n      case 'ReadBuffers':\n        this.readBuffers();\n        break;\n      case 'DisableTracing':\n        this.disableTracing();\n        break;\n      case 'FreeBuffers':\n        this.freeBuffers();\n        break;\n      case 'GetTraceStats':\n        break;\n      default:\n        this.sendErrorMessage(`Method not recognized: ${method}`);\n        break;\n    }\n  }\n\n  async enableTracing(enableTracingProto: Uint8Array) {\n    try {\n      const traceConfigProto = extractTraceConfig(enableTracingProto);\n      if (!traceConfigProto) {\n        this.sendErrorMessage('Invalid config.');\n        return;\n      }\n\n      await this.startRecording(traceConfigProto);\n      this.setDurationStatus(enableTracingProto);\n    } catch (e) {\n      this.sendErrorMessage(e.message);\n    }\n  }\n\n  async startRecording(configProto: Uint8Array) {\n    this.shellState = AdbShellState.RECORDING;\n    const recordCommand = this.generateStartTracingCommand(configProto);\n    this.recordShell = await this.adb.shell(recordCommand);\n    const output: string[] = [];\n    this.recordShell.onData = (raw) => output.push(utf8Decode(raw));\n    this.recordShell.onClose = () => {\n      const response = output.join();\n      if (!this.tracingEndedSuccessfully(response)) {\n        this.sendErrorMessage(response);\n        this.shellState = AdbShellState.READY;\n        return;\n      }\n      this.sendStatus('Recording ended successfully. Fetching the trace..');\n      this.sendMessage({type: 'EnableTracingResponse'});\n      this.recordShell = undefined;\n    };\n  }\n\n  tracingEndedSuccessfully(response: string): boolean {\n    return !response.includes(' 0 ms') && response.includes('Wrote ');\n  }\n\n  async readBuffers() {\n    console.assert(this.shellState === AdbShellState.RECORDING);\n    this.shellState = AdbShellState.FETCHING;\n\n    const readTraceShell = await this.adb.shell(\n      this.generateReadTraceCommand(),\n    );\n    readTraceShell.onData = (raw) =>\n      this.sendMessage(this.generateChunkReadResponse(raw));\n\n    readTraceShell.onClose = () => {\n      this.sendMessage(\n        this.generateChunkReadResponse(new Uint8Array(), /* last */ true),\n      );\n    };\n  }\n\n  async getPidFromShellAsString() {\n    const pidStr = await this.adb.shellOutputAsString(\n      `ps -u shell | grep perfetto`,\n    );\n    // We used to use awk '{print $2}' but older phones/Go phones don't have\n    // awk installed. Instead we implement similar functionality here.\n    const awk = pidStr.split(' ').filter((str) => str !== '');\n    if (awk.length < 1) {\n      throw Error(`Unabled to find perfetto pid in string \"${pidStr}\"`);\n    }\n    return awk[1];\n  }\n\n  async disableTracing() {\n    if (!this.recordShell) return;\n    try {\n      // We are not using 'pidof perfetto' so that we can use more filters. 'ps\n      // -u shell' is meant to catch processes started from shell, so if there\n      // are other ongoing tracing sessions started by others, we are not\n      // killing them.\n      const pid = await this.getPidFromShellAsString();\n\n      if (pid.length === 0 || isNaN(Number(pid))) {\n        throw Error(`Perfetto pid not found. Impossible to stop/cancel the\n     recording. Command output: ${pid}`);\n      }\n      // Perfetto stops and finalizes the tracing session on SIGINT.\n      const killOutput = await this.adb.shellOutputAsString(\n        `kill -SIGINT ${pid}`,\n      );\n\n      if (killOutput.length !== 0) {\n        throw Error(`Unable to kill perfetto: ${killOutput}`);\n      }\n    } catch (e) {\n      this.sendErrorMessage(e.message);\n    }\n  }\n\n  freeBuffers() {\n    this.shellState = AdbShellState.READY;\n    if (this.recordShell) {\n      this.recordShell.close();\n      this.recordShell = undefined;\n    }\n  }\n\n  generateChunkReadResponse(\n    data: Uint8Array,\n    last = false,\n  ): ReadBuffersResponse {\n    return {\n      type: 'ReadBuffersResponse',\n      slices: [{data, lastSliceForPacket: last}],\n    };\n  }\n\n  generateReadTraceCommand(): string {\n    // We attempt to delete the trace file after tracing. On a non-root shell,\n    // this will fail (due to selinux denial), but perfetto cmd will be able to\n    // override the file later. However, on a root shell, we need to clean up\n    // the file since perfetto cmd might otherwise fail to override it in a\n    // future session.\n    return `gzip -c ${this.traceDestFile} && rm -f ${this.traceDestFile}`;\n  }\n\n  generateStartTracingCommand(tracingConfig: Uint8Array) {\n    const configBase64 = base64Encode(tracingConfig);\n    const perfettoCmd = `perfetto -c - -o ${this.traceDestFile}`;\n    return `echo '${configBase64}' | base64 -d | ${perfettoCmd}`;\n  }\n}\n"]}
{"version":3,"file":"trace_config_utils.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/trace_config_utils.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAMjC,gDAaC;AAED,wEAOC;AAED,sEAgBC;AAED,8DAOC;AArDD,qCAA2D;AAE3D,4EAA4E;AAE5E,SAAgB,kBAAkB,CAChC,oBAAgC;IAEhC,IAAI,CAAC;QACH,MAAM,mBAAmB,GACvB,6BAAoB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QACpD,IAAI,CAAC,mBAAmB,CAAC,WAAW;YAAE,OAAO,SAAS,CAAC;QACvD,OAAO,oBAAW,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;IACtE,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,6DAA6D;QAC7D,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;QAC1D,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAED,SAAgB,8BAA8B,CAAC,gBAA4B;IACzE,IAAI,CAAC;QACH,OAAO,oBAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAAC;IACzD,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,6DAA6D;QAC7D,OAAO,SAAS,CAAC;IACnB,CAAC;AACH,CAAC;AAED,SAAgB,6BAA6B;IAC3C,MAAM,oBAAoB,GAAG,aAAa,CAAC;IAC3C,MAAM,cAAc,GAAG,MAAM,CAC3B,CAAC,0BAA0B,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnE,CAAC;IAEF,IAAI,CAAC,cAAc;QAAE,OAAO,KAAK,CAAC;IAElC,MAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAChE,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAE1D,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;QACxD,IAAI,WAAW,CAAC,KAAK,CAAC,KAAK,WAAW,CAAC,KAAK,CAAC;YAAE,SAAS;QACxD,OAAO,WAAW,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IACD,OAAO,IAAI,CAAC,CAAC,uBAAuB;AACtC,CAAC;AAED,SAAgB,yBAAyB,CAAC,MAAmB;IAC3D,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,IAAI,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE,CAAC;YACzD,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {EnableTracingRequest, TraceConfig} from './protos';\n\n// In this file are contained a few functions to simplify the proto parsing.\n\nexport function extractTraceConfig(\n  enableTracingRequest: Uint8Array,\n): Uint8Array | undefined {\n  try {\n    const enableTracingObject =\n      EnableTracingRequest.decode(enableTracingRequest);\n    if (!enableTracingObject.traceConfig) return undefined;\n    return TraceConfig.encode(enableTracingObject.traceConfig).finish();\n  } catch (e) {\n    // This catch is for possible proto encoding/decoding issues.\n    console.error('Error extracting the config: ', e.message);\n    return undefined;\n  }\n}\n\nexport function extractDurationFromTraceConfig(traceConfigProto: Uint8Array) {\n  try {\n    return TraceConfig.decode(traceConfigProto).durationMs;\n  } catch (e) {\n    // This catch is for possible proto encoding/decoding issues.\n    return undefined;\n  }\n}\n\nexport function browserSupportsPerfettoConfig(): boolean {\n  const minimumChromeVersion = '91.0.4448.0';\n  const runningVersion = String(\n    (/Chrome\\/(([0-9]+\\.?){4})/.exec(navigator.userAgent) || [, 0])[1],\n  );\n\n  if (!runningVersion) return false;\n\n  const minVerArray = minimumChromeVersion.split('.').map(Number);\n  const runVerArray = runningVersion.split('.').map(Number);\n\n  for (let index = 0; index < minVerArray.length; index++) {\n    if (runVerArray[index] === minVerArray[index]) continue;\n    return runVerArray[index] > minVerArray[index];\n  }\n  return true; // Exact version match.\n}\n\nexport function hasSystemDataSourceConfig(config: TraceConfig): boolean {\n  for (const ds of config.dataSources) {\n    if (!(ds.config?.name ?? '').startsWith('org.chromium.')) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}
{"version":3,"file":"adb_record_controller_jsdomtest.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/adb_record_controller_jsdomtest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {dingus} from 'dingusjs';\nimport {utf8Encode} from '../../base/string_utils';\nimport {EnableTracingRequest, TraceConfig} from './protos';\nimport {AdbStream, MockAdb, MockAdbStream} from './adb_interfaces';\nimport {AdbConsumerPort} from './adb_shell_controller';\nimport {Consumer} from './record_controller_interfaces';\nimport {createEmptyState} from './empty_state';\n\nfunction generateMockConsumer(): Consumer {\n  return {\n    onConsumerPortResponse: jest.fn(),\n    onError: jest.fn(),\n    onStatus: jest.fn(),\n  };\n}\nconst mainCallback = generateMockConsumer();\nconst adbMock = new MockAdb();\nconst adbController = new AdbConsumerPort(\n  adbMock,\n  mainCallback,\n  createEmptyState(),\n);\nconst mockIntArray = new Uint8Array();\n\nconst enableTracingRequest = new EnableTracingRequest();\nenableTracingRequest.traceConfig = new TraceConfig();\nconst enableTracingRequestProto =\n  EnableTracingRequest.encode(enableTracingRequest).finish();\n\ntest('handleCommand', async () => {\n  adbController.findDevice = () => {\n    return Promise.resolve(dingus<USBDevice>());\n  };\n\n  const enableTracing = jest.fn();\n  adbController.enableTracing = enableTracing;\n  await adbController.invoke('EnableTracing', mockIntArray);\n  expect(enableTracing).toHaveBeenCalledTimes(1);\n\n  const readBuffers = jest.fn();\n  adbController.readBuffers = readBuffers;\n  adbController.invoke('ReadBuffers', mockIntArray);\n  expect(readBuffers).toHaveBeenCalledTimes(1);\n\n  const sendErrorMessage = jest.fn();\n  adbController.sendErrorMessage = sendErrorMessage;\n  adbController.invoke('unknown', mockIntArray);\n  expect(sendErrorMessage).toBeCalledWith('Method not recognized: unknown');\n});\n\ntest('enableTracing', async () => {\n  const mainCallback = generateMockConsumer();\n  const adbMock = new MockAdb();\n  const adbController = new AdbConsumerPort(\n    adbMock,\n    mainCallback,\n    createEmptyState(),\n  );\n\n  adbController.sendErrorMessage = jest\n    .fn()\n    .mockImplementation((s) => console.error(s));\n\n  const findDevice = jest.fn().mockImplementation(() => {\n    return Promise.resolve({} as unknown as USBDevice);\n  });\n  adbController.findDevice = findDevice;\n\n  const connectToDevice = jest\n    .fn()\n    .mockImplementation((_: USBDevice) => Promise.resolve());\n  adbMock.connect = connectToDevice;\n\n  const stream: AdbStream = new MockAdbStream();\n  const adbShell = jest\n    .fn()\n    .mockImplementation((_: string) => Promise.resolve(stream));\n  adbMock.shell = adbShell;\n\n  const sendMessage = jest.fn();\n  adbController.sendMessage = sendMessage;\n\n  adbController.generateStartTracingCommand = (_) => 'CMD';\n\n  await adbController.enableTracing(enableTracingRequestProto);\n  expect(adbShell).toBeCalledWith('CMD');\n  expect(sendMessage).toHaveBeenCalledTimes(0);\n\n  stream.onData(utf8Encode('starting tracing Wrote 123 bytes'));\n  stream.onClose();\n\n  expect(adbController.sendErrorMessage).toHaveBeenCalledTimes(0);\n  expect(sendMessage).toBeCalledWith({type: 'EnableTracingResponse'});\n});\n\ntest('generateStartTracing', () => {\n  adbController.traceDestFile = 'DEST';\n  const testArray = new Uint8Array(1);\n  testArray[0] = 65;\n  const generatedCmd = adbController.generateStartTracingCommand(testArray);\n  expect(generatedCmd).toBe(\n    `echo '${btoa('A')}' | base64 -d | perfetto -c - -o DEST`,\n  );\n});\n\ntest('tracingEndedSuccessfully', () => {\n  expect(\n    adbController.tracingEndedSuccessfully(\n      'Connected to the Perfetto traced service, starting tracing for 10000 ms\\nWrote 564 bytes into /data/misc/perfetto-traces/trace',\n    ),\n  ).toBe(true);\n  expect(\n    adbController.tracingEndedSuccessfully(\n      'Connected to the Perfetto traced service, starting tracing for 10000 ms',\n    ),\n  ).toBe(false);\n  expect(\n    adbController.tracingEndedSuccessfully(\n      'Connected to the Perfetto traced service, starting tracing for 0 ms',\n    ),\n  ).toBe(false);\n});\n"]}
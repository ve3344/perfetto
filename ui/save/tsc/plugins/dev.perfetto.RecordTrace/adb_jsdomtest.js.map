{"version":3,"file":"adb_jsdomtest.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.RecordTrace/adb_jsdomtest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  AdbMsgImpl,\n  AdbOverWebUsb,\n  AdbState,\n  DEFAULT_MAX_PAYLOAD_BYTES,\n  VERSION_WITH_CHECKSUM,\n} from './adb';\nimport {utf8Encode} from '../../base/string_utils';\n\ntest('startAuthentication', async () => {\n  const adb = new AdbOverWebUsb();\n\n  const sendRaw = jest.fn();\n  adb.sendRaw = sendRaw;\n  const recvRaw = jest.fn();\n  adb.recvRaw = recvRaw;\n\n  const expectedAuthMessage = AdbMsgImpl.create({\n    cmd: 'CNXN',\n    arg0: VERSION_WITH_CHECKSUM,\n    arg1: DEFAULT_MAX_PAYLOAD_BYTES,\n    data: 'host:1:UsbADB',\n    useChecksum: true,\n  });\n  await adb.startAuthentication();\n\n  expect(sendRaw).toHaveBeenCalledTimes(2);\n  expect(sendRaw).toBeCalledWith(expectedAuthMessage.encodeHeader());\n  expect(sendRaw).toBeCalledWith(expectedAuthMessage.data);\n});\n\ntest('connectedMessage', async () => {\n  const adb = new AdbOverWebUsb();\n  adb.key = {} as unknown as CryptoKeyPair;\n  adb.state = AdbState.AUTH_STEP2;\n\n  const onConnected = jest.fn();\n  adb.onConnected = onConnected;\n\n  const expectedMaxPayload = 42;\n  const connectedMsg = AdbMsgImpl.create({\n    cmd: 'CNXN',\n    arg0: VERSION_WITH_CHECKSUM,\n    arg1: expectedMaxPayload,\n    data: utf8Encode('device'),\n    useChecksum: true,\n  });\n  await adb.onMessage(connectedMsg);\n\n  expect(adb.state).toBe(AdbState.CONNECTED);\n  expect(adb.maxPayload).toBe(expectedMaxPayload);\n  expect(adb.devProps).toBe('device');\n  expect(adb.useChecksum).toBe(true);\n  expect(onConnected).toHaveBeenCalledTimes(1);\n});\n\ntest('shellOpening', () => {\n  const adb = new AdbOverWebUsb();\n  const openStream = jest.fn();\n  adb.openStream = openStream;\n\n  adb.shell('test');\n  expect(openStream).toBeCalledWith('shell:test');\n});\n"]}
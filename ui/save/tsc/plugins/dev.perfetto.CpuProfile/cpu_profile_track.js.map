{"version":3,"file":"cpu_profile_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CpuProfile/cpu_profile_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,gDAAgD;AAEhD,0DAA6D;AAC7D,+EAAwE;AACxE,iFAA8E;AAC9E,qEAAuD;AAEvD,2EAAmF;AAOnF,MAAa,eAAgB,SAAQ,iCAAoC;IAI7D;IAHV,YACE,KAAY,EACZ,GAAW,EACH,IAAY;QAEpB,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAFV,SAAI,GAAJ,IAAI,CAAQ;IAGtB,CAAC;IAES,UAAU;QAClB,OAAO,EAAC,GAAG,6BAAS,EAAE,UAAU,EAAE,kBAAG,EAAC,CAAC;IACzC,CAAC;IAES,UAAU,CAAC,GAAkB;QACrC,MAAM,SAAS,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,IAAA,sBAAY,EAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACpC,MAAM,WAAW,GAAG,IAAA,6BAAiB,EAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACtD,OAAO,EAAC,GAAG,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;IAClD,CAAC;IAED,eAAe,CAAC,MAAe;QAC7B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,GAAG,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC;QACpD,CAAC;IACH,CAAC;IAED,YAAY;QACV,OAAO;;;;;;;;;qBASU,IAAI,CAAC,IAAI;;KAEzB,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,EAAU;QAEV,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,WAAW,KAAK,SAAS;YAAE,OAAO,SAAS,CAAC;QAChD,OAAO,EAAC,GAAG,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;IAC3C,CAAC;IAED,YAAY,CAAC,SAA8B;QACzC,MAAM,EAAC,EAAE,EAAE,IAAI,EAAC,GAAG,SAAS,CAAC;QAC7B,OAAO,IAAI,kEAAsC,CAC/C,IAAI,CAAC,KAAK,EACV,EAAE,EACF,IAAA,sBAAY,EAAC,IAAI,CAAC,CACnB,CAAC;IACJ,CAAC;CACF;AAzDD,0CAyDC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertExists} from '../../base/logging';\nimport {TrackEventDetails, TrackEventSelection} from '../../public/selection';\nimport {getColorForSample} from '../../components/colorizer';\nimport {BaseSliceTrack} from '../../components/tracks/base_slice_track';\nimport {NAMED_ROW, NamedRow} from '../../components/tracks/named_slice_track';\nimport {NUM} from '../../trace_processor/query_result';\nimport {Slice} from '../../public/track';\nimport {CpuProfileSampleFlamegraphDetailsPanel} from './cpu_profile_details_panel';\nimport {Trace} from '../../public/trace';\n\ninterface CpuProfileRow extends NamedRow {\n  callsiteId: number;\n}\n\nexport class CpuProfileTrack extends BaseSliceTrack<Slice, CpuProfileRow> {\n  constructor(\n    trace: Trace,\n    uri: string,\n    private utid: number,\n  ) {\n    super(trace, uri);\n  }\n\n  protected getRowSpec(): CpuProfileRow {\n    return {...NAMED_ROW, callsiteId: NUM};\n  }\n\n  protected rowToSlice(row: CpuProfileRow): Slice {\n    const baseSlice = super.rowToSliceBase(row);\n    const name = assertExists(row.name);\n    const colorScheme = getColorForSample(row.callsiteId);\n    return {...baseSlice, title: name, colorScheme};\n  }\n\n  onUpdatedSlices(slices: Slice[]) {\n    for (const slice of slices) {\n      slice.isHighlighted = slice === this.hoveredSlice;\n    }\n  }\n\n  getSqlSource(): string {\n    return `\n      select\n        p.id,\n        ts,\n        0 as dur,\n        0 as depth,\n        'CPU Sample' as name,\n        callsite_id as callsiteId\n      from cpu_profile_stack_sample p\n      where utid = ${this.utid}\n      order by ts\n    `;\n  }\n\n  async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const baseDetails = await super.getSelectionDetails(id);\n    if (baseDetails === undefined) return undefined;\n    return {...baseDetails, utid: this.utid};\n  }\n\n  detailsPanel(selection: TrackEventSelection) {\n    const {ts, utid} = selection;\n    return new CpuProfileSampleFlamegraphDetailsPanel(\n      this.trace,\n      ts,\n      assertExists(utid),\n    );\n  }\n}\n"]}
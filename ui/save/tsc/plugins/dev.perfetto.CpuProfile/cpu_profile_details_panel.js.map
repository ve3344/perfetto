{"version":3,"file":"cpu_profile_details_panel.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.CpuProfile/cpu_profile_details_panel.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AAExB,wEAG2C;AAC3C,kEAA6D;AAK7D,+DAAyD;AAEzD,yDAIkC;AAElC,MAAa,sCAAsC;IAQvC;IALO,UAAU,CAAkB;IACpC,aAAa,CAAuD;IAE7E,YACE,KAAY,EACJ,EAAQ,EAChB,IAAY;QADJ,OAAE,GAAF,EAAE,CAAM;QAGhB,MAAM,OAAO,GAAG,IAAA,6CAA0B,EACxC;;;;;;;;;;;;;2BAaqB,EAAE,iBAAiB,IAAI;;;OAG3C,EACD;YACE;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,IAAI,EAAE,EAAE;gBACR,UAAU,EAAE,YAAY;aACzB;SACF,EACD,kDAAkD,EAClD,CAAC,EAAC,IAAI,EAAE,cAAc,EAAE,WAAW,EAAE,SAAS,EAAC,CAAC,EAChD;YACE;gBACE,IAAI,EAAE,aAAa;gBACnB,WAAW,EAAE,aAAa;gBAC1B,gBAAgB,EAAE,aAAa;aAChC;YACD;gBACE,IAAI,EAAE,aAAa;gBACnB,WAAW,EAAE,aAAa;gBAC1B,gBAAgB,EAAE,aAAa;aAChC;SACF,CACF,CAAC;QACF,IAAI,CAAC,aAAa,GAAG;YACnB,MAAM,EAAE,oCAAuB;YAC/B,KAAK,EAAE,uBAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC;SAC9C,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,kCAAe,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC5E,CAAC;IAED,MAAM;QACJ,OAAO,IAAA,iBAAC,EACN,qBAAqB,EACrB,IAAA,iBAAC,EACC,4BAAY,EACZ;YACE,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,IAAA,iBAAC,EAAC,QAAQ,EAAE,qBAAqB,CAAC;YACzC,WAAW,EAAE,EAAE;YACf,OAAO,EAAE,CAAC,IAAA,iBAAC,EAAC,UAAU,EAAE,aAAa,EAAE,IAAA,iBAAC,EAAC,qBAAS,EAAE,EAAC,EAAE,EAAE,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC,CAAC;SACrE,EACD,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CACzB,CACF,CAAC;IACJ,CAAC;CACF;AAzED,wFAyEC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {time} from '../../base/time';\nimport {\n  metricsFromTableOrSubquery,\n  QueryFlamegraph,\n} from '../../components/query_flamegraph';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {\n  TrackEventDetailsPanel,\n  TrackEventDetailsPanelSerializeArgs,\n} from '../../public/details_panel';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {Trace} from '../../public/trace';\nimport {\n  Flamegraph,\n  FLAMEGRAPH_STATE_SCHEMA,\n  FlamegraphState,\n} from '../../widgets/flamegraph';\n\nexport class CpuProfileSampleFlamegraphDetailsPanel\n  implements TrackEventDetailsPanel\n{\n  private readonly flamegraph: QueryFlamegraph;\n  readonly serialization: TrackEventDetailsPanelSerializeArgs<FlamegraphState>;\n\n  constructor(\n    trace: Trace,\n    private ts: time,\n    utid: number,\n  ) {\n    const metrics = metricsFromTableOrSubquery(\n      `\n        (\n          select\n            id,\n            parent_id as parentId,\n            name,\n            mapping_name,\n            source_file,\n            cast(line_number AS text) as line_number,\n            self_count\n          from _callstacks_for_callsites!((\n            select p.callsite_id\n            from cpu_profile_stack_sample p\n            where p.ts = ${ts} and p.utid = ${utid}\n          ))\n        )\n      `,\n      [\n        {\n          name: 'CPU Profile Samples',\n          unit: '',\n          columnName: 'self_count',\n        },\n      ],\n      'include perfetto module callstacks.stack_profile',\n      [{name: 'mapping_name', displayName: 'Mapping'}],\n      [\n        {\n          name: 'source_file',\n          displayName: 'Source File',\n          mergeAggregation: 'ONE_OR_NULL',\n        },\n        {\n          name: 'line_number',\n          displayName: 'Line Number',\n          mergeAggregation: 'ONE_OR_NULL',\n        },\n      ],\n    );\n    this.serialization = {\n      schema: FLAMEGRAPH_STATE_SCHEMA,\n      state: Flamegraph.createDefaultState(metrics),\n    };\n    this.flamegraph = new QueryFlamegraph(trace, metrics, this.serialization);\n  }\n\n  render() {\n    return m(\n      '.flamegraph-profile',\n      m(\n        DetailsShell,\n        {\n          fillParent: true,\n          title: m('.title', 'CPU Profile Samples'),\n          description: [],\n          buttons: [m('div.time', `Timestamp: `, m(Timestamp, {ts: this.ts}))],\n        },\n        this.flamegraph.render(),\n      ),\n    );\n  }\n}\n"]}
{"version":3,"file":"logs_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AndroidLog/logs_track.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Time, duration, time} from '../../base/time';\nimport {LIMIT, TrackData} from '../../components/tracks/track_data';\nimport {TimelineFetcher} from '../../components/tracks/track_helper';\nimport {checkerboardExcept} from '../../components/checkerboard';\nimport {Engine} from '../../trace_processor/engine';\nimport {LONG, NUM} from '../../trace_processor/query_result';\nimport {Track} from '../../public/track';\nimport {TrackRenderContext} from '../../public/track';\n\nexport interface Data extends TrackData {\n  // Total number of log events within [start, end], before any quantization.\n  numEvents: number;\n\n  // Below: data quantized by resolution and aggregated by event priority.\n  timestamps: BigInt64Array;\n\n  // Each Uint8 value has the i-th bit is set if there is at least one log\n  // event at the i-th priority level at the corresponding time in |timestamps|.\n  priorities: Uint8Array;\n}\n\nconst LEVELS: LevelCfg[] = [\n  {color: 'hsl(122, 39%, 49%)', prios: [0, 1, 2, 3]}, // Up to DEBUG: Green.\n  {color: 'hsl(0, 0%, 70%)', prios: [4]}, // 4 (INFO) -> Gray.\n  {color: 'hsl(45, 100%, 51%)', prios: [5]}, // 5 (WARN) -> Amber.\n  {color: 'hsl(4, 90%, 58%)', prios: [6]}, // 6 (ERROR) -> Red.\n  {color: 'hsl(291, 64%, 42%)', prios: [7]}, // 7 (FATAL) -> Purple\n];\n\nconst MARGIN_TOP = 2;\nconst RECT_HEIGHT = 35;\nconst EVT_PX = 2; // Width of an event tick in pixels.\n\ninterface LevelCfg {\n  color: string;\n  prios: number[];\n}\n\nexport class AndroidLogTrack implements Track {\n  private fetcher = new TimelineFetcher<Data>(this.onBoundsChange.bind(this));\n\n  constructor(private engine: Engine) {}\n\n  async onUpdate({\n    visibleWindow,\n    resolution,\n  }: TrackRenderContext): Promise<void> {\n    await this.fetcher.requestData(visibleWindow.toTimeSpan(), resolution);\n  }\n\n  async onDestroy(): Promise<void> {\n    this.fetcher[Symbol.dispose]();\n  }\n\n  getHeight(): number {\n    return 40;\n  }\n\n  async onBoundsChange(\n    start: time,\n    end: time,\n    resolution: duration,\n  ): Promise<Data> {\n    const queryRes = await this.engine.query(`\n      select\n        cast(ts / ${resolution} as integer) * ${resolution} as tsQuant,\n        prio,\n        count(prio) as numEvents\n      from android_logs\n      where ts >= ${start} and ts <= ${end}\n      group by tsQuant, prio\n      order by tsQuant, prio limit ${LIMIT};`);\n\n    const rowCount = queryRes.numRows();\n    const result = {\n      start,\n      end,\n      resolution,\n      length: rowCount,\n      numEvents: 0,\n      timestamps: new BigInt64Array(rowCount),\n      priorities: new Uint8Array(rowCount),\n    };\n\n    const it = queryRes.iter({tsQuant: LONG, prio: NUM, numEvents: NUM});\n    for (let row = 0; it.valid(); it.next(), row++) {\n      result.timestamps[row] = it.tsQuant;\n      const prio = Math.min(it.prio, 7);\n      result.priorities[row] |= 1 << prio;\n      result.numEvents += it.numEvents;\n    }\n    return result;\n  }\n\n  render({ctx, size, timescale}: TrackRenderContext): void {\n    const data = this.fetcher.data;\n\n    if (data === undefined) return; // Can't possibly draw anything.\n\n    const dataStartPx = timescale.timeToPx(data.start);\n    const dataEndPx = timescale.timeToPx(data.end);\n\n    checkerboardExcept(\n      ctx,\n      this.getHeight(),\n      0,\n      size.width,\n      dataStartPx,\n      dataEndPx,\n    );\n\n    const quantWidth = Math.max(\n      EVT_PX,\n      timescale.durationToPx(data.resolution),\n    );\n    const blockH = RECT_HEIGHT / LEVELS.length;\n    for (let i = 0; i < data.timestamps.length; i++) {\n      for (let lev = 0; lev < LEVELS.length; lev++) {\n        let hasEventsForCurColor = false;\n        for (const prio of LEVELS[lev].prios) {\n          if (data.priorities[i] & (1 << prio)) hasEventsForCurColor = true;\n        }\n        if (!hasEventsForCurColor) continue;\n        ctx.fillStyle = LEVELS[lev].color;\n        const timestamp = Time.fromRaw(data.timestamps[i]);\n        const px = Math.floor(timescale.timeToPx(timestamp));\n        ctx.fillRect(px, MARGIN_TOP + blockH * lev, quantWidth, blockH);\n      } // for(lev)\n    } // for (timestamps)\n  }\n}\n"]}
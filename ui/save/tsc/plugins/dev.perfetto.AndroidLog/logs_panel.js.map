{"version":3,"file":"logs_panel.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AndroidLog/logs_panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {time, Time, TimeSpan} from '../../base/time';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {Engine} from '../../trace_processor/engine';\nimport {LONG, NUM, NUM_NULL, STR} from '../../trace_processor/query_result';\nimport {Monitor} from '../../base/monitor';\nimport {AsyncLimiter} from '../../base/async_limiter';\nimport {escapeGlob, escapeQuery} from '../../trace_processor/query_utils';\nimport {Select} from '../../widgets/select';\nimport {Button} from '../../widgets/button';\nimport {TextInput} from '../../widgets/text_input';\nimport {VirtualTable, VirtualTableRow} from '../../widgets/virtual_table';\nimport {classNames} from '../../base/classnames';\nimport {TagInput} from '../../widgets/tag_input';\nimport {Store} from '../../base/store';\nimport {Trace} from '../../public/trace';\n\nconst ROW_H = 20;\n\nexport interface LogFilteringCriteria {\n  minimumLevel: number;\n  tags: string[];\n  textEntry: string;\n  hideNonMatching: boolean;\n}\n\nexport interface LogPanelAttrs {\n  filterStore: Store<LogFilteringCriteria>;\n  trace: Trace;\n}\n\ninterface Pagination {\n  offset: number;\n  count: number;\n}\n\ninterface LogEntries {\n  offset: number;\n  timestamps: time[];\n  priorities: number[];\n  tags: string[];\n  messages: string[];\n  isHighlighted: boolean[];\n  processName: string[];\n  totalEvents: number; // Count of the total number of events within this window\n}\n\nexport class LogPanel implements m.ClassComponent<LogPanelAttrs> {\n  private entries?: LogEntries;\n\n  private pagination: Pagination = {\n    offset: 0,\n    count: 0,\n  };\n  private readonly rowsMonitor: Monitor;\n  private readonly filterMonitor: Monitor;\n  private readonly queryLimiter = new AsyncLimiter();\n\n  constructor({attrs}: m.CVnode<LogPanelAttrs>) {\n    this.rowsMonitor = new Monitor([\n      () => attrs.filterStore.state,\n      () => attrs.trace.timeline.visibleWindow.toTimeSpan().start,\n      () => attrs.trace.timeline.visibleWindow.toTimeSpan().end,\n    ]);\n\n    this.filterMonitor = new Monitor([() => attrs.filterStore.state]);\n  }\n\n  view({attrs}: m.CVnode<LogPanelAttrs>) {\n    if (this.rowsMonitor.ifStateChanged()) {\n      this.reloadData(attrs);\n    }\n\n    const hasProcessNames =\n      this.entries &&\n      this.entries.processName.filter((name) => name).length > 0;\n    const totalEvents = this.entries?.totalEvents ?? 0;\n\n    return m(\n      DetailsShell,\n      {\n        title: 'Android Logs',\n        description: `Total messages: ${totalEvents}`,\n        buttons: m(LogsFilters, {trace: attrs.trace, store: attrs.filterStore}),\n      },\n      m(VirtualTable, {\n        className: 'pf-android-logs-table',\n        columns: [\n          {header: 'Timestamp', width: '13em'},\n          {header: 'Level', width: '4em'},\n          {header: 'Tag', width: '13em'},\n          ...(hasProcessNames ? [{header: 'Process', width: '18em'}] : []),\n          // '' means column width can vary depending on the content.\n          // This works as this is the last column, but using this for other\n          // columns will pull the columns to the right out of line.\n          {header: 'Message', width: ''},\n        ],\n        rows: this.renderRows(hasProcessNames),\n        firstRowOffset: this.entries?.offset ?? 0,\n        numRows: this.entries?.totalEvents ?? 0,\n        rowHeight: ROW_H,\n        onReload: (offset, count) => {\n          this.pagination = {offset, count};\n          this.reloadData(attrs);\n        },\n        onRowHover: (id) => {\n          const timestamp = this.entries?.timestamps[id];\n          if (timestamp !== undefined) {\n            attrs.trace.timeline.hoverCursorTimestamp = timestamp;\n          }\n        },\n        onRowOut: () => {\n          attrs.trace.timeline.hoverCursorTimestamp = undefined;\n        },\n      }),\n    );\n  }\n\n  private reloadData(attrs: LogPanelAttrs) {\n    this.queryLimiter.schedule(async () => {\n      const visibleSpan = attrs.trace.timeline.visibleWindow.toTimeSpan();\n\n      if (this.filterMonitor.ifStateChanged()) {\n        await updateLogView(attrs.trace.engine, attrs.filterStore.state);\n      }\n\n      this.entries = await updateLogEntries(\n        attrs.trace.engine,\n        visibleSpan,\n        this.pagination,\n      );\n\n      attrs.trace.scheduleFullRedraw();\n    });\n  }\n\n  private renderRows(hasProcessNames: boolean | undefined): VirtualTableRow[] {\n    if (!this.entries) {\n      return [];\n    }\n\n    const timestamps = this.entries.timestamps;\n    const priorities = this.entries.priorities;\n    const tags = this.entries.tags;\n    const messages = this.entries.messages;\n    const processNames = this.entries.processName;\n\n    const rows: VirtualTableRow[] = [];\n    for (let i = 0; i < this.entries.timestamps.length; i++) {\n      const priorityLetter = LOG_PRIORITIES[priorities[i]][0];\n      const ts = timestamps[i];\n      const prioClass = priorityLetter ?? '';\n\n      rows.push({\n        id: i,\n        className: classNames(\n          prioClass,\n          this.entries.isHighlighted[i] && 'pf-highlighted',\n        ),\n        cells: [\n          m(Timestamp, {ts}),\n          priorityLetter || '?',\n          tags[i],\n          ...(hasProcessNames ? [processNames[i]] : []),\n          messages[i],\n        ],\n      });\n    }\n\n    return rows;\n  }\n}\n\nexport const LOG_PRIORITIES = [\n  '-',\n  '-',\n  'Verbose',\n  'Debug',\n  'Info',\n  'Warn',\n  'Error',\n  'Fatal',\n];\nconst IGNORED_STATES = 2;\n\ninterface LogPriorityWidgetAttrs {\n  readonly trace: Trace;\n  readonly options: string[];\n  readonly selectedIndex: number;\n  readonly onSelect: (id: number) => void;\n}\n\nclass LogPriorityWidget implements m.ClassComponent<LogPriorityWidgetAttrs> {\n  view(vnode: m.Vnode<LogPriorityWidgetAttrs>) {\n    const attrs = vnode.attrs;\n    const optionComponents = [];\n    for (let i = IGNORED_STATES; i < attrs.options.length; i++) {\n      const selected = i === attrs.selectedIndex;\n      optionComponents.push(\n        m('option', {value: i, selected}, attrs.options[i]),\n      );\n    }\n    return m(\n      Select,\n      {\n        onchange: (e: Event) => {\n          const selectionValue = (e.target as HTMLSelectElement).value;\n          attrs.onSelect(Number(selectionValue));\n          attrs.trace.scheduleFullRedraw();\n        },\n      },\n      optionComponents,\n    );\n  }\n}\n\ninterface LogTextWidgetAttrs {\n  readonly trace: Trace;\n  readonly onChange: (value: string) => void;\n}\n\nclass LogTextWidget implements m.ClassComponent<LogTextWidgetAttrs> {\n  view({attrs}: m.CVnode<LogTextWidgetAttrs>) {\n    return m(TextInput, {\n      placeholder: 'Search logs...',\n      onkeyup: (e: KeyboardEvent) => {\n        // We want to use the value of the input field after it has been\n        // updated with the latest key (onkeyup).\n        const htmlElement = e.target as HTMLInputElement;\n        attrs.onChange(htmlElement.value);\n        attrs.trace.scheduleFullRedraw();\n      },\n    });\n  }\n}\n\ninterface FilterByTextWidgetAttrs {\n  readonly hideNonMatching: boolean;\n  readonly disabled: boolean;\n  readonly onClick: () => void;\n}\n\nclass FilterByTextWidget implements m.ClassComponent<FilterByTextWidgetAttrs> {\n  view({attrs}: m.Vnode<FilterByTextWidgetAttrs>) {\n    const icon = attrs.hideNonMatching ? 'unfold_less' : 'unfold_more';\n    const tooltip = attrs.hideNonMatching\n      ? 'Expand all and view highlighted'\n      : 'Collapse all';\n    return m(Button, {\n      icon,\n      title: tooltip,\n      disabled: attrs.disabled,\n      onclick: attrs.onClick,\n    });\n  }\n}\n\ninterface LogsFiltersAttrs {\n  readonly trace: Trace;\n  readonly store: Store<LogFilteringCriteria>;\n}\n\nexport class LogsFilters implements m.ClassComponent<LogsFiltersAttrs> {\n  view({attrs}: m.CVnode<LogsFiltersAttrs>) {\n    return [\n      m('.log-label', 'Log Level'),\n      m(LogPriorityWidget, {\n        trace: attrs.trace,\n        options: LOG_PRIORITIES,\n        selectedIndex: attrs.store.state.minimumLevel,\n        onSelect: (minimumLevel) => {\n          attrs.store.edit((draft) => {\n            draft.minimumLevel = minimumLevel;\n          });\n        },\n      }),\n      m(TagInput, {\n        placeholder: 'Filter by tag...',\n        tags: attrs.store.state.tags,\n        onTagAdd: (tag) => {\n          attrs.store.edit((draft) => {\n            draft.tags.push(tag);\n          });\n        },\n        onTagRemove: (index) => {\n          attrs.store.edit((draft) => {\n            draft.tags.splice(index, 1);\n          });\n        },\n      }),\n      m(LogTextWidget, {\n        trace: attrs.trace,\n        onChange: (text) => {\n          attrs.store.edit((draft) => {\n            draft.textEntry = text;\n          });\n        },\n      }),\n      m(FilterByTextWidget, {\n        hideNonMatching: attrs.store.state.hideNonMatching,\n        onClick: () => {\n          attrs.store.edit((draft) => {\n            draft.hideNonMatching = !draft.hideNonMatching;\n          });\n        },\n        disabled: attrs.store.state.textEntry === '',\n      }),\n    ];\n  }\n}\n\nasync function updateLogEntries(\n  engine: Engine,\n  span: TimeSpan,\n  pagination: Pagination,\n): Promise<LogEntries> {\n  const rowsResult = await engine.query(`\n        select\n          ts,\n          prio,\n          ifnull(tag, '[NULL]') as tag,\n          ifnull(msg, '[NULL]') as msg,\n          is_msg_highlighted as isMsgHighlighted,\n          is_process_highlighted as isProcessHighlighted,\n          ifnull(process_name, '') as processName\n        from filtered_logs\n        where ts >= ${span.start} and ts <= ${span.end}\n        order by ts\n        limit ${pagination.offset}, ${pagination.count}\n    `);\n\n  const timestamps: time[] = [];\n  const priorities = [];\n  const tags = [];\n  const messages = [];\n  const isHighlighted = [];\n  const processName = [];\n\n  const it = rowsResult.iter({\n    ts: LONG,\n    prio: NUM,\n    tag: STR,\n    msg: STR,\n    isMsgHighlighted: NUM_NULL,\n    isProcessHighlighted: NUM,\n    processName: STR,\n  });\n  for (; it.valid(); it.next()) {\n    timestamps.push(Time.fromRaw(it.ts));\n    priorities.push(it.prio);\n    tags.push(it.tag);\n    messages.push(it.msg);\n    isHighlighted.push(\n      it.isMsgHighlighted === 1 || it.isProcessHighlighted === 1,\n    );\n    processName.push(it.processName);\n  }\n\n  const queryRes = await engine.query(`\n    select\n      count(*) as totalEvents\n    from filtered_logs\n    where ts >= ${span.start} and ts <= ${span.end}\n  `);\n  const {totalEvents} = queryRes.firstRow({totalEvents: NUM});\n\n  return {\n    offset: pagination.offset,\n    timestamps,\n    priorities,\n    tags,\n    messages,\n    isHighlighted,\n    processName,\n    totalEvents,\n  };\n}\n\nasync function updateLogView(engine: Engine, filter: LogFilteringCriteria) {\n  await engine.query('drop view if exists filtered_logs');\n\n  const globMatch = composeGlobMatch(filter.hideNonMatching, filter.textEntry);\n  let selectedRows = `select prio, ts, tag, msg,\n      process.name as process_name, ${globMatch}\n      from android_logs\n      left join thread using(utid)\n      left join process using(upid)\n      where prio >= ${filter.minimumLevel}`;\n  if (filter.tags.length) {\n    selectedRows += ` and tag in (${serializeTags(filter.tags)})`;\n  }\n\n  // We extract only the rows which will be visible.\n  await engine.query(`create view filtered_logs as select *\n    from (${selectedRows})\n    where is_msg_chosen is 1 or is_process_chosen is 1`);\n}\n\nfunction serializeTags(tags: string[]) {\n  return tags.map((tag) => escapeQuery(tag)).join();\n}\n\nfunction composeGlobMatch(isCollaped: boolean, textEntry: string) {\n  if (isCollaped) {\n    // If the entries are collapsed, we won't highlight any lines.\n    return `msg glob ${escapeGlob(textEntry)} as is_msg_chosen,\n      (process.name is not null and process.name glob ${escapeGlob(\n        textEntry,\n      )}) as is_process_chosen,\n      0 as is_msg_highlighted,\n      0 as is_process_highlighted`;\n  } else if (!textEntry) {\n    // If there is no text entry, we will show all lines, but won't highlight.\n    // any.\n    return `1 as is_msg_chosen,\n      1 as is_process_chosen,\n      0 as is_msg_highlighted,\n      0 as is_process_highlighted`;\n  } else {\n    return `1 as is_msg_chosen,\n      1 as is_process_chosen,\n      msg glob ${escapeGlob(textEntry)} as is_msg_highlighted,\n      (process.name is not null and process.name glob ${escapeGlob(\n        textEntry,\n      )}) as is_process_highlighted`;\n  }\n}\n"]}
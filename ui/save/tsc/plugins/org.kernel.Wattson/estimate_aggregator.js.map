{"version":3,"file":"estimate_aggregator.js","sourceRoot":"","sources":["../../../../src/plugins/org.kernel.Wattson/estimate_aggregator.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAKjC,0DAAmE;AAEnE,4CAAwC;AAExC,MAAa,kCAAkC;IAGpC,EAAE,GAAG,8BAA8B,CAAC;IAE7C,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,IAAmB;QAC3D,MAAM,MAAM,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QAEtD,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACpC,IACE,SAAS,EAAE,IAAI,EAAE,IAAI,KAAK,uCAAyB;gBACnD,IAAA,cAAM,EAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,EAC/B,CAAC;gBACD,cAAc,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;QACD,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;QAE9C,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAChE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAEpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,sBAAsB,CACpB,IAAU,EACV,cAAqC;QAErC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QACvC,IAAI,KAAK,GAAG;;;;;UAKN,IAAI,CAAC,KAAK;UACV,QAAQ;;;;;;;oBAOE,IAAI,CAAC,EAAE;KACtB,CAAC;QAEF,2EAA2E;QAC3E,kEAAkE;QAClE,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACX,KAAK,IAAI,YAAY,CAAC;YACxB,CAAC;YACD,KAAK,IAAI;;WAEJ,aAAa;oBACJ,aAAa,gBAAgB,QAAQ;oBACrC,aAAa;;OAE1B,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,KAAK,IAAI,GAAG,CAAC;QAEb,OAAO,KAAK,CAAC;IACf,CAAC;IAED,oBAAoB;QAClB,OAAO;YACL;gBACE,KAAK,EAAE,MAAM;gBACb,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,MAAM;aACjB;YACD;gBACE,KAAK,EAAE,sBAAsB;gBAC7B,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,OAAO;gBACjB,GAAG,EAAE,IAAI;aACV;YACD;gBACE,KAAK,EAAE,wBAAwB;gBAC/B,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,QAAQ;gBAClB,GAAG,EAAE,IAAI;aACV;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ,KAAI,CAAC;IAEnB,UAAU;QACR,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,iBAAiB;QACf,OAAO,EAAC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC;IAC5C,CAAC;CACF;AAnGD,gFAmGC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ColumnDef, Sorting} from '../../public/aggregation';\nimport {Area, AreaSelection} from '../../public/selection';\nimport {Engine} from '../../trace_processor/engine';\nimport {CPUSS_ESTIMATE_TRACK_KIND} from '../../public/track_kinds';\nimport {AreaSelectionAggregator} from '../../public/selection';\nimport {exists} from '../../base/utils';\n\nexport class WattsonEstimateSelectionAggregator\n  implements AreaSelectionAggregator\n{\n  readonly id = 'wattson_estimate_aggregation';\n\n  async createAggregateView(engine: Engine, area: AreaSelection) {\n    await engine.query(`drop view if exists ${this.id};`);\n\n    const estimateTracks: string[] = [];\n    for (const trackInfo of area.tracks) {\n      if (\n        trackInfo?.tags?.kind === CPUSS_ESTIMATE_TRACK_KIND &&\n        exists(trackInfo.tags?.wattson)\n      ) {\n        estimateTracks.push(`${trackInfo.tags.wattson}`);\n      }\n    }\n    if (estimateTracks.length === 0) return false;\n\n    const query = this.getEstimateTracksQuery(area, estimateTracks);\n    engine.query(query);\n\n    return true;\n  }\n\n  getEstimateTracksQuery(\n    area: Area,\n    estimateTracks: ReadonlyArray<string>,\n  ): string {\n    const duration = area.end - area.start;\n    let query = `\n      INCLUDE PERFETTO MODULE wattson.curves.estimates;\n\n      CREATE OR REPLACE PERFETTO TABLE _ui_selection_window AS\n      SELECT\n        ${area.start} as ts,\n        ${duration} as dur;\n\n      DROP TABLE IF EXISTS _windowed_cpuss_estimate;\n      CREATE VIRTUAL TABLE _windowed_cpuss_estimate\n      USING\n        SPAN_JOIN(_ui_selection_window, _system_state_mw);\n\n      CREATE VIEW ${this.id} AS\n    `;\n\n    // Convert average power track to total energy in UI window, then divide by\n    // duration of window to get average estimated power of the window\n    estimateTracks.forEach((estimateTrack, i) => {\n      if (i != 0) {\n        query += `UNION ALL `;\n      }\n      query += `\n        SELECT\n        '${estimateTrack}' as name,\n        ROUND(SUM(${estimateTrack}_mw * dur) / ${duration}, 2) as power,\n        ROUND(SUM(${estimateTrack}_mw * dur) / 1000000000, 2) as energy\n        FROM _windowed_cpuss_estimate\n      `;\n    });\n    query += `;`;\n\n    return query;\n  }\n\n  getColumnDefinitions(): ColumnDef[] {\n    return [\n      {\n        title: 'Name',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'name',\n      },\n      {\n        title: 'Power (estimated mW)',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'power',\n        sum: true,\n      },\n      {\n        title: 'Energy (estimated mWs)',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'energy',\n        sum: true,\n      },\n    ];\n  }\n\n  async getExtra() {}\n\n  getTabName() {\n    return 'Wattson estimates';\n  }\n\n  getDefaultSorting(): Sorting {\n    return {column: 'name', direction: 'ASC'};\n  }\n}\n"]}
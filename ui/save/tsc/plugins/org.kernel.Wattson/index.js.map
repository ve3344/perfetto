{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/org.kernel.Wattson/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  BaseCounterTrack,\n  CounterOptions,\n} from '../../components/tracks/base_counter_track';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {CPUSS_ESTIMATE_TRACK_KIND} from '../../public/track_kinds';\nimport {TrackNode} from '../../public/workspace';\nimport {WattsonEstimateSelectionAggregator} from './estimate_aggregator';\nimport {WattsonPackageSelectionAggregator} from './package_aggregator';\nimport {WattsonProcessSelectionAggregator} from './process_aggregator';\nimport {WattsonThreadSelectionAggregator} from './thread_aggregator';\nimport {Engine} from '../../trace_processor/engine';\nimport {NUM} from '../../trace_processor/query_result';\n\nexport default class implements PerfettoPlugin {\n  static readonly id = `org.kernel.Wattson`;\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    // Short circuit if Wattson is not supported for this Perfetto trace\n    if (!(await hasWattsonSupport(ctx.engine))) return;\n\n    const group = new TrackNode({title: 'Wattson', isSummary: true});\n    ctx.workspace.addChildInOrder(group);\n\n    // CPUs estimate as part of CPU subsystem\n    const cpus = ctx.traceInfo.cpus;\n    for (const cpu of cpus) {\n      const queryKey = `cpu${cpu}_mw`;\n      const uri = `/wattson/cpu_subsystem_estimate_cpu${cpu}`;\n      const title = `Cpu${cpu} Estimate`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        track: new CpuSubsystemEstimateTrack(ctx, uri, queryKey),\n        tags: {\n          kind: CPUSS_ESTIMATE_TRACK_KIND,\n          wattson: `CPU${cpu}`,\n          groupName: `Wattson`,\n        },\n      });\n      group.addChildInOrder(new TrackNode({uri, title}));\n    }\n\n    const uri = `/wattson/cpu_subsystem_estimate_dsu_scu`;\n    const title = `DSU/SCU Estimate`;\n    ctx.tracks.registerTrack({\n      uri,\n      title,\n      track: new CpuSubsystemEstimateTrack(ctx, uri, `dsu_scu_mw`),\n      tags: {\n        kind: CPUSS_ESTIMATE_TRACK_KIND,\n        wattson: 'Dsu_Scu',\n        groupName: `Wattson`,\n      },\n    });\n    group.addChildInOrder(new TrackNode({uri, title}));\n\n    // Register selection aggregators.\n    // NOTE: the registration order matters because the laste two aggregators\n    // depend on views created by the first two.\n    ctx.selection.registerAreaSelectionAggregator(\n      new WattsonEstimateSelectionAggregator(),\n    );\n    ctx.selection.registerAreaSelectionAggregator(\n      new WattsonThreadSelectionAggregator(),\n    );\n    ctx.selection.registerAreaSelectionAggregator(\n      new WattsonProcessSelectionAggregator(),\n    );\n    ctx.selection.registerAreaSelectionAggregator(\n      new WattsonPackageSelectionAggregator(),\n    );\n  }\n}\n\nclass CpuSubsystemEstimateTrack extends BaseCounterTrack {\n  readonly queryKey: string;\n\n  constructor(trace: Trace, uri: string, queryKey: string) {\n    super(trace, uri);\n    this.queryKey = queryKey;\n  }\n\n  async onInit() {\n    await this.engine.query(\n      `INCLUDE PERFETTO MODULE wattson.curves.estimates;`,\n    );\n  }\n\n  protected getDefaultCounterOptions(): CounterOptions {\n    const options = super.getDefaultCounterOptions();\n    options.yRangeSharingKey = `CpuSubsystem`;\n    options.unit = `mW`;\n    return options;\n  }\n\n  getSqlSource() {\n    return `select ts, ${this.queryKey} as value from _system_state_mw`;\n  }\n}\n\nasync function hasWattsonSupport(engine: Engine): Promise<boolean> {\n  // These tables are hard requirements and are the bare minimum needed for\n  // Wattson to run, so check that these tables are populated\n  const queryChecks: string[] = [\n    `\n    INCLUDE PERFETTO MODULE wattson.device_infos;\n    SELECT COUNT(*) as numRows FROM _wattson_device\n    `,\n    `\n    INCLUDE PERFETTO MODULE linux.cpu.frequency;\n    SELECT COUNT(*) as numRows FROM cpu_frequency_counters\n    `,\n    `\n    INCLUDE PERFETTO MODULE linux.cpu.idle;\n    SELECT COUNT(*) as numRows FROM cpu_idle_counters\n    `,\n  ];\n  for (const queryCheck of queryChecks) {\n    const checkValue = await engine.query(queryCheck);\n    if (checkValue.firstRow({numRows: NUM}).numRows === 0) return false;\n  }\n\n  return true;\n}\n"]}
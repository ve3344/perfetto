{"version":3,"file":"process_aggregator.js","sourceRoot":"","sources":["../../../../src/plugins/org.kernel.Wattson/process_aggregator.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,4CAAwC;AAGxC,0DAA8D;AAG9D,MAAa,iCAAiC;IAGnC,EAAE,GAAG,6BAA6B,CAAC;IAE5C,KAAK,CAAC,mBAAmB,CAAC,MAAc,EAAE,IAAmB;QAC3D,MAAM,MAAM,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QAEtD,MAAM,YAAY,GAAa,EAAE,CAAC;QAClC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACpC,SAAS,EAAE,IAAI,EAAE,IAAI,KAAK,kCAAoB;gBAC5C,IAAA,cAAM,EAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC;gBAC1B,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,KAAK,CAAC;QAE5C,MAAM,OAAO,GAAG,GAAG,GAAG,YAAY,CAAC,IAAI,EAAE,GAAG,GAAG,CAAC;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;QAEvC,2EAA2E;QAC3E,iDAAiD;QACjD,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;sCAUqB,IAAI,CAAC,KAAK,KAAK,QAAQ;qBACxC,OAAO;;;;oBAIR,IAAI,CAAC,EAAE;;iCAEM,QAAQ;;;;;;;;;;;;KAYpC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oBAAoB;QAClB,OAAO;YACL;gBACE,KAAK,EAAE,cAAc;gBACrB,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,cAAc;aACzB;YACD;gBACE,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,WAAW;gBAC9B,QAAQ,EAAE,KAAK;aAChB;YACD;gBACE,KAAK,EAAE,6BAA6B;gBACpC,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,WAAW;gBACrB,GAAG,EAAE,IAAI;aACV;YACD;gBACE,KAAK,EAAE,+BAA+B;gBACtC,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,YAAY;gBACtB,GAAG,EAAE,IAAI;aACV;YACD;gBACE,KAAK,EAAE,2CAA2C;gBAClD,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,eAAe;gBACzB,GAAG,EAAE,IAAI;aACV;YACD;gBACE,KAAK,EAAE,8BAA8B;gBACrC,IAAI,EAAE,QAAQ;gBACd,iBAAiB,EAAE,YAAY;gBAC/B,QAAQ,EAAE,WAAW;gBACrB,GAAG,EAAE,IAAI;aACV;SACF,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ,KAAI,CAAC;IAEnB,UAAU;QACR,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,iBAAiB;QACf,OAAO,EAAC,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAC,CAAC;IACnD,CAAC;CACF;AA7GD,8EA6GC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {exists} from '../../base/utils';\nimport {ColumnDef, Sorting} from '../../public/aggregation';\nimport {AreaSelection, AreaSelectionAggregator} from '../../public/selection';\nimport {CPU_SLICE_TRACK_KIND} from '../../public/track_kinds';\nimport {Engine} from '../../trace_processor/engine';\n\nexport class WattsonProcessSelectionAggregator\n  implements AreaSelectionAggregator\n{\n  readonly id = 'wattson_process_aggregation';\n\n  async createAggregateView(engine: Engine, area: AreaSelection) {\n    await engine.query(`drop view if exists ${this.id};`);\n\n    const selectedCpus: number[] = [];\n    for (const trackInfo of area.tracks) {\n      trackInfo?.tags?.kind === CPU_SLICE_TRACK_KIND &&\n        exists(trackInfo.tags.cpu) &&\n        selectedCpus.push(trackInfo.tags.cpu);\n    }\n    if (selectedCpus.length === 0) return false;\n\n    const cpusCsv = `(` + selectedCpus.join() + `)`;\n    const duration = area.end - area.start;\n\n    // Prerequisite tables are already generated by Wattson thread aggregation,\n    // which is run prior to execution of this module\n    engine.query(`\n      INCLUDE PERFETTO MODULE wattson.curves.idle_attribution;\n      INCLUDE PERFETTO MODULE wattson.curves.estimates;\n\n      -- Only get idle attribution in user defined window and filter by selected\n      -- CPUs and GROUP BY process\n      CREATE OR REPLACE PERFETTO TABLE _per_process_idle_attribution AS\n      SELECT\n        ROUND(SUM(idle_cost_mws), 2) as idle_cost_mws,\n        upid\n      FROM _filter_idle_attribution(${area.start}, ${duration})\n      WHERE cpu in ${cpusCsv}\n      GROUP BY upid;\n\n      -- Grouped by UPID and made CPU agnostic\n      CREATE VIEW ${this.id} AS\n      SELECT\n        ROUND(SUM(total_pws) / ${duration}, 2) as active_mw,\n        ROUND(SUM(total_pws) / 1000000000, 2) as active_mws,\n        COALESCE(idle_cost_mws, 0) as idle_cost_mws,\n        ROUND(\n          COALESCE(idle_cost_mws, 0) + SUM(total_pws) / 1000000000,\n          2\n        ) as total_mws,\n        pid,\n        process_name\n      FROM _unioned_per_cpu_total\n      LEFT JOIN _per_process_idle_attribution USING (upid)\n      GROUP BY upid;\n    `);\n\n    return true;\n  }\n\n  getColumnDefinitions(): ColumnDef[] {\n    return [\n      {\n        title: 'Process Name',\n        kind: 'STRING',\n        columnConstructor: Uint16Array,\n        columnId: 'process_name',\n      },\n      {\n        title: 'PID',\n        kind: 'NUMBER',\n        columnConstructor: Uint16Array,\n        columnId: 'pid',\n      },\n      {\n        title: 'Active power (estimated mW)',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'active_mw',\n        sum: true,\n      },\n      {\n        title: 'Active energy (estimated mWs)',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'active_mws',\n        sum: true,\n      },\n      {\n        title: 'Idle transitions overhead (estimated mWs)',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'idle_cost_mws',\n        sum: true,\n      },\n      {\n        title: 'Total energy (estimated mWs)',\n        kind: 'NUMBER',\n        columnConstructor: Float64Array,\n        columnId: 'total_mws',\n        sum: true,\n      },\n    ];\n  }\n\n  async getExtra() {}\n\n  getTabName() {\n    return 'Wattson by process';\n  }\n\n  getDefaultSorting(): Sorting {\n    return {column: 'active_mws', direction: 'DESC'};\n  }\n}\n"]}
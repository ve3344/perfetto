{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/com.example.Skeleton/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAOjC,oDAAoD;AACpD;IACE,kEAAkE;IAClE,MAAM,CAAU,EAAE,GAAG,sBAAsB,CAAC;IAE5C;;;;;;;;OAQG;IACH,MAAM,CAAC,UAAU,CAAC,GAAQ;QACxB,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,WAAW,CAAC,KAAY;QAC5B,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEzE,mEAAmE;QACnE,2CAA2C;QAC3C,IAAI,KAAK,CAAC,gBAAgB,KAAK,SAAS,EAAE,CAAC;YACzC,OAAO,CAAC,GAAG,CACT,wBAAwB,KAAK,CAAC,QAAQ,EAAE,EACxC,KAAK,CAAC,gBAAgB,CACvB,CAAC;QACJ,CAAC;QAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA4BG;QACH,KAAK,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,IAAI,EAAE;YACxC,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,oBAAoB;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;;AAzEH,4BA0EC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Trace} from '../../public/trace';\nimport {App} from '../../public/app';\nimport {MetricVisualisation} from '../../public/plugin';\nimport {PerfettoPlugin} from '../../public/plugin';\n\n// SKELETON: Rename this class to match your plugin.\nexport default class implements PerfettoPlugin {\n  // SKELETON: Update pluginId to match the directory of the plugin.\n  static readonly id = 'com.example.Skeleton';\n\n  /**\n   * This hook is called when the plugin is activated manually, or when the UI\n   * starts up with this plugin enabled. This is typically before a trace has\n   * been loaded, so there is no trace information in the passed plugin context\n   * object.\n   *\n   * This hook should be used for adding commands that don't depend on the\n   * trace.\n   */\n  static onActivate(app: App): void {\n    console.log('SkeletonPlugin::onActivate()', app.pluginId);\n  }\n\n  /**\n   * This hook is called as the trace is loading. At this point the trace is\n   * loaded into trace processor and it's ready to process queries. This hook\n   * should be used for adding tracks and commands that depend on the trace.\n   *\n   * It should not be used for finding tracks from other plugins as there is no\n   * guarantee those tracks will have been added yet.\n   */\n  async onTraceLoad(trace: Trace): Promise<void> {\n    console.log('SkeletonPlugin::onTraceLoad()', trace.traceInfo.traceTitle);\n\n    // This is an example of how to access the pluginArgs pushed by the\n    // postMessage when deep-linking to the UI.\n    if (trace.openerPluginArgs !== undefined) {\n      console.log(\n        `Postmessage args for ${trace.pluginId}`,\n        trace.openerPluginArgs,\n      );\n    }\n\n    /**\n     * The 'traceready' event is fired when the trace has finished loading, and\n     * all plugins have returned from their onTraceLoad calls. The UI can be\n     * considered 'ready' at this point. All tracks and commands should now be\n     * available, and the timeline is ready to use.\n     *\n     * This is where any automations should be done - things that you would\n     * usually do manually after the trace has loaded but you'd like to automate\n     * them.\n     *\n     * Examples of things that could be done here:\n     * - Pinning tracks\n     * - Focusing on a slice\n     * - Adding debug tracks\n     *\n     * Postmessage args might be useful here - e.g. if you would like to pin a\n     * specific track, pass the track details through the postmessage args\n     * interface and react to it here.\n     *\n     * Note: Any tracks registered in this hook will not be displayed in the\n     * timeline, unless they are manually added through the ctx.timeline API.\n     * However this part of the code is in flux at the moment and the semantics\n     * of how this works might change, though it's still good practice to use\n     * the onTraceLoad hook to add tracks as it means that all tracks are\n     * available by the time this hook gets called.\n     *\n     * TODO(stevegolton): Update this comment if the semantics of track adding\n     * changes.\n     */\n    trace.onTraceReady.addListener(async () => {\n      console.log('SkeletonPlugin::traceready');\n    });\n  }\n\n  static metricVisualisations(): MetricVisualisation[] {\n    return [];\n  }\n}\n"]}
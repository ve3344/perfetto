{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.PerfSamplesProfile/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {TrackData} from '../../components/tracks/track_data';\nimport {PERF_SAMPLES_PROFILE_TRACK_KIND} from '../../public/track_kinds';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {NUM, NUM_NULL, STR_NULL} from '../../trace_processor/query_result';\nimport {assertExists} from '../../base/logging';\nimport {\n  ProcessPerfSamplesProfileTrack,\n  ThreadPerfSamplesProfileTrack,\n} from './perf_samples_profile_track';\nimport {getThreadUriPrefix} from '../../public/utils';\nimport {TrackNode} from '../../public/workspace';\nimport ProcessThreadGroupsPlugin from '../dev.perfetto.ProcessThreadGroups';\n\nexport interface Data extends TrackData {\n  tsStarts: BigInt64Array;\n}\n\nfunction makeUriForProc(upid: number) {\n  return `/process_${upid}/perf_samples_profile`;\n}\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.PerfSamplesProfile';\n  static readonly dependencies = [ProcessThreadGroupsPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    const pResult = await ctx.engine.query(`\n      select distinct upid\n      from perf_sample\n      join thread using (utid)\n      where callsite_id is not null and upid is not null\n    `);\n    for (const it = pResult.iter({upid: NUM}); it.valid(); it.next()) {\n      const upid = it.upid;\n      const uri = makeUriForProc(upid);\n      const title = `Process Callstacks`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        tags: {\n          kind: PERF_SAMPLES_PROFILE_TRACK_KIND,\n          upid,\n        },\n        track: new ProcessPerfSamplesProfileTrack(ctx, uri, upid),\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForProcess(upid);\n      const track = new TrackNode({uri, title, sortOrder: -40});\n      group?.addChildInOrder(track);\n    }\n    const tResult = await ctx.engine.query(`\n      select distinct\n        utid,\n        tid,\n        thread.name as threadName,\n        upid\n      from perf_sample\n      join thread using (utid)\n      where callsite_id is not null\n    `);\n    for (\n      const it = tResult.iter({\n        utid: NUM,\n        tid: NUM,\n        threadName: STR_NULL,\n        upid: NUM_NULL,\n      });\n      it.valid();\n      it.next()\n    ) {\n      const {threadName, utid, tid, upid} = it;\n      const title =\n        threadName === null\n          ? `Thread Callstacks ${tid}`\n          : `${threadName} Callstacks ${tid}`;\n      const uri = `${getThreadUriPrefix(upid, utid)}_perf_samples_profile`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        tags: {\n          kind: PERF_SAMPLES_PROFILE_TRACK_KIND,\n          utid,\n          upid: upid ?? undefined,\n        },\n        track: new ThreadPerfSamplesProfileTrack(ctx, uri, utid),\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForThread(utid);\n      const track = new TrackNode({uri, title, sortOrder: -50});\n      group?.addChildInOrder(track);\n    }\n\n    ctx.onTraceReady.addListener(async () => {\n      await selectPerfSample(ctx);\n    });\n  }\n}\n\nasync function selectPerfSample(ctx: Trace) {\n  const profile = await assertExists(ctx.engine).query(`\n    select upid\n    from perf_sample\n    join thread using (utid)\n    where callsite_id is not null\n    order by ts desc\n    limit 1\n  `);\n  if (profile.numRows() !== 1) return;\n  const row = profile.firstRow({upid: NUM});\n  const upid = row.upid;\n\n  // Create an area selection over the first process with a perf samples track\n  ctx.selection.selectArea({\n    start: ctx.traceInfo.start,\n    end: ctx.traceInfo.end,\n    trackUris: [makeUriForProc(upid)],\n  });\n}\n"]}
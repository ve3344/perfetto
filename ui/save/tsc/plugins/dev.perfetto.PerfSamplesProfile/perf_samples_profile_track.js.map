{"version":3,"file":"perf_samples_profile_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.PerfSamplesProfile/perf_samples_profile_track.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {NUM} from '../../trace_processor/query_result';\nimport {Slice} from '../../public/track';\nimport {BaseSliceTrack} from '../../components/tracks/base_slice_track';\nimport {NAMED_ROW, NamedRow} from '../../components/tracks/named_slice_track';\nimport {getColorForSample} from '../../components/colorizer';\nimport {\n  ProfileType,\n  TrackEventDetails,\n  TrackEventSelection,\n} from '../../public/selection';\nimport {assertExists} from '../../base/logging';\nimport {\n  metricsFromTableOrSubquery,\n  QueryFlamegraph,\n} from '../../components/query_flamegraph';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {Timestamp} from '../../components/widgets/timestamp';\nimport {time} from '../../base/time';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {Flamegraph, FLAMEGRAPH_STATE_SCHEMA} from '../../widgets/flamegraph';\nimport {Trace} from '../../public/trace';\n\ninterface PerfSampleRow extends NamedRow {\n  callsiteId: number;\n}\n\nabstract class BasePerfSamplesProfileTrack extends BaseSliceTrack<\n  Slice,\n  PerfSampleRow\n> {\n  constructor(trace: Trace, uri: string) {\n    super(trace, uri);\n  }\n\n  protected getRowSpec(): PerfSampleRow {\n    return {...NAMED_ROW, callsiteId: NUM};\n  }\n\n  protected rowToSlice(row: PerfSampleRow): Slice {\n    const baseSlice = super.rowToSliceBase(row);\n    const name = assertExists(row.name);\n    const colorScheme = getColorForSample(row.callsiteId);\n    return {...baseSlice, title: name, colorScheme};\n  }\n\n  onUpdatedSlices(slices: Slice[]) {\n    for (const slice of slices) {\n      slice.isHighlighted = slice === this.hoveredSlice;\n    }\n  }\n}\n\nexport class ProcessPerfSamplesProfileTrack extends BasePerfSamplesProfileTrack {\n  constructor(\n    trace: Trace,\n    uri: string,\n    private readonly upid: number,\n  ) {\n    super(trace, uri);\n  }\n\n  getSqlSource(): string {\n    return `\n      select\n        p.id,\n        ts,\n        0 as dur,\n        0 as depth,\n        'Perf Sample' as name,\n        callsite_id as callsiteId\n      from perf_sample p\n      join thread using (utid)\n      where upid = ${this.upid} and callsite_id is not null\n      order by ts\n    `;\n  }\n\n  async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const details = await super.getSelectionDetails(id);\n    if (details === undefined) return undefined;\n    return {\n      ...details,\n      upid: this.upid,\n      profileType: ProfileType.PERF_SAMPLE,\n    };\n  }\n\n  detailsPanel(sel: TrackEventSelection) {\n    const upid = assertExists(sel.upid);\n    const ts = sel.ts;\n\n    const metrics = metricsFromTableOrSubquery(\n      `\n        (\n          select\n            id,\n            parent_id as parentId,\n            name,\n            mapping_name,\n            source_file,\n            cast(line_number AS text) as line_number,\n            self_count\n          from _callstacks_for_callsites!((\n            select p.callsite_id\n            from perf_sample p\n            join thread t using (utid)\n            where p.ts >= ${ts}\n              and p.ts <= ${ts}\n              and t.upid = ${upid}\n          ))\n        )\n      `,\n      [\n        {\n          name: 'Perf Samples',\n          unit: '',\n          columnName: 'self_count',\n        },\n      ],\n      'include perfetto module linux.perf.samples',\n      [{name: 'mapping_name', displayName: 'Mapping'}],\n      [\n        {\n          name: 'source_file',\n          displayName: 'Source File',\n          mergeAggregation: 'ONE_OR_NULL',\n        },\n        {\n          name: 'line_number',\n          displayName: 'Line Number',\n          mergeAggregation: 'ONE_OR_NULL',\n        },\n      ],\n    );\n    const serialization = {\n      schema: FLAMEGRAPH_STATE_SCHEMA,\n      state: Flamegraph.createDefaultState(metrics),\n    };\n    const flamegraph = new QueryFlamegraph(this.trace, metrics, serialization);\n    return {\n      render: () => renderDetailsPanel(flamegraph, ts),\n      serialization,\n    };\n  }\n}\n\nexport class ThreadPerfSamplesProfileTrack extends BasePerfSamplesProfileTrack {\n  constructor(\n    trace: Trace,\n    uri: string,\n    private readonly utid: number,\n  ) {\n    super(trace, uri);\n  }\n\n  getSqlSource(): string {\n    return `\n      select\n        p.id,\n        ts,\n        0 as dur,\n        0 as depth,\n        'Perf Sample' as name,\n        callsite_id as callsiteId\n      from perf_sample p\n      where utid = ${this.utid} and callsite_id is not null\n      order by ts\n    `;\n  }\n\n  async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const details = await super.getSelectionDetails(id);\n    if (details === undefined) return undefined;\n    return {\n      ...details,\n      utid: this.utid,\n      profileType: ProfileType.PERF_SAMPLE,\n    };\n  }\n\n  detailsPanel(sel: TrackEventSelection): TrackEventDetailsPanel {\n    const utid = assertExists(sel.utid);\n    const ts = sel.ts;\n\n    const metrics = metricsFromTableOrSubquery(\n      `\n        (\n          select\n            id,\n            parent_id as parentId,\n            name,\n            mapping_name,\n            source_file,\n            cast(line_number AS text) as line_number,\n            self_count\n          from _callstacks_for_callsites!((\n            select p.callsite_id\n            from perf_sample p\n            where p.ts >= ${ts}\n              and p.ts <= ${ts}\n              and p.utid = ${utid}\n          ))\n        )\n      `,\n      [\n        {\n          name: 'Perf Samples',\n          unit: '',\n          columnName: 'self_count',\n        },\n      ],\n      'include perfetto module linux.perf.samples',\n      [{name: 'mapping_name', displayName: 'Mapping'}],\n      [\n        {\n          name: 'source_file',\n          displayName: 'Source File',\n          mergeAggregation: 'ONE_OR_NULL',\n        },\n        {\n          name: 'line_number',\n          displayName: 'Line Number',\n          mergeAggregation: 'ONE_OR_NULL',\n        },\n      ],\n    );\n    const serialization = {\n      schema: FLAMEGRAPH_STATE_SCHEMA,\n      state: Flamegraph.createDefaultState(metrics),\n    };\n    const flamegraph = new QueryFlamegraph(this.trace, metrics, serialization);\n    return {\n      render: () => renderDetailsPanel(flamegraph, ts),\n      serialization,\n    };\n  }\n}\n\nfunction renderDetailsPanel(flamegraph: QueryFlamegraph, ts: time) {\n  return m(\n    '.flamegraph-profile',\n    m(\n      DetailsShell,\n      {\n        fillParent: true,\n        title: m('.title', 'Perf Samples'),\n        description: [],\n        buttons: [\n          m(\n            'div.time',\n            `First timestamp: `,\n            m(Timestamp, {\n              ts,\n            }),\n          ),\n          m(\n            'div.time',\n            `Last timestamp: `,\n            m(Timestamp, {\n              ts,\n            }),\n          ),\n        ],\n      },\n      flamegraph.render(),\n    ),\n  );\n}\n"]}
{"version":3,"file":"actual_frames_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Frames/actual_frames_track.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {HSLColor} from '../../public/color';\nimport {makeColorScheme} from '../../components/colorizer';\nimport {ColorScheme} from '../../public/color_scheme';\nimport {\n  NAMED_ROW,\n  NamedSliceTrack,\n} from '../../components/tracks/named_slice_track';\nimport {SLICE_LAYOUT_FIT_CONTENT_DEFAULTS} from '../../components/tracks/slice_layout';\nimport {STR_NULL} from '../../trace_processor/query_result';\nimport {Slice} from '../../public/track';\nimport {Trace} from '../../public/trace';\nimport {TrackEventDetails} from '../../public/selection';\n\n// color named and defined based on Material Design color palettes\n// 500 colors indicate a timeline slice is not a partial jank (not a jank or\n// full jank)\nconst BLUE_500 = makeColorScheme(new HSLColor('#03A9F4'));\nconst BLUE_200 = makeColorScheme(new HSLColor('#90CAF9'));\nconst GREEN_500 = makeColorScheme(new HSLColor('#4CAF50'));\nconst GREEN_200 = makeColorScheme(new HSLColor('#A5D6A7'));\nconst YELLOW_500 = makeColorScheme(new HSLColor('#FFEB3B'));\nconst YELLOW_100 = makeColorScheme(new HSLColor('#FFF9C4'));\nconst RED_500 = makeColorScheme(new HSLColor('#FF5722'));\nconst RED_200 = makeColorScheme(new HSLColor('#EF9A9A'));\nconst LIGHT_GREEN_500 = makeColorScheme(new HSLColor('#C0D588'));\nconst LIGHT_GREEN_100 = makeColorScheme(new HSLColor('#DCEDC8'));\nconst PINK_500 = makeColorScheme(new HSLColor('#F515E0'));\nconst PINK_200 = makeColorScheme(new HSLColor('#F48FB1'));\n\nexport const ACTUAL_FRAME_ROW = {\n  // Base columns (tsq, ts, dur, id, depth).\n  ...NAMED_ROW,\n\n  // Jank-specific columns.\n  jankTag: STR_NULL,\n  jankSeverityType: STR_NULL,\n};\nexport type ActualFrameRow = typeof ACTUAL_FRAME_ROW;\n\nexport class ActualFramesTrack extends NamedSliceTrack<Slice, ActualFrameRow> {\n  constructor(\n    trace: Trace,\n    maxDepth: number,\n    uri: string,\n    private trackIds: number[],\n  ) {\n    super(trace, uri);\n    this.sliceLayout = {\n      ...SLICE_LAYOUT_FIT_CONTENT_DEFAULTS,\n      depthGuess: maxDepth,\n    };\n  }\n\n  // This is used by the base class to call iter().\n  protected getRowSpec() {\n    return ACTUAL_FRAME_ROW;\n  }\n\n  getSqlSource(): string {\n    return `\n      SELECT\n        s.ts as ts,\n        s.dur as dur,\n        s.layout_depth as depth,\n        s.name as name,\n        s.id as id,\n        afs.jank_tag as jankTag,\n        afs.jank_severity_type as jankSeverityType\n      from experimental_slice_layout s\n      join actual_frame_timeline_slice afs using(id)\n      where\n        filter_track_ids = '${this.trackIds.join(',')}'\n    `;\n  }\n\n  rowToSlice(row: ActualFrameRow): Slice {\n    const baseSlice = this.rowToSliceBase(row);\n    return {\n      ...baseSlice,\n      colorScheme: getColorSchemeForJank(row.jankTag, row.jankSeverityType),\n    };\n  }\n\n  override async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const baseDetails = await super.getSelectionDetails(id);\n    if (!baseDetails) return undefined;\n    return {\n      ...baseDetails,\n      tableName: 'slice',\n    };\n  }\n\n  // Override dataset from base class NamedSliceTrack as we don't want these\n  // tracks to participate in generic area selection aggregation (frames tracks\n  // have their own dedicated aggregation panel).\n  // TODO(stevegolton): In future CLs this will be handled with aggregation keys\n  // instead, as this track will have to expose a dataset anyway.\n  override getDataset() {\n    return undefined;\n  }\n}\n\nfunction getColorSchemeForJank(\n  jankTag: string | null,\n  jankSeverityType: string | null,\n): ColorScheme {\n  if (jankSeverityType === 'Partial') {\n    switch (jankTag) {\n      case 'Self Jank':\n        return RED_200;\n      case 'Other Jank':\n        return YELLOW_100;\n      case 'Dropped Frame':\n        return BLUE_200;\n      case 'Buffer Stuffing':\n      case 'SurfaceFlinger Stuffing':\n        return LIGHT_GREEN_100;\n      case 'No Jank': // should not happen\n        return GREEN_200;\n      default:\n        return PINK_200;\n    }\n  } else {\n    switch (jankTag) {\n      case 'Self Jank':\n        return RED_500;\n      case 'Other Jank':\n        return YELLOW_500;\n      case 'Dropped Frame':\n        return BLUE_500;\n      case 'Buffer Stuffing':\n      case 'SurfaceFlinger Stuffing':\n        return LIGHT_GREEN_500;\n      case 'No Jank':\n        return GREEN_500;\n      default:\n        return PINK_500;\n    }\n  }\n}\n"]}
{"version":3,"file":"expected_frames_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Frames/expected_frames_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,8CAA4C;AAC5C,0DAA2D;AAC3D,iFAImD;AACnD,uEAAuF;AAKvF,MAAM,KAAK,GAAG,IAAA,2BAAe,EAAC,IAAI,gBAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,YAAY;AAEpE,MAAa,mBAAoB,SAAQ,mCAAe;IAK5C;IAJV,YACE,KAAY,EACZ,QAAgB,EAChB,GAAW,EACH,QAAkB;QAE1B,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAFV,aAAQ,GAAR,QAAQ,CAAU;QAG1B,IAAI,CAAC,WAAW,GAAG;YACjB,GAAG,gDAAiC;YACpC,UAAU,EAAE,QAAQ;SACrB,CAAC;IACJ,CAAC;IAED,YAAY;QACV,OAAO;;;;;;;;;8BASmB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;KAChD,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,GAAa;QACtB,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,EAAC,GAAG,SAAS,EAAE,WAAW,EAAE,KAAK,EAAC,CAAC;IAC5C,CAAC;IAED,UAAU;QACR,OAAO,6BAAS,CAAC;IACnB,CAAC;IAEQ,KAAK,CAAC,mBAAmB,CAChC,EAAU;QAEV,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW;YAAE,OAAO,SAAS,CAAC;QACnC,OAAO;YACL,GAAG,WAAW;YACd,SAAS,EAAE,OAAO;SACnB,CAAC;IACJ,CAAC;CACF;AA/CD,kDA+CC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {HSLColor} from '../../public/color';\nimport {makeColorScheme} from '../../components/colorizer';\nimport {\n  NAMED_ROW,\n  NamedRow,\n  NamedSliceTrack,\n} from '../../components/tracks/named_slice_track';\nimport {SLICE_LAYOUT_FIT_CONTENT_DEFAULTS} from '../../components/tracks/slice_layout';\nimport {Slice} from '../../public/track';\nimport {Trace} from '../../public/trace';\nimport {TrackEventDetails} from '../../public/selection';\n\nconst GREEN = makeColorScheme(new HSLColor('#4CAF50')); // Green 500\n\nexport class ExpectedFramesTrack extends NamedSliceTrack {\n  constructor(\n    trace: Trace,\n    maxDepth: number,\n    uri: string,\n    private trackIds: number[],\n  ) {\n    super(trace, uri);\n    this.sliceLayout = {\n      ...SLICE_LAYOUT_FIT_CONTENT_DEFAULTS,\n      depthGuess: maxDepth,\n    };\n  }\n\n  getSqlSource(): string {\n    return `\n      SELECT\n        ts,\n        dur,\n        layout_depth as depth,\n        name,\n        id\n      from experimental_slice_layout\n      where\n        filter_track_ids = '${this.trackIds.join(',')}'\n    `;\n  }\n\n  rowToSlice(row: NamedRow): Slice {\n    const baseSlice = this.rowToSliceBase(row);\n    return {...baseSlice, colorScheme: GREEN};\n  }\n\n  getRowSpec(): NamedRow {\n    return NAMED_ROW;\n  }\n\n  override async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const baseDetails = await super.getSelectionDetails(id);\n    if (!baseDetails) return undefined;\n    return {\n      ...baseDetails,\n      tableName: 'slice',\n    };\n  }\n}\n"]}
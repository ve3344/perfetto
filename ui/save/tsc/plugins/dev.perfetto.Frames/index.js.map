{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.Frames/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  ACTUAL_FRAMES_SLICE_TRACK_KIND,\n  EXPECTED_FRAMES_SLICE_TRACK_KIND,\n} from '../../public/track_kinds';\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {getTrackName} from '../../public/utils';\nimport {TrackNode} from '../../public/workspace';\nimport {NUM, NUM_NULL, STR, STR_NULL} from '../../trace_processor/query_result';\nimport {ActualFramesTrack} from './actual_frames_track';\nimport {ExpectedFramesTrack} from './expected_frames_track';\nimport {FrameSelectionAggregator} from './frame_selection_aggregator';\nimport ProcessThreadGroupsPlugin from '../dev.perfetto.ProcessThreadGroups';\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.Frames';\n  static readonly dependencies = [ProcessThreadGroupsPlugin];\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    this.addExpectedFrames(ctx);\n    this.addActualFrames(ctx);\n    ctx.selection.registerAreaSelectionAggregator(\n      new FrameSelectionAggregator(),\n    );\n  }\n\n  async addExpectedFrames(ctx: Trace): Promise<void> {\n    const {engine} = ctx;\n    const result = await engine.query(`\n      select\n        upid,\n        t.name as trackName,\n        t.track_ids as trackIds,\n        process.name as processName,\n        process.pid as pid,\n        __max_layout_depth(t.track_count, t.track_ids) as maxDepth\n      from _process_track_summary_by_upid_and_parent_id_and_name t\n      join process using(upid)\n      where t.name = \"Expected Timeline\"\n    `);\n\n    const it = result.iter({\n      upid: NUM,\n      trackName: STR_NULL,\n      trackIds: STR,\n      processName: STR_NULL,\n      pid: NUM_NULL,\n      maxDepth: NUM,\n    });\n\n    for (; it.valid(); it.next()) {\n      const upid = it.upid;\n      const trackName = it.trackName;\n      const rawTrackIds = it.trackIds;\n      const trackIds = rawTrackIds.split(',').map((v) => Number(v));\n      const processName = it.processName;\n      const pid = it.pid;\n      const maxDepth = it.maxDepth;\n\n      const title = getTrackName({\n        name: trackName,\n        upid,\n        pid,\n        processName,\n        kind: 'ExpectedFrames',\n      });\n\n      const uri = `/process_${upid}/expected_frames`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        track: new ExpectedFramesTrack(ctx, maxDepth, uri, trackIds),\n        tags: {\n          trackIds,\n          upid,\n          kind: EXPECTED_FRAMES_SLICE_TRACK_KIND,\n        },\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForProcess(upid);\n      const track = new TrackNode({uri, title, sortOrder: -50});\n      group?.addChildInOrder(track);\n    }\n  }\n\n  async addActualFrames(ctx: Trace): Promise<void> {\n    const {engine} = ctx;\n    const result = await engine.query(`\n      select\n        upid,\n        t.name as trackName,\n        t.track_ids as trackIds,\n        process.name as processName,\n        process.pid as pid,\n        __max_layout_depth(t.track_count, t.track_ids) as maxDepth\n      from _process_track_summary_by_upid_and_parent_id_and_name t\n      join process using(upid)\n      where t.name = \"Actual Timeline\"\n    `);\n\n    const it = result.iter({\n      upid: NUM,\n      trackName: STR_NULL,\n      trackIds: STR,\n      processName: STR_NULL,\n      pid: NUM_NULL,\n      maxDepth: NUM_NULL,\n    });\n    for (; it.valid(); it.next()) {\n      const upid = it.upid;\n      const trackName = it.trackName;\n      const rawTrackIds = it.trackIds;\n      const trackIds = rawTrackIds.split(',').map((v) => Number(v));\n      const processName = it.processName;\n      const pid = it.pid;\n      const maxDepth = it.maxDepth;\n\n      if (maxDepth === null) {\n        // If there are no slices in this track, skip it.\n        continue;\n      }\n\n      const kind = 'ActualFrames';\n      const title = getTrackName({\n        name: trackName,\n        upid,\n        pid,\n        processName,\n        kind,\n      });\n\n      const uri = `/process_${upid}/actual_frames`;\n      ctx.tracks.registerTrack({\n        uri,\n        title,\n        track: new ActualFramesTrack(ctx, maxDepth, uri, trackIds),\n        tags: {\n          upid,\n          trackIds,\n          kind: ACTUAL_FRAMES_SLICE_TRACK_KIND,\n        },\n      });\n      const group = ctx.plugins\n        .getPlugin(ProcessThreadGroupsPlugin)\n        .getGroupForProcess(upid);\n      const track = new TrackNode({uri, title, sortOrder: -50});\n      group?.addChildInOrder(track);\n    }\n  }\n}\n"]}
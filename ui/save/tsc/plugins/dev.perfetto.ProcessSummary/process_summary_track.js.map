{"version":3,"file":"process_summary_track.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.ProcessSummary/process_summary_track.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath} from '../../base/bigint_math';\nimport {assertExists, assertTrue} from '../../base/logging';\nimport {duration, Time, time} from '../../base/time';\nimport {colorForTid} from '../../components/colorizer';\nimport {TrackData} from '../../components/tracks/track_data';\nimport {TimelineFetcher} from '../../components/tracks/track_helper';\nimport {checkerboardExcept} from '../../components/checkerboard';\nimport {Engine} from '../../trace_processor/engine';\nimport {Track} from '../../public/track';\nimport {LONG, NUM} from '../../trace_processor/query_result';\nimport {uuidv4Sql} from '../../base/uuid';\nimport {TrackRenderContext} from '../../public/track';\n\nexport const PROCESS_SUMMARY_TRACK = 'ProcessSummaryTrack';\n\ninterface Data extends TrackData {\n  starts: BigInt64Array;\n  utilizations: Float64Array;\n}\n\nexport interface Config {\n  pidForColor: number;\n  upid: number | null;\n  utid: number | null;\n}\n\nconst MARGIN_TOP = 5;\nconst RECT_HEIGHT = 30;\nconst TRACK_HEIGHT = MARGIN_TOP * 2 + RECT_HEIGHT;\nconst SUMMARY_HEIGHT = TRACK_HEIGHT - MARGIN_TOP;\n\nexport class ProcessSummaryTrack implements Track {\n  private fetcher = new TimelineFetcher<Data>(this.onBoundsChange.bind(this));\n  private engine: Engine;\n  private config: Config;\n  private uuid = uuidv4Sql();\n\n  constructor(engine: Engine, config: Config) {\n    this.engine = engine;\n    this.config = config;\n  }\n\n  async onCreate(): Promise<void> {\n    let trackIdQuery: string;\n    if (this.config.upid !== null) {\n      trackIdQuery = `\n        select tt.id as track_id\n        from thread_track as tt\n        join _thread_available_info_summary using (utid)\n        join thread using (utid)\n        where thread.upid = ${this.config.upid}\n        order by slice_count desc\n      `;\n    } else {\n      trackIdQuery = `\n        select tt.id as track_id\n        from thread_track as tt\n        join _thread_available_info_summary using (utid)\n        where tt.utid = ${assertExists(this.config.utid)}\n        order by slice_count desc\n      `;\n    }\n    await this.engine.query(`\n      create virtual table process_summary_${this.uuid}\n      using __intrinsic_counter_mipmap((\n        with\n          tt as materialized (\n            ${trackIdQuery}\n          ),\n          ss as (\n            select ts, 1.0 as value\n            from slice\n            join tt using (track_id)\n            where slice.depth = 0\n            union all\n            select ts + dur as ts, -1.0 as value\n            from slice\n            join tt using (track_id)\n            where slice.depth = 0\n          )\n        select\n          ts,\n          sum(value) over (order by ts) / (select count() from tt) as value\n        from ss\n        order by ts\n      ));\n    `);\n  }\n\n  async onUpdate({\n    visibleWindow,\n    resolution,\n  }: TrackRenderContext): Promise<void> {\n    await this.fetcher.requestData(visibleWindow.toTimeSpan(), resolution);\n  }\n\n  async onBoundsChange(\n    start: time,\n    end: time,\n    resolution: duration,\n  ): Promise<Data> {\n    // Resolution must always be a power of 2 for this logic to work\n    assertTrue(\n      BigintMath.popcount(resolution) === 1,\n      `${resolution} not pow of 2`,\n    );\n\n    const queryRes = await this.engine.query(`\n      select last_ts as ts, last_value as utilization\n      from process_summary_${this.uuid}(${start}, ${end}, ${resolution});\n    `);\n    const numRows = queryRes.numRows();\n    const slices: Data = {\n      start,\n      end,\n      resolution,\n      length: numRows,\n      starts: new BigInt64Array(numRows),\n      utilizations: new Float64Array(numRows),\n    };\n    const it = queryRes.iter({\n      ts: LONG,\n      utilization: NUM,\n    });\n    for (let row = 0; it.valid(); it.next(), row++) {\n      slices.starts[row] = it.ts;\n      slices.utilizations[row] = it.utilization;\n    }\n    return slices;\n  }\n\n  async onDestroy(): Promise<void> {\n    await this.engine.tryQuery(\n      `drop table if exists process_summary_${this.uuid};`,\n    );\n    this.fetcher[Symbol.dispose]();\n  }\n\n  getHeight(): number {\n    return TRACK_HEIGHT;\n  }\n\n  render(trackCtx: TrackRenderContext): void {\n    const {ctx, size, timescale} = trackCtx;\n\n    const data = this.fetcher.data;\n    if (data === undefined) {\n      return;\n    }\n\n    // If the cached trace slices don't fully cover the visible time range,\n    // show a gray rectangle with a \"Loading...\" label.\n    checkerboardExcept(\n      ctx,\n      this.getHeight(),\n      0,\n      size.width,\n      timescale.timeToPx(data.start),\n      timescale.timeToPx(data.end),\n    );\n\n    this.renderSummary(trackCtx, data);\n  }\n\n  private renderSummary(\n    {ctx, timescale}: TrackRenderContext,\n    data: Data,\n  ): void {\n    const startPx = 0;\n    const bottomY = TRACK_HEIGHT;\n\n    let lastX = startPx;\n    let lastY = bottomY;\n\n    const color = colorForTid(this.config.pidForColor);\n    ctx.fillStyle = color.base.cssString;\n    ctx.beginPath();\n    ctx.moveTo(lastX, lastY);\n    for (let i = 0; i < data.utilizations.length; i++) {\n      const startTime = Time.fromRaw(data.starts[i]);\n      const utilization = data.utilizations[i];\n      lastX = Math.floor(timescale.timeToPx(startTime));\n      ctx.lineTo(lastX, lastY);\n      lastY = MARGIN_TOP + Math.round(SUMMARY_HEIGHT * (1 - utilization));\n      ctx.lineTo(lastX, lastY);\n    }\n    ctx.lineTo(lastX, bottomY);\n    ctx.closePath();\n    ctx.fill();\n  }\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/plugins/dev.perfetto.AndroidPerf/index.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAIjC,8CAAyE;AACzE,oFAAiF;AACjF,uEAI8C;AAC9C,qEAAuD;AAEvD;IACE,MAAM,CAAU,EAAE,GAAG,0BAA0B,CAAC;IAChD,KAAK,CAAC,6BAA6B,CACjC,GAAU,EACV,MAAc,EACd,SAAiB;QAEjB,MAAM,YAAY,GAAG;YACnB,IAAI;YACJ,IAAI;YACJ,KAAK;YACL,QAAQ;YACR,cAAc;YACd,QAAQ;YACR,YAAY;SACb,CAAC;QACF,MAAM,IAAA,iCAAkB,EAAC;YACvB,KAAK,EAAE,GAAG;YACV,IAAI,EAAE;gBACJ,SAAS,EAAE;;;;;;;;;;sCAUmB,MAAM;kBAC1B;gBACV,OAAO,EAAE,YAAY;aACtB;YACD,KAAK,EAAE,MAAM,GAAG,SAAS,GAAG,iBAAiB,GAAG,MAAM;YACtD,UAAU,EAAE,YAAY;SACzB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,GAAU;QAC1B,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,qDAAqD;YACzD,IAAI,EAAE,gDAAgD;YACtD,QAAQ,EAAE,GAAG,EAAE,CACb,IAAA,qCAAkB,EAAC,GAAG,EAAE;gBACtB,KAAK,EAAE;gHAC+F;gBACtG,KAAK,EAAE,qCAAqC;aAC7C,CAAC;SACL,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,qDAAqD;YACzD,IAAI,EAAE,gDAAgD;YACtD,QAAQ,EAAE,GAAG,EAAE,CACb,IAAA,qCAAkB,EAAC,GAAG,EAAE;gBACtB,KAAK,EAAE;gHAC+F;gBACtG,KAAK,EAAE,qCAAqC;aAC7C,CAAC;SACL,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,wDAAwD;YAC5D,IAAI,EAAE,mDAAmD;YACzD,QAAQ,EAAE,GAAG,EAAE,CACb,IAAA,qCAAkB,EAAC,GAAG,EAAE;gBACtB,KAAK,EAAE;mHACkG;gBACzG,KAAK,EAAE,wCAAwC;aAChD,CAAC;SACL,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,oCAAoC;YACxC,IAAI,EAAE,qCAAqC;YAC3C,QAAQ,EAAE,GAAG,EAAE,CACb,IAAA,qCAAkB,EAAC,GAAG,EAAE;gBACtB,KAAK,EAAE;wEACuD;gBAC9D,KAAK,EAAE,0BAA0B;aAClC,CAAC;SACL,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,oDAAoD;YACxD,IAAI,EAAE,sDAAsD;YAC5D,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;gBACtB,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;oBACtB,GAAG,GAAG,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;oBACvC,IAAI,GAAG,KAAK,IAAI;wBAAE,OAAO;gBAC3B,CAAC;gBACD,IAAA,qCAAkB,EAAC,GAAG,EAAE;oBACtB,KAAK,EAAE;;;;;;;;8BAQa,GAAG;;;;;;;;;;4BAUL,GAAG;uBACR;oBACb,KAAK,EAAE,uCAAuC,GAAG,EAAE;iBACpD,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,uCAAuC;YAC3C,IAAI,EAAE,8CAA8C;YACpD,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;gBACtB,IAAI,GAAG,KAAK,SAAS,EAAE,CAAC;oBACtB,GAAG,GAAG,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;oBACvC,IAAI,GAAG,KAAK,IAAI;wBAAE,OAAO;gBAC3B,CAAC;gBACD,IAAA,qCAAkB,EAAC,GAAG,EAAE;oBACtB,KAAK,EAAE;;;;;;;oDAOmC,GAAG;;mBAEpC;oBACT,KAAK,EAAE,sCAAsC,GAAG,EAAE;iBACnD,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,uDAAuD;YAC3D,IAAI,EAAE,8CAA8C;YACpD,QAAQ,EAAE,KAAK,IAAI,EAAE;gBACnB,MAAM,MAAM,GAAG,MAAM,IAAA,6CAAqC,EAAC,GAAG,CAAC,CAAC;gBAChE,IAAA,qCAAkB,EAAC,GAAG,EAAE;oBACtB,KAAK,EAAE,mDAAmD;oBAC1D,KAAK,EAAE;;;;;;;;;;;;;;0BAcS,MAAM,CAAC,KAAK,gBAAgB,MAAM,CAAC,GAAG;;mBAE7C;iBACV,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,2CAA2C;YAC/C,IAAI,EAAE,gCAAgC;YACtC,QAAQ,EAAE,KAAK,IAAI,EAAE;gBACnB,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CACpB,qDAAqD,CACtD,CAAC;gBAEF,MAAM,WAAW,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;gBACrE,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;oBACjC,MAAM,IAAI,CAAC,6BAA6B,CAAC,GAAG,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;gBACxE,CAAC;YACH,CAAC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,0CAA0C;YAC9C,IAAI,EAAE,+BAA+B;YACrC,QAAQ,EAAE,KAAK,IAAI,EAAE;gBACnB,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CACpB,qDAAqD,CACtD,CAAC;gBAEF,MAAM,WAAW,GAAG,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;gBACzD,KAAK,MAAM,MAAM,IAAI,WAAW,EAAE,CAAC;oBACjC,MAAM,IAAI,CAAC,6BAA6B,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAClE,CAAC;YACH,CAAC;SACF,CAAC,CAAC;QAEH,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC;YAC3B,EAAE,EAAE,mDAAmD;YACvD,IAAI,EAAE,+CAA+C;YACrD,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,EAAE;gBACpD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;oBACxB,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;WAErC,CAAC,CAAC;oBACH,MAAM,YAAY,GAAa,EAAE,CAAC;oBAClC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,kBAAG,EAAC,CAAC,CAAC;oBACpC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;wBAC7B,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC7B,CAAC;oBACD,KAAK,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,MAAM,CAC9B,0BAA0B,EAC1B,YAAY,CACb,CAAC;oBACF,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;wBACxB,OAAO;oBACT,CAAC;gBACH,CAAC;gBACD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;oBACxB,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;;;;4BAIpB,KAAK;WACtB,CAAC,CAAC;oBACH,MAAM,IAAI,GAAa,EAAE,CAAC;oBAC1B,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,kBAAG,EAAC,CAAC,CAAC;oBACnC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;wBAC7B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;oBACpB,CAAC;oBACD,KAAK,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,MAAM,CAC9B,uCAAuC,EACvC,IAAI,CACL,CAAC;oBACF,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;wBACxB,OAAO;oBACT,CAAC;oBACD,MAAM,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,MAAM,CAC/B,mCAAmC,EACnC,IAAI,CACL,CAAC;oBACF,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;wBACzB,OAAO;oBACT,CAAC;gBACH,CAAC;gBACD,IAAI,WAAW,KAAK,SAAS,EAAE,CAAC;oBAC9B,WAAW,GAAG,MAAM,GAAG,CAAC,OAAO,CAAC,MAAM,CACpC,+DAA+D;wBAC7D,iBAAiB;wBACjB,kCAAkC,CACrC,CAAC;oBACF,IAAI,WAAW,KAAK,IAAI;wBAAE,OAAO;gBACnC,CAAC;gBACD,MAAM,IAAA,+BAAgB,EACpB,GAAG,EACH;oBACE,SAAS,EAAE;;;2CAGoB,KAAK;2CACL,MAAM;;gCAEjB,KAAK,mBAAmB,WAAW,GAAG;iBAC3D,EACD,KAAK,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,MAAM,EAClC,OAAO,EACP,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,CAC7B,IAAA,mCAAoB,EAAC;oBACnB,KAAK,EAAE,GAAG;oBACV,IAAI;oBACJ,KAAK,EAAE,SAAS;iBACjB,CAAC,CACL,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;IACL,CAAC;;AArRH,4BAsRC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Trace} from '../../public/trace';\nimport {PerfettoPlugin} from '../../public/plugin';\nimport {getTimeSpanOfSelectionOrVisibleWindow} from '../../public/utils';\nimport {addQueryResultsTab} from '../../components/query_table/query_result_tab';\nimport {\n  addDebugCounterTrack,\n  addDebugSliceTrack,\n  addPivotedTracks,\n} from '../../components/tracks/debug_tracks';\nimport {STR} from '../../trace_processor/query_result';\n\nexport default class implements PerfettoPlugin {\n  static readonly id = 'dev.perfetto.AndroidPerf';\n  async addAppProcessStartsDebugTrack(\n    ctx: Trace,\n    reason: string,\n    sliceName: string,\n  ): Promise<void> {\n    const sliceColumns = [\n      'id',\n      'ts',\n      'dur',\n      'reason',\n      'process_name',\n      'intent',\n      'table_name',\n    ];\n    await addDebugSliceTrack({\n      trace: ctx,\n      data: {\n        sqlSource: `\n                    SELECT\n                      start_id AS id,\n                      proc_start_ts AS ts,\n                      total_dur AS dur,\n                      reason,\n                      process_name,\n                      intent,\n                      'slice' AS table_name\n                    FROM android_app_process_starts\n                    WHERE reason = '${reason}'\n                 `,\n        columns: sliceColumns,\n      },\n      title: 'app_' + sliceName + '_start reason: ' + reason,\n      argColumns: sliceColumns,\n    });\n  }\n\n  async onTraceLoad(ctx: Trace): Promise<void> {\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#BinderSystemServerIncoming',\n      name: 'Run query: system_server incoming binder graph',\n      callback: () =>\n        addQueryResultsTab(ctx, {\n          query: `INCLUDE PERFETTO MODULE android.binder;\n           SELECT * FROM android_binder_incoming_graph((SELECT upid FROM process WHERE name = 'system_server'))`,\n          title: 'system_server incoming binder graph',\n        }),\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#BinderSystemServerOutgoing',\n      name: 'Run query: system_server outgoing binder graph',\n      callback: () =>\n        addQueryResultsTab(ctx, {\n          query: `INCLUDE PERFETTO MODULE android.binder;\n           SELECT * FROM android_binder_outgoing_graph((SELECT upid FROM process WHERE name = 'system_server'))`,\n          title: 'system_server outgoing binder graph',\n        }),\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#MonitorContentionSystemServer',\n      name: 'Run query: system_server monitor_contention graph',\n      callback: () =>\n        addQueryResultsTab(ctx, {\n          query: `INCLUDE PERFETTO MODULE android.monitor_contention;\n           SELECT * FROM android_monitor_contention_graph((SELECT upid FROM process WHERE name = 'system_server'))`,\n          title: 'system_server monitor_contention graph',\n        }),\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#BinderAll',\n      name: 'Run query: all process binder graph',\n      callback: () =>\n        addQueryResultsTab(ctx, {\n          query: `INCLUDE PERFETTO MODULE android.binder;\n           SELECT * FROM android_binder_graph(-1000, 1000, -1000, 1000)`,\n          title: 'all process binder graph',\n        }),\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#ThreadClusterDistribution',\n      name: 'Run query: runtime cluster distribution for a thread',\n      callback: async (tid) => {\n        if (tid === undefined) {\n          tid = prompt('Enter a thread tid', '');\n          if (tid === null) return;\n        }\n        addQueryResultsTab(ctx, {\n          query: `\n          INCLUDE PERFETTO MODULE android.cpu.cluster_type;\n          WITH\n            total_runtime AS (\n              SELECT sum(dur) AS total_runtime\n              FROM sched s\n              LEFT JOIN thread t\n                USING (utid)\n              WHERE t.tid = ${tid}\n            )\n            SELECT\n              c.cluster_type AS cluster, sum(dur)/1e6 AS total_dur_ms,\n              sum(dur) * 1.0 / (SELECT * FROM total_runtime) AS percentage\n            FROM sched s\n            LEFT JOIN thread t\n              USING (utid)\n            LEFT JOIN android_cpu_cluster_mapping c\n              USING (cpu)\n            WHERE t.tid = ${tid}\n            GROUP BY 1`,\n          title: `runtime cluster distrubtion for tid ${tid}`,\n        });\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#SchedLatency',\n      name: 'Run query: top 50 sched latency for a thread',\n      callback: async (tid) => {\n        if (tid === undefined) {\n          tid = prompt('Enter a thread tid', '');\n          if (tid === null) return;\n        }\n        addQueryResultsTab(ctx, {\n          query: `\n          SELECT ts.*, t.tid, t.name, tt.id AS track_id\n          FROM thread_state ts\n          LEFT JOIN thread_track tt\n           USING (utid)\n          LEFT JOIN thread t\n           USING (utid)\n          WHERE ts.state IN ('R', 'R+') AND tid = ${tid}\n           ORDER BY dur DESC\n          LIMIT 50`,\n          title: `top 50 sched latency slice for tid ${tid}`,\n        });\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#SchedLatencyInSelectedWindow',\n      name: 'Top 50 sched latency in selected time window',\n      callback: async () => {\n        const window = await getTimeSpanOfSelectionOrVisibleWindow(ctx);\n        addQueryResultsTab(ctx, {\n          title: 'top 50 sched latency slice in selcted time window',\n          query: `SELECT\n            ts.*,\n            t.tid,\n            t.name AS thread_name,\n            tt.id AS track_id,\n            p.name AS process_name\n          FROM thread_state ts\n          LEFT JOIN thread_track tt\n           USING (utid)\n          LEFT JOIN thread t\n           USING (utid)\n          LEFT JOIN process p\n           USING (upid)\n          WHERE ts.state IN ('R', 'R+')\n           AND ts.ts >= ${window.start} and ts.ts < ${window.end}\n          ORDER BY dur DESC\n          LIMIT 50`,\n        });\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#AppProcessStarts',\n      name: 'Add tracks: app process starts',\n      callback: async () => {\n        await ctx.engine.query(\n          `INCLUDE PERFETTO MODULE android.app_process_starts;`,\n        );\n\n        const startReason = ['activity', 'service', 'broadcast', 'provider'];\n        for (const reason of startReason) {\n          await this.addAppProcessStartsDebugTrack(ctx, reason, 'process_name');\n        }\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#AppIntentStarts',\n      name: 'Add tracks: app intent starts',\n      callback: async () => {\n        await ctx.engine.query(\n          `INCLUDE PERFETTO MODULE android.app_process_starts;`,\n        );\n\n        const startReason = ['activity', 'service', 'broadcast'];\n        for (const reason of startReason) {\n          await this.addAppProcessStartsDebugTrack(ctx, reason, 'intent');\n        }\n      },\n    });\n\n    ctx.commands.registerCommand({\n      id: 'dev.perfetto.AndroidPerf#CounterByFtraceEventArgs',\n      name: 'Add tracks: counter by ftrace event arguments',\n      callback: async (event, value, filter, filterValue) => {\n        if (event === undefined) {\n          const result = await ctx.engine.query(`\n            SELECT DISTINCT name FROM ftrace_event\n          `);\n          const ftraceEvents: string[] = [];\n          const it = result.iter({name: STR});\n          for (; it.valid(); it.next()) {\n            ftraceEvents.push(it.name);\n          }\n          event = await ctx.omnibox.prompt(\n            'Choose a ftrace event...',\n            ftraceEvents,\n          );\n          if (event === undefined) {\n            return;\n          }\n        }\n        if (value === undefined) {\n          const result = await ctx.engine.query(`\n            SELECT DISTINCT\n              key\n            FROM ftrace_event JOIN args USING(arg_set_id)\n            WHERE name = '${event}'\n          `);\n          const args: string[] = [];\n          const it = result.iter({key: STR});\n          for (; it.valid(); it.next()) {\n            args.push(it.key);\n          }\n          value = await ctx.omnibox.prompt(\n            'Choose a argument as counter value...',\n            args,\n          );\n          if (value === undefined) {\n            return;\n          }\n          filter = await ctx.omnibox.prompt(\n            'Choose a argument as pivot key...',\n            args,\n          );\n          if (filter === undefined) {\n            return;\n          }\n        }\n        if (filterValue === undefined) {\n          filterValue = await ctx.omnibox.prompt(\n            'List the target pivot values (separate by comma) to present\\n' +\n              'ex1: 123,456 \\n' +\n              'ex2: \"task_name1\",\"task_name2\"\\n',\n          );\n          if (filterValue === null) return;\n        }\n        await addPivotedTracks(\n          ctx,\n          {\n            sqlSource: `\n              SELECT\n                ts,\n                EXTRACT_ARG(arg_set_id, '${value}') AS value,\n                EXTRACT_ARG(arg_set_id, '${filter}') AS pivot\n              FROM ftrace_event\n                WHERE name = '${event}' AND pivot IN (${filterValue})`,\n          },\n          event + '#' + value + '@' + filter,\n          'pivot',\n          async (ctx, data, trackName) =>\n            addDebugCounterTrack({\n              trace: ctx,\n              data,\n              title: trackName,\n            }),\n        );\n      },\n    });\n  }\n}\n"]}
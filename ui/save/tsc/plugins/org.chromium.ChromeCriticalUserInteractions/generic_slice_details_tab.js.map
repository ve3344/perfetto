{"version":3,"file":"generic_slice_details_tab.js","sourceRoot":"","sources":["../../../../src/plugins/org.chromium.ChromeCriticalUserInteractions/generic_slice_details_tab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {ColumnType} from '../../trace_processor/query_result';\nimport {sqlValueToReadableString} from '../../trace_processor/sql_utils';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout} from '../../widgets/grid_layout';\nimport {Section} from '../../widgets/section';\nimport {SqlRef} from '../../widgets/sql_ref';\nimport {dictToTree, Tree, TreeNode} from '../../widgets/tree';\nimport {Trace} from '../../public/trace';\n\nexport interface ColumnConfig {\n  readonly displayName?: string;\n}\n\nexport type Columns = {\n  readonly [columnName: string]: ColumnConfig;\n};\n\n// A details tab, which fetches slice-like object from a given SQL table by id\n// and renders it according to the provided config, specifying which columns\n// need to be rendered and how.\nexport class GenericSliceDetailsTab implements TrackEventDetailsPanel {\n  private data?: {[key: string]: ColumnType};\n\n  constructor(\n    private readonly trace: Trace,\n    private readonly sqlTableName: string,\n    private readonly id: number,\n    private readonly title: string,\n    private readonly columns?: Columns,\n  ) {}\n\n  async load() {\n    const result = await this.trace.engine.query(\n      `select * from ${this.sqlTableName} where id = ${this.id}`,\n    );\n\n    this.data = result.firstRow({});\n  }\n\n  render() {\n    if (!this.data) {\n      return m('h2', 'Loading');\n    }\n\n    const args: {[key: string]: m.Child} = {};\n    if (this.columns !== undefined) {\n      for (const key of Object.keys(this.columns)) {\n        let argKey = key;\n        if (this.columns[key].displayName !== undefined) {\n          argKey = this.columns[key].displayName!;\n        }\n        args[argKey] = sqlValueToReadableString(this.data[key]);\n      }\n    } else {\n      for (const key of Object.keys(this.data)) {\n        args[key] = sqlValueToReadableString(this.data[key]);\n      }\n    }\n\n    const details = dictToTree(args);\n\n    return m(\n      DetailsShell,\n      {\n        title: this.title,\n      },\n      m(\n        GridLayout,\n        m(Section, {title: 'Details'}, m(Tree, details)),\n        m(\n          Section,\n          {title: 'Metadata'},\n          m(Tree, [\n            m(TreeNode, {\n              left: 'SQL ID',\n              right: m(SqlRef, {\n                table: this.sqlTableName,\n                id: this.id,\n              }),\n            }),\n          ]),\n        ),\n      ),\n    );\n  }\n}\n"]}
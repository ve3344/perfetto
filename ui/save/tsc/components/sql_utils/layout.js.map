{"version":3,"file":"layout.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/layout.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAsBjC,sEAiBC;AAnBD,wEAAwE;AACxE,iCAAiC;AACjC,SAAgB,6BAA6B,CAC3C,OAAwB;IAExB,IAAI,GAAG,GACL,SAAS;QACT,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE;QAC1B,qBAAqB,OAAO,CAAC,EAAE,KAAK,OAAO,CAAC,GAAG,oBAAoB,OAAO,CAAC,EAAE,EAAE;QAC/E,6DAA6D;QAC7D,QAAQ;QACR,OAAO,CAAC,WAAW,CAAC;IACtB,IAAI,OAAO,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;QACtC,GAAG,IAAI,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC;IACzC,CAAC;IACD,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE,CAAC;QACxC,GAAG,IAAI,YAAY,GAAG,OAAO,CAAC,aAAa,CAAC;IAC9C,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Object to facilitate generation of SELECT statement using\n// generateSqlWithInternalLayout.\n//\n// Fields:\n// @columns: a string array list of the columns to be selected from the table.\n// required by the internal_layout function.\n// @sourceTable: the table in the FROM clause, source of the data.\n// @whereClause: the WHERE clause to filter data from the source table.\n// @orderByClause: the ORDER BY clause for the query data.\ninterface GenerateSqlArgs {\n  columns: string[];\n  sourceTable: string;\n  ts: string;\n  dur: string;\n  whereClause?: string;\n  orderByClause?: string;\n}\n\n// Function to generate a SELECT statement utilizing the internal_layout\n// SQL function as a depth field.\nexport function generateSqlWithInternalLayout(\n  sqlArgs: GenerateSqlArgs,\n): string {\n  let sql =\n    `SELECT ` +\n    sqlArgs.columns.toString() +\n    `, internal_layout(${sqlArgs.ts}, ${sqlArgs.dur}) OVER (ORDER BY ${sqlArgs.ts}` +\n    ' ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS depth' +\n    ' FROM ' +\n    sqlArgs.sourceTable;\n  if (sqlArgs.whereClause !== undefined) {\n    sql += ' WHERE ' + sqlArgs.whereClause;\n  }\n  if (sqlArgs.orderByClause !== undefined) {\n    sql += ' ORDER BY ' + sqlArgs.orderByClause;\n  }\n  return sql;\n}\n"]}
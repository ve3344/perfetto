{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/slice.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {duration, Time, time} from '../../base/time';\nimport {exists} from '../../base/utils';\nimport {Engine} from '../../trace_processor/engine';\nimport {\n  LONG,\n  LONG_NULL,\n  NUM,\n  NUM_NULL,\n  STR,\n  STR_NULL,\n} from '../../trace_processor/query_result';\nimport {\n  constraintsToQuerySuffix,\n  SQLConstraints,\n} from '../../trace_processor/sql_utils';\nimport {\n  asArgSetId,\n  asSliceSqlId,\n  asUpid,\n  asUtid,\n  SliceSqlId,\n  Upid,\n  Utid,\n} from './core_types';\nimport {Arg, getArgs} from './args';\nimport {getThreadInfo, ThreadInfo} from './thread';\nimport {getProcessInfo, ProcessInfo} from './process';\n\n// Basic information about a slice.\nexport interface SliceDetails {\n  id: SliceSqlId;\n  name: string;\n  ts: time;\n  absTime?: string;\n  dur: duration;\n  parentId?: SliceSqlId;\n  trackId: number;\n  depth: number;\n  thread?: ThreadInfo;\n  process?: ProcessInfo;\n  threadTs?: time;\n  threadDur?: duration;\n  category?: string;\n  args?: Arg[];\n}\n\nasync function getUtidAndUpid(\n  engine: Engine,\n  sqlTrackId: number,\n): Promise<{utid?: Utid; upid?: Upid}> {\n  const {upid, utid} = (\n    await engine.query(`\n      SELECT\n        extract_arg(dimension_arg_set_id, 'upid') as upid,\n        extract_arg(dimension_arg_set_id, 'utid') as utid\n      FROM track\n      WHERE id = ${sqlTrackId}\n    `)\n  ).firstRow({upid: NUM_NULL, utid: NUM_NULL});\n  return {upid: asUpid(upid ?? undefined), utid: asUtid(utid ?? undefined)};\n}\n\nexport async function getSliceFromConstraints(\n  engine: Engine,\n  constraints: SQLConstraints,\n): Promise<SliceDetails[]> {\n  const query = await engine.query(`\n    SELECT\n      id,\n      name,\n      ts,\n      dur,\n      track_id as trackId,\n      depth,\n      parent_id as parentId,\n      thread_dur as threadDur,\n      thread_ts as threadTs,\n      category,\n      arg_set_id as argSetId,\n      ABS_TIME_STR(ts) as absTime\n    FROM slice\n    ${constraintsToQuerySuffix(constraints)}`);\n  const it = query.iter({\n    id: NUM,\n    name: STR,\n    ts: LONG,\n    dur: LONG,\n    trackId: NUM,\n    depth: NUM,\n    parentId: NUM_NULL,\n    threadDur: LONG_NULL,\n    threadTs: LONG_NULL,\n    category: STR_NULL,\n    argSetId: NUM,\n    absTime: STR_NULL,\n  });\n\n  const result: SliceDetails[] = [];\n  for (; it.valid(); it.next()) {\n    const {utid, upid} = await getUtidAndUpid(engine, it.trackId);\n\n    const thread: ThreadInfo | undefined =\n      utid === undefined ? undefined : await getThreadInfo(engine, utid);\n    const process: ProcessInfo | undefined =\n      thread !== undefined\n        ? thread.process\n        : upid === undefined\n          ? undefined\n          : await getProcessInfo(engine, upid);\n\n    result.push({\n      id: asSliceSqlId(it.id),\n      name: it.name,\n      ts: Time.fromRaw(it.ts),\n      dur: it.dur,\n      trackId: it.trackId,\n      depth: it.depth,\n      parentId: asSliceSqlId(it.parentId ?? undefined),\n      thread,\n      process,\n      threadDur: it.threadDur ?? undefined,\n      threadTs: exists(it.threadTs) ? Time.fromRaw(it.threadTs) : undefined,\n      category: it.category ?? undefined,\n      args: await getArgs(engine, asArgSetId(it.argSetId)),\n      absTime: it.absTime ?? undefined,\n    });\n  }\n  return result;\n}\n\nexport async function getSlice(\n  engine: Engine,\n  id: SliceSqlId,\n): Promise<SliceDetails | undefined> {\n  const result = await getSliceFromConstraints(engine, {\n    filters: [`id=${id}`],\n  });\n  if (result.length > 1) {\n    throw new Error(`slice table has more than one row with id ${id}`);\n  }\n  if (result.length === 0) {\n    return undefined;\n  }\n  return result[0];\n}\n\n// A slice tree node, combining the information about the given slice with\n// information about its descendants.\nexport interface SliceTreeNode extends SliceDetails {\n  children: SliceTreeNode[];\n  parent?: SliceTreeNode;\n}\n\n// Get all descendants for a given slice in a tree form.\nexport async function getDescendantSliceTree(\n  engine: Engine,\n  id: SliceSqlId,\n): Promise<SliceTreeNode | undefined> {\n  const slice = await getSlice(engine, id);\n  if (slice === undefined) {\n    return undefined;\n  }\n  const descendants = await getSliceFromConstraints(engine, {\n    filters: [\n      `track_id=${slice.trackId}`,\n      `depth >= ${slice.depth}`,\n      `ts >= ${slice.ts}`,\n      // TODO(altimin): consider making `dur` undefined here instead of -1.\n      slice.dur >= 0 ? `ts <= (${slice.ts} + ${slice.dur})` : undefined,\n    ],\n    orderBy: ['ts', 'depth'],\n  });\n  const slices: {[key: SliceSqlId]: SliceTreeNode} = Object.fromEntries(\n    descendants.map((slice) => [\n      slice.id,\n      {\n        children: [],\n        ...slice,\n      },\n    ]),\n  );\n  for (const [_, slice] of Object.entries(slices)) {\n    if (slice.parentId !== undefined) {\n      const parent = slices[slice.parentId];\n      slice.parent = parent;\n      parent.children.push(slice);\n    }\n  }\n  return slices[id];\n}\n"]}
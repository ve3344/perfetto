{"version":3,"file":"args.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/args.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AA+BjC,0BA4CC;AAxED,qEAM4C;AAC5C,6CAAuD;AAqBhD,KAAK,UAAU,OAAO,CAC3B,MAAc,EACd,QAAkB;IAElB,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;;yBAYV,QAAQ;gBACjB,CAAC,CAAC;IAChB,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;QACpB,EAAE,EAAE,kBAAG;QACP,IAAI,EAAE,kBAAG;QACT,OAAO,EAAE,kBAAG;QACZ,GAAG,EAAE,kBAAG;QACR,QAAQ,EAAE,wBAAS;QACnB,WAAW,EAAE,uBAAQ;QACrB,SAAS,EAAE,uBAAQ;QACnB,SAAS,EAAE,kBAAG;QACd,YAAY,EAAE,uBAAQ;KACvB,CAAC,CAAC;IAEH,MAAM,MAAM,GAAU,EAAE,CAAC;IACzB,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QAC7B,MAAM,KAAK,GAAG,UAAU,CAAC,EAAE,CAAC,SAAyB,EAAE,EAAE,CAAC,CAAC;QAC3D,MAAM,CAAC,IAAI,CAAC;YACV,EAAE,EAAE,IAAA,oBAAO,EAAC,EAAE,CAAC,EAAE,CAAC;YAClB,IAAI,EAAE,EAAE,CAAC,IAAI;YACb,OAAO,EAAE,EAAE,CAAC,OAAO;YACnB,GAAG,EAAE,EAAE,CAAC,GAAG;YACX,KAAK;YACL,YAAY,EAAE,EAAE,CAAC,YAAY,IAAI,MAAM;SACxC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,UAAU,CACjB,SAAuB,EACvB,KAIC;IAED,QAAQ,SAAS,EAAE,CAAC;QAClB,KAAK,KAAK,CAAC;QACX,KAAK,MAAM;YACT,OAAO,KAAK,CAAC,QAAQ,CAAC;QACxB,KAAK,SAAS;YACZ,OAAO,KAAK,CAAC,QAAQ,KAAK,IAAI;gBAC5B,CAAC,CAAC,IAAI;gBACN,CAAC,CAAC,KAAK,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;QACzC,KAAK,QAAQ;YACX,OAAO,KAAK,CAAC,WAAW,CAAC;QAC3B,KAAK,MAAM;YACT,yEAAyE;YACzE,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC1B,KAAK,MAAM;YACT,OAAO,KAAK,CAAC,SAAS,CAAC;QACzB,KAAK,MAAM;YACT,OAAO,IAAI,CAAC;QACd;YACE,MAAM,CAAC,GAAW,SAAS,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,EAAE,CAAC,CAAC;IAC1D,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Engine} from '../../trace_processor/engine';\nimport {\n  LONG_NULL,\n  NUM,\n  NUM_NULL,\n  STR,\n  STR_NULL,\n} from '../../trace_processor/query_result';\nimport {ArgSetId, ArgsId, asArgId} from './core_types';\n\nexport type ArgValue = bigint | string | number | boolean | null;\ntype ArgValueType =\n  | 'int'\n  | 'uint'\n  | 'pointer'\n  | 'string'\n  | 'bool'\n  | 'real'\n  | 'null';\n\nexport interface Arg {\n  id: ArgsId;\n  type: string;\n  flatKey: string;\n  key: string;\n  value: ArgValue;\n  displayValue: string;\n}\n\nexport async function getArgs(\n  engine: Engine,\n  argSetId: ArgSetId,\n): Promise<Arg[]> {\n  const query = await engine.query(`\n    SELECT\n      id,\n      type,\n      flat_key as flatKey,\n      key,\n      int_value as intValue,\n      string_value as stringValue,\n      real_value as realValue,\n      value_type as valueType,\n      display_value as displayValue\n    FROM args\n    WHERE arg_set_id = ${argSetId}\n    ORDER BY id`);\n  const it = query.iter({\n    id: NUM,\n    type: STR,\n    flatKey: STR,\n    key: STR,\n    intValue: LONG_NULL,\n    stringValue: STR_NULL,\n    realValue: NUM_NULL,\n    valueType: STR,\n    displayValue: STR_NULL,\n  });\n\n  const result: Arg[] = [];\n  for (; it.valid(); it.next()) {\n    const value = parseValue(it.valueType as ArgValueType, it);\n    result.push({\n      id: asArgId(it.id),\n      type: it.type,\n      flatKey: it.flatKey,\n      key: it.key,\n      value,\n      displayValue: it.displayValue ?? 'NULL',\n    });\n  }\n\n  return result;\n}\n\nfunction parseValue(\n  valueType: ArgValueType,\n  value: {\n    intValue: bigint | null;\n    stringValue: string | null;\n    realValue: number | null;\n  },\n): ArgValue {\n  switch (valueType) {\n    case 'int':\n    case 'uint':\n      return value.intValue;\n    case 'pointer':\n      return value.intValue === null\n        ? null\n        : `0x${value.intValue.toString(16)}`;\n    case 'string':\n      return value.stringValue;\n    case 'bool':\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      return !!value.intValue;\n    case 'real':\n      return value.realValue;\n    case 'null':\n      return null;\n    default:\n      const x: number = valueType;\n      throw new Error(`Unable to process arg of type ${x}`);\n  }\n}\n"]}
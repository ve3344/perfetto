{"version":3,"file":"thread.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/thread.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAkBjC,sCAuBC;AAYD,sCAKC;AAGD,8CAKC;AA/DD,qEAA2E;AAC3E,+DAA4D;AAC5D,uCAAsE;AAa/D,KAAK,UAAU,aAAa,CACjC,MAAc,EACd,IAAU;IAEV,MAAM,EAAE,GAAG,CACT,MAAM,MAAM,CAAC,KAAK,CAAC;;;uBAGA,IAAI;KACtB,CAAC,CACH,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,kBAAG,EAAE,IAAI,EAAE,uBAAQ,EAAE,IAAI,EAAE,uBAAQ,EAAC,CAAC,CAAC;IACnD,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC;QAChB,OAAO;YACL,IAAI;SACL,CAAC;IACJ,CAAC;IACD,MAAM,IAAI,GAAG,IAAA,uBAAW,EAAC,EAAE,CAAC,IAAI,CAAqB,CAAC;IACtD,OAAO;QACL,IAAI;QACJ,GAAG,EAAE,EAAE,CAAC,GAAG;QACX,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,SAAS;QAC1B,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,MAAM,IAAA,wBAAc,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;KAC/D,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CACrB,IAAwB,EACxB,EAAsB;IAEtB,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACvB,OAAO,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;IAChD,CAAC;IACD,OAAO,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG,CAAC;AACrD,CAAC;AAED,SAAgB,aAAa,CAAC,IAG7B;IACC,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AAC/C,CAAC;AAED,2DAA2D;AAC3D,SAAgB,iBAAiB,CAAC,IAAiB;IACjD,IAAI,IAAI,EAAE,OAAO,KAAK,SAAS,EAAE,CAAC;QAChC,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,IAAA,wBAAc,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;AAClE,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Engine} from '../../trace_processor/engine';\nimport {NUM, NUM_NULL, STR_NULL} from '../../trace_processor/query_result';\nimport {fromNumNull} from '../../trace_processor/sql_utils';\nimport {ProcessInfo, getProcessInfo, getProcessName} from './process';\nimport {Upid, Utid} from './core_types';\n\n// TODO(altimin): We should consider implementing some form of cache rather than querying\n// the data from trace processor each time.\n\nexport interface ThreadInfo {\n  utid: Utid;\n  tid?: number;\n  name?: string;\n  process?: ProcessInfo;\n}\n\nexport async function getThreadInfo(\n  engine: Engine,\n  utid: Utid,\n): Promise<ThreadInfo> {\n  const it = (\n    await engine.query(`\n        SELECT tid, name, upid\n        FROM thread\n        WHERE utid = ${utid};\n    `)\n  ).iter({tid: NUM, name: STR_NULL, upid: NUM_NULL});\n  if (!it.valid()) {\n    return {\n      utid,\n    };\n  }\n  const upid = fromNumNull(it.upid) as Upid | undefined;\n  return {\n    utid,\n    tid: it.tid,\n    name: it.name ?? undefined,\n    process: upid ? await getProcessInfo(engine, upid) : undefined,\n  };\n}\n\nfunction getDisplayName(\n  name: string | undefined,\n  id: number | undefined,\n): string | undefined {\n  if (name === undefined) {\n    return id === undefined ? undefined : `${id}`;\n  }\n  return id === undefined ? name : `${name} [${id}]`;\n}\n\nexport function getThreadName(info?: {\n  name?: string;\n  tid?: number;\n}): string | undefined {\n  return getDisplayName(info?.name, info?.tid);\n}\n\n// Return the full thread name, including the process name.\nexport function getFullThreadName(info?: ThreadInfo): string | undefined {\n  if (info?.process === undefined) {\n    return getThreadName(info);\n  }\n  return `${getThreadName(info)} ${getProcessName(info.process)}`;\n}\n"]}
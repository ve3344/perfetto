{"version":3,"file":"sched.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/sched.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use size file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertTrue} from '../../base/logging';\nimport {duration, Time, time} from '../../base/time';\nimport {Engine} from '../../trace_processor/engine';\nimport {\n  LONG,\n  NUM,\n  NUM_NULL,\n  STR_NULL,\n} from '../../trace_processor/query_result';\nimport {\n  constraintsToQuerySuffix,\n  SQLConstraints,\n} from '../../trace_processor/sql_utils';\nimport {\n  asSchedSqlId,\n  asThreadStateSqlId,\n  asUtid,\n  SchedSqlId,\n  ThreadStateSqlId,\n  Utid,\n} from './core_types';\nimport {getThreadInfo, ThreadInfo} from './thread';\nimport {getThreadState, getThreadStateFromConstraints} from './thread_state';\n\n// Representation of a single thread state object, corresponding to\n// a row for the |thread_slice| table.\nexport interface Sched {\n  // Id into |sched| table.\n  id: SchedSqlId;\n  // Id of the corresponding entry in the |sched| table.\n  threadStateId?: ThreadStateSqlId;\n  // Timestamp of the beginning of this thread state in nanoseconds.\n  ts: time;\n  // Duration of this thread state in nanoseconds.\n  dur: duration;\n  cpu: number;\n  priority: number;\n  endState?: string;\n  thread: ThreadInfo;\n}\n\nexport interface SchedWakeupInfo {\n  wakeupTs?: time;\n  wakerUtid?: Utid;\n  wakerCpu?: number;\n}\n\n// Gets a list of sched objects from Trace Processor with given\n// constraints.\nexport async function getSchedFromConstraints(\n  engine: Engine,\n  constraints: SQLConstraints,\n): Promise<Sched[]> {\n  const query = await engine.query(`\n    SELECT\n      sched.id as schedSqlId,\n      (\n        SELECT id\n        FROM thread_state\n        WHERE\n          thread_state.ts = sched.ts\n          AND thread_state.utid = sched.utid\n      ) as threadStateSqlId,\n      sched.ts,\n      sched.dur,\n      sched.cpu,\n      sched.priority as priority,\n      sched.end_state as endState,\n      sched.utid\n    FROM sched\n    ${constraintsToQuerySuffix(constraints)}`);\n  const it = query.iter({\n    schedSqlId: NUM,\n    threadStateSqlId: NUM_NULL,\n    ts: LONG,\n    dur: LONG,\n    cpu: NUM,\n    priority: NUM,\n    endState: STR_NULL,\n    utid: NUM,\n  });\n\n  const result: Sched[] = [];\n\n  for (; it.valid(); it.next()) {\n    result.push({\n      id: asSchedSqlId(it.schedSqlId),\n      threadStateId: asThreadStateSqlId(it.threadStateSqlId ?? undefined),\n      ts: Time.fromRaw(it.ts),\n      dur: it.dur,\n      priority: it.priority,\n      endState: it.endState ?? undefined,\n      cpu: it.cpu ?? undefined,\n      thread: await getThreadInfo(engine, asUtid(it.utid)),\n    });\n  }\n  return result;\n}\n\nexport async function getSched(\n  engine: Engine,\n  id: SchedSqlId,\n): Promise<Sched | undefined> {\n  const result = await getSchedFromConstraints(engine, {\n    filters: [`sched.id=${id}`],\n  });\n  assertTrue(result.length <= 1);\n  if (result.length === 0) {\n    return undefined;\n  }\n  return result[0];\n}\n\n// Returns the thread and time of the wakeup that resulted in this running\n// sched slice. Omits wakeups that are known to be from interrupt context,\n// since we cannot always recover the correct waker cpu with the current\n// table layout.\nexport async function getSchedWakeupInfo(\n  engine: Engine,\n  sched: Sched,\n): Promise<SchedWakeupInfo | undefined> {\n  const prevRunnable = await getThreadStateFromConstraints(engine, {\n    filters: [\n      'state = \"R\"',\n      `ts + dur = ${sched.ts}`,\n      `utid = ${sched.thread.utid}`,\n      `(irq_context is null or irq_context = 0)`,\n    ],\n  });\n  if (prevRunnable.length === 0 || prevRunnable[0].wakerId === undefined) {\n    return undefined;\n  }\n  const waker = await getThreadState(engine, prevRunnable[0].wakerId);\n  if (waker === undefined) {\n    return undefined;\n  }\n  return {\n    wakerCpu: waker?.cpu,\n    wakerUtid: prevRunnable[0].wakerUtid,\n    wakeupTs: prevRunnable[0].ts,\n  };\n}\n"]}
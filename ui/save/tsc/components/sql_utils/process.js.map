{"version":3,"file":"process.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/process.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAmBjC,wCAiCC;AAYD,wCAKC;AAlED,qEAA2E;AAC3E,+DAA4D;AAerD,KAAK,UAAU,cAAc,CAClC,MAAc,EACd,IAAU;IAEV,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC;;;;;;;;;;;mBAWd,IAAI;GACpB,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC;QACvB,IAAI,EAAE,kBAAG;QACT,GAAG,EAAE,kBAAG;QACR,IAAI,EAAE,uBAAQ;QACd,GAAG,EAAE,uBAAQ;QACb,WAAW,EAAE,uBAAQ;QACrB,WAAW,EAAE,uBAAQ;KACtB,CAAC,CAAC;IACH,OAAO;QACL,IAAI;QACJ,GAAG,EAAE,GAAG,CAAC,GAAG;QACZ,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,SAAS;QAC3B,GAAG,EAAE,IAAA,uBAAW,EAAC,GAAG,CAAC,GAAG,CAAC;QACzB,WAAW,EAAE,GAAG,CAAC,WAAW,IAAI,SAAS;QACzC,WAAW,EAAE,IAAA,uBAAW,EAAC,GAAG,CAAC,WAAW,CAAC;KAC1C,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CACrB,IAAwB,EACxB,EAAsB;IAEtB,IAAI,IAAI,KAAK,SAAS,EAAE,CAAC;QACvB,OAAO,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;IAChD,CAAC;IACD,OAAO,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GAAG,CAAC;AACrD,CAAC;AAED,SAAgB,cAAc,CAAC,IAG9B;IACC,OAAO,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Engine} from '../../trace_processor/engine';\nimport {NUM, NUM_NULL, STR_NULL} from '../../trace_processor/query_result';\nimport {fromNumNull} from '../../trace_processor/sql_utils';\nimport {Upid} from './core_types';\n\n// TODO(altimin): We should consider implementing some form of cache rather than querying\n// the data from trace processor each time.\n\nexport interface ProcessInfo {\n  upid: Upid;\n  pid?: number;\n  name?: string;\n  uid?: number;\n  packageName?: string;\n  versionCode?: number;\n}\n\nexport async function getProcessInfo(\n  engine: Engine,\n  upid: Upid,\n): Promise<ProcessInfo> {\n  const res = await engine.query(`\n    include perfetto module android.process_metadata;\n    select\n      p.upid,\n      p.pid,\n      p.name,\n      p.uid,\n      m.package_name as packageName,\n      m.version_code as versionCode\n    from process p\n    left join android_process_metadata m using (upid)\n    where upid = ${upid};\n  `);\n  const row = res.firstRow({\n    upid: NUM,\n    pid: NUM,\n    name: STR_NULL,\n    uid: NUM_NULL,\n    packageName: STR_NULL,\n    versionCode: NUM_NULL,\n  });\n  return {\n    upid,\n    pid: row.pid,\n    name: row.name ?? undefined,\n    uid: fromNumNull(row.uid),\n    packageName: row.packageName ?? undefined,\n    versionCode: fromNumNull(row.versionCode),\n  };\n}\n\nfunction getDisplayName(\n  name: string | undefined,\n  id: number | undefined,\n): string | undefined {\n  if (name === undefined) {\n    return id === undefined ? undefined : `${id}`;\n  }\n  return id === undefined ? name : `${name} [${id}]`;\n}\n\nexport function getProcessName(info?: {\n  name?: string;\n  pid?: number;\n}): string | undefined {\n  return getDisplayName(info?.name, info?.pid);\n}\n"]}
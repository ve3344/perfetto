{"version":3,"file":"core_types.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/core_types.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAmBjC,wBAEC;AASD,wBAEC;AASD,oCAEC;AASD,oCAEC;AASD,gDAEC;AAMD,gCAEC;AAOD,0BAEC;AA/DD,SAAgB,MAAM,CAAC,CAAU;IAC/B,OAAO,CAAqB,CAAC;AAC/B,CAAC;AASD,SAAgB,MAAM,CAAC,CAAU;IAC/B,OAAO,CAAqB,CAAC;AAC/B,CAAC;AASD,SAAgB,YAAY,CAAC,CAAU;IACrC,OAAO,CAA2B,CAAC;AACrC,CAAC;AASD,SAAgB,YAAY,CAAC,CAAU;IACrC,OAAO,CAA2B,CAAC;AACrC,CAAC;AASD,SAAgB,kBAAkB,CAAC,CAAU;IAC3C,OAAO,CAAiC,CAAC;AAC3C,CAAC;AAMD,SAAgB,UAAU,CAAC,CAAU;IACnC,OAAO,CAAyB,CAAC;AACnC,CAAC;AAOD,SAAgB,OAAO,CAAC,CAAU;IAChC,OAAO,CAAuB,CAAC;AACjC,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Brand} from '../../base/brand';\n\n// Type-safe aliases for various flavours of ints Trace Processor exposes\n// (e.g. timestamp or ids into a given SQL table) and functions to work with\n// them.\n//\n// These rely on TypeScript's type branding: extending a number with additional\n// compile-time-only type information, which prevents \"implicit\" conversions\n// between different ids.\n\n// Unique id for a process, id into |process| table.\nexport type Upid = number & {\n  __type: 'Upid';\n};\n\nexport function asUpid(v: number): Upid;\nexport function asUpid(v?: number): Upid | undefined;\nexport function asUpid(v?: number): Upid | undefined {\n  return v as Upid | undefined;\n}\n\n// Unique id for a thread, id into |thread| table.\nexport type Utid = number & {\n  __type: 'Utid';\n};\n\nexport function asUtid(v: number): Utid;\nexport function asUtid(v?: number): Utid | undefined;\nexport function asUtid(v?: number): Utid | undefined {\n  return v as Utid | undefined;\n}\n\n// Id into |slice| SQL table.\nexport type SliceSqlId = number & {\n  __type: 'SliceSqlId';\n};\n\nexport function asSliceSqlId(v: number): SliceSqlId;\nexport function asSliceSqlId(v?: number): SliceSqlId | undefined;\nexport function asSliceSqlId(v?: number): SliceSqlId | undefined {\n  return v as SliceSqlId | undefined;\n}\n\n// Id into |sched| SQL table.\nexport type SchedSqlId = number & {\n  __type: 'SchedSqlId';\n};\n\nexport function asSchedSqlId(v: number): SchedSqlId;\nexport function asSchedSqlId(v?: number): SchedSqlId | undefined;\nexport function asSchedSqlId(v?: number): SchedSqlId | undefined {\n  return v as SchedSqlId | undefined;\n}\n\n// Id into |thread_state| SQL table.\nexport type ThreadStateSqlId = number & {\n  __type: 'ThreadStateSqlId';\n};\n\nexport function asThreadStateSqlId(v: number): ThreadStateSqlId;\nexport function asThreadStateSqlId(v?: number): ThreadStateSqlId | undefined;\nexport function asThreadStateSqlId(v?: number): ThreadStateSqlId | undefined {\n  return v as ThreadStateSqlId | undefined;\n}\n\nexport type ArgSetId = Brand<number, 'ArgSetId'>;\n\nexport function asArgSetId(v: number): ArgSetId;\nexport function asArgSetId(v?: number): ArgSetId | undefined;\nexport function asArgSetId(v?: number): ArgSetId | undefined {\n  return v as ArgSetId | undefined;\n}\n\n// Id into |args| SQL table.\nexport type ArgsId = Brand<number, 'ArgsId'>;\n\nexport function asArgId(v: number): ArgsId;\nexport function asArgId(v?: number): ArgsId | undefined;\nexport function asArgId(v?: number): ArgsId | undefined {\n  return v as ArgsId | undefined;\n}\n"]}
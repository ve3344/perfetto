{"version":3,"file":"thread_state.js","sourceRoot":"","sources":["../../../../src/components/sql_utils/thread_state.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use size file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {duration, Time, time} from '../../base/time';\nimport {Engine} from '../../trace_processor/engine';\nimport {\n  LONG,\n  NUM,\n  NUM_NULL,\n  STR_NULL,\n} from '../../trace_processor/query_result';\nimport {\n  constraintsToQuerySuffix,\n  fromNumNull,\n  SQLConstraints,\n} from '../../trace_processor/sql_utils';\nimport {\n  asThreadStateSqlId,\n  asUtid,\n  SchedSqlId,\n  ThreadStateSqlId,\n  Utid,\n} from './core_types';\nimport {getThreadInfo, ThreadInfo} from './thread';\n\nconst states: {[key: string]: string} = {\n  'R': 'Runnable',\n  'S': 'Sleeping',\n  'D': 'Uninterruptible Sleep',\n  'T': 'Stopped',\n  't': 'Traced',\n  'X': 'Exit (Dead)',\n  'Z': 'Exit (Zombie)',\n  'x': 'Task Dead',\n  'I': 'Idle',\n  'K': 'Wake Kill',\n  'W': 'Waking',\n  'P': 'Parked',\n  'N': 'No Load',\n  '+': '(Preempted)',\n};\n\nexport function translateState(\n  state: string | undefined | null,\n  ioWait: boolean | undefined = undefined,\n) {\n  if (state === undefined) return '';\n\n  // Self describing states\n  switch (state) {\n    case 'Running':\n    case 'Initialized':\n    case 'Deferred Ready':\n    case 'Transition':\n    case 'Stand By':\n    case 'Waiting':\n      return state;\n  }\n\n  if (state === null) {\n    return 'Unknown';\n  }\n  let result = states[state[0]];\n  if (ioWait === true) {\n    result += ' (IO)';\n  } else if (ioWait === false) {\n    result += ' (non-IO)';\n  }\n  for (let i = 1; i < state.length; i++) {\n    result += state[i] === '+' ? ' ' : ' + ';\n    result += states[state[i]];\n  }\n  // state is some string we don't know how to translate.\n  if (result === undefined) return state;\n\n  return result;\n}\n\n// Single thread state slice, corresponding to a row of |thread_slice| table.\nexport interface ThreadState {\n  // Id into |thread_state| table.\n  id: ThreadStateSqlId;\n  // Id of the corresponding entry in the |sched| table.\n  schedSqlId?: SchedSqlId;\n  // Timestamp of the beginning of this thread state in nanoseconds.\n  ts: time;\n  // Duration of this thread state in nanoseconds.\n  dur: duration;\n  // CPU id if this thread state corresponds to a thread running on the CPU.\n  cpu?: number;\n  // Human-readable name of this thread state.\n  state: string;\n  // Kernel function where the thread has suspended.\n  blockedFunction?: string;\n  // Description of the thread itself.\n  thread?: ThreadInfo;\n  // Thread that was running when this thread was woken up.\n  wakerUtid?: Utid;\n  // Active thread state at the time of the wakeup.\n  wakerId?: ThreadStateSqlId;\n  // Was the wakeup from an interrupt context? It is possible for this to be\n  // unset even for runnable states, if the trace was recorded without\n  // interrupt information.\n  wakerInterruptCtx?: boolean;\n  // Kernel priority of this thread state.\n  priority?: number;\n}\n\n// Gets a list of thread state objects from Trace Processor with given\n// constraints.\nexport async function getThreadStateFromConstraints(\n  engine: Engine,\n  constraints: SQLConstraints,\n): Promise<ThreadState[]> {\n  const query = await engine.query(`\n    WITH raw AS (\n      SELECT\n      ts.id,\n      sched.id AS sched_id,\n      ts.ts,\n      ts.dur,\n      ts.cpu,\n      ts.state,\n      ts.blocked_function,\n      ts.io_wait,\n      ts.utid,\n      ts.waker_utid,\n      ts.waker_id,\n      ts.irq_context,\n      sched.priority\n    FROM thread_state ts\n    LEFT JOIN sched USING (utid, ts)\n    )\n    SELECT * FROM raw\n\n    ${constraintsToQuerySuffix(constraints)}`);\n  const it = query.iter({\n    id: NUM,\n    sched_id: NUM_NULL,\n    ts: LONG,\n    dur: LONG,\n    cpu: NUM_NULL,\n    state: STR_NULL,\n    blocked_function: STR_NULL,\n    io_wait: NUM_NULL,\n    utid: NUM,\n    waker_utid: NUM_NULL,\n    waker_id: NUM_NULL,\n    irq_context: NUM_NULL,\n    priority: NUM_NULL,\n  });\n\n  const result: ThreadState[] = [];\n\n  for (; it.valid(); it.next()) {\n    const ioWait = it.io_wait === null ? undefined : it.io_wait > 0;\n\n    // TODO(altimin): Consider fetching thread / process info using a single\n    // query instead of one per row.\n    result.push({\n      id: it.id as ThreadStateSqlId,\n      schedSqlId: fromNumNull(it.sched_id) as SchedSqlId | undefined,\n      ts: Time.fromRaw(it.ts),\n      dur: it.dur,\n      cpu: fromNumNull(it.cpu),\n      state: translateState(it.state ?? undefined, ioWait),\n      blockedFunction: it.blocked_function ?? undefined,\n      thread: await getThreadInfo(engine, asUtid(it.utid)),\n      wakerUtid: asUtid(it.waker_utid ?? undefined),\n      wakerId: asThreadStateSqlId(it.waker_id ?? undefined),\n      wakerInterruptCtx: fromNumNull(it.irq_context) as boolean | undefined,\n      priority: fromNumNull(it.priority),\n    });\n  }\n  return result;\n}\n\nexport async function getThreadState(\n  engine: Engine,\n  id: number,\n): Promise<ThreadState | undefined> {\n  const result = await getThreadStateFromConstraints(engine, {\n    filters: [`id=${id}`],\n  });\n  if (result.length > 1) {\n    throw new Error(`thread_state table has more than one row with id ${id}`);\n  }\n  if (result.length === 0) {\n    return undefined;\n  }\n  return result[0];\n}\n"]}
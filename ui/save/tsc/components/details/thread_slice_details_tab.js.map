{"version":3,"file":"thread_slice_details_tab.js","sourceRoot":"","sources":["../../../../src/components/details/thread_slice_details_tab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use size file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Icons} from '../../base/semantic_icons';\nimport {TimeSpan} from '../../base/time';\nimport {exists} from '../../base/utils';\nimport {Engine} from '../../trace_processor/engine';\nimport {Button} from '../../widgets/button';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout, GridLayoutColumn} from '../../widgets/grid_layout';\nimport {MenuItem, PopupMenu2} from '../../widgets/menu';\nimport {Section} from '../../widgets/section';\nimport {Tree} from '../../widgets/tree';\nimport {Flow, FlowPoint} from '../../core/flow_types';\nimport {hasArgs, renderArguments} from './slice_args';\nimport {renderDetails} from './slice_details';\nimport {getSlice, SliceDetails} from '../sql_utils/slice';\nimport {\n  BreakdownByThreadState,\n  breakDownIntervalByThreadState,\n} from './thread_state';\nimport {asSliceSqlId} from '../sql_utils/core_types';\nimport {DurationWidget} from '../widgets/duration';\nimport {SliceRef} from '../widgets/slice';\nimport {BasicTable} from '../../widgets/basic_table';\nimport {getSqlTableDescription} from '../widgets/sql/legacy_table/sql_table_registry';\nimport {assertExists} from '../../base/logging';\nimport {Trace} from '../../public/trace';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {TrackEventSelection} from '../../public/selection';\nimport {extensions} from '../extensions';\nimport {TraceImpl} from '../../core/trace_impl';\n\ninterface ContextMenuItem {\n  name: string;\n  shouldDisplay(slice: SliceDetails): boolean;\n  run(slice: SliceDetails, trace: Trace): void;\n}\n\nfunction getTidFromSlice(slice: SliceDetails): number | undefined {\n  return slice.thread?.tid;\n}\n\nfunction getPidFromSlice(slice: SliceDetails): number | undefined {\n  return slice.process?.pid;\n}\n\nfunction getProcessNameFromSlice(slice: SliceDetails): string | undefined {\n  return slice.process?.name;\n}\n\nfunction getThreadNameFromSlice(slice: SliceDetails): string | undefined {\n  return slice.thread?.name;\n}\n\nfunction hasName(slice: SliceDetails): boolean {\n  return slice.name !== undefined;\n}\n\nfunction hasTid(slice: SliceDetails): boolean {\n  return getTidFromSlice(slice) !== undefined;\n}\n\nfunction hasPid(slice: SliceDetails): boolean {\n  return getPidFromSlice(slice) !== undefined;\n}\n\nfunction hasProcessName(slice: SliceDetails): boolean {\n  return getProcessNameFromSlice(slice) !== undefined;\n}\n\nfunction hasThreadName(slice: SliceDetails): boolean {\n  return getThreadNameFromSlice(slice) !== undefined;\n}\n\nconst ITEMS: ContextMenuItem[] = [\n  {\n    name: 'Ancestor slices',\n    shouldDisplay: (slice: SliceDetails) => slice.parentId !== undefined,\n    run: (slice: SliceDetails, trace: Trace) =>\n      extensions.addLegacySqlTableTab(trace, {\n        table: assertExists(getSqlTableDescription('slice')),\n        filters: [\n          {\n            op: (cols) =>\n              `${cols[0]} IN (SELECT id FROM _slice_ancestor_and_self(${slice.id}))`,\n            columns: ['id'],\n          },\n        ],\n        imports: ['slices.hierarchy'],\n      }),\n  },\n  {\n    name: 'Descendant slices',\n    shouldDisplay: () => true,\n    run: (slice: SliceDetails, trace: Trace) =>\n      extensions.addLegacySqlTableTab(trace, {\n        table: assertExists(getSqlTableDescription('slice')),\n        filters: [\n          {\n            op: (cols) =>\n              `${cols[0]} IN (SELECT id FROM _slice_descendant_and_self(${slice.id}))`,\n            columns: ['id'],\n          },\n        ],\n        imports: ['slices.hierarchy'],\n      }),\n  },\n  {\n    name: 'Average duration of slice name',\n    shouldDisplay: (slice: SliceDetails) => hasName(slice),\n    run: (slice: SliceDetails, trace: Trace) =>\n      extensions.addQueryResultsTab(trace, {\n        query: `SELECT AVG(dur) / 1e9 FROM slice WHERE name = '${slice.name!}'`,\n        title: `${slice.name} average dur`,\n      }),\n  },\n  {\n    name: 'Binder txn names + monitor contention on thread',\n    shouldDisplay: (slice) =>\n      hasProcessName(slice) &&\n      hasThreadName(slice) &&\n      hasTid(slice) &&\n      hasPid(slice),\n    run: (slice: SliceDetails, trace: Trace) => {\n      trace.engine\n        .query(\n          `INCLUDE PERFETTO MODULE android.binder;\n           INCLUDE PERFETTO MODULE android.monitor_contention;`,\n        )\n        .then(() =>\n          extensions.addDebugSliceTrack({\n            trace,\n            data: {\n              sqlSource: `\n                                WITH merged AS (\n                                  SELECT s.ts, s.dur, tx.aidl_name AS name, 0 AS depth\n                                  FROM android_binder_txns tx\n                                  JOIN slice s\n                                    ON tx.binder_txn_id = s.id\n                                  JOIN thread_track\n                                    ON s.track_id = thread_track.id\n                                  JOIN thread\n                                    USING (utid)\n                                  JOIN process\n                                    USING (upid)\n                                  WHERE pid = ${getPidFromSlice(slice)}\n                                        AND tid = ${getTidFromSlice(slice)}\n                                        AND aidl_name IS NOT NULL\n                                  UNION ALL\n                                  SELECT\n                                    s.ts,\n                                    s.dur,\n                                    short_blocked_method || ' -> ' || blocking_thread_name || ':' || short_blocking_method AS name,\n                                    1 AS depth\n                                  FROM android_binder_txns tx\n                                  JOIN android_monitor_contention m\n                                    ON m.binder_reply_tid = tx.server_tid AND m.binder_reply_ts = tx.server_ts\n                                  JOIN slice s\n                                    ON tx.binder_txn_id = s.id\n                                  JOIN thread_track\n                                    ON s.track_id = thread_track.id\n                                  JOIN thread ON thread.utid = thread_track.utid\n                                  JOIN process ON process.upid = thread.upid\n                                  WHERE process.pid = ${getPidFromSlice(slice)}\n                                        AND thread.tid = ${getTidFromSlice(\n                                          slice,\n                                        )}\n                                        AND short_blocked_method IS NOT NULL\n                                  ORDER BY depth\n                                ) SELECT ts, dur, name FROM merged`,\n            },\n            title: `Binder names (${getProcessNameFromSlice(\n              slice,\n            )}:${getThreadNameFromSlice(slice)})`,\n          }),\n        );\n    },\n  },\n];\n\nfunction getSliceContextMenuItems(slice: SliceDetails) {\n  return ITEMS.filter((item) => item.shouldDisplay(slice));\n}\n\nasync function getSliceDetails(\n  engine: Engine,\n  id: number,\n): Promise<SliceDetails | undefined> {\n  return getSlice(engine, asSliceSqlId(id));\n}\n\nexport class ThreadSliceDetailsPanel implements TrackEventDetailsPanel {\n  private sliceDetails?: SliceDetails;\n  private breakdownByThreadState?: BreakdownByThreadState;\n\n  constructor(private readonly trace: TraceImpl) {}\n\n  async load({eventId}: TrackEventSelection) {\n    const {trace} = this;\n    const details = await getSliceDetails(trace.engine, eventId);\n\n    if (\n      details !== undefined &&\n      details.thread !== undefined &&\n      details.dur > 0\n    ) {\n      this.breakdownByThreadState = await breakDownIntervalByThreadState(\n        trace.engine,\n        TimeSpan.fromTimeAndDuration(details.ts, details.dur),\n        details.thread.utid,\n      );\n    }\n\n    this.sliceDetails = details;\n  }\n\n  render() {\n    if (!exists(this.sliceDetails)) {\n      return m(DetailsShell, {title: 'Slice', description: 'Loading...'});\n    }\n    const slice = this.sliceDetails;\n    return m(\n      DetailsShell,\n      {\n        title: 'Slice',\n        description: slice.name,\n        buttons: this.renderContextButton(slice),\n      },\n      m(\n        GridLayout,\n        renderDetails(this.trace, slice, this.breakdownByThreadState),\n        this.renderRhs(this.trace, slice),\n      ),\n    );\n  }\n\n  private renderRhs(trace: Trace, slice: SliceDetails): m.Children {\n    const precFlows = this.renderPrecedingFlows(slice);\n    const followingFlows = this.renderFollowingFlows(slice);\n    const args =\n      hasArgs(slice.args) &&\n      m(\n        Section,\n        {title: 'Arguments'},\n        m(Tree, renderArguments(trace, slice.args)),\n      );\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (precFlows ?? followingFlows ?? args) {\n      return m(GridLayoutColumn, precFlows, followingFlows, args);\n    } else {\n      return undefined;\n    }\n  }\n\n  private renderPrecedingFlows(slice: SliceDetails): m.Children {\n    const flows = this.trace.flows.connectedFlows;\n    const inFlows = flows.filter(({end}) => end.sliceId === slice.id);\n\n    if (inFlows.length > 0) {\n      const isRunTask =\n        slice.name === 'ThreadControllerImpl::RunTask' ||\n        slice.name === 'ThreadPool_RunTask';\n\n      return m(\n        Section,\n        {title: 'Preceding Flows'},\n        m(BasicTable<Flow>, {\n          columns: [\n            {\n              title: 'Slice',\n              render: (flow: Flow) =>\n                m(SliceRef, {\n                  id: asSliceSqlId(flow.begin.sliceId),\n                  name:\n                    flow.begin.sliceChromeCustomName ?? flow.begin.sliceName,\n                }),\n            },\n            {\n              title: 'Delay',\n              render: (flow: Flow) =>\n                m(DurationWidget, {\n                  dur: flow.end.sliceStartTs - flow.begin.sliceEndTs,\n                }),\n            },\n            {\n              title: 'Thread',\n              render: (flow: Flow) =>\n                this.getThreadNameForFlow(flow.begin, !isRunTask),\n            },\n          ],\n          data: inFlows,\n        }),\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private renderFollowingFlows(slice: SliceDetails): m.Children {\n    const flows = this.trace.flows.connectedFlows;\n    const outFlows = flows.filter(({begin}) => begin.sliceId === slice.id);\n\n    if (outFlows.length > 0) {\n      const isPostTask =\n        slice.name === 'ThreadPool_PostTask' ||\n        slice.name === 'SequenceManager PostTask';\n\n      return m(\n        Section,\n        {title: 'Following Flows'},\n        m(BasicTable<Flow>, {\n          columns: [\n            {\n              title: 'Slice',\n              render: (flow: Flow) =>\n                m(SliceRef, {\n                  id: asSliceSqlId(flow.end.sliceId),\n                  name: flow.end.sliceChromeCustomName ?? flow.end.sliceName,\n                }),\n            },\n            {\n              title: 'Delay',\n              render: (flow: Flow) =>\n                m(DurationWidget, {\n                  dur: flow.end.sliceStartTs - flow.begin.sliceEndTs,\n                }),\n            },\n            {\n              title: 'Thread',\n              render: (flow: Flow) =>\n                this.getThreadNameForFlow(flow.end, !isPostTask),\n            },\n          ],\n          data: outFlows,\n        }),\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private getThreadNameForFlow(\n    flow: FlowPoint,\n    includeProcessName: boolean,\n  ): string {\n    return includeProcessName\n      ? `${flow.threadName} (${flow.processName})`\n      : flow.threadName;\n  }\n\n  private renderContextButton(sliceInfo: SliceDetails): m.Children {\n    const contextMenuItems = getSliceContextMenuItems(sliceInfo);\n    if (contextMenuItems.length > 0) {\n      const trigger = m(Button, {\n        compact: true,\n        label: 'Contextual Options',\n        rightIcon: Icons.ContextMenu,\n      });\n      return m(\n        PopupMenu2,\n        {trigger},\n        contextMenuItems.map(({name, run}) =>\n          m(MenuItem, {label: name, onclick: () => run(sliceInfo, this.trace)}),\n        ),\n      );\n    } else {\n      return undefined;\n    }\n  }\n}\n"]}
{"version":3,"file":"thread_state.js","sourceRoot":"","sources":["../../../../src/components/details/thread_state.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {duration, TimeSpan} from '../../base/time';\nimport {Engine} from '../../trace_processor/engine';\nimport {\n  LONG,\n  NUM_NULL,\n  STR,\n  STR_NULL,\n} from '../../trace_processor/query_result';\nimport {TreeNode} from '../../widgets/tree';\nimport {DurationWidget} from '../widgets/duration';\nimport {Utid} from '../sql_utils/core_types';\n\n// An individual node of the thread state breakdown tree.\nclass Node {\n  parent?: Node;\n  children: Map<string, Node>;\n  dur: duration;\n  startsCollapsed: boolean = true;\n\n  constructor(parent?: Node) {\n    this.parent = parent;\n    this.children = new Map();\n    this.dur = 0n;\n  }\n\n  getOrCreateChild(name: string) {\n    let child = this.children.get(name);\n    if (!child) {\n      child = new Node(this);\n      this.children.set(name, child);\n    }\n    return child;\n  }\n\n  addDuration(dur: duration) {\n    let node: Node | undefined = this;\n    while (node !== undefined) {\n      node.dur += dur;\n      node = node.parent;\n    }\n  }\n}\n\n// Thread state breakdown data (tree).\n// Can be passed to ThreadStateBreakdownTreeNode to be rendered as a part of a\n// tree.\nexport interface BreakdownByThreadState {\n  root: Node;\n}\n\n// Compute a breakdown of thread states for a given thread for a given time\n// interval.\nexport async function breakDownIntervalByThreadState(\n  engine: Engine,\n  range: TimeSpan,\n  utid: Utid,\n): Promise<BreakdownByThreadState> {\n  // TODO(altimin): this probably should share some code with pivot tables when\n  // we actually get some pivot tables we like.\n  const query = await engine.query(`\n    INCLUDE PERFETTO MODULE sched.time_in_state;\n    INCLUDE PERFETTO MODULE sched.states;\n    INCLUDE PERFETTO MODULE android.cpu.cluster_type;\n\n    SELECT\n      sched_state_io_to_human_readable_string(state, io_wait) as state,\n      state AS rawState,\n      cluster_type AS clusterType,\n      cpu,\n      blocked_function AS blockedFunction,\n      dur\n    FROM sched_time_in_state_and_cpu_for_thread_in_interval(${range.start}, ${range.duration}, ${utid})\n    LEFT JOIN android_cpu_cluster_mapping USING(cpu);\n  `);\n  const it = query.iter({\n    state: STR,\n    rawState: STR,\n    clusterType: STR_NULL,\n    cpu: NUM_NULL,\n    blockedFunction: STR_NULL,\n    dur: LONG,\n  });\n  const root = new Node();\n  for (; it.valid(); it.next()) {\n    let currentNode = root;\n    currentNode = currentNode.getOrCreateChild(it.state);\n    // If the CPU time is not null, add it to the breakdown.\n    if (it.clusterType !== null) {\n      currentNode = currentNode.getOrCreateChild(it.clusterType);\n    }\n    if (it.cpu !== null) {\n      currentNode = currentNode.getOrCreateChild(`CPU ${it.cpu}`);\n    }\n    if (it.blockedFunction !== null) {\n      currentNode = currentNode.getOrCreateChild(`${it.blockedFunction}`);\n    }\n    currentNode.addDuration(it.dur);\n  }\n  return {\n    root,\n  };\n}\n\nfunction renderChildren(node: Node, totalDur: duration): m.Child[] {\n  const res = Array.from(node.children.entries()).map(([name, child]) =>\n    renderNode(child, name, totalDur),\n  );\n  return res;\n}\n\nfunction renderNode(node: Node, name: string, totalDur: duration): m.Child {\n  const durPercent = (100 * Number(node.dur)) / Number(totalDur);\n  return m(\n    TreeNode,\n    {\n      left: name,\n      right: [\n        m(DurationWidget, {dur: node.dur}),\n        ` (${durPercent.toFixed(2)}%)`,\n      ],\n      startsCollapsed: node.startsCollapsed,\n    },\n    renderChildren(node, totalDur),\n  );\n}\n\ninterface BreakdownByThreadStateTreeNodeAttrs {\n  dur: duration;\n  data: BreakdownByThreadState;\n}\n\n// A tree node that displays a nested breakdown a time interval by thread state.\nexport class BreakdownByThreadStateTreeNode\n  implements m.ClassComponent<BreakdownByThreadStateTreeNodeAttrs>\n{\n  view({attrs}: m.Vnode<BreakdownByThreadStateTreeNodeAttrs>): m.Child[] {\n    return renderChildren(attrs.data.root, attrs.dur);\n  }\n}\n"]}
{"version":3,"file":"slice_args_parser_unittest.js","sourceRoot":"","sources":["../../../../src/components/details/slice_args_parser_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {convertArgsToObject, convertArgsToTree} from './slice_args_parser';\n\nconst args = [\n  {key: 'simple_key', value: 'simple_value'},\n  {key: 'thing.key', value: 'value'},\n  {key: 'thing.point[0].x', value: 10},\n  {key: 'thing.point[0].y', value: 20},\n  {key: 'thing.point[1].x', value: 0},\n  {key: 'thing.point[1].y', value: -10},\n  {key: 'foo.bar.foo.bar', value: 'baz'},\n];\n\ndescribe('convertArgsToTree', () => {\n  test('converts example arg set', () => {\n    expect(convertArgsToTree(args)).toEqual([\n      {\n        key: 'simple_key',\n        value: {key: 'simple_key', value: 'simple_value'},\n      },\n      {\n        key: 'thing',\n        children: [\n          {key: 'key', value: {key: 'thing.key', value: 'value'}},\n          {\n            key: 'point',\n            children: [\n              {\n                key: 0,\n                children: [\n                  {\n                    key: 'x',\n                    value: {key: 'thing.point[0].x', value: 10},\n                  },\n                  {\n                    key: 'y',\n                    value: {key: 'thing.point[0].y', value: 20},\n                  },\n                ],\n              },\n              {\n                key: 1,\n                children: [\n                  {\n                    key: 'x',\n                    value: {key: 'thing.point[1].x', value: 0},\n                  },\n                  {\n                    key: 'y',\n                    value: {key: 'thing.point[1].y', value: -10},\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n      {\n        key: 'foo',\n        children: [\n          {\n            key: 'bar',\n            children: [\n              {\n                key: 'foo',\n                children: [\n                  {\n                    key: 'bar',\n                    value: {key: 'foo.bar.foo.bar', value: 'baz'},\n                  },\n                ],\n              },\n            ],\n          },\n        ],\n      },\n    ]);\n  });\n\n  test('handles value and children in same node', () => {\n    const args = [\n      {key: 'foo', value: 'foo'},\n      {key: 'foo.bar', value: 'bar'},\n    ];\n    expect(convertArgsToTree(args)).toEqual([\n      {\n        key: 'foo',\n        value: {key: 'foo', value: 'foo'},\n        children: [{key: 'bar', value: {key: 'foo.bar', value: 'bar'}}],\n      },\n    ]);\n  });\n\n  test('handles mixed key types', () => {\n    const args = [\n      {key: 'foo[0]', value: 'foo'},\n      {key: 'foo.bar', value: 'bar'},\n    ];\n    expect(convertArgsToTree(args)).toEqual([\n      {\n        key: 'foo',\n        children: [\n          {key: 0, value: {key: 'foo[0]', value: 'foo'}},\n          {key: 'bar', value: {key: 'foo.bar', value: 'bar'}},\n        ],\n      },\n    ]);\n  });\n\n  test('picks latest where duplicate keys exist', () => {\n    const args = [\n      {key: 'foo', value: 'foo'},\n      {key: 'foo', value: 'bar'},\n    ];\n    expect(convertArgsToTree(args)).toEqual([\n      {key: 'foo', value: {key: 'foo', value: 'bar'}},\n    ]);\n  });\n\n  test('handles sparse arrays', () => {\n    const args = [{key: 'foo[12]', value: 'foo'}];\n    expect(convertArgsToTree(args)).toEqual([\n      {\n        key: 'foo',\n        children: [{key: 12, value: {key: 'foo[12]', value: 'foo'}}],\n      },\n    ]);\n  });\n});\n\ndescribe('convertArgsToObject', () => {\n  it('converts example arg set', () => {\n    expect(convertArgsToObject(args)).toEqual({\n      simple_key: 'simple_value',\n      thing: {\n        key: 'value',\n        point: [\n          {x: 10, y: 20},\n          {x: 0, y: -10},\n        ],\n      },\n      foo: {bar: {foo: {bar: 'baz'}}},\n    });\n  });\n\n  test('throws on args containing a node with both value and children', () => {\n    expect(() => {\n      convertArgsToObject([\n        {key: 'foo', value: 'foo'},\n        {key: 'foo.bar', value: 'bar'},\n      ]);\n    }).toThrow();\n  });\n\n  test('throws on args containing mixed key types', () => {\n    expect(() => {\n      convertArgsToObject([\n        {key: 'foo[0]', value: 'foo'},\n        {key: 'foo.bar', value: 'bar'},\n      ]);\n    }).toThrow();\n  });\n\n  test('picks last one where duplicate keys exist', () => {\n    const args = [\n      {key: 'foo', value: 'foo'},\n      {key: 'foo', value: 'bar'},\n    ];\n    expect(convertArgsToObject(args)).toEqual({foo: 'bar'});\n  });\n\n  test('handles sparse arrays', () => {\n    const args = [{key: 'foo[3]', value: 'foo'}];\n    expect(convertArgsToObject(args)).toEqual({\n      foo: [undefined, undefined, undefined, 'foo'],\n    });\n  });\n});\n"]}
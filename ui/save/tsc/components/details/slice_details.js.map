{"version":3,"file":"slice_details.js","sourceRoot":"","sources":["../../../../src/components/details/slice_details.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {BigintMath} from '../../base/bigint_math';\nimport {sqliteString} from '../../base/string_utils';\nimport {exists} from '../../base/utils';\nimport {SliceDetails} from '../sql_utils/slice';\nimport {Anchor} from '../../widgets/anchor';\nimport {MenuItem, PopupMenu2} from '../../widgets/menu';\nimport {Section} from '../../widgets/section';\nimport {SqlRef} from '../../widgets/sql_ref';\nimport {Tree, TreeNode} from '../../widgets/tree';\nimport {\n  BreakdownByThreadState,\n  BreakdownByThreadStateTreeNode,\n} from './thread_state';\nimport {DurationWidget} from '../widgets/duration';\nimport {renderProcessRef} from '../widgets/process';\nimport {renderThreadRef} from '../widgets/thread';\nimport {Timestamp} from '../widgets/timestamp';\nimport {getSqlTableDescription} from '../widgets/sql/legacy_table/sql_table_registry';\nimport {assertExists} from '../../base/logging';\nimport {Trace} from '../../public/trace';\nimport {extensions} from '../extensions';\n\n// Renders a widget storing all of the generic details for a slice from the\n// slice table.\nexport function renderDetails(\n  trace: Trace,\n  slice: SliceDetails,\n  durationBreakdown?: BreakdownByThreadState,\n) {\n  return m(\n    Section,\n    {title: 'Details'},\n    m(\n      Tree,\n      m(TreeNode, {\n        left: 'Name',\n        right: m(\n          PopupMenu2,\n          {\n            trigger: m(Anchor, slice.name),\n          },\n          m(MenuItem, {\n            label: 'Slices with the same name',\n            onclick: () => {\n              extensions.addLegacySqlTableTab(trace, {\n                table: assertExists(getSqlTableDescription('slice')),\n                filters: [\n                  {\n                    op: (cols) => `${cols[0]} = ${sqliteString(slice.name)}`,\n                    columns: ['name'],\n                  },\n                ],\n              });\n            },\n          }),\n        ),\n      }),\n      m(TreeNode, {\n        left: 'Category',\n        right:\n          !slice.category || slice.category === '[NULL]'\n            ? 'N/A'\n            : slice.category,\n      }),\n      m(TreeNode, {\n        left: 'Start time',\n        right: m(Timestamp, {ts: slice.ts}),\n      }),\n      exists(slice.absTime) &&\n        m(TreeNode, {left: 'Absolute Time', right: slice.absTime}),\n      m(\n        TreeNode,\n        {\n          left: 'Duration',\n          right: m(DurationWidget, {dur: slice.dur}),\n        },\n        exists(durationBreakdown) &&\n          slice.dur > 0 &&\n          m(BreakdownByThreadStateTreeNode, {\n            data: durationBreakdown,\n            dur: slice.dur,\n          }),\n      ),\n      renderThreadDuration(slice),\n      slice.thread &&\n        m(TreeNode, {\n          left: 'Thread',\n          right: renderThreadRef(slice.thread),\n        }),\n      slice.process &&\n        m(TreeNode, {\n          left: 'Process',\n          right: renderProcessRef(slice.process),\n        }),\n      slice.process &&\n        exists(slice.process.uid) &&\n        m(TreeNode, {\n          left: 'User ID',\n          right: slice.process.uid,\n        }),\n      slice.process &&\n        slice.process.packageName &&\n        m(TreeNode, {\n          left: 'Package name',\n          right: slice.process.packageName,\n        }),\n      slice.process &&\n        exists(slice.process.versionCode) &&\n        m(TreeNode, {\n          left: 'Version code',\n          right: slice.process.versionCode,\n        }),\n      m(TreeNode, {\n        left: 'SQL ID',\n        right: m(SqlRef, {table: 'slice', id: slice.id}),\n      }),\n    ),\n  );\n}\n\nfunction renderThreadDuration(sliceInfo: SliceDetails) {\n  if (exists(sliceInfo.threadTs) && exists(sliceInfo.threadDur)) {\n    // If we have valid thread duration, also display a percentage of\n    // |threadDur| compared to |dur|.\n    const ratio = BigintMath.ratio(sliceInfo.threadDur, sliceInfo.dur);\n    const threadDurFractionSuffix =\n      sliceInfo.threadDur === -1n ? '' : ` (${(ratio * 100).toFixed(2)}%)`;\n    return m(TreeNode, {\n      left: 'Thread duration',\n      right: [\n        m(DurationWidget, {dur: sliceInfo.threadDur}),\n        threadDurFractionSuffix,\n      ],\n    });\n  } else {\n    return undefined;\n  }\n}\n"]}
{"version":3,"file":"query_table.js","sourceRoot":"","sources":["../../../../src/components/query_table/query_table.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {BigintMath} from '../../base/bigint_math';\nimport {copyToClipboard} from '../../base/clipboard';\nimport {isString} from '../../base/object_utils';\nimport {Time} from '../../base/time';\nimport {QueryResponse} from './queries';\nimport {Row} from '../../trace_processor/query_result';\nimport {Anchor} from '../../widgets/anchor';\nimport {Button} from '../../widgets/button';\nimport {Callout} from '../../widgets/callout';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {downloadData} from '../../base/download_utils';\nimport {Router} from '../../core/router';\nimport {scrollTo} from '../../public/scroll_helper';\nimport {AppImpl} from '../../core/app_impl';\nimport {Trace} from '../../public/trace';\n\ninterface QueryTableRowAttrs {\n  trace: Trace;\n  row: Row;\n  columns: string[];\n}\n\ntype Numeric = bigint | number;\n\nfunction isIntegral(x: Row[string]): x is Numeric {\n  return (\n    typeof x === 'bigint' || (typeof x === 'number' && Number.isInteger(x))\n  );\n}\n\nfunction hasTs(row: Row): row is Row & {ts: Numeric} {\n  return 'ts' in row && isIntegral(row.ts);\n}\n\nfunction hasDur(row: Row): row is Row & {dur: Numeric} {\n  return 'dur' in row && isIntegral(row.dur);\n}\n\nfunction hasTrackId(row: Row): row is Row & {track_id: Numeric} {\n  return 'track_id' in row && isIntegral(row.track_id);\n}\n\nfunction hasType(row: Row): row is Row & {type: string} {\n  return 'type' in row && isString(row.type);\n}\n\nfunction hasId(row: Row): row is Row & {id: Numeric} {\n  return 'id' in row && isIntegral(row.id);\n}\n\nfunction hasSliceId(row: Row): row is Row & {slice_id: Numeric} {\n  return 'slice_id' in row && isIntegral(row.slice_id);\n}\n\n// These are properties that a row should have in order to be \"slice-like\",\n// insofar as it represents a time range and a track id which can be revealed\n// or zoomed-into on the timeline.\ntype Sliceish = {\n  ts: Numeric;\n  dur: Numeric;\n  track_id: Numeric;\n};\n\nexport function isSliceish(row: Row): row is Row & Sliceish {\n  return hasTs(row) && hasDur(row) && hasTrackId(row);\n}\n\n// Attempts to extract a slice ID from a row, or undefined if none can be found\nexport function getSliceId(row: Row): number | undefined {\n  if (hasType(row) && row.type.includes('slice')) {\n    if (hasId(row)) {\n      return Number(row.id);\n    }\n  } else {\n    if (hasSliceId(row)) {\n      return Number(row.slice_id);\n    }\n  }\n  return undefined;\n}\n\nclass QueryTableRow implements m.ClassComponent<QueryTableRowAttrs> {\n  private readonly trace: Trace;\n\n  constructor({attrs}: m.Vnode<QueryTableRowAttrs>) {\n    this.trace = attrs.trace;\n  }\n\n  view(vnode: m.Vnode<QueryTableRowAttrs>) {\n    const {row, columns} = vnode.attrs;\n    const cells = columns.map((col) => this.renderCell(col, row[col]));\n\n    // TODO(dproy): Make click handler work from analyze page.\n    if (\n      Router.parseUrl(window.location.href).page === '/viewer' &&\n      isSliceish(row)\n    ) {\n      return m(\n        'tr',\n        {\n          onclick: () => this.selectAndRevealSlice(row, false),\n          // TODO(altimin): Consider improving the logic here (e.g. delay?) to\n          // account for cases when dblclick fires late.\n          ondblclick: () => this.selectAndRevealSlice(row, true),\n          clickable: true,\n          title: 'Go to slice',\n        },\n        cells,\n      );\n    } else {\n      return m('tr', cells);\n    }\n  }\n\n  private renderCell(name: string, value: Row[string]) {\n    if (value instanceof Uint8Array) {\n      return m('td', this.renderBlob(name, value));\n    } else {\n      return m('td', `${value}`);\n    }\n  }\n\n  private renderBlob(name: string, value: Uint8Array) {\n    return m(\n      Anchor,\n      {\n        onclick: () => downloadData(`${name}.blob`, value),\n      },\n      `Blob (${value.length} bytes)`,\n    );\n  }\n\n  private selectAndRevealSlice(\n    row: Row & Sliceish,\n    switchToCurrentSelectionTab: boolean,\n  ) {\n    const trackId = Number(row.track_id);\n    const sliceStart = Time.fromRaw(BigInt(row.ts));\n    // row.dur can be negative. Clamp to 1ns.\n    const sliceDur = BigintMath.max(BigInt(row.dur), 1n);\n    const trackUri = this.trace.tracks.findTrack((td) =>\n      td.tags?.trackIds?.includes(trackId),\n    )?.uri;\n    if (trackUri !== undefined) {\n      scrollTo({\n        track: {uri: trackUri, expandGroup: true},\n        time: {start: sliceStart, end: Time.add(sliceStart, sliceDur)},\n      });\n      const sliceId = getSliceId(row);\n      if (sliceId !== undefined) {\n        this.selectSlice(sliceId, switchToCurrentSelectionTab);\n      }\n    }\n  }\n\n  private selectSlice(sliceId: number, switchToCurrentSelectionTab: boolean) {\n    this.trace.selection.selectSqlEvent('slice', sliceId, {\n      switchToCurrentSelectionTab,\n      scrollToSelection: true,\n    });\n  }\n}\n\ninterface QueryTableContentAttrs {\n  trace: Trace;\n  resp: QueryResponse;\n}\n\nclass QueryTableContent implements m.ClassComponent<QueryTableContentAttrs> {\n  private previousResponse?: QueryResponse;\n\n  onbeforeupdate(vnode: m.CVnode<QueryTableContentAttrs>) {\n    return vnode.attrs.resp !== this.previousResponse;\n  }\n\n  view(vnode: m.CVnode<QueryTableContentAttrs>) {\n    const resp = vnode.attrs.resp;\n    this.previousResponse = resp;\n    const cols = [];\n    for (const col of resp.columns) {\n      cols.push(m('td', col));\n    }\n    const tableHeader = m('tr', cols);\n\n    const rows = resp.rows.map((row) =>\n      m(QueryTableRow, {trace: vnode.attrs.trace, row, columns: resp.columns}),\n    );\n\n    if (resp.error) {\n      return m('.query-error', `SQL error: ${resp.error}`);\n    } else {\n      return m(\n        'table.pf-query-table',\n        m('thead', tableHeader),\n        m('tbody', rows),\n      );\n    }\n  }\n}\n\ninterface QueryTableAttrs {\n  trace: Trace;\n  query: string;\n  resp?: QueryResponse;\n  contextButtons?: m.Child[];\n  fillParent: boolean;\n}\n\nexport class QueryTable implements m.ClassComponent<QueryTableAttrs> {\n  private readonly trace: Trace;\n\n  constructor({attrs}: m.CVnode<QueryTableAttrs>) {\n    this.trace = attrs.trace;\n  }\n\n  view({attrs}: m.CVnode<QueryTableAttrs>) {\n    const {resp, query, contextButtons = [], fillParent} = attrs;\n\n    return m(\n      DetailsShell,\n      {\n        title: this.renderTitle(resp),\n        description: query,\n        buttons: this.renderButtons(query, contextButtons, resp),\n        fillParent,\n      },\n      resp && this.renderTableContent(resp),\n    );\n  }\n\n  renderTitle(resp?: QueryResponse) {\n    if (!resp) {\n      return 'Query - running';\n    }\n    const result = resp.error ? 'error' : `${resp.rows.length} rows`;\n    if (AppImpl.instance.testingMode) {\n      // Omit the duration in tests, they cause screenshot diff failures.\n      return `Query result (${result})`;\n    }\n    return `Query result (${result}) - ${resp.durationMs.toLocaleString()}ms`;\n  }\n\n  renderButtons(\n    query: string,\n    contextButtons: m.Child[],\n    resp?: QueryResponse,\n  ) {\n    return [\n      contextButtons,\n      m(Button, {\n        label: 'Copy query',\n        onclick: () => {\n          copyToClipboard(query);\n        },\n      }),\n      resp &&\n        resp.error === undefined &&\n        m(Button, {\n          label: 'Copy result (.tsv)',\n          onclick: () => {\n            queryResponseToClipboard(resp);\n          },\n        }),\n    ];\n  }\n\n  renderTableContent(resp: QueryResponse) {\n    return m(\n      '.pf-query-panel',\n      resp.statementWithOutputCount > 1 &&\n        m(\n          '.pf-query-warning',\n          m(\n            Callout,\n            {icon: 'warning'},\n            `${resp.statementWithOutputCount} out of ${resp.statementCount} `,\n            'statements returned a result. ',\n            'Only the results for the last statement are displayed.',\n          ),\n        ),\n      m(QueryTableContent, {trace: this.trace, resp}),\n    );\n  }\n}\n\nasync function queryResponseToClipboard(resp: QueryResponse): Promise<void> {\n  const lines: string[][] = [];\n  lines.push(resp.columns);\n  for (const row of resp.rows) {\n    const line = [];\n    for (const col of resp.columns) {\n      const value = row[col];\n      line.push(value === null ? 'NULL' : `${value}`);\n    }\n    lines.push(line);\n  }\n  copyToClipboard(lines.map((line) => line.join('\\t')).join('\\n'));\n}\n"]}
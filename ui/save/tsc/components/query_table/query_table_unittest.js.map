{"version":3,"file":"query_table_unittest.js","sourceRoot":"","sources":["../../../../src/components/query_table/query_table_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getSliceId, isSliceish} from './query_table';\n\ndescribe('getSliceId', () => {\n  test('get slice_id if present when no other clues are available', () => {\n    expect(getSliceId({})).toBe(undefined);\n    expect(getSliceId({id: 123})).toBe(undefined);\n    expect(getSliceId({slice_id: 456})).toBe(456);\n    expect(getSliceId({id: 123, slice_id: 456})).toBe(456);\n\n    expect(getSliceId({type: 'foo'})).toBe(undefined);\n    expect(getSliceId({type: 'foo', id: 123})).toBe(undefined);\n    expect(getSliceId({type: 'foo', slice_id: 456})).toBe(456);\n    expect(getSliceId({type: 'foo', id: 123, slice_id: 456})).toBe(456);\n  });\n\n  test('get id if present when row looks like a slice', () => {\n    expect(getSliceId({type: 'slice'})).toBe(undefined);\n    expect(getSliceId({type: 'slice', id: 123})).toBe(123);\n    expect(getSliceId({type: 'slice', slice_id: 456})).toBe(undefined);\n    expect(getSliceId({type: 'slice', id: 123, slice_id: 456})).toBe(123);\n  });\n});\n\ntest('isSliceish', () => {\n  expect(isSliceish({})).toBeFalsy();\n  expect(isSliceish({ts: 123, dur: 456})).toBeFalsy();\n  expect(isSliceish({ts: 123, dur: 456, track_id: 798})).toBeTruthy();\n  expect(isSliceish({ts: 123n, dur: 456n})).toBeFalsy();\n  expect(isSliceish({ts: 123n, dur: 456n, track_id: 798n})).toBeTruthy();\n  expect(isSliceish({ts: 123.4, dur: 456.7, track_id: 798.9})).toBeFalsy();\n  expect(isSliceish({ts: '123', dur: '456', track_id: '789'})).toBeFalsy();\n});\n"]}
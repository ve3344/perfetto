{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../../../src/components/query_table/queries.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAwBjC,4BA6DC;AAhFD,MAAM,gBAAgB,GAAG,KAAK,CAAC;AAmBxB,KAAK,UAAU,QAAQ,CAC5B,QAAgB,EAChB,MAAc,EACd,MAAuB;IAEvB,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IAElC,yEAAyE;IACzE,uEAAuE;IACvE,uEAAuE;IACvE,wBAAwB;IAExB,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAEpD,IAAI,WAAW,CAAC,EAAE,EAAE,CAAC;QACnB,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC;QACnC,MAAM,oBAAoB,GAAG,MAAM,EAAE,oBAAoB,IAAI,IAAI,CAAC;QAElE,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,OAAO,CAAC;QAC/C,MAAM,IAAI,GAAU,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,EAAE,CAAC;QACnC,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,KAAK,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;YAC/D,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,KAAK,MAAM,OAAO,IAAI,OAAO,EAAE,CAAC;gBAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBAChC,GAAG,CAAC,OAAO,CAAC,GAAG,KAAK,KAAK,IAAI,IAAI,oBAAoB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;YACzE,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACf,IAAI,EAAE,OAAO,IAAI,gBAAgB;gBAAE,MAAM;QAC3C,CAAC;QAED,MAAM,MAAM,GAAkB;YAC5B,KAAK,EAAE,QAAQ;YACf,UAAU;YACV,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE;YACvB,aAAa,EAAE,QAAQ,CAAC,OAAO,EAAE;YACjC,OAAO;YACP,IAAI;YACJ,cAAc,EAAE,QAAQ,CAAC,cAAc,EAAE;YACzC,wBAAwB,EAAE,QAAQ,CAAC,wBAAwB,EAAE;YAC7D,gBAAgB,EAAE,QAAQ,CAAC,gBAAgB,EAAE;SAC9C,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;SAAM,CAAC;QACN,wEAAwE;QACxE,+DAA+D;QAC/D,sEAAsE;QACtE,8DAA8D;QAC9D,OAAO;YACL,KAAK,EAAE,QAAQ;YACf,UAAU,EAAE,WAAW,CAAC,GAAG,EAAE,GAAG,OAAO;YACvC,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,aAAa,EAAE,CAAC;YAChB,OAAO,EAAE,EAAE;YACX,IAAI,EAAE,EAAE;YACR,cAAc,EAAE,CAAC;YACjB,wBAAwB,EAAE,CAAC;YAC3B,gBAAgB,EAAE,EAAE;SACrB,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Engine} from '../../trace_processor/engine';\nimport {Row} from '../../trace_processor/query_result';\n\nconst MAX_DISPLAY_ROWS = 10000;\n\nexport interface QueryResponse {\n  query: string;\n  error?: string;\n  totalRowCount: number;\n  durationMs: number;\n  columns: string[];\n  rows: Row[];\n  statementCount: number;\n  statementWithOutputCount: number;\n  lastStatementSql: string;\n}\n\nexport interface QueryRunParams {\n  // If true, replaces nulls with \"NULL\" string. Default is true.\n  convertNullsToString?: boolean;\n}\n\nexport async function runQuery(\n  sqlQuery: string,\n  engine: Engine,\n  params?: QueryRunParams,\n): Promise<QueryResponse> {\n  const startMs = performance.now();\n\n  // TODO(primiano): once the controller thread is gone we should pass down\n  // the result objects directly to the frontend, iterate over the result\n  // and deal with pagination there. For now we keep the old behavior and\n  // truncate to 10k rows.\n\n  const maybeResult = await engine.tryQuery(sqlQuery);\n\n  if (maybeResult.ok) {\n    const queryRes = maybeResult.value;\n    const convertNullsToString = params?.convertNullsToString ?? true;\n\n    const durationMs = performance.now() - startMs;\n    const rows: Row[] = [];\n    const columns = queryRes.columns();\n    let numRows = 0;\n    for (const iter = queryRes.iter({}); iter.valid(); iter.next()) {\n      const row: Row = {};\n      for (const colName of columns) {\n        const value = iter.get(colName);\n        row[colName] = value === null && convertNullsToString ? 'NULL' : value;\n      }\n      rows.push(row);\n      if (++numRows >= MAX_DISPLAY_ROWS) break;\n    }\n\n    const result: QueryResponse = {\n      query: sqlQuery,\n      durationMs,\n      error: queryRes.error(),\n      totalRowCount: queryRes.numRows(),\n      columns,\n      rows,\n      statementCount: queryRes.statementCount(),\n      statementWithOutputCount: queryRes.statementWithOutputCount(),\n      lastStatementSql: queryRes.lastStatementSql(),\n    };\n    return result;\n  } else {\n    // In the case of a query error we don't want the exception to bubble up\n    // as a crash. The |queryRes| object will be populated anyways.\n    // queryRes.error() is used to tell if the query errored or not. If it\n    // errored, the frontend will show a graceful message instead.\n    return {\n      query: sqlQuery,\n      durationMs: performance.now() - startMs,\n      error: maybeResult.error,\n      totalRowCount: 0,\n      columns: [],\n      rows: [],\n      statementCount: 0,\n      statementWithOutputCount: 0,\n      lastStatementSql: '',\n    };\n  }\n}\n"]}
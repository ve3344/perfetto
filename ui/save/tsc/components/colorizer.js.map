{"version":3,"file":"colorizer.js","sourceRoot":"","sources":["../../../src/components/colorizer.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AA4EjC,0CAiBC;AAoDD,sCAgBC;AAED,kCAEC;AAED,wCASC;AAED,kCAOC;AAED,kCASC;AAED,4CAOC;AAED,wCAEC;AAED,8CAMC;AAvND,iDAAkC;AAClC,uCAAkC;AAClC,yDAAmD;AACnD,2CAA4D;AAE5D,uCAAmD;AAEnD,iEAAiE;AACjE,+DAA+D;AAC/D,6EAA6E;AAC7E,MAAM,0BAA0B,GAAG,GAAG,CAAC;AAEvC,6EAA6E;AAC7E,8EAA8E;AAC9E,sEAAsE;AAEtE,4EAA4E;AAC5E,gDAAgD;AAChD,6EAA6E;AAC7E,8EAA8E;AAC9E,sEAAsE;AACtE,8EAA8E;AAC9E,yCAAyC;AAEzC,MAAM,qBAAqB,GAAG,4BAAY,CAAC,QAAQ,CAAC;IAClD,EAAE,EAAE,qBAAqB;IACzB,IAAI,EAAE,gDAAgD;IACtD,WAAW,EAAE,uDAAuD;IACpE,YAAY,EAAE,KAAK;CACpB,CAAC,CAAC;AAEH,MAAM,eAAe,GAAc,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC;AAE7C,MAAM,cAAc,GAAY;IAC9B,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IAClC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACrC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACrC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACnC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACnC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACnC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;IACpC,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC;CACrC,CAAC;AAEF,MAAM,WAAW,GAAG,IAAI,gBAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AAC9C,MAAM,WAAW,GAAG,IAAI,gBAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5C,MAAM,UAAU,GAAG,IAAI,gBAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAE5C,MAAM,UAAU,GAAkB,cAAc,CAAC,GAAG,CAAC,CAAC,KAAK,EAAe,EAAE;IAC1E,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IAEpD,OAAO;QACL,IAAI;QACJ,OAAO;QACP,QAAQ,EAAE,UAAU;QACpB,QAAQ,EAAE,WAAW,EAAE,wCAAwC;QAC/D,WAAW,EAAE,WAAW;QACxB,YAAY,EAAE,WAAW,EAAE,6BAA6B;KACzD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,2EAA2E;AAC3E,2EAA2E;AAC3E,SAAgB,eAAe,CAAC,IAAW,EAAE,OAAe;IAC1D,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAElD,OAAO;QACL,IAAI;QACJ,OAAO;QACP,QAAQ,EAAE,UAAU;QACpB,QAAQ,EACN,IAAI,CAAC,mBAAmB,IAAI,0BAA0B;YACpD,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,WAAW;QACjB,WAAW,EACT,OAAO,CAAC,mBAAmB,IAAI,0BAA0B;YACvD,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,WAAW;QACjB,YAAY,EAAE,WAAW,EAAE,6BAA6B;KACzD,CAAC;AACJ,CAAC;AAED,MAAM,IAAI,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACvD,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7D,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAChE,MAAM,UAAU,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC/D,MAAM,iBAAiB,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1E,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5D,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAE5D,iEAAiE;AACjE,yDAAyD;AAC5C,QAAA,eAAe,GAAG,eAAe,CAAC,IAAI,gBAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAE7E,+EAA+E;AAC/E,0BAA0B;AAC1B,SAAS,mBAAmB,CAAC,IAAY;IACvC,MAAM,QAAQ,GAAG,IAAA,WAAI,EAAC,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;IAC/C,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC;AAED,MAAM,oBAAoB,GAAG,IAAI,GAAG,EAAuB,CAAC;AAE5D,4EAA4E;AAC5E,SAAS,qBAAqB,CAAC,IAAY;IACzC,MAAM,WAAW,GAAG,oBAAoB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnD,IAAI,WAAW,EAAE,CAAC;QAChB,OAAO,WAAW,CAAC;IACrB,CAAC;SAAM,CAAC;QACN,MAAM,GAAG,GAAG,IAAA,WAAI,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC5B,yEAAyE;QACzE,eAAe;QACf,MAAM,UAAU,GAAG,EAAE,CAAC;QAEtB,4EAA4E;QAC5E,4EAA4E;QAC5E,+BAA+B;QAC/B,0EAA0E;QAC1E,MAAM,IAAI,GAAG,IAAI,kBAAU,CAAC;YAC1B,CAAC,EAAE,GAAG;YACN,CAAC,EAAE,UAAU;YACb,CAAC,EAAE,IAAA,WAAI,EAAC,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE;SAC7B,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,kBAAU,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC,CAAC;QAC/D,MAAM,WAAW,GAAG,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAEnD,oBAAoB,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAE5C,OAAO,WAAW,CAAC;IACrB,CAAC;AACH,CAAC;AAED,SAAgB,aAAa,CAAC,KAAa;IACzC,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;QACxB,OAAO,UAAU,CAAC;IACpB,CAAC;SAAM,IAAI,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;QACxC,OAAO,UAAU,CAAC;IACpB,CAAC;SAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE,CAAC;QACnD,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC7B,OAAO,SAAS,CAAC;QACnB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;SAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAChE,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAgB,WAAW,CAAC,GAAW;IACrC,OAAO,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC7C,CAAC;AAED,SAAgB,cAAc,CAAC,MAG9B;IACC,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC;IACrC,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED,SAAgB,WAAW,CAAC,GAAW;IACrC,IAAI,qBAAqB,CAAC,GAAG,EAAE,EAAE,CAAC;QAChC,OAAO,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC;IAClD,CAAC;SAAM,CAAC;QACN,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QACnC,OAAO,IAAI,gBAAQ,CAAC,EAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAC,CAAC,CAAC;IAC9C,CAAC;AACH,CAAC;AAED,SAAgB,WAAW;IACzB,MAAM,IAAI,GAAG,IAAA,iBAAU,EAAC,eAAe,CAAC,CAAC;IACzC,IAAI,qBAAqB,CAAC,GAAG,EAAE,EAAE,CAAC;QAChC,OAAO,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;IAC7D,CAAC;SAAM,CAAC;QACN,4CAA4C;QAC5C,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,GAAG,GAAG,mBAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;IACtC,CAAC;AACH,CAAC;AAED,SAAgB,gBAAgB,CAAC,SAAiB;IAChD,MAAM,IAAI,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IAC/C,IAAI,qBAAqB,CAAC,GAAG,EAAE,EAAE,CAAC;QAChC,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;SAAM,CAAC;QACN,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;AACH,CAAC;AAED,SAAgB,cAAc,CAAC,IAAY;IACzC,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC;AAED,SAAgB,iBAAiB,CAAC,UAAkB;IAClD,IAAI,qBAAqB,CAAC,GAAG,EAAE,EAAE,CAAC;QAChC,OAAO,mBAAmB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IACjD,CAAC;SAAM,CAAC;QACN,OAAO,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IACnD,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {hsl} from 'color-convert';\nimport {hash} from '../base/hash';\nimport {featureFlags} from '../core/feature_flags';\nimport {Color, HSLColor, HSLuvColor} from '../public/color';\nimport {ColorScheme} from '../public/color_scheme';\nimport {RandState, pseudoRand} from '../base/rand';\n\n// 128 would provide equal weighting between dark and light text.\n// However, we want to prefer light text for stylistic reasons.\n// A higher value means color must be brighter before switching to dark text.\nconst PERCEIVED_BRIGHTNESS_LIMIT = 180;\n\n// This file defines some opinionated colors and provides functions to access\n// random but predictable colors based on a seed, as well as standardized ways\n// to access colors for core objects such as slices and thread states.\n\n// We have, over the years, accumulated a number of different color palettes\n// which are used for different parts of the UI.\n// It would be nice to combine these into a single palette in the future, but\n// changing colors is difficult especially for slice colors, as folks get used\n// to certain slices being certain colors and are resistant to change.\n// However we do it, we should make it possible for folks to switch back the a\n// previous palette, or define their own.\n\nconst USE_CONSISTENT_COLORS = featureFlags.register({\n  id: 'useConsistentColors',\n  name: 'Use common color palette for timeline elements',\n  description: 'Use the same color palette for all timeline elements.',\n  defaultValue: false,\n});\n\nconst randColourState: RandState = {seed: 0};\n\nconst MD_PALETTE_RAW: Color[] = [\n  new HSLColor({h: 4, s: 90, l: 58}),\n  new HSLColor({h: 340, s: 82, l: 52}),\n  new HSLColor({h: 291, s: 64, l: 42}),\n  new HSLColor({h: 262, s: 52, l: 47}),\n  new HSLColor({h: 231, s: 48, l: 48}),\n  new HSLColor({h: 207, s: 90, l: 54}),\n  new HSLColor({h: 199, s: 98, l: 48}),\n  new HSLColor({h: 187, s: 100, l: 42}),\n  new HSLColor({h: 174, s: 100, l: 29}),\n  new HSLColor({h: 122, s: 39, l: 49}),\n  new HSLColor({h: 88, s: 50, l: 53}),\n  new HSLColor({h: 66, s: 70, l: 54}),\n  new HSLColor({h: 45, s: 100, l: 51}),\n  new HSLColor({h: 36, s: 100, l: 50}),\n  new HSLColor({h: 14, s: 100, l: 57}),\n  new HSLColor({h: 16, s: 25, l: 38}),\n  new HSLColor({h: 200, s: 18, l: 46}),\n  new HSLColor({h: 54, s: 100, l: 62}),\n];\n\nconst WHITE_COLOR = new HSLColor([0, 0, 100]);\nconst BLACK_COLOR = new HSLColor([0, 0, 0]);\nconst GRAY_COLOR = new HSLColor([0, 0, 90]);\n\nconst MD_PALETTE: ColorScheme[] = MD_PALETTE_RAW.map((color): ColorScheme => {\n  const base = color.lighten(10, 60).desaturate(20);\n  const variant = base.lighten(30, 80).desaturate(20);\n\n  return {\n    base,\n    variant,\n    disabled: GRAY_COLOR,\n    textBase: WHITE_COLOR, // White text suits MD colors quite well\n    textVariant: WHITE_COLOR,\n    textDisabled: WHITE_COLOR, // Low contrast is on purpose\n  };\n});\n\n// Create a color scheme based on a single color, which defines the variant\n// color as a slightly darker and more saturated version of the base color.\nexport function makeColorScheme(base: Color, variant?: Color): ColorScheme {\n  variant = variant ?? base.darken(15).saturate(15);\n\n  return {\n    base,\n    variant,\n    disabled: GRAY_COLOR,\n    textBase:\n      base.perceivedBrightness >= PERCEIVED_BRIGHTNESS_LIMIT\n        ? BLACK_COLOR\n        : WHITE_COLOR,\n    textVariant:\n      variant.perceivedBrightness >= PERCEIVED_BRIGHTNESS_LIMIT\n        ? BLACK_COLOR\n        : WHITE_COLOR,\n    textDisabled: WHITE_COLOR, // Low contrast is on purpose\n  };\n}\n\nconst GRAY = makeColorScheme(new HSLColor([0, 0, 62]));\nconst DESAT_RED = makeColorScheme(new HSLColor([3, 30, 49]));\nconst DARK_GREEN = makeColorScheme(new HSLColor([120, 44, 34]));\nconst LIME_GREEN = makeColorScheme(new HSLColor([75, 55, 47]));\nconst TRANSPARENT_WHITE = makeColorScheme(new HSLColor([0, 1, 97], 0.55));\nconst ORANGE = makeColorScheme(new HSLColor([36, 100, 50]));\nconst INDIGO = makeColorScheme(new HSLColor([231, 48, 48]));\n\n// A piece of wisdom from a long forgotten blog post: \"Don't make\n// colors you want to change something normal like grey.\"\nexport const UNEXPECTED_PINK = makeColorScheme(new HSLColor([330, 100, 70]));\n\n// Selects a predictable color scheme from a palette of material design colors,\n// based on a string seed.\nfunction materialColorScheme(seed: string): ColorScheme {\n  const colorIdx = hash(seed, MD_PALETTE.length);\n  return MD_PALETTE[colorIdx];\n}\n\nconst proceduralColorCache = new Map<string, ColorScheme>();\n\n// Procedurally generates a predictable color scheme based on a string seed.\nfunction proceduralColorScheme(seed: string): ColorScheme {\n  const colorScheme = proceduralColorCache.get(seed);\n  if (colorScheme) {\n    return colorScheme;\n  } else {\n    const hue = hash(seed, 360);\n    // Saturation 100 would give the most differentiation between colors, but\n    // it's garish.\n    const saturation = 80;\n\n    // Prefer using HSLuv, not the browser's built-in vanilla HSL handling. This\n    // is because this function chooses hue/lightness uniform at random, but HSL\n    // is not perceptually uniform.\n    // See https://www.boronine.com/2012/03/26/Color-Spaces-for-Human-Beings/.\n    const base = new HSLuvColor({\n      h: hue,\n      s: saturation,\n      l: hash(seed + 'x', 40) + 40,\n    });\n    const variant = new HSLuvColor({h: hue, s: saturation, l: 30});\n    const colorScheme = makeColorScheme(base, variant);\n\n    proceduralColorCache.set(seed, colorScheme);\n\n    return colorScheme;\n  }\n}\n\nexport function colorForState(state: string): ColorScheme {\n  if (state === 'Running') {\n    return DARK_GREEN;\n  } else if (state.startsWith('Runnable')) {\n    return LIME_GREEN;\n  } else if (state.includes('Uninterruptible Sleep')) {\n    if (state.includes('non-IO')) {\n      return DESAT_RED;\n    }\n    return ORANGE;\n  } else if (state.includes('Dead')) {\n    return GRAY;\n  } else if (state.includes('Sleeping') || state.includes('Idle')) {\n    return TRANSPARENT_WHITE;\n  }\n  return INDIGO;\n}\n\nexport function colorForTid(tid: number): ColorScheme {\n  return materialColorScheme(tid.toString());\n}\n\nexport function colorForThread(thread?: {\n  pid?: number;\n  tid: number;\n}): ColorScheme {\n  if (thread === undefined) {\n    return GRAY;\n  }\n  const tid = thread.pid ?? thread.tid;\n  return colorForTid(tid);\n}\n\nexport function colorForCpu(cpu: number): Color {\n  if (USE_CONSISTENT_COLORS.get()) {\n    return materialColorScheme(cpu.toString()).base;\n  } else {\n    const hue = (128 + 32 * cpu) % 256;\n    return new HSLColor({h: hue, s: 50, l: 50});\n  }\n}\n\nexport function randomColor(): string {\n  const rand = pseudoRand(randColourState);\n  if (USE_CONSISTENT_COLORS.get()) {\n    return materialColorScheme(rand.toString()).base.cssString;\n  } else {\n    // 40 different random hues 9 degrees apart.\n    const hue = Math.floor(rand * 40) * 9;\n    return '#' + hsl.hex([hue, 90, 30]);\n  }\n}\n\nexport function getColorForSlice(sliceName: string): ColorScheme {\n  const name = sliceName.replace(/( )?\\d+/g, '');\n  if (USE_CONSISTENT_COLORS.get()) {\n    return materialColorScheme(name);\n  } else {\n    return proceduralColorScheme(name);\n  }\n}\n\nexport function colorForFtrace(name: string): ColorScheme {\n  return materialColorScheme(name);\n}\n\nexport function getColorForSample(callsiteId: number): ColorScheme {\n  if (USE_CONSISTENT_COLORS.get()) {\n    return materialColorScheme(String(callsiteId));\n  } else {\n    return proceduralColorScheme(String(callsiteId));\n  }\n}\n"]}
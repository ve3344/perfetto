{"version":3,"file":"slice.js","sourceRoot":"","sources":["../../../../src/components/widgets/slice.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AA+CjC,4BAKC;;AAlDD,8DAAwB;AACxB,wDAAiE;AACjE,iDAA4C;AAC5C,8DAAgD;AAChD,8CAA0D;AAC1D,uFAGiD;AACjD,kDAA4C;AAY5C,MAAa,QAAQ;IACnB,IAAI,CAAC,KAA6B;QAChC,OAAO,IAAA,iBAAC,EACN,eAAM,EACN;YACE,IAAI,EAAE,sBAAK,CAAC,eAAe;YAC3B,OAAO,EAAE,GAAG,EAAE;gBACZ,qEAAqE;gBACrE,kBAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,cAAc,CAC9C,OAAO,EACP,KAAK,CAAC,KAAK,CAAC,EAAE,EACd;oBACE,2BAA2B,EACzB,KAAK,CAAC,KAAK,CAAC,2BAA2B;oBACzC,iBAAiB,EAAE,IAAI;iBACxB,CACF,CAAC;YACJ,CAAC;SACF,EACD,KAAK,CAAC,KAAK,CAAC,IAAI,CACjB,CAAC;IACJ,CAAC;CACF;AAtBD,4BAsBC;AAED,SAAgB,QAAQ,CAAC,KAAmB,EAAE,IAAa;IACzD,OAAO,IAAA,iBAAC,EAAC,QAAQ,EAAE;QACjB,EAAE,EAAE,KAAK,CAAC,EAAE;QACZ,IAAI,EAAE,IAAI,IAAI,KAAK,CAAC,IAAI;KACzB,CAAC,CAAC;AACL,CAAC;AAED,yCAAa,CAAC,OAAO,CAAC,GAAG,IAAA,kDAAsB,EAI7C,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE;IACnB,OAAO;QACL,EAAE;QACF,KAAK,EAAE,MAAM,IAAA,gBAAQ,EAAC,MAAM,EAAE,IAAA,yBAAY,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;KACxD,CAAC;AACJ,CAAC,EACD,CAAC,EAAC,EAAE,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,CAAC;IAChB,KAAK,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,EAAE;CACrE,CAAC,CACH,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {asSliceSqlId, SliceSqlId} from '../sql_utils/core_types';\nimport {Anchor} from '../../widgets/anchor';\nimport {Icons} from '../../base/semantic_icons';\nimport {getSlice, SliceDetails} from '../sql_utils/slice';\nimport {\n  createSqlIdRefRenderer,\n  sqlIdRegistry,\n} from './sql/details/sql_ref_renderer_registry';\nimport {AppImpl} from '../../core/app_impl';\n\ninterface SliceRefAttrs {\n  readonly id: SliceSqlId;\n  readonly name: string;\n\n  // Whether clicking on the reference should change the current tab\n  // to \"current selection\" tab in addition to updating the selection\n  // and changing the viewport. True by default.\n  readonly switchToCurrentSelectionTab?: boolean;\n}\n\nexport class SliceRef implements m.ClassComponent<SliceRefAttrs> {\n  view(vnode: m.Vnode<SliceRefAttrs>) {\n    return m(\n      Anchor,\n      {\n        icon: Icons.UpdateSelection,\n        onclick: () => {\n          // TODO(primiano): the Trace object should be properly injected here.\n          AppImpl.instance.trace?.selection.selectSqlEvent(\n            'slice',\n            vnode.attrs.id,\n            {\n              switchToCurrentSelectionTab:\n                vnode.attrs.switchToCurrentSelectionTab,\n              scrollToSelection: true,\n            },\n          );\n        },\n      },\n      vnode.attrs.name,\n    );\n  }\n}\n\nexport function sliceRef(slice: SliceDetails, name?: string): m.Child {\n  return m(SliceRef, {\n    id: slice.id,\n    name: name ?? slice.name,\n  });\n}\n\nsqlIdRegistry['slice'] = createSqlIdRefRenderer<{\n  slice: SliceDetails | undefined;\n  id: bigint;\n}>(\n  async (engine, id) => {\n    return {\n      id,\n      slice: await getSlice(engine, asSliceSqlId(Number(id))),\n    };\n  },\n  ({id, slice}) => ({\n    value: slice !== undefined ? sliceRef(slice) : `Unknown slice ${id}`,\n  }),\n);\n"]}
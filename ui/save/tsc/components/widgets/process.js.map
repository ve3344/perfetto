{"version":3,"file":"process.js","sourceRoot":"","sources":["../../../../src/components/widgets/process.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAuBjC,gEAsBC;AAED,kDA2BC;AAED,4CAQC;;AAlFD,8DAAwB;AACxB,oDAAqD;AACrD,8DAAgD;AAChD,4CAAwC;AACxC,oEAA6D;AAE7D,kDAI8B;AAC9B,iDAA4C;AAC5C,6CAAwD;AACxD,wEAAiE;AACjE,gGAG0D;AAC1D,wDAA+C;AAC/C,kDAA4C;AAE5C,SAAgB,0BAA0B,CACxC,IAAU,EACV,GAAY;IAEZ,OAAO,IAAA,iBAAC,EAAC,eAAQ,EAAE;QACjB,IAAI,EAAE,sBAAK,CAAC,YAAY;QACxB,KAAK,EAAE,sBAAsB;QAC7B,OAAO,EAAE,GAAG,EAAE;YACZ,yEAAyE;YACzE,qEAAqE;YACrE,MAAM,KAAK,GAAG,kBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;YACrC,IAAI,KAAK,KAAK,SAAS;gBAAE,OAAO;YAChC,IAAA,mCAAe,EACb,gBAAgB,EAChB,IAAI,uCAAiB,CAAC;gBACpB,KAAK;gBACL,IAAI;gBACJ,GAAG;aACJ,CAAC,CACH,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,mBAAmB,CAAC,IAInC;IACC,8EAA8E;IAC9E,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvB,OAAO;QACL,IAAA,cAAM,EAAC,IAAI,CAAC;YACV,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,sBAAK,CAAC,IAAI;gBAChB,KAAK,EAAE,mBAAmB;gBAC1B,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,2BAAe,EAAC,IAAI,CAAC;aACrC,CAAC;QACJ,IAAA,cAAM,EAAC,IAAI,CAAC,GAAG,CAAC;YACd,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,sBAAK,CAAC,IAAI;gBAChB,KAAK,EAAE,UAAU;gBACjB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,2BAAe,EAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;aAC9C,CAAC;QACJ,IAAA,iBAAC,EAAC,eAAQ,EAAE;YACV,IAAI,EAAE,sBAAK,CAAC,IAAI;YAChB,KAAK,EAAE,WAAW;YAClB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,2BAAe,EAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;SAC/C,CAAC;QACF,0BAA0B,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;KAChD,CAAC;AACJ,CAAC;AAED,SAAgB,gBAAgB,CAAC,IAAiB;IAChD,OAAO,IAAA,iBAAC,EACN,iBAAU,EACV;QACE,OAAO,EAAE,IAAA,iBAAC,EAAC,eAAM,EAAE,IAAA,wBAAc,EAAC,IAAI,CAAC,CAAC;KACzC,EACD,mBAAmB,CAAC,IAAI,CAAC,CAC1B,CAAC;AACJ,CAAC;AAED,yCAAa,CAAC,SAAS,CAAC,GAAG,IAAA,kDAAsB,EAC/C,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,IAAA,wBAAc,EAAC,MAAM,EAAE,IAAA,mBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,EACtE,CAAC,IAAiB,EAAE,EAAE,CAAC,CAAC;IACtB,KAAK,EAAE,gBAAgB,CAAC,IAAI,CAAC;CAC9B,CAAC,CACH,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {copyToClipboard} from '../../base/clipboard';\nimport {Icons} from '../../base/semantic_icons';\nimport {exists} from '../../base/utils';\nimport {addEphemeralTab} from '../details/add_ephemeral_tab';\nimport {Upid} from '../sql_utils/core_types';\nimport {\n  getProcessInfo,\n  getProcessName,\n  ProcessInfo,\n} from '../sql_utils/process';\nimport {Anchor} from '../../widgets/anchor';\nimport {MenuItem, PopupMenu2} from '../../widgets/menu';\nimport {ProcessDetailsTab} from '../details/process_details_tab';\nimport {\n  createSqlIdRefRenderer,\n  sqlIdRegistry,\n} from '../widgets/sql/details/sql_ref_renderer_registry';\nimport {asUpid} from '../sql_utils/core_types';\nimport {AppImpl} from '../../core/app_impl';\n\nexport function showProcessDetailsMenuItem(\n  upid: Upid,\n  pid?: number,\n): m.Children {\n  return m(MenuItem, {\n    icon: Icons.ExternalLink,\n    label: 'Show process details',\n    onclick: () => {\n      // TODO(primiano): `trace` should be injected, but doing so would require\n      // an invasive refactoring of most classes in frontend/widgets/sql/*.\n      const trace = AppImpl.instance.trace;\n      if (trace === undefined) return;\n      addEphemeralTab(\n        'processDetails',\n        new ProcessDetailsTab({\n          trace,\n          upid,\n          pid,\n        }),\n      );\n    },\n  });\n}\n\nexport function processRefMenuItems(info: {\n  upid: Upid;\n  name?: string;\n  pid?: number;\n}): m.Children {\n  // We capture a copy to be able to pass it across async boundary to `onclick`.\n  const name = info.name;\n  return [\n    exists(name) &&\n      m(MenuItem, {\n        icon: Icons.Copy,\n        label: 'Copy process name',\n        onclick: () => copyToClipboard(name),\n      }),\n    exists(info.pid) &&\n      m(MenuItem, {\n        icon: Icons.Copy,\n        label: 'Copy pid',\n        onclick: () => copyToClipboard(`${info.pid}`),\n      }),\n    m(MenuItem, {\n      icon: Icons.Copy,\n      label: 'Copy upid',\n      onclick: () => copyToClipboard(`${info.upid}`),\n    }),\n    showProcessDetailsMenuItem(info.upid, info.pid),\n  ];\n}\n\nexport function renderProcessRef(info: ProcessInfo): m.Children {\n  return m(\n    PopupMenu2,\n    {\n      trigger: m(Anchor, getProcessName(info)),\n    },\n    processRefMenuItems(info),\n  );\n}\n\nsqlIdRegistry['process'] = createSqlIdRefRenderer<ProcessInfo>(\n  async (engine, id) => await getProcessInfo(engine, asUpid(Number(id))),\n  (data: ProcessInfo) => ({\n    value: renderProcessRef(data),\n  }),\n);\n"]}
{"version":3,"file":"chart.js","sourceRoot":"","sources":["../../../../../src/components/widgets/charts/chart.ts"],"names":[],"mappings":";;;AAsFA,kCAQC;AAID,oDAOC;AAED,gFAgBC;;AA3HD,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;AACjC,8DAAwB;AAQxB,qDAAgD;AAEhD,qDAAsD;AA4BtD,0DAA0D;AAC1D,IAAY,WAEX;AAFD,WAAY,WAAW;IACrB,sCAAuB,CAAA;AACzB,CAAC,EAFW,WAAW,2BAAX,WAAW,QAEtB;AAgCD,SAAgB,WAAW,CAAC,CAAS;IACnC,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAE5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;QACtC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzB,CAAC;AAED,mEAAmE;AACnE,8CAA8C;AAC9C,SAAgB,oBAAoB,CAAC,KAAY;IAC/C,QAAQ,KAAK,CAAC,MAAM,EAAE,CAAC;QACrB,KAAK,WAAW,CAAC,SAAS;YACxB,OAAO,IAAA,iBAAC,EAAC,qBAAS,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACpC;YACE,OAAO;IACX,CAAC;AACH,CAAC;AAED,SAAgB,kCAAkC,CAChD,MAAyB,EACzB,WAAmB,EACnB,aAA4B;IAE5B,OAAO;QACL,MAAM,EAAE,aAAa,CAAC,KAAK,CAAC,MAAM;QAClC,WAAW,EAAE,IAAA,mBAAW,EAAC,MAAM,CAAC;QAChC,SAAS,EAAE,CAAC,WAAW,CAAC;QACxB,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE;QACpC,YAAY,EAAE,aAAa,CAAC,MAAM,CAAC,WAAW,IAAI,aAAa,CAAC,MAAM,CAAC,IAAI;QAC3E,KAAK,EAAE,aAAa,CAAC,WAAW,CAC9B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAC5D;QACD,eAAe,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,QAAQ;KACjD,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport m from 'mithril';\nimport {Row} from '../../../trace_processor/query_result';\nimport {Engine} from '../../../trace_processor/engine';\nimport {\n  Filter,\n  LegacyTableColumn,\n  LegacyTableColumnSet,\n} from '../sql/legacy_table/column';\nimport {Histogram} from './histogram/histogram';\nimport {SqlTableState} from '../sql/legacy_table/state';\nimport {columnTitle} from '../sql/legacy_table/table';\n\nexport interface VegaLiteChartSpec {\n  $schema: string;\n  width: string | number;\n  mark:\n    | 'area'\n    | 'bar'\n    | 'circle'\n    | 'line'\n    | 'point'\n    | 'rect'\n    | 'rule'\n    | 'square'\n    | 'text'\n    | 'tick'\n    | 'geoshape'\n    | 'boxplot'\n    | 'errorband'\n    | 'errorbar';\n  data: {values?: string | Row[]};\n\n  encoding: {\n    x: {[key: string]: unknown};\n    y: {[key: string]: unknown};\n  };\n}\n\n// Holds the various chart types and human readable string\nexport enum ChartOption {\n  HISTOGRAM = 'histogram',\n}\n\nexport interface ChartConfig {\n  readonly engine: Engine;\n  readonly columnTitle: string; // Human readable column name (ex: Duration)\n  readonly sqlColumn: string[]; // SQL column name (ex: dur)\n  readonly filters?: Filter[]; // Filters applied to SQL table\n  readonly tableDisplay?: string; // Human readable table name (ex: slices)\n  readonly query: string; // SQL query for the underlying data\n  readonly aggregationType?: 'nominal' | 'quantitative'; // Aggregation type.\n}\n\nexport interface Chart {\n  readonly option: ChartOption;\n  readonly config: ChartConfig;\n}\n\nexport interface ChartData {\n  readonly rows: Row[];\n  readonly error?: string;\n}\n\nexport interface ChartState {\n  readonly engine: Engine;\n  readonly query: string;\n  readonly columns: LegacyTableColumn[] | LegacyTableColumnSet[] | string[];\n  data?: ChartData;\n  spec?: VegaLiteChartSpec;\n  loadData(): Promise<void>;\n  isLoading(): boolean;\n}\n\nexport function toTitleCase(s: string): string {\n  const words = s.split(/\\s/);\n\n  for (let i = 0; i < words.length; ++i) {\n    words[i] = words[i][0].toUpperCase() + words[i].substring(1);\n  }\n\n  return words.join(' ');\n}\n\n// renderChartComponent will take a chart option and config and map\n// to the corresponding chart class component.\nexport function renderChartComponent(chart: Chart) {\n  switch (chart.option) {\n    case ChartOption.HISTOGRAM:\n      return m(Histogram, chart.config);\n    default:\n      return;\n  }\n}\n\nexport function createChartConfigFromSqlTableState(\n  column: LegacyTableColumn,\n  columnAlias: string,\n  sqlTableState: SqlTableState,\n) {\n  return {\n    engine: sqlTableState.trace.engine,\n    columnTitle: columnTitle(column),\n    sqlColumn: [columnAlias],\n    filters: sqlTableState?.getFilters(),\n    tableDisplay: sqlTableState.config.displayName ?? sqlTableState.config.name,\n    query: sqlTableState.getSqlQuery(\n      Object.fromEntries([[columnAlias, column.primaryColumn()]]),\n    ),\n    aggregationType: column.aggregation?.().dataType,\n  };\n}\n"]}
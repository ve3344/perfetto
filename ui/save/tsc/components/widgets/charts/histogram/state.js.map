{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../../../../src/components/widgets/charts/histogram/state.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// import {stringifyJsonWithBigints} from '../../../../base/json_utils';\nimport {raf} from '../../../../core/raf_scheduler';\nimport {Engine} from '../../../../trace_processor/engine';\nimport {Row} from '../../../../trace_processor/query_result';\nimport {ChartData, ChartState, VegaLiteChartSpec} from '../chart';\n\nexport interface HistogramChartConfig extends VegaLiteChartSpec {\n  binAxisType: 'nominal' | 'quantitative';\n  binAxis: 'x' | 'y';\n  countAxis: 'x' | 'y';\n  sort: string;\n  isBinned: boolean;\n  labelLimit?: number;\n}\n\nexport class HistogramState implements ChartState {\n  data?: ChartData;\n  spec?: VegaLiteChartSpec;\n\n  constructor(\n    readonly engine: Engine,\n    readonly query: string,\n    readonly columns: string[],\n    private aggregationType?: 'nominal' | 'quantitative',\n  ) {\n    this.loadData();\n  }\n\n  createHistogramVegaSpec(): VegaLiteChartSpec {\n    const binAxisEncoding = {\n      bin: this.aggregationType !== 'nominal',\n      field: this.columns[0],\n      type: this.aggregationType,\n      title: this.columns[0],\n      sort: this.aggregationType === 'nominal' && {\n        op: 'count',\n        order: 'descending',\n      },\n      axis: {\n        labelLimit: 500,\n      },\n    };\n\n    const countAxisEncoding = {\n      aggregate: 'count',\n      title: 'Count',\n    };\n\n    const spec: VegaLiteChartSpec = {\n      $schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n      width: 'container',\n      mark: 'bar',\n      data: {\n        values: this.data?.rows,\n      },\n      encoding: {\n        x:\n          this.aggregationType !== 'nominal'\n            ? binAxisEncoding\n            : countAxisEncoding,\n        y:\n          this.aggregationType !== 'nominal'\n            ? countAxisEncoding\n            : binAxisEncoding,\n      },\n    };\n\n    return spec;\n  }\n\n  async loadData() {\n    const res = await this.engine.query(`\n      SELECT ${this.columns[0]}\n      FROM (\n        ${this.query}\n      )\n    `);\n\n    const rows: Row[] = [];\n\n    let hasQuantitativeData = false;\n\n    for (const it = res.iter({}); it.valid(); it.next()) {\n      const rowVal = it.get(this.columns[0]);\n      if (typeof rowVal === 'bigint') {\n        hasQuantitativeData = true;\n      }\n\n      rows.push({\n        [this.columns[0]]: rowVal,\n      });\n    }\n\n    if (this.aggregationType === undefined) {\n      this.aggregationType = hasQuantitativeData ? 'quantitative' : 'nominal';\n    }\n\n    this.data = {\n      rows,\n    };\n\n    this.spec = this.createHistogramVegaSpec();\n    raf.scheduleFullRedraw();\n  }\n\n  isLoading(): boolean {\n    return this.data === undefined;\n  }\n}\n"]}
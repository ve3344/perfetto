{"version":3,"file":"thread.js","sourceRoot":"","sources":["../../../../src/components/widgets/thread.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAmBjC,8DAsBC;AAED,gDA2BC;AAED,0CAYC;;AAlFD,8DAAwB;AACxB,oDAAqD;AACrD,8DAAgD;AAChD,4CAAwC;AACxC,oEAA6D;AAC7D,gDAA6E;AAC7E,iDAA4C;AAC5C,6CAAwD;AACxD,sEAA+D;AAC/D,uFAGiD;AACjD,wDAA+C;AAE/C,kDAA4C;AAE5C,SAAgB,yBAAyB,CACvC,IAAU,EACV,GAAY;IAEZ,OAAO,IAAA,iBAAC,EAAC,eAAQ,EAAE;QACjB,IAAI,EAAE,sBAAK,CAAC,YAAY;QACxB,KAAK,EAAE,qBAAqB;QAC5B,OAAO,EAAE,GAAG,EAAE;YACZ,yEAAyE;YACzE,qEAAqE;YACrE,MAAM,KAAK,GAAG,kBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;YACrC,IAAI,KAAK,KAAK,SAAS;gBAAE,OAAO;YAChC,IAAA,mCAAe,EACb,eAAe,EACf,IAAI,qCAAgB,CAAC;gBACnB,KAAK;gBACL,IAAI;gBACJ,GAAG;aACJ,CAAC,CACH,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,kBAAkB,CAAC,IAIlC;IACC,8EAA8E;IAC9E,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvB,OAAO;QACL,IAAA,cAAM,EAAC,IAAI,CAAC;YACV,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,sBAAK,CAAC,IAAI;gBAChB,KAAK,EAAE,kBAAkB;gBACzB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,2BAAe,EAAC,IAAI,CAAC;aACrC,CAAC;QACJ,IAAA,cAAM,EAAC,IAAI,CAAC,GAAG,CAAC;YACd,IAAA,iBAAC,EAAC,eAAQ,EAAE;gBACV,IAAI,EAAE,sBAAK,CAAC,IAAI;gBAChB,KAAK,EAAE,UAAU;gBACjB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,2BAAe,EAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;aAC9C,CAAC;QACJ,IAAA,iBAAC,EAAC,eAAQ,EAAE;YACV,IAAI,EAAE,sBAAK,CAAC,IAAI;YAChB,KAAK,EAAE,WAAW;YAClB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,2BAAe,EAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;SAC/C,CAAC;QACF,yBAAyB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;KAC/C,CAAC;AACJ,CAAC;AAED,SAAgB,eAAe,CAAC,IAI/B;IACC,OAAO,IAAA,iBAAC,EACN,iBAAU,EACV;QACE,OAAO,EAAE,IAAA,iBAAC,EAAC,eAAM,EAAE,IAAA,sBAAa,EAAC,IAAI,CAAC,CAAC;KACxC,EACD,kBAAkB,CAAC,IAAI,CAAC,CACzB,CAAC;AACJ,CAAC;AAED,yCAAa,CAAC,QAAQ,CAAC,GAAG,IAAA,kDAAsB,EAC9C,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,MAAM,IAAA,sBAAa,EAAC,MAAM,EAAE,IAAA,mBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,EACrE,CAAC,IAAgB,EAAE,EAAE,CAAC,CAAC;IACrB,KAAK,EAAE,eAAe,CAAC,IAAI,CAAC;CAC7B,CAAC,CACH,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {copyToClipboard} from '../../base/clipboard';\nimport {Icons} from '../../base/semantic_icons';\nimport {exists} from '../../base/utils';\nimport {addEphemeralTab} from '../details/add_ephemeral_tab';\nimport {getThreadInfo, getThreadName, ThreadInfo} from '../sql_utils/thread';\nimport {Anchor} from '../../widgets/anchor';\nimport {MenuItem, PopupMenu2} from '../../widgets/menu';\nimport {ThreadDetailsTab} from '../details/thread_details_tab';\nimport {\n  createSqlIdRefRenderer,\n  sqlIdRegistry,\n} from './sql/details/sql_ref_renderer_registry';\nimport {asUtid} from '../sql_utils/core_types';\nimport {Utid} from '../sql_utils/core_types';\nimport {AppImpl} from '../../core/app_impl';\n\nexport function showThreadDetailsMenuItem(\n  utid: Utid,\n  tid?: number,\n): m.Children {\n  return m(MenuItem, {\n    icon: Icons.ExternalLink,\n    label: 'Show thread details',\n    onclick: () => {\n      // TODO(primiano): `trace` should be injected, but doing so would require\n      // an invasive refactoring of most classes in frontend/widgets/sql/*.\n      const trace = AppImpl.instance.trace;\n      if (trace === undefined) return;\n      addEphemeralTab(\n        'threadDetails',\n        new ThreadDetailsTab({\n          trace,\n          utid,\n          tid,\n        }),\n      );\n    },\n  });\n}\n\nexport function threadRefMenuItems(info: {\n  utid: Utid;\n  name?: string;\n  tid?: number;\n}): m.Children {\n  // We capture a copy to be able to pass it across async boundary to `onclick`.\n  const name = info.name;\n  return [\n    exists(name) &&\n      m(MenuItem, {\n        icon: Icons.Copy,\n        label: 'Copy thread name',\n        onclick: () => copyToClipboard(name),\n      }),\n    exists(info.tid) &&\n      m(MenuItem, {\n        icon: Icons.Copy,\n        label: 'Copy tid',\n        onclick: () => copyToClipboard(`${info.tid}`),\n      }),\n    m(MenuItem, {\n      icon: Icons.Copy,\n      label: 'Copy utid',\n      onclick: () => copyToClipboard(`${info.utid}`),\n    }),\n    showThreadDetailsMenuItem(info.utid, info.tid),\n  ];\n}\n\nexport function renderThreadRef(info: {\n  utid: Utid;\n  name?: string;\n  tid?: number;\n}): m.Children {\n  return m(\n    PopupMenu2,\n    {\n      trigger: m(Anchor, getThreadName(info)),\n    },\n    threadRefMenuItems(info),\n  );\n}\n\nsqlIdRegistry['thread'] = createSqlIdRefRenderer<ThreadInfo>(\n  async (engine, id) => await getThreadInfo(engine, asUtid(Number(id))),\n  (data: ThreadInfo) => ({\n    value: renderThreadRef(data),\n  }),\n);\n"]}
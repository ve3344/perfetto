{"version":3,"file":"treetable.js","sourceRoot":"","sources":["../../../../src/components/widgets/treetable.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {classNames} from '../../base/classnames';\nimport {raf} from '../../core/raf_scheduler';\n\ninterface ColumnDescriptor<T> {\n  name: string;\n  getData: (row: T) => string;\n}\n\nexport interface TreeTableAttrs<T> {\n  columns: ColumnDescriptor<T>[];\n  getChildren: (row: T) => T[] | undefined;\n  rows: T[];\n}\n\nexport class TreeTable<T> implements m.ClassComponent<TreeTableAttrs<T>> {\n  private collapsedPaths = new Set<string>();\n\n  view({attrs}: m.Vnode<TreeTableAttrs<T>, this>): void | m.Children {\n    const {columns, rows} = attrs;\n    const headers = columns.map(({name}) => m('th', name));\n    const renderedRows = this.renderRows(rows, 0, attrs, []);\n    return m(\n      'table.pf-treetable',\n      m('thead', m('tr', headers)),\n      m('tbody', renderedRows),\n    );\n  }\n\n  private renderRows(\n    rows: T[],\n    indentLevel: number,\n    attrs: TreeTableAttrs<T>,\n    path: string[],\n  ): m.Children {\n    const {columns, getChildren} = attrs;\n    const renderedRows: m.Children = [];\n    for (const row of rows) {\n      const childRows = getChildren(row);\n      const key = this.keyForRow(row, attrs);\n      const thisPath = path.concat([key]);\n      const hasChildren = childRows && childRows.length > 0;\n      const cols = columns.map(({getData}, index) => {\n        const classes = classNames(\n          hasChildren && 'pf-treetable-node',\n          this.isCollapsed(thisPath) && 'pf-collapsed',\n        );\n        if (index === 0) {\n          const style = {\n            '--indentation-level': indentLevel,\n          };\n          return m(\n            'td',\n            {style, class: classNames(classes, 'pf-treetable-maincol')},\n            m('.pf-treetable-gutter', {\n              onclick: () => {\n                if (this.isCollapsed(thisPath)) {\n                  this.expandPath(thisPath);\n                } else {\n                  this.collapsePath(thisPath);\n                }\n                raf.scheduleFullRedraw();\n              },\n            }),\n            getData(row),\n          );\n        } else {\n          const style = {\n            '--indentation-level': 0,\n          };\n          return m('td', {style}, getData(row));\n        }\n      });\n      renderedRows.push(m('tr', cols));\n      if (childRows && !this.isCollapsed(thisPath)) {\n        renderedRows.push(\n          this.renderRows(childRows, indentLevel + 1, attrs, thisPath),\n        );\n      }\n    }\n    return renderedRows;\n  }\n\n  collapsePath(path: string[]) {\n    const pathStr = path.join('/');\n    this.collapsedPaths.add(pathStr);\n  }\n\n  expandPath(path: string[]) {\n    const pathStr = path.join('/');\n    this.collapsedPaths.delete(pathStr);\n  }\n\n  isCollapsed(path: string[]) {\n    const pathStr = path.join('/');\n    return this.collapsedPaths.has(pathStr);\n  }\n\n  keyForRow(row: T, attrs: TreeTableAttrs<T>): string {\n    const {columns} = attrs;\n    return columns[0].getData(row);\n  }\n}\n"]}
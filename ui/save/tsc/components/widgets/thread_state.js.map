{"version":3,"file":"thread_state.js","sourceRoot":"","sources":["../../../../src/components/widgets/thread_state.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AA4CjC,wCAMC;;AAhDD,8DAAwB;AAExB,iDAA4C;AAC5C,8DAAgD;AAEhD,kDAA4C;AAa5C,MAAa,cAAc;IACzB,IAAI,CAAC,KAAmC;QACtC,OAAO,IAAA,iBAAC,EACN,eAAM,EACN;YACE,IAAI,EAAE,sBAAK,CAAC,eAAe;YAC3B,OAAO,EAAE,GAAG,EAAE;gBACZ,qEAAqE;gBACrE,kBAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,cAAc,CAC9C,cAAc,EACd,KAAK,CAAC,KAAK,CAAC,EAAE,EACd;oBACE,2BAA2B,EACzB,KAAK,CAAC,KAAK,CAAC,2BAA2B;oBACzC,iBAAiB,EAAE,IAAI;iBACxB,CACF,CAAC;YACJ,CAAC;SACF,EACD,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,gBAAgB,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,CACrD,CAAC;IACJ,CAAC;CACF;AAtBD,wCAsBC;AAED,SAAgB,cAAc,CAAC,KAAkB;IAC/C,IAAI,KAAK,CAAC,MAAM,KAAK,SAAS;QAAE,OAAO,IAAI,CAAC;IAE5C,OAAO,IAAA,iBAAC,EAAC,cAAc,EAAE;QACvB,EAAE,EAAE,KAAK,CAAC,EAAE;KACb,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {ThreadStateSqlId} from '../sql_utils/core_types';\nimport {Anchor} from '../../widgets/anchor';\nimport {Icons} from '../../base/semantic_icons';\nimport {ThreadState} from '../sql_utils/thread_state';\nimport {AppImpl} from '../../core/app_impl';\n\ninterface ThreadStateRefAttrs {\n  id: ThreadStateSqlId;\n  // If not present, a placeholder name will be used.\n  name?: string;\n\n  // Whether clicking on the reference should change the current tab\n  // to \"current selection\" tab in addition to updating the selection\n  // and changing the viewport. True by default.\n  readonly switchToCurrentSelectionTab?: boolean;\n}\n\nexport class ThreadStateRef implements m.ClassComponent<ThreadStateRefAttrs> {\n  view(vnode: m.Vnode<ThreadStateRefAttrs>) {\n    return m(\n      Anchor,\n      {\n        icon: Icons.UpdateSelection,\n        onclick: () => {\n          // TODO(primiano): the Trace object should be properly injected here.\n          AppImpl.instance.trace?.selection.selectSqlEvent(\n            'thread_state',\n            vnode.attrs.id,\n            {\n              switchToCurrentSelectionTab:\n                vnode.attrs.switchToCurrentSelectionTab,\n              scrollToSelection: true,\n            },\n          );\n        },\n      },\n      vnode.attrs.name ?? `Thread State ${vnode.attrs.id}`,\n    );\n  }\n}\n\nexport function threadStateRef(state: ThreadState): m.Child {\n  if (state.thread === undefined) return null;\n\n  return m(ThreadStateRef, {\n    id: state.id,\n  });\n}\n"]}
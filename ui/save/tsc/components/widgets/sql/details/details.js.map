{"version":3,"file":"details.js","sourceRoot":"","sources":["../../../../../../src/components/widgets/sql/details/details.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Brand} from '../../../../base/brand';\nimport {Time} from '../../../../base/time';\nimport {exists} from '../../../../base/utils';\nimport {raf} from '../../../../core/raf_scheduler';\nimport {Engine} from '../../../../trace_processor/engine';\nimport {Row} from '../../../../trace_processor/query_result';\nimport {\n  SqlValue,\n  sqlValueToReadableString,\n} from '../../../../trace_processor/sql_utils';\nimport {Arg, getArgs} from '../../../sql_utils/args';\nimport {asArgSetId} from '../../../sql_utils/core_types';\nimport {Anchor} from '../../../../widgets/anchor';\nimport {renderError} from '../../../../widgets/error';\nimport {SqlRef} from '../../../../widgets/sql_ref';\nimport {Tree, TreeNode} from '../../../../widgets/tree';\nimport {hasArgs, renderArguments} from '../../../details/slice_args';\nimport {DurationWidget} from '../../../widgets/duration';\nimport {Timestamp as TimestampWidget} from '../../../widgets/timestamp';\nimport {sqlIdRegistry} from './sql_ref_renderer_registry';\nimport {Trace} from '../../../../public/trace';\n\n// This file contains the helper to render the details tree (based on Tree\n// widget) for an object represented by a SQL row in some table. The user passes\n// a typed schema of the tree and this impl handles fetching and rendering.\n//\n// The following types are supported:\n// Containers:\n//  - dictionary (keys should be strings)\n//  - array\n// Primitive values:\n//  - number, string, timestamp, duration, interval and thread interval.\n//  - id into another sql table.\n//  - arg set id.\n//\n// For each primitive value, the user should specify a SQL expression (usually\n// just the column name). Each primitive value can be auto-skipped if the\n// underlying SQL value is null (skipIfNull). Each container can be auto-skipped\n// if empty (skipIfEmpty).\n//\n// Example of a schema:\n// {\n//  'Navigation ID': 'navigation_id',\n//  'beforeunload': SqlIdRef({\n//    source: 'beforeunload_slice_id',\n//    table: 'chrome_frame_tree_nodes.id',\n//   }),\n//   'initiator_origin': String({\n//      source: 'initiator_origin',\n//      skipIfNull: true,\n//   }),\n//   'committed_render_frame_host': {\n//     'Process ID' : 'committed_render_frame_host_process_id',\n//     'RFH ID': 'committed_render_frame_host_rfh_id',\n//   },\n//   'initial_render_frame_host': Dict({\n//     data: {\n//       'Process ID': 'committed_render_frame_host_process_id',\n//       'RFH ID': 'committed_render_frame_host_rfh_id',\n//     },\n//     preview: 'printf(\"id=%d:%d\")', committed_render_frame_host_process_id,\n//     committed_render_frame_host_rfh_id)', skipIfEmpty: true,\n//   })\n// }\n\n// === Public API surface ===\n\nexport namespace DetailsSchema {\n  // Create a dictionary object for the schema.\n  export function Dict(\n    args: {data: {[key: string]: ValueDesc}} & ContainerParams,\n  ): DictSchema {\n    return new DictSchema(args.data, {\n      skipIfEmpty: args.skipIfEmpty,\n    });\n  }\n\n  // Create an array object for the schema.\n  export function Arr(\n    args: {data: ValueDesc[]} & ContainerParams,\n  ): ArraySchema {\n    return new ArraySchema(args.data, {\n      skipIfEmpty: args.skipIfEmpty,\n    });\n  }\n\n  // Create an object representing a timestamp for the schema.\n  // |ts| — SQL expression (e.g. column name) for the timestamp.\n  export function Timestamp(\n    ts: string,\n    args?: ScalarValueParams,\n  ): ScalarValueSchema {\n    return new ScalarValueSchema('timestamp', ts, args);\n  }\n\n  // Create an object representing a duration for the schema.\n  // |dur| — SQL expression (e.g. column name) for the duration.\n  export function Duration(\n    dur: string,\n    args?: ScalarValueParams,\n  ): ScalarValueSchema {\n    return new ScalarValueSchema('duration', dur, args);\n  }\n\n  // Create an object representing a time interval (timestamp + duration)\n  // for the schema.\n  // |ts|, |dur| - SQL expressions (e.g. column names) for the timestamp\n  // and duration.\n  export function Interval(\n    ts: string,\n    dur: string,\n    args?: ScalarValueParams,\n  ): IntervalSchema {\n    return new IntervalSchema(ts, dur, args);\n  }\n\n  // Create an object representing a combination of time interval and thread for\n  // the schema.\n  // |ts|, |dur|, |utid| - SQL expressions (e.g. column names) for the\n  // timestamp, duration and unique thread id.\n  export function ThreadInterval(\n    ts: string,\n    dur: string,\n    utid: string,\n    args?: ScalarValueParams,\n  ): ThreadIntervalSchema {\n    return new ThreadIntervalSchema(ts, dur, utid, args);\n  }\n\n  // Create an object representing a reference to an arg set for the schema.\n  // |argSetId| - SQL expression (e.g. column name) for the arg set id.\n  export function ArgSetId(\n    argSetId: string,\n    args?: ScalarValueParams,\n  ): ScalarValueSchema {\n    return new ScalarValueSchema('arg_set_id', argSetId, args);\n  }\n\n  // Create an object representing a SQL value for the schema.\n  // |value| - SQL expression (e.g. column name) for the value.\n  export function Value(\n    value: string,\n    args?: ScalarValueParams,\n  ): ScalarValueSchema {\n    return new ScalarValueSchema('value', value, args);\n  }\n\n  // Create an object representing string-rendered-as-url for the schema.\n  // |value| - SQL expression (e.g. column name) for the value.\n  export function URLValue(\n    value: string,\n    args?: ScalarValueParams,\n  ): ScalarValueSchema {\n    return new ScalarValueSchema('url', value, args);\n  }\n\n  export function Boolean(\n    value: string,\n    args?: ScalarValueParams,\n  ): ScalarValueSchema {\n    return new ScalarValueSchema('boolean', value, args);\n  }\n\n  // Create an object representing a reference to a SQL table row in the schema.\n  // |table| - name of the table.\n  // |id| - SQL expression (e.g. column name) for the id.\n  export function SqlIdRef(\n    table: string,\n    id: string,\n    args?: ScalarValueParams,\n  ): SqlIdRefSchema {\n    return new SqlIdRefSchema(table, id, args);\n  }\n} // namespace DetailsSchema\n\n// Params which apply to scalar values (i.e. all non-dicts and non-arrays).\ntype ScalarValueParams = {\n  skipIfNull?: boolean;\n};\n\n// Params which apply to containers (dicts and arrays).\ntype ContainerParams = {\n  skipIfEmpty?: boolean;\n};\n\n// Definition of a node in the schema.\nexport type ValueDesc =\n  | DictSchema\n  | ArraySchema\n  | ScalarValueSchema\n  | IntervalSchema\n  | ThreadIntervalSchema\n  | SqlIdRefSchema\n  | string\n  | ValueDesc[]\n  | {[key: string]: ValueDesc};\n\n// Class responsible for fetching the data and rendering the data.\nexport class Details {\n  constructor(\n    private trace: Trace,\n    private sqlTable: string,\n    private id: number,\n    schema: {[key: string]: ValueDesc},\n  ) {\n    this.dataController = new DataController(\n      trace,\n      sqlTable,\n      id,\n      sqlIdRegistry,\n    );\n\n    this.resolvedSchema = {\n      kind: 'dict',\n      data: Object.fromEntries(\n        Object.entries(schema).map(([key, value]) => [\n          key,\n          resolve(value, this.dataController),\n        ]),\n      ),\n    };\n    this.dataController.fetch();\n  }\n\n  isLoading() {\n    return this.dataController.data === undefined;\n  }\n\n  render(): m.Children {\n    if (this.dataController.data === undefined) {\n      return m('h2', 'Loading');\n    }\n    const nodes = [];\n    for (const [key, value] of Object.entries(this.resolvedSchema.data)) {\n      nodes.push(\n        renderValue(\n          this.trace,\n          key,\n          value,\n          this.dataController.data,\n          this.dataController.sqlIdRefRenderers,\n        ),\n      );\n    }\n    nodes.push(\n      m(TreeNode, {\n        left: 'SQL ID',\n        right: m(SqlRef, {\n          table: this.sqlTable,\n          id: this.id,\n        }),\n      }),\n    );\n    return m(Tree, nodes);\n  }\n\n  private dataController: DataController;\n  private resolvedSchema: ResolvedDict;\n}\n\n// Type corresponding to a value which can be rendered as a part of the tree:\n// basically, it's TreeNode component without its left part.\nexport type RenderedValue = {\n  // The value that should be rendered as the right part of the corresponding\n  // TreeNode.\n  value: m.Children;\n  // Values that should be rendered as the children of the corresponding\n  // TreeNode.\n  children?: m.Children;\n};\n\n// Type describing how render an id into a given table, split into\n// async `fetch` step for fetching data and sync `render` step for generating\n// the vdom.\nexport type SqlIdRefRenderer = {\n  fetch: (engine: Engine, id: bigint) => Promise<{} | undefined>;\n  render: (data: {}) => RenderedValue;\n};\n\n// === Impl details ===\n\n// Resolved index into the list of columns / expression to fetch.\ntype ExpressionIndex = Brand<number, 'expression_index'>;\n// Arg sets and SQL references require a separate query to fetch the data and\n// therefore are tracked separately.\ntype ArgSetIndex = Brand<number, 'arg_set_id_index'>;\ntype SqlIdRefIndex = Brand<number, 'sql_id_ref'>;\n\n// Description is passed by the user and then the data is resolved into\n// \"resolved\" versions of the types. Description focuses on the end-user\n// ergonomics, while \"Resolved\" optimises for internal processing.\n\n// Description of a dict in the schema.\nclass DictSchema {\n  constructor(\n    public data: {[key: string]: ValueDesc},\n    public params?: ContainerParams,\n  ) {}\n}\n\n// Resolved version of a dict.\ntype ResolvedDict = {\n  kind: 'dict';\n  data: {[key: string]: ResolvedValue};\n} & ContainerParams;\n\n// Description of an array in the schema.\nclass ArraySchema {\n  constructor(\n    public data: ValueDesc[],\n    public params?: ContainerParams,\n  ) {}\n}\n\n// Resolved version of an array.\ntype ResolvedArray = {\n  kind: 'array';\n  data: ResolvedValue[];\n} & ContainerParams;\n\n// Schema for all simple scalar values (ones that need to fetch only one value\n// from SQL).\nclass ScalarValueSchema {\n  constructor(\n    public kind:\n      | 'timestamp'\n      | 'duration'\n      | 'arg_set_id'\n      | 'value'\n      | 'url'\n      | 'boolean',\n    public sourceExpression: string,\n    public params?: ScalarValueParams,\n  ) {}\n}\n\n// Resolved version of simple scalar values.\ntype ResolvedScalarValue = {\n  kind: 'timestamp' | 'duration' | 'value' | 'url' | 'boolean';\n  source: ExpressionIndex;\n} & ScalarValueParams;\n\n// Resolved version of arg set.\ntype ResolvedArgSet = {\n  kind: 'arg_set_id';\n  source: ArgSetIndex;\n} & ScalarValueParams;\n\n// Schema for a time interval (ts, dur pair).\nclass IntervalSchema {\n  constructor(\n    public ts: string,\n    public dur: string,\n    public params?: ScalarValueParams,\n  ) {}\n}\n\n// Resolved version of a time interval.\ntype ResolvedInterval = {\n  kind: 'interval';\n  ts: ExpressionIndex;\n  dur: ExpressionIndex;\n} & ScalarValueParams;\n\n// Schema for a time interval for a given thread (ts, dur, utid triple).\nclass ThreadIntervalSchema {\n  constructor(\n    public ts: string,\n    public dur: string,\n    public utid: string,\n    public params?: ScalarValueParams,\n  ) {}\n}\n\n// Resolved version of a time interval for a given thread.\ntype ResolvedThreadInterval = {\n  kind: 'thread_interval';\n  ts: ExpressionIndex;\n  dur: ExpressionIndex;\n  utid: ExpressionIndex;\n} & ScalarValueParams;\n\n// Schema for a reference to a SQL table row.\nclass SqlIdRefSchema {\n  constructor(\n    public table: string,\n    public id: string,\n    public params?: ScalarValueParams,\n  ) {}\n}\n\ntype ResolvedSqlIdRef = {\n  kind: 'sql_id_ref';\n  ref: SqlIdRefIndex;\n} & ScalarValueParams;\n\ntype ResolvedValue =\n  | ResolvedDict\n  | ResolvedArray\n  | ResolvedScalarValue\n  | ResolvedArgSet\n  | ResolvedInterval\n  | ResolvedThreadInterval\n  | ResolvedSqlIdRef;\n\n// Helper class to store the error messages while fetching the data.\nclass Err {\n  constructor(public message: string) {}\n}\n\n// Fetched data from SQL which is needed to render object according to the given\n// schema.\ninterface Data {\n  // Source of the expressions that were fetched.\n  valueExpressions: string[];\n  // Fetched values.\n  values: SqlValue[];\n\n  // Source statements for the arg sets.\n  argSetExpressions: string[];\n  // Fetched arg sets.\n  argSets: (Arg[] | Err)[];\n\n  // Source statements for the SQL references.\n  sqlIdRefs: {tableName: string; idExpression: string}[];\n  // Fetched data for the SQL references.\n  sqlIdRefData: (\n    | {\n        data: {};\n        id: bigint | null;\n      }\n    | Err\n  )[];\n}\n\n// Class responsible for collecting the description of the data to fetch and\n// fetching it.\nclass DataController {\n  // List of expressions to fetch. Resolved values will have indexes into this\n  // list.\n  expressions: string[] = [];\n  // List of arg sets to fetch. Arg set ids are fetched first (together with\n  // other scalar values as a part of the `expressions` list) and then the arg\n  // sets themselves are fetched.\n  argSets: ExpressionIndex[] = [];\n  // List of SQL references to fetch. SQL reference ids are fetched first\n  // (together with other scalar values as a part of the `expressions` list) and\n  // then the SQL references themselves are fetched.\n  sqlIdRefs: {id: ExpressionIndex; tableName: string}[] = [];\n\n  // Fetched data.\n  data?: Data;\n\n  constructor(\n    private trace: Trace,\n    private sqlTable: string,\n    private id: number,\n    public sqlIdRefRenderers: {[table: string]: SqlIdRefRenderer},\n  ) {}\n\n  // Fetch the data. `expressions` and other lists must be populated first by\n  // resolving the schema.\n  async fetch() {\n    const data: Data = {\n      valueExpressions: this.expressions,\n      values: [],\n      argSetExpressions: this.argSets.map((index) => this.expressions[index]),\n      argSets: [],\n      sqlIdRefs: this.sqlIdRefs.map((ref) => ({\n        tableName: ref.tableName,\n        idExpression: this.expressions[ref.id],\n      })),\n      sqlIdRefData: [],\n    };\n\n    // Helper to generate the labels for the expressions.\n    const label = (index: number) => `col_${index}`;\n\n    // Fetch the scalar values for the basic expressions.\n    const row: Row = (\n      await this.trace.engine.query(`\n      SELECT\n        ${this.expressions\n          .map((value, index) => `${value} as ${label(index)}`)\n          .join(',\\n')}\n      FROM ${this.sqlTable}\n      WHERE id = ${this.id}\n    `)\n    ).firstRow({});\n    for (let i = 0; i < this.expressions.length; ++i) {\n      data.values.push(row[label(i)]);\n    }\n\n    // Fetch the arg sets based on the fetched arg set ids.\n    for (const argSetIndex of this.argSets) {\n      const argSetId = data.values[argSetIndex];\n      if (argSetId === null) {\n        data.argSets.push([]);\n      } else if (typeof argSetId !== 'number' && typeof argSetId !== 'bigint') {\n        data.argSets.push(\n          new Err(\n            `Incorrect type for arg set ${\n              data.argSetExpressions[argSetIndex]\n            }: expected a number, got ${typeof argSetId} instead}`,\n          ),\n        );\n      } else {\n        data.argSets.push(\n          await getArgs(this.trace.engine, asArgSetId(Number(argSetId))),\n        );\n      }\n    }\n\n    // Fetch the data for SQL references based on fetched ids.\n    for (const ref of this.sqlIdRefs) {\n      const renderer = this.sqlIdRefRenderers[ref.tableName];\n      if (renderer === undefined) {\n        data.sqlIdRefData.push(new Err(`Unknown table ${ref.tableName}`));\n        continue;\n      }\n      const id = data.values[ref.id];\n      if (id === null) {\n        data.sqlIdRefData.push({data: {}, id});\n        continue;\n      } else if (typeof id !== 'bigint') {\n        data.sqlIdRefData.push(\n          new Err(\n            `Incorrect type for SQL reference ${\n              data.valueExpressions[ref.id]\n            }: expected a bigint, got ${typeof id} instead}`,\n          ),\n        );\n        continue;\n      }\n      const refData = await renderer.fetch(this.trace.engine, id);\n      if (refData === undefined) {\n        data.sqlIdRefData.push(\n          new Err(\n            `Failed to fetch the data with id ${id} for table ${ref.tableName}`,\n          ),\n        );\n        continue;\n      }\n      data.sqlIdRefData.push({data: refData, id});\n    }\n\n    this.data = data;\n    raf.scheduleFullRedraw();\n  }\n\n  // Add a given expression to the list of expressions to fetch and return its\n  // index.\n  addExpression(expr: string): ExpressionIndex {\n    const result = this.expressions.length;\n    this.expressions.push(expr);\n    return result as ExpressionIndex;\n  }\n\n  // Add a given arg set to the list of arg sets to fetch and return its index.\n  addArgSet(expr: string): ArgSetIndex {\n    const result = this.argSets.length;\n    this.argSets.push(this.addExpression(expr));\n    return result as ArgSetIndex;\n  }\n\n  // Add a given SQL reference to the list of SQL references to fetch and return\n  // its index.\n  addSqlIdRef(tableName: string, idExpr: string): SqlIdRefIndex {\n    const result = this.sqlIdRefs.length;\n    this.sqlIdRefs.push({\n      tableName,\n      id: this.addExpression(idExpr),\n    });\n    return result as SqlIdRefIndex;\n  }\n}\n\n// Resolve a given schema into a resolved version, normalising the schema and\n// computing the list of data to fetch.\nfunction resolve(schema: ValueDesc, data: DataController): ResolvedValue {\n  if (typeof schema === 'string') {\n    return {\n      kind: 'value',\n      source: data.addExpression(schema),\n    };\n  }\n  if (Array.isArray(schema)) {\n    return {\n      kind: 'array',\n      data: schema.map((x) => resolve(x, data)),\n    };\n  }\n  if (schema instanceof ArraySchema) {\n    return {\n      kind: 'array',\n      data: schema.data.map((x) => resolve(x, data)),\n      ...schema.params,\n    };\n  }\n  if (schema instanceof ScalarValueSchema) {\n    if (schema.kind === 'arg_set_id') {\n      return {\n        kind: schema.kind,\n        source: data.addArgSet(schema.sourceExpression),\n        ...schema.params,\n      };\n    } else {\n      return {\n        kind: schema.kind,\n        source: data.addExpression(schema.sourceExpression),\n        ...schema.params,\n      };\n    }\n  }\n  if (schema instanceof IntervalSchema) {\n    return {\n      kind: 'interval',\n      ts: data.addExpression(schema.ts),\n      dur: data.addExpression(schema.dur),\n      ...schema.params,\n    };\n  }\n  if (schema instanceof ThreadIntervalSchema) {\n    return {\n      kind: 'thread_interval',\n      ts: data.addExpression(schema.ts),\n      dur: data.addExpression(schema.dur),\n      utid: data.addExpression(schema.utid),\n      ...schema.params,\n    };\n  }\n  if (schema instanceof SqlIdRefSchema) {\n    return {\n      kind: 'sql_id_ref',\n      ref: data.addSqlIdRef(schema.table, schema.id),\n      ...schema.params,\n    };\n  }\n  if (schema instanceof DictSchema) {\n    return {\n      kind: 'dict',\n      data: Object.fromEntries(\n        Object.entries(schema.data).map(([key, value]) => [\n          key,\n          resolve(value, data),\n        ]),\n      ),\n      ...schema.params,\n    };\n  }\n  return {\n    kind: 'dict',\n    data: Object.fromEntries(\n      Object.entries(schema).map(([key, value]) => [key, resolve(value, data)]),\n    ),\n  };\n}\n\n// Generate the vdom for a given value using the fetched `data`.\nfunction renderValue(\n  trace: Trace,\n  key: string,\n  value: ResolvedValue,\n  data: Data,\n  sqlIdRefRenderers: {[table: string]: SqlIdRefRenderer},\n): m.Children {\n  switch (value.kind) {\n    case 'value':\n      if (data.values[value.source] === null && value.skipIfNull) return null;\n      return m(TreeNode, {\n        left: key,\n        right: sqlValueToReadableString(data.values[value.source]),\n      });\n    case 'url': {\n      const url = data.values[value.source];\n      let rhs: m.Children;\n      if (url === null) {\n        if (value.skipIfNull) return null;\n        rhs = renderNull();\n      } else if (typeof url !== 'string') {\n        rhs = renderError(\n          `Incorrect type for URL ${\n            data.valueExpressions[value.source]\n          }: expected string, got ${typeof url}`,\n        );\n      } else {\n        rhs = m(\n          Anchor,\n          {href: url, target: '_blank', icon: 'open_in_new'},\n          url,\n        );\n      }\n      return m(TreeNode, {\n        left: key,\n        right: rhs,\n      });\n    }\n    case 'boolean': {\n      const bool = data.values[value.source];\n      if (bool === null && value.skipIfNull) return null;\n      let rhs: m.Child;\n      if (typeof bool !== 'bigint' && typeof bool !== 'number') {\n        rhs = renderError(\n          `Incorrect type for boolean ${\n            data.valueExpressions[value.source]\n          }: expected bigint or number, got ${typeof bool}`,\n        );\n      } else {\n        rhs = bool ? 'true' : 'false';\n      }\n      return m(TreeNode, {left: key, right: rhs});\n    }\n    case 'timestamp': {\n      const ts = data.values[value.source];\n      let rhs: m.Child;\n      if (ts === null) {\n        if (value.skipIfNull) return null;\n        rhs = m('i', 'NULL');\n      } else if (typeof ts !== 'bigint') {\n        rhs = renderError(\n          `Incorrect type for timestamp ${\n            data.valueExpressions[value.source]\n          }: expected bigint, got ${typeof ts}`,\n        );\n      } else {\n        rhs = m(TimestampWidget, {\n          ts: Time.fromRaw(ts),\n        });\n      }\n      return m(TreeNode, {\n        left: key,\n        right: rhs,\n      });\n    }\n    case 'duration': {\n      const dur = data.values[value.source];\n      return m(TreeNode, {\n        left: key,\n        right:\n          typeof dur === 'bigint' &&\n          m(DurationWidget, {\n            dur,\n          }),\n      });\n    }\n    case 'interval':\n    case 'thread_interval': {\n      const dur = data.values[value.dur];\n      return m(TreeNode, {\n        left: key,\n        right:\n          typeof dur === 'bigint' &&\n          m(DurationWidget, {\n            dur,\n          }),\n      });\n    }\n    case 'sql_id_ref':\n      const ref = data.sqlIdRefs[value.ref];\n      const refData = data.sqlIdRefData[value.ref];\n      let rhs: m.Children;\n      let children: m.Children;\n      if (refData instanceof Err) {\n        rhs = renderError(refData.message);\n      } else if (refData.id === null && value.skipIfNull === true) {\n        rhs = renderNull();\n      } else {\n        const renderer = sqlIdRefRenderers[ref.tableName];\n        if (renderer === undefined) {\n          rhs = renderError(\n            `Unknown table ${ref.tableName} (${ref.tableName}[${refData.id}])`,\n          );\n        } else {\n          const rendered = renderer.render(refData.data);\n          rhs = rendered.value;\n          children = rendered.children;\n        }\n      }\n      return m(\n        TreeNode,\n        {\n          left: key,\n          right: rhs,\n        },\n        children,\n      );\n    case 'arg_set_id':\n      const args = data.argSets[value.source];\n      if (args instanceof Err) {\n        return renderError(args.message);\n      }\n      return (\n        hasArgs(args) &&\n        m(\n          TreeNode,\n          {\n            left: key,\n          },\n          renderArguments(trace, args),\n        )\n      );\n    case 'array': {\n      const children: m.Children[] = [];\n      for (const child of value.data) {\n        const renderedChild = renderValue(\n          trace,\n          `[${children.length}]`,\n          child,\n          data,\n          sqlIdRefRenderers,\n        );\n        if (exists(renderedChild)) {\n          children.push(renderedChild);\n        }\n      }\n      if (children.length === 0 && value.skipIfEmpty) {\n        return null;\n      }\n      return m(\n        TreeNode,\n        {\n          left: key,\n        },\n        children,\n      );\n    }\n    case 'dict': {\n      const children: m.Children[] = [];\n      for (const [key, val] of Object.entries(value.data)) {\n        const child = renderValue(trace, key, val, data, sqlIdRefRenderers);\n        if (exists(child)) {\n          children.push(child);\n        }\n      }\n      if (children.length === 0 && value.skipIfEmpty) {\n        return null;\n      }\n      return m(\n        TreeNode,\n        {\n          left: key,\n        },\n        children,\n      );\n    }\n  }\n}\n\nfunction renderNull(): m.Children {\n  return m('i', 'NULL');\n}\n"]}
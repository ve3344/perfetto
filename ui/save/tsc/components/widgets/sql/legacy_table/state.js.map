{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../../../../src/components/widgets/sql/legacy_table/state.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {NUM, Row} from '../../../../trace_processor/query_result';\nimport {\n  tableColumnAlias,\n  ColumnOrderClause,\n  Filter,\n  isSqlColumnEqual,\n  SqlColumn,\n  sqlColumnId,\n  LegacyTableColumn,\n  tableColumnId,\n} from './column';\nimport {buildSqlQuery} from './query_builder';\nimport {raf} from '../../../../core/raf_scheduler';\nimport {SortDirection} from '../../../../base/comparison_utils';\nimport {assertTrue} from '../../../../base/logging';\nimport {SqlTableDescription} from './table_description';\nimport {Trace} from '../../../../public/trace';\n\nconst ROW_LIMIT = 100;\n\ninterface Request {\n  // Select statement, without the includes and the LIMIT and OFFSET clauses.\n  selectStatement: string;\n  // Query, including the LIMIT and OFFSET clauses.\n  query: string;\n  // Map of SqlColumn's id to the column name in the query.\n  columns: {[key: string]: string};\n}\n\n// Result of the execution of the query.\ninterface Data {\n  // Rows to show, including pagination.\n  rows: Row[];\n  error?: string;\n}\n\ninterface RowCount {\n  // Total number of rows in view, excluding the pagination.\n  // Undefined if the query returned an error.\n  count: number;\n  // Filters which were used to compute this row count.\n  // We need to recompute the totalRowCount only when filters change and not\n  // when the set of columns / order by changes.\n  filters: Filter[];\n}\n\nfunction isFilterEqual(a: Filter, b: Filter) {\n  return (\n    a.op === b.op &&\n    a.columns.length === b.columns.length &&\n    a.columns.every((c, i) => isSqlColumnEqual(c, b.columns[i]))\n  );\n}\n\nfunction areFiltersEqual(a: Filter[], b: Filter[]) {\n  if (a.length !== b.length) return false;\n  return a.every((f, i) => isFilterEqual(f, b[i]));\n}\n\nexport class SqlTableState {\n  private readonly additionalImports: string[];\n\n  // Columns currently displayed to the user. All potential columns can be found `this.table.columns`.\n  private columns: LegacyTableColumn[];\n  private filters: Filter[];\n  private orderBy: {\n    column: LegacyTableColumn;\n    direction: SortDirection;\n  }[];\n  private offset = 0;\n  private request: Request;\n  private data?: Data;\n  private rowCount?: RowCount;\n\n  constructor(\n    readonly trace: Trace,\n    readonly config: SqlTableDescription,\n    private readonly args?: {\n      initialColumns?: LegacyTableColumn[];\n      additionalColumns?: LegacyTableColumn[];\n      imports?: string[];\n      filters?: Filter[];\n      orderBy?: {\n        column: LegacyTableColumn;\n        direction: SortDirection;\n      }[];\n    },\n  ) {\n    this.additionalImports = args?.imports || [];\n\n    this.filters = args?.filters || [];\n    this.columns = [];\n\n    if (args?.initialColumns !== undefined) {\n      assertTrue(\n        args?.additionalColumns === undefined,\n        'Only one of `initialColumns` and `additionalColumns` can be set',\n      );\n      this.columns.push(...args.initialColumns);\n    } else {\n      for (const column of this.config.columns) {\n        if (column instanceof LegacyTableColumn) {\n          if (column.startsHidden !== true) {\n            this.columns.push(column);\n          }\n        } else {\n          const cols = column.initialColumns?.();\n          for (const col of cols ?? []) {\n            this.columns.push(col);\n          }\n        }\n      }\n      if (args?.additionalColumns !== undefined) {\n        this.columns.push(...args.additionalColumns);\n      }\n    }\n\n    this.orderBy = args?.orderBy ?? [];\n\n    this.request = this.buildRequest();\n    this.reload();\n  }\n\n  clone(): SqlTableState {\n    return new SqlTableState(this.trace, this.config, {\n      initialColumns: this.columns,\n      imports: this.args?.imports,\n      filters: this.filters,\n      orderBy: this.orderBy,\n    });\n  }\n\n  private getSQLImports() {\n    const tableImports = this.config.imports || [];\n    return [...tableImports, ...this.additionalImports]\n      .map((i) => `INCLUDE PERFETTO MODULE ${i};`)\n      .join('\\n');\n  }\n\n  private getCountRowsSQLQuery(): string {\n    return `\n      ${this.getSQLImports()}\n\n      ${this.getSqlQuery({count: 'COUNT()'})}\n    `;\n  }\n\n  // Return a query which selects the given columns, applying the filters and ordering currently in effect.\n  getSqlQuery(columns: {[key: string]: SqlColumn}): string {\n    return buildSqlQuery({\n      table: this.config.name,\n      columns,\n      filters: this.filters,\n      orderBy: this.getOrderedBy(),\n    });\n  }\n\n  // We need column names to pass to the debug track creation logic.\n  private buildSqlSelectStatement(): {\n    selectStatement: string;\n    columns: {[key: string]: string};\n  } {\n    const columns: {[key: string]: SqlColumn} = {};\n    // A set of columnIds for quick lookup.\n    const sqlColumnIds: Set<string> = new Set();\n    // We want to use the shortest posible name for each column, but we also need to mindful of potential collisions.\n    // To avoid collisions, we append a number to the column name if there are multiple columns with the same name.\n    const columnNameCount: {[key: string]: number} = {};\n\n    const tableColumns: {\n      column: LegacyTableColumn;\n      name: string;\n      alias: string;\n    }[] = [];\n\n    for (const column of this.columns) {\n      // If TableColumn has an alias, use it. Otherwise, use the column name.\n      const name = tableColumnAlias(column);\n      if (!(name in columnNameCount)) {\n        columnNameCount[name] = 0;\n      }\n\n      // Note: this can break if the user specifies a column which ends with `__<number>`.\n      // We intentionally use two underscores to avoid collisions and will fix it down the line if it turns out to be a problem.\n      const alias = `${name}__${++columnNameCount[name]}`;\n      tableColumns.push({column, name, alias});\n    }\n\n    for (const column of tableColumns) {\n      const sqlColumn = column.column.primaryColumn();\n      // If we have only one column with this name, we don't need to disambiguate it.\n      if (columnNameCount[column.name] === 1) {\n        columns[column.name] = sqlColumn;\n      } else {\n        columns[column.alias] = sqlColumn;\n      }\n      sqlColumnIds.add(sqlColumnId(sqlColumn));\n    }\n\n    // We are going to be less fancy for the dependendent columns can just always suffix them with a unique integer.\n    let dependentColumnCount = 0;\n    for (const column of tableColumns) {\n      const dependentColumns =\n        column.column.dependentColumns !== undefined\n          ? column.column.dependentColumns()\n          : {};\n      for (const col of Object.values(dependentColumns)) {\n        if (sqlColumnIds.has(sqlColumnId(col))) continue;\n        const name = typeof col === 'string' ? col : col.column;\n        const alias = `__${name}_${dependentColumnCount++}`;\n        columns[alias] = col;\n        sqlColumnIds.add(sqlColumnId(col));\n      }\n    }\n\n    return {\n      selectStatement: this.getSqlQuery(columns),\n      columns: Object.fromEntries(\n        Object.entries(columns).map(([key, value]) => [\n          sqlColumnId(value),\n          key,\n        ]),\n      ),\n    };\n  }\n\n  getNonPaginatedSQLQuery(): string {\n    return `\n      ${this.getSQLImports()}\n\n      ${this.buildSqlSelectStatement().selectStatement}\n    `;\n  }\n\n  getPaginatedSQLQuery(): Request {\n    return this.request;\n  }\n\n  canGoForward(): boolean {\n    if (this.data === undefined) return false;\n    return this.data.rows.length > ROW_LIMIT;\n  }\n\n  canGoBack(): boolean {\n    if (this.data === undefined) return false;\n    return this.offset > 0;\n  }\n\n  goForward() {\n    if (!this.canGoForward()) return;\n    this.offset += ROW_LIMIT;\n    this.reload({offset: 'keep'});\n  }\n\n  goBack() {\n    if (!this.canGoBack()) return;\n    this.offset -= ROW_LIMIT;\n    this.reload({offset: 'keep'});\n  }\n\n  getDisplayedRange(): {from: number; to: number} | undefined {\n    if (this.data === undefined) return undefined;\n    return {\n      from: this.offset + 1,\n      to: this.offset + Math.min(this.data.rows.length, ROW_LIMIT),\n    };\n  }\n\n  private async loadRowCount(): Promise<RowCount | undefined> {\n    const filters = Array.from(this.filters);\n    const res = await this.trace.engine.query(this.getCountRowsSQLQuery());\n    if (res.error() !== undefined) return undefined;\n    return {\n      count: res.firstRow({count: NUM}).count,\n      filters: filters,\n    };\n  }\n\n  private buildRequest(): Request {\n    const {selectStatement, columns} = this.buildSqlSelectStatement();\n    // We fetch one more row to determine if we can go forward.\n    const query = `\n      ${this.getSQLImports()}\n      ${selectStatement}\n      LIMIT ${ROW_LIMIT + 1}\n      OFFSET ${this.offset}\n    `;\n    return {selectStatement, query, columns};\n  }\n\n  private async loadData(): Promise<Data> {\n    const queryRes = await this.trace.engine.query(this.request.query);\n    const rows: Row[] = [];\n    for (const it = queryRes.iter({}); it.valid(); it.next()) {\n      const row: Row = {};\n      for (const column of queryRes.columns()) {\n        row[column] = it.get(column);\n      }\n      rows.push(row);\n    }\n\n    return {\n      rows,\n      error: queryRes.error(),\n    };\n  }\n\n  private async reload(params?: {offset: 'reset' | 'keep'}) {\n    if ((params?.offset ?? 'reset') === 'reset') {\n      this.offset = 0;\n    }\n\n    const newFilters = this.rowCount?.filters;\n    const filtersMatch =\n      newFilters && areFiltersEqual(newFilters, this.filters);\n    this.data = undefined;\n    const request = this.buildRequest();\n    this.request = request;\n    if (!filtersMatch) {\n      this.rowCount = undefined;\n    }\n\n    // Schedule a full redraw to happen after a short delay (50 ms).\n    // This is done to prevent flickering / visual noise and allow the UI to fetch\n    // the initial data from the Trace Processor.\n    // There is a chance that someone else schedules a full redraw in the\n    // meantime, forcing the flicker, but in practice it works quite well and\n    // avoids a lot of complexity for the callers.\n    // 50ms is half of the responsiveness threshold (100ms):\n    // https://web.dev/rail/#response-process-events-in-under-50ms\n    setTimeout(() => raf.scheduleFullRedraw(), 50);\n\n    if (!filtersMatch) {\n      this.rowCount = await this.loadRowCount();\n    }\n\n    const data = await this.loadData();\n\n    // If the request has changed since we started loading the data, do not update the state.\n    if (this.request !== request) return;\n    this.data = data;\n\n    raf.scheduleFullRedraw();\n  }\n\n  getTotalRowCount(): number | undefined {\n    return this.rowCount?.count;\n  }\n\n  getCurrentRequest(): Request {\n    return this.request;\n  }\n\n  getDisplayedRows(): Row[] {\n    return this.data?.rows || [];\n  }\n\n  getQueryError(): string | undefined {\n    return this.data?.error;\n  }\n\n  isLoading() {\n    return this.data === undefined;\n  }\n\n  addFilter(filter: Filter) {\n    this.filters.push(filter);\n    this.reload();\n  }\n\n  removeFilter(filter: Filter) {\n    this.filters = this.filters.filter((f) => !isFilterEqual(f, filter));\n    this.reload();\n  }\n\n  getFilters(): Filter[] {\n    return this.filters;\n  }\n\n  sortBy(clause: {column: LegacyTableColumn; direction: SortDirection}) {\n    // Remove previous sort by the same column.\n    this.orderBy = this.orderBy.filter(\n      (c) => tableColumnId(c.column) != tableColumnId(clause.column),\n    );\n    // Add the new sort clause to the front, so we effectively stable-sort the\n    // data currently displayed to the user.\n    this.orderBy.unshift(clause);\n    this.reload();\n  }\n\n  unsort() {\n    this.orderBy = [];\n    this.reload();\n  }\n\n  isSortedBy(column: LegacyTableColumn): SortDirection | undefined {\n    if (this.orderBy.length === 0) return undefined;\n    if (tableColumnId(this.orderBy[0].column) !== tableColumnId(column)) {\n      return undefined;\n    }\n    return this.orderBy[0].direction;\n  }\n\n  getOrderedBy(): ColumnOrderClause[] {\n    const result: ColumnOrderClause[] = [];\n    for (const orderBy of this.orderBy) {\n      const sortColumns = orderBy.column.sortColumns?.() ?? [\n        orderBy.column.primaryColumn(),\n      ];\n      for (const column of sortColumns) {\n        result.push({column, direction: orderBy.direction});\n      }\n    }\n    return result;\n  }\n\n  addColumn(column: LegacyTableColumn, index: number) {\n    this.columns.splice(index + 1, 0, column);\n    this.reload({offset: 'keep'});\n  }\n\n  hideColumnAtIndex(index: number) {\n    const column = this.columns[index];\n    this.columns.splice(index, 1);\n    // We can only filter by the visibile columns to avoid confusing the user,\n    // so we remove order by clauses that refer to the hidden column.\n    this.orderBy = this.orderBy.filter(\n      (c) => tableColumnId(c.column) !== tableColumnId(column),\n    );\n    // TODO(altimin): we can avoid the fetch here if the orderBy hasn't changed.\n    this.reload({offset: 'keep'});\n  }\n\n  moveColumn(fromIndex: number, toIndex: number) {\n    if (fromIndex === toIndex) return;\n    const column = this.columns[fromIndex];\n    this.columns.splice(fromIndex, 1);\n    if (fromIndex < toIndex) {\n      // We have deleted a column, therefore we need to adjust the target index.\n      --toIndex;\n    }\n    this.columns.splice(toIndex, 0, column);\n    raf.scheduleFullRedraw();\n  }\n\n  getSelectedColumns(): LegacyTableColumn[] {\n    return this.columns;\n  }\n}\n"]}
{"version":3,"file":"state_unittest.js","sourceRoot":"","sources":["../../../../../../src/components/widgets/sql/legacy_table/state_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {createFakeTraceImpl} from '../../../../core/fake_trace_impl';\nimport {FromSimpleColumn, tableColumnId} from './column';\nimport {SqlTableState} from './state';\nimport {SqlTableDescription} from './table_description';\nimport {createStandardColumn, createTimestampColumn} from '../table/table';\n\nconst idColumn = new FromSimpleColumn(createStandardColumn('id'));\nconst nameColumn = new FromSimpleColumn(createStandardColumn('name'));\nconst tsColumn = new FromSimpleColumn(createTimestampColumn('ts'));\n\nconst table: SqlTableDescription = {\n  name: 'table',\n  displayName: 'Table',\n  columns: [idColumn, nameColumn, tsColumn],\n};\n\ntest('sqlTableState: columnManupulation', () => {\n  const trace = createFakeTraceImpl({allowQueries: true});\n  const state = new SqlTableState(trace, table);\n\n  state.addColumn(tsColumn, 0);\n\n  expect(state.getSelectedColumns().map((c) => tableColumnId(c))).toEqual([\n    'id',\n    'ts',\n    'name',\n    'ts',\n  ]);\n\n  state.hideColumnAtIndex(0);\n\n  expect(state.getSelectedColumns().map((c) => tableColumnId(c))).toEqual([\n    'ts',\n    'name',\n    'ts',\n  ]);\n});\n\ntest('sqlTableState: sortedColumns', () => {\n  const trace = createFakeTraceImpl({allowQueries: true});\n  const state = new SqlTableState(trace, table);\n\n  // Verify that we have three columns: \"id\", \"name\" and \"ts\" and save\n  // references to them.\n  expect(state.getSelectedColumns().map((c) => tableColumnId(c))).toEqual([\n    'id',\n    'name',\n    'ts',\n  ]);\n\n  // Sort by name column and verify that it is sorted by.\n  state.sortBy({\n    column: nameColumn,\n    direction: 'ASC',\n  });\n  expect(state.isSortedBy(idColumn)).toBe(undefined);\n  expect(state.isSortedBy(nameColumn)).toBe('ASC');\n\n  // Sort by the same column in the opposite direction.\n  state.sortBy({\n    column: nameColumn,\n    direction: 'DESC',\n  });\n  expect(state.isSortedBy(idColumn)).toBe(undefined);\n  expect(state.isSortedBy(nameColumn)).toBe('DESC');\n\n  // Sort by the id column.\n  state.sortBy({\n    column: idColumn,\n    direction: 'ASC',\n  });\n  expect(state.isSortedBy(idColumn)).toBe('ASC');\n  expect(state.isSortedBy(nameColumn)).toBe(undefined);\n\n  // When the column is hidden, it should no longer be sorted by\n  // and we should fall back to the previously sorted by column.\n  state.hideColumnAtIndex(0);\n  expect(state.isSortedBy(nameColumn)).toBe('DESC');\n\n  // Remove the sorting and verify that we are no sorted by.\n  state.unsort();\n  expect(state.isSortedBy(nameColumn)).toBe(undefined);\n});\n\n// Clean up repeated whitespaces to allow for easier testing.\nfunction normalize(s: string): string {\n  return s.replace(/\\s+/g, ' ').trim();\n}\n\ntest('sqlTableState: sqlStatement', () => {\n  const trace = createFakeTraceImpl({allowQueries: true});\n  const state = new SqlTableState(trace, table);\n\n  // Check the generated SQL statement.\n  expect(normalize(state.getCurrentRequest().query)).toBe(\n    'SELECT table_0.id AS id, table_0.name AS name, table_0.ts AS ts FROM table AS table_0 LIMIT 101 OFFSET 0',\n  );\n});\n"]}
{"version":3,"file":"query_builder.js","sourceRoot":"","sources":["../../../../../../src/components/widgets/sql/legacy_table/query_builder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ColumnOrderClause, Filter, SqlColumn} from './column';\n\n// The goal of this module is to generate a query statement from the list of columns, filters and order by clauses.\n// The main challenge is that the column definitions are independent, and the columns themselves can reference the same join multiple times:\n//\n// For example, in the following query `parent_slice_ts` and `parent_slice_dur` are both referencing the same join, but we want to include only one join in the final query.\n\n// SELECT\n//    parent.ts AS parent_slice_ts,\n//    parent.dur AS parent_slice_dur\n// FROM slice\n// LEFT JOIN slice AS parent ON slice.parent_id = parent.id\n\n// Normalised sql column, where the source table is resolved to a unique index.\ntype NormalisedSqlColumn = {\n  column: string;\n  // If |joinId| is undefined, then the columnName comes from the primary table.\n  sourceTableId?: number;\n};\n\n// Normalised source table, where the join constraints are resolved to a normalised columns.\ntype NormalisedSourceTable = {\n  table: string;\n  joinOn: {[key: string]: NormalisedSqlColumn};\n  innerJoin: boolean;\n};\n\n// Checks whether two join constraints are equal.\nfunction areJoinConstraintsEqual(\n  a: {[key: string]: NormalisedSqlColumn},\n  b: {[key: string]: NormalisedSqlColumn},\n): boolean {\n  if (Object.keys(a).length !== Object.keys(b).length) {\n    return false;\n  }\n\n  for (const key of Object.keys(a)) {\n    if (typeof a[key] !== typeof b[key]) {\n      return false;\n    }\n    if (typeof a[key] === 'string') {\n      return a[key] === b[key];\n    }\n    const aValue = a[key] as NormalisedSqlColumn;\n    const bValue = b[key] as NormalisedSqlColumn;\n    if (\n      aValue.column !== bValue.column ||\n      aValue.sourceTableId !== bValue.sourceTableId\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Class responsible for building a query and maintaing a list of normalised join tables.\nclass QueryBuilder {\n  tables: NormalisedSourceTable[] = [];\n  tableAlias: string;\n\n  constructor(tableName: string) {\n    this.tableAlias = `${tableName}_0`;\n  }\n\n  // Normalises a column, including adding if necessary the joins to the list of tables.\n  normalise(column: SqlColumn): NormalisedSqlColumn {\n    if (typeof column === 'string') {\n      return {\n        column: column,\n      };\n    }\n    const normalisedJoinOn: {[key: string]: NormalisedSqlColumn} =\n      Object.fromEntries(\n        Object.entries(column.source.joinOn).map(([key, value]) => [\n          key,\n          this.normalise(value),\n        ]),\n      );\n\n    // Check if this join is already present.\n    for (let i = 0; i < this.tables.length; ++i) {\n      const table = this.tables[i];\n      if (\n        table.table === column.source.table &&\n        table.innerJoin === (column.source.innerJoin ?? false) &&\n        areJoinConstraintsEqual(table.joinOn, normalisedJoinOn)\n      ) {\n        return {\n          column: column.column,\n          sourceTableId: i,\n        };\n      }\n    }\n\n    // Otherwise, add a new join.\n    this.tables.push({\n      table: column.source.table,\n      joinOn: normalisedJoinOn,\n      innerJoin: column.source.innerJoin ?? false,\n    });\n    return {\n      column: column.column,\n      sourceTableId: this.tables.length - 1,\n    };\n  }\n\n  // Prints a reference to a column, including properly disambiguated table alias.\n  printColumn(column: NormalisedSqlColumn): string {\n    if (column.sourceTableId === undefined) {\n      if (!/^[A-Za-z0-9_]*$/.test(column.column)) {\n        // If this is an expression, don't prefix it with the table name.\n        return column.column;\n      }\n      return `${this.tableAlias}.${column.column}`;\n    }\n    const table = this.tables[column.sourceTableId];\n    // Dependent tables are 0-indexed, but we want to display them as 1-indexed to reserve 0 for the primary table.\n    return `${table.table}_${column.sourceTableId + 1}.${column.column}`;\n  }\n\n  printJoin(joinIndex: number): string {\n    const join = this.tables[joinIndex];\n    const alias = `${join.table}_${joinIndex + 1}`;\n    const clauses = Object.entries(join.joinOn).map(\n      ([key, value]) => `${alias}.${key} = ${this.printColumn(value)}`,\n    );\n    // Join IDs are 0-indexed, but we want to display them as 1-indexed to reserve 0 for the primary table.\n    return `${join.innerJoin ? '' : 'LEFT '}JOIN ${join.table} AS ${alias} ON ${clauses.join(' AND ')}`;\n  }\n}\n\n// Returns a query fetching the columns from the table, with the specified filters and order by clauses.\n// keys of the `columns` object are the names of the columns in the result set.\nexport function buildSqlQuery(args: {\n  table: string;\n  columns: {[key: string]: SqlColumn};\n  filters?: Filter[];\n  orderBy?: ColumnOrderClause[];\n}): string {\n  const builder = new QueryBuilder(args.table);\n\n  const normalisedColumns = Object.fromEntries(\n    Object.entries(args.columns).map(([key, value]) => [\n      key,\n      builder.normalise(value),\n    ]),\n  );\n  const normalisedFilters = (args.filters || []).map((filter) => ({\n    op: filter.op,\n    columns: filter.columns.map((column) => builder.normalise(column)),\n  }));\n  const normalisedOrderBy = (args.orderBy || []).map((orderBy) => ({\n    order: orderBy.direction,\n    column: builder.normalise(orderBy.column),\n  }));\n\n  const formatFilter = (filter: {\n    op: (cols: string[]) => string;\n    columns: NormalisedSqlColumn[];\n  }) => {\n    return filter.op(\n      filter.columns.map((column) => builder.printColumn(column)),\n    );\n  };\n\n  const filterClause =\n    normalisedFilters.length === 0\n      ? ''\n      : `WHERE\\n ${normalisedFilters.map(formatFilter).join('\\n  AND ')}`;\n  const joinClause = builder.tables\n    .map((_, index) => builder.printJoin(index))\n    .join('\\n');\n  const orderByClause =\n    normalisedOrderBy.length === 0\n      ? ''\n      : `ORDER BY\\n  ${normalisedOrderBy.map((orderBy) => `${builder.printColumn(orderBy.column)} ${orderBy.order}`).join(',  ')}`;\n\n  return `\n    SELECT\n      ${Object.entries(normalisedColumns)\n        .map(([key, value]) => `${builder.printColumn(value)} AS ${key}`)\n        .join(',\\n  ')}\n    FROM ${args.table} AS ${builder.tableAlias}\n    ${joinClause}\n    ${filterClause}\n    ${orderByClause}\n  `;\n}\n"]}
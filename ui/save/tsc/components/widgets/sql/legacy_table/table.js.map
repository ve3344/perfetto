{"version":3,"file":"table.js","sourceRoot":"","sources":["../../../../../../src/components/widgets/sql/legacy_table/table.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {\n  filterTitle,\n  SqlColumn,\n  sqlColumnId,\n  LegacyTableColumn,\n  tableColumnId,\n  LegacyTableManager,\n} from './column';\nimport {Button} from '../../../../widgets/button';\nimport {MenuDivider, MenuItem, PopupMenu2} from '../../../../widgets/menu';\nimport {buildSqlQuery} from './query_builder';\nimport {Icons} from '../../../../base/semantic_icons';\nimport {sqliteString} from '../../../../base/string_utils';\nimport {\n  ColumnType,\n  Row,\n  SqlValue,\n} from '../../../../trace_processor/query_result';\nimport {Anchor} from '../../../../widgets/anchor';\nimport {BasicTable, ReorderableColumns} from '../../../../widgets/basic_table';\nimport {Spinner} from '../../../../widgets/spinner';\n\nimport {ArgumentSelector} from './argument_selector';\nimport {FILTER_OPTION_TO_OP, FilterOption} from './render_cell_utils';\nimport {SqlTableState} from './state';\nimport {SqlTableDescription} from './table_description';\nimport {Intent} from '../../../../widgets/common';\nimport {Form} from '../../../../widgets/form';\nimport {TextInput} from '../../../../widgets/text_input';\n\nexport interface SqlTableConfig {\n  readonly state: SqlTableState;\n  // For additional menu items to add to the column header menus\n  readonly addColumnMenuItems?: (\n    column: LegacyTableColumn,\n    columnAlias: string,\n  ) => m.Children;\n}\n\ntype AdditionalColumnMenuItems = Record<string, m.Children>;\n\nfunction renderCell(\n  column: LegacyTableColumn,\n  row: Row,\n  state: SqlTableState,\n): m.Children {\n  const {columns} = state.getCurrentRequest();\n  const sqlValue = row[columns[sqlColumnId(column.primaryColumn())]];\n\n  const additionalValues: {[key: string]: SqlValue} = {};\n  const dependentColumns = column.dependentColumns?.() ?? {};\n  for (const [key, col] of Object.entries(dependentColumns)) {\n    additionalValues[key] = row[columns[sqlColumnId(col)]];\n  }\n\n  return column.renderCell(sqlValue, getTableManager(state), additionalValues);\n}\n\nexport function columnTitle(column: LegacyTableColumn): string {\n  if (column.getTitle !== undefined) {\n    const title = column.getTitle();\n    if (title !== undefined) return title;\n  }\n  return sqlColumnId(column.primaryColumn());\n}\n\ninterface AddColumnMenuItemAttrs {\n  table: SqlTable;\n  state: SqlTableState;\n  index: number;\n}\n\n// This is separated into a separate class to store the index of the column to be\n// added and increment it when multiple columns are added from the same popup menu.\nclass AddColumnMenuItem implements m.ClassComponent<AddColumnMenuItemAttrs> {\n  // Index where the new column should be inserted.\n  // In the regular case, a click would close the popup (destroying this class) and\n  // the `index` would not change during its lifetime.\n  // However, for mod-click, we want to keep adding columns to the right of the recently\n  // added column, so to achieve that we keep track of the index and increment it for\n  // each new column added.\n  index: number;\n\n  constructor({attrs}: m.Vnode<AddColumnMenuItemAttrs>) {\n    this.index = attrs.index;\n  }\n\n  view({attrs}: m.Vnode<AddColumnMenuItemAttrs>) {\n    return m(\n      MenuItem,\n      {label: 'Add column', icon: Icons.AddColumn},\n      attrs.table.renderAddColumnOptions((column) => {\n        attrs.state.addColumn(column, this.index++);\n      }),\n    );\n  }\n}\n\ninterface ColumnFilterAttrs {\n  filterOption: FilterOption;\n  columns: SqlColumn[];\n  state: SqlTableState;\n}\n\n// Separating out an individual column filter into a class\n// so that we can store the raw input value.\nclass ColumnFilter implements m.ClassComponent<ColumnFilterAttrs> {\n  // Holds the raw string value from the filter text input element\n  private inputValue: string;\n\n  constructor() {\n    this.inputValue = '';\n  }\n\n  view({attrs}: m.Vnode<ColumnFilterAttrs>) {\n    const {filterOption, columns, state} = attrs;\n\n    const {op, requiresParam} = FILTER_OPTION_TO_OP[filterOption];\n\n    return m(\n      MenuItem,\n      {\n        label: filterOption,\n        // Filter options that do not need an input value will filter the\n        // table directly when clicking on the menu item\n        // (ex: IS NULL or IS NOT NULL)\n        onclick: !requiresParam\n          ? () => {\n              state.addFilter({\n                op: (cols) => `${cols[0]} ${op}`,\n                columns,\n              });\n            }\n          : undefined,\n      },\n      // All non-null filter options will have a submenu that allows\n      // the user to enter a value into textfield and filter using\n      // the Filter button.\n      requiresParam &&\n        m(\n          Form,\n          {\n            onSubmit: () => {\n              // Convert the string extracted from\n              // the input text field into the correct data type for\n              // filtering. The order in which each data type is\n              // checked matters: string, number (floating), and bigint.\n              if (this.inputValue === '') return;\n\n              let filterValue: ColumnType;\n\n              if (Number.isNaN(Number.parseFloat(this.inputValue))) {\n                filterValue = sqliteString(this.inputValue);\n              } else if (\n                !Number.isInteger(Number.parseFloat(this.inputValue))\n              ) {\n                filterValue = Number(this.inputValue);\n              } else {\n                filterValue = BigInt(this.inputValue);\n              }\n\n              state.addFilter({\n                op: (cols) => `${cols[0]} ${op} ${filterValue}`,\n                columns,\n              });\n            },\n            submitLabel: 'Filter',\n          },\n          m(TextInput, {\n            id: 'column_filter_value',\n            ref: 'COLUMN_FILTER_VALUE',\n            autofocus: true,\n            oninput: (e: KeyboardEvent) => {\n              if (!e.target) return;\n\n              this.inputValue = (e.target as HTMLInputElement).value;\n            },\n          }),\n        ),\n    );\n  }\n}\n\nexport class SqlTable implements m.ClassComponent<SqlTableConfig> {\n  private readonly table: SqlTableDescription;\n\n  private state: SqlTableState;\n\n  constructor(vnode: m.Vnode<SqlTableConfig>) {\n    this.state = vnode.attrs.state;\n    this.table = this.state.config;\n  }\n\n  renderFilters(): m.Children {\n    const filters: m.Child[] = [];\n    for (const filter of this.state.getFilters()) {\n      const label = filterTitle(filter);\n      filters.push(\n        m(Button, {\n          label,\n          icon: 'close',\n          intent: Intent.Primary,\n          onclick: () => {\n            this.state.removeFilter(filter);\n          },\n        }),\n      );\n    }\n    return filters;\n  }\n\n  renderAddColumnOptions(\n    addColumn: (column: LegacyTableColumn) => void,\n  ): m.Children {\n    // We do not want to add columns which already exist, so we track the\n    // columns which we are already showing here.\n    // TODO(altimin): Theoretically a single table can have two different\n    // arg_set_ids, so we should track (arg_set_id_column, arg_name) pairs here.\n    const existingColumnIds = new Set<string>();\n\n    for (const column of this.state.getSelectedColumns()) {\n      existingColumnIds.add(tableColumnId(column));\n    }\n\n    const result = [];\n    for (const column of this.table.columns) {\n      if (column instanceof LegacyTableColumn) {\n        if (existingColumnIds.has(tableColumnId(column))) continue;\n        result.push(\n          m(MenuItem, {\n            label: columnTitle(column),\n            onclick: () => addColumn(column),\n          }),\n        );\n      } else {\n        result.push(\n          m(\n            MenuItem,\n            {\n              label: column.getTitle(),\n            },\n            m(ArgumentSelector, {\n              alreadySelectedColumnIds: existingColumnIds,\n              tableManager: getTableManager(this.state),\n              columnSet: column,\n              onArgumentSelected: (column: LegacyTableColumn) => {\n                addColumn(column);\n              },\n            }),\n          ),\n        );\n        continue;\n      }\n    }\n    return result;\n  }\n\n  renderColumnFilterOptions(\n    c: LegacyTableColumn,\n  ): m.Vnode<ColumnFilterAttrs, unknown>[] {\n    return Object.values(FilterOption).map((filterOption) =>\n      m(ColumnFilter, {\n        filterOption,\n        columns: [c.primaryColumn()],\n        state: this.state,\n      }),\n    );\n  }\n\n  renderColumnHeader(\n    column: LegacyTableColumn,\n    index: number,\n    additionalColumnHeaderMenuItems?: m.Children,\n  ) {\n    const sorted = this.state.isSortedBy(column);\n    const icon =\n      sorted === 'ASC'\n        ? Icons.SortedAsc\n        : sorted === 'DESC'\n          ? Icons.SortedDesc\n          : Icons.ContextMenu;\n\n    return m(\n      PopupMenu2,\n      {\n        trigger: m(Anchor, {icon}, columnTitle(column)),\n      },\n      sorted !== 'DESC' &&\n        m(MenuItem, {\n          label: 'Sort: highest first',\n          icon: Icons.SortedDesc,\n          onclick: () => {\n            this.state.sortBy({\n              column: column,\n              direction: 'DESC',\n            });\n          },\n        }),\n      sorted !== 'ASC' &&\n        m(MenuItem, {\n          label: 'Sort: lowest first',\n          icon: Icons.SortedAsc,\n          onclick: () => {\n            this.state.sortBy({\n              column: column,\n              direction: 'ASC',\n            });\n          },\n        }),\n      sorted !== undefined &&\n        m(MenuItem, {\n          label: 'Unsort',\n          icon: Icons.Close,\n          onclick: () => this.state.unsort(),\n        }),\n      this.state.getSelectedColumns().length > 1 &&\n        m(MenuItem, {\n          label: 'Hide',\n          icon: Icons.Hide,\n          onclick: () => this.state.hideColumnAtIndex(index),\n        }),\n      m(\n        MenuItem,\n        {label: 'Add filter', icon: Icons.Filter},\n        this.renderColumnFilterOptions(column),\n      ),\n      additionalColumnHeaderMenuItems,\n      // Menu items before divider apply to selected column\n      m(MenuDivider),\n      // Menu items after divider apply to entire table\n      m(AddColumnMenuItem, {table: this, state: this.state, index}),\n    );\n  }\n\n  getAdditionalColumnMenuItems(\n    addColumnMenuItems?: (\n      column: LegacyTableColumn,\n      columnAlias: string,\n    ) => m.Children,\n  ) {\n    if (addColumnMenuItems === undefined) return;\n\n    const additionalColumnMenuItems: AdditionalColumnMenuItems = {};\n    this.state.getSelectedColumns().forEach((column) => {\n      const columnAlias =\n        this.state.getCurrentRequest().columns[\n          sqlColumnId(column.primaryColumn())\n        ];\n\n      additionalColumnMenuItems[columnAlias] = addColumnMenuItems(\n        column,\n        columnAlias,\n      );\n    });\n\n    return additionalColumnMenuItems;\n  }\n\n  view({attrs}: m.Vnode<SqlTableConfig>) {\n    const rows = this.state.getDisplayedRows();\n    const additionalColumnMenuItems = this.getAdditionalColumnMenuItems(\n      attrs.addColumnMenuItems,\n    );\n\n    const columns = this.state.getSelectedColumns();\n    const columnDescriptors = columns.map((column, i) => {\n      return {\n        title: this.renderColumnHeader(\n          column,\n          i,\n          additionalColumnMenuItems &&\n            additionalColumnMenuItems[\n              this.state.getCurrentRequest().columns[\n                sqlColumnId(column.primaryColumn())\n              ]\n            ],\n        ),\n        render: (row: Row) => renderCell(column, row, this.state),\n      };\n    });\n\n    return [\n      m('div', this.renderFilters()),\n      m(\n        BasicTable<Row>,\n        {\n          data: rows,\n          columns: [\n            new ReorderableColumns(\n              columnDescriptors,\n              (from: number, to: number) => this.state.moveColumn(from, to),\n            ),\n          ],\n        },\n        this.state.isLoading() && m(Spinner),\n        this.state.getQueryError() !== undefined &&\n          m('.query-error', this.state.getQueryError()),\n      ),\n    ];\n  }\n}\n\nfunction getTableManager(state: SqlTableState): LegacyTableManager {\n  return {\n    addFilter: (filter) => {\n      state.addFilter(filter);\n    },\n    trace: state.trace,\n    getSqlQuery: (columns: {[key: string]: SqlColumn}) =>\n      buildSqlQuery({\n        table: state.config.name,\n        columns,\n        filters: state.getFilters(),\n        orderBy: state.getOrderedBy(),\n      }),\n  };\n}\n"]}
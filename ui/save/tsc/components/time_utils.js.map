{"version":3,"file":"time_utils.js","sourceRoot":"","sources":["../../../src/components/time_utils.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAOjC,wCAUC;AAED,wCAqBC;;AAtCD,8DAAwB;AACxB,uCAA4D;AAE5D,iDAAsE;AAEtE,SAAgB,cAAc,CAAC,IAAU;IACvC,MAAM,EAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAC,GAAG,WAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/D,OAAO,IAAA,iBAAC,EACN,kBAAkB,EAClB,IAAA,iBAAC,EAAC,sBAAsB,EAAE,OAAO,CAAC,EAClC,GAAG,EACH,IAAA,iBAAC,EAAC,yBAAyB,EAAE,MAAM,CAAC,EACpC,IAAA,iBAAC,EAAC,yBAAyB,EAAE,MAAM,CAAC,EACpC,IAAA,iBAAC,EAAC,wBAAwB,EAAE,KAAK,CAAC,CACnC,CAAC;AACJ,CAAC;AAED,SAAgB,cAAc,CAAC,KAAY,EAAE,GAAa;IACxD,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC;IAC3C,QAAQ,GAAG,EAAE,CAAC;QACZ,KAAK,0BAAe,CAAC,GAAG,CAAC;QACzB,KAAK,0BAAe,CAAC,OAAO,CAAC;QAC7B,KAAK,0BAAe,CAAC,QAAQ;YAC3B,OAAO,uBAAuB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC7C,KAAK,0BAAe,CAAC,OAAO;YAC1B,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;QACxB,KAAK,0BAAe,CAAC,aAAa;YAChC,OAAO,GAAG,CAAC,cAAc,EAAE,CAAC;QAC9B,KAAK,0BAAe,CAAC,OAAO;YAC1B,OAAO,eAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACrC,KAAK,0BAAe,CAAC,YAAY;YAC/B,OAAO,eAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAC1C,KAAK,0BAAe,CAAC,YAAY;YAC/B,OAAO,eAAQ,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAC1C;YACE,MAAM,CAAC,GAAU,GAAG,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;AACH,CAAC;AAED,SAAS,uBAAuB,CAAC,KAAY,EAAE,GAAa;IAC1D,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,iBAAiB,CAAC;IAC7C,QAAQ,GAAG,EAAE,CAAC;QACZ,KAAK,4BAAiB,CAAC,aAAa;YAClC,OAAO,eAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QAChC,KAAK,4BAAiB,CAAC,IAAI;YACzB,OAAO,eAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC9B;YACE,MAAM,CAAC,GAAU,GAAG,CAAC;YACrB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;IAC3C,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Duration, duration, time, Time} from '../base/time';\nimport {Trace} from '../public/trace';\nimport {DurationPrecision, TimestampFormat} from '../public/timeline';\n\nexport function renderTimecode(time: time) {\n  const {dhhmmss, millis, micros, nanos} = Time.toTimecode(time);\n  return m(\n    'span.pf-timecode',\n    m('span.pf-timecode-hms', dhhmmss),\n    '.',\n    m('span.pf-timecode-millis', millis),\n    m('span.pf-timecode-micros', micros),\n    m('span.pf-timecode-nanos', nanos),\n  );\n}\n\nexport function formatDuration(trace: Trace, dur: duration): string {\n  const fmt = trace.timeline.timestampFormat;\n  switch (fmt) {\n    case TimestampFormat.UTC:\n    case TimestampFormat.TraceTz:\n    case TimestampFormat.Timecode:\n      return renderFormattedDuration(trace, dur);\n    case TimestampFormat.TraceNs:\n      return dur.toString();\n    case TimestampFormat.TraceNsLocale:\n      return dur.toLocaleString();\n    case TimestampFormat.Seconds:\n      return Duration.formatSeconds(dur);\n    case TimestampFormat.Milliseconds:\n      return Duration.formatMilliseconds(dur);\n    case TimestampFormat.Microseconds:\n      return Duration.formatMicroseconds(dur);\n    default:\n      const x: never = fmt;\n      throw new Error(`Invalid format ${x}`);\n  }\n}\n\nfunction renderFormattedDuration(trace: Trace, dur: duration): string {\n  const fmt = trace.timeline.durationPrecision;\n  switch (fmt) {\n    case DurationPrecision.HumanReadable:\n      return Duration.humanise(dur);\n    case DurationPrecision.Full:\n      return Duration.format(dur);\n    default:\n      const x: never = fmt;\n      throw new Error(`Invalid format ${x}`);\n  }\n}\n"]}
{"version":3,"file":"visualized_args_track.js","sourceRoot":"","sources":["../../../../src/components/tracks/visualized_args_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,iDAA4C;AAC5C,8DAAgD;AAChD,6DAAsD;AACtD,0CAA0C;AAC1C,+DAA2D;AAY3D,MAAa,mBAAoB,SAAQ,qCAAgB;IACtC,QAAQ,CAAS;IACjB,OAAO,CAAS;IAChB,OAAO,CAAa;IAErC,YAAY,EACV,GAAG,EACH,KAAK,EACL,OAAO,EACP,QAAQ,EACR,OAAO,EACP,OAAO,GACkB;QACzB,MAAM,IAAI,GAAG,IAAA,gBAAS,GAAE,CAAC;QACzB,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAG,8BAA8B,cAAc,IAAI,IAAI,QAAQ,CAAC;QAE9E,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,MAAM;QACV,OAAO,MAAM,IAAA,sBAAU,EACrB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,QAAQ,EACb;;;;;;;;;;;;4BAYsB,IAAI,CAAC,OAAO;;;;;;;;;;OAUjC,CACF,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAA,iBAAC,EAAC,eAAM,EAAE;YACf,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE;YAC7B,IAAI,EAAE,sBAAK,CAAC,KAAK;YACjB,KAAK,EAAE,+CAA+C;YACtD,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC;CACF;AA7DD,kDA6DC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Button} from '../../widgets/button';\nimport {Icons} from '../../base/semantic_icons';\nimport {ThreadSliceTrack} from './thread_slice_track';\nimport {uuidv4Sql} from '../../base/uuid';\nimport {createView} from '../../trace_processor/sql_utils';\nimport {Trace} from '../../public/trace';\n\nexport interface VisualizedArgsTrackAttrs {\n  readonly uri: string;\n  readonly trace: Trace;\n  readonly trackId: number;\n  readonly maxDepth: number;\n  readonly argName: string;\n  readonly onClose: () => void;\n}\n\nexport class VisualizedArgsTrack extends ThreadSliceTrack {\n  private readonly viewName: string;\n  private readonly argName: string;\n  private readonly onClose: () => void;\n\n  constructor({\n    uri,\n    trace,\n    trackId,\n    maxDepth,\n    argName,\n    onClose,\n  }: VisualizedArgsTrackAttrs) {\n    const uuid = uuidv4Sql();\n    const escapedArgName = argName.replace(/[^a-zA-Z]/g, '_');\n    const viewName = `__arg_visualisation_helper_${escapedArgName}_${uuid}_slice`;\n\n    super(trace, uri, trackId, maxDepth, viewName);\n    this.viewName = viewName;\n    this.argName = argName;\n    this.onClose = onClose;\n  }\n\n  async onInit() {\n    return await createView(\n      this.engine,\n      this.viewName,\n      `\n        with slice_with_arg as (\n          select\n            slice.id,\n            slice.track_id,\n            slice.ts,\n            slice.dur,\n            slice.thread_dur,\n            NULL as cat,\n            args.display_value as name\n          from slice\n          join args using (arg_set_id)\n          where args.key='${this.argName}'\n        )\n        select\n          *,\n          (select count()\n          from ancestor_slice(s1.id) s2\n          join slice_with_arg s3 on s2.id=s3.id\n          ) as depth\n        from slice_with_arg s1\n        order by id\n      `,\n    );\n  }\n\n  getTrackShellButtons(): m.Children {\n    return m(Button, {\n      onclick: () => this.onClose(),\n      icon: Icons.Close,\n      title: 'Close all visualised args tracks for this arg',\n      compact: true,\n    });\n  }\n}\n"]}
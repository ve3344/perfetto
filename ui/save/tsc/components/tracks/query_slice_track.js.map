{"version":3,"file":"query_slice_track.js","sourceRoot":"","sources":["../../../../src/components/tracks/query_slice_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAsEjC,sDAUC;AA9ED,iFAGwC;AACxC,2FAG6C;AAC7C,+DAAoE;AAGpE,0DAAoD;AAuCpD;;;;;;;;;;;;;;;;;GAiBG;AACI,KAAK,UAAU,qBAAqB,CAAC,IAAyB;IACnE,MAAM,SAAS,GAAG,uBAAuB,IAAA,0BAAW,EAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;IACjE,MAAM,2BAA2B,CAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,EACjB,SAAS,EACT,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,UAAU,CAChB,CAAC;IACF,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AACjE,CAAC;AAED,KAAK,UAAU,2BAA2B,CACxC,MAAc,EACd,SAAiB,EACjB,IAAmB,EACnB,UAAuC,EAAE,EACzC,aAAuB,EAAE;IAEzB,MAAM,EAAC,EAAE,GAAG,IAAI,EAAE,GAAG,GAAG,KAAK,EAAE,IAAI,GAAG,MAAM,EAAC,GAAG,OAAO,CAAC;IAExD,sEAAsE;IACtE,wEAAwE;IACxE,0EAA0E;IAC1E,iCAAiC;IACjC,MAAM,WAAW,GACf,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAEnE,MAAM,KAAK,GAAG;eACD,WAAW;QAClB,IAAI,CAAC,SAAS;;;;UAIZ,EAAE;sBACU,GAAG;uBACF,IAAI;UACjB,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;UAChC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,8CAAU,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;;;;;;;;GAQrE,CAAC;IAEF,OAAO,MAAM,IAAA,+BAAmB,EAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC7D,CAAC;AAED,MAAM,kBAAmB,SAAQ,uDAAwB;IAIpC;IAHnB,YACE,KAAY,EACZ,GAAW,EACM,YAAoB;QAErC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAFD,iBAAY,GAAZ,YAAY,CAAQ;IAGvC,CAAC;IAEQ,gBAAgB;QACvB,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,YAAY;SAChC,CAAC;IACJ,CAAC;IAEQ,YAAY,CAAC,EAAC,OAAO,EAAsB;QAClD,OAAO,IAAI,kEAA8B,CACvC,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,YAAY,EACjB,OAAO,CACR,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  CustomSqlTableDefConfig,\n  CustomSqlTableSliceTrack,\n} from './custom_sql_table_slice_track';\nimport {\n  ARG_PREFIX,\n  SqlTableSliceTrackDetailsPanel,\n} from './sql_table_slice_track_details_tab';\nimport {createPerfettoTable} from '../../trace_processor/sql_utils';\nimport {Trace} from '../../public/trace';\nimport {TrackEventSelection} from '../../public/selection';\nimport {sqlNameSafe} from '../../base/string_utils';\nimport {Engine} from '../../trace_processor/engine';\n\nexport interface QuerySliceTrackArgs {\n  // The trace object used to run queries.\n  readonly trace: Trace;\n\n  // A unique, reproducible ID for this track.\n  readonly uri: string;\n\n  // The query and optional column remapping.\n  readonly data: SqlDataSource;\n\n  // Optional: Which columns should be used for ts, dur, and name. If omitted,\n  // the defaults 'ts', 'dur', and 'name' will be used.\n  readonly columns?: Partial<SliceColumnMapping>;\n\n  // Optional: A list of column names which are displayed in the details panel\n  // when a slice is selected.\n  readonly argColumns?: string[];\n}\n\nexport interface SqlDataSource {\n  // SQL source selecting the necessary data.\n  readonly sqlSource: string;\n\n  // Optional: Rename columns from the query result.\n  // If omitted, original column names from the query are used instead.\n  // The caller is responsible for ensuring that the number of items in this\n  // list matches the number of columns returned by sqlSource.\n  readonly columns?: string[];\n}\n\nexport interface SliceColumnMapping {\n  readonly ts: string;\n  readonly dur: string;\n  readonly name: string;\n}\n\n/**\n * Creates a slice track based on a query with automatic slice layout.\n *\n * The query must provide the following columns:\n * - ts: INTEGER - The timestamp of the start of each slice.\n * - dur: INTEGER - The length of each slice.\n * - name: TEXT - A name to show on each slice, which is also used to derive the\n *   color.\n *\n * The column names don't have to be 'ts', 'dur', and 'name' and can be remapped\n * if convenient using the config.columns parameter.\n *\n * An optional set of columns can be provided which will be displayed in the\n * details panel when a slice is selected.\n *\n * The layout (vertical depth) of each slice will be determined automatically to\n * avoid overlapping slices.\n */\nexport async function createQuerySliceTrack(args: QuerySliceTrackArgs) {\n  const tableName = `__query_slice_track_${sqlNameSafe(args.uri)}`;\n  await createPerfettoTableForTrack(\n    args.trace.engine,\n    tableName,\n    args.data,\n    args.columns,\n    args.argColumns,\n  );\n  return new SqlTableSliceTrack(args.trace, args.uri, tableName);\n}\n\nasync function createPerfettoTableForTrack(\n  engine: Engine,\n  tableName: string,\n  data: SqlDataSource,\n  columns: Partial<SliceColumnMapping> = {},\n  argColumns: string[] = [],\n) {\n  const {ts = 'ts', dur = 'dur', name = 'name'} = columns;\n\n  // If the view has clashing names (e.g. \"name\" coming from joining two\n  // different tables, we will see names like \"name_1\", \"name_2\", but they\n  // won't be addressable from the SQL. So we explicitly name them through a\n  // list of columns passed to CTE.\n  const dataColumns =\n    data.columns !== undefined ? `(${data.columns.join(', ')})` : '';\n\n  const query = `\n    with data${dataColumns} as (\n      ${data.sqlSource}\n    ),\n    prepared_data as (\n      select\n        ${ts} as ts,\n        ifnull(cast(${dur} as int), -1) as dur,\n        printf('%s', ${name}) as name\n        ${argColumns.length > 0 ? ',' : ''}\n        ${argColumns.map((c) => `${c} as ${ARG_PREFIX}${c}`).join(',\\n')}\n      from data\n    )\n    select\n      row_number() over (order by ts) as id,\n      *\n    from prepared_data\n    order by ts\n  `;\n\n  return await createPerfettoTable(engine, tableName, query);\n}\n\nclass SqlTableSliceTrack extends CustomSqlTableSliceTrack {\n  constructor(\n    trace: Trace,\n    uri: string,\n    private readonly sqlTableName: string,\n  ) {\n    super(trace, uri);\n  }\n\n  override getSqlDataSource(): CustomSqlTableDefConfig {\n    return {\n      sqlTableName: this.sqlTableName,\n    };\n  }\n\n  override detailsPanel({eventId}: TrackEventSelection) {\n    return new SqlTableSliceTrackDetailsPanel(\n      this.trace,\n      this.sqlTableName,\n      eventId,\n    );\n  }\n}\n"]}
{"version":3,"file":"sql_table_slice_track_details_tab.js","sourceRoot":"","sources":["../../../../src/components/tracks/sql_table_slice_track_details_tab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {duration, Time, time} from '../../base/time';\nimport {hasArgs, renderArguments} from '../details/slice_args';\nimport {getSlice, SliceDetails} from '../sql_utils/slice';\nimport {asSliceSqlId, Utid} from '../sql_utils/core_types';\nimport {getThreadState, ThreadState} from '../sql_utils/thread_state';\nimport {DurationWidget} from '../widgets/duration';\nimport {Timestamp} from '../widgets/timestamp';\nimport {\n  ColumnType,\n  durationFromSql,\n  LONG,\n  STR,\n  timeFromSql,\n} from '../../trace_processor/query_result';\nimport {sqlValueToReadableString} from '../../trace_processor/sql_utils';\nimport {DetailsShell} from '../../widgets/details_shell';\nimport {GridLayout} from '../../widgets/grid_layout';\nimport {Section} from '../../widgets/section';\nimport {dictToTree, dictToTreeNodes, Tree, TreeNode} from '../../widgets/tree';\nimport {threadStateRef} from '../widgets/thread_state';\nimport {getThreadName} from '../sql_utils/thread';\nimport {getProcessName} from '../sql_utils/process';\nimport {sliceRef} from '../widgets/slice';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {Trace} from '../../public/trace';\n\nexport const ARG_PREFIX = 'arg_';\n\nfunction sqlValueToNumber(value?: ColumnType): number | undefined {\n  if (typeof value === 'bigint') return Number(value);\n  if (typeof value !== 'number') return undefined;\n  return value;\n}\n\nfunction sqlValueToUtid(value?: ColumnType): Utid | undefined {\n  if (typeof value === 'bigint') return Number(value) as Utid;\n  if (typeof value !== 'number') return undefined;\n  return value as Utid;\n}\n\nfunction renderTreeContents(dict: {[key: string]: m.Child}): m.Child[] {\n  const children: m.Child[] = [];\n  for (const key of Object.keys(dict)) {\n    if (dict[key] === null || dict[key] === undefined) continue;\n    children.push(\n      m(TreeNode, {\n        left: key,\n        right: dict[key],\n      }),\n    );\n  }\n  return children;\n}\n\nexport class SqlTableSliceTrackDetailsPanel implements TrackEventDetailsPanel {\n  private data?: {\n    name: string;\n    ts: time;\n    dur: duration;\n    args: {[key: string]: ColumnType};\n  };\n  // We will try to interpret the arguments as references into well-known\n  // tables. These values will be set if the relevant columns exist and\n  // are consistent (e.g. 'ts' and 'dur' for this slice correspond to values\n  // in these well-known tables).\n  private threadState?: ThreadState;\n  private slice?: SliceDetails;\n\n  constructor(\n    private readonly trace: Trace,\n    private readonly tableName: string,\n    private readonly eventId: number,\n  ) {}\n\n  private async maybeLoadThreadState(\n    id: number | undefined,\n    ts: time,\n    dur: duration,\n    table: string | undefined,\n    utid?: Utid,\n  ): Promise<ThreadState | undefined> {\n    if (id === undefined) return undefined;\n    if (utid === undefined) return undefined;\n\n    const threadState = await getThreadState(this.trace.engine, id);\n    if (threadState === undefined) return undefined;\n    if (\n      table === 'thread_state' ||\n      (threadState.ts === ts &&\n        threadState.dur === dur &&\n        threadState.thread?.utid === utid)\n    ) {\n      return threadState;\n    } else {\n      return undefined;\n    }\n  }\n\n  private renderThreadStateInfo(): m.Child {\n    if (this.threadState === undefined) return null;\n    return m(\n      TreeNode,\n      {\n        left: threadStateRef(this.threadState),\n        right: '',\n      },\n      renderTreeContents({\n        Thread: getThreadName(this.threadState.thread),\n        Process: getProcessName(this.threadState.thread?.process),\n        State: this.threadState.state,\n      }),\n    );\n  }\n\n  private async maybeLoadSlice(\n    id: number | undefined,\n    ts: time,\n    dur: duration,\n    table: string | undefined,\n    trackId?: number,\n  ): Promise<SliceDetails | undefined> {\n    if (id === undefined) return undefined;\n    if (table !== 'slice' && trackId === undefined) return undefined;\n\n    const slice = await getSlice(this.trace.engine, asSliceSqlId(id));\n    if (slice === undefined) return undefined;\n    if (\n      table === 'slice' ||\n      (slice.ts === ts && slice.dur === dur && slice.trackId === trackId)\n    ) {\n      return slice;\n    } else {\n      return undefined;\n    }\n  }\n\n  private renderSliceInfo(): m.Child {\n    if (this.slice === undefined) return null;\n    return m(\n      TreeNode,\n      {\n        left: sliceRef(this.slice, 'Slice'),\n        right: '',\n      },\n      m(TreeNode, {\n        left: 'Name',\n        right: this.slice.name,\n      }),\n      m(TreeNode, {\n        left: 'Thread',\n        right: getThreadName(this.slice.thread),\n      }),\n      m(TreeNode, {\n        left: 'Process',\n        right: getProcessName(this.slice.process),\n      }),\n      hasArgs(this.slice.args) &&\n        m(\n          TreeNode,\n          {\n            left: 'Args',\n          },\n          renderArguments(this.trace, this.slice.args),\n        ),\n    );\n  }\n\n  async load() {\n    const queryResult = await this.trace.engine.query(\n      `select * from ${this.tableName} where id = ${this.eventId}`,\n    );\n    const row = queryResult.firstRow({\n      ts: LONG,\n      dur: LONG,\n      name: STR,\n    });\n    this.data = {\n      name: row.name,\n      ts: Time.fromRaw(row.ts),\n      dur: row.dur,\n      args: {},\n    };\n\n    for (const key of Object.keys(row)) {\n      if (key.startsWith(ARG_PREFIX)) {\n        this.data.args[key.substr(ARG_PREFIX.length)] = (\n          row as {[key: string]: ColumnType}\n        )[key];\n      }\n    }\n\n    this.threadState = await this.maybeLoadThreadState(\n      sqlValueToNumber(this.data.args['id']),\n      this.data.ts,\n      this.data.dur,\n      sqlValueToReadableString(this.data.args['table_name']),\n      sqlValueToUtid(this.data.args['utid']),\n    );\n\n    this.slice = await this.maybeLoadSlice(\n      sqlValueToNumber(this.data.args['id']) ??\n        sqlValueToNumber(this.data.args['slice_id']),\n      this.data.ts,\n      this.data.dur,\n      sqlValueToReadableString(this.data.args['table_name']),\n      sqlValueToNumber(this.data.args['track_id']),\n    );\n\n    this.trace.scheduleFullRedraw();\n  }\n\n  render() {\n    if (this.data === undefined) {\n      return m('h2', 'Loading');\n    }\n    const details = dictToTreeNodes({\n      'Name': this.data['name'] as string,\n      'Start time': m(Timestamp, {ts: timeFromSql(this.data['ts'])}),\n      'Duration': m(DurationWidget, {dur: durationFromSql(this.data['dur'])}),\n      'Slice id': `${this.tableName}[${this.eventId}]`,\n    });\n    details.push(this.renderThreadStateInfo());\n    details.push(this.renderSliceInfo());\n\n    const args: {[key: string]: m.Child} = {};\n    for (const key of Object.keys(this.data.args)) {\n      args[key] = sqlValueToReadableString(this.data.args[key]);\n    }\n\n    return m(\n      DetailsShell,\n      {\n        title: 'Slice',\n      },\n      m(\n        GridLayout,\n        m(Section, {title: 'Details'}, m(Tree, details)),\n        m(Section, {title: 'Arguments'}, dictToTree(args)),\n      ),\n    );\n  }\n\n  getTitle(): string {\n    return `Current Selection`;\n  }\n\n  isLoading() {\n    return this.data === undefined;\n  }\n}\n"]}
{"version":3,"file":"custom_sql_table_slice_track.js","sourceRoot":"","sources":["../../../../src/components/tracks/custom_sql_table_slice_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,gDAAkE;AAClE,2DAAyE;AACzE,+DAA2D;AAE3D,kEAAiE;AACjE,0DAAoD;AAEpD,2DAAqE;AACrE,qEAAkE;AAQlE,MAAsB,wBAAyB,SAAQ,mCAGtD;IACoB,SAAS,CAAC;IAE7B,YAAY,KAAY,EAAE,GAAW;QACnC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,4BAA4B,IAAA,0BAAW,EAAC,GAAG,CAAC,EAAE,CAAC;IAClE,CAAC;IAED,UAAU;QACR,OAAO,6BAAS,CAAC;IACnB,CAAC;IAED,UAAU,CAAC,GAAa;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAMD,KAAK,CAAC,MAAM;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACvC,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YACjC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC3B,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,uCAAoB,EAAE,CAAC;QACzC,KAAK,CAAC,GAAG,CACP,MAAM,IAAA,sBAAU,EACd,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,SAAS,EACd,IAAA,sCAA6B,EAAC;YAC5B,OAAO,EAAE,OAAO;YAChB,WAAW,EAAE,MAAM,CAAC,YAAY;YAChC,EAAE,EAAE,IAAI;YACR,GAAG,EAAE,KAAK;YACV,WAAW,EAAE,MAAM,CAAC,WAAW;SAChC,CAAC,CACH,CACF,CAAC;QACF,OAAO,KAAK,CAAC;IACf,CAAC;IAED,YAAY;QACV,OAAO,iBAAiB,IAAI,CAAC,SAAS,EAAE,CAAC;IAC3C,CAAC;IAED,UAAU;QACR,OAAO,IAAI,uBAAa,CAAC;YACvB,GAAG,EAAE,IAAI,CAAC,sBAAsB,EAAE;YAClC,MAAM,EAAE;gBACN,EAAE,EAAE,kBAAG;gBACP,IAAI,EAAE,kBAAG;gBACT,EAAE,EAAE,mBAAI;gBACR,GAAG,EAAE,mBAAI;aACV;SACF,CAAC,CAAC;IACL,CAAC;IAEO,sBAAsB;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACvC,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;QACpB,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;YACjC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC3B,CAAC;QAED,IAAI,KAAK,GAAG,UAAU,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,MAAM,CAAC,YAAY,EAAE,CAAC;QACtE,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;YACvB,KAAK,IAAI,UAAU,MAAM,CAAC,WAAW,EAAE,CAAC;QAC1C,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA3ED,4DA2EC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {generateSqlWithInternalLayout} from '../sql_utils/layout';\nimport {NAMED_ROW, NamedRow, NamedSliceTrack} from './named_slice_track';\nimport {createView} from '../../trace_processor/sql_utils';\nimport {Slice} from '../../public/track';\nimport {AsyncDisposableStack} from '../../base/disposable_stack';\nimport {sqlNameSafe} from '../../base/string_utils';\nimport {Trace} from '../../public/trace';\nimport {Dataset, SourceDataset} from '../../trace_processor/dataset';\nimport {LONG, NUM, STR} from '../../trace_processor/query_result';\n\nexport interface CustomSqlTableDefConfig {\n  sqlTableName: string;\n  columns?: string[];\n  whereClause?: string;\n}\n\nexport abstract class CustomSqlTableSliceTrack extends NamedSliceTrack<\n  Slice,\n  NamedRow\n> {\n  protected readonly tableName;\n\n  constructor(trace: Trace, uri: string) {\n    super(trace, uri);\n    this.tableName = `customsqltableslicetrack_${sqlNameSafe(uri)}`;\n  }\n\n  getRowSpec(): NamedRow {\n    return NAMED_ROW;\n  }\n\n  rowToSlice(row: NamedRow): Slice {\n    return this.rowToSliceBase(row);\n  }\n\n  // TODO(stevegolton): We should just make this return a dataset going forward,\n  // seeing as CustomSqlTableConfig is very similar to a dataset already.\n  abstract getSqlDataSource(): CustomSqlTableDefConfig;\n\n  async onInit() {\n    const config = this.getSqlDataSource();\n    let columns = ['*'];\n    if (config.columns !== undefined) {\n      columns = config.columns;\n    }\n    const trash = new AsyncDisposableStack();\n    trash.use(\n      await createView(\n        this.engine,\n        this.tableName,\n        generateSqlWithInternalLayout({\n          columns: columns,\n          sourceTable: config.sqlTableName,\n          ts: 'ts',\n          dur: 'dur',\n          whereClause: config.whereClause,\n        }),\n      ),\n    );\n    return trash;\n  }\n\n  getSqlSource(): string {\n    return `SELECT * FROM ${this.tableName}`;\n  }\n\n  getDataset(): Dataset {\n    return new SourceDataset({\n      src: this.makeSqlSelectStatement(),\n      schema: {\n        id: NUM,\n        name: STR,\n        ts: LONG,\n        dur: LONG,\n      },\n    });\n  }\n\n  private makeSqlSelectStatement(): string {\n    const config = this.getSqlDataSource();\n    let columns = ['*'];\n    if (config.columns !== undefined) {\n      columns = config.columns;\n    }\n\n    let query = `SELECT ${columns.join(',')} FROM ${config.sqlTableName}`;\n    if (config.whereClause) {\n      query += ` WHERE ${config.whereClause}`;\n    }\n    return query;\n  }\n}\n"]}
{"version":3,"file":"base_slice_track_unittest.js","sourceRoot":"","sources":["../../../../src/components/tracks/base_slice_track_unittest.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEjC,0CAAqC;AACrC,4CAA6C;AAE7C,yDAAwF;AAExF,SAAS,KAAK,CAAC,KAAa,EAAE,QAAgB,EAAE,QAAgB,CAAC;IAC/D,MAAM,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5C,MAAM,KAAK,GAAG,WAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC7C,MAAM,KAAK,GAAG,WAAI,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC;IAC5C,OAAO;QACL,EAAE,EAAE,EAAE;QACN,OAAO;QACP,KAAK;QACL,KAAK;QACL,EAAE,EAAE,OAAO;QACX,GAAG,EAAE,KAAK;QACV,KAAK;QACL,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,EAAE;QACT,QAAQ,EAAE,EAAE;QACZ,WAAW,EAAE,2BAAe;QAC5B,SAAS,EAAE,CAAC;QACZ,aAAa,EAAE,KAAK;KACrB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,GAAG,KAAK,CAAC;AAChB,MAAM,CAAC,GAAG,WAAI,CAAC,OAAO,CAAC;AAEvB,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;IAC/B,MAAM,CAAC,IAAA,gDAAmB,EAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC5D,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7E,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7E,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QACjE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;KACX,CAAC,CAAC;IACH,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAChE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KACV,CAAC,CAAC;IACH,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACnE,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACpE,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7E,MAAM,CACJ,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CACnE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,MAAM,CACJ,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CACjE,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAM,CACJ,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAC3E,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1B,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC3E,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;KACV,CAAC,CAAC;IACH,MAAM,CAAC,IAAA,gDAAmB,EAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAM,CACJ,IAAA,gDAAmB,EACjB;QACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACR,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KACR,EACD,CAAC,CAAC,GAAG,CAAC,EACN,CAAC,CAAC,GAAG,CAAC,CACP,CACF,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;IAChD,MAAM,CACJ,IAAA,gDAAmB,EACjB;QACE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;KACZ,EACD,CAAC,CAAC,GAAG,CAAC,EACN,CAAC,CAAC,GAAG,CAAC,CACP,CACF,CAAC,OAAO,CAAC;QACR,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;KACZ,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;IACxC,MAAM,CACJ,IAAA,gDAAmB,EACjB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EACzD,CAAC,CAAC,GAAG,CAAC,EACN,CAAC,CAAC,GAAG,CAAC,CACP,CACF,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Time} from '../../base/time';\nimport {UNEXPECTED_PINK} from '../colorizer';\nimport {Slice} from '../../public/track';\nimport {filterVisibleSlicesForTesting as filterVisibleSlices} from './base_slice_track';\n\nfunction slice(start: number, duration: number, depth: number = 0): Slice {\n  const startNs = Time.fromRaw(BigInt(start));\n  const durNs = Time.fromRaw(BigInt(duration));\n  const endNs = Time.fromRaw(startNs + durNs);\n  return {\n    id: 42,\n    startNs,\n    endNs,\n    durNs,\n    ts: startNs,\n    dur: durNs,\n    depth,\n    flags: 0,\n    title: '',\n    subTitle: '',\n    colorScheme: UNEXPECTED_PINK,\n    fillRatio: 1,\n    isHighlighted: false,\n  };\n}\n\nconst s = slice;\nconst t = Time.fromRaw;\n\ntest('filterVisibleSlices', () => {\n  expect(filterVisibleSlices([], t(0n), t(100n))).toEqual([]);\n  expect(filterVisibleSlices([s(10, 80)], t(0n), t(100n))).toEqual([s(10, 80)]);\n  expect(filterVisibleSlices([s(0, 20)], t(10n), t(100n))).toEqual([s(0, 20)]);\n  expect(filterVisibleSlices([s(0, 10)], t(10n), t(100n))).toEqual([s(0, 10)]);\n  expect(filterVisibleSlices([s(100, 10)], t(10n), t(100n))).toEqual([\n    s(100, 10),\n  ]);\n  expect(filterVisibleSlices([s(10, 0)], t(10n), t(100n))).toEqual([s(10, 0)]);\n  expect(filterVisibleSlices([s(100, 0)], t(10n), t(100n))).toEqual([\n    s(100, 0),\n  ]);\n  expect(filterVisibleSlices([s(0, 5)], t(10n), t(90n))).toEqual([]);\n  expect(filterVisibleSlices([s(95, 5)], t(10n), t(90n))).toEqual([]);\n  expect(filterVisibleSlices([s(0, 5), s(95, 5)], t(10n), t(90n))).toEqual([]);\n  expect(\n    filterVisibleSlices([s(0, 5), s(50, 0), s(95, 5)], t(10n), t(90n)),\n  ).toEqual([s(50, 0)]);\n  expect(\n    filterVisibleSlices([s(0, 5), s(1, 9), s(6, 3)], t(10n), t(90n)),\n  ).toContainEqual(s(1, 9));\n  expect(\n    filterVisibleSlices([s(0, 5), s(1, 9), s(6, 3), s(50, 0)], t(10n), t(90n)),\n  ).toContainEqual(s(1, 9));\n  expect(filterVisibleSlices([s(85, 10), s(100, 10)], t(10n), t(90n))).toEqual([\n    s(85, 10),\n  ]);\n  expect(filterVisibleSlices([s(0, 100)], t(10n), t(90n))).toEqual([s(0, 100)]);\n  expect(\n    filterVisibleSlices(\n      [\n        s(0, 1),\n        s(1, 1),\n        s(2, 1),\n        s(3, 1),\n        s(4, 1),\n        s(5, 10),\n        s(6, 1),\n        s(7, 1),\n        s(8, 1),\n        s(9, 1),\n      ],\n      t(10n),\n      t(90n),\n    ),\n  ).toContainEqual(s(5, 10));\n});\n\ntest('filterVisibleSlicesOrderByDepthAndTs', () => {\n  expect(\n    filterVisibleSlices(\n      [\n        s(5, 2, 0),\n        s(5, 4, 0),\n        s(5, 6, 0),\n        s(7, 5, 0),\n        s(8, 10, 0),\n        s(4, 1, 1),\n        s(6, 3, 1),\n        s(8, 6, 1),\n        s(6, 1, 2),\n        s(10, 9, 2),\n        s(11, 3, 2),\n      ],\n      t(10n),\n      t(90n),\n    ),\n  ).toEqual([\n    s(5, 6, 0),\n    s(7, 5, 0),\n    s(8, 10, 0),\n    s(8, 6, 1),\n    s(10, 9, 2),\n    s(11, 3, 2),\n  ]);\n});\n\ntest('filterVisibleSlicesOrderByTs', () => {\n  expect(\n    filterVisibleSlices(\n      [s(4, 5), s(4, 3), s(5, 10), s(6, 3), s(7, 2), s(10, 10)],\n      t(10n),\n      t(90n),\n    ),\n  ).toEqual([s(5, 10), s(10, 10)]);\n});\n"]}
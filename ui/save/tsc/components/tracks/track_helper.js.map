{"version":3,"file":"track_helper.js","sourceRoot":"","sources":["../../../../src/components/tracks/track_helper.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,wDAAkD;AAClD,0CAA+D;AAE/D,4DAA6C;AAQ7C,oEAAoE;AACpE,uEAAuE;AACvE,uDAAuD;AACvD,MAAa,eAAe;IAClB,OAAO,CAAsB;IAE7B,KAAK,CAAQ;IAErB,mEAAmE;IACnE,2BAA2B;IACnB,cAAc,CAAW;IACzB,gBAAgB,CAAW;IAEnC,YAAY,OAA4B;QACtC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,eAAQ,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,QAAkB,EAAE,UAAoB;QACxD,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,CAAC;YACjD,2DAA2D;YAC3D,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC/C,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;YAEvB,sDAAsD;YACtD,MAAM,MAAM,GAAG,WAAI,CAAC,OAAO,CAAC,wBAAU,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;YACtE,MAAM,IAAI,GAAG,WAAI,CAAC,OAAO,CAAC,wBAAU,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;YAEjE,IAAI,CAAC,cAAc,GAAG,IAAI,eAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;YACnC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACzB,CAAC;IAED,CAAC,MAAM,CAAC,OAAO,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACzB,CAAC;IAEO,iBAAiB,CAAC,QAAkB,EAAE,UAAoB;QAChE,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YAC/C,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;YAC3C,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,UAAU,KAAK,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACzC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,KAAK,CAAC,QAAQ;QACpB,MAAM,EAAC,KAAK,EAAE,GAAG,EAAC,GAAG,IAAI,CAAC,cAAc,CAAC;QACzC,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC;QACzC,IAAI,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC;QACxD,mBAAG,CAAC,oBAAoB,EAAE,CAAC;IAC7B,CAAC;CACF;AAvED,0CAuEC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath} from '../../base/bigint_math';\nimport {duration, Time, time, TimeSpan} from '../../base/time';\nexport {Store} from '../../base/store';\nimport {raf} from '../../core/raf_scheduler';\n\ntype FetchTimeline<Data> = (\n  start: time,\n  end: time,\n  resolution: duration,\n) => Promise<Data>;\n\n// This helper provides the logic to call |doFetch()| only when more\n// data is needed as the visible window is panned and zoomed about, and\n// includes an FSM to ensure doFetch is not re-entered.\nexport class TimelineFetcher<Data> implements Disposable {\n  private doFetch: FetchTimeline<Data>;\n\n  private data_?: Data;\n\n  // Timespan and resolution of the latest *request*. data_ may cover\n  // a different time window.\n  private latestTimespan: TimeSpan;\n  private latestResolution: duration;\n\n  constructor(doFetch: FetchTimeline<Data>) {\n    this.doFetch = doFetch;\n    this.latestTimespan = TimeSpan.ZERO;\n    this.latestResolution = 0n;\n  }\n\n  async requestData(timespan: TimeSpan, resolution: duration): Promise<void> {\n    if (this.shouldLoadNewData(timespan, resolution)) {\n      // Over request data, one page worth to the left and right.\n      const padded = timespan.pad(timespan.duration);\n      const start = padded.start;\n      const end = padded.end;\n\n      // Quantize up and down to the bounds of |resolution|.\n      const startQ = Time.fromRaw(BigintMath.quantFloor(start, resolution));\n      const endQ = Time.fromRaw(BigintMath.quantCeil(end, resolution));\n\n      this.latestTimespan = new TimeSpan(startQ, endQ);\n      this.latestResolution = resolution;\n      await this.loadData();\n    }\n  }\n\n  get data(): Data | undefined {\n    return this.data_;\n  }\n\n  invalidate() {\n    this.data_ = undefined;\n  }\n\n  [Symbol.dispose]() {\n    this.data_ = undefined;\n  }\n\n  private shouldLoadNewData(timespan: TimeSpan, resolution: duration): boolean {\n    if (this.data_ === undefined) {\n      return true;\n    }\n\n    if (timespan.start < this.latestTimespan.start) {\n      return true;\n    }\n\n    if (timespan.end > this.latestTimespan.end) {\n      return true;\n    }\n\n    if (resolution !== this.latestResolution) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private async loadData(): Promise<void> {\n    const {start, end} = this.latestTimespan;\n    const resolution = this.latestResolution;\n    this.data_ = await this.doFetch(start, end, resolution);\n    raf.scheduleCanvasRedraw();\n  }\n}\n"]}
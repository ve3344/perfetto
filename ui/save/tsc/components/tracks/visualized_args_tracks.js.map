{"version":3,"file":"visualized_args_tracks.js","sourceRoot":"","sources":["../../../../src/components/tracks/visualized_args_tracks.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAWjC,wDAgFC;AAzFD,0CAAuC;AACvC,qEAAuD;AACvD,mEAA4D;AAC5D,sDAAiD;AAEjD,0DAA0D;AAE1D,MAAM,sCAAsC,GAAG,yBAAyB,CAAC;AAElE,KAAK,UAAU,sBAAsB,CAAC,KAAY,EAAE,OAAe;IACxE,MAAM,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IAC1D,MAAM,SAAS,GAAG,8BAA8B,cAAc,QAAQ,CAAC;IAEvE,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;+BACX,SAAS;;uBAEjB,SAAS;;;;;;;;;;;;4BAYJ,OAAO;;;;;;;;;;;;;;eAcpB,SAAS;;KAEnB,CAAC,CAAC;IAEL,MAAM,WAAW,GAAgB,EAAE,CAAC;IACpC,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,kBAAG,EAAE,QAAQ,EAAE,kBAAG,EAAC,CAAC,CAAC;IACtD,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;QAC3B,MAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;QAE7B,MAAM,GAAG,GAAG,GAAG,sCAAsC,IAAI,IAAA,aAAM,GAAE,EAAE,CAAC;QACpE,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC;YACzB,GAAG;YACH,KAAK,EAAE,OAAO;YACd,KAAK,EAAE,CAAC,KAAK,CAAC;YACd,KAAK,EAAE,IAAI,2CAAmB,CAAC;gBAC7B,KAAK;gBACL,GAAG;gBACH,OAAO;gBACP,QAAQ;gBACR,OAAO;gBACP,OAAO,EAAE,GAAG,EAAE;oBACZ,qCAAqC;oBACrC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvD,CAAC;aACF,CAAC;SACH,CAAC,CAAC;QAEH,4EAA4E;QAC5E,wBAAwB;QACxB,MAAM,gBAAgB,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;YACrE,IAAI,CAAC,SAAS,CAAC,GAAG;gBAAE,OAAO,KAAK,CAAC;YACjC,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YAC7D,OAAO,CACL,eAAe;gBACf,eAAe,CAAC,IAAI,EAAE,IAAI,KAAK,8BAAgB;gBAC/C,eAAe,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC,CAClD,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,gBAAgB,EAAE,MAAM,CAAC;QAC7C,IAAI,WAAW,EAAE,CAAC;YAChB,MAAM,QAAQ,GAAG,IAAI,qBAAS,CAAC,EAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;YACtD,WAAW,CAAC,cAAc,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YACvD,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {uuidv4} from '../../base/uuid';\nimport {NUM} from '../../trace_processor/query_result';\nimport {VisualizedArgsTrack} from './visualized_args_track';\nimport {TrackNode} from '../../public/workspace';\nimport {Trace} from '../../public/trace';\nimport {SLICE_TRACK_KIND} from '../../public/track_kinds';\n\nconst VISUALIZED_ARGS_SLICE_TRACK_URI_PREFIX = 'perfetto.VisualizedArgs';\n\nexport async function addVisualizedArgTracks(trace: Trace, argName: string) {\n  const escapedArgName = argName.replace(/[^a-zA-Z]/g, '_');\n  const tableName = `__arg_visualisation_helper_${escapedArgName}_slice`;\n\n  const result = await trace.engine.query(`\n        drop table if exists ${tableName};\n\n        create table ${tableName} as\n        with slice_with_arg as (\n          select\n            slice.id,\n            slice.track_id,\n            slice.ts,\n            slice.dur,\n            slice.thread_dur,\n            NULL as cat,\n            args.display_value as name\n          from slice\n          join args using (arg_set_id)\n          where args.key='${argName}'\n        )\n        select\n          *,\n          (select count()\n           from ancestor_slice(s1.id) s2\n           join slice_with_arg s3 on s2.id=s3.id\n          ) as depth\n        from slice_with_arg s1\n        order by id;\n\n        select\n          track_id as trackId,\n          max(depth) as maxDepth\n        from ${tableName}\n        group by track_id;\n    `);\n\n  const addedTracks: TrackNode[] = [];\n  const it = result.iter({trackId: NUM, maxDepth: NUM});\n  for (; it.valid(); it.next()) {\n    const trackId = it.trackId;\n    const maxDepth = it.maxDepth;\n\n    const uri = `${VISUALIZED_ARGS_SLICE_TRACK_URI_PREFIX}#${uuidv4()}`;\n    trace.tracks.registerTrack({\n      uri,\n      title: argName,\n      chips: ['arg'],\n      track: new VisualizedArgsTrack({\n        trace,\n        uri,\n        trackId,\n        maxDepth,\n        argName,\n        onClose: () => {\n          // Remove all added for this argument\n          addedTracks.forEach((t) => t.parent?.removeChild(t));\n        },\n      }),\n    });\n\n    // Find the thread slice track that corresponds with this trackID and insert\n    // this track before it.\n    const threadSliceTrack = trace.workspace.flatTracks.find((trackNode) => {\n      if (!trackNode.uri) return false;\n      const trackDescriptor = trace.tracks.getTrack(trackNode.uri);\n      return (\n        trackDescriptor &&\n        trackDescriptor.tags?.kind === SLICE_TRACK_KIND &&\n        trackDescriptor.tags?.trackIds?.includes(trackId)\n      );\n    });\n\n    const parentGroup = threadSliceTrack?.parent;\n    if (parentGroup) {\n      const newTrack = new TrackNode({uri, title: argName});\n      parentGroup.addChildBefore(newTrack, threadSliceTrack);\n      addedTracks.push(newTrack);\n    }\n  }\n}\n"]}
{"version":3,"file":"debug_tracks.js","sourceRoot":"","sources":["../../../../src/components/tracks/debug_tracks.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  matchesSqlValue,\n  sqlValueToReadableString,\n} from '../../trace_processor/sql_utils';\nimport {TrackNode} from '../../public/workspace';\nimport {Trace} from '../../public/trace';\nimport {\n  createQuerySliceTrack,\n  SliceColumnMapping,\n  SqlDataSource,\n} from './query_slice_track';\nimport {\n  CounterColumnMapping,\n  createQueryCounterTrack,\n} from './query_counter_track';\n\nlet trackCounter = 0; // For reproducible ids.\n\nexport async function addPivotedTracks(\n  trace: Trace,\n  data: SqlDataSource,\n  trackName: string,\n  pivotColumn: string,\n  createTrack: (\n    trace: Trace,\n    data: SqlDataSource,\n    trackName: string,\n  ) => Promise<void>,\n) {\n  const iter = (\n    await trace.engine.query(`\n    with all_vals as (${data.sqlSource})\n    select DISTINCT ${pivotColumn} from all_vals\n    order by ${pivotColumn}\n  `)\n  ).iter({});\n\n  for (; iter.valid(); iter.next()) {\n    await createTrack(\n      trace,\n      {\n        sqlSource: `select * from\n        (${data.sqlSource})\n        where ${pivotColumn} ${matchesSqlValue(iter.get(pivotColumn))}`,\n      },\n      `${trackName.trim() || 'Pivot Track'}: ${sqlValueToReadableString(iter.get(pivotColumn))}`,\n    );\n  }\n}\n\nexport interface DebugSliceTrackArgs {\n  readonly trace: Trace;\n  readonly data: SqlDataSource;\n  readonly title?: string;\n  readonly columns?: Partial<SliceColumnMapping>;\n  readonly argColumns?: string[];\n}\n\n/**\n * Adds a new debug slice track to the workspace.\n *\n * See {@link createQuerySliceTrack} for details about the configuration args.\n *\n * A debug slice track is a track based on a query which is:\n * - Based on a query.\n * - Uses automatic slice layout.\n * - Automatically added to the top of the current workspace.\n * - Pinned.\n * - Has a close button.\n */\nexport async function addDebugSliceTrack(args: DebugSliceTrackArgs) {\n  const trace = args.trace;\n  const cnt = trackCounter++;\n  const uri = `debugSliceTrack/${cnt}`;\n  const title = args.title?.trim() || `Debug Slice Track ${cnt}`;\n\n  // Create & register the track renderer\n  const track = await createQuerySliceTrack({...args, uri});\n  trace.tracks.registerTrack({uri, title, track});\n\n  // Create the track node and pin it\n  const trackNode = new TrackNode({uri, title, removable: true});\n  trace.workspace.pinnedTracksNode.addChildLast(trackNode);\n}\n\nexport interface DebugCounterTrackArgs {\n  readonly trace: Trace;\n  readonly data: SqlDataSource;\n  readonly title?: string;\n  readonly columns?: Partial<CounterColumnMapping>;\n}\n\n/**\n * Adds a new debug counter track to the workspace.\n *\n * See {@link createQueryCounterTrack} for details about the configuration args.\n *\n * A debug counter track is a track based on a query which is:\n * - Based on a query.\n * - Automatically added to the top of the current workspace.\n * - Pinned.\n * - Has a close button.\n */\nexport async function addDebugCounterTrack(args: DebugCounterTrackArgs) {\n  const trace = args.trace;\n  const cnt = trackCounter++;\n  const uri = `debugCounterTrack/${cnt}`;\n  const title = args.title?.trim() || `Debug Counter Track ${cnt}`;\n\n  // Create & register the track renderer\n  const track = await createQueryCounterTrack({...args, uri});\n  trace.tracks.registerTrack({uri, title, track});\n\n  // Create the track node and pin it\n  const trackNode = new TrackNode({uri, title, removable: true});\n  trace.workspace.pinnedTracksNode.addChildLast(trackNode);\n}\n"]}
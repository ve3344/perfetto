{"version":3,"file":"thread_slice_track.js","sourceRoot":"","sources":["../../../../src/components/tracks/thread_slice_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,wDAA4D;AAC5D,sDAA4C;AAC5C,2DAA+D;AAC/D,iDAAiE;AACjE,qEAA6D;AAG7D,kFAA4E;AAC5E,sDAAgD;AAChD,gDAAoD;AAGvC,QAAA,gBAAgB,GAAG;IAC9B,0CAA0C;IAC1C,GAAG,6BAAS;IAEZ,2BAA2B;IAC3B,SAAS,EAAE,wBAAS;CACrB,CAAC;AAGF,MAAa,gBAAiB,SAAQ,mCAAsC;IAIvD;IAEA;IALnB,YACE,KAAY,EACZ,GAAW,EACM,OAAe,EAChC,QAAgB,EACC,YAAoB,OAAO;QAE5C,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAJD,YAAO,GAAP,OAAO,CAAQ;QAEf,cAAS,GAAT,SAAS,CAAkB;QAG5C,IAAI,CAAC,WAAW,GAAG;YACjB,GAAG,gDAAiC;YACpC,UAAU,EAAE,QAAQ;SACrB,CAAC;IACJ,CAAC;IAED,iDAAiD;IACvC,UAAU;QAClB,OAAO,wBAAgB,CAAC;IAC1B,CAAC;IAED,YAAY;QACV,OAAO;;;;;;;;aAQE,IAAI,CAAC,SAAS;yBACF,IAAI,CAAC,OAAO;KAChC,CAAC;IACJ,CAAC;IAED,gDAAgD;IAChD,UAAU,CAAC,GAAmB;QAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAE5C,IAAI,GAAG,CAAC,GAAG,GAAG,EAAE,IAAI,GAAG,CAAC,SAAS,KAAK,IAAI,EAAE,CAAC;YAC3C,MAAM,SAAS,GAAG,IAAA,kBAAK,EAAC,wBAAM,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACpE,OAAO,EAAC,GAAG,UAAU,EAAE,SAAS,EAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,OAAO,UAAU,CAAC;QACpB,CAAC;IACH,CAAC;IAED,eAAe,CAAC,MAAe;QAC7B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,GAAG,KAAK,KAAK,IAAI,CAAC,YAAY,CAAC;QACpD,CAAC;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,EAAU;QAEV,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW;YAAE,OAAO,SAAS,CAAC;QACnC,OAAO;YACL,GAAG,WAAW;YACd,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;IAEQ,YAAY;QACnB,yEAAyE;QACzE,wEAAwE;QACxE,mEAAmE;QACnE,OAAO,IAAI,kDAAuB,CAAC,IAAA,0BAAgB,EAAC,IAAI,CAAC,KAAK,EAAE,sBAAS,CAAC,CAAC,CAAC;IAC9E,CAAC;CACF;AArED,4CAqEC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath as BIMath} from '../../base/bigint_math';\nimport {clamp} from '../../base/math_utils';\nimport {NAMED_ROW, NamedSliceTrack} from './named_slice_track';\nimport {SLICE_LAYOUT_FIT_CONTENT_DEFAULTS} from './slice_layout';\nimport {LONG_NULL} from '../../trace_processor/query_result';\nimport {Slice} from '../../public/track';\nimport {TrackEventDetails} from '../../public/selection';\nimport {ThreadSliceDetailsPanel} from '../details/thread_slice_details_tab';\nimport {TraceImpl} from '../../core/trace_impl';\nimport {assertIsInstance} from '../../base/logging';\nimport {Trace} from '../../public/trace';\n\nexport const THREAD_SLICE_ROW = {\n  // Base columns (tsq, ts, dur, id, depth).\n  ...NAMED_ROW,\n\n  // Thread-specific columns.\n  threadDur: LONG_NULL,\n};\nexport type ThreadSliceRow = typeof THREAD_SLICE_ROW;\n\nexport class ThreadSliceTrack extends NamedSliceTrack<Slice, ThreadSliceRow> {\n  constructor(\n    trace: Trace,\n    uri: string,\n    private readonly trackId: number,\n    maxDepth: number,\n    private readonly tableName: string = 'slice',\n  ) {\n    super(trace, uri);\n    this.sliceLayout = {\n      ...SLICE_LAYOUT_FIT_CONTENT_DEFAULTS,\n      depthGuess: maxDepth,\n    };\n  }\n\n  // This is used by the base class to call iter().\n  protected getRowSpec() {\n    return THREAD_SLICE_ROW;\n  }\n\n  getSqlSource(): string {\n    return `\n      select\n        ts,\n        dur,\n        id,\n        depth,\n        ifnull(name, '') as name,\n        thread_dur as threadDur\n      from ${this.tableName}\n      where track_id = ${this.trackId}\n    `;\n  }\n\n  // Converts a SQL result row to an \"Impl\" Slice.\n  rowToSlice(row: ThreadSliceRow): Slice {\n    const namedSlice = this.rowToSliceBase(row);\n\n    if (row.dur > 0n && row.threadDur !== null) {\n      const fillRatio = clamp(BIMath.ratio(row.threadDur, row.dur), 0, 1);\n      return {...namedSlice, fillRatio};\n    } else {\n      return namedSlice;\n    }\n  }\n\n  onUpdatedSlices(slices: Slice[]) {\n    for (const slice of slices) {\n      slice.isHighlighted = slice === this.hoveredSlice;\n    }\n  }\n\n  async getSelectionDetails(\n    id: number,\n  ): Promise<TrackEventDetails | undefined> {\n    const baseDetails = await super.getSelectionDetails(id);\n    if (!baseDetails) return undefined;\n    return {\n      ...baseDetails,\n      tableName: this.tableName,\n    };\n  }\n\n  override detailsPanel() {\n    // Rationale for the assertIsInstance: ThreadSliceDetailsPanel requires a\n    // TraceImpl (because of flows) but here we must take a Trace interface,\n    // because this class is exposed to plugins (which see only Trace).\n    return new ThreadSliceDetailsPanel(assertIsInstance(this.trace, TraceImpl));\n  }\n}\n"]}
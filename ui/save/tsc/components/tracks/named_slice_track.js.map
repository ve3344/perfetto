{"version":3,"file":"named_slice_track.js","sourceRoot":"","sources":["../../../../src/components/tracks/named_slice_track.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,4CAA8C;AAI9C,qEAA4E;AAC5E,yDAM4B;AAC5B,kFAA4E;AAC5E,sDAAgD;AAChD,gDAAoD;AACpD,2DAAqE;AACrE,8CAA6C;AAGhC,QAAA,SAAS,GAAG;IACvB,0CAA0C;IAC1C,GAAG,2BAAQ;IAEX,yBAAyB;IACzB,IAAI,EAAE,uBAAQ;CACf,CAAC;AAGF,MAAsB,eAGpB,SAAQ,iCAAkC;IAC1C,YAAY,KAAY,EAAE,GAAW;QACnC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,gDAAgD;IACtC,cAAc,CAAC,GAAY;QACnC,MAAM,SAAS,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC5C,iDAAiD;QACjD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;QAC5B,MAAM,WAAW,GAAG,IAAA,4BAAgB,EAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,EAAC,GAAG,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,WAAW,EAAC,CAAC;IAClD,CAAC;IAED,WAAW,CAAC,IAAgC;QAC1C,MAAM,EAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QACvC,IAAI,QAAQ,CAAC;QACb,IAAI,KAAK,GAAG,yCAAsB,EAAE,CAAC;YACnC,QAAQ,GAAG,YAAY,CAAC;QAC1B,CAAC;aAAM,IAAI,KAAK,GAAG,sCAAmB,EAAE,CAAC;YACvC,QAAQ,GAAG,SAAS,CAAC;QACvB,CAAC;aAAM,CAAC;YACN,QAAQ,GAAG,IAAA,2BAAc,EAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,CAAC,OAAO,GAAG,CAAC,GAAG,KAAK,OAAO,QAAQ,GAAG,CAAC,CAAC;IAC9C,CAAC;IAED,YAAY,CAAC,IAAyB;QACpC,yEAAyE;QACzE,wEAAwE;QACxE,mEAAmE;QACnE,OAAO,IAAI,kDAAuB,CAAC,IAAA,0BAAgB,EAAC,IAAI,CAAC,KAAK,EAAE,sBAAS,CAAC,CAAC,CAAC;IAC9E,CAAC;IAEQ,UAAU;QACjB,OAAO,IAAI,uBAAa,CAAC;YACvB,GAAG,EAAE,IAAI,CAAC,YAAY,EAAE;YACxB,MAAM,EAAE;gBACN,EAAE,EAAE,kBAAG;gBACP,IAAI,EAAE,kBAAG;gBACT,EAAE,EAAE,mBAAI;gBACR,GAAG,EAAE,mBAAI;aACV;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAhDD,0CAgDC","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getColorForSlice} from '../colorizer';\nimport {TrackEventDetailsPanel} from '../../public/details_panel';\nimport {TrackEventSelection} from '../../public/selection';\nimport {Slice} from '../../public/track';\nimport {LONG, NUM, STR, STR_NULL} from '../../trace_processor/query_result';\nimport {\n  BASE_ROW,\n  BaseSliceTrack,\n  OnSliceOverArgs,\n  SLICE_FLAGS_INCOMPLETE,\n  SLICE_FLAGS_INSTANT,\n} from './base_slice_track';\nimport {ThreadSliceDetailsPanel} from '../details/thread_slice_details_tab';\nimport {TraceImpl} from '../../core/trace_impl';\nimport {assertIsInstance} from '../../base/logging';\nimport {SourceDataset, Dataset} from '../../trace_processor/dataset';\nimport {formatDuration} from '../time_utils';\nimport {Trace} from '../../public/trace';\n\nexport const NAMED_ROW = {\n  // Base columns (tsq, ts, dur, id, depth).\n  ...BASE_ROW,\n\n  // Impl-specific columns.\n  name: STR_NULL,\n};\nexport type NamedRow = typeof NAMED_ROW;\n\nexport abstract class NamedSliceTrack<\n  SliceType extends Slice = Slice,\n  RowType extends NamedRow = NamedRow,\n> extends BaseSliceTrack<SliceType, RowType> {\n  constructor(trace: Trace, uri: string) {\n    super(trace, uri);\n  }\n\n  // Converts a SQL result row to an \"Impl\" Slice.\n  protected rowToSliceBase(row: RowType): Slice {\n    const baseSlice = super.rowToSliceBase(row);\n    // Ignore PIDs or numeric arguments when hashing.\n    const name = row.name ?? '';\n    const colorScheme = getColorForSlice(name);\n    return {...baseSlice, title: name, colorScheme};\n  }\n\n  onSliceOver(args: OnSliceOverArgs<SliceType>) {\n    const {title, dur, flags} = args.slice;\n    let duration;\n    if (flags & SLICE_FLAGS_INCOMPLETE) {\n      duration = 'Incomplete';\n    } else if (flags & SLICE_FLAGS_INSTANT) {\n      duration = 'Instant';\n    } else {\n      duration = formatDuration(this.trace, dur);\n    }\n    args.tooltip = [`${title} - [${duration}]`];\n  }\n\n  detailsPanel(_sel: TrackEventSelection): TrackEventDetailsPanel {\n    // Rationale for the assertIsInstance: ThreadSliceDetailsPanel requires a\n    // TraceImpl (because of flows) but here we must take a Trace interface,\n    // because this class is exposed to plugins (which see only Trace).\n    return new ThreadSliceDetailsPanel(assertIsInstance(this.trace, TraceImpl));\n  }\n\n  override getDataset(): Dataset | undefined {\n    return new SourceDataset({\n      src: this.getSqlSource(),\n      schema: {\n        id: NUM,\n        name: STR,\n        ts: LONG,\n        dur: LONG,\n      },\n    });\n  }\n}\n"]}
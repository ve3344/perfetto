{"version":3,"file":"plugins_page.js","sourceRoot":"","sources":["../../../../src/core_plugins/flags_page/plugins_page.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Button} from '../../widgets/button';\nimport {exists} from '../../base/utils';\nimport {defaultPlugins} from '../../core/default_plugins';\nimport {Intent} from '../../widgets/common';\nimport {PageAttrs} from '../../public/page';\nimport {AppImpl} from '../../core/app_impl';\nimport {PluginWrapper} from '../../core/plugin_manager';\nimport {raf} from '../../core/raf_scheduler';\n\n// This flag indicated whether we need to restart the UI to apply plugin\n// changes. It is purposely a global as we want it to outlive the Mithril\n// component, and it'll be reset we restart anyway.\nlet needsRestart = false;\n\nexport class PluginsPage implements m.ClassComponent<PageAttrs> {\n  view() {\n    const pluginManager = AppImpl.instance.plugins;\n    const registeredPlugins = pluginManager.getAllPlugins();\n    return m(\n      '.pf-plugins-page',\n      m('h1', 'Plugins'),\n      needsRestart &&\n        m(\n          'h3.restart_needed',\n          'Some plugins have been disabled. ' +\n            'Please reload your page to apply the changes.',\n        ),\n      m(\n        '.pf-plugins-topbar',\n        m(Button, {\n          intent: Intent.Primary,\n          label: 'Disable All',\n          onclick: async () => {\n            for (const plugin of registeredPlugins) {\n              plugin.enableFlag.set(false);\n            }\n            needsRestart = true;\n            raf.scheduleFullRedraw();\n          },\n        }),\n        m(Button, {\n          intent: Intent.Primary,\n          label: 'Enable All',\n          onclick: async () => {\n            for (const plugin of registeredPlugins) {\n              plugin.enableFlag.set(true);\n            }\n            needsRestart = true;\n            raf.scheduleFullRedraw();\n          },\n        }),\n        m(Button, {\n          intent: Intent.Primary,\n          label: 'Restore Defaults',\n          onclick: async () => {\n            for (const plugin of registeredPlugins) {\n              plugin.enableFlag.reset();\n            }\n            needsRestart = true;\n            raf.scheduleFullRedraw();\n          },\n        }),\n      ),\n      m(\n        '.pf-plugins-grid',\n        m('span', 'Plugin'),\n        m('span', 'Default?'),\n        m('span', 'Enabled?'),\n        m('span', 'Active?'),\n        m('span', 'Control'),\n        m('span', 'Load Time'),\n        registeredPlugins.map((plugin) => this.renderPluginRow(plugin)),\n      ),\n    );\n  }\n\n  private renderPluginRow(plugin: PluginWrapper): m.Children {\n    const pluginId = plugin.desc.id;\n    const isDefault = defaultPlugins.includes(pluginId);\n    const isActive = plugin.active;\n    const isEnabled = plugin.enableFlag.get();\n    const loadTime = plugin.traceContext?.loadTimeMs;\n    return [\n      m('span', pluginId),\n      m('span', isDefault ? 'Yes' : 'No'),\n      isEnabled\n        ? m('.pf-tag.pf-active', 'Enabled')\n        : m('.pf-tag.pf-inactive', 'Disabled'),\n      isActive\n        ? m('.pf-tag.pf-active', 'Active')\n        : m('.pf-tag.pf-inactive', 'Inactive'),\n      m(Button, {\n        label: isEnabled ? 'Disable' : 'Enable',\n        intent: Intent.Primary,\n        onclick: () => {\n          if (isEnabled) {\n            plugin.enableFlag.set(false);\n          } else {\n            plugin.enableFlag.set(true);\n          }\n          needsRestart = true;\n          raf.scheduleFullRedraw();\n        },\n      }),\n      exists(loadTime)\n        ? m('span', `${loadTime.toFixed(1)} ms`)\n        : m('span', `-`),\n    ];\n  }\n}\n"]}
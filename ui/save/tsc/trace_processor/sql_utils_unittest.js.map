{"version":3,"file":"sql_utils_unittest.js","sourceRoot":"","sources":["../../../src/trace_processor/sql_utils_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {constraintsToQueryPrefix, constraintsToQuerySuffix} from './sql_utils';\n\n// Clean up repeated whitespaces to allow for easier testing.\nfunction normalize(s: string): string {\n  return s.replace(/\\s+/g, ' ');\n}\n\ntest('constraintsToQueryPrefix: empty', () => {\n  expect(normalize(constraintsToQueryPrefix({}))).toEqual('');\n});\n\ntest('constraintsToQueryPrefix: one CTE', () => {\n  expect(\n    normalize(\n      constraintsToQueryPrefix({\n        commonTableExpressions: {foo: 'select * from bar'},\n      }),\n    ),\n  ).toEqual('WITH foo AS (select * from bar)');\n});\n\ntest('constraintsToQueryPrefix: one CTE', () => {\n  expect(\n    normalize(\n      constraintsToQueryPrefix({\n        commonTableExpressions: {\n          foo1: 'select * from bar1',\n          foo2: 'select * from bar2',\n        },\n      }),\n    ),\n  ).toEqual('WITH foo1 AS (select * from bar1), foo2 AS (select * from bar2)');\n});\n\ntest('constraintsToQuerySuffix: where', () => {\n  expect(\n    normalize(\n      constraintsToQuerySuffix({\n        filters: ['ts > 1000', 'dur != 0'],\n      }),\n    ),\n  ).toEqual('WHERE ts > 1000 and dur != 0');\n});\n\ntest('constraintsToQuerySuffix: order by', () => {\n  expect(\n    normalize(\n      constraintsToQuerySuffix({\n        orderBy: [\n          {fieldName: 'name'},\n          {fieldName: 'count', direction: 'DESC'},\n          undefined,\n          'value',\n        ],\n      }),\n    ),\n  ).toEqual('ORDER BY name, count DESC, value');\n});\n\ntest('constraintsToQuerySuffix: limit', () => {\n  expect(normalize(constraintsToQuerySuffix({limit: 3}))).toEqual('LIMIT 3');\n});\n\ntest('constraintsToQuerySuffix: group by', () => {\n  expect(\n    normalize(\n      constraintsToQuerySuffix({\n        groupBy: ['foo', undefined, 'bar'],\n      }),\n    ),\n  ).toEqual('GROUP BY foo, bar');\n});\n\ntest('constraintsToQuerySuffix: all', () => {\n  expect(\n    normalize(\n      constraintsToQuerySuffix({\n        filters: ['id != 1'],\n        groupBy: ['track_id'],\n        orderBy: [{fieldName: 'ts'}],\n        limit: 1,\n      }),\n    ),\n  ).toEqual('WHERE id != 1 GROUP BY track_id ORDER BY ts LIMIT 1');\n});\n\ntest('constraintsToQuerySuffix: all undefined', () => {\n  expect(\n    normalize(\n      constraintsToQuerySuffix({\n        filters: [undefined],\n        orderBy: [undefined, undefined],\n        groupBy: [undefined, undefined],\n      }),\n    ),\n  ).toEqual('');\n});\n"]}
{"version":3,"file":"sql_utils.js","sourceRoot":"","sources":["../../../src/trace_processor/sql_utils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {SortDirection} from '../base/comparison_utils';\nimport {isString} from '../base/object_utils';\nimport {sqliteString} from '../base/string_utils';\nimport {Engine} from './engine';\nimport {NUM, SqlValue} from './query_result';\n\nexport interface OrderClause {\n  fieldName: string;\n  direction?: SortDirection;\n}\n\nexport type CommonTableExpressions = {\n  [key: string]: string | undefined;\n};\n\n// Interface for defining constraints which can be passed to a SQL query.\nexport interface SQLConstraints {\n  commonTableExpressions?: CommonTableExpressions;\n  filters?: (undefined | string)[];\n  joins?: (undefined | string)[];\n  orderBy?: (undefined | string | OrderClause)[];\n  groupBy?: (undefined | string)[];\n  limit?: number;\n}\n\nfunction isDefined<T>(t: T | undefined): t is T {\n  return t !== undefined;\n}\n\nexport function constraintsToQueryPrefix(c: SQLConstraints): string {\n  const ctes = Object.entries(c.commonTableExpressions ?? {}).filter(\n    ([_, value]) => isDefined(value),\n  );\n  if (ctes.length === 0) return '';\n  const cteStatements = ctes.map(([name, query]) => `${name} AS (${query})`);\n  return `WITH ${cteStatements.join(',\\n')}`;\n}\n\n// Formatting given constraints into a string which can be injected into\n// SQL query.\nexport function constraintsToQuerySuffix(c: SQLConstraints): string {\n  const result: string[] = [];\n\n  const joins = (c.joins ?? []).filter(isDefined);\n  if (joins.length > 0) {\n    result.push(...joins);\n  }\n  const filters = (c.filters ?? []).filter(isDefined);\n  if (filters.length > 0) {\n    result.push(`WHERE ${filters.join(' and ')}`);\n  }\n  const groupBy = (c.groupBy ?? []).filter(isDefined);\n  if (groupBy.length > 0) {\n    const groups = groupBy.join(', ');\n    result.push(`GROUP BY ${groups}`);\n  }\n  const orderBy = (c.orderBy ?? []).filter(isDefined);\n  if (orderBy.length > 0) {\n    const orderBys = orderBy.map((clause) => {\n      if (isString(clause)) {\n        return clause;\n      } else {\n        const direction = clause.direction ? ` ${clause.direction}` : '';\n        return `${clause.fieldName}${direction}`;\n      }\n    });\n    result.push(`ORDER BY ${orderBys.join(', ')}`);\n  }\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n  if (c.limit) {\n    result.push(`LIMIT ${c.limit}`);\n  }\n  return result.join('\\n');\n}\n\n// Trace Processor returns number | null for NUM_NULL, while most of the UI\n// code uses number | undefined. This functions provides a short-hand\n// conversion.\n// TODO(altimin): Support NUM_UNDEFINED as a first-class citizen.\nexport function fromNumNull(n: number | null): number | undefined {\n  if (n === null) {\n    return undefined;\n  }\n  return n;\n}\n\n// Given a SqlValue, return a string representation of it to display to the\n// user.\nexport function sqlValueToReadableString(val: SqlValue): string;\nexport function sqlValueToReadableString(val?: SqlValue): string | undefined;\nexport function sqlValueToReadableString(val?: SqlValue): string | undefined {\n  if (val === undefined) return undefined;\n  if (val instanceof Uint8Array) {\n    return `<blob length=${val.length}>`;\n  }\n  if (val === null) {\n    return 'NULL';\n  }\n  return val.toString();\n}\n\n// Given a SqlValue, return a string representation (properly escaped, if\n// necessary) of it to be used in a SQL query.\nexport function sqlValueToSqliteString(val: SqlValue): string {\n  if (val instanceof Uint8Array) {\n    throw new Error(\"Can't pass blob back to trace processor as value\");\n  }\n  if (val === null) {\n    return 'NULL';\n  }\n  if (typeof val === 'string') {\n    return sqliteString(val);\n  }\n  return `${val}`;\n}\n\n// Return a SQL predicate that can be used to compare with the given `value`,\n// correctly handling NULLs.\nexport function matchesSqlValue(value: SqlValue): string {\n  if (value === null) {\n    return 'IS NULL';\n  }\n  return `= ${sqlValueToSqliteString(value)}`;\n}\n\nexport async function getTableRowCount(\n  engine: Engine,\n  tableName: string,\n): Promise<number | undefined> {\n  const result = await engine.query(\n    `SELECT COUNT() as count FROM ${tableName}`,\n  );\n  if (result.numRows() === 0) {\n    return undefined;\n  }\n  return result.firstRow({\n    count: NUM,\n  }).count;\n}\n\nexport {SqlValue};\n\n/**\n * Asynchronously creates a 'perfetto' table using the given engine and returns\n * an disposable object to handle its cleanup.\n *\n * @param engine - The database engine to execute the query.\n * @param tableName - The name of the table to be created.\n * @param expression - The SQL expression to define the table.\n * @returns An AsyncDisposable which drops the created table when disposed.\n *\n * @example\n * const engine = new Engine();\n * const tableName = 'my_perfetto_table';\n * const expression = 'SELECT * FROM source_table';\n *\n * const table = await createPerfettoTable(engine, tableName, expression);\n *\n * // Use the table...\n *\n * // Cleanup the table when done\n * await table[Symbol.asyncDispose]();\n */\nexport async function createPerfettoTable(\n  engine: Engine,\n  tableName: string,\n  expression: string,\n): Promise<AsyncDisposable> {\n  await engine.query(`CREATE PERFETTO TABLE ${tableName} AS ${expression}`);\n  return {\n    [Symbol.asyncDispose]: async () => {\n      await engine.tryQuery(`DROP TABLE IF EXISTS ${tableName}`);\n    },\n  };\n}\n\n/**\n * Asynchronously creates a SQL view using the given engine and returns an\n * disposable object to handle its cleanup.\n *\n * @param engine - The database engine to execute the query.\n * @param viewName - The name of the view to be created.\n * @param as - The SQL expression to define the table.\n * @returns An AsyncDisposable which drops the created table when disposed.\n *\n * @example\n * const engine = new Engine();\n * const viewName = 'my_view';\n * const expression = 'SELECT * FROM source_table';\n *\n * const view = await createView(engine, viewName, expression);\n *\n * // Use the view...\n *\n * // Cleanup the view when done\n * await view[Symbol.asyncDispose]();\n */\nexport async function createView(\n  engine: Engine,\n  viewName: string,\n  as: string,\n): Promise<AsyncDisposable> {\n  await engine.query(`CREATE VIEW ${viewName} AS ${as}`);\n  return {\n    [Symbol.asyncDispose]: async () => {\n      await engine.tryQuery(`DROP VIEW IF EXISTS ${viewName}`);\n    },\n  };\n}\n\nexport async function createVirtualTable(\n  engine: Engine,\n  tableName: string,\n  using: string,\n): Promise<AsyncDisposable> {\n  await engine.query(`CREATE VIRTUAL TABLE ${tableName} USING ${using}`);\n  return {\n    [Symbol.asyncDispose]: async () => {\n      await engine.tryQuery(`DROP TABLE IF EXISTS ${tableName}`);\n    },\n  };\n}\n\n/**\n * Asynchronously creates a 'perfetto' index using the given engine and returns\n * an disposable object to handle its cleanup.\n *\n * @param engine - The database engine to execute the query.\n * @param indexName - The name of the index to be created.\n * @param expression - The SQL expression containing the table and columns.\n * @returns An AsyncDisposable which drops the created table when disposed.\n *\n * @example\n * const engine = new Engine();\n * const indexName = 'my_perfetto_index';\n * const expression = 'my_perfetto_table(foo)';\n *\n * const index = await createPerfettoIndex(engine, indexName, expression);\n *\n * // Use the index...\n *\n * // Cleanup the index when done\n * await index[Symbol.asyncDispose]();\n */\nexport async function createPerfettoIndex(\n  engine: Engine,\n  indexName: string,\n  expression: string,\n): Promise<AsyncDisposable> {\n  await engine.query(`create perfetto index ${indexName} on ${expression}`);\n  return {\n    [Symbol.asyncDispose]: async () => {\n      await engine.tryQuery(`drop perfetto index ${indexName}`);\n    },\n  };\n}\n"]}
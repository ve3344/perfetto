{"version":3,"file":"dataset_unittest.js","sourceRoot":"","sources":["../../../src/trace_processor/dataset_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {SourceDataset, UnionDataset} from './dataset';\nimport {LONG, NUM, STR} from './query_result';\n\ntest('get query for simple dataset', () => {\n  const dataset = new SourceDataset({\n    src: 'slice',\n    schema: {id: NUM},\n  });\n\n  expect(dataset.query()).toEqual('select id from (slice)');\n});\n\ntest(\"get query for simple dataset with 'eq' filter\", () => {\n  const dataset = new SourceDataset({\n    src: 'slice',\n    schema: {id: NUM},\n    filter: {\n      col: 'id',\n      eq: 123,\n    },\n  });\n\n  expect(dataset.query()).toEqual('select id from (slice) where id = 123');\n});\n\ntest(\"get query for simple dataset with an 'in' filter\", () => {\n  const dataset = new SourceDataset({\n    src: 'slice',\n    schema: {id: NUM},\n    filter: {\n      col: 'id',\n      in: [123, 456],\n    },\n  });\n\n  expect(dataset.query()).toEqual(\n    'select id from (slice) where id in (123,456)',\n  );\n});\n\ntest('get query for union dataset', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {id: NUM},\n      filter: {\n        col: 'id',\n        eq: 123,\n      },\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {id: NUM},\n      filter: {\n        col: 'id',\n        eq: 456,\n      },\n    }),\n  ]);\n\n  expect(dataset.query()).toEqual(\n    'select id from (slice) where id = 123 union all select id from (slice) where id = 456',\n  );\n});\n\ntest('doesImplement', () => {\n  const dataset = new SourceDataset({\n    src: 'slice',\n    schema: {id: NUM, ts: LONG},\n  });\n\n  expect(dataset.implements({id: NUM})).toBe(true);\n  expect(dataset.implements({id: NUM, ts: LONG})).toBe(true);\n  expect(dataset.implements({id: NUM, ts: LONG, name: STR})).toBe(false);\n  expect(dataset.implements({id: LONG})).toBe(false);\n});\n\ntest('find the schema of a simple dataset', () => {\n  const dataset = new SourceDataset({\n    src: 'slice',\n    schema: {id: NUM, ts: LONG},\n  });\n\n  expect(dataset.schema).toMatchObject({id: NUM, ts: LONG});\n});\n\ntest('find the schema of a union where source sets differ in their names', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {foo: NUM},\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {bar: NUM},\n    }),\n  ]);\n\n  expect(dataset.schema).toMatchObject({});\n});\n\ntest('find the schema of a union with differing source sets', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {foo: NUM},\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {foo: LONG},\n    }),\n  ]);\n\n  expect(dataset.schema).toMatchObject({});\n});\n\ntest('find the schema of a union with one column in common', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {foo: NUM, bar: NUM},\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {foo: NUM, baz: NUM},\n    }),\n  ]);\n\n  expect(dataset.schema).toMatchObject({foo: NUM});\n});\n\ntest('optimize a union dataset', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {},\n      filter: {\n        col: 'track_id',\n        eq: 123,\n      },\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {},\n      filter: {\n        col: 'track_id',\n        eq: 456,\n      },\n    }),\n  ]);\n\n  expect(dataset.optimize()).toEqual({\n    src: 'slice',\n    schema: {},\n    filter: {\n      col: 'track_id',\n      in: [123, 456],\n    },\n  });\n});\n\ntest('optimize a union dataset with different types of filters', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {},\n      filter: {\n        col: 'track_id',\n        eq: 123,\n      },\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {},\n      filter: {\n        col: 'track_id',\n        in: [456, 789],\n      },\n    }),\n  ]);\n\n  expect(dataset.optimize()).toEqual({\n    src: 'slice',\n    schema: {},\n    filter: {\n      col: 'track_id',\n      in: [123, 456, 789],\n    },\n  });\n});\n\ntest('optimize a union dataset with different schemas', () => {\n  const dataset = new UnionDataset([\n    new SourceDataset({\n      src: 'slice',\n      schema: {foo: NUM},\n    }),\n    new SourceDataset({\n      src: 'slice',\n      schema: {bar: NUM},\n    }),\n  ]);\n\n  expect(dataset.optimize()).toEqual({\n    src: 'slice',\n    // The resultant schema is the combination of the union's member's schemas,\n    // as we know the source is the same as we know we can get all of the 'seen'\n    // columns from the source.\n    schema: {\n      foo: NUM,\n      bar: NUM,\n    },\n  });\n});\n"]}
{"version":3,"file":"wasm_engine_proxy.js","sourceRoot":"","sources":["../../../src/trace_processor/wasm_engine_proxy.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAQjC,4BAEC;AARD,2CAAwC;AACxC,6CAAyD;AACzD,sDAAqD;AAErD,IAAI,cAAsB,CAAC;AAE3B,SAAgB,QAAQ;IACtB,cAAc,GAAG,IAAI,MAAM,CAAC,IAAA,iBAAQ,EAAC,kBAAkB,CAAC,CAAC,CAAC;AAC5D,CAAC;AAED;;;GAGG;AACH,MAAa,eAAgB,SAAQ,mBAAU;IACpC,IAAI,GAAG,MAAM,CAAC;IACd,EAAE,CAAS;IACZ,IAAI,CAAc;IAClB,MAAM,CAAS;IAEvB,YAAY,EAAU;QACpB,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QAEb,MAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;QACrC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC;QAE1B,0EAA0E;QAC1E,2EAA2E;QAC3E,4DAA4D;QAC5D,wEAAwE;QACxE,4EAA4E;QAC5E,4EAA4E;QAC5E,iEAAiE;QACjE,IAAI,CAAC,MAAM,GAAG,IAAA,sBAAY,EAAC,cAAc,CAAC,CAAC;QAC3C,cAAc,GAAG,IAAI,MAAM,CAAC,IAAA,iBAAQ,EAAC,kBAAkB,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,SAAS,CAAC,CAAe;QACvB,IAAA,oBAAU,EAAC,CAAC,CAAC,IAAI,YAAY,UAAU,CAAC,CAAC;QACzC,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAkB,CAAC,CAAC;IACjD,CAAC;IAED,mBAAmB,CAAC,IAAgB;QAClC,0EAA0E;QAC1E,4EAA4E;QAC5E,gEAAgE;QAChE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,CAAC,MAAM,CAAC,OAAO,CAAC;QACd,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;CACF;AA1CD,0CA0CC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assetSrc} from '../base/assets';\nimport {assertExists, assertTrue} from '../base/logging';\nimport {EngineBase} from '../trace_processor/engine';\n\nlet idleWasmWorker: Worker;\n\nexport function initWasm() {\n  idleWasmWorker = new Worker(assetSrc('engine_bundle.js'));\n}\n\n/**\n * This implementation of Engine uses a WASM backend hosted in a separate\n * worker thread. The entrypoint of the worker thread is engine/index.ts.\n */\nexport class WasmEngineProxy extends EngineBase implements Disposable {\n  readonly mode = 'WASM';\n  readonly id: string;\n  private port: MessagePort;\n  private worker: Worker;\n\n  constructor(id: string) {\n    super();\n    this.id = id;\n\n    const channel = new MessageChannel();\n    const port1 = channel.port1;\n    this.port = channel.port2;\n\n    // We keep an idle instance around to hide the latency of initializing the\n    // instance. Creating the worker (new Worker()) is ~instantaneous, but then\n    // the initialization in the worker thread (i.e. the call to\n    // `new WasmBridge()` that engine/index.ts makes) takes several seconds.\n    // Here we hide that initialization latency by always keeping an idle worker\n    // around. The latency is hidden by the fact that the user usually takes few\n    // seconds until they click on \"open trace file\" and pick a file.\n    this.worker = assertExists(idleWasmWorker);\n    idleWasmWorker = new Worker(assetSrc('engine_bundle.js'));\n    this.worker.postMessage(port1, [port1]);\n    this.port.onmessage = this.onMessage.bind(this);\n  }\n\n  onMessage(m: MessageEvent) {\n    assertTrue(m.data instanceof Uint8Array);\n    super.onRpcResponseBytes(m.data as Uint8Array);\n  }\n\n  rpcSendRequestBytes(data: Uint8Array): void {\n    // We deliberately don't use a transfer list because protobufjs reuses the\n    // same buffer when encoding messages (which is good, because creating a new\n    // TypedArray for each decode operation would be too expensive).\n    this.port.postMessage(data);\n  }\n\n  [Symbol.dispose]() {\n    this.worker.terminate();\n  }\n}\n"]}
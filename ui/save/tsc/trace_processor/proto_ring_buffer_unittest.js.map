{"version":3,"file":"proto_ring_buffer_unittest.js","sourceRoot":"","sources":["../../../src/trace_processor/proto_ring_buffer_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport protobuf from 'protobufjs/minimal';\nimport {assertTrue} from '../base/logging';\nimport {ProtoRingBuffer} from './proto_ring_buffer';\n\nlet seed = 1;\n\n// For reproducibility.\nfunction Rnd(max: number) {\n  seed = (seed * 16807) % 2147483647;\n  return seed % max;\n}\n\nfunction MakeProtoMessage(fieldId: number, len: number) {\n  const writer = protobuf.Writer.create();\n  const tag = (fieldId << 3) | 2;\n  assertTrue(tag < 0x80 && (tag & 7) === 2);\n  writer.uint32(tag);\n  const data = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    data[i] = 48 + ((fieldId + i) % 73);\n  }\n  writer.bytes(data);\n  const res = writer.finish();\n  // For whatever reason the object returned by protobufjs' Writer cannot be\n  // directly .toEqual()-ed with Uint8Arrays.\n  const buf = new Uint8Array(res.length);\n  buf.set(res);\n  return buf;\n}\n\ntest('ProtoRingBufferTest.Fastpath', () => {\n  const buf = new ProtoRingBuffer();\n\n  for (let rep = 0; rep < 3; rep++) {\n    let inputBuf = MakeProtoMessage(1, 32);\n    buf.append(inputBuf);\n    let msg = buf.readMessage();\n    expect(msg).toBeDefined();\n    expect(msg).toBeInstanceOf(Uint8Array);\n    expect(msg!.length).toBe(32);\n\n    // subarray(2) is to strip the proto preamble. The returned buffer starts at\n    // the start of the payload.\n    expect(msg).toEqual(inputBuf.subarray(2));\n\n    // When we hit the fastpath, the returned message should be a subarray of\n    // the same ArrayBuffer passed to append.\n    expect(msg!.buffer).toBe(inputBuf.buffer);\n\n    inputBuf = MakeProtoMessage(2, 32);\n    buf.append(inputBuf.subarray(0, 13));\n    expect(buf.readMessage()).toBeUndefined();\n    buf.append(inputBuf.subarray(13));\n    msg = buf.readMessage();\n    expect(msg).toBeDefined();\n    expect(msg).toBeInstanceOf(Uint8Array);\n    expect(msg).toEqual(inputBuf.subarray(2));\n    expect(msg!.buffer !== inputBuf.buffer).toBeTruthy();\n  }\n});\n\ntest('ProtoRingBufferTest.CoalescingStream', () => {\n  const buf = new ProtoRingBuffer();\n\n  const mergedBuf = new Uint8Array(612);\n  const expected = new Array<Uint8Array>();\n  for (let i = 1, pos = 0; i <= 6; i++) {\n    const msg = MakeProtoMessage(i, 100);\n    expected.push(msg);\n    mergedBuf.set(msg, pos);\n    pos += msg.length;\n  }\n\n  const fragLens = [120, 20, 471, 1];\n  let fragSum = 0;\n  fragLens.map((fragLen) => {\n    buf.append(mergedBuf.subarray(fragSum, fragSum + fragLen));\n    fragSum += fragLen;\n    for (;;) {\n      const msg = buf.readMessage();\n      if (msg === undefined) break;\n      const exp = expected.shift();\n      expect(exp).toBeDefined();\n      expect(msg).toEqual(exp!.subarray(-1 * msg.length));\n    }\n  });\n  expect(expected.length).toEqual(0);\n});\n\ntest('ProtoRingBufferTest.RandomSizes', () => {\n  const buf = new ProtoRingBuffer();\n  const kNumMsg = 100;\n  const mergedBuf = new Uint8Array(1024 * 1024 * 32);\n  const expectedLengths = [];\n  let mergedLen = 0;\n  for (let i = 0; i < kNumMsg; i++) {\n    const fieldId = 1 + Rnd(15); // We support only one byte tag.\n    const rndVal = Rnd(1024);\n    let len = 1 + rndVal;\n    if (rndVal % 100 < 5) {\n      len *= 1000;\n    }\n    const msg = MakeProtoMessage(fieldId, len);\n    assertTrue(mergedBuf.length >= mergedLen + msg.length);\n    expectedLengths.push(len);\n    mergedBuf.set(msg, mergedLen);\n    mergedLen += msg.length;\n  }\n\n  for (let fragSum = 0; fragSum < mergedLen /**/; ) {\n    let fragLen = 1 + Rnd(1024 * 32);\n    fragLen = Math.min(fragLen, mergedLen - fragSum);\n    buf.append(mergedBuf.subarray(fragSum, fragSum + fragLen));\n    fragSum += fragLen;\n    for (;;) {\n      const msg = buf.readMessage();\n      if (msg === undefined) break;\n      const expLen = expectedLengths.shift();\n      expect(expLen).toBeDefined();\n      expect(msg.length).toEqual(expLen);\n    }\n  }\n  expect(expectedLengths.length).toEqual(0);\n});\n"]}
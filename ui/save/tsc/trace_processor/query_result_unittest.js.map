{"version":3,"file":"query_result_unittest.js","sourceRoot":"","sources":["../../../src/trace_processor/query_result_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport protos from '../protos';\nimport {\n  createQueryResult,\n  decodeInt64Varint,\n  NUM,\n  NUM_NULL,\n  STR,\n  STR_NULL,\n} from './query_result';\n\nconst T = protos.QueryResult.CellsBatch.CellType;\n\ntest('QueryResult.SimpleOneRow', () => {\n  const batch = protos.QueryResult.CellsBatch.create({\n    cells: [T.CELL_STRING, T.CELL_VARINT, T.CELL_STRING, T.CELL_FLOAT64],\n    varintCells: [42],\n    stringCells: ['the foo', 'the bar'].join('\\0'),\n    float64Cells: [42.42],\n    isLastBatch: true,\n  });\n  const resProto = protos.QueryResult.create({\n    columnNames: ['a_str', 'b_int', 'c_str', 'd_float'],\n    batch: [batch],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  expect(qr.isComplete()).toBe(true);\n  expect(qr.numRows()).toBe(1);\n\n  // First try iterating without selecting any column.\n  {\n    const iter = qr.iter({});\n    expect(iter.valid()).toBe(true);\n    iter.next();\n    expect(iter.valid()).toBe(false);\n  }\n\n  // Then select only two of them.\n  {\n    const iter = qr.iter({c_str: STR, d_float: NUM});\n    expect(iter.valid()).toBe(true);\n    expect(iter.c_str).toBe('the bar');\n    expect(iter.d_float).toBeCloseTo(42.42);\n    iter.next();\n    expect(iter.valid()).toBe(false);\n  }\n\n  // If a column is not present in the result set, iter() should throw.\n  expect(() => qr.iter({nx: NUM})).toThrowError(/\\bnx\\b.*not found/);\n});\n\ntest('QueryResult.BigNumbers', () => {\n  const numAndExpectedStr = [\n    [0, '0'],\n    [-1, '-1'],\n    [-1000, '-1000'],\n    [1e12, '1000000000000'],\n    [1e12 * -1, '-1000000000000'],\n    [((1 << 31) - 1) | 0, '2147483647'],\n    [1 << 31, '-2147483648'],\n    [Number.MAX_SAFE_INTEGER, '9007199254740991'],\n    [Number.MIN_SAFE_INTEGER, '-9007199254740991'],\n  ];\n  const batch = protos.QueryResult.CellsBatch.create({\n    cells: new Array<number>(numAndExpectedStr.length).fill(T.CELL_VARINT),\n    varintCells: numAndExpectedStr.map((x) => x[0]) as number[],\n    isLastBatch: true,\n  });\n  const resProto = protos.QueryResult.create({\n    columnNames: ['n'],\n    batch: [batch],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  const actual: string[] = [];\n  for (const iter = qr.iter({n: NUM}); iter.valid(); iter.next()) {\n    actual.push(BigInt(iter.n).toString());\n  }\n  expect(actual).toEqual(numAndExpectedStr.map((x) => x[1]) as string[]);\n});\n\ntest('QueryResult.Floats', () => {\n  const floats = [\n    0.0,\n    1.0,\n    -1.0,\n    3.14159265358,\n    Number.MIN_SAFE_INTEGER,\n    Number.MAX_SAFE_INTEGER,\n    Number.NEGATIVE_INFINITY,\n    Number.POSITIVE_INFINITY,\n    Number.NaN,\n  ];\n  const batch = protos.QueryResult.CellsBatch.create({\n    cells: new Array<number>(floats.length).fill(T.CELL_FLOAT64),\n    float64Cells: floats,\n    isLastBatch: true,\n  });\n  const resProto = protos.QueryResult.create({\n    columnNames: ['n'],\n    batch: [batch],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  const actual: number[] = [];\n  for (const iter = qr.iter({n: NUM}); iter.valid(); iter.next()) {\n    actual.push(iter.n);\n  }\n  expect(actual).toEqual(floats);\n});\n\ntest('QueryResult.Strings', () => {\n  const strings = [\n    'a',\n    '',\n    '',\n    'hello world',\n    'In einem Bächlein helle da schoß in froher Eil',\n    '色は匂へど散りぬるを我が世誰ぞ常ならん有為の奥山今日越えて浅き夢見じ酔ひもせず',\n  ];\n  const batch = protos.QueryResult.CellsBatch.create({\n    cells: new Array<number>(strings.length).fill(T.CELL_STRING),\n    stringCells: strings.join('\\0'),\n    isLastBatch: true,\n  });\n  const resProto = protos.QueryResult.create({\n    columnNames: ['s'],\n    batch: [batch],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  const actual: string[] = [];\n  for (const iter = qr.iter({s: STR}); iter.valid(); iter.next()) {\n    actual.push(iter.s);\n  }\n  expect(actual).toEqual(strings);\n});\n\ntest('QueryResult.NullChecks', () => {\n  const cells: number[] = [];\n  cells.push(T.CELL_VARINT, T.CELL_NULL);\n  cells.push(T.CELL_NULL, T.CELL_STRING);\n  cells.push(T.CELL_VARINT, T.CELL_STRING);\n  const batch = protos.QueryResult.CellsBatch.create({\n    cells,\n    varintCells: [1, 2],\n    stringCells: ['a', 'b'].join('\\0'),\n    isLastBatch: true,\n  });\n  const resProto = protos.QueryResult.create({\n    columnNames: ['n', 's'],\n    batch: [batch],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  const actualNums = new Array<number | null>();\n  const actualStrings = new Array<string | null>();\n  for (\n    const iter = qr.iter({n: NUM_NULL, s: STR_NULL});\n    iter.valid();\n    iter.next()\n  ) {\n    actualNums.push(iter.n);\n    actualStrings.push(iter.s);\n  }\n  expect(actualNums).toEqual([1, null, 2]);\n  expect(actualStrings).toEqual([null, 'a', 'b']);\n\n  // Check that using NUM / STR throws.\n  expect(() => qr.iter({n: NUM_NULL, s: STR})).toThrowError(\n    /col: 's'.*is NULL.*not expected/,\n  );\n  expect(() => qr.iter({n: NUM, s: STR_NULL})).toThrowError(\n    /col: 'n'.*is NULL.*not expected/,\n  );\n  expect(qr.iter({n: NUM_NULL})).toBeTruthy();\n  expect(qr.iter({s: STR_NULL})).toBeTruthy();\n});\n\ntest('QueryResult.EarlyError', () => {\n  const resProto = protos.QueryResult.create({\n    columnNames: [],\n    batch: [{isLastBatch: true}],\n    error: 'Oh dear, this SQL query is too complicated, I give up',\n  });\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  expect(qr.error()).toContain('Oh dear');\n  expect(qr.isComplete()).toBe(true);\n  const iter = qr.iter({});\n  expect(iter.valid()).toBe(false);\n});\n\ntest('QueryResult.LateError', () => {\n  const resProto = protos.QueryResult.create({\n    columnNames: ['n'],\n    batch: [\n      {\n        cells: [T.CELL_VARINT],\n        varintCells: [1],\n      },\n      {\n        cells: [T.CELL_VARINT],\n        varintCells: [2],\n        isLastBatch: true,\n      },\n    ],\n    error: 'I tried, I was getting there, but then I failed',\n  });\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  expect(qr.error()).toContain('I failed');\n  const rows: number[] = [];\n  for (const iter = qr.iter({n: NUM}); iter.valid(); iter.next()) {\n    rows.push(iter.n);\n  }\n  expect(rows).toEqual([1, 2]);\n  expect(qr.isComplete()).toBe(true);\n});\n\ntest('QueryResult.MultipleBatches', async () => {\n  const batch1 = protos.QueryResult.create({\n    columnNames: ['n'],\n    batch: [\n      {\n        cells: [T.CELL_VARINT],\n        varintCells: [1],\n        isLastBatch: false,\n      },\n    ],\n  });\n  const batch2 = protos.QueryResult.create({\n    batch: [\n      {\n        cells: [T.CELL_VARINT],\n        varintCells: [2],\n        isLastBatch: true,\n      },\n    ],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  expect(qr.isComplete()).toBe(false);\n\n  qr.appendResultBatch(protos.QueryResult.encode(batch1).finish());\n  qr.appendResultBatch(protos.QueryResult.encode(batch2).finish());\n\n  const awaitRes = await qr;\n\n  expect(awaitRes.isComplete()).toBe(true);\n  expect(qr.isComplete()).toBe(true);\n\n  expect(awaitRes.numRows()).toBe(2);\n  expect(qr.numRows()).toBe(2);\n});\n\n// Regression test for b/194891824 .\ntest('QueryResult.DuplicateColumnNames', () => {\n  const batch = protos.QueryResult.CellsBatch.create({\n    cells: [\n      T.CELL_VARINT,\n      T.CELL_STRING,\n      T.CELL_FLOAT64,\n      T.CELL_STRING,\n      T.CELL_STRING,\n    ],\n    varintCells: [42],\n    stringCells: ['a', 'b', 'c'].join('\\0'),\n    float64Cells: [4.2],\n    isLastBatch: true,\n  });\n  const resProto = protos.QueryResult.create({\n    columnNames: ['x', 'y', 'x', 'x', 'y'],\n    batch: [batch],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProto).finish());\n  expect(qr.isComplete()).toBe(true);\n  expect(qr.numRows()).toBe(1);\n  expect(qr.columns()).toEqual(['x', 'y', 'x_1', 'x_2', 'y_1']);\n  // First try iterating without selecting any column.\n  {\n    const iter = qr.iter({x: NUM, y: STR, x_1: NUM, x_2: STR, y_1: STR});\n    expect(iter.valid()).toBe(true);\n    expect(iter.x).toBe(42);\n    expect(iter.y).toBe('a');\n    expect(iter.x_1).toBe(4.2);\n    expect(iter.x_2).toBe('b');\n    expect(iter.y_1).toBe('c');\n    iter.next();\n    expect(iter.valid()).toBe(false);\n  }\n  expect(() => qr.iter({x_3: NUM})).toThrowError(/\\bx_3\\b.*not found/);\n});\n\ntest('QueryResult.WaitMoreRows', async () => {\n  const batchA = protos.QueryResult.CellsBatch.create({\n    cells: [T.CELL_VARINT],\n    varintCells: [42],\n    isLastBatch: false,\n  });\n  const resProtoA = protos.QueryResult.create({\n    columnNames: ['a_int'],\n    batch: [batchA],\n  });\n\n  const qr = createQueryResult({query: 'Some query'});\n  qr.appendResultBatch(protos.QueryResult.encode(resProtoA).finish());\n\n  const batchB = protos.QueryResult.CellsBatch.create({\n    cells: [T.CELL_VARINT],\n    varintCells: [43],\n    isLastBatch: true,\n  });\n  const resProtoB = protos.QueryResult.create({\n    columnNames: [],\n    batch: [batchB],\n  });\n\n  const waitPromise = qr.waitMoreRows();\n  const appendPromise = new Promise<void>((resolve, _) => {\n    setTimeout(() => {\n      qr.appendResultBatch(protos.QueryResult.encode(resProtoB).finish());\n      resolve();\n    }, 0);\n  });\n\n  expect(qr.isComplete()).toBe(false);\n  expect(qr.numRows()).toBe(1);\n\n  await Promise.all([waitPromise, appendPromise]);\n\n  expect(qr.isComplete()).toBe(true);\n  expect(qr.numRows()).toBe(2);\n});\n\ndescribe('decodeInt64Varint', () => {\n  test('Parsing empty input should throw an error', () => {\n    expect(() => decodeInt64Varint(new Uint8Array(), 0)).toThrow(\n      'Index out of range',\n    );\n  });\n\n  test('Parsing single byte positive integers', () => {\n    const testData: Array<[Uint8Array, BigInt]> = [\n      [new Uint8Array([0x00]), 0n],\n      [new Uint8Array([0x01]), 1n],\n      [new Uint8Array([0x7f]), 127n],\n    ];\n\n    testData.forEach(([input, expected]) => {\n      expect(decodeInt64Varint(input, 0)).toEqual(expected);\n    });\n  });\n\n  test('Parsing multi-byte positive integers', () => {\n    const testData: Array<[Uint8Array, BigInt]> = [\n      [new Uint8Array([0x80, 0x01]), 128n],\n      [new Uint8Array([0xff, 0x7f]), 16383n],\n      [new Uint8Array([0x80, 0x80, 0x01]), 16384n],\n      [new Uint8Array([0xff, 0xff, 0x7f]), 2097151n],\n      [\n        new Uint8Array([\n          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,\n        ]),\n        9223372036854775807n,\n      ],\n    ];\n\n    testData.forEach(([input, expected]) => {\n      expect(decodeInt64Varint(input, 0)).toEqual(expected);\n    });\n  });\n\n  test('Parsing negative integers', () => {\n    const testData: Array<[Uint8Array, BigInt]> = [\n      [\n        new Uint8Array([\n          0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,\n        ]),\n        -1n,\n      ],\n      [\n        new Uint8Array([\n          0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,\n        ]),\n        -2n,\n      ],\n      [\n        new Uint8Array([\n          0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x01,\n        ]),\n        -9223372036854775808n,\n      ],\n    ];\n\n    testData.forEach(([input, expected]) => {\n      expect(decodeInt64Varint(input, 0)).toEqual(expected);\n    });\n  });\n\n  test('Parsing with incomplete varint should throw an error', () => {\n    const testData: Array<Uint8Array> = [\n      new Uint8Array([0x80]),\n      new Uint8Array([0x80, 0x80]),\n    ];\n\n    testData.forEach((input) => {\n      expect(() => decodeInt64Varint(input, 0)).toThrow('Index out of range');\n    });\n  });\n});\n"]}
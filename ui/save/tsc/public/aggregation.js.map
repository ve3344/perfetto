{"version":3,"file":"aggregation.js","sourceRoot":"","sources":["../../../src/public/aggregation.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAsDjC,kCAEC;AAFD,SAAgB,WAAW,CAAC,IAAmB;IAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;AACxE,CAAC","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport type Column = (\n  | StringColumn\n  | TimestampColumn\n  | NumberColumn\n  | StateColumn\n) & {\n  readonly title: string;\n  readonly columnId: string;\n};\n\nexport interface StringColumn {\n  readonly kind: 'STRING';\n  readonly data: Uint16Array;\n}\n\nexport interface TimestampColumn {\n  readonly kind: 'TIMESTAMP_NS';\n  readonly data: Float64Array;\n}\n\nexport interface NumberColumn {\n  readonly kind: 'NUMBER';\n  readonly data: Uint16Array;\n}\n\nexport interface StateColumn {\n  readonly kind: 'STATE';\n  readonly data: Uint16Array;\n}\n\ntype TypedArrayConstructor =\n  | Uint16ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor;\nexport interface ColumnDef {\n  readonly title: string;\n  readonly kind: string;\n  readonly sum?: boolean;\n  readonly columnConstructor: TypedArrayConstructor;\n  readonly columnId: string;\n}\n\nexport interface AggregateData {\n  readonly tabName: string;\n  readonly columns: Column[];\n  readonly columnSums: string[];\n  // For string interning.\n  readonly strings: string[];\n  // Some aggregations will have extra info to display;\n  readonly extra?: ThreadStateExtra;\n}\n\nexport function isEmptyData(data: AggregateData) {\n  return data.columns.length === 0 || data.columns[0].data.length === 0;\n}\n\nexport interface ThreadStateExtra {\n  readonly kind: 'THREAD_STATE';\n  readonly states: string[];\n  readonly values: Float64Array;\n  readonly totalMs: number;\n}\n\nexport interface Sorting {\n  readonly column: string;\n  readonly direction: 'DESC' | 'ASC';\n}\n"]}
{"version":3,"file":"color.js","sourceRoot":"","sources":["../../../src/public/color.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {hsluvToRgb} from 'hsluv';\nimport {clamp} from '../base/math_utils';\n\n// This file contains a library for working with colors in various color spaces\n// and formats.\n\nconst LIGHTNESS_MIN = 0;\nconst LIGHTNESS_MAX = 100;\n\nconst SATURATION_MIN = 0;\nconst SATURATION_MAX = 100;\n\n// Most color formats can be defined using 3 numbers in a standardized order, so\n// this tuple serves as a compact way to store various color formats.\n// E.g. HSL, RGB\ntype ColorTuple = [number, number, number];\n\n// Definition of an HSL color with named fields.\ninterface HSL {\n  readonly h: number; // 0-360\n  readonly s: number; // 0-100\n  readonly l: number; // 0-100\n}\n\n// Defines an interface to an immutable color object, which can be defined in\n// any arbitrary format or color space and provides function to modify the color\n// and conversions to CSS compatible style strings.\n// Because this color object is effectively immutable, a new color object is\n// returned when modifying the color, rather than editing the current object\n// in-place.\n// Also, because these objects are immutable, it's expected that readonly\n// properties such as |cssString| are efficient, as they can be computed at\n// creation time, so they may be used in the hot path (render loop).\nexport interface Color {\n  readonly cssString: string;\n\n  // The perceived brightness of the color using a weighted average of the\n  // r, g and b channels based on human perception.\n  readonly perceivedBrightness: number;\n\n  // Bring up the lightness by |percent| percent.\n  lighten(percent: number, max?: number): Color;\n\n  // Bring down the lightness by |percent| percent.\n  darken(percent: number, min?: number): Color;\n\n  // Bring up the saturation by |percent| percent.\n  saturate(percent: number, max?: number): Color;\n\n  // Bring down the saturation by |percent| percent.\n  desaturate(percent: number, min?: number): Color;\n\n  // Set one or more HSL values.\n  setHSL(hsl: Partial<HSL>): Color;\n\n  setAlpha(alpha: number | undefined): Color;\n}\n\n// Common base class for HSL colors. Avoids code duplication.\nabstract class HSLColorBase<T extends Color> {\n  readonly hsl: ColorTuple;\n  readonly alpha?: number;\n\n  // Values are in the range:\n  // Hue:        0-360\n  // Saturation: 0-100\n  // Lightness:  0-100\n  // Alpha:      0-1\n  constructor(init: ColorTuple | HSL | string, alpha?: number) {\n    if (Array.isArray(init)) {\n      this.hsl = init;\n    } else if (typeof init === 'string') {\n      const rgb = hexToRgb(init);\n      this.hsl = rgbToHsl(rgb);\n    } else {\n      this.hsl = [init.h, init.s, init.l];\n    }\n    this.alpha = alpha;\n  }\n\n  // Subclasses should implement this to teach the base class how to create a\n  // new object of the subclass type.\n  abstract create(hsl: ColorTuple | HSL, alpha?: number): T;\n\n  lighten(amount: number, max = LIGHTNESS_MAX): T {\n    const [h, s, l] = this.hsl;\n    const newLightness = clamp(l + amount, LIGHTNESS_MIN, max);\n    return this.create([h, s, newLightness], this.alpha);\n  }\n\n  darken(amount: number, min = LIGHTNESS_MIN): T {\n    const [h, s, l] = this.hsl;\n    const newLightness = clamp(l - amount, min, LIGHTNESS_MAX);\n    return this.create([h, s, newLightness], this.alpha);\n  }\n\n  saturate(amount: number, max = SATURATION_MAX): T {\n    const [h, s, l] = this.hsl;\n    const newSaturation = clamp(s + amount, SATURATION_MIN, max);\n    return this.create([h, newSaturation, l], this.alpha);\n  }\n\n  desaturate(amount: number, min = SATURATION_MIN): T {\n    const [h, s, l] = this.hsl;\n    const newSaturation = clamp(s - amount, min, SATURATION_MAX);\n    return this.create([h, newSaturation, l], this.alpha);\n  }\n\n  setHSL(hsl: Partial<HSL>): T {\n    const [h, s, l] = this.hsl;\n    return this.create({h, s, l, ...hsl}, this.alpha);\n  }\n\n  setAlpha(alpha: number | undefined): T {\n    return this.create(this.hsl, alpha);\n  }\n}\n\n// Describes a color defined in standard HSL color space.\nexport class HSLColor extends HSLColorBase<HSLColor> implements Color {\n  readonly cssString: string;\n  readonly perceivedBrightness: number;\n\n  // Values are in the range:\n  // Hue:        0-360\n  // Saturation: 0-100\n  // Lightness:  0-100\n  // Alpha:      0-1\n  constructor(hsl: ColorTuple | HSL | string, alpha?: number) {\n    super(hsl, alpha);\n\n    const [r, g, b] = hslToRgb(...this.hsl);\n\n    this.perceivedBrightness = perceivedBrightness(r, g, b);\n\n    if (this.alpha === undefined) {\n      this.cssString = `rgb(${r} ${g} ${b})`;\n    } else {\n      this.cssString = `rgb(${r} ${g} ${b} / ${this.alpha})`;\n    }\n  }\n\n  create(values: ColorTuple | HSL, alpha?: number | undefined): HSLColor {\n    return new HSLColor(values, alpha);\n  }\n}\n\n// Describes a color defined in HSLuv color space.\n// See: https://www.hsluv.org/\nexport class HSLuvColor extends HSLColorBase<HSLuvColor> implements Color {\n  readonly cssString: string;\n  readonly perceivedBrightness: number;\n\n  constructor(hsl: ColorTuple | HSL, alpha?: number) {\n    super(hsl, alpha);\n\n    const rgb = hsluvToRgb(this.hsl);\n    const r = Math.floor(rgb[0] * 255);\n    const g = Math.floor(rgb[1] * 255);\n    const b = Math.floor(rgb[2] * 255);\n\n    this.perceivedBrightness = perceivedBrightness(r, g, b);\n\n    if (this.alpha === undefined) {\n      this.cssString = `rgb(${r} ${g} ${b})`;\n    } else {\n      this.cssString = `rgb(${r} ${g} ${b} / ${this.alpha})`;\n    }\n  }\n\n  create(raw: ColorTuple | HSL, alpha?: number | undefined): HSLuvColor {\n    return new HSLuvColor(raw, alpha);\n  }\n}\n\n// Hue: 0-360\n// Saturation: 0-100\n// Lightness: 0-100\n// RGB: 0-255\nexport function hslToRgb(h: number, s: number, l: number): ColorTuple {\n  h = h;\n  s = s / SATURATION_MAX;\n  l = l / LIGHTNESS_MAX;\n\n  const c = (1 - Math.abs(2 * l - 1)) * s;\n  const x = c * (1 - Math.abs(((h / 60) % 2) - 1));\n  const m = l - c / 2;\n\n  let [r, g, b] = [0, 0, 0];\n\n  if (0 <= h && h < 60) {\n    [r, g, b] = [c, x, 0];\n  } else if (60 <= h && h < 120) {\n    [r, g, b] = [x, c, 0];\n  } else if (120 <= h && h < 180) {\n    [r, g, b] = [0, c, x];\n  } else if (180 <= h && h < 240) {\n    [r, g, b] = [0, x, c];\n  } else if (240 <= h && h < 300) {\n    [r, g, b] = [x, 0, c];\n  } else if (300 <= h && h < 360) {\n    [r, g, b] = [c, 0, x];\n  }\n\n  // Convert to 0-255 range\n  r = Math.round((r + m) * 255);\n  g = Math.round((g + m) * 255);\n  b = Math.round((b + m) * 255);\n\n  return [r, g, b];\n}\n\nexport function hexToRgb(hex: string): ColorTuple {\n  // Convert hex to RGB first\n  let r: number = 0;\n  let g: number = 0;\n  let b: number = 0;\n\n  if (hex.length === 4) {\n    r = parseInt(hex[1] + hex[1], 16);\n    g = parseInt(hex[2] + hex[2], 16);\n    b = parseInt(hex[3] + hex[3], 16);\n  } else if (hex.length === 7) {\n    r = parseInt(hex.substring(1, 3), 16);\n    g = parseInt(hex.substring(3, 5), 16);\n    b = parseInt(hex.substring(5, 7), 16);\n  }\n\n  return [r, g, b];\n}\n\nexport function rgbToHsl(rgb: ColorTuple): ColorTuple {\n  let [r, g, b] = rgb;\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h: number = (max + min) / 2;\n  let s: number = (max + min) / 2;\n  const l: number = (max + min) / 2;\n\n  if (max === min) {\n    h = s = 0; // achromatic\n  } else {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h * 360, s * 100, l * 100];\n}\n\n// Return the perceived brightness of a color using a weighted average of the\n// r, g and b channels based on human perception.\nfunction perceivedBrightness(r: number, g: number, b: number): number {\n  // YIQ calculation from https://24ways.org/2010/calculating-color-contrast\n  return (r * 299 + g * 587 + b * 114) / 1000;\n}\n\n// Comparison function used for sorting colors.\nexport function colorCompare(a: Color, b: Color): number {\n  return a.cssString.localeCompare(b.cssString);\n}\n"]}
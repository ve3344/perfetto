{"version":3,"file":"workspace_unittest.js","sourceRoot":"","sources":["../../../src/public/workspace_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {TrackNode, Workspace} from './workspace';\n\ndescribe('workspace', () => {\n  test('getNodeByKey', () => {\n    const workspace = new Workspace();\n    const track = new TrackNode({id: 'foo'});\n    workspace.addChildLast(track);\n\n    expect(workspace.getTrackById('foo')).toEqual(track);\n  });\n\n  test('getNodeByKey', () => {\n    const track = new TrackNode({id: 'bar'});\n\n    const group = new TrackNode();\n    group.addChildLast(track);\n\n    // Add group to workspace AFTER adding the track to the group\n    const workspace = new Workspace();\n    workspace.addChildLast(group);\n\n    expect(workspace.getTrackById('bar')).toBe(track);\n  });\n\n  test('nested index lookup', () => {\n    const track = new TrackNode({id: 'bar'});\n\n    const group = new TrackNode();\n\n    // Add group to workspace before adding the track to the group\n    const workspace = new Workspace();\n    workspace.addChildLast(group);\n    group.addChildLast(track);\n\n    expect(workspace.getTrackById('bar')).toBe(track);\n  });\n\n  test('nested index lookup', () => {\n    const workspace = new Workspace();\n\n    const group = new TrackNode();\n\n    const track = new TrackNode({id: 'bar'});\n    group.addChildLast(track);\n\n    // Add group to workspace\n    workspace.addChildLast(group);\n    workspace.removeChild(group);\n\n    expect(workspace.getTrackById('bar')).toBe(undefined);\n  });\n\n  test('findTrackByUri()', () => {\n    const workspace = new Workspace();\n\n    const group = new TrackNode();\n\n    const track = new TrackNode({uri: 'foo'});\n    group.addChildLast(track);\n\n    // Add group to workspace\n    workspace.addChildLast(group);\n\n    expect(workspace.findTrackByUri('foo')).toBe(track);\n  });\n\n  test('findClosestVisibleAncestor()', () => {\n    const child = new TrackNode();\n    child.expand(); // Expanding the child node should have no effect\n\n    const parent = new TrackNode();\n    parent.expand();\n    parent.addChildLast(child);\n\n    // While everything is expanded and the child node is visible, the child\n    // should be returned.\n    expect(child.findClosestVisibleAncestor()).toBe(child);\n\n    // Collapse the parent node and this parent should be returned, as from the\n    // point of view of the root, this is the closest we can get to our target\n    // node without expanding any more nodes.\n    parent.collapse();\n    expect(child.findClosestVisibleAncestor()).toBe(parent);\n  });\n});\n\ndescribe('TrackNode.addChildInOrder', () => {\n  let container: TrackNode;\n\n  beforeEach(() => {\n    container = new TrackNode();\n  });\n\n  test('inserts a child into an empty container', () => {\n    const child = new TrackNode({id: 'track1'});\n\n    container.addChildInOrder(child);\n\n    expect(container.children).toHaveLength(1);\n    expect(container.children[0]).toBe(child);\n  });\n\n  test('inserts a child with a lower sortOrder before an existing child', () => {\n    const child1 = new TrackNode({sortOrder: 10});\n    const child2 = new TrackNode({sortOrder: 5});\n\n    container.addChildInOrder(child1);\n    container.addChildInOrder(child2);\n\n    expect(container.children).toHaveLength(2);\n    expect(container.children[0]).toBe(child2);\n    expect(container.children[1]).toBe(child1);\n  });\n\n  test('inserts a child with a higher sortOrder after an existing child', () => {\n    const child1 = new TrackNode({sortOrder: 5});\n    const child2 = new TrackNode({sortOrder: 10});\n\n    container.addChildInOrder(child1);\n    container.addChildInOrder(child2);\n\n    expect(container.children).toHaveLength(2);\n    expect(container.children[0]).toBe(child1);\n    expect(container.children[1]).toBe(child2);\n  });\n\n  test('inserts a child with the same sortOrder after an existing child', () => {\n    const child1 = new TrackNode({sortOrder: 5});\n    const child2 = new TrackNode({sortOrder: 5});\n\n    container.addChildInOrder(child1);\n    container.addChildInOrder(child2);\n\n    expect(container.children).toHaveLength(2);\n    expect(container.children[0]).toBe(child1);\n    expect(container.children[1]).toBe(child2);\n  });\n\n  test('inserts multiple children and maintains order', () => {\n    const child1 = new TrackNode({sortOrder: 15});\n    const child2 = new TrackNode({sortOrder: 10});\n    const child3 = new TrackNode({sortOrder: 20});\n\n    container.addChildInOrder(child1);\n    container.addChildInOrder(child2);\n    container.addChildInOrder(child3);\n\n    expect(container.children).toHaveLength(3);\n    expect(container.children[0]).toBe(child2);\n    expect(container.children[1]).toBe(child1);\n    expect(container.children[2]).toBe(child3);\n  });\n\n  test('inserts a child with undefined sortOrder as 0', () => {\n    const child1 = new TrackNode({sortOrder: 10});\n\n    // sortOrder is undefined, treated as 0\n    const child2 = new TrackNode();\n\n    container.addChildInOrder(child1);\n    container.addChildInOrder(child2);\n\n    expect(container.children).toHaveLength(2);\n\n    // child2 (sortOrder 0) should be first\n    expect(container.children[0]).toBe(child2);\n    expect(container.children[1]).toBe(child1);\n  });\n});\n\ntest('TrackNode::flatTracksOrdered', () => {\n  const root = new TrackNode();\n\n  const removeme = new TrackNode({id: 'removeme'});\n  root.addChildFirst(removeme);\n\n  const foo = new TrackNode({id: 'foo'});\n  root.addChildLast(foo);\n  foo.addChildLast(new TrackNode({id: 'fooBar'})); // <-- Note this one is added as a child of foo\n  const bar = new TrackNode({id: 'bar'});\n  root.addChildLast(bar);\n  root.addChildFirst(new TrackNode({id: 'baz'})); // <- Note this one is added first so should appear before the others in flatTracks\n\n  root.removeChild(removeme);\n\n  expect(root.flatTracksOrdered.map(({id}) => id)).toEqual([\n    'baz',\n    'foo',\n    'fooBar',\n    'bar',\n  ]);\n});\n\ntest('TrackNode::flatTracks', () => {\n  const root = new TrackNode();\n\n  const removeme = new TrackNode({id: 'removeme'});\n  root.addChildFirst(removeme);\n\n  const foo = new TrackNode({id: 'foo'});\n  root.addChildLast(foo);\n  foo.addChildLast(new TrackNode({id: 'fooBar'})); // <-- Note this one is added as a child of foo\n  root.addChildLast(new TrackNode({id: 'bar'}));\n  root.addChildFirst(new TrackNode({id: 'baz'})); // <- Note this one is added first so should appear before the others in flatTracks\n\n  root.removeChild(removeme);\n\n  expect(root.flatTracks.map(({id}) => id)).toEqual(\n    expect.arrayContaining(['baz', 'foo', 'fooBar', 'bar']),\n  );\n  expect(root.flatTracks.length).toBe(4);\n});\n\ntest('TrackNode::clone', () => {\n  const root = new TrackNode();\n  const childA = new TrackNode();\n  root.addChildLast(childA);\n\n  const childB = new TrackNode();\n  root.addChildLast(childB);\n\n  const cloned = root.clone();\n\n  expect(cloned.id).not.toBe(root.id); // id should be different\n  expect(cloned.uri).toBe(root.uri);\n  expect(cloned.expanded).toBe(root.expanded);\n  expect(cloned.title).toBe(root.title);\n  expect(cloned.headless).toBe(root.headless);\n  expect(cloned.isSummary).toBe(root.isSummary);\n  expect(cloned.removable).toBe(root.removable);\n  expect(cloned.children).toStrictEqual([]); // Children should not be copied\n});\n\ntest('TrackNode::clone(deep)', () => {\n  const root = new TrackNode();\n  const childA = new TrackNode();\n  root.addChildLast(childA);\n\n  const childB = new TrackNode();\n  root.addChildLast(childB);\n\n  const cloned = root.clone(true);\n\n  expect(cloned.id).not.toBe(root.id); // id should be different\n  expect(cloned.uri).toBe(root.uri);\n  expect(cloned.expanded).toBe(root.expanded);\n  expect(cloned.title).toBe(root.title);\n  expect(cloned.headless).toBe(root.headless);\n  expect(cloned.isSummary).toBe(root.isSummary);\n  expect(cloned.removable).toBe(root.removable);\n  expect(cloned.children).toHaveLength(2);\n\n  expect(cloned.children[0].title).toBe(childA.title);\n  expect(cloned.children[0].uri).toBe(childA.uri);\n\n  expect(cloned.children[1].title).toBe(childB.title);\n  expect(cloned.children[1].uri).toBe(childB.uri);\n});\n"]}
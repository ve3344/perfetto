{"version":3,"file":"omnibox.js","sourceRoot":"","sources":["../../../src/public/omnibox.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport interface OmniboxManager {\n  /**\n   * Turns the omnibox into an interactive prompt for the user. Think of\n   * window.prompt() but non-modal and more integrated with the UI.\n   *\n   * @param text - The question showed to the user (e.g. \"Select a process to\n   * jump to\").\n   * @param choices - If defined, it shows a list of options in a select-box\n   * fashion, where the user can move with Up/Down arrows. If omitted the input\n   * is free-form, like in the case of window.prompt().\n   * @returns If `options` === undefined, returns the free-form user input. If\n   * `options` was provided, returns the selected choice. Returns undefined if\n   * the user dismisses the prompt by pressing Esc or clicking elsewhere.\n   *\n   * Example:\n   * ```ts\n   * // Free-form string\n   * const name = await prompt('Enter your name');\n   *\n   * // Simple list of choices\n   * const value = await prompt('Choose a color...', ['red', 'blue', 'green']);\n   *\n   * // Each choice is an object\n   * const value = await prompt('Choose from an enum...', {\n   *   values: [\n   *     {x: MyEnum.Foo, name: 'foo'},\n   *     {x: MyEnum.Bar, name: 'bar'},\n   *   ],\n   *   getName: (e) => e.name,\n   * );\n   * ```\n   */\n  prompt(\n    text: string,\n    choices?: ReadonlyArray<string>,\n  ): Promise<string | undefined>;\n  prompt<T>(text: string, choices: PromptChoices<T>): Promise<T | undefined>;\n}\n\nexport interface PromptChoices<T> {\n  values: ReadonlyArray<T>;\n  getName: (x: T) => string;\n}\n"]}
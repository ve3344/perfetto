{"version":3,"file":"scroll_helper.js","sourceRoot":"","sources":["../../../src/public/scroll_helper.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAkDjC,4BAEC;AAED,kDAEC;AAVD,IAAI,iBAAiB,GAAiC,SAAS,CAAC;AAEhE,2EAA2E;AAC3E,iBAAiB;AACjB,SAAgB,QAAQ,CAAC,IAAkB;IACzC,iBAAiB,EAAE,CAAC,IAAI,CAAC,CAAC;AAC5B,CAAC;AAED,SAAgB,mBAAmB,CAAC,CAA+B;IACjE,iBAAiB,GAAG,CAAC,CAAC;AACxB,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {time} from '../base/time';\n\n/**\n * A helper to scroll to a combination of tracks and time ranges.\n * This exist to decouple the selection logic to the scrolling logic. Nothing in\n * this file changes the selection status. Use SelectionManager for that.\n */\nexport interface ScrollToArgs {\n  // Given a start and end timestamp (in ns), move the viewport to center this\n  //  range and zoom if necessary:\n  //  - If [viewPercentage] is specified, the viewport will be zoomed so that\n  //    the given time range takes up this percentage of the viewport.\n  //  The following scenarios assume [viewPercentage] is undefined.\n  //  - If the new range is more than 50% of the viewport, zoom out to a level\n  //  where\n  //    the range is 1/5 of the viewport.\n  //  - If the new range is already centered, update the zoom level for the\n  //  viewport\n  //    to cover 1/5 of the viewport.\n  //  - Otherwise, preserve the zoom range.\n  //\n  time?: {\n    start: time;\n    end?: time;\n    viewPercentage?: number;\n  };\n  // Find the track with a given uri in the current workspace and scroll it into\n  // view. Iftrack is nested inside a track group, scroll to that track group\n  // instead. If `expandGroup` == true, open the track group and scroll to the\n  // track.\n  // TODO(primiano): 90% of the times we seem to want expandGroup: true, so we\n  // should probably flip the default value, and pass false in the few places\n  // where we do NOT want this behavior.\n  track?: {\n    uri: string;\n    expandGroup?: boolean;\n  };\n}\n\n// TODO(primiano): remove this injection once we plumb Trace into all the\n// components. Right now too many places need this. This is a temporary solution\n// to avoid too many invasive refactorings at once.\n\ntype ScrollToFunction = (a: ScrollToArgs) => void;\nlet _scrollToFunction: ScrollToFunction | undefined = undefined;\n\n// If a Trace object is avilable, prefer Trace.scrollTo(). It points to the\n// same function.\nexport function scrollTo(args: ScrollToArgs) {\n  _scrollToFunction?.(args);\n}\n\nexport function setScrollToFunction(f: ScrollToFunction | undefined) {\n  _scrollToFunction = f;\n}\n"]}
{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/public/utils.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAMjC,oCA2EC;AAED,gDAWC;AAED,gDAMC;AAID,sFASC;AAjHD,yCAAqC;AAErC,uCAAsC;AAEtC,SAAgB,YAAY,CAC1B,IAaE;IAEF,MAAM,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,WAAW,EACX,UAAU,EACV,GAAG,EACH,GAAG,EACH,QAAQ,EACR,GAAG,EACH,IAAI,EACJ,WAAW,EACX,QAAQ,GACT,GAAG,IAAI,CAAC;IAET,MAAM,OAAO,GAAG,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,QAAQ,CAAC;IACzE,MAAM,OAAO,GAAG,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,CAAC;IACpD,MAAM,OAAO,GAAG,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,CAAC;IACpD,MAAM,cAAc,GAAG,WAAW,KAAK,SAAS,IAAI,WAAW,KAAK,IAAI,CAAC;IACzE,MAAM,aAAa,GAAG,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,CAAC;IACtE,MAAM,WAAW,GAAG,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,CAAC;IAChE,MAAM,MAAM,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;IACjD,MAAM,MAAM,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;IACjD,MAAM,MAAM,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;IACjD,MAAM,OAAO,GAAG,IAAI,KAAK,SAAS,CAAC;IACnC,MAAM,aAAa,GAAG,WAAW,KAAK,SAAS,IAAI,WAAW,CAAC;IAC/D,MAAM,UAAU,GAAG,QAAQ,KAAK,SAAS,IAAI,QAAQ,CAAC;IAEtD,uDAAuD;IACvD,0DAA0D;IAC1D,kCAAkC;IAClC,MAAM,UAAU,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IAE/C,IAAI,aAAa,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;QACvC,OAAO,GAAG,IAAI,KAAK,GAAG,GAAG,CAAC;IAC5B,CAAC;SAAM,IAAI,UAAU,IAAI,OAAO,IAAI,WAAW,EAAE,CAAC;QAChD,OAAO,GAAG,IAAI,KAAK,QAAQ,GAAG,CAAC;IACjC,CAAC;SAAM,IAAI,UAAU,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;QAC3C,OAAO,GAAG,IAAI,IAAI,GAAG,EAAE,CAAC;IAC1B,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QACnB,OAAO,GAAG,IAAI,EAAE,CAAC;IACnB,CAAC;SAAM,IAAI,OAAO,IAAI,MAAM,IAAI,cAAc,EAAE,CAAC;QAC/C,OAAO,GAAG,WAAW,IAAI,GAAG,EAAE,CAAC;IACjC,CAAC;SAAM,IAAI,OAAO,IAAI,MAAM,EAAE,CAAC;QAC7B,OAAO,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;SAAM,IAAI,aAAa,IAAI,MAAM,EAAE,CAAC;QACnC,OAAO,GAAG,UAAU,IAAI,GAAG,EAAE,CAAC;IAChC,CAAC;SAAM,IAAI,MAAM,EAAE,CAAC;QAClB,OAAO,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QACnB,OAAO,SAAS,IAAI,GAAG,UAAU,EAAE,CAAC;IACtC,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QACnB,OAAO,SAAS,IAAI,GAAG,UAAU,EAAE,CAAC;IACtC,CAAC;SAAM,IAAI,MAAM,EAAE,CAAC;QAClB,OAAO,QAAQ,GAAG,GAAG,UAAU,EAAE,CAAC;IACpC,CAAC;SAAM,IAAI,OAAO,EAAE,CAAC;QACnB,OAAO,WAAW,IAAI,EAAE,CAAC;IAC3B,CAAC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAgB,kBAAkB,CAChC,IAAmB,EACnB,IAAmB;IAEnB,IAAI,IAAA,cAAM,EAAC,IAAI,CAAC,EAAE,CAAC;QACjB,OAAO,YAAY,IAAI,EAAE,CAAC;IAC5B,CAAC;SAAM,IAAI,IAAA,cAAM,EAAC,IAAI,CAAC,EAAE,CAAC;QACxB,OAAO,WAAW,IAAI,EAAE,CAAC;IAC3B,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IAChD,CAAC;AACH,CAAC;AAED,SAAgB,kBAAkB,CAAC,IAAmB,EAAE,IAAY;IAClE,IAAI,IAAA,cAAM,EAAC,IAAI,CAAC,EAAE,CAAC;QACjB,OAAO,YAAY,IAAI,WAAW,IAAI,EAAE,CAAC;IAC3C,CAAC;SAAM,CAAC;QACN,OAAO,WAAW,IAAI,EAAE,CAAC;IAC3B,CAAC;AACH,CAAC;AAED,2EAA2E;AAC3E,iCAAiC;AAC1B,KAAK,UAAU,qCAAqC,CACzD,KAAY;IAEZ,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,wBAAwB,EAAE,CAAC;IAC/D,IAAI,IAAA,cAAM,EAAC,KAAK,CAAC,EAAE,CAAC;QAClB,OAAO,IAAI,eAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9C,CAAC;SAAM,CAAC;QACN,OAAO,KAAK,CAAC,QAAQ,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;IACnD,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {exists} from '../base/utils';\nimport {Trace} from './trace';\nimport {TimeSpan} from '../base/time';\n\nexport function getTrackName(\n  args: Partial<{\n    name: string | null;\n    utid: number | null;\n    processName: string | null;\n    pid: number | null;\n    threadName: string | null;\n    tid: number | null;\n    upid: number | null;\n    userName: string | null;\n    uid: number | null;\n    kind: string;\n    threadTrack: boolean;\n    uidTrack: boolean;\n  }>,\n) {\n  const {\n    name,\n    upid,\n    utid,\n    processName,\n    threadName,\n    pid,\n    tid,\n    userName,\n    uid,\n    kind,\n    threadTrack,\n    uidTrack,\n  } = args;\n\n  const hasName = name !== undefined && name !== null && name !== '[NULL]';\n  const hasUpid = upid !== undefined && upid !== null;\n  const hasUtid = utid !== undefined && utid !== null;\n  const hasProcessName = processName !== undefined && processName !== null;\n  const hasThreadName = threadName !== undefined && threadName !== null;\n  const hasUserName = userName !== undefined && userName !== null;\n  const hasTid = tid !== undefined && tid !== null;\n  const hasPid = pid !== undefined && pid !== null;\n  const hasUid = uid !== undefined && uid !== null;\n  const hasKind = kind !== undefined;\n  const isThreadTrack = threadTrack !== undefined && threadTrack;\n  const isUidTrack = uidTrack !== undefined && uidTrack;\n\n  // If we don't have any useful information (better than\n  // upid/utid) we show the track kind to help with tracking\n  // down where this is coming from.\n  const kindSuffix = hasKind ? ` (${kind})` : '';\n\n  if (isThreadTrack && hasName && hasTid) {\n    return `${name} (${tid})`;\n  } else if (isUidTrack && hasName && hasUserName) {\n    return `${name} (${userName})`;\n  } else if (isUidTrack && hasName && hasUid) {\n    return `${name} ${uid}`;\n  } else if (hasName) {\n    return `${name}`;\n  } else if (hasUpid && hasPid && hasProcessName) {\n    return `${processName} ${pid}`;\n  } else if (hasUpid && hasPid) {\n    return `Process ${pid}`;\n  } else if (hasThreadName && hasTid) {\n    return `${threadName} ${tid}`;\n  } else if (hasTid) {\n    return `Thread ${tid}`;\n  } else if (hasUpid) {\n    return `upid: ${upid}${kindSuffix}`;\n  } else if (hasUtid) {\n    return `utid: ${utid}${kindSuffix}`;\n  } else if (hasUid) {\n    return `uid: ${uid}${kindSuffix}`;\n  } else if (hasKind) {\n    return `Unnamed ${kind}`;\n  }\n  return 'Unknown';\n}\n\nexport function getThreadOrProcUri(\n  upid: number | null,\n  utid: number | null,\n): string {\n  if (exists(upid)) {\n    return `/process_${upid}`;\n  } else if (exists(utid)) {\n    return `/thread_${utid}`;\n  } else {\n    throw new Error('No upid or utid defined...');\n  }\n}\n\nexport function getThreadUriPrefix(upid: number | null, utid: number): string {\n  if (exists(upid)) {\n    return `/process_${upid}/thread_${utid}`;\n  } else {\n    return `/thread_${utid}`;\n  }\n}\n\n// Returns the time span of the current selection, or the visible window if\n// there is no current selection.\nexport async function getTimeSpanOfSelectionOrVisibleWindow(\n  trace: Trace,\n): Promise<TimeSpan> {\n  const range = await trace.selection.findTimeRangeOfSelection();\n  if (exists(range)) {\n    return new TimeSpan(range.start, range.end);\n  } else {\n    return trace.timeline.visibleWindow.toTimeSpan();\n  }\n}\n"]}
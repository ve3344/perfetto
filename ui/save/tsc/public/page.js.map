{"version":3,"file":"page.js","sourceRoot":"","sources":["../../../src/public/page.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Trace} from './trace';\n\n/**\n * Allows to register custom page endpoints that response to given routes, e.g.\n * /viewer, /record etc.\n */\nexport interface PageManager {\n  /**\n   * Example usage:\n   *   registerPage({route: '/foo', page: FooPage})\n   *   class FooPage implements m.ClassComponent<PageWithTrace> {\n   *     view({attrs}: m.CVnode<PageWithTrace>) {\n   *        return m('div', ...\n   *            onclick: () => attrs.trace.timeline.zoom(...);\n   *        )\n   *     }\n   *   }\n   */\n  registerPage(pageHandler: PageHandler): Disposable;\n}\n\n/**\n * Mithril attrs for pages that don't require a Trace object. These pages are\n * always accessible, even before a trace is loaded.\n */\nexport interface PageAttrs {\n  subpage?: string;\n  trace?: Trace;\n}\n\n/**\n * Mithril attrs for pages that require a Trace object. These pages are\n * reachable only after a trace is loaded. Trying to access the route without a\n * trace loaded results in the HomePage (route: '/') to be displayed instead.\n */\nexport interface PageWithTraceAttrs extends PageAttrs {\n  trace: Trace;\n}\n\nexport type PageHandler<PWT = m.ComponentTypes<PageWithTraceAttrs>> = {\n  route: string; // e.g. '/' (default route), '/viewer'\n  pluginId?: string; // Not needed, the internal impl will fill it.\n} & (\n  | {\n      // If true, the route will be available even when there is no trace\n      // loaded. The component needs to deal with a possibly undefined attr.\n      traceless: true;\n      page: m.ComponentTypes<PageAttrs>;\n    }\n  | {\n      // If is omitted, the route will be available only when a trace is loaded.\n      // The component is guarranteed to get a defined Trace in its attrs.\n      traceless?: false;\n      page: PWT;\n    }\n);\n"]}
{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../../src/public/plugin.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Trace} from './trace';\nimport {App} from './app';\n\n/**\n * This interface defines the shape of the plugins's class constructor (i.e. the\n * the constructor and all static members of the plugin's class.\n *\n * This class constructor is registered with the core.\n *\n * On trace load, the core will create a new class instance by calling new on\n * this constructor and then call its onTraceLoad() function.\n */\nexport interface PerfettoPluginStatic<T extends PerfettoPlugin> {\n  readonly id: string;\n  readonly dependencies?: ReadonlyArray<PerfettoPluginStatic<PerfettoPlugin>>;\n  onActivate?(app: App): void;\n  metricVisualisations?(): MetricVisualisation[];\n  new (trace: Trace): T;\n}\n\n/**\n * This interface defines the shape of a plugin's trace-scoped instance, which\n * is created from the class constructor above at trace load time.\n */\nexport interface PerfettoPlugin {\n  onTraceLoad?(ctx: Trace): Promise<void>;\n}\n\nexport interface MetricVisualisation {\n  // The name of the metric e.g. 'android_camera'\n  metric: string;\n\n  // A vega or vega-lite visualisation spec.\n  // The data from the metric under path will be exposed as a\n  // datasource named \"metric\" in Vega(-Lite)\n  spec: string;\n\n  // A path index into the metric.\n  // For example if the metric returns the folowing protobuf:\n  // {\n  //   foo {\n  //     bar {\n  //       baz: { name: \"a\" }\n  //       baz: { name: \"b\" }\n  //       baz: { name: \"c\" }\n  //     }\n  //   }\n  // }\n  // That becomes the following json:\n  // { \"foo\": { \"bar\": { \"baz\": [\n  //  {\"name\": \"a\"},\n  //  {\"name\": \"b\"},\n  //  {\"name\": \"c\"},\n  // ]}}}\n  // And given path = [\"foo\", \"bar\", \"baz\"]\n  // We extract:\n  // [ {\"name\": \"a\"}, {\"name\": \"b\"}, {\"name\": \"c\"} ]\n  // And pass that to the vega(-lite) visualisation.\n  path: string[];\n}\n\nexport interface PluginManager {\n  getPlugin<T extends PerfettoPlugin>(plugin: PerfettoPluginStatic<T>): T;\n  metricVisualisations(): MetricVisualisation[];\n}\n"]}
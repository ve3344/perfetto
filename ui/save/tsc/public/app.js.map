{"version":3,"file":"app.js","sourceRoot":"","sources":["../../../src/public/app.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {RouteArgs} from './route_schema';\nimport {CommandManager} from './command';\nimport {OmniboxManager} from './omnibox';\nimport {SidebarManager} from './sidebar';\nimport {Analytics} from './analytics';\nimport {PluginManager} from './plugin';\nimport {Trace} from './trace';\nimport {PageManager} from './page';\nimport {FeatureFlagManager} from './feature_flag';\n\n/**\n * The API endpoint to interact programmaticaly with the UI before a trace has\n * been loaded. This is passed to plugins' OnActivate().\n */\nexport interface App {\n  /**\n   * The unique id for this plugin (as specified in the PluginDescriptor),\n   * or '__core__' for the interface exposed to the core.\n   */\n  readonly pluginId: string;\n  readonly commands: CommandManager;\n  readonly sidebar: SidebarManager;\n  readonly omnibox: OmniboxManager;\n  readonly analytics: Analytics;\n  readonly plugins: PluginManager;\n  readonly pages: PageManager;\n  readonly featureFlags: FeatureFlagManager;\n\n  /**\n   * The parsed querystring passed when starting the app, before any navigation\n   * happens.\n   */\n  readonly initialRouteArgs: RouteArgs;\n\n  /**\n   * Returns the current trace object, if any. The instance being returned is\n   * bound to the same plugin of App.pluginId.\n   */\n  readonly trace?: Trace;\n\n  // TODO(primiano): this should be needed in extremely rare cases. We should\n  // probably switch to mithril auto-redraw at some point.\n  scheduleFullRedraw(force?: 'force'): void;\n\n  /**\n   * Navigate to a new page.\n   */\n  navigate(newHash: string): void;\n\n  openTraceFromFile(file: File): void;\n  openTraceFromUrl(url: string): void;\n  openTraceFromBuffer(args: {\n    buffer: ArrayBuffer;\n    title: string;\n    fileName: string;\n  }): void;\n}\n"]}
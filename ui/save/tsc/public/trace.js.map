{"version":3,"file":"trace.js","sourceRoot":"","sources":["../../../src/public/trace.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAqFpB,QAAA,YAAY,GAAG,iBAAiB,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Migrate, Store} from '../base/store';\nimport {TraceInfo} from './trace_info';\nimport {Engine} from '../trace_processor/engine';\nimport {App} from './app';\nimport {TabManager} from './tab';\nimport {TrackManager} from './track';\nimport {Timeline} from './timeline';\nimport {Workspace, WorkspaceManager} from './workspace';\nimport {SelectionManager} from './selection';\nimport {ScrollToArgs} from './scroll_helper';\nimport {NoteManager} from './note';\nimport {DisposableStack} from '../base/disposable_stack';\nimport {Evt} from '../base/events';\n\n// Lists all the possible event listeners using the key as the event name and\n// the type as the type of the callback.\nexport interface EventListeners {\n  traceready: () => Promise<void> | void;\n}\n\n/**\n * The main API endpoint to interact programmaticaly with the UI and alter its\n * state once a trace is loaded. There are N+1 instances of this interface,\n * one for each plugin and one for the core (which, however, gets to see the\n * full AppImpl behind this to acces all the internal methods).\n * This interface is passed to plugins' onTraceLoad() hook and is injected\n * pretty much everywhere in core.\n */\nexport interface Trace extends App {\n  readonly engine: Engine;\n  readonly notes: NoteManager;\n  readonly timeline: Timeline;\n  readonly tabs: TabManager;\n  readonly tracks: TrackManager;\n  readonly selection: SelectionManager;\n  readonly workspace: Workspace;\n  readonly workspaces: WorkspaceManager;\n  readonly traceInfo: TraceInfo;\n\n  // Events.\n  onTraceReady: Evt<void>;\n\n  // Scrolls to the given track and/or time. Does NOT change the current\n  // selection.\n  scrollTo(args: ScrollToArgs): void;\n\n  // Create a store mounted over the top of this plugin's persistent state.\n  mountStore<T>(migrate: Migrate<T>): Store<T>;\n\n  // Returns the blob of the current trace file.\n  // If the trace is opened from a file or postmessage, the blob is returned\n  // immediately. If the trace is opened from URL, this causes a re-download of\n  // the trace. It will throw if traceInfo.downloadable === false.\n  getTraceFile(): Promise<Blob>;\n\n  // List of errors that were encountered while loading the trace by the TS\n  // code. These are on top of traceInfo.importErrors, which is a summary of\n  // what TraceProcessor reports on the stats table at import time.\n  get loadingErrors(): ReadonlyArray<string>;\n\n  // When the trace is opened via postMessage deep-linking, returns the sub-set\n  // of postMessageData.pluginArgs[pluginId] for the current plugin. If not\n  // present returns undefined.\n  readonly openerPluginArgs?: {[key: string]: unknown};\n\n  // Trace scoped disposables. Will be destroyed when the trace is unloaded.\n  readonly trash: DisposableStack;\n}\n\n/**\n * A convenience interface to inject the App in Mithril components.\n * Example usage:\n *\n * class MyComponent implements m.ClassComponent<TraceAttrs> {\n *   oncreate({attrs}: m.CVnodeDOM<AppAttrs>): void {\n *     attrs.trace.engine.runQuery(...);\n *   }\n * }\n */\nexport interface TraceAttrs {\n  trace: Trace;\n}\n\nexport const TRACE_SUFFIX = '.perfetto-trace';\n"]}
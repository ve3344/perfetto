{"version":3,"file":"details_panel.js","sourceRoot":"","sources":["../../../src/public/details_panel.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Selection, TrackEventSelection} from './selection';\nimport {z} from 'zod';\n\nexport interface DetailsPanel {\n  render(selection: Selection): m.Children;\n  isLoading?(): boolean;\n}\n\nexport interface TrackEventDetailsPanelSerializeArgs<T> {\n  // The Zod schema which will be used the parse the state in a serialized\n  // permalink JSON object.\n  readonly schema: z.ZodType<T>;\n\n  // The serializable state of the details panel. The usage of this field is\n  // as follows\n  //  1) default initialize this field in the constructor.\n  //  2) if the trace is being restored from a permalink, the UI will use\n  //     `schema` to parse the serialized state and will write the result into\n  //     `state`. If parsing failed or the trace is not being restored,\n  //     `state` will not be touched.\n  //  3) if a permalink is requested, the UI will read the value of `state`\n  //     and stash it in the permalink serialzed state.\n  //\n  // This flow has the following consequences:\n  //  1) Details panels *must* respect changes to this object between their\n  //     constructor and the first call to `load()`. This is the point where\n  //     the core will \"inject\" the permalink deserialized object\n  //     if available.\n  //  2) The `state` object *must* be serializable: that is, it should be a\n  //     pure Javascript object.\n  state: T;\n}\n\nexport interface TrackEventDetailsPanel {\n  // Optional: Do any loading required to render the details panel in here and\n  // the core will:\n  // - Ensure that no more than one concurrent loads are enqueued at any given\n  //   time in order to keep the UI snappy.\n  // - Hold off switching to this tab for up to around 50ms while this loading\n  //   is going, to avoid flickering when loading is fast.\n  load?(id: TrackEventSelection): Promise<void>;\n\n  // Called every render cycle to render the details panel. Note: This function\n  // is called regardless of whether |load| has completed yet.\n  render(): m.Children;\n\n  // Optional interface to implement by details panels which want to support\n  // saving/restoring state from a permalink.\n  readonly serialization?: TrackEventDetailsPanelSerializeArgs<unknown>;\n}\n"]}
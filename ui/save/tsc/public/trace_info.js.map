{"version":3,"file":"trace_info.js","sourceRoot":"","sources":["../../../src/public/trace_info.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {time} from '../base/time';\n\nexport interface TraceInfo {\n  readonly traceTitle: string; // File name and size of the current trace.\n  readonly traceUrl: string; // URL of the Trace.\n\n  readonly start: time;\n  readonly end: time;\n\n  // This is the ts value at the time of the Unix epoch.\n  // Normally some large negative value, because the unix epoch is normally in\n  // the past compared to ts=0.\n  readonly realtimeOffset: time;\n\n  // This is the timestamp that we should use for our offset when in UTC mode.\n  // Usually the most recent UTC midnight compared to the trace start time.\n  readonly utcOffset: time;\n\n  // Trace TZ is like UTC but keeps into account also the timezone_off_mins\n  // recorded into the trace, to show timestamps in the device local time.\n  readonly traceTzOffset: time;\n\n  // The list of CPUs in the trace\n  readonly cpus: number[];\n\n  // The number of import/analysis errors present in the `stats` table.\n  readonly importErrors: number;\n\n  // The trace type inferred by TraceProcessor (e.g. 'proto', 'json, ...).\n  // See TraceTypeToString() in src/trace_processor/util/trace_type.cc for\n  // all the available types.\n  readonly traceType?: string;\n\n  // True if the trace contains any ftrace data (sched or other ftrace events).\n  readonly hasFtrace: boolean;\n\n  // The UUID of the trace. This is generated by TraceProcessor by either\n  // looking at the TraceUuid packet emitted by traced or, as a fallback, by\n  // hashing the first KB of the trace. This can be an empty string in rare\n  // cases (e.g., opening an empty trace).\n  readonly uuid: string;\n\n  // Wheteher the current trace has been successfully stored into cache storage.\n  readonly cached: boolean;\n\n  // Returns true if the current trace can be downloaded via getTraceFile().\n  // The trace isn't downloadable in the following cases:\n  // - It comes from a source (e.g. HTTP+RPC) that doesn't support re-download\n  //   due to technical limitations.\n  // - Download is disabled because the trace was pushed via postMessage and\n  //   the caller has asked to disable downloads.\n  readonly downloadable: boolean;\n}\n"]}
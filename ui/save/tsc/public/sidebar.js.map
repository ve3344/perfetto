{"version":3,"file":"sidebar.js","sourceRoot":"","sources":["../../../src/public/sidebar.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,gEAAgE;AACnD,QAAA,gBAAgB,GAAG;IAC9B,UAAU,EAAE;QACV,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,4BAA4B;KACtC;IACD,aAAa,EAAE;QACb,KAAK,EAAE,eAAe;QACtB,OAAO,EAAE,8BAA8B;KACxC;IACD,aAAa,EAAE;QACb,KAAK,EAAE,eAAe;QACtB,OAAO,EAAE,0BAA0B;KACpC;IACD,cAAc,EAAE;QACd,KAAK,EAAE,gBAAgB;QACvB,OAAO,EAAE,uBAAuB;KACjC;IACD,OAAO,EAAE;QACP,KAAK,EAAE,SAAS;QAChB,OAAO,EAAE,sBAAsB;KAChC;CACO,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// For now sections are fixed and cannot be extended by plugins.\nexport const SIDEBAR_SECTIONS = {\n  navigation: {\n    title: 'Navigation',\n    summary: 'Open or record a new trace',\n  },\n  current_trace: {\n    title: 'Current Trace',\n    summary: 'Actions on the current trace',\n  },\n  convert_trace: {\n    title: 'Convert trace',\n    summary: 'Convert to other formats',\n  },\n  example_traces: {\n    title: 'Example Traces',\n    summary: 'Open an example trace',\n  },\n  support: {\n    title: 'Support',\n    summary: 'Documentation & Bugs',\n  },\n} as const;\n\nexport type SidebarSections = keyof typeof SIDEBAR_SECTIONS;\n\nexport interface SidebarManager {\n  readonly enabled: boolean;\n\n  /**\n   * Adds a new menu item to the sidebar.\n   * All entries must map to a command. This will allow the shortcut and\n   * optional shortcut to be displayed on the UI.\n   */\n  addMenuItem(menuItem: SidebarMenuItem): void;\n\n  /**\n   * Gets the current visibility of the sidebar.\n   */\n  get visible(): boolean;\n\n  /**\n   * Toggles the visibility of the sidebar. Can only be called when\n   * `sidebarEnabled` returns `ENABLED`.\n   */\n  toggleVisibility(): void;\n}\n\nexport type SidebarMenuItem = {\n  readonly section: SidebarSections;\n  readonly sortOrder?: number;\n\n  // The properties below can be mutated by passing a callback rather than a\n  // direct value. The callback is invoked on every render frame, keep it cheap.\n  // readonly text: string | (() => string);\n  readonly icon?: string | (() => string);\n  readonly tooltip?: string | (() => string);\n  readonly cssClass?: string | (() => string); // Without trailing '.'.\n\n  // If false or omitted the item works normally.\n  // If true the item is striken through and the action/href will be a no-op.\n  // If a string, the item acts as disabled and clicking on it shows a popup\n  // that shows the returned text (the string has \"disabled reason\" semantic);\n  readonly disabled?: string | boolean | (() => string | boolean);\n\n  // One of the three following arguments must be specified.\n} & (\n  | {\n      /** The text of the menu entry. Required. */\n      readonly text: string | (() => string);\n\n      /**\n       * The URL to navigate to. It can be either:\n       * - A local route (e.g. ''#!/query').\n       * - An absolute URL (e.g. 'https://example.com'). In this case the link will\n       *   be open in a target=_blank new tag.\n       */\n      readonly href: string;\n    }\n  | {\n      /** The text of the menu entry. Required. */\n      readonly text: string | (() => string);\n\n      /**\n       * The function that will be invoked when clicking. If the function returns\n       * a promise, a spinner will be drawn next to the sidebar entry until the\n       * promise resolves.\n       */\n      readonly action: () => unknown | Promise<unknown>;\n\n      /** Optional. If omitted href = '#'. */\n      readonly href?: string;\n    }\n  | {\n      /** Optional. If omitted uses the command name. */\n      readonly text?: string | (() => string);\n\n      /** The ID of the command that will be invoked when clicking */\n      readonly commandId: string;\n    }\n);\n"]}
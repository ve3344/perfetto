{"version":3,"file":"feature_flag.js","sourceRoot":"","sources":["../../../src/public/feature_flag.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AA+CjC,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,oCAAmB,CAAA;IACnB,uCAAsB,CAAA;IACtB,yCAAwB,CAAA;AAC1B,CAAC,EAJW,aAAa,6BAAb,aAAa,QAIxB","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport interface FeatureFlagManager {\n  register(settings: FlagSettings): Flag;\n}\n\nexport interface FlagSettings {\n  id: string;\n  defaultValue: boolean;\n  description: string;\n  name?: string;\n  devOnly?: boolean;\n}\n\nexport interface Flag {\n  // A unique identifier for this flag (\"magicSorting\")\n  readonly id: string;\n\n  // The name of the flag the user sees (\"New track sorting algorithm\")\n  readonly name: string;\n\n  // A longer description which is displayed to the user.\n  // \"Sort tracks using an embedded tfLite model based on your expression\n  // while waiting for the trace to load.\"\n  readonly description: string;\n\n  // Whether the flag defaults to true or false.\n  // If !flag.isOverridden() then flag.get() === flag.defaultValue\n  readonly defaultValue: boolean;\n\n  // Get the current value of the flag.\n  get(): boolean;\n\n  // Override the flag and persist the new value.\n  set(value: boolean): void;\n\n  // If the flag has been overridden.\n  // Note: A flag can be overridden to its default value.\n  isOverridden(): boolean;\n\n  // Reset the flag to its default setting.\n  reset(): void;\n\n  // Get the current state of the flag.\n  overriddenState(): OverrideState;\n}\n\nexport enum OverrideState {\n  DEFAULT = 'DEFAULT',\n  TRUE = 'OVERRIDE_TRUE',\n  FALSE = 'OVERRIDE_FALSE',\n}\n"]}
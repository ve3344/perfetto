{"version":3,"file":"pivot_table_query_generator.js","sourceRoot":"","sources":["../../../src/core/pivot_table_query_generator.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {sqliteString} from '../base/string_utils';\nimport {\n  PivotTableQuery,\n  PivotTableState,\n  Aggregation,\n  TableColumn,\n} from './pivot_table_types';\nimport {AreaSelection} from '../public/selection';\nimport {SLICE_TRACK_KIND} from '../public/track_kinds';\n\ninterface Table {\n  name: string;\n  displayName: string;\n  columns: string[];\n}\n\nconst sliceTable = {\n  name: '_slice_with_thread_and_process_info',\n  displayName: 'slice',\n  columns: [\n    'type',\n    'ts',\n    'dur',\n    'category',\n    'name',\n    'depth',\n    'pid',\n    'process_name',\n    'tid',\n    'thread_name',\n  ],\n};\n\n// Columns of `slice` table available for aggregation.\nexport const sliceAggregationColumns = [\n  'ts',\n  'dur',\n  'depth',\n  'thread_ts',\n  'thread_dur',\n  'thread_instruction_count',\n  'thread_instruction_delta',\n];\n\n// List of available tables to query, used to populate selectors of pivot\n// columns in the UI.\nexport const tables: Table[] = [sliceTable];\n\n// Exception thrown by query generator in case incoming parameters are not\n// suitable in order to build a correct query; these are caught by the UI and\n// displayed to the user.\nexport class QueryGeneratorError extends Error {}\n\n// Internal column name for different rollover levels of aggregate columns.\nfunction aggregationAlias(aggregationIndex: number): string {\n  return `agg_${aggregationIndex}`;\n}\n\nexport function areaFilters(\n  area: AreaSelection,\n): {op: (cols: string[]) => string; columns: string[]}[] {\n  return [\n    {\n      op: (cols) => `${cols[0]} + ${cols[1]} > ${area.start}`,\n      columns: ['ts', 'dur'],\n    },\n    {op: (cols) => `${cols[0]} < ${area.end}`, columns: ['ts']},\n    {\n      op: (cols) =>\n        `${cols[0]} in (${getSelectedTrackSqlIds(area).join(', ')})`,\n      columns: ['track_id'],\n    },\n  ];\n}\n\nfunction expression(column: TableColumn): string {\n  switch (column.kind) {\n    case 'regular':\n      return `${column.table}.${column.column}`;\n    case 'argument':\n      return extractArgumentExpression(column.argument, sliceTable.name);\n  }\n}\n\nfunction aggregationExpression(aggregation: Aggregation): string {\n  if (aggregation.aggregationFunction === 'COUNT') {\n    return 'COUNT()';\n  }\n  return `${aggregation.aggregationFunction}(${expression(\n    aggregation.column,\n  )})`;\n}\n\nfunction extractArgumentExpression(argument: string, table?: string) {\n  const prefix = table === undefined ? '' : `${table}.`;\n  return `extract_arg(${prefix}arg_set_id, ${sqliteString(argument)})`;\n}\n\nexport function aggregationIndex(pivotColumns: number, aggregationNo: number) {\n  return pivotColumns + aggregationNo;\n}\n\nexport function generateQueryFromState(\n  state: PivotTableState,\n): PivotTableQuery {\n  if (state.selectionArea === undefined) {\n    throw new QueryGeneratorError('Should not be called without area');\n  }\n\n  const sliceTableAggregations = [...state.selectedAggregations.values()];\n  if (sliceTableAggregations.length === 0) {\n    throw new QueryGeneratorError('No aggregations selected');\n  }\n\n  const pivots = state.selectedPivots;\n\n  const aggregations = sliceTableAggregations.map(\n    (agg, index) =>\n      `${aggregationExpression(agg)} as ${aggregationAlias(index)}`,\n  );\n  const countIndex = aggregations.length;\n  // Extra count aggregation, needed in order to compute combined averages.\n  aggregations.push('COUNT() as hidden_count');\n\n  const renderedPivots = pivots.map(expression);\n  const sortClauses: string[] = [];\n  for (let i = 0; i < sliceTableAggregations.length; i++) {\n    const sortDirection = sliceTableAggregations[i].sortDirection;\n    if (sortDirection !== undefined) {\n      sortClauses.push(`${aggregationAlias(i)} ${sortDirection}`);\n    }\n  }\n\n  const whereClause = state.constrainToArea\n    ? `where ${areaFilters(state.selectionArea)\n        .map((f) => f.op(f.columns))\n        .join(' and\\n')}`\n    : '';\n  const text = `\n    INCLUDE PERFETTO MODULE slices.slices;\n\n    select\n      ${renderedPivots.concat(aggregations).join(',\\n')}\n    from ${sliceTable.name}\n    ${whereClause}\n    group by ${renderedPivots.join(', ')}\n    ${sortClauses.length > 0 ? 'order by ' + sortClauses.join(', ') : ''}\n  `;\n\n  return {\n    text,\n    metadata: {\n      pivotColumns: pivots,\n      aggregationColumns: sliceTableAggregations,\n      countIndex,\n    },\n  };\n}\n\nfunction getSelectedTrackSqlIds(area: AreaSelection): number[] {\n  const selectedTrackKeys: number[] = [];\n  for (const trackInfo of area.tracks) {\n    if (trackInfo?.tags?.kind === SLICE_TRACK_KIND) {\n      trackInfo.tags.trackIds &&\n        selectedTrackKeys.push(...trackInfo.tags.trackIds);\n    }\n  }\n  return selectedTrackKeys;\n}\n"]}
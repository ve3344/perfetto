{"version":3,"file":"trace_source.js","sourceRoot":"","sources":["../../../src/core/trace_source.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {SerializedAppState} from './state_serialization_schema';\n\nexport type TraceSource =\n  | TraceFileSource\n  | TraceArrayBufferSource\n  | TraceUrlSource\n  | TraceHttpRpcSource;\n\nexport interface TraceFileSource {\n  type: 'FILE';\n  file: File;\n}\n\nexport interface TraceUrlSource {\n  type: 'URL';\n  url: string;\n\n  // When loading from a permalink, the permalink might supply also the app\n  // state alongside the URL of the trace.\n  serializedAppState?: SerializedAppState;\n}\n\nexport interface TraceHttpRpcSource {\n  type: 'HTTP_RPC';\n}\n\nexport interface TraceArrayBufferSource extends PostedTrace {\n  type: 'ARRAY_BUFFER';\n  // See PostedTrace (which this interface extends).\n}\n\nexport interface PostedTrace {\n  buffer: ArrayBuffer;\n  title: string;\n  fileName?: string;\n  url?: string;\n\n  // |uuid| is set only when loading via ?local_cache_key=1234. When set,\n  // this matches global.state.traceUuid, with the exception of the following\n  // time window: When a trace T1 is loaded and the user loads another trace T2,\n  // this |uuid| will be == T2, but the globals.state.traceUuid will be\n  // temporarily == T1 until T2 has been loaded (consistently to what happens\n  // with all other state fields).\n  uuid?: string;\n\n  // if |localOnly| is true then the trace should not be shared or downloaded.\n  localOnly?: boolean;\n  keepApiOpen?: boolean;\n\n  // Allows to pass extra arguments to plugins. This can be read by plugins\n  // onTraceLoad() and can be used to trigger plugin-specific-behaviours (e.g.\n  // allow dashboards like APC to pass extra data to materialize onto tracks).\n  // The format is the following:\n  // pluginArgs: {\n  //   'dev.perfetto.PluginFoo': { 'key1': 'value1', 'key2': 1234 }\n  //   'dev.perfetto.PluginBar': { 'key3': '...', 'key4': ... }\n  // }\n  pluginArgs?: {[pluginId: string]: {[key: string]: unknown}};\n}\n"]}
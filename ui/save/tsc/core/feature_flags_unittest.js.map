{"version":3,"file":"feature_flags_unittest.js","sourceRoot":"","sources":["../../../src/core/feature_flags_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {FlagsForTesting as Flags, FlagStore} from '../core/feature_flags';\n\nclass TestFlagStore implements FlagStore {\n  o: object = {};\n\n  load(): object {\n    return this.o;\n  }\n\n  save(o: object): void {\n    this.o = o;\n  }\n}\n\ntest('create flag', () => {\n  const flags = new Flags(new TestFlagStore());\n  const myFlag = flags.register({\n    id: 'myFlag',\n    defaultValue: false,\n    description: '',\n  });\n  expect(myFlag.get()).toEqual(false);\n  expect(myFlag.isOverridden()).toEqual(false);\n});\n\ntest('registering the same flag twice is an error', () => {\n  const flags = new Flags(new TestFlagStore());\n  flags.register({\n    id: 'foo',\n    defaultValue: false,\n    description: '',\n  });\n  expect(() =>\n    flags.register({\n      id: 'foo',\n      defaultValue: false,\n      description: '',\n    }),\n  ).toThrow('Flag with id \"foo\" is already registered.');\n});\n\ntest('can override', () => {\n  const flags = new Flags(new TestFlagStore());\n  const foo = flags.register({\n    id: 'foo',\n    defaultValue: false,\n    description: '',\n  });\n  foo.set(true);\n  expect(foo.isOverridden()).toEqual(true);\n  expect(foo.get()).toEqual(true);\n});\n\ntest('overrides are persisted', () => {\n  const store = new TestFlagStore();\n  const flagsA = new Flags(store);\n  const fooA = flagsA.register({\n    id: 'foo',\n    defaultValue: true,\n    description: 'some description',\n  });\n\n  fooA.set(true);\n\n  const flagsB = new Flags(store);\n  const fooB = flagsB.register({\n    id: 'foo',\n    defaultValue: false,\n    description: 'a new description',\n  });\n\n  expect(fooB.get()).toEqual(true);\n  expect(fooB.isOverridden()).toEqual(true);\n});\n\ntest('flags can be reset', () => {\n  const flags = new Flags(new TestFlagStore());\n  const foo = flags.register({\n    id: 'foo',\n    defaultValue: false,\n    description: 'some description',\n  });\n\n  foo.set(false);\n  foo.reset();\n  expect(foo.get()).toEqual(false);\n  expect(foo.isOverridden()).toEqual(false);\n});\n\ntest('corrupt store is ignored', () => {\n  class Store {\n    load(): object {\n      return {foo: 'bad state'};\n    }\n\n    save(_: object): void {}\n  }\n  const flags = new Flags(new Store());\n  const foo = flags.register({\n    id: 'foo',\n    defaultValue: false,\n    description: 'some description',\n  });\n\n  expect(foo.isOverridden()).toEqual(false);\n});\n"]}
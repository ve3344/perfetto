{"version":3,"file":"analytics_impl.js","sourceRoot":"","sources":["../../../src/core/analytics_impl.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ErrorDetails} from '../base/logging';\nimport {getCurrentChannel} from './channels';\nimport {VERSION} from '../gen/perfetto_version';\nimport {Router} from './router';\nimport {Analytics, TraceCategories} from '../public/analytics';\n\nconst ANALYTICS_ID = 'G-BD89KT2P3C';\nconst PAGE_TITLE = 'no-page-title';\n\nfunction isValidUrl(s: string) {\n  let url;\n  try {\n    url = new URL(s);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === 'http:' || url.protocol === 'https:';\n}\n\nfunction getReferrerOverride(): string | undefined {\n  const route = Router.parseUrl(window.location.href);\n  const referrer = route.args.referrer;\n  if (referrer) {\n    return referrer;\n  } else {\n    return undefined;\n  }\n}\n\n// Get the referrer from either:\n// - If present: the referrer argument if present\n// - document.referrer\nfunction getReferrer(): string {\n  const referrer = getReferrerOverride();\n  if (referrer) {\n    if (isValidUrl(referrer)) {\n      return referrer;\n    } else {\n      // Unclear if GA discards non-URL referrers. Lets try faking\n      // a URL to test.\n      const name = referrer.replaceAll('_', '-');\n      return `https://${name}.example.com/converted_non_url_referrer`;\n    }\n  } else {\n    return document.referrer.split('?')[0];\n  }\n}\n\n// Interface exposed only to core (for the initialize method).\nexport interface AnalyticsInternal extends Analytics {\n  initialize(isInternalUser: boolean): void;\n}\n\nexport function initAnalytics(\n  testingMode: boolean,\n  embeddedMode: boolean,\n): AnalyticsInternal {\n  // Only initialize logging on the official site and on localhost (to catch\n  // analytics bugs when testing locally).\n  // Skip analytics is the fragment has \"testing=1\", this is used by UI tests.\n  // Skip analytics in embeddedMode since iFrames do not have the same access to\n  // local storage.\n  if (\n    (window.location.origin.startsWith('http://localhost:') ||\n      window.location.origin.endsWith('.perfetto.dev')) &&\n    !testingMode &&\n    !embeddedMode\n  ) {\n    return new AnalyticsImpl();\n  }\n  return new NullAnalytics();\n}\n\nconst gtagGlobals = window as {} as {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dataLayer: any[];\n  gtag: (command: string, event: string | Date, args?: {}) => void;\n};\n\nclass NullAnalytics implements AnalyticsInternal {\n  initialize(_: boolean) {}\n  logEvent(_category: TraceCategories | null, _event: string) {}\n  logError(_err: ErrorDetails) {}\n  isEnabled(): boolean {\n    return false;\n  }\n}\n\nclass AnalyticsImpl implements AnalyticsInternal {\n  private initialized_ = false;\n\n  constructor() {\n    // The code below is taken from the official Google Analytics docs [1] and\n    // adapted to TypeScript. We have it here rather than as an inline script\n    // in index.html (as suggested by GA's docs) because inline scripts don't\n    // play nicely with the CSP policy, at least in Firefox (Firefox doesn't\n    // support all CSP 3 features we use).\n    // [1] https://developers.google.com/analytics/devguides/collection/gtagjs .\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    gtagGlobals.dataLayer = gtagGlobals.dataLayer || [];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function gtagFunction(..._: any[]) {\n      // This needs to be a function and not a lambda. |arguments| behaves\n      // slightly differently in a lambda and breaks GA.\n      gtagGlobals.dataLayer.push(arguments);\n    }\n    gtagGlobals.gtag = gtagFunction;\n    gtagGlobals.gtag('js', new Date());\n  }\n\n  // This is callled only after the script that sets isInternalUser loads.\n  // It is fine to call updatePath() and log*() functions before initialize().\n  // The gtag() function internally enqueues all requests into |dataLayer|.\n  initialize(isInternalUser: boolean) {\n    if (this.initialized_) return;\n    this.initialized_ = true;\n    const script = document.createElement('script');\n    script.src = 'https://www.googletagmanager.com/gtag/js?id=' + ANALYTICS_ID;\n    script.defer = true;\n    document.head.appendChild(script);\n    const route = window.location.href;\n    console.log(\n      `GA initialized. route=${route}`,\n      `isInternalUser=${isInternalUser}`,\n    );\n    // GA's recommendation for SPAs is to disable automatic page views and\n    // manually send page_view events. See:\n    // https://developers.google.com/analytics/devguides/collection/gtagjs/pages#manual_pageviews\n    gtagGlobals.gtag('config', ANALYTICS_ID, {\n      allow_google_signals: false,\n      anonymize_ip: true,\n      page_location: route,\n      // Referrer as a URL including query string override.\n      page_referrer: getReferrer(),\n      send_page_view: false,\n      page_title: PAGE_TITLE,\n      perfetto_is_internal_user: isInternalUser ? '1' : '0',\n      perfetto_version: VERSION,\n      // Release channel (canary, stable, autopush)\n      perfetto_channel: getCurrentChannel(),\n      // Referrer *if overridden* via the query string else empty string.\n      perfetto_referrer_override: getReferrerOverride() ?? '',\n    });\n\n    gtagGlobals.gtag('event', 'page_view', {\n      page_path: route,\n      page_title: PAGE_TITLE,\n    });\n  }\n\n  logEvent(category: TraceCategories | null, event: string) {\n    gtagGlobals.gtag('event', event, {event_category: category});\n  }\n\n  logError(err: ErrorDetails) {\n    let stack = '';\n    for (const entry of err.stack) {\n      const shortLocation = entry.location.replace('frontend_bundle.js', '$');\n      stack += `${entry.name}(${shortLocation}),`;\n    }\n    // Strip trailing ',' (works also for empty strings without extra checks).\n    stack = stack.substring(0, stack.length - 1);\n\n    gtagGlobals.gtag('event', 'exception', {\n      description: err.message,\n      error_type: err.errType,\n\n      // As per GA4 all field are restrictred to 100 chars.\n      // page_title is the only one restricted to 1000 chars and we use that for\n      // the full crash report.\n      page_location: `http://crash?/${encodeURI(stack)}`,\n    });\n  }\n\n  isEnabled(): boolean {\n    return true;\n  }\n}\n"]}
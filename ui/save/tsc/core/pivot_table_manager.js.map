{"version":3,"file":"pivot_table_manager.js","sourceRoot":"","sources":["../../../src/core/pivot_table_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  PivotTableQuery,\n  PivotTableQueryMetadata,\n  PivotTableResult,\n  PivotTableState,\n  COUNT_AGGREGATION,\n  TableColumn,\n  toggleEnabled,\n  tableColumnEquals,\n  AggregationFunction,\n} from './pivot_table_types';\nimport {AreaSelection} from '../public/selection';\nimport {\n  aggregationIndex,\n  generateQueryFromState,\n} from './pivot_table_query_generator';\nimport {Aggregation, PivotTree} from './pivot_table_types';\nimport {Engine} from '../trace_processor/engine';\nimport {ColumnType} from '../trace_processor/query_result';\nimport {SortDirection} from '../base/comparison_utils';\nimport {assertTrue} from '../base/logging';\nimport {featureFlags} from './feature_flags';\n\nexport const PIVOT_TABLE_REDUX_FLAG = featureFlags.register({\n  id: 'pivotTable',\n  name: 'Pivot tables V2',\n  description: 'Second version of pivot table',\n  defaultValue: true,\n});\n\nfunction expectNumber(value: ColumnType): number {\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'bigint') {\n    return Number(value);\n  }\n  throw new Error(`number or bigint was expected, got ${typeof value}`);\n}\n\n// Auxiliary class to build the tree from query response.\nexport class PivotTableTreeBuilder {\n  private readonly root: PivotTree;\n  queryMetadata: PivotTableQueryMetadata;\n\n  get pivotColumnsCount(): number {\n    return this.queryMetadata.pivotColumns.length;\n  }\n\n  get aggregateColumns(): Aggregation[] {\n    return this.queryMetadata.aggregationColumns;\n  }\n\n  constructor(queryMetadata: PivotTableQueryMetadata, firstRow: ColumnType[]) {\n    this.queryMetadata = queryMetadata;\n    this.root = this.createNode(firstRow);\n    let tree = this.root;\n    for (let i = 0; i + 1 < this.pivotColumnsCount; i++) {\n      const value = firstRow[i];\n      tree = this.insertChild(tree, value, this.createNode(firstRow));\n    }\n    tree.rows.push(firstRow);\n  }\n\n  // Add incoming row to the tree being built.\n  ingestRow(row: ColumnType[]) {\n    let tree = this.root;\n    this.updateAggregates(tree, row);\n    for (let i = 0; i + 1 < this.pivotColumnsCount; i++) {\n      const nextTree = tree.children.get(row[i]);\n      if (nextTree === undefined) {\n        // Insert the new node into the tree, and make variable `tree` point\n        // to the newly created node.\n        tree = this.insertChild(tree, row[i], this.createNode(row));\n      } else {\n        this.updateAggregates(nextTree, row);\n        tree = nextTree;\n      }\n    }\n    tree.rows.push(row);\n  }\n\n  build(): PivotTree {\n    return this.root;\n  }\n\n  updateAggregates(tree: PivotTree, row: ColumnType[]) {\n    const countIndex = this.queryMetadata.countIndex;\n    const treeCount =\n      countIndex >= 0 ? expectNumber(tree.aggregates[countIndex]) : 0;\n    const rowCount =\n      countIndex >= 0\n        ? expectNumber(\n            row[aggregationIndex(this.pivotColumnsCount, countIndex)],\n          )\n        : 0;\n\n    for (let i = 0; i < this.aggregateColumns.length; i++) {\n      const agg = this.aggregateColumns[i];\n\n      const currAgg = tree.aggregates[i];\n      const childAgg = row[aggregationIndex(this.pivotColumnsCount, i)];\n      if (typeof currAgg === 'number' && typeof childAgg === 'number') {\n        switch (agg.aggregationFunction) {\n          case 'SUM':\n          case 'COUNT':\n            tree.aggregates[i] = currAgg + childAgg;\n            break;\n          case 'MAX':\n            tree.aggregates[i] = Math.max(currAgg, childAgg);\n            break;\n          case 'MIN':\n            tree.aggregates[i] = Math.min(currAgg, childAgg);\n            break;\n          case 'AVG': {\n            const currSum = currAgg * treeCount;\n            const addSum = childAgg * rowCount;\n            tree.aggregates[i] = (currSum + addSum) / (treeCount + rowCount);\n            break;\n          }\n        }\n      }\n    }\n    tree.aggregates[this.aggregateColumns.length] = treeCount + rowCount;\n  }\n\n  // Helper method that inserts child node into the tree and returns it, used\n  // for more concise modification of local variable pointing to the current\n  // node being built.\n  insertChild(tree: PivotTree, key: ColumnType, child: PivotTree): PivotTree {\n    tree.children.set(key, child);\n\n    return child;\n  }\n\n  // Initialize PivotTree from a row.\n  createNode(row: ColumnType[]): PivotTree {\n    const aggregates = [];\n\n    for (let j = 0; j < this.aggregateColumns.length; j++) {\n      aggregates.push(row[aggregationIndex(this.pivotColumnsCount, j)]);\n    }\n    aggregates.push(\n      row[\n        aggregationIndex(this.pivotColumnsCount, this.aggregateColumns.length)\n      ],\n    );\n\n    return {\n      isCollapsed: false,\n      children: new Map(),\n      aggregates,\n      rows: [],\n    };\n  }\n}\n\nfunction createEmptyQueryResult(\n  metadata: PivotTableQueryMetadata,\n): PivotTableResult {\n  return {\n    tree: {\n      aggregates: [],\n      isCollapsed: false,\n      children: new Map(),\n      rows: [],\n    },\n    metadata,\n  };\n}\n\n// Controller responsible for showing the panel with pivot table, as well as\n// executing its queries and post-processing query results.\nexport class PivotTableManager {\n  state: PivotTableState = createEmptyPivotTableState();\n\n  constructor(private engine: Engine) {}\n\n  setSelectionArea(area: AreaSelection) {\n    if (!PIVOT_TABLE_REDUX_FLAG.get()) {\n      return;\n    }\n    this.state.selectionArea = area;\n    this.refresh();\n  }\n\n  addAggregation(aggregation: Aggregation, after: number) {\n    this.state.selectedAggregations.splice(after, 0, aggregation);\n    this.refresh();\n  }\n\n  removeAggregation(index: number) {\n    this.state.selectedAggregations.splice(index, 1);\n    this.refresh();\n  }\n\n  setPivotSelected(args: {column: TableColumn; selected: boolean}) {\n    toggleEnabled(\n      tableColumnEquals,\n      this.state.selectedPivots,\n      args.column,\n      args.selected,\n    );\n    this.refresh();\n  }\n\n  setAggregationFunction(index: number, fn: AggregationFunction) {\n    this.state.selectedAggregations[index].aggregationFunction = fn;\n    this.refresh();\n  }\n\n  setSortColumn(aggregationIndex: number, order: SortDirection) {\n    this.state.selectedAggregations = this.state.selectedAggregations.map(\n      (agg, index) => ({\n        column: agg.column,\n        aggregationFunction: agg.aggregationFunction,\n        sortDirection: index === aggregationIndex ? order : undefined,\n      }),\n    );\n    this.refresh();\n  }\n\n  setOrder(from: number, to: number, direction: DropDirection) {\n    const pivots = this.state.selectedPivots;\n    this.state.selectedPivots = performReordering(\n      computeIntervals(pivots.length, from, to, direction),\n      pivots,\n    );\n    this.refresh();\n  }\n\n  setAggregationOrder(from: number, to: number, direction: DropDirection) {\n    const aggregations = this.state.selectedAggregations;\n    this.state.selectedAggregations = performReordering(\n      computeIntervals(aggregations.length, from, to, direction),\n      aggregations,\n    );\n    this.refresh();\n  }\n\n  setConstrainedToArea(constrain: boolean) {\n    this.state.constrainToArea = constrain;\n    this.refresh();\n  }\n\n  private refresh() {\n    this.state.queryResult = undefined;\n    if (!PIVOT_TABLE_REDUX_FLAG.get()) {\n      return;\n    }\n    this.processQuery(generateQueryFromState(this.state));\n  }\n\n  private async processQuery(query: PivotTableQuery) {\n    const result = await this.engine.query(query.text);\n    try {\n      await result.waitAllRows();\n    } catch {\n      // waitAllRows() frequently throws an exception, which is ignored in\n      // its other calls, so it's ignored here as well.\n    }\n\n    const columns = result.columns();\n\n    const it = result.iter({});\n    function nextRow(): ColumnType[] {\n      const row: ColumnType[] = [];\n      for (const column of columns) {\n        row.push(it.get(column));\n      }\n      it.next();\n      return row;\n    }\n\n    if (!it.valid()) {\n      // Iterator is invalid after creation; means that there are no rows\n      // satisfying filtering criteria. Return an empty tree.\n      this.state.queryResult = createEmptyQueryResult(query.metadata);\n      return;\n    }\n\n    const treeBuilder = new PivotTableTreeBuilder(query.metadata, nextRow());\n    while (it.valid()) {\n      treeBuilder.ingestRow(nextRow());\n    }\n    this.state.queryResult = {\n      tree: treeBuilder.build(),\n      metadata: query.metadata,\n    };\n  }\n}\n\nfunction createEmptyPivotTableState(): PivotTableState {\n  return {\n    queryResult: undefined,\n    selectedPivots: [\n      {\n        kind: 'regular',\n        table: '_slice_with_thread_and_process_info',\n        column: 'name',\n      },\n    ],\n    selectedAggregations: [\n      {\n        aggregationFunction: 'SUM',\n        column: {\n          kind: 'regular',\n          table: '_slice_with_thread_and_process_info',\n          column: 'dur',\n        },\n        sortDirection: 'DESC',\n      },\n      {\n        aggregationFunction: 'SUM',\n        column: {\n          kind: 'regular',\n          table: '_slice_with_thread_and_process_info',\n          column: 'thread_dur',\n        },\n      },\n      COUNT_AGGREGATION,\n    ],\n    constrainToArea: true,\n  };\n}\n\n// Drag&Drop logic\n\nexport type DropDirection = 'left' | 'right';\n\nexport interface Interval {\n  from: number;\n  to: number;\n}\n\n/*\n * When a drag'n'drop is performed in a linear sequence, the resulting reordered\n * array will consist of several contiguous subarrays of the original glued\n * together.\n *\n * This function implements the computation of these intervals.\n *\n * The drag'n'drop operation performed is as follows: in the sequence with given\n * length, the element with index `dragFrom` is dropped on the `direction` to\n * the element `dragTo`.\n */\n\nexport function computeIntervals(\n  length: number,\n  dragFrom: number,\n  dragTo: number,\n  direction: DropDirection,\n): Interval[] {\n  assertTrue(dragFrom !== dragTo);\n\n  if (dragTo < dragFrom) {\n    const prefixLen = direction == 'left' ? dragTo : dragTo + 1;\n    return [\n      // First goes unchanged prefix.\n      {from: 0, to: prefixLen},\n      // Then goes dragged element.\n      {from: dragFrom, to: dragFrom + 1},\n      // Then goes suffix up to dragged element (which has already been moved).\n      {from: prefixLen, to: dragFrom},\n      // Then the rest of an array.\n      {from: dragFrom + 1, to: length},\n    ];\n  }\n\n  // Other case: dragTo > dragFrom\n  const prefixLen = direction == 'left' ? dragTo : dragTo + 1;\n  return [\n    {from: 0, to: dragFrom},\n    {from: dragFrom + 1, to: prefixLen},\n    {from: dragFrom, to: dragFrom + 1},\n    {from: prefixLen, to: length},\n  ];\n}\n\nexport function performReordering<T>(intervals: Interval[], arr: T[]): T[] {\n  const result: T[] = [];\n\n  for (const interval of intervals) {\n    result.push(...arr.slice(interval.from, interval.to));\n  }\n\n  return result;\n}\n"]}
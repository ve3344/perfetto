{"version":3,"file":"tab_manager.js","sourceRoot":"","sources":["../../../src/core/tab_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {DetailsPanel} from '../public/details_panel';\nimport {TabDescriptor, TabManager} from '../public/tab';\nimport {\n  SplitPanelDrawerVisibility,\n  toggleVisibility,\n} from '../widgets/split_panel';\nimport {raf} from './raf_scheduler';\n\nexport interface ResolvedTab {\n  uri: string;\n  tab?: TabDescriptor;\n}\n\nexport type TabPanelVisibility = 'COLLAPSED' | 'VISIBLE' | 'FULLSCREEN';\n\n/**\n * Stores tab & current selection section registries.\n * Keeps track of tab lifecycles.\n */\nexport class TabManagerImpl implements TabManager, Disposable {\n  private _registry = new Map<string, TabDescriptor>();\n  private _defaultTabs = new Set<string>();\n  private _detailsPanelRegistry = new Set<DetailsPanel>();\n  private _instantiatedTabs = new Map<string, TabDescriptor>();\n  private _openTabs: string[] = []; // URIs of the tabs open.\n  private _currentTab: string = 'current_selection';\n  private _tabPanelVisibility = SplitPanelDrawerVisibility.COLLAPSED;\n  private _tabPanelVisibilityChanged = false;\n\n  [Symbol.dispose]() {\n    // Dispose of all tabs that are currently alive\n    for (const tab of this._instantiatedTabs.values()) {\n      this.disposeTab(tab);\n    }\n    this._instantiatedTabs.clear();\n  }\n\n  registerTab(desc: TabDescriptor): Disposable {\n    this._registry.set(desc.uri, desc);\n    return {\n      [Symbol.dispose]: () => this._registry.delete(desc.uri),\n    };\n  }\n\n  addDefaultTab(uri: string): Disposable {\n    this._defaultTabs.add(uri);\n    return {\n      [Symbol.dispose]: () => this._defaultTabs.delete(uri),\n    };\n  }\n\n  registerDetailsPanel(section: DetailsPanel): Disposable {\n    this._detailsPanelRegistry.add(section);\n    return {\n      [Symbol.dispose]: () => this._detailsPanelRegistry.delete(section),\n    };\n  }\n\n  resolveTab(uri: string): TabDescriptor | undefined {\n    return this._registry.get(uri);\n  }\n\n  showCurrentSelectionTab(): void {\n    this.showTab('current_selection');\n  }\n\n  showTab(uri: string): void {\n    // Add tab, unless we're talking about the special current_selection tab\n    if (uri !== 'current_selection') {\n      // Add tab to tab list if not already\n      if (!this._openTabs.some((x) => x === uri)) {\n        this._openTabs.push(uri);\n      }\n    }\n    this._currentTab = uri;\n\n    // The first time that we show a tab, auto-expand the tab bottom panel.\n    // However, if the user has later collapsed the panel (hence if\n    // _tabPanelVisibilityChanged == true), don't insist and leave things as\n    // they are.\n    if (\n      !this._tabPanelVisibilityChanged &&\n      this._tabPanelVisibility === SplitPanelDrawerVisibility.COLLAPSED\n    ) {\n      this.setTabPanelVisibility(SplitPanelDrawerVisibility.VISIBLE);\n    }\n\n    raf.scheduleFullRedraw();\n  }\n\n  // Hide a tab in the tab bar pick a new tab to show.\n  // Note: Attempting to hide the \"current_selection\" tab doesn't work. This tab\n  // is special and cannot be removed.\n  hideTab(uri: string): void {\n    // If the removed tab is the \"current\" tab, we must find a new tab to focus\n    if (uri === this._currentTab) {\n      // Remember the index of the current tab\n      const currentTabIdx = this._openTabs.findIndex((x) => x === uri);\n\n      // Remove the tab\n      this._openTabs = this._openTabs.filter((x) => x !== uri);\n\n      if (currentTabIdx !== -1) {\n        if (this._openTabs.length === 0) {\n          // No more tabs, use current selection\n          this._currentTab = 'current_selection';\n        } else if (currentTabIdx < this._openTabs.length - 1) {\n          // Pick the tab to the right\n          this._currentTab = this._openTabs[currentTabIdx];\n        } else {\n          // Pick the last tab\n          const lastTab = this._openTabs[this._openTabs.length - 1];\n          this._currentTab = lastTab;\n        }\n      }\n    } else {\n      // Otherwise just remove the tab\n      this._openTabs = this._openTabs.filter((x) => x !== uri);\n    }\n    raf.scheduleFullRedraw();\n  }\n\n  toggleTab(uri: string): void {\n    return this.isOpen(uri) ? this.hideTab(uri) : this.showTab(uri);\n  }\n\n  isOpen(uri: string): boolean {\n    return this._openTabs.find((x) => x == uri) !== undefined;\n  }\n\n  get currentTabUri(): string {\n    return this._currentTab;\n  }\n\n  get openTabsUri(): string[] {\n    return this._openTabs;\n  }\n\n  get tabs(): TabDescriptor[] {\n    return Array.from(this._registry.values());\n  }\n\n  get defaultTabs(): string[] {\n    return Array.from(this._defaultTabs);\n  }\n\n  get detailsPanels(): DetailsPanel[] {\n    return Array.from(this._detailsPanelRegistry);\n  }\n\n  /**\n   * Resolves a list of URIs to tabs and manages tab lifecycles.\n   * @param tabUris List of tabs.\n   * @returns List of resolved tabs.\n   */\n  resolveTabs(tabUris: string[]): ResolvedTab[] {\n    // Refresh the list of old tabs\n    const newTabs = new Map<string, TabDescriptor>();\n    const tabs: ResolvedTab[] = [];\n\n    tabUris.forEach((uri) => {\n      const newTab = this._registry.get(uri);\n      tabs.push({uri, tab: newTab});\n\n      if (newTab) {\n        newTabs.set(uri, newTab);\n      }\n    });\n\n    // Call onShow() on any new tabs.\n    for (const [uri, tab] of newTabs) {\n      const oldTab = this._instantiatedTabs.get(uri);\n      if (!oldTab) {\n        this.initTab(tab);\n      }\n    }\n\n    // Call onHide() on any tabs that have been removed.\n    for (const [uri, tab] of this._instantiatedTabs) {\n      const newTab = newTabs.get(uri);\n      if (!newTab) {\n        this.disposeTab(tab);\n      }\n    }\n\n    this._instantiatedTabs = newTabs;\n\n    return tabs;\n  }\n\n  setTabPanelVisibility(visibility: SplitPanelDrawerVisibility): void {\n    this._tabPanelVisibility = visibility;\n    this._tabPanelVisibilityChanged = true;\n  }\n\n  toggleTabPanelVisibility(): void {\n    this.setTabPanelVisibility(toggleVisibility(this._tabPanelVisibility));\n  }\n\n  get tabPanelVisibility() {\n    return this._tabPanelVisibility;\n  }\n\n  /**\n   * Call onShow() on this tab.\n   * @param tab The tab to initialize.\n   */\n  private initTab(tab: TabDescriptor): void {\n    tab.onShow?.();\n  }\n\n  /**\n   * Call onHide() and maybe remove from registry if tab is ephemeral.\n   * @param tab The tab to dispose.\n   */\n  private disposeTab(tab: TabDescriptor): void {\n    // Attempt to call onHide\n    tab.onHide?.();\n\n    // If ephemeral, also unregister the tab\n    if (tab.isEphemeral) {\n      this._registry.delete(tab.uri);\n    }\n  }\n}\n"]}
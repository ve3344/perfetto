{"version":3,"file":"trace_impl.js","sourceRoot":"","sources":["../../../src/core/trace_impl.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {DisposableStack} from '../base/disposable_stack';\nimport {createStore, Migrate, Store} from '../base/store';\nimport {TimelineImpl} from './timeline';\nimport {Command} from '../public/command';\nimport {Trace} from '../public/trace';\nimport {ScrollToArgs, setScrollToFunction} from '../public/scroll_helper';\nimport {TrackDescriptor} from '../public/track';\nimport {EngineBase, EngineProxy} from '../trace_processor/engine';\nimport {CommandManagerImpl} from './command_manager';\nimport {NoteManagerImpl} from './note_manager';\nimport {OmniboxManagerImpl} from './omnibox_manager';\nimport {SearchManagerImpl} from './search_manager';\nimport {SelectionManagerImpl} from './selection_manager';\nimport {SidebarManagerImpl} from './sidebar_manager';\nimport {TabManagerImpl} from './tab_manager';\nimport {TrackManagerImpl} from './track_manager';\nimport {WorkspaceManagerImpl} from './workspace_manager';\nimport {SidebarMenuItem} from '../public/sidebar';\nimport {ScrollHelper} from './scroll_helper';\nimport {Selection, SelectionOpts} from '../public/selection';\nimport {SearchResult} from '../public/search';\nimport {PivotTableManager} from './pivot_table_manager';\nimport {FlowManager} from './flow_manager';\nimport {AppContext, AppImpl} from './app_impl';\nimport {PluginManagerImpl} from './plugin_manager';\nimport {RouteArgs} from '../public/route_schema';\nimport {CORE_PLUGIN_ID} from './plugin_manager';\nimport {Analytics} from '../public/analytics';\nimport {getOrCreate} from '../base/utils';\nimport {fetchWithProgress} from '../base/http_utils';\nimport {TraceInfoImpl} from './trace_info_impl';\nimport {PageHandler, PageManager} from '../public/page';\nimport {createProxy} from '../base/utils';\nimport {PageManagerImpl} from './page_manager';\nimport {FeatureFlagManager, FlagSettings} from '../public/feature_flag';\nimport {featureFlags} from './feature_flags';\nimport {SerializedAppState} from './state_serialization_schema';\nimport {PostedTrace} from './trace_source';\nimport {PerfManager} from './perf_manager';\nimport {EvtSource} from '../base/events';\n\n/**\n * Handles the per-trace state of the UI\n * There is an instance of this class per each trace loaded, and typically\n * between 0 and 1 instances in total (% brief moments while we swap traces).\n * 90% of the app state live here, including the Engine.\n * This is the underlying storage for AppImpl, which instead has one instance\n * per trace per plugin.\n */\nexport class TraceContext implements Disposable {\n  private readonly pluginInstances = new Map<string, TraceImpl>();\n  readonly appCtx: AppContext;\n  readonly engine: EngineBase;\n  readonly omniboxMgr = new OmniboxManagerImpl();\n  readonly searchMgr: SearchManagerImpl;\n  readonly selectionMgr: SelectionManagerImpl;\n  readonly tabMgr = new TabManagerImpl();\n  readonly timeline: TimelineImpl;\n  readonly traceInfo: TraceInfoImpl;\n  readonly trackMgr = new TrackManagerImpl();\n  readonly workspaceMgr = new WorkspaceManagerImpl();\n  readonly noteMgr = new NoteManagerImpl();\n  readonly flowMgr: FlowManager;\n  readonly pluginSerializableState = createStore<{[key: string]: {}}>({});\n  readonly scrollHelper: ScrollHelper;\n  readonly pivotTableMgr;\n  readonly trash = new DisposableStack();\n  readonly onTraceReady = new EvtSource<void>();\n\n  // List of errors that were encountered while loading the trace by the TS\n  // code. These are on top of traceInfo.importErrors, which is a summary of\n  // what TraceProcessor reports on the stats table at import time.\n  readonly loadingErrors: string[] = [];\n\n  constructor(gctx: AppContext, engine: EngineBase, traceInfo: TraceInfoImpl) {\n    this.appCtx = gctx;\n    this.engine = engine;\n    this.trash.use(engine);\n    this.traceInfo = traceInfo;\n    this.timeline = new TimelineImpl(traceInfo);\n\n    this.scrollHelper = new ScrollHelper(\n      this.traceInfo,\n      this.timeline,\n      this.workspaceMgr.currentWorkspace,\n      this.trackMgr,\n    );\n\n    this.selectionMgr = new SelectionManagerImpl(\n      this.engine,\n      this.trackMgr,\n      this.noteMgr,\n      this.scrollHelper,\n      this.onSelectionChange.bind(this),\n    );\n\n    this.noteMgr.onNoteDeleted = (noteId) => {\n      if (\n        this.selectionMgr.selection.kind === 'note' &&\n        this.selectionMgr.selection.id === noteId\n      ) {\n        this.selectionMgr.clear();\n      }\n    };\n\n    this.pivotTableMgr = new PivotTableManager(\n      engine.getProxy('PivotTableManager'),\n    );\n\n    this.flowMgr = new FlowManager(\n      engine.getProxy('FlowManager'),\n      this.trackMgr,\n      this.selectionMgr,\n    );\n\n    this.searchMgr = new SearchManagerImpl({\n      timeline: this.timeline,\n      trackManager: this.trackMgr,\n      engine: this.engine,\n      workspace: this.workspaceMgr.currentWorkspace,\n      onResultStep: this.onResultStep.bind(this),\n    });\n  }\n\n  // This method wires up changes to selection to side effects on search and\n  // tabs. This is to avoid entangling too many dependencies between managers.\n  private onSelectionChange(selection: Selection, opts: SelectionOpts) {\n    const {clearSearch = true, switchToCurrentSelectionTab = true} = opts;\n    if (clearSearch) {\n      this.searchMgr.reset();\n    }\n    if (switchToCurrentSelectionTab && selection.kind !== 'empty') {\n      this.tabMgr.showCurrentSelectionTab();\n    }\n\n    if (selection.kind === 'area') {\n      this.pivotTableMgr.setSelectionArea(selection);\n    }\n\n    this.flowMgr.updateFlows(selection);\n  }\n\n  private onResultStep(searchResult: SearchResult) {\n    this.selectionMgr.selectSearchResult(searchResult);\n  }\n\n  // Gets or creates an instance of TraceImpl backed by the current TraceContext\n  // for the given plugin.\n  forPlugin(pluginId: string) {\n    return getOrCreate(this.pluginInstances, pluginId, () => {\n      const appForPlugin = this.appCtx.forPlugin(pluginId);\n      return new TraceImpl(appForPlugin, this);\n    });\n  }\n\n  // Called by AppContext.closeCurrentTrace().\n  [Symbol.dispose]() {\n    this.trash.dispose();\n  }\n}\n\n/**\n * This implementation provides the plugin access to trace related resources,\n * such as the engine and the store. This exists for the whole duration a plugin\n * is active AND a trace is loaded.\n * There are N+1 instances of this for each trace, one for each plugin plus one\n * for the core.\n */\nexport class TraceImpl implements Trace {\n  private readonly appImpl: AppImpl;\n  private readonly traceCtx: TraceContext;\n\n  // This is not the original Engine base, rather an EngineProxy based on the\n  // same engineBase.\n  private readonly engineProxy: EngineProxy;\n  private readonly trackMgrProxy: TrackManagerImpl;\n  private readonly commandMgrProxy: CommandManagerImpl;\n  private readonly sidebarProxy: SidebarManagerImpl;\n  private readonly pageMgrProxy: PageManagerImpl;\n\n  // This is called by TraceController when loading a new trace, soon after the\n  // engine has been set up. It obtains a new TraceImpl for the core. From that\n  // we can fork sibling instances (i.e. bound to the same TraceContext) for\n  // the various plugins.\n  static createInstanceForCore(\n    appImpl: AppImpl,\n    engine: EngineBase,\n    traceInfo: TraceInfoImpl,\n  ): TraceImpl {\n    const traceCtx = new TraceContext(\n      appImpl.__appCtxForTrace,\n      engine,\n      traceInfo,\n    );\n    return traceCtx.forPlugin(CORE_PLUGIN_ID);\n  }\n\n  // Only called by TraceContext.forPlugin().\n  constructor(appImpl: AppImpl, ctx: TraceContext) {\n    const pluginId = appImpl.pluginId;\n    this.appImpl = appImpl;\n    this.traceCtx = ctx;\n    const traceUnloadTrash = ctx.trash;\n\n    // Invalidate all the engine proxies when the TraceContext is destroyed.\n    this.engineProxy = ctx.engine.getProxy(pluginId);\n    traceUnloadTrash.use(this.engineProxy);\n\n    // Intercept the registerTrack() method to inject the pluginId into tracks.\n    this.trackMgrProxy = createProxy(ctx.trackMgr, {\n      registerTrack(trackDesc: TrackDescriptor): Disposable {\n        return ctx.trackMgr.registerTrack({...trackDesc, pluginId});\n      },\n    });\n\n    // CommandManager is global. Here we intercept the registerCommand() because\n    // we want any commands registered via the Trace interface to be\n    // unregistered when the trace unloads (before a new trace is loaded) to\n    // avoid ending up with duplicate commands.\n    this.commandMgrProxy = createProxy(ctx.appCtx.commandMgr, {\n      registerCommand(cmd: Command): Disposable {\n        const disposable = appImpl.commands.registerCommand(cmd);\n        traceUnloadTrash.use(disposable);\n        return disposable;\n      },\n    });\n\n    // Likewise, remove all trace-scoped sidebar entries when the trace unloads.\n    this.sidebarProxy = createProxy(ctx.appCtx.sidebarMgr, {\n      addMenuItem(menuItem: SidebarMenuItem): Disposable {\n        const disposable = appImpl.sidebar.addMenuItem(menuItem);\n        traceUnloadTrash.use(disposable);\n        return disposable;\n      },\n    });\n\n    this.pageMgrProxy = createProxy(ctx.appCtx.pageMgr, {\n      registerPage(pageHandler: PageHandler): Disposable {\n        const disposable = appImpl.pages.registerPage({\n          ...pageHandler,\n          pluginId: appImpl.pluginId,\n        });\n        traceUnloadTrash.use(disposable);\n        return disposable;\n      },\n    });\n\n    // TODO(primiano): remove this injection once we plumb Trace everywhere.\n    setScrollToFunction((x: ScrollToArgs) => ctx.scrollHelper.scrollTo(x));\n  }\n\n  scrollTo(where: ScrollToArgs): void {\n    this.traceCtx.scrollHelper.scrollTo(where);\n  }\n\n  // Creates an instance of TraceImpl backed by the same TraceContext for\n  // another plugin. This is effectively a way to \"fork\" the core instance and\n  // create the N instances for plugins.\n  forkForPlugin(pluginId: string) {\n    return this.traceCtx.forPlugin(pluginId);\n  }\n\n  mountStore<T>(migrate: Migrate<T>): Store<T> {\n    return this.traceCtx.pluginSerializableState.createSubStore(\n      [this.pluginId],\n      migrate,\n    );\n  }\n\n  getPluginStoreForSerialization() {\n    return this.traceCtx.pluginSerializableState;\n  }\n\n  async getTraceFile(): Promise<Blob> {\n    const src = this.traceInfo.source;\n    if (this.traceInfo.downloadable) {\n      if (src.type === 'ARRAY_BUFFER') {\n        return new Blob([src.buffer]);\n      } else if (src.type === 'FILE') {\n        return src.file;\n      } else if (src.type === 'URL') {\n        return await fetchWithProgress(src.url, (progressPercent: number) =>\n          this.omnibox.showStatusMessage(\n            `Downloading trace ${progressPercent}%`,\n          ),\n        );\n      }\n    }\n    // Not available in HTTP+RPC mode. Rather than propagating an undefined,\n    // show a graceful error (the ERR:trace_src will be intercepted by\n    // error_dialog.ts). We expect all users of this feature to not be able to\n    // do anything useful if we returned undefined (other than showing the same\n    // dialog).\n    // The caller was supposed to check that traceInfo.downloadable === true\n    // before calling this. Throwing while downloadable is true is a bug.\n    throw new Error(`Cannot getTraceFile(${src.type})`);\n  }\n\n  get openerPluginArgs(): {[key: string]: unknown} | undefined {\n    const traceSource = this.traceCtx.traceInfo.source;\n    if (traceSource.type !== 'ARRAY_BUFFER') {\n      return undefined;\n    }\n    const pluginArgs = traceSource.pluginArgs;\n    return (pluginArgs ?? {})[this.pluginId];\n  }\n\n  get trace() {\n    return this;\n  }\n\n  get engine() {\n    return this.engineProxy;\n  }\n\n  get timeline() {\n    return this.traceCtx.timeline;\n  }\n\n  get tracks() {\n    return this.trackMgrProxy;\n  }\n\n  get tabs() {\n    return this.traceCtx.tabMgr;\n  }\n\n  get workspace() {\n    return this.traceCtx.workspaceMgr.currentWorkspace;\n  }\n\n  get workspaces() {\n    return this.traceCtx.workspaceMgr;\n  }\n\n  get search() {\n    return this.traceCtx.searchMgr;\n  }\n\n  get selection() {\n    return this.traceCtx.selectionMgr;\n  }\n\n  get traceInfo(): TraceInfoImpl {\n    return this.traceCtx.traceInfo;\n  }\n\n  get notes() {\n    return this.traceCtx.noteMgr;\n  }\n\n  get pivotTable() {\n    return this.traceCtx.pivotTableMgr;\n  }\n\n  get flows() {\n    return this.traceCtx.flowMgr;\n  }\n\n  get loadingErrors(): ReadonlyArray<string> {\n    return this.traceCtx.loadingErrors;\n  }\n\n  addLoadingError(err: string) {\n    this.traceCtx.loadingErrors.push(err);\n  }\n\n  // App interface implementation.\n\n  get pluginId(): string {\n    return this.appImpl.pluginId;\n  }\n\n  get commands(): CommandManagerImpl {\n    return this.commandMgrProxy;\n  }\n\n  get sidebar(): SidebarManagerImpl {\n    return this.sidebarProxy;\n  }\n\n  get pages(): PageManager {\n    return this.pageMgrProxy;\n  }\n\n  get omnibox(): OmniboxManagerImpl {\n    return this.appImpl.omnibox;\n  }\n\n  get plugins(): PluginManagerImpl {\n    return this.appImpl.plugins;\n  }\n\n  get analytics(): Analytics {\n    return this.appImpl.analytics;\n  }\n\n  get initialRouteArgs(): RouteArgs {\n    return this.appImpl.initialRouteArgs;\n  }\n\n  get featureFlags(): FeatureFlagManager {\n    return {\n      register: (settings: FlagSettings) => featureFlags.register(settings),\n    };\n  }\n\n  scheduleFullRedraw(): void {\n    this.appImpl.scheduleFullRedraw();\n  }\n\n  navigate(newHash: string): void {\n    this.appImpl.navigate(newHash);\n  }\n\n  openTraceFromFile(file: File): void {\n    this.appImpl.openTraceFromFile(file);\n  }\n\n  openTraceFromUrl(url: string, serializedAppState?: SerializedAppState) {\n    this.appImpl.openTraceFromUrl(url, serializedAppState);\n  }\n\n  openTraceFromBuffer(args: PostedTrace): void {\n    this.appImpl.openTraceFromBuffer(args);\n  }\n\n  get onTraceReady() {\n    return this.traceCtx.onTraceReady;\n  }\n\n  get perfDebugging(): PerfManager {\n    return this.appImpl.perfDebugging;\n  }\n\n  get trash(): DisposableStack {\n    return this.traceCtx.trash;\n  }\n\n  // Nothing other than AppImpl should ever refer to this, hence the __ name.\n  get __traceCtxForApp() {\n    return this.traceCtx;\n  }\n}\n\n// A convenience interface to inject the App in Mithril components.\nexport interface TraceImplAttrs {\n  trace: TraceImpl;\n}\n\nexport interface OptionalTraceImplAttrs {\n  trace?: TraceImpl;\n}\n"]}
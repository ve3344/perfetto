{"version":3,"file":"color_unittest.js","sourceRoot":"","sources":["../../../src/core/color_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {HSLColor, hslToRgb, HSLuvColor} from '../public/color';\n\ndescribe('HSLColor', () => {\n  const col = new HSLColor({h: 123, s: 66, l: 45});\n\n  test('cssString', () => {\n    expect(col.cssString).toBe('rgb(39 190 47)');\n    expect(new HSLColor({h: 0, s: 0, l: 0}).cssString).toBe('rgb(0 0 0)');\n    expect(new HSLColor({h: 0, s: 100, l: 100}).cssString).toBe(\n      'rgb(255 255 255)',\n    );\n    expect(new HSLColor({h: 90, s: 25, l: 55}).cssString).toBe(\n      'rgb(140 169 112)',\n    );\n    expect(new HSLColor({h: 180, s: 80, l: 40}, 0.7).cssString).toBe(\n      'rgb(20 184 184 / 0.7)',\n    );\n  });\n\n  test('lighten', () => {\n    expect(col.lighten(20).hsl).toEqual([123, 66, 65]);\n    expect(col.lighten(100).hsl).toEqual([123, 66, 100]);\n    expect(col.lighten(-100).hsl).toEqual([123, 66, 0]);\n  });\n\n  test('saturate', () => {\n    expect(col.saturate(20).hsl).toEqual([123, 86, 45]);\n    expect(col.saturate(100).hsl).toEqual([123, 100, 45]);\n    expect(col.saturate(-100).hsl).toEqual([123, 0, 45]);\n  });\n\n  test('setAlpha', () => {\n    expect(col.setAlpha(0.7).alpha).toEqual(0.7);\n    expect(col.setAlpha(undefined).alpha).toEqual(undefined);\n  });\n\n  test('perceivedBrightness', () => {\n    // Test a few obviously light/dark colours.\n    expect(new HSLColor({h: 0, s: 0, l: 0}).perceivedBrightness).toBeLessThan(\n      128,\n    );\n    expect(\n      new HSLColor({h: 0, s: 0, l: 100}).perceivedBrightness,\n    ).toBeGreaterThan(128);\n\n    expect(new HSLColor({h: 0, s: 0, l: 40}).perceivedBrightness).toBeLessThan(\n      128,\n    );\n    expect(\n      new HSLColor({h: 0, s: 0, l: 60}).perceivedBrightness,\n    ).toBeGreaterThan(128);\n  });\n});\n\ndescribe('HSLuvColor', () => {\n  const col = new HSLuvColor({h: 123, s: 66, l: 45});\n\n  test('cssString', () => {\n    expect(col.cssString).toBe('rgb(69 117 58)');\n    expect(new HSLColor({h: 0, s: 0, l: 0}).cssString).toBe('rgb(0 0 0)');\n    expect(new HSLColor({h: 0, s: 100, l: 100}).cssString).toBe(\n      'rgb(255 255 255)',\n    );\n    expect(new HSLuvColor({h: 90, s: 25, l: 55}).cssString).toBe(\n      'rgb(131 133 112)',\n    );\n    expect(new HSLuvColor({h: 240, s: 100, l: 100}, 0.3).cssString).toBe(\n      'rgb(254 255 255 / 0.3)',\n    );\n  });\n\n  test('lighten', () => {\n    expect(col.lighten(20).hsl).toEqual([123, 66, 65]);\n    expect(col.lighten(100).hsl).toEqual([123, 66, 100]);\n    expect(col.lighten(-100).hsl).toEqual([123, 66, 0]);\n  });\n\n  test('saturate', () => {\n    expect(col.saturate(20).hsl).toEqual([123, 86, 45]);\n    expect(col.saturate(100).hsl).toEqual([123, 100, 45]);\n    expect(col.saturate(-100).hsl).toEqual([123, 0, 45]);\n  });\n\n  test('setAlpha', () => {\n    expect(col.setAlpha(0.7).alpha).toEqual(0.7);\n    expect(col.setAlpha(undefined).alpha).toEqual(undefined);\n  });\n\n  test('perceivedBrightness', () => {\n    // Test a few obviously light/dark colours.\n    expect(new HSLuvColor({h: 0, s: 0, l: 0}).perceivedBrightness).toBeLessThan(\n      128,\n    );\n    expect(\n      new HSLuvColor({h: 0, s: 0, l: 100}).perceivedBrightness,\n    ).toBeGreaterThan(128);\n\n    expect(\n      new HSLuvColor({h: 0, s: 0, l: 40}).perceivedBrightness,\n    ).toBeLessThan(128);\n    expect(\n      new HSLuvColor({h: 0, s: 0, l: 60}).perceivedBrightness,\n    ).toBeGreaterThan(128);\n  });\n});\n\ntest('hslToRGB', () => {\n  // Pick a few well-known conversions to check we're in the right ballpark.\n  expect(hslToRgb(0, 0, 0)).toEqual([0, 0, 0]);\n  expect(hslToRgb(0, 100, 50)).toEqual([255, 0, 0]);\n  expect(hslToRgb(120, 100, 50)).toEqual([0, 255, 0]);\n  expect(hslToRgb(240, 100, 50)).toEqual([0, 0, 255]);\n});\n"]}
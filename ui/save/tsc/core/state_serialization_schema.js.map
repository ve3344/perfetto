{"version":3,"file":"state_serialization_schema.js","sourceRoot":"","sources":["../../../src/core/state_serialization_schema.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,6BAAsB;AACtB,uCAAkC;AAElC,wEAAwE;AACxE,qEAAqE;AACrE,gDAAgD;AACnC,QAAA,wBAAwB,GAAG,CAAC,CAAC;AAE1C,8EAA8E;AAC9E,8EAA8E;AAC9E,6DAA6D;AAC7D,MAAM,KAAK,GAAG,OAAC;KACZ,MAAM,EAAE;KACR,KAAK,CAAC,SAAS,CAAC;KAChB,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,WAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE7C,MAAM,gBAAgB,GAAG,OAAC,CAAC,kBAAkB,CAAC,MAAM,EAAE;IACpD,OAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,aAAa,CAAC;QAC9B,2EAA2E;QAC3E,QAAQ,EAAE,OAAC,CAAC,MAAM,EAAE;QACpB,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;QACnB,YAAY,EAAE,OAAC,CAAC,OAAO,EAAE;KAC1B,CAAC;IACF,OAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,OAAC,CAAC,OAAO,CAAC,MAAM,CAAC;QACvB,KAAK,EAAE,KAAK;QACZ,GAAG,EAAE,KAAK;QACV,SAAS,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC;KAC/B,CAAC;CACH,CAAC,CAAC;AAIH,MAAM,WAAW,GAAG,OAAC;KAClB,MAAM,CAAC;IACN,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE;IACd,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,OAAC,CAAC,MAAM,EAAE;IACjB,IAAI,EAAE,OAAC,CAAC,MAAM,EAAE;CACjB,CAAC;KACD,GAAG,CACF,OAAC,CAAC,kBAAkB,CAAC,UAAU,EAAE;IAC/B,OAAC,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,OAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAC,CAAC;IAC1C,OAAC,CAAC,MAAM,CAAC,EAAC,QAAQ,EAAE,OAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,EAAC,CAAC;CACpD,CAAC,CACH,CAAC;AAIJ,MAAM,aAAa,GAAG,OAAC,CAAC,MAAM,CAAC;IAC7B,EAAE,EAAE,OAAC,CAAC,MAAM,EAAE;IACd,KAAK,EAAE,OAAC,CAAC,GAAG,EAAE;CACf,CAAC,CAAC;AAIU,QAAA,gBAAgB,GAAG,OAAC,CAAC,MAAM,CAAC;IACvC,OAAO,EAAE,OAAC,CAAC,MAAM,EAAE;IACnB,YAAY,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IAC7C,QAAQ,EAAE,OAAC;SACR,MAAM,CAAC;QACN,KAAK,EAAE,KAAK;QACZ,GAAG,EAAE,KAAK;KACX,CAAC;SACD,QAAQ,EAAE;IACb,SAAS,EAAE,OAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IAChD,KAAK,EAAE,OAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;IACvC,OAAO,EAAE,OAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;CAC5C,CAAC,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {z} from 'zod';\nimport {Time} from '../base/time';\n\n// This should be bumped only in case of breaking changes that cannot be\n// addressed using zod's z.optional(), z.default() or z.coerce.xxx().\n// Ideally these cases should be extremely rare.\nexport const SERIALIZED_STATE_VERSION = 1;\n\n// At deserialization time this takes a string as input and converts it into a\n// BigInt. The serialization side of this is handled by JsonSerialize(), which\n// converts BigInt into strings when invoking JSON.stringify.\nconst zTime = z\n  .string()\n  .regex(/[-]?\\d+/)\n  .transform((s) => Time.fromRaw(BigInt(s)));\n\nconst SELECTION_SCHEMA = z.discriminatedUnion('kind', [\n  z.object({\n    kind: z.literal('TRACK_EVENT'),\n    // This is actually the track URI but let's not rename for backwards compat\n    trackKey: z.string(),\n    eventId: z.string(),\n    detailsPanel: z.unknown(),\n  }),\n  z.object({\n    kind: z.literal('AREA'),\n    start: zTime,\n    end: zTime,\n    trackUris: z.array(z.string()),\n  }),\n]);\n\nexport type SerializedSelection = z.infer<typeof SELECTION_SCHEMA>;\n\nconst NOTE_SCHEMA = z\n  .object({\n    id: z.string(),\n    start: zTime,\n    color: z.string(),\n    text: z.string(),\n  })\n  .and(\n    z.discriminatedUnion('noteType', [\n      z.object({noteType: z.literal('DEFAULT')}),\n      z.object({noteType: z.literal('SPAN'), end: zTime}),\n    ]),\n  );\n\nexport type SerializedNote = z.infer<typeof NOTE_SCHEMA>;\n\nconst PLUGIN_SCHEMA = z.object({\n  id: z.string(),\n  state: z.any(),\n});\n\nexport type SerializedPluginState = z.infer<typeof PLUGIN_SCHEMA>;\n\nexport const APP_STATE_SCHEMA = z.object({\n  version: z.number(),\n  pinnedTracks: z.array(z.string()).default([]),\n  viewport: z\n    .object({\n      start: zTime,\n      end: zTime,\n    })\n    .optional(),\n  selection: z.array(SELECTION_SCHEMA).default([]),\n  notes: z.array(NOTE_SCHEMA).default([]),\n  plugins: z.array(PLUGIN_SCHEMA).default([]),\n});\n\nexport type SerializedAppState = z.infer<typeof APP_STATE_SCHEMA>;\n"]}
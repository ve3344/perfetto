{"version":3,"file":"app_impl.js","sourceRoot":"","sources":["../../../src/core/app_impl.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,6CAAyD;AAGzD,uDAAqD;AACrD,uDAAqD;AACrD,mDAAoC;AACpC,uDAAqD;AACrD,qDAAmD;AAMnD,6CAAuC;AACvC,qDAAgD;AAChD,qCAAgC;AAChC,qDAAkE;AAClE,yCAAuD;AACvD,iDAA+C;AAE/C,iDAA2C;AAC3C,qFAA8E;AAE9E,mDAA6C;AAQ7C;;;;;;;GAOG;AACH,MAAa,UAAU;IACrB,uEAAuE;IACtD,eAAe,GAAG,IAAI,GAAG,EAAmB,CAAC;IACrD,UAAU,GAAG,IAAI,oCAAkB,EAAE,CAAC;IACtC,UAAU,GAAG,IAAI,oCAAkB,EAAE,CAAC;IACtC,OAAO,GAAG,IAAI,8BAAe,EAAE,CAAC;IAChC,UAAU,CAAqB;IAC/B,SAAS,CAAoB;IAC7B,OAAO,GAAG,IAAI,0BAAW,EAAE,CAAC;IAC5B,SAAS,CAAoB;IAC7B,uBAAuB,CAA0B;IAC1D,OAAO,GAAG;QACR,aAAa,EAAE,2BAA4C;QAC3D,gBAAgB,EAAE,KAAK;KACxB,CAAC;IACF,gBAAgB,CAAY;IAC5B,cAAc,GAAG,KAAK,CAAC,CAAC,gCAAgC;IAC/C,QAAQ,CAAc;IACtB,YAAY,CAAU;IACtB,WAAW,CAAU;IAE9B,6EAA6E;IAC7E,0BAA0B;IAC1B,gBAAgB,GAAiB,EAAE,CAAC;IAEpC,4BAA4B;IAC5B,YAAY,CAAgB;IAEpB,MAAM,CAAC,SAAS,CAAa;IAErC,MAAM,CAAC,UAAU,CAAC,QAAqB;QACrC,IAAA,oBAAU,EAAC,UAAU,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;QAC/C,OAAO,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,KAAK,QAAQ;QACjB,OAAO,IAAA,sBAAY,EAAC,UAAU,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED,wEAAwE;IACxE,4BAA4B;IAC5B,YAAoB,QAAqB;QACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;QAClD,IAAI,CAAC,uBAAuB,GAAG,IAAI,mDAAuB,EAAE,CAAC;QAC7D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,UAAU,CAAC;QAC9D,IAAI,CAAC,WAAW;YACd,IAAI,CAAC,QAAQ,KAAK,SAAS;gBAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,UAAU,GAAG,IAAI,oCAAkB,CAAC;YACvC,QAAQ,EAAE,IAAI,CAAC,YAAY;YAC3B,MAAM,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW;SAC1C,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,GAAG,IAAA,8BAAa,EAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACpE,IAAI,CAAC,SAAS,GAAG,IAAI,kCAAiB,CAAC;YACrC,aAAa,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;YACrD,IAAI,KAAK;gBACP,OAAO,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC;YAChC,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,0EAA0E;IAC1E,wBAAwB;IACxB,SAAS,CAAC,QAAgB;QACxB,OAAO,IAAA,mBAAW,EAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,EAAE,GAAG,EAAE;YACtD,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAE1C,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE,CAAC;YACpC,oEAAoE;YACpE,8CAA8C;YAC9C,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YACpC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;QAChC,CAAC;IACH,CAAC;IAED,uEAAuE;IACvE,cAAc,CAAC,QAAsB;QACnC,0EAA0E;QAC1E,0EAA0E;QAC1E,4EAA4E;QAC5E,6BAA6B;QAC7B,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;IAC/B,CAAC;CACF;AA1FD,gCA0FC;AAED;;;;;GAKG;AAEH,MAAa,OAAO;IACT,QAAQ,CAAS;IACT,MAAM,CAAa;IACnB,YAAY,CAAkB;IAE/C,gCAAgC;IAChC,MAAM,CAAC,UAAU,CAAC,IAAiB;QACjC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,+BAAc,CAAC,CAAC;IACxD,CAAC;IAED,2EAA2E;IAC3E,4EAA4E;IAC5E,UAAU;IACV,MAAM,KAAK,QAAQ;QACjB,OAAO,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,+BAAc,CAAC,CAAC;IACvD,CAAC;IAED,yCAAyC;IACzC,YAAY,MAAkB,EAAE,QAAgB;QAC9C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,YAAY,GAAG,IAAA,mBAAW,EAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACnD,YAAY,CAAC,WAAwB;gBACnC,OAAO,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC;oBACjC,GAAG,WAAW;oBACd,QAAQ;iBACT,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,QAAgB;QACxB,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAChC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAChC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAChC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IAC/B,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IAC/B,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED,kBAAkB,CAAC,KAAe;QAChC,mBAAG,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;IACtC,CAAC;IAED,IAAI,YAAY;QACd,OAAO;YACL,QAAQ,EAAE,CAAC,QAAsB,EAAE,EAAE,CAAC,4BAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC;SACtE,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,IAAU;QAC1B,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;IACvC,CAAC;IAED,gBAAgB,CAAC,GAAW,EAAE,kBAAuC;QACnE,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,kBAAkB,EAAC,CAAC,CAAC;IACzD,CAAC;IAED,mBAAmB,CAAC,eAA4B;QAC9C,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,cAAc,EAAE,GAAG,eAAe,EAAC,CAAC,CAAC;IAC7D,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,CAAC,CAAC;IACrC,CAAC;IAEO,KAAK,CAAC,SAAS,CAAC,GAAgB;QACtC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC;YACH,wDAAwD;YACxD,yBAAyB;YACzB,wDAAwD;YACxD,yDAAyD;YACzD,2CAA2C;YAC3C,wEAAwE;YACxE,iDAAiD;YACjD,MAAM,IAAA,sBAAS,EAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACvC,mEAAmE;YACnE,mEAAmE;YACnE,mEAAmE;YACnE,yEAAyE;YACzE,kDAAkD;QACpD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;YACzC,MAAM,GAAG,CAAC;QACZ,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,KAAK,CAAC;YACnC,mBAAG,CAAC,kBAAkB,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,uEAAuE;IACvE,cAAc,CAAC,SAAoB;QACjC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;IAClC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;IACjC,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;IACpC,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;IACtC,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,IAAI,uBAAuB;QACzB,OAAO,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC;IAC7C,CAAC;IAED,wEAAwE;IACxE,yEAAyE;IACzE,mBAAmB;IACnB,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,QAAQ,CAAC,OAAe;QACtB,eAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;CACF;AApKD,0BAoKC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertExists, assertTrue} from '../base/logging';\nimport {App} from '../public/app';\nimport {TraceContext, TraceImpl} from './trace_impl';\nimport {CommandManagerImpl} from './command_manager';\nimport {OmniboxManagerImpl} from './omnibox_manager';\nimport {raf} from './raf_scheduler';\nimport {SidebarManagerImpl} from './sidebar_manager';\nimport {PluginManagerImpl} from './plugin_manager';\nimport {NewEngineMode} from '../trace_processor/engine';\nimport {RouteArgs} from '../public/route_schema';\nimport {SqlPackage} from '../public/extra_sql_packages';\nimport {SerializedAppState} from './state_serialization_schema';\nimport {PostedTrace, TraceSource} from './trace_source';\nimport {loadTrace} from './load_trace';\nimport {CORE_PLUGIN_ID} from './plugin_manager';\nimport {Router} from './router';\nimport {AnalyticsInternal, initAnalytics} from './analytics_impl';\nimport {createProxy, getOrCreate} from '../base/utils';\nimport {PageManagerImpl} from './page_manager';\nimport {PageHandler} from '../public/page';\nimport {PerfManager} from './perf_manager';\nimport {ServiceWorkerController} from '../frontend/service_worker_controller';\nimport {FeatureFlagManager, FlagSettings} from '../public/feature_flag';\nimport {featureFlags} from './feature_flags';\n\n// The args that frontend/index.ts passes when calling AppImpl.initialize().\n// This is to deal with injections that would otherwise cause circular deps.\nexport interface AppInitArgs {\n  initialRouteArgs: RouteArgs;\n}\n\n/**\n * Handles the global state of the ui, for anything that is not related to a\n * specific trace. This is always available even before a trace is loaded (in\n * contrast to TraceContext, which is bound to the lifetime of a trace).\n * There is only one instance in total of this class (see instance()).\n * This class is only exposed to TraceImpl, nobody else should refer to this\n * and should use AppImpl instead.\n */\nexport class AppContext {\n  // The per-plugin instances of AppImpl (including the CORE_PLUGIN one).\n  private readonly pluginInstances = new Map<string, AppImpl>();\n  readonly commandMgr = new CommandManagerImpl();\n  readonly omniboxMgr = new OmniboxManagerImpl();\n  readonly pageMgr = new PageManagerImpl();\n  readonly sidebarMgr: SidebarManagerImpl;\n  readonly pluginMgr: PluginManagerImpl;\n  readonly perfMgr = new PerfManager();\n  readonly analytics: AnalyticsInternal;\n  readonly serviceWorkerController: ServiceWorkerController;\n  httpRpc = {\n    newEngineMode: 'USE_HTTP_RPC_IF_AVAILABLE' as NewEngineMode,\n    httpRpcAvailable: false,\n  };\n  initialRouteArgs: RouteArgs;\n  isLoadingTrace = false; // Set when calling openTrace().\n  readonly initArgs: AppInitArgs;\n  readonly embeddedMode: boolean;\n  readonly testingMode: boolean;\n\n  // This is normally empty and is injected with extra google-internal packages\n  // via is_internal_user.js\n  extraSqlPackages: SqlPackage[] = [];\n\n  // The currently open trace.\n  currentTrace?: TraceContext;\n\n  private static _instance: AppContext;\n\n  static initialize(initArgs: AppInitArgs): AppContext {\n    assertTrue(AppContext._instance === undefined);\n    return (AppContext._instance = new AppContext(initArgs));\n  }\n\n  static get instance(): AppContext {\n    return assertExists(AppContext._instance);\n  }\n\n  // This constructor is invoked only once, when frontend/index.ts invokes\n  // AppMainImpl.initialize().\n  private constructor(initArgs: AppInitArgs) {\n    this.initArgs = initArgs;\n    this.initialRouteArgs = initArgs.initialRouteArgs;\n    this.serviceWorkerController = new ServiceWorkerController();\n    this.embeddedMode = this.initialRouteArgs.mode === 'embedded';\n    this.testingMode =\n      self.location !== undefined &&\n      self.location.search.indexOf('testing=1') >= 0;\n    this.sidebarMgr = new SidebarManagerImpl({\n      disabled: this.embeddedMode,\n      hidden: this.initialRouteArgs.hideSidebar,\n    });\n    this.analytics = initAnalytics(this.testingMode, this.embeddedMode);\n    this.pluginMgr = new PluginManagerImpl({\n      forkForPlugin: (pluginId) => this.forPlugin(pluginId),\n      get trace() {\n        return AppImpl.instance.trace;\n      },\n    });\n  }\n\n  // Gets or creates an instance of AppImpl backed by the current AppContext\n  // for the given plugin.\n  forPlugin(pluginId: string) {\n    return getOrCreate(this.pluginInstances, pluginId, () => {\n      return new AppImpl(this, pluginId);\n    });\n  }\n\n  closeCurrentTrace() {\n    this.omniboxMgr.reset(/* focus= */ false);\n\n    if (this.currentTrace !== undefined) {\n      // This will trigger the unregistration of trace-scoped commands and\n      // sidebar menuitems (and few similar things).\n      this.currentTrace[Symbol.dispose]();\n      this.currentTrace = undefined;\n    }\n  }\n\n  // Called by trace_loader.ts soon after it has created a new TraceImpl.\n  setActiveTrace(traceCtx: TraceContext) {\n    // In 99% this closeCurrentTrace() call is not needed because the real one\n    // is performed by openTrace() in this file. However in some rare cases we\n    // might end up loading a trace while another one is still loading, and this\n    // covers races in that case.\n    this.closeCurrentTrace();\n    this.currentTrace = traceCtx;\n  }\n}\n\n/*\n * Every plugin gets its own instance. This is how we keep track\n * what each plugin is doing and how we can blame issues on particular\n * plugins.\n * The instance exists for the whole duration a plugin is active.\n */\n\nexport class AppImpl implements App {\n  readonly pluginId: string;\n  private readonly appCtx: AppContext;\n  private readonly pageMgrProxy: PageManagerImpl;\n\n  // Invoked by frontend/index.ts.\n  static initialize(args: AppInitArgs) {\n    AppContext.initialize(args).forPlugin(CORE_PLUGIN_ID);\n  }\n\n  // Gets access to the one instance that the core can use. Note that this is\n  // NOT the only instance, as other AppImpl instance will be created for each\n  // plugin.\n  static get instance(): AppImpl {\n    return AppContext.instance.forPlugin(CORE_PLUGIN_ID);\n  }\n\n  // Only called by AppContext.forPlugin().\n  constructor(appCtx: AppContext, pluginId: string) {\n    this.appCtx = appCtx;\n    this.pluginId = pluginId;\n\n    this.pageMgrProxy = createProxy(this.appCtx.pageMgr, {\n      registerPage(pageHandler: PageHandler): Disposable {\n        return appCtx.pageMgr.registerPage({\n          ...pageHandler,\n          pluginId,\n        });\n      },\n    });\n  }\n\n  forPlugin(pluginId: string): AppImpl {\n    return this.appCtx.forPlugin(pluginId);\n  }\n\n  get commands(): CommandManagerImpl {\n    return this.appCtx.commandMgr;\n  }\n\n  get sidebar(): SidebarManagerImpl {\n    return this.appCtx.sidebarMgr;\n  }\n\n  get omnibox(): OmniboxManagerImpl {\n    return this.appCtx.omniboxMgr;\n  }\n\n  get plugins(): PluginManagerImpl {\n    return this.appCtx.pluginMgr;\n  }\n\n  get analytics(): AnalyticsInternal {\n    return this.appCtx.analytics;\n  }\n\n  get pages(): PageManagerImpl {\n    return this.pageMgrProxy;\n  }\n\n  get trace(): TraceImpl | undefined {\n    return this.appCtx.currentTrace?.forPlugin(this.pluginId);\n  }\n\n  scheduleFullRedraw(force?: 'force'): void {\n    raf.scheduleFullRedraw(force);\n  }\n\n  get httpRpc() {\n    return this.appCtx.httpRpc;\n  }\n\n  get initialRouteArgs(): RouteArgs {\n    return this.appCtx.initialRouteArgs;\n  }\n\n  get featureFlags(): FeatureFlagManager {\n    return {\n      register: (settings: FlagSettings) => featureFlags.register(settings),\n    };\n  }\n\n  openTraceFromFile(file: File): void {\n    this.openTrace({type: 'FILE', file});\n  }\n\n  openTraceFromUrl(url: string, serializedAppState?: SerializedAppState) {\n    this.openTrace({type: 'URL', url, serializedAppState});\n  }\n\n  openTraceFromBuffer(postMessageArgs: PostedTrace): void {\n    this.openTrace({type: 'ARRAY_BUFFER', ...postMessageArgs});\n  }\n\n  openTraceFromHttpRpc(): void {\n    this.openTrace({type: 'HTTP_RPC'});\n  }\n\n  private async openTrace(src: TraceSource) {\n    this.appCtx.closeCurrentTrace();\n    this.appCtx.isLoadingTrace = true;\n    try {\n      // loadTrace() in trace_loader.ts will do the following:\n      // - Create a new engine.\n      // - Pump the data from the TraceSource into the engine.\n      // - Do the initial queries to build the TraceImpl object\n      // - Call AppImpl.setActiveTrace(TraceImpl)\n      // - Continue with the trace loading logic (track decider, plugins, etc)\n      // - Resolve the promise when everything is done.\n      await loadTrace(this, src);\n      this.omnibox.reset(/* focus= */ false);\n      // loadTrace() internally will call setActiveTrace() and change our\n      // _currentTrace in the middle of its ececution. We cannot wait for\n      // loadTrace to be finished before setting it because some internal\n      // implementation details of loadTrace() rely on that trace to be current\n      // to work properly (mainly the router hash uuid).\n    } catch (err) {\n      this.omnibox.showStatusMessage(`${err}`);\n      throw err;\n    } finally {\n      this.appCtx.isLoadingTrace = false;\n      raf.scheduleFullRedraw();\n    }\n  }\n\n  // Called by trace_loader.ts soon after it has created a new TraceImpl.\n  setActiveTrace(traceImpl: TraceImpl) {\n    this.appCtx.setActiveTrace(traceImpl.__traceCtxForApp);\n  }\n\n  get embeddedMode(): boolean {\n    return this.appCtx.embeddedMode;\n  }\n\n  get testingMode(): boolean {\n    return this.appCtx.testingMode;\n  }\n\n  get isLoadingTrace() {\n    return this.appCtx.isLoadingTrace;\n  }\n\n  get extraSqlPackages(): SqlPackage[] {\n    return this.appCtx.extraSqlPackages;\n  }\n\n  get perfDebugging(): PerfManager {\n    return this.appCtx.perfMgr;\n  }\n\n  get serviceWorkerController(): ServiceWorkerController {\n    return this.appCtx.serviceWorkerController;\n  }\n\n  // Nothing other than TraceImpl's constructor should ever refer to this.\n  // This is necessary to avoid circular dependencies between trace_impl.ts\n  // and app_impl.ts.\n  get __appCtxForTrace() {\n    return this.appCtx;\n  }\n\n  navigate(newHash: string): void {\n    Router.navigate(newHash);\n  }\n}\n"]}
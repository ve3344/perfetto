{"version":3,"file":"event_set_unittest.js","sourceRoot":"","sources":["../../../src/core/event_set_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  c,\n  cmpFromExpr,\n  cmpFromSort,\n  ConcreteEventSet,\n  Direction,\n  EmptyEventSet,\n  EmptyKeySet,\n  eq,\n  Event,\n  EventSet,\n  isConcreteEventSet,\n  isEmptyEventSet,\n  KeySet,\n  Num,\n  Str,\n  UntypedEvent,\n  v,\n} from './event_set';\n\ndescribe('EventSet', () => {\n  test('Event', () => {\n    {\n      const keyset: EmptyKeySet = {};\n      const event: Event<typeof keyset> = {\n        id: 'foo',\n      };\n      void event;\n    }\n    {\n      const keyset = {\n        bar: Num,\n      };\n      const event: Event<typeof keyset> = {\n        id: 'foo',\n        bar: 42,\n      };\n      void event;\n    }\n  });\n\n  describe('EmptyEventSet', () => {\n    test('isEmpty', async () => {\n      const events = EmptyEventSet.get();\n      expect(await events.isEmpty()).toEqual(true);\n      expect(await events.count()).toEqual(0);\n    });\n\n    test('isEmptyEventSet', () => {\n      const events: EventSet<KeySet> = EmptyEventSet.get();\n      expect(isEmptyEventSet(events)).toEqual(true);\n    });\n\n    test('materialise', async () => {\n      const events: EventSet<KeySet> = EmptyEventSet.get();\n      const materialised = await events.materialise({});\n\n      expect(await materialised.isEmpty()).toEqual(true);\n      expect(await materialised.count()).toEqual(0);\n      expect(materialised.events).toEqual([]);\n      expect(isConcreteEventSet(materialised)).toEqual(true);\n    });\n\n    test('union', async () => {\n      const a: EventSet<KeySet> = EmptyEventSet.get();\n      const b: EventSet<KeySet> = EmptyEventSet.get();\n\n      const aUnionB = a.union(b);\n\n      expect(await aUnionB.isEmpty()).toEqual(true);\n      expect(await aUnionB.count()).toEqual(0);\n    });\n\n    test('intersect', async () => {\n      const a: EventSet<KeySet> = EmptyEventSet.get();\n      const b: EventSet<KeySet> = EmptyEventSet.get();\n\n      const aIntersectB = a.intersect(b);\n\n      expect(await aIntersectB.isEmpty()).toEqual(true);\n      expect(await aIntersectB.count()).toEqual(0);\n    });\n\n    test('filter', async () => {\n      const events: EventSet<KeySet> = EmptyEventSet.get();\n      const filtered = await events.filter(c(true));\n\n      expect(filtered).toBe(events);\n      expect(await filtered.isEmpty()).toEqual(true);\n      expect(await filtered.count()).toEqual(0);\n    });\n\n    test('sort', async () => {\n      const events: EventSet<KeySet> = EmptyEventSet.get();\n      const sorted = await events.sort({\n        direction: Direction.ASC,\n        expression: c(0),\n      });\n\n      expect(sorted).toBe(events);\n      expect(await sorted.isEmpty()).toEqual(true);\n      expect(await sorted.count()).toEqual(0);\n    });\n  });\n\n  describe('ConcreteEventSet', () => {\n    test('isEmpty', async () => {\n      const event: Event<EmptyKeySet> = {\n        id: 'foo',\n      };\n      const empty = new ConcreteEventSet<EmptyKeySet>({}, []);\n      const events = new ConcreteEventSet<EmptyKeySet>({}, [event]);\n      expect(await empty.isEmpty()).toEqual(true);\n      expect(await empty.count()).toEqual(0);\n      expect(await events.isEmpty()).toEqual(false);\n      expect(await events.count()).toEqual(1);\n    });\n\n    test('isConcreteEventSet', () => {\n      expect(\n        isConcreteEventSet(new ConcreteEventSet<EmptyKeySet>({}, [])),\n      ).toEqual(true);\n      expect(isConcreteEventSet(EmptyEventSet.get())).toEqual(false);\n    });\n\n    test('materialise', async () => {\n      const keys = {\n        num: Num,\n        char: Str,\n      };\n\n      const a: Event<typeof keys> = {\n        id: 'a',\n        num: 97,\n        char: 'a',\n      };\n      const b: Event<typeof keys> = {\n        id: 'b',\n        num: 98,\n        char: 'b',\n      };\n      const d: Event<typeof keys> = {\n        id: 'd',\n        num: 100,\n        char: 'd',\n      };\n\n      const events = new ConcreteEventSet(keys, [a, b, d]);\n\n      expect((await events.materialise(keys)).events).toEqual([a, b, d]);\n      expect((await events.materialise(keys, 1)).events).toEqual([b, d]);\n      expect((await events.materialise(keys, 1, 1)).events).toEqual([b]);\n      expect((await events.materialise(keys, 99)).events).toEqual([]);\n      expect((await events.materialise(keys, 99, 0)).events).toEqual([]);\n      expect((await events.materialise({num: Num})).events).toEqual([\n        {id: 'a', num: 97},\n        {id: 'b', num: 98},\n        {id: 'd', num: 100},\n      ]);\n      expect((await events.materialise({char: Str}, 1, 1)).events).toEqual([\n        {id: 'b', char: 'b'},\n      ]);\n    });\n\n    test('union', async () => {\n      const a: Event<EmptyKeySet> = {\n        id: 'a',\n      };\n      const b: Event<EmptyKeySet> = {\n        id: 'b',\n      };\n      const d: Event<EmptyKeySet> = {\n        id: 'd',\n      };\n\n      const empty = EmptyEventSet.get();\n      const justA = new ConcreteEventSet({}, [a]);\n      const justB = new ConcreteEventSet({}, [b]);\n      const justD = new ConcreteEventSet({}, [d]);\n\n      const aAndB = justA.union(justB);\n      const aAndA = justA.union(justA);\n      const aAndD = justA.union(justD);\n      const aAndBAndEmpty = aAndB.union(empty);\n      const aAndDAndAAndB = aAndD.union(aAndB);\n\n      expect((await aAndB.materialise({})).events).toEqual([a, b]);\n      expect((await aAndA.materialise({})).events).toEqual([a]);\n      expect((await aAndD.materialise({})).events).toEqual([a, d]);\n      expect((await aAndBAndEmpty.materialise({})).events).toEqual([a, b]);\n      expect((await aAndDAndAAndB.materialise({})).events).toEqual([a, d, b]);\n\n      expect(await aAndB.isEmpty()).toEqual(false);\n      expect(await aAndA.isEmpty()).toEqual(false);\n      expect(await aAndD.isEmpty()).toEqual(false);\n      expect(await aAndBAndEmpty.isEmpty()).toEqual(false);\n      expect(await aAndDAndAAndB.isEmpty()).toEqual(false);\n\n      expect(await aAndB.count()).toEqual(2);\n      expect(await aAndA.count()).toEqual(1);\n      expect(await aAndD.count()).toEqual(2);\n      expect(await aAndBAndEmpty.count()).toEqual(2);\n      expect(await aAndDAndAAndB.count()).toEqual(3);\n    });\n\n    test('intersection', async () => {\n      const a: Event<EmptyKeySet> = {\n        id: 'a',\n      };\n      const b: Event<EmptyKeySet> = {\n        id: 'b',\n      };\n      const d: Event<EmptyKeySet> = {\n        id: 'd',\n      };\n\n      const empty = EmptyEventSet.get();\n      const justA = new ConcreteEventSet({}, [a]);\n      const justB = new ConcreteEventSet({}, [b]);\n      const justD = new ConcreteEventSet({}, [d]);\n\n      const aAndB = justA.intersect(justB);\n      const aAndA = justA.intersect(justA);\n      const aAndD = justA.intersect(justD);\n      const aBAndEmpty = justA.union(justB).intersect(empty);\n      const aDAndAB = justA.union(justB).intersect(justA.union(justD));\n\n      expect((await aAndB.materialise({})).events).toEqual([]);\n      expect((await aAndA.materialise({})).events).toEqual([a]);\n      expect((await aAndD.materialise({})).events).toEqual([]);\n      expect((await aBAndEmpty.materialise({})).events).toEqual([]);\n      expect((await aDAndAB.materialise({})).events).toEqual([a]);\n\n      expect(await aAndB.isEmpty()).toEqual(true);\n      expect(await aAndA.isEmpty()).toEqual(false);\n      expect(await aAndD.isEmpty()).toEqual(true);\n      expect(await aBAndEmpty.isEmpty()).toEqual(true);\n      expect(await aDAndAB.isEmpty()).toEqual(false);\n\n      expect(await aAndB.count()).toEqual(0);\n      expect(await aAndA.count()).toEqual(1);\n      expect(await aAndD.count()).toEqual(0);\n      expect(await aBAndEmpty.count()).toEqual(0);\n      expect(await aDAndAB.count()).toEqual(1);\n    });\n\n    test('filter', async () => {\n      const keys = {\n        num: Num,\n        char: Str,\n      };\n\n      const a: Event<typeof keys> = {\n        id: 'a',\n        num: 97,\n        char: 'a',\n      };\n      const b: Event<typeof keys> = {\n        id: 'b',\n        num: 98,\n        char: 'b',\n      };\n      const d: Event<typeof keys> = {\n        id: 'd',\n        num: 100,\n        char: 'd',\n      };\n\n      const events = new ConcreteEventSet(keys, [a, b, d]);\n\n      const justA = events.filter(eq(v('id'), c('a')));\n      const justD = events.filter(eq(v('num'), c(100)));\n\n      expect((await justA.materialise(keys)).events).toEqual([a]);\n      expect((await justD.materialise(keys)).events).toEqual([d]);\n    });\n\n    test('sort', async () => {\n      const keys = {\n        num: Num,\n        char: Str,\n      };\n\n      const a: Event<typeof keys> = {\n        id: 'a',\n        num: 97,\n        char: 'a',\n      };\n      const b: Event<typeof keys> = {\n        id: 'b',\n        num: 98,\n        char: 'b',\n      };\n      const d: Event<typeof keys> = {\n        id: 'd',\n        num: 100,\n        char: 'd',\n      };\n\n      const events = new ConcreteEventSet(keys, [a, b, d]);\n\n      const byNum = events.sort({\n        expression: v('num'),\n        direction: Direction.ASC,\n      });\n      const byStr = events.sort({\n        expression: v('char'),\n        direction: Direction.ASC,\n      });\n\n      expect((await byNum.materialise(keys)).events).toEqual([a, b, d]);\n      expect((await byStr.materialise(keys)).events).toEqual([a, b, d]);\n    });\n\n    test('sort desc', async () => {\n      const keys = {\n        num: Num,\n        char: Str,\n      };\n\n      const a: Event<typeof keys> = {\n        id: 'a',\n        num: 97,\n        char: 'a',\n      };\n      const b: Event<typeof keys> = {\n        id: 'b',\n        num: 98,\n        char: 'b',\n      };\n      const d: Event<typeof keys> = {\n        id: 'd',\n        num: 100,\n        char: 'd',\n      };\n\n      const events = new ConcreteEventSet(keys, [a, b, d]);\n\n      const byNum = events.sort({\n        expression: v('num'),\n        direction: Direction.DESC,\n      });\n      const byStr = events.sort({\n        expression: v('char'),\n        direction: Direction.DESC,\n      });\n\n      expect((await byNum.materialise(keys)).events).toEqual([d, b, a]);\n      expect((await byStr.materialise(keys)).events).toEqual([d, b, a]);\n    });\n  });\n});\n\ndescribe('cmpFromExpr', () => {\n  test('simple', () => {\n    const a: UntypedEvent = {\n      id: 'a',\n      x: 0,\n    };\n    const b: UntypedEvent = {\n      id: 'b',\n      x: 42,\n    };\n    const c: UntypedEvent = {\n      id: 'c',\n      x: 0,\n    };\n\n    const cmp = cmpFromExpr(v('x'));\n    expect(cmp(a, b)).toEqual(-1);\n    expect(cmp(a, a)).toEqual(0);\n    expect(cmp(b, a)).toEqual(1);\n    expect(cmp(a, c)).toEqual(0);\n  });\n\n  test('kinds', () => {\n    const nullEvent: UntypedEvent = {\n      id: 'nullEvent',\n      x: null,\n    };\n    const sevenEvent: UntypedEvent = {\n      id: 'sevenEvent',\n      x: 7,\n    };\n    const oneEvent: UntypedEvent = {\n      id: 'oneEvent',\n      x: 1,\n    };\n    const zeroEvent: UntypedEvent = {\n      id: 'zeroEvent',\n      x: 0,\n    };\n    const trueEvent: UntypedEvent = {\n      id: 'trueEvent',\n      x: true,\n    };\n    const falseEvent: UntypedEvent = {\n      id: 'falseEvent',\n      x: false,\n    };\n    const aardvarkEvent: UntypedEvent = {\n      id: 'aardvarkEvent',\n      x: 'aardvark',\n    };\n    const zigguratEvent: UntypedEvent = {\n      id: 'zigguratEvent',\n      x: 'ziggurat',\n    };\n    const bigZeroEvent: UntypedEvent = {\n      id: 'bigZeroEvent',\n      x: 0n,\n    };\n    const bigOneEvent: UntypedEvent = {\n      id: 'bigOneEvent',\n      x: 1n,\n    };\n    const bigTwoEvent: UntypedEvent = {\n      id: 'bigTwoEvent',\n      x: 2n,\n    };\n\n    const cmp = cmpFromExpr(v('x'));\n\n    // Everything is equal to itself:\n    expect(cmp(nullEvent, nullEvent)).toEqual(0);\n    expect(cmp(sevenEvent, sevenEvent)).toEqual(0);\n    expect(cmp(oneEvent, oneEvent)).toEqual(0);\n    expect(cmp(zeroEvent, zeroEvent)).toEqual(0);\n    expect(cmp(falseEvent, falseEvent)).toEqual(0);\n    expect(cmp(trueEvent, trueEvent)).toEqual(0);\n    expect(cmp(aardvarkEvent, aardvarkEvent)).toEqual(0);\n    expect(cmp(zigguratEvent, zigguratEvent)).toEqual(0);\n    expect(cmp(bigZeroEvent, bigZeroEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, bigOneEvent)).toEqual(0);\n    expect(cmp(bigTwoEvent, bigTwoEvent)).toEqual(0);\n\n    // BigInt(x) == x\n    expect(cmp(bigZeroEvent, zeroEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, oneEvent)).toEqual(0);\n\n    // one = true, zero = false:\n    expect(cmp(oneEvent, trueEvent)).toEqual(0);\n    expect(cmp(zeroEvent, falseEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, trueEvent)).toEqual(0);\n    expect(cmp(bigZeroEvent, falseEvent)).toEqual(0);\n\n    // 0 < 1 < 7\n    expect(cmp(zeroEvent, oneEvent)).toEqual(-1);\n    expect(cmp(sevenEvent, oneEvent)).toEqual(1);\n\n    // 0n < 1n < 2n\n    expect(cmp(bigZeroEvent, bigOneEvent)).toEqual(-1);\n    expect(cmp(bigTwoEvent, bigOneEvent)).toEqual(1);\n\n    // 0 < 1n < 7\n    expect(cmp(zeroEvent, bigOneEvent)).toEqual(-1);\n    expect(cmp(sevenEvent, bigOneEvent)).toEqual(1);\n\n    // aardvark < ziggurat\n    expect(cmp(aardvarkEvent, zigguratEvent)).toEqual(-1);\n\n    // null < {bools, numbers, BigInt} < strings\n    expect(cmp(nullEvent, falseEvent)).toEqual(-1);\n    expect(cmp(aardvarkEvent, sevenEvent)).toEqual(1);\n    expect(cmp(nullEvent, bigZeroEvent)).toEqual(-1);\n    expect(cmp(bigZeroEvent, sevenEvent)).toEqual(-1);\n    expect(cmp(nullEvent, falseEvent)).toEqual(-1);\n    expect(cmp(falseEvent, sevenEvent)).toEqual(-1);\n  });\n});\n\ndescribe('cmpFromSort', () => {\n  test('simple asc', () => {\n    const a: UntypedEvent = {\n      id: 'a',\n      x: 0,\n    };\n    const b: UntypedEvent = {\n      id: 'b',\n      x: 42,\n    };\n    const c: UntypedEvent = {\n      id: 'c',\n      x: 0,\n    };\n\n    const cmp = cmpFromSort({\n      expression: v('x'),\n      direction: Direction.ASC,\n    });\n    expect(cmp(a, b)).toEqual(-1);\n    expect(cmp(a, a)).toEqual(0);\n    expect(cmp(b, a)).toEqual(1);\n    expect(cmp(a, c)).toEqual(0);\n  });\n\n  test('kinds asc', () => {\n    const nullEvent: UntypedEvent = {\n      id: 'nullEvent',\n      x: null,\n    };\n    const sevenEvent: UntypedEvent = {\n      id: 'sevenEvent',\n      x: 7,\n    };\n    const oneEvent: UntypedEvent = {\n      id: 'oneEvent',\n      x: 1,\n    };\n    const zeroEvent: UntypedEvent = {\n      id: 'zeroEvent',\n      x: 0,\n    };\n    const trueEvent: UntypedEvent = {\n      id: 'trueEvent',\n      x: true,\n    };\n    const falseEvent: UntypedEvent = {\n      id: 'falseEvent',\n      x: false,\n    };\n    const aardvarkEvent: UntypedEvent = {\n      id: 'aardvarkEvent',\n      x: 'aardvark',\n    };\n    const zigguratEvent: UntypedEvent = {\n      id: 'zigguratEvent',\n      x: 'ziggurat',\n    };\n    const bigZeroEvent: UntypedEvent = {\n      id: 'bigZeroEvent',\n      x: 0n,\n    };\n    const bigOneEvent: UntypedEvent = {\n      id: 'bigOneEvent',\n      x: 1n,\n    };\n    const bigTwoEvent: UntypedEvent = {\n      id: 'bigTwoEvent',\n      x: 2n,\n    };\n\n    const cmp = cmpFromSort({\n      expression: v('x'),\n      direction: Direction.ASC,\n    });\n\n    // Everything is equal to itself:\n    expect(cmp(nullEvent, nullEvent)).toEqual(0);\n    expect(cmp(sevenEvent, sevenEvent)).toEqual(0);\n    expect(cmp(oneEvent, oneEvent)).toEqual(0);\n    expect(cmp(zeroEvent, zeroEvent)).toEqual(0);\n    expect(cmp(falseEvent, falseEvent)).toEqual(0);\n    expect(cmp(trueEvent, trueEvent)).toEqual(0);\n    expect(cmp(aardvarkEvent, aardvarkEvent)).toEqual(0);\n    expect(cmp(zigguratEvent, zigguratEvent)).toEqual(0);\n    expect(cmp(bigZeroEvent, bigZeroEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, bigOneEvent)).toEqual(0);\n    expect(cmp(bigTwoEvent, bigTwoEvent)).toEqual(0);\n\n    // BigInt(x) == x\n    expect(cmp(bigZeroEvent, zeroEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, oneEvent)).toEqual(0);\n\n    // one = true, zero = false:\n    expect(cmp(oneEvent, trueEvent)).toEqual(0);\n    expect(cmp(zeroEvent, falseEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, trueEvent)).toEqual(0);\n    expect(cmp(bigZeroEvent, falseEvent)).toEqual(0);\n\n    // 0 < 1 < 7\n    expect(cmp(zeroEvent, oneEvent)).toEqual(-1);\n    expect(cmp(sevenEvent, oneEvent)).toEqual(1);\n\n    // 0n < 1n < 2n\n    expect(cmp(bigZeroEvent, bigOneEvent)).toEqual(-1);\n    expect(cmp(bigTwoEvent, bigOneEvent)).toEqual(1);\n\n    // 0 < 1n < 7\n    expect(cmp(zeroEvent, bigOneEvent)).toEqual(-1);\n    expect(cmp(sevenEvent, bigOneEvent)).toEqual(1);\n\n    // aardvark < ziggurat\n    expect(cmp(aardvarkEvent, zigguratEvent)).toEqual(-1);\n\n    // null < {bools, numbers, BigInt} < strings\n    expect(cmp(nullEvent, falseEvent)).toEqual(-1);\n    expect(cmp(aardvarkEvent, sevenEvent)).toEqual(1);\n    expect(cmp(nullEvent, bigZeroEvent)).toEqual(-1);\n    expect(cmp(bigZeroEvent, sevenEvent)).toEqual(-1);\n    expect(cmp(nullEvent, falseEvent)).toEqual(-1);\n    expect(cmp(falseEvent, sevenEvent)).toEqual(-1);\n  });\n\n  test('simple desc', () => {\n    const a: UntypedEvent = {\n      id: 'a',\n      x: 0,\n    };\n    const b: UntypedEvent = {\n      id: 'b',\n      x: 42,\n    };\n    const c: UntypedEvent = {\n      id: 'c',\n      x: 0,\n    };\n\n    const cmp = cmpFromSort({\n      expression: v('x'),\n      direction: Direction.DESC,\n    });\n    expect(cmp(a, b)).toEqual(1);\n    expect(cmp(a, a)).toEqual(0);\n    expect(cmp(b, a)).toEqual(-1);\n    expect(cmp(a, c)).toEqual(0);\n  });\n\n  test('kinds desc', () => {\n    const nullEvent: UntypedEvent = {\n      id: 'nullEvent',\n      x: null,\n    };\n    const sevenEvent: UntypedEvent = {\n      id: 'sevenEvent',\n      x: 7,\n    };\n    const oneEvent: UntypedEvent = {\n      id: 'oneEvent',\n      x: 1,\n    };\n    const zeroEvent: UntypedEvent = {\n      id: 'zeroEvent',\n      x: 0,\n    };\n    const trueEvent: UntypedEvent = {\n      id: 'trueEvent',\n      x: true,\n    };\n    const falseEvent: UntypedEvent = {\n      id: 'falseEvent',\n      x: false,\n    };\n    const aardvarkEvent: UntypedEvent = {\n      id: 'aardvarkEvent',\n      x: 'aardvark',\n    };\n    const zigguratEvent: UntypedEvent = {\n      id: 'zigguratEvent',\n      x: 'ziggurat',\n    };\n    const bigZeroEvent: UntypedEvent = {\n      id: 'bigZeroEvent',\n      x: 0n,\n    };\n    const bigOneEvent: UntypedEvent = {\n      id: 'bigOneEvent',\n      x: 1n,\n    };\n    const bigTwoEvent: UntypedEvent = {\n      id: 'bigTwoEvent',\n      x: 2n,\n    };\n\n    const cmp = cmpFromSort({\n      expression: v('x'),\n      direction: Direction.DESC,\n    });\n\n    // Everything is equal to itself:\n    expect(cmp(nullEvent, nullEvent)).toEqual(0);\n    expect(cmp(sevenEvent, sevenEvent)).toEqual(0);\n    expect(cmp(oneEvent, oneEvent)).toEqual(0);\n    expect(cmp(zeroEvent, zeroEvent)).toEqual(0);\n    expect(cmp(falseEvent, falseEvent)).toEqual(0);\n    expect(cmp(trueEvent, trueEvent)).toEqual(0);\n    expect(cmp(aardvarkEvent, aardvarkEvent)).toEqual(0);\n    expect(cmp(zigguratEvent, zigguratEvent)).toEqual(0);\n    expect(cmp(bigZeroEvent, bigZeroEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, bigOneEvent)).toEqual(0);\n    expect(cmp(bigTwoEvent, bigTwoEvent)).toEqual(0);\n\n    // BigInt(x) == x\n    expect(cmp(bigZeroEvent, zeroEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, oneEvent)).toEqual(0);\n\n    // one = true, zero = false:\n    expect(cmp(oneEvent, trueEvent)).toEqual(0);\n    expect(cmp(zeroEvent, falseEvent)).toEqual(0);\n    expect(cmp(bigOneEvent, trueEvent)).toEqual(0);\n    expect(cmp(bigZeroEvent, falseEvent)).toEqual(0);\n\n    // 0 < 1 < 7\n    expect(cmp(zeroEvent, oneEvent)).toEqual(1);\n    expect(cmp(sevenEvent, oneEvent)).toEqual(-1);\n\n    // 0n < 1n < 2n\n    expect(cmp(bigZeroEvent, bigOneEvent)).toEqual(1);\n    expect(cmp(bigTwoEvent, bigOneEvent)).toEqual(-1);\n\n    // 0 < 1n < 7\n    expect(cmp(zeroEvent, bigOneEvent)).toEqual(1);\n    expect(cmp(sevenEvent, bigOneEvent)).toEqual(-1);\n\n    // aardvark < ziggurat\n    expect(cmp(aardvarkEvent, zigguratEvent)).toEqual(1);\n\n    // null < {bools, numbers, BigInt} < strings\n    expect(cmp(nullEvent, falseEvent)).toEqual(1);\n    expect(cmp(aardvarkEvent, sevenEvent)).toEqual(-1);\n    expect(cmp(nullEvent, bigZeroEvent)).toEqual(1);\n    expect(cmp(bigZeroEvent, sevenEvent)).toEqual(1);\n    expect(cmp(nullEvent, falseEvent)).toEqual(1);\n    expect(cmp(falseEvent, sevenEvent)).toEqual(1);\n  });\n});\n"]}
{"version":3,"file":"track_manager_unittest.js","sourceRoot":"","sources":["../../../src/core/track_manager_unittest.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertExists} from '../base/logging';\nimport {Duration} from '../base/time';\nimport {TimeScale} from '../base/time_scale';\nimport {TrackDescriptor, TrackRenderContext} from '../public/track';\nimport {HighPrecisionTime} from '../base/high_precision_time';\nimport {HighPrecisionTimeSpan} from '../base/high_precision_time_span';\nimport {TrackManagerImpl} from '../core/track_manager';\n\nfunction makeMockTrack() {\n  return {\n    onCreate: jest.fn(),\n    onUpdate: jest.fn(),\n    onDestroy: jest.fn(),\n\n    render: jest.fn(),\n    onFullRedraw: jest.fn(),\n    getSliceVerticalBounds: jest.fn(),\n    getHeight: jest.fn(),\n    getTrackShellButtons: jest.fn(),\n    onMouseMove: jest.fn(),\n    onMouseClick: jest.fn(),\n    onMouseOut: jest.fn(),\n  };\n}\n\nasync function settle() {\n  await new Promise((r) => setTimeout(r, 0));\n}\n\nlet mockTrack: ReturnType<typeof makeMockTrack>;\nlet td: TrackDescriptor;\nlet trackManager: TrackManagerImpl;\nconst visibleWindow = new HighPrecisionTimeSpan(HighPrecisionTime.ZERO, 0);\nconst dummyCtx: TrackRenderContext = {\n  trackUri: 'foo',\n  ctx: new CanvasRenderingContext2D(),\n  size: {width: 123, height: 123},\n  visibleWindow,\n  resolution: Duration.ZERO,\n  timescale: new TimeScale(visibleWindow, {left: 0, right: 0}),\n};\n\nbeforeEach(() => {\n  mockTrack = makeMockTrack();\n  td = {\n    uri: 'test',\n    title: 'foo',\n    track: mockTrack,\n  };\n  trackManager = new TrackManagerImpl();\n  trackManager.registerTrack(td);\n});\n\ndescribe('TrackManager', () => {\n  it('calls track lifecycle hooks', async () => {\n    const entry = assertExists(trackManager.getTrackRenderer(td.uri));\n\n    entry.render(dummyCtx);\n    await settle();\n    expect(mockTrack.onCreate).toHaveBeenCalledTimes(1);\n    expect(mockTrack.onUpdate).toHaveBeenCalledTimes(1);\n\n    // Double flush should destroy all tracks\n    trackManager.flushOldTracks();\n    trackManager.flushOldTracks();\n    await settle();\n    expect(mockTrack.onDestroy).toHaveBeenCalledTimes(1);\n  });\n\n  it('calls onCrate lazily', async () => {\n    // Check we wait until the first call to render before calling onCreate\n    const entry = assertExists(trackManager.getTrackRenderer(td.uri));\n    await settle();\n    expect(mockTrack.onCreate).not.toHaveBeenCalled();\n\n    entry.render(dummyCtx);\n    await settle();\n    expect(mockTrack.onCreate).toHaveBeenCalledTimes(1);\n  });\n\n  it('reuses tracks', async () => {\n    const first = assertExists(trackManager.getTrackRenderer(td.uri));\n    trackManager.flushOldTracks();\n    first.render(dummyCtx);\n    await settle();\n\n    const second = assertExists(trackManager.getTrackRenderer(td.uri));\n    trackManager.flushOldTracks();\n    second.render(dummyCtx);\n    await settle();\n\n    expect(first).toBe(second);\n    // Ensure onCreate called only once\n    expect(mockTrack.onCreate).toHaveBeenCalledTimes(1);\n  });\n\n  it('destroys tracks when they are not resolved for one cycle', async () => {\n    const entry = assertExists(trackManager.getTrackRenderer(td.uri));\n    entry.render(dummyCtx);\n\n    // Double flush should destroy all tracks\n    trackManager.flushOldTracks();\n    trackManager.flushOldTracks();\n\n    await settle();\n\n    expect(mockTrack.onDestroy).toHaveBeenCalledTimes(1);\n  });\n\n  it('contains crash inside onCreate()', async () => {\n    const entry = assertExists(trackManager.getTrackRenderer(td.uri));\n    const e = new Error();\n\n    // Mock crash inside onCreate\n    mockTrack.onCreate.mockImplementationOnce(() => {\n      throw e;\n    });\n\n    entry.render(dummyCtx);\n    await settle();\n\n    expect(mockTrack.onCreate).toHaveBeenCalledTimes(1);\n    expect(mockTrack.onUpdate).not.toHaveBeenCalled();\n    expect(entry.getError()).toBe(e);\n  });\n\n  it('contains crash inside onUpdate()', async () => {\n    const entry = assertExists(trackManager.getTrackRenderer(td.uri));\n    const e = new Error();\n\n    // Mock crash inside onUpdate\n    mockTrack.onUpdate.mockImplementationOnce(() => {\n      throw e;\n    });\n\n    entry.render(dummyCtx);\n    await settle();\n\n    expect(mockTrack.onCreate).toHaveBeenCalledTimes(1);\n    expect(mockTrack.onUpdate).toHaveBeenCalledTimes(1);\n    expect(entry.getError()).toBe(e);\n  });\n\n  it('handles dispose after crash', async () => {\n    const entry = assertExists(trackManager.getTrackRenderer(td.uri));\n    const e = new Error();\n\n    // Mock crash inside onUpdate\n    mockTrack.onUpdate.mockImplementationOnce(() => {\n      throw e;\n    });\n\n    entry.render(dummyCtx);\n    await settle();\n\n    // Ensure we don't crash during the next render cycle\n    entry.render(dummyCtx);\n    await settle();\n  });\n});\n"]}
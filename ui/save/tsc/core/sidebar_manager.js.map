{"version":3,"file":"sidebar_manager.js","sourceRoot":"","sources":["../../../src/core/sidebar_manager.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,+CAA0C;AAE1C,mDAAoC;AAMpC,MAAa,kBAAkB;IACpB,OAAO,CAAU;IAClB,QAAQ,CAAU;IAClB,MAAM,GAAG,CAAC,CAAC;IAEV,SAAS,GAAG,IAAI,mBAAQ,CAA0B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAExE,YAAY,IAA4C;QACtD,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;IAC/B,CAAC;IAED,WAAW,CAAC,IAAqB;QAC/B,2EAA2E;QAC3E,sCAAsC;QACtC,MAAM,EAAE,GAAG,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;QACtC,MAAM,OAAO,GAA4B,EAAC,GAAG,IAAI,EAAE,EAAE,EAAC,CAAC;QACvD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,gBAAgB;QACrB,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,OAAO;QAC1B,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,mBAAG,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;CACF;AA7BD,gDA6BC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Registry} from '../base/registry';\nimport {SidebarManager, SidebarMenuItem} from '../public/sidebar';\nimport {raf} from './raf_scheduler';\n\nexport type SidebarMenuItemInternal = SidebarMenuItem & {\n  id: string; // A unique id generated by this class at registration time.\n};\n\nexport class SidebarManagerImpl implements SidebarManager {\n  readonly enabled: boolean;\n  private _visible: boolean;\n  private lastId = 0;\n\n  readonly menuItems = new Registry<SidebarMenuItemInternal>((m) => m.id);\n\n  constructor(args: {disabled?: boolean; hidden?: boolean}) {\n    this.enabled = !args.disabled;\n    this._visible = !args.hidden;\n  }\n\n  addMenuItem(item: SidebarMenuItem): Disposable {\n    // Assign a unique id to every item. This simplifies the job of the mithril\n    // component that renders the sidebar.\n    const id = `sidebar_${++this.lastId}`;\n    const itemInt: SidebarMenuItemInternal = {...item, id};\n    return this.menuItems.register(itemInt);\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public toggleVisibility() {\n    if (!this.enabled) return;\n    this._visible = !this._visible;\n    raf.scheduleFullRedraw();\n  }\n}\n"]}
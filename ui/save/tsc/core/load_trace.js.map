{"version":3,"file":"load_trace.js","sourceRoot":"","sources":["../../../src/core/load_trace.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertExists, assertTrue} from '../base/logging';\nimport {time, Time, TimeSpan} from '../base/time';\nimport {cacheTrace} from './cache_manager';\nimport {\n  getEnabledMetatracingCategories,\n  isMetatracingEnabled,\n} from './metatracing';\nimport {featureFlags} from './feature_flags';\nimport {Engine, EngineBase} from '../trace_processor/engine';\nimport {HttpRpcEngine} from '../trace_processor/http_rpc_engine';\nimport {\n  LONG,\n  LONG_NULL,\n  NUM,\n  NUM_NULL,\n  STR,\n} from '../trace_processor/query_result';\nimport {WasmEngineProxy} from '../trace_processor/wasm_engine_proxy';\nimport {\n  TraceBufferStream,\n  TraceFileStream,\n  TraceHttpStream,\n  TraceStream,\n} from '../core/trace_stream';\nimport {\n  deserializeAppStatePhase1,\n  deserializeAppStatePhase2,\n} from './state_serialization';\nimport {AppImpl} from './app_impl';\nimport {raf} from './raf_scheduler';\nimport {TraceImpl} from './trace_impl';\nimport {SerializedAppState} from './state_serialization_schema';\nimport {TraceSource} from './trace_source';\nimport {Router} from '../core/router';\nimport {TraceInfoImpl} from './trace_info_impl';\n\nconst ENABLE_CHROME_RELIABLE_RANGE_ZOOM_FLAG = featureFlags.register({\n  id: 'enableChromeReliableRangeZoom',\n  name: 'Enable Chrome reliable range zoom',\n  description: 'Automatically zoom into the reliable range for Chrome traces',\n  defaultValue: false,\n});\n\nconst ENABLE_CHROME_RELIABLE_RANGE_ANNOTATION_FLAG = featureFlags.register({\n  id: 'enableChromeReliableRangeAnnotation',\n  name: 'Enable Chrome reliable range annotation',\n  description: 'Automatically adds an annotation for the reliable range start',\n  defaultValue: false,\n});\n\n// The following flags control TraceProcessor Config.\nconst CROP_TRACK_EVENTS_FLAG = featureFlags.register({\n  id: 'cropTrackEvents',\n  name: 'Crop track events',\n  description: 'Ignores track events outside of the range of interest',\n  defaultValue: false,\n});\nconst INGEST_FTRACE_IN_RAW_TABLE_FLAG = featureFlags.register({\n  id: 'ingestFtraceInRawTable',\n  name: 'Ingest ftrace in raw table',\n  description: 'Enables ingestion of typed ftrace events into the raw table',\n  defaultValue: true,\n});\nconst ANALYZE_TRACE_PROTO_CONTENT_FLAG = featureFlags.register({\n  id: 'analyzeTraceProtoContent',\n  name: 'Analyze trace proto content',\n  description:\n    'Enables trace proto content analysis (experimental_proto_content table)',\n  defaultValue: false,\n});\nconst FTRACE_DROP_UNTIL_FLAG = featureFlags.register({\n  id: 'ftraceDropUntilAllCpusValid',\n  name: 'Crop ftrace events',\n  description:\n    'Drop ftrace events until all per-cpu data streams are known to be valid',\n  defaultValue: true,\n});\n\n// TODO(stevegolton): Move this into some global \"SQL extensions\" file and\n// ensure it's only run once.\nasync function defineMaxLayoutDepthSqlFunction(engine: Engine): Promise<void> {\n  await engine.query(`\n    create perfetto function __max_layout_depth(track_count INT, track_ids STRING)\n    returns INT AS\n    select iif(\n      $track_count = 1,\n      (\n        select max_depth\n        from _slice_track_summary\n        where id = cast($track_ids AS int)\n      ),\n      (\n        select max(layout_depth)\n        from experimental_slice_layout($track_ids)\n      )\n    );\n  `);\n}\n\nlet lastEngineId = 0;\n\nexport async function loadTrace(\n  app: AppImpl,\n  traceSource: TraceSource,\n): Promise<TraceImpl> {\n  updateStatus(app, 'Opening trace');\n  const engineId = `${++lastEngineId}`;\n  const engine = await createEngine(app, engineId);\n  return await loadTraceIntoEngine(app, traceSource, engine);\n}\n\nasync function createEngine(\n  app: AppImpl,\n  engineId: string,\n): Promise<EngineBase> {\n  // Check if there is any instance of the trace_processor_shell running in\n  // HTTP RPC mode (i.e. trace_processor_shell -D).\n  let useRpc = false;\n  if (app.httpRpc.newEngineMode === 'USE_HTTP_RPC_IF_AVAILABLE') {\n    useRpc = (await HttpRpcEngine.checkConnection()).connected;\n  }\n  let engine;\n  if (useRpc) {\n    console.log('Opening trace using native accelerator over HTTP+RPC');\n    engine = new HttpRpcEngine(engineId);\n  } else {\n    console.log('Opening trace using built-in WASM engine');\n    engine = new WasmEngineProxy(engineId);\n    engine.resetTraceProcessor({\n      cropTrackEvents: CROP_TRACK_EVENTS_FLAG.get(),\n      ingestFtraceInRawTable: INGEST_FTRACE_IN_RAW_TABLE_FLAG.get(),\n      analyzeTraceProtoContent: ANALYZE_TRACE_PROTO_CONTENT_FLAG.get(),\n      ftraceDropUntilAllCpusValid: FTRACE_DROP_UNTIL_FLAG.get(),\n    });\n  }\n  engine.onResponseReceived = () => raf.scheduleFullRedraw('force');\n\n  if (isMetatracingEnabled()) {\n    engine.enableMetatrace(assertExists(getEnabledMetatracingCategories()));\n  }\n  return engine;\n}\n\nasync function loadTraceIntoEngine(\n  app: AppImpl,\n  traceSource: TraceSource,\n  engine: EngineBase,\n): Promise<TraceImpl> {\n  let traceStream: TraceStream | undefined;\n  let serializedAppState: SerializedAppState | undefined;\n  if (traceSource.type === 'FILE') {\n    traceStream = new TraceFileStream(traceSource.file);\n  } else if (traceSource.type === 'ARRAY_BUFFER') {\n    traceStream = new TraceBufferStream(traceSource.buffer);\n  } else if (traceSource.type === 'URL') {\n    traceStream = new TraceHttpStream(traceSource.url);\n    serializedAppState = traceSource.serializedAppState;\n  } else if (traceSource.type === 'HTTP_RPC') {\n    traceStream = undefined;\n  } else {\n    throw new Error(`Unknown source: ${JSON.stringify(traceSource)}`);\n  }\n\n  // |traceStream| can be undefined in the case when we are using the external\n  // HTTP+RPC endpoint and the trace processor instance has already loaded\n  // a trace (because it was passed as a cmdline argument to\n  // trace_processor_shell). In this case we don't want the UI to load any\n  // file/stream and we just want to jump to the loading phase.\n  if (traceStream !== undefined) {\n    const tStart = performance.now();\n    for (;;) {\n      const res = await traceStream.readChunk();\n      await engine.parse(res.data);\n      const elapsed = (performance.now() - tStart) / 1000;\n      let status = 'Loading trace ';\n      if (res.bytesTotal > 0) {\n        const progress = Math.round((res.bytesRead / res.bytesTotal) * 100);\n        status += `${progress}%`;\n      } else {\n        status += `${Math.round(res.bytesRead / 1e6)} MB`;\n      }\n      status += ` - ${Math.ceil(res.bytesRead / elapsed / 1e6)} MB/s`;\n      updateStatus(app, status);\n      if (res.eof) break;\n    }\n    await engine.notifyEof();\n  } else {\n    assertTrue(engine instanceof HttpRpcEngine);\n    await engine.restoreInitialTables();\n  }\n  for (const p of app.extraSqlPackages) {\n    await engine.registerSqlPackages(p);\n  }\n\n  const traceDetails = await getTraceInfo(engine, traceSource);\n  const trace = TraceImpl.createInstanceForCore(app, engine, traceDetails);\n  app.setActiveTrace(trace);\n\n  const visibleTimeSpan = await computeVisibleTime(\n    traceDetails.start,\n    traceDetails.end,\n    trace.traceInfo.traceType === 'json',\n    engine,\n  );\n\n  trace.timeline.updateVisibleTime(visibleTimeSpan);\n\n  const cacheUuid = traceDetails.cached ? traceDetails.uuid : '';\n  Router.navigate(`#!/viewer?local_cache_key=${cacheUuid}`);\n\n  // Make sure the helper views are available before we start adding tracks.\n  await includeSummaryTables(trace);\n\n  await defineMaxLayoutDepthSqlFunction(engine);\n\n  if (serializedAppState !== undefined) {\n    deserializeAppStatePhase1(serializedAppState, trace);\n  }\n\n  await app.plugins.onTraceLoad(trace, (id) => {\n    updateStatus(app, `Running plugin: ${id}`);\n  });\n\n  decideTabs(trace);\n\n  // Trace Processor doesn't support the reliable range feature for JSON\n  // traces.\n  if (\n    trace.traceInfo.traceType !== 'json' &&\n    ENABLE_CHROME_RELIABLE_RANGE_ANNOTATION_FLAG.get()\n  ) {\n    const reliableRangeStart = await computeTraceReliableRangeStart(engine);\n    if (reliableRangeStart > 0) {\n      trace.notes.addNote({\n        timestamp: reliableRangeStart,\n        color: '#ff0000',\n        text: 'Reliable Range Start',\n      });\n    }\n  }\n\n  // notify() will await that all listeners' promises have resolved.\n  await trace.onTraceReady.notify();\n\n  if (serializedAppState !== undefined) {\n    // Wait that plugins have completed their actions and then proceed with\n    // the final phase of app state restore.\n    // TODO(primiano): this can probably be removed once we refactor tracks\n    // to be URI based and can deal with non-existing URIs.\n    deserializeAppStatePhase2(serializedAppState, trace);\n  }\n\n  return trace;\n}\n\nfunction decideTabs(trace: TraceImpl) {\n  // Show the list of default tabs, but don't make them active!\n  for (const tabUri of trace.tabs.defaultTabs) {\n    trace.tabs.showTab(tabUri);\n  }\n}\n\nasync function includeSummaryTables(trace: TraceImpl) {\n  const engine = trace.engine;\n  updateStatus(trace, 'Creating slice summaries');\n  await engine.query(`include perfetto module viz.summary.slices;`);\n\n  updateStatus(trace, 'Creating counter summaries');\n  await engine.query(`include perfetto module viz.summary.counters;`);\n\n  updateStatus(trace, 'Creating thread summaries');\n  await engine.query(`include perfetto module viz.summary.threads;`);\n\n  updateStatus(trace, 'Creating processes summaries');\n  await engine.query(`include perfetto module viz.summary.processes;`);\n\n  updateStatus(trace, 'Creating track summaries');\n  await engine.query(`include perfetto module viz.summary.tracks;`);\n}\n\nfunction updateStatus(traceOrApp: TraceImpl | AppImpl, msg: string): void {\n  const showUntilDismissed = 0;\n  traceOrApp.omnibox.showStatusMessage(msg, showUntilDismissed);\n}\n\nasync function computeFtraceBounds(engine: Engine): Promise<TimeSpan | null> {\n  const result = await engine.query(`\n    SELECT min(ts) as start, max(ts) as end FROM ftrace_event;\n  `);\n  const {start, end} = result.firstRow({start: LONG_NULL, end: LONG_NULL});\n  if (start !== null && end !== null) {\n    return new TimeSpan(Time.fromRaw(start), Time.fromRaw(end));\n  }\n  return null;\n}\n\nasync function computeTraceReliableRangeStart(engine: Engine): Promise<time> {\n  const result =\n    await engine.query(`SELECT RUN_METRIC('chrome/chrome_reliable_range.sql');\n       SELECT start FROM chrome_reliable_range`);\n  const bounds = result.firstRow({start: LONG});\n  return Time.fromRaw(bounds.start);\n}\n\nasync function computeVisibleTime(\n  traceStart: time,\n  traceEnd: time,\n  isJsonTrace: boolean,\n  engine: Engine,\n): Promise<TimeSpan> {\n  // initialise visible time to the trace time bounds\n  let visibleStart = traceStart;\n  let visibleEnd = traceEnd;\n\n  // compare start and end with metadata computed by the trace processor\n  const mdTime = await getTracingMetadataTimeBounds(engine);\n  // make sure the bounds hold\n  if (Time.max(visibleStart, mdTime.start) < Time.min(visibleEnd, mdTime.end)) {\n    visibleStart = Time.max(visibleStart, mdTime.start);\n    visibleEnd = Time.min(visibleEnd, mdTime.end);\n  }\n\n  // Trace Processor doesn't support the reliable range feature for JSON\n  // traces.\n  if (!isJsonTrace && ENABLE_CHROME_RELIABLE_RANGE_ZOOM_FLAG.get()) {\n    const reliableRangeStart = await computeTraceReliableRangeStart(engine);\n    visibleStart = Time.max(visibleStart, reliableRangeStart);\n  }\n\n  // Move start of visible window to the first ftrace event\n  const ftraceBounds = await computeFtraceBounds(engine);\n  if (ftraceBounds !== null) {\n    // Avoid moving start of visible window past its end!\n    visibleStart = Time.min(ftraceBounds.start, visibleEnd);\n  }\n  return new TimeSpan(visibleStart, visibleEnd);\n}\n\nasync function getTraceInfo(\n  engine: Engine,\n  traceSource: TraceSource,\n): Promise<TraceInfoImpl> {\n  const traceTime = await getTraceTimeBounds(engine);\n\n  // Find the first REALTIME or REALTIME_COARSE clock snapshot.\n  // Prioritize REALTIME over REALTIME_COARSE.\n  const query = `select\n          ts,\n          clock_value as clockValue,\n          clock_name as clockName\n        from clock_snapshot\n        where\n          snapshot_id = 0 AND\n          clock_name in ('REALTIME', 'REALTIME_COARSE')\n        `;\n  const result = await engine.query(query);\n  const it = result.iter({\n    ts: LONG,\n    clockValue: LONG,\n    clockName: STR,\n  });\n\n  let snapshot = {\n    clockName: '',\n    ts: Time.ZERO,\n    clockValue: Time.ZERO,\n  };\n\n  // Find the most suitable snapshot\n  for (let row = 0; it.valid(); it.next(), row++) {\n    if (it.clockName === 'REALTIME') {\n      snapshot = {\n        clockName: it.clockName,\n        ts: Time.fromRaw(it.ts),\n        clockValue: Time.fromRaw(it.clockValue),\n      };\n      break;\n    } else if (it.clockName === 'REALTIME_COARSE') {\n      if (snapshot.clockName !== 'REALTIME') {\n        snapshot = {\n          clockName: it.clockName,\n          ts: Time.fromRaw(it.ts),\n          clockValue: Time.fromRaw(it.clockValue),\n        };\n      }\n    }\n  }\n\n  // The max() is so the query returns NULL if the tz info doesn't exist.\n  const queryTz = `select max(int_value) as tzOffMin from metadata\n        where name = 'timezone_off_mins'`;\n  const resTz = await assertExists(engine).query(queryTz);\n  const tzOffMin = resTz.firstRow({tzOffMin: NUM_NULL}).tzOffMin ?? 0;\n\n  // This is the offset between the unix epoch and ts in the ts domain.\n  // I.e. the value of ts at the time of the unix epoch - usually some large\n  // negative value.\n  const realtimeOffset = Time.sub(snapshot.ts, snapshot.clockValue);\n\n  // Find the previous closest midnight from the trace start time.\n  const utcOffset = Time.getLatestMidnight(traceTime.start, realtimeOffset);\n\n  const traceTzOffset = Time.getLatestMidnight(\n    traceTime.start,\n    Time.sub(realtimeOffset, Time.fromSeconds(tzOffMin * 60)),\n  );\n\n  let traceTitle = '';\n  let traceUrl = '';\n  switch (traceSource.type) {\n    case 'FILE':\n      // Split on both \\ and / (because C:\\Windows\\paths\\are\\like\\this).\n      traceTitle = traceSource.file.name.split(/[/\\\\]/).pop()!;\n      const fileSizeMB = Math.ceil(traceSource.file.size / 1e6);\n      traceTitle += ` (${fileSizeMB} MB)`;\n      break;\n    case 'URL':\n      traceUrl = traceSource.url;\n      traceTitle = traceUrl.split('/').pop()!;\n      break;\n    case 'ARRAY_BUFFER':\n      traceTitle = traceSource.title;\n      traceUrl = traceSource.url ?? '';\n      const arrayBufferSizeMB = Math.ceil(traceSource.buffer.byteLength / 1e6);\n      traceTitle += ` (${arrayBufferSizeMB} MB)`;\n      break;\n    case 'HTTP_RPC':\n      traceTitle = `RPC @ ${HttpRpcEngine.hostAndPort}`;\n      break;\n    default:\n      break;\n  }\n\n  const traceType = await getTraceType(engine);\n\n  const hasFtrace =\n    (await engine.query(`select * from ftrace_event limit 1`)).numRows() > 0;\n\n  const uuidRes = await engine.query(`select str_value as uuid from metadata\n    where name = 'trace_uuid'`);\n  // trace_uuid can be missing from the TP tables if the trace is empty or in\n  // other similar edge cases.\n  const uuid = uuidRes.numRows() > 0 ? uuidRes.firstRow({uuid: STR}).uuid : '';\n  const cached = await cacheTrace(traceSource, uuid);\n\n  const downloadable =\n    (traceSource.type === 'ARRAY_BUFFER' && !traceSource.localOnly) ||\n    traceSource.type === 'FILE' ||\n    traceSource.type === 'URL';\n\n  return {\n    ...traceTime,\n    traceTitle,\n    traceUrl,\n    realtimeOffset,\n    utcOffset,\n    traceTzOffset,\n    cpus: await getCpus(engine),\n    importErrors: await getTraceErrors(engine),\n    source: traceSource,\n    traceType,\n    hasFtrace,\n    uuid,\n    cached,\n    downloadable,\n  };\n}\n\nasync function getTraceType(engine: Engine) {\n  const result = await engine.query(\n    `select str_value from metadata where name = 'trace_type'`,\n  );\n\n  if (result.numRows() === 0) return undefined;\n  return result.firstRow({str_value: STR}).str_value;\n}\n\nasync function getTraceTimeBounds(engine: Engine): Promise<TimeSpan> {\n  const result = await engine.query(\n    `select start_ts as startTs, end_ts as endTs from trace_bounds`,\n  );\n  const bounds = result.firstRow({\n    startTs: LONG,\n    endTs: LONG,\n  });\n  return new TimeSpan(Time.fromRaw(bounds.startTs), Time.fromRaw(bounds.endTs));\n}\n\n// TODO(hjd): When streaming must invalidate this somehow.\nasync function getCpus(engine: Engine): Promise<number[]> {\n  const cpus = [];\n  const queryRes = await engine.query(\n    'select distinct(cpu) as cpu from sched order by cpu;',\n  );\n  for (const it = queryRes.iter({cpu: NUM}); it.valid(); it.next()) {\n    cpus.push(it.cpu);\n  }\n  return cpus;\n}\n\nasync function getTraceErrors(engine: Engine): Promise<number> {\n  const sql = `SELECT sum(value) as errs FROM stats WHERE severity != 'info'`;\n  const result = await engine.query(sql);\n  return result.firstRow({errs: NUM}).errs;\n}\n\nasync function getTracingMetadataTimeBounds(engine: Engine): Promise<TimeSpan> {\n  const queryRes = await engine.query(`select\n       name,\n       int_value as intValue\n       from metadata\n       where name = 'tracing_started_ns' or name = 'tracing_disabled_ns'\n       or name = 'all_data_source_started_ns'`);\n  let startBound = Time.MIN;\n  let endBound = Time.MAX;\n  const it = queryRes.iter({name: STR, intValue: LONG_NULL});\n  for (; it.valid(); it.next()) {\n    const columnName = it.name;\n    const timestamp = it.intValue;\n    if (timestamp === null) continue;\n    if (columnName === 'tracing_disabled_ns') {\n      endBound = Time.min(endBound, Time.fromRaw(timestamp));\n    } else {\n      startBound = Time.max(startBound, Time.fromRaw(timestamp));\n    }\n  }\n\n  return new TimeSpan(startBound, endBound);\n}\n"]}
{"version":3,"file":"plugin_manager.js","sourceRoot":"","sources":["../../../src/core/plugin_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertExists} from '../base/logging';\nimport {Registry} from '../base/registry';\nimport {App} from '../public/app';\nimport {\n  MetricVisualisation,\n  PerfettoPlugin,\n  PerfettoPluginStatic,\n} from '../public/plugin';\nimport {Trace} from '../public/trace';\nimport {defaultPlugins} from './default_plugins';\nimport {featureFlags} from './feature_flags';\nimport {Flag} from '../public/feature_flag';\nimport {TraceImpl} from './trace_impl';\n\n// The pseudo plugin id used for the core instance of AppImpl.\nexport const CORE_PLUGIN_ID = '__core__';\n\nfunction makePlugin(\n  desc: PerfettoPluginStatic<PerfettoPlugin>,\n  trace: Trace,\n): PerfettoPlugin {\n  const PluginClass = desc;\n  return new PluginClass(trace);\n}\n\n// This interface injects AppImpl's methods into PluginManager to avoid\n// circular dependencies between PluginManager and AppImpl.\nexport interface PluginAppInterface {\n  forkForPlugin(pluginId: string): App;\n  get trace(): TraceImpl | undefined;\n}\n\n// Contains information about a plugin.\nexport interface PluginWrapper {\n  // A reference to the plugin descriptor\n  readonly desc: PerfettoPluginStatic<PerfettoPlugin>;\n\n  // The feature flag used to allow users to change whether this plugin should\n  // be enabled or not.\n  readonly enableFlag: Flag;\n\n  // Keeps track of whether the plugin has been activated or not.\n  active?: boolean;\n\n  // If a trace has been loaded, this object stores the relevant trace-scoped\n  // plugin data\n  traceContext?: {\n    // The concrete plugin instance, created on trace load.\n    readonly instance: PerfettoPlugin;\n\n    // How long it took for the plugin's onTraceLoad() function to run.\n    readonly loadTimeMs: number;\n  };\n}\n\nexport class PluginManagerImpl {\n  private readonly registry = new Registry<PluginWrapper>((x) => x.desc.id);\n  private orderedPlugins: Array<PluginWrapper> = [];\n\n  constructor(private readonly app: PluginAppInterface) {}\n\n  registerPlugin(desc: PerfettoPluginStatic<PerfettoPlugin>) {\n    const flagId = `plugin_${desc.id}`;\n    const name = `Plugin: ${desc.id}`;\n    const flag = featureFlags.register({\n      id: flagId,\n      name,\n      description: `Overrides '${desc.id}' plugin.`,\n      defaultValue: defaultPlugins.includes(desc.id),\n    });\n    this.registry.register({\n      desc,\n      enableFlag: flag,\n    });\n  }\n\n  /**\n   * Activates all registered plugins that have not already been registered.\n   *\n   * @param enableOverrides - The list of plugins that are enabled regardless of\n   * the current flag setting.\n   */\n  activatePlugins(enableOverrides: ReadonlyArray<string> = []) {\n    const enabledPlugins = this.registry\n      .valuesAsArray()\n      .filter((p) => p.enableFlag.get() || enableOverrides.includes(p.desc.id));\n\n    this.orderedPlugins = this.sortPluginsTopologically(enabledPlugins);\n\n    this.orderedPlugins.forEach((p) => {\n      if (p.active) return;\n      const app = this.app.forkForPlugin(p.desc.id);\n      p.desc.onActivate?.(app);\n      p.active = true;\n    });\n  }\n\n  async onTraceLoad(\n    traceCore: TraceImpl,\n    beforeEach?: (id: string) => void,\n  ): Promise<void> {\n    // Awaiting all plugins in parallel will skew timing data as later plugins\n    // will spend most of their time waiting for earlier plugins to load.\n    // Running in parallel will have very little performance benefit assuming\n    // most plugins use the same engine, which can only process one query at a\n    // time.\n    for (const p of this.orderedPlugins) {\n      if (p.active) {\n        beforeEach?.(p.desc.id);\n        const trace = traceCore.forkForPlugin(p.desc.id);\n        const before = performance.now();\n        const instance = makePlugin(p.desc, trace);\n        await instance.onTraceLoad?.(trace);\n        const loadTimeMs = performance.now() - before;\n        p.traceContext = {\n          instance,\n          loadTimeMs,\n        };\n        traceCore.trash.defer(() => {\n          p.traceContext = undefined;\n        });\n      }\n    }\n  }\n\n  metricVisualisations(): MetricVisualisation[] {\n    return this.registry.valuesAsArray().flatMap((plugin) => {\n      if (!plugin.active) return [];\n      return plugin.desc.metricVisualisations?.() ?? [];\n    });\n  }\n\n  getAllPlugins() {\n    return this.registry.valuesAsArray();\n  }\n\n  getPluginContainer(id: string): PluginWrapper | undefined {\n    return this.registry.tryGet(id);\n  }\n\n  getPlugin<T extends PerfettoPlugin>(\n    pluginDescriptor: PerfettoPluginStatic<T>,\n  ): T {\n    const plugin = this.registry.get(pluginDescriptor.id);\n    return assertExists(plugin.traceContext).instance as T;\n  }\n\n  /**\n   * Sort plugins in dependency order, ensuring that if a plugin depends on\n   * other plugins, those plugins will appear fist in the list.\n   */\n  private sortPluginsTopologically(\n    plugins: ReadonlyArray<PluginWrapper>,\n  ): Array<PluginWrapper> {\n    const orderedPlugins = new Array<PluginWrapper>();\n    const visiting = new Set<string>();\n\n    const visit = (p: PluginWrapper) => {\n      // Continue if we've already added this plugin, there's no need to add it\n      // again\n      if (orderedPlugins.includes(p)) {\n        return;\n      }\n\n      // Detect circular dependencies\n      if (visiting.has(p.desc.id)) {\n        const cycle = Array.from(visiting).concat(p.desc.id);\n        throw new Error(\n          `Cyclic plugin dependency detected: ${cycle.join(' -> ')}`,\n        );\n      }\n\n      // Temporarily push this plugin onto the visiting stack while visiting\n      // dependencies, to allow circular dependencies to be detected\n      visiting.add(p.desc.id);\n\n      // Recursively visit dependencies\n      p.desc.dependencies?.forEach((d) => {\n        visit(this.registry.get(d.id));\n      });\n\n      visiting.delete(p.desc.id);\n\n      // Finally add this plugin to the ordered list\n      orderedPlugins.push(p);\n    };\n\n    plugins.forEach((p) => visit(p));\n\n    return orderedPlugins;\n  }\n}\n"]}
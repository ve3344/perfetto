{"version":3,"file":"channels.js","sourceRoot":"","sources":["../../../src/core/channels.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAYjC,8CAKC;AAGD,wCAKC;AAED,wCAEC;AAED,gCAKC;AAlCD,mDAAoC;AAEvB,QAAA,eAAe,GAAG,QAAQ,CAAC;AACxC,MAAM,WAAW,GAAG,mBAAmB,CAAC;AAExC,IAAI,cAAc,GAAuB,SAAS,CAAC;AACnD,IAAI,WAAW,GAAuB,SAAS,CAAC;AAEhD,8EAA8E;AAC9E,sBAAsB;AACtB,SAAgB,iBAAiB;IAC/B,IAAI,cAAc,KAAK,SAAS,EAAE,CAAC;QACjC,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,uBAAe,CAAC;IACxE,CAAC;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,sDAAsD;AACtD,SAAgB,cAAc;IAC5B,IAAI,WAAW,KAAK,SAAS,EAAE,CAAC;QAC9B,OAAO,WAAW,CAAC;IACrB,CAAC;IACD,OAAO,iBAAiB,EAAE,CAAC;AAC7B,CAAC;AAED,SAAgB,cAAc;IAC5B,OAAO,iBAAiB,EAAE,KAAK,cAAc,EAAE,CAAC;AAClD,CAAC;AAED,SAAgB,UAAU,CAAC,OAAe;IACxC,iBAAiB,EAAE,CAAC,CAAC,sDAAsD;IAC3E,WAAW,GAAG,OAAO,CAAC;IACtB,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC3C,mBAAG,CAAC,kBAAkB,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {raf} from './raf_scheduler';\n\nexport const DEFAULT_CHANNEL = 'stable';\nconst CHANNEL_KEY = 'perfettoUiChannel';\n\nlet currentChannel: string | undefined = undefined;\nlet nextChannel: string | undefined = undefined;\n\n// This is the channel the UI is currently running. It doesn't change once the\n// UI has been loaded.\nexport function getCurrentChannel(): string {\n  if (currentChannel === undefined) {\n    currentChannel = localStorage.getItem(CHANNEL_KEY) ?? DEFAULT_CHANNEL;\n  }\n  return currentChannel;\n}\n\n// This is the channel that will be applied on reload.\nexport function getNextChannel(): string {\n  if (nextChannel !== undefined) {\n    return nextChannel;\n  }\n  return getCurrentChannel();\n}\n\nexport function channelChanged(): boolean {\n  return getCurrentChannel() !== getNextChannel();\n}\n\nexport function setChannel(channel: string): void {\n  getCurrentChannel(); // Cache the current channel before mangling next one.\n  nextChannel = channel;\n  localStorage.setItem(CHANNEL_KEY, channel);\n  raf.scheduleFullRedraw();\n}\n"]}
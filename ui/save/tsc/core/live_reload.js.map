{"version":3,"file":"live_reload.js","sourceRoot":"","sources":["../../../src/core/live_reload.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAQjC,wCAkBC;AAxBD,yDAAmD;AAEnD,IAAI,oBAAoB,GAAG,CAAC,CAAC;AAC7B,MAAM,wBAAwB,GAAG,KAAK,CAAC;AACvC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAU,CAAC;AAEvC,SAAgB,cAAc;IAC5B,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,cAAc,CAAC,CAAC;IAChD,OAAO,CAAC,SAAS,GAAG,CAAC,GAAG,EAAE,EAAE;QAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;QACpC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACzB,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5B,SAAS,EAAE,CAAC;QACd,CAAC;aAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9D,aAAa,EAAE,CAAC;QAClB,CAAC;IACH,CAAC,CAAC;IACF,OAAO,CAAC,OAAO,GAAG,CAAC,GAAG,EAAE,EAAE;QACxB,2EAA2E;QAC3E,4EAA4E;QAC5E,8BAA8B;QAC9B,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,SAAS;IAChB,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;IAC3D,IAAI,CAAC,GAAG;QAAE,OAAO;IACjB,MAAM,MAAM,GAAG,GAAG,CAAC,aAAc,CAAC;IAClC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACxB,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,eAAe,GAAG,4BAAY,CAAC,QAAQ,CAAC;IAC5C,EAAE,EAAE,aAAa;IACjB,IAAI,EAAE,gCAAgC;IACtC,YAAY,EAAE,KAAK;IACnB,WAAW,EACT,2DAA2D;QAC3D,gEAAgE;QAChE,sBAAsB;IACxB,OAAO,EAAE,IAAI;CACd,CAAC,CAAC;AAEH,SAAS,aAAa;IACpB,UAAU,CACR,GAAG,EAAE;QACH,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;YAChC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC;QAC1B,CAAC;QACD,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,oBAAoB,GAAG,wBAAwB;YAAE,OAAO;QACzE,MAAM,MAAM,GACV,eAAe,CAAC,GAAG,EAAE,IAAI,OAAO,CAAC,GAAG,QAAQ,0BAA0B,CAAC,CAAC;QAC1E,oBAAoB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAClC,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC,EACD,eAAe,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CACjC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {featureFlags} from '../core/feature_flags';\n\nlet lastReloadDialogTime = 0;\nconst kMinTimeBetweenDialogsMs = 10000;\nconst changedPaths = new Set<string>();\n\nexport function initLiveReload() {\n  const monitor = new EventSource('/live_reload');\n  monitor.onmessage = (msg) => {\n    const change = String(msg.data);\n    console.log('Live reload:', change);\n    changedPaths.add(change);\n    if (change.endsWith('.css')) {\n      reloadCSS();\n    } else if (change.endsWith('.html') || change.endsWith('.js')) {\n      reloadDelayed();\n    }\n  };\n  monitor.onerror = (err) => {\n    // In most cases the error is fired on reload, when the socket disconnects.\n    // Delay the error and the reconnection, so in the case of a reload we don't\n    // see any midleading message.\n    setTimeout(() => console.error('LiveReload SSE error', err), 1000);\n  };\n}\n\nfunction reloadCSS() {\n  const css = document.querySelector('link[rel=stylesheet]');\n  if (!css) return;\n  const parent = css.parentElement!;\n  parent.removeChild(css);\n  parent.appendChild(css);\n}\n\nconst rapidReloadFlag = featureFlags.register({\n  id: 'rapidReload',\n  name: 'Development: rapid live reload',\n  defaultValue: false,\n  description:\n    'During development, instantly reload the page on change. ' +\n    'Enables lower latency of live reload at the cost of potential ' +\n    'multiple re-reloads.',\n  devOnly: true,\n});\n\nfunction reloadDelayed() {\n  setTimeout(\n    () => {\n      let pathsStr = '';\n      for (const path of changedPaths) {\n        pathsStr += path + '\\n';\n      }\n      changedPaths.clear();\n      if (Date.now() - lastReloadDialogTime < kMinTimeBetweenDialogsMs) return;\n      const reload =\n        rapidReloadFlag.get() || confirm(`${pathsStr}changed, click to reload`);\n      lastReloadDialogTime = Date.now();\n      if (reload) {\n        window.location.reload();\n      }\n    },\n    rapidReloadFlag.get() ? 0 : 1000,\n  );\n}\n"]}
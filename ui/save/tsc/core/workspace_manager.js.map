{"version":3,"file":"workspace_manager.js","sourceRoot":"","sources":["../../../src/core/workspace_manager.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,6CAA2C;AAC3C,mDAAgE;AAChE,mDAAoC;AAEpC,MAAM,sBAAsB,GAAG,mBAAmB,CAAC;AAEnD,MAAa,oBAAoB;IACvB,WAAW,GAAgB,EAAE,CAAC;IAC9B,iBAAiB,CAAY;IAErC;QACE,6DAA6D;QAC7D,oEAAoE;QACpE,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;IAC7E,CAAC;IAED,oBAAoB,CAAC,KAAa;QAChC,MAAM,SAAS,GAAG,IAAI,qBAAS,EAAE,CAAC;QAClC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QACxB,SAAS,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,mBAAG,CAAC,kBAAkB,EAAE,CAAC;QACpD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,eAAe,CAAC,SAAoB;QAClC,wEAAwE;QACxE,IAAA,oBAAU,EAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;QACjD,IAAI,CAAC,iBAAiB,GAAG,SAAS,CAAC;IACrC,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;CACF;AA/BD,oDA+BC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertTrue} from '../base/logging';\nimport {Workspace, WorkspaceManager} from '../public/workspace';\nimport {raf} from './raf_scheduler';\n\nconst DEFAULT_WORKSPACE_NAME = 'Default Workspace';\n\nexport class WorkspaceManagerImpl implements WorkspaceManager {\n  private _workspaces: Workspace[] = [];\n  private _currentWorkspace: Workspace;\n\n  constructor() {\n    // TS compiler cannot see that we are indirectly initializing\n    // _currentWorkspace via resetWorkspaces(), hence the re-assignment.\n    this._currentWorkspace = this.createEmptyWorkspace(DEFAULT_WORKSPACE_NAME);\n  }\n\n  createEmptyWorkspace(title: string): Workspace {\n    const workspace = new Workspace();\n    workspace.title = title;\n    workspace.onchange = () => raf.scheduleFullRedraw();\n    this._workspaces.push(workspace);\n    return workspace;\n  }\n\n  switchWorkspace(workspace: Workspace): void {\n    // If this fails the workspace doesn't come from createEmptyWorkspace().\n    assertTrue(this._workspaces.includes(workspace));\n    this._currentWorkspace = workspace;\n  }\n\n  get all(): ReadonlyArray<Workspace> {\n    return this._workspaces;\n  }\n\n  get currentWorkspace() {\n    return this._currentWorkspace;\n  }\n}\n"]}
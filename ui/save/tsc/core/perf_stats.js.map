{"version":3,"file":"perf_stats.js","sourceRoot":"","sources":["../../../src/core/perf_stats.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AA2DjC,wCAMC;AAtDD,gFAAgF;AAChF,WAAW;AACX,MAAa,SAAS;IAQA;IAPZ,MAAM,GAAG,CAAC,CAAC;IACX,KAAK,GAAG,CAAC,CAAC;IACV,UAAU,GAAG,CAAC,CAAC;IACf,IAAI,GAAG,CAAC,CAAC;IAET,MAAM,GAAa,EAAE,CAAC;IAE9B,YAAoB,iBAAiB,EAAE;QAAnB,mBAAc,GAAd,cAAc,CAAK;IAAG,CAAC;IAE3C,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,KAAK,CAAC;YACjC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBACpC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAClC,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,EAAE,CAAC;IAChB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IACzE,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;IAC5B,CAAC;IACD,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IACD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AA3CD,8BA2CC;AAED,yEAAyE;AACzE,SAAgB,cAAc,CAAC,IAAe;IAC5C,OAAO,CACL,SAAS,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO;QACpC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO;QACnC,MAAM,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAC5D,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\n\n// The interface that every container (e.g. Track Panels) that exposes granular\n// per-container masurements implements to be perf-stats-aware.\nexport interface PerfStatsContainer {\n  setPerfStatsEnabled(enable: boolean): void;\n  renderPerfStats(): m.Children;\n}\n\n// Stores statistics about samples, and keeps a fixed size buffer of most recent\n// samples.\nexport class PerfStats {\n  private _count = 0;\n  private _mean = 0;\n  private _lastValue = 0;\n  private _ptr = 0;\n\n  private buffer: number[] = [];\n\n  constructor(private _maxBufferSize = 10) {}\n\n  addValue(value: number) {\n    this._lastValue = value;\n    if (this.buffer.length >= this._maxBufferSize) {\n      this.buffer[this._ptr++] = value;\n      if (this._ptr >= this.buffer.length) {\n        this._ptr -= this.buffer.length;\n      }\n    } else {\n      this.buffer.push(value);\n    }\n\n    this._mean = (this._mean * this._count + value) / (this._count + 1);\n    this._count++;\n  }\n\n  get mean() {\n    return this._mean;\n  }\n  get count() {\n    return this._count;\n  }\n  get bufferMean() {\n    return this.buffer.reduce((sum, v) => sum + v, 0) / this.buffer.length;\n  }\n  get bufferSize() {\n    return this.buffer.length;\n  }\n  get maxBufferSize() {\n    return this._maxBufferSize;\n  }\n  get last() {\n    return this._lastValue;\n  }\n}\n\n// Returns a summary string representation of a RunningStatistics object.\nexport function runningStatStr(stat: PerfStats) {\n  return (\n    `Last: ${stat.last.toFixed(2)}ms | ` +\n    `Avg: ${stat.mean.toFixed(2)}ms | ` +\n    `Avg${stat.maxBufferSize}: ${stat.bufferMean.toFixed(2)}ms`\n  );\n}\n"]}
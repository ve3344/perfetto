{"version":3,"file":"omnibox_manager.js","sourceRoot":"","sources":["../../../src/core/omnibox_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OmniboxManager, PromptChoices} from '../public/omnibox';\nimport {raf} from './raf_scheduler';\n\nexport enum OmniboxMode {\n  Search,\n  Query,\n  Command,\n  Prompt,\n}\n\ninterface Prompt {\n  text: string;\n  options?: ReadonlyArray<{key: string; displayName: string}>;\n  resolve(result: unknown): void;\n}\n\nconst defaultMode = OmniboxMode.Search;\n\nexport class OmniboxManagerImpl implements OmniboxManager {\n  private _mode = defaultMode;\n  private _focusOmniboxNextRender = false;\n  private _pendingCursorPlacement?: number;\n  private _pendingPrompt?: Prompt;\n  private _omniboxSelectionIndex = 0;\n  private _forceShortTextSearch = false;\n  private _textForMode = new Map<OmniboxMode, string>();\n  private _statusMessageContainer: {msg?: string} = {};\n\n  get mode(): OmniboxMode {\n    return this._mode;\n  }\n\n  get pendingPrompt(): Prompt | undefined {\n    return this._pendingPrompt;\n  }\n\n  get text(): string {\n    return this._textForMode.get(this._mode) ?? '';\n  }\n\n  get selectionIndex(): number {\n    return this._omniboxSelectionIndex;\n  }\n\n  get focusOmniboxNextRender(): boolean {\n    return this._focusOmniboxNextRender;\n  }\n\n  get pendingCursorPlacement(): number | undefined {\n    return this._pendingCursorPlacement;\n  }\n\n  get forceShortTextSearch() {\n    return this._forceShortTextSearch;\n  }\n\n  setText(value: string): void {\n    this._textForMode.set(this._mode, value);\n  }\n\n  setSelectionIndex(index: number): void {\n    this._omniboxSelectionIndex = index;\n  }\n\n  focus(cursorPlacement?: number): void {\n    this._focusOmniboxNextRender = true;\n    this._pendingCursorPlacement = cursorPlacement;\n    raf.scheduleFullRedraw();\n  }\n\n  clearFocusFlag(): void {\n    this._focusOmniboxNextRender = false;\n    this._pendingCursorPlacement = undefined;\n  }\n\n  setMode(mode: OmniboxMode, focus = true): void {\n    this._mode = mode;\n    this._focusOmniboxNextRender = focus;\n    this._omniboxSelectionIndex = 0;\n    this.rejectPendingPrompt();\n    raf.scheduleFullRedraw();\n  }\n\n  showStatusMessage(msg: string, durationMs = 2000) {\n    const statusMessageContainer: {msg?: string} = {msg};\n    if (durationMs > 0) {\n      setTimeout(() => {\n        statusMessageContainer.msg = undefined;\n        raf.scheduleFullRedraw();\n      }, durationMs);\n    }\n    this._statusMessageContainer = statusMessageContainer;\n    raf.scheduleFullRedraw();\n  }\n\n  get statusMessage(): string | undefined {\n    return this._statusMessageContainer.msg;\n  }\n\n  // Start a prompt. If options are supplied, the user must pick one from the\n  // list, otherwise the input is free-form text.\n  prompt(text: string): Promise<string | undefined>;\n  prompt(\n    text: string,\n    options?: ReadonlyArray<string>,\n  ): Promise<string | undefined>;\n  prompt<T>(text: string, options?: PromptChoices<T>): Promise<T | undefined>;\n  prompt<T>(\n    text: string,\n    choices?: ReadonlyArray<string> | PromptChoices<T>,\n  ): Promise<string | T | undefined> {\n    this._mode = OmniboxMode.Prompt;\n    this._omniboxSelectionIndex = 0;\n    this.rejectPendingPrompt();\n    this._focusOmniboxNextRender = true;\n    raf.scheduleFullRedraw();\n\n    if (choices && 'getName' in choices) {\n      return new Promise<T | undefined>((resolve) => {\n        const choiceMap = new Map(\n          choices.values.map((choice) => [choices.getName(choice), choice]),\n        );\n        this._pendingPrompt = {\n          text,\n          options: Array.from(choiceMap.keys()).map((key) => ({\n            key,\n            displayName: key,\n          })),\n          resolve: (key: string) => resolve(choiceMap.get(key)),\n        };\n      });\n    }\n\n    return new Promise<string | undefined>((resolve) => {\n      this._pendingPrompt = {\n        text,\n        options: choices?.map((value) => ({key: value, displayName: value})),\n        resolve,\n      };\n    });\n  }\n\n  // Resolve the pending prompt with a value to return to the prompter.\n  resolvePrompt(value: string): void {\n    if (this._pendingPrompt) {\n      this._pendingPrompt.resolve(value);\n      this._pendingPrompt = undefined;\n    }\n    this.setMode(OmniboxMode.Search);\n  }\n\n  // Reject the prompt outright. Doing this will force the owner of the prompt\n  // promise to catch, so only do this when things go seriously wrong.\n  // Use |resolvePrompt(null)| to indicate cancellation.\n  rejectPrompt(): void {\n    this.rejectPendingPrompt();\n    this.setMode(OmniboxMode.Search);\n  }\n\n  reset(focus = true): void {\n    this.setMode(defaultMode, focus);\n    this._omniboxSelectionIndex = 0;\n    this._statusMessageContainer = {};\n    raf.scheduleFullRedraw();\n  }\n\n  private rejectPendingPrompt() {\n    if (this._pendingPrompt) {\n      this._pendingPrompt.resolve(undefined);\n      this._pendingPrompt = undefined;\n    }\n  }\n}\n"]}
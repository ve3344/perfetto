{"version":3,"file":"note_manager.js","sourceRoot":"","sources":["../../../src/core/note_manager.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AASjC,uDAAoD;AACpD,mDAAoC;AAEpC,MAAa,eAAe;IAClB,WAAW,GAAG,CAAC,CAAC;IAChB,MAAM,GAAG,IAAI,GAAG,EAA2B,CAAC;IAEpD,uEAAuE;IACvE,+BAA+B;IAC/B,6DAA6D;IAC7D,4EAA4E;IAC5E,4EAA4E;IAC5E,wEAAwE;IACxE,oBAAoB;IACpB,sEAAsE;IACtE,sEAAsE;IACtE,6CAA6C;IAC7C,aAAa,CAA4B;IAEzC,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,OAAO,CAAC,EAAU;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,IAAiB;QACvB,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE;YAClB,GAAG,IAAI;YACP,QAAQ,EAAE,SAAS;YACnB,EAAE;YACF,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAA,uBAAW,GAAE;YAClC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;SACtB,CAAC,CAAC;QACH,mBAAG,CAAC,kBAAkB,EAAE,CAAC;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,WAAW,CAAC,IAAqB;QAC/B,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,IAAI,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE;YAClB,GAAG,IAAI;YACP,QAAQ,EAAE,MAAM;YAChB,EAAE;YACF,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAA,uBAAW,GAAE;YAClC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;SACtB,CAAC,CAAC;QACH,mBAAG,CAAC,kBAAkB,EAAE,CAAC;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,UAAU,CAAC,EAAU,EAAE,IAAqC;QAC1D,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACjC,IAAI,IAAI,KAAK,SAAS;YAAE,OAAO;QAE/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE;YAClB,GAAG,IAAI;YACP,KAAK,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK;YAC/B,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI;SAC7B,CAAC,CAAC;QACH,mBAAG,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,EAAU;QACnB,mBAAG,CAAC,kBAAkB,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACvB,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;CACF;AAnED,0CAmEC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  AddNoteArgs,\n  AddSpanNoteArgs,\n  Note,\n  NoteManager,\n  SpanNote,\n} from '../public/note';\nimport {randomColor} from '../components/colorizer';\nimport {raf} from './raf_scheduler';\n\nexport class NoteManagerImpl implements NoteManager {\n  private _lastNodeId = 0;\n  private _notes = new Map<string, Note | SpanNote>();\n\n  // This function is wired up to clear the SelectionManager state if the\n  // current selection is a note.\n  // TODO(primiano): figure out some better (de-)coupling here.\n  // We cannot pass SelectionManager in our constructor because doing so would\n  // create a cyclic ctor dependency (SelectionManager requires NoteManager in\n  // its ctor). There is a 2way logical dependency between NoteManager and\n  // SelectionManager:\n  // 1. SM needs NM to handle SM.findTimeRangeOfSelection(), for [M]ark.\n  // 2. NM needs SM to tell it that a note has been delete and should be\n  //   deselected if it was currently selected.\n  onNoteDeleted?: (nodeId: string) => void;\n\n  get notes(): ReadonlyMap<string, Note | SpanNote> {\n    return this._notes;\n  }\n\n  getNote(id: string): Note | SpanNote | undefined {\n    return this._notes.get(id);\n  }\n\n  addNote(args: AddNoteArgs): string {\n    const id = args.id ?? `note_${++this._lastNodeId}`;\n    this._notes.set(id, {\n      ...args,\n      noteType: 'DEFAULT',\n      id,\n      color: args.color ?? randomColor(),\n      text: args.text ?? '',\n    });\n    raf.scheduleFullRedraw();\n    return id;\n  }\n\n  addSpanNote(args: AddSpanNoteArgs): string {\n    const id = args.id ?? `note_${++this._lastNodeId}`;\n    this._notes.set(id, {\n      ...args,\n      noteType: 'SPAN',\n      id,\n      color: args.color ?? randomColor(),\n      text: args.text ?? '',\n    });\n    raf.scheduleFullRedraw();\n    return id;\n  }\n\n  changeNote(id: string, args: {color?: string; text?: string}) {\n    const note = this._notes.get(id);\n    if (note === undefined) return;\n\n    this._notes.set(id, {\n      ...note,\n      color: args.color ?? note.color,\n      text: args.text ?? note.text,\n    });\n    raf.scheduleFullRedraw();\n  }\n\n  removeNote(id: string) {\n    raf.scheduleFullRedraw();\n    this._notes.delete(id);\n    this.onNoteDeleted?.(id);\n  }\n}\n"]}
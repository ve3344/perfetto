{"version":3,"file":"timeline.js","sourceRoot":"","sources":["../../../src/core/timeline.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertTrue, assertUnreachable} from '../base/logging';\nimport {Time, time, TimeSpan} from '../base/time';\nimport {HighPrecisionTimeSpan} from '../base/high_precision_time_span';\nimport {Area} from '../public/selection';\nimport {raf} from './raf_scheduler';\nimport {HighPrecisionTime} from '../base/high_precision_time';\nimport {DurationPrecision, Timeline, TimestampFormat} from '../public/timeline';\nimport {\n  durationPrecision,\n  setDurationPrecision,\n  setTimestampFormat,\n  timestampFormat,\n} from './timestamp_format';\nimport {TraceInfo} from '../public/trace_info';\n\nconst MIN_DURATION = 10;\n\n/**\n * State that is shared between several frontend components, but not the\n * controller. This state is updated at 60fps.\n */\nexport class TimelineImpl implements Timeline {\n  private _visibleWindow: HighPrecisionTimeSpan;\n  private _hoverCursorTimestamp?: time;\n  private _highlightedSliceId?: number;\n  private _hoveredNoteTimestamp?: time;\n\n  // TODO(stevegolton): These are currently only referenced by the cpu slice\n  // tracks and the process summary tracks. We should just make this a local\n  // property of the cpu slice tracks and ignore them in the process tracks.\n  private _hoveredUtid?: number;\n  private _hoveredPid?: number;\n\n  get highlightedSliceId() {\n    return this._highlightedSliceId;\n  }\n\n  set highlightedSliceId(x) {\n    this._highlightedSliceId = x;\n    raf.scheduleCanvasRedraw();\n  }\n\n  get hoveredNoteTimestamp() {\n    return this._hoveredNoteTimestamp;\n  }\n\n  set hoveredNoteTimestamp(x) {\n    this._hoveredNoteTimestamp = x;\n    raf.scheduleCanvasRedraw();\n  }\n\n  get hoveredUtid() {\n    return this._hoveredUtid;\n  }\n\n  set hoveredUtid(x) {\n    this._hoveredUtid = x;\n    raf.scheduleCanvasRedraw();\n  }\n\n  get hoveredPid() {\n    return this._hoveredPid;\n  }\n\n  set hoveredPid(x) {\n    this._hoveredPid = x;\n    raf.scheduleCanvasRedraw();\n  }\n\n  // This is used to calculate the tracks within a Y range for area selection.\n  private _selectedArea?: Area;\n\n  constructor(private readonly traceInfo: TraceInfo) {\n    this._visibleWindow = HighPrecisionTimeSpan.fromTime(\n      traceInfo.start,\n      traceInfo.end,\n    );\n  }\n\n  // TODO: there is some redundancy in the fact that both |visibleWindowTime|\n  // and a |timeScale| have a notion of time range. That should live in one\n  // place only.\n\n  zoomVisibleWindow(ratio: number, centerPoint: number) {\n    this._visibleWindow = this._visibleWindow\n      .scale(ratio, centerPoint, MIN_DURATION)\n      .fitWithin(this.traceInfo.start, this.traceInfo.end);\n\n    raf.scheduleCanvasRedraw();\n  }\n\n  panVisibleWindow(delta: number) {\n    this._visibleWindow = this._visibleWindow\n      .translate(delta)\n      .fitWithin(this.traceInfo.start, this.traceInfo.end);\n\n    raf.scheduleCanvasRedraw();\n  }\n\n  // Given a timestamp, if |ts| is not currently in view move the view to\n  // center |ts|, keeping the same zoom level.\n  panToTimestamp(ts: time) {\n    if (this._visibleWindow.contains(ts)) return;\n    // TODO(hjd): This is an ugly jump, we should do a smooth pan instead.\n    const halfDuration = this.visibleWindow.duration / 2;\n    const newStart = new HighPrecisionTime(ts).subNumber(halfDuration);\n    const newWindow = new HighPrecisionTimeSpan(\n      newStart,\n      this._visibleWindow.duration,\n    );\n    this.updateVisibleTimeHP(newWindow);\n  }\n\n  // Set the highlight box to draw\n  selectArea(\n    start: time,\n    end: time,\n    tracks = this._selectedArea ? this._selectedArea.trackUris : [],\n  ) {\n    assertTrue(\n      end >= start,\n      `Impossible select area: start [${start}] >= end [${end}]`,\n    );\n    this._selectedArea = {start, end, trackUris: tracks};\n    raf.scheduleFullRedraw();\n  }\n\n  deselectArea() {\n    this._selectedArea = undefined;\n    raf.scheduleCanvasRedraw();\n  }\n\n  get selectedArea(): Area | undefined {\n    return this._selectedArea;\n  }\n\n  // Set visible window using an integer time span\n  updateVisibleTime(ts: TimeSpan) {\n    this.updateVisibleTimeHP(HighPrecisionTimeSpan.fromTime(ts.start, ts.end));\n  }\n\n  // TODO(primiano): we ended up with two entry-points for the same function,\n  // unify them.\n  setViewportTime(start: time, end: time): void {\n    this.updateVisibleTime(new TimeSpan(start, end));\n  }\n\n  // Set visible window using a high precision time span\n  updateVisibleTimeHP(ts: HighPrecisionTimeSpan) {\n    this._visibleWindow = ts\n      .clampDuration(MIN_DURATION)\n      .fitWithin(this.traceInfo.start, this.traceInfo.end);\n\n    raf.scheduleCanvasRedraw();\n  }\n\n  // Get the bounds of the visible window as a high-precision time span\n  get visibleWindow(): HighPrecisionTimeSpan {\n    return this._visibleWindow;\n  }\n\n  get hoverCursorTimestamp(): time | undefined {\n    return this._hoverCursorTimestamp;\n  }\n\n  set hoverCursorTimestamp(t: time | undefined) {\n    this._hoverCursorTimestamp = t;\n    raf.scheduleCanvasRedraw();\n  }\n\n  // Offset between t=0 and the configured time domain.\n  timestampOffset(): time {\n    const fmt = timestampFormat();\n    switch (fmt) {\n      case TimestampFormat.Timecode:\n      case TimestampFormat.Seconds:\n      case TimestampFormat.Milliseconds:\n      case TimestampFormat.Microseconds:\n        return this.traceInfo.start;\n      case TimestampFormat.TraceNs:\n      case TimestampFormat.TraceNsLocale:\n        return Time.ZERO;\n      case TimestampFormat.UTC:\n        return this.traceInfo.utcOffset;\n      case TimestampFormat.TraceTz:\n        return this.traceInfo.traceTzOffset;\n      default:\n        assertUnreachable(fmt);\n    }\n  }\n\n  // Convert absolute time to domain time.\n  toDomainTime(ts: time): time {\n    return Time.sub(ts, this.timestampOffset());\n  }\n\n  get timestampFormat() {\n    return timestampFormat();\n  }\n\n  set timestampFormat(format: TimestampFormat) {\n    setTimestampFormat(format);\n  }\n\n  get durationPrecision() {\n    return durationPrecision();\n  }\n\n  set durationPrecision(precision: DurationPrecision) {\n    setDurationPrecision(precision);\n  }\n}\n"]}
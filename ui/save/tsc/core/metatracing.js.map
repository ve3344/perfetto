{"version":3,"file":"metatracing.js","sourceRoot":"","sources":["../../../src/core/metatracing.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2022  The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {featureFlags} from './feature_flags';\nimport protos from '../protos';\nimport protobuf from 'protobufjs/minimal';\n\nconst METATRACING_BUFFER_SIZE = 100000;\n\nexport enum MetatraceTrackId {\n  // 1 is reserved for the Trace Processor track.\n  // Events emitted by the JS main thread.\n  kMainThread = 2,\n  // Async track for the status (e.g. \"loading tracks\") shown to the user\n  // in the omnibox.\n  kOmniboxStatus = 3,\n}\n\nconst AOMT_FLAG = featureFlags.register({\n  id: 'alwaysOnMetatracing',\n  name: 'Enable always-on-metatracing',\n  description: 'Enables trace events in the UI and trace processor',\n  defaultValue: false,\n});\n\nconst AOMT_DETAILED_FLAG = featureFlags.register({\n  id: 'alwaysOnMetatracing_detailed',\n  name: 'Detailed always-on-metatracing',\n  description: 'Enables recording additional events for trace event',\n  defaultValue: false,\n});\n\nfunction getInitialCategories(): protos.MetatraceCategories | undefined {\n  if (!AOMT_FLAG.get()) return undefined;\n  if (AOMT_DETAILED_FLAG.get()) return protos.MetatraceCategories.ALL;\n  return (\n    protos.MetatraceCategories.QUERY_TIMELINE |\n    protos.MetatraceCategories.API_TIMELINE\n  );\n}\n\nlet enabledCategories: protos.MetatraceCategories | undefined =\n  getInitialCategories();\n\nexport function enableMetatracing(categories?: protos.MetatraceCategories) {\n  enabledCategories =\n    categories === undefined || categories === protos.MetatraceCategories.NONE\n      ? protos.MetatraceCategories.ALL\n      : categories;\n}\n\nexport function disableMetatracingAndGetTrace(): Uint8Array {\n  enabledCategories = undefined;\n  return readMetatrace();\n}\n\nexport function isMetatracingEnabled(): boolean {\n  return enabledCategories !== undefined;\n}\n\nexport function getEnabledMetatracingCategories():\n  | protos.MetatraceCategories\n  | undefined {\n  return enabledCategories;\n}\n\ninterface TraceEvent {\n  eventName: string;\n  startNs: number;\n  durNs: number;\n  track: MetatraceTrackId;\n  args?: {[key: string]: string};\n}\n\nconst traceEvents: TraceEvent[] = [];\n\nfunction readMetatrace(): Uint8Array {\n  const eventToPacket = (e: TraceEvent): Uint8Array => {\n    const metatraceEvent = protos.PerfettoMetatrace.create({\n      eventName: e.eventName,\n      threadId: e.track,\n      eventDurationNs: e.durNs,\n    });\n    for (const [key, value] of Object.entries(e.args ?? {})) {\n      metatraceEvent.args.push(\n        protos.PerfettoMetatrace.Arg.create({\n          key,\n          value,\n        }),\n      );\n    }\n    const PROTO_VARINT_TYPE = 0;\n    const PROTO_LEN_DELIMITED_WIRE_TYPE = 2;\n    const TRACE_PACKET_PROTO_TAG = (1 << 3) | PROTO_LEN_DELIMITED_WIRE_TYPE;\n    const TRACE_PACKET_TIMESTAMP_TAG = (8 << 3) | PROTO_VARINT_TYPE;\n    const TRACE_PACKET_CLOCK_ID_TAG = (58 << 3) | PROTO_VARINT_TYPE;\n    const TRACE_PACKET_METATRACE_TAG =\n      (49 << 3) | PROTO_LEN_DELIMITED_WIRE_TYPE;\n\n    const wri = protobuf.Writer.create();\n    wri.uint32(TRACE_PACKET_PROTO_TAG);\n    wri.fork(); // Start of Trace Packet.\n    wri.uint32(TRACE_PACKET_TIMESTAMP_TAG).int64(e.startNs);\n    wri.uint32(TRACE_PACKET_CLOCK_ID_TAG).int32(1);\n    wri\n      .uint32(TRACE_PACKET_METATRACE_TAG)\n      .bytes(protos.PerfettoMetatrace.encode(metatraceEvent).finish());\n    wri.ldelim();\n    return wri.finish();\n  };\n  const packets: Uint8Array[] = [];\n  for (const event of traceEvents) {\n    packets.push(eventToPacket(event));\n  }\n  const totalLength = packets.reduce((acc, arr) => acc + arr.length, 0);\n  const trace = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const packet of packets) {\n    trace.set(packet, offset);\n    offset += packet.length;\n  }\n  return trace;\n}\n\ninterface TraceEventParams {\n  track?: MetatraceTrackId;\n  args?: {[key: string]: string};\n}\n\nexport type TraceEventScope = {\n  startNs: number;\n  eventName: string;\n  params?: TraceEventParams;\n};\n\nconst correctedTimeOrigin = new Date().getTime() - performance.now();\n\nfunction msToNs(ms: number) {\n  return Math.round(ms * 1e6);\n}\n\nfunction now(): number {\n  return msToNs(correctedTimeOrigin + performance.now());\n}\n\nexport function traceEvent<T>(\n  name: string,\n  event: () => T,\n  params?: TraceEventParams,\n): T {\n  const scope = traceEventBegin(name, params);\n  try {\n    const result = event();\n    return result;\n  } finally {\n    traceEventEnd(scope);\n  }\n}\n\nexport function traceEventBegin(\n  eventName: string,\n  params?: TraceEventParams,\n): TraceEventScope {\n  return {\n    eventName,\n    startNs: now(),\n    params: params,\n  };\n}\n\nexport function traceEventEnd(traceEvent: TraceEventScope) {\n  if (!isMetatracingEnabled()) return;\n\n  traceEvents.push({\n    eventName: traceEvent.eventName,\n    startNs: traceEvent.startNs,\n    durNs: now() - traceEvent.startNs,\n    track: traceEvent.params?.track ?? MetatraceTrackId.kMainThread,\n    args: traceEvent.params?.args,\n  });\n  while (traceEvents.length > METATRACING_BUFFER_SIZE) {\n    traceEvents.shift();\n  }\n}\n\n// Flatten arbitrary values so they can be used as args in traceEvent() et al.\nexport function flattenArgs(\n  input: unknown,\n  parentKey = '',\n): {[key: string]: string} {\n  if (typeof input !== 'object' || input === null) {\n    return {[parentKey]: String(input)};\n  }\n\n  if (Array.isArray(input)) {\n    const result: Record<string, string> = {};\n\n    (input as Array<unknown>).forEach((item, index) => {\n      const arrayKey = `${parentKey}[${index}]`;\n      Object.assign(result, flattenArgs(item, arrayKey));\n    });\n\n    return result;\n  }\n\n  const result: Record<string, string> = {};\n\n  Object.entries(input as Record<string, unknown>).forEach(([key, value]) => {\n    const newKey = parentKey ? `${parentKey}.${key}` : key;\n    Object.assign(result, flattenArgs(value, newKey));\n  });\n\n  return result;\n}\n"]}
{"version":3,"file":"state_serialization.js","sourceRoot":"","sources":["../../../src/core/state_serialization.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n  SERIALIZED_STATE_VERSION,\n  APP_STATE_SCHEMA,\n  SerializedNote,\n  SerializedPluginState,\n  SerializedSelection,\n  SerializedAppState,\n} from './state_serialization_schema';\nimport {TimeSpan} from '../base/time';\nimport {TraceImpl} from './trace_impl';\n\n// When it comes to serialization & permalinks there are two different use cases\n// 1. Uploading the current trace in a Cloud Storage (GCS) file AND serializing\n//    the app state into a different GCS JSON file. This is what happens when\n//    clicking on \"share trace\" on a local file manually opened.\n// 2. [future use case] Uploading the current state in a GCS JSON file, but\n//    letting the trace file come from a deep-link via postMessage().\n//    This is the case when traces are opened via Dashboards (e.g. APC) and we\n//    want to persist only the state itself, not the trace file.\n//\n// In order to do so, we have two layers of serialization\n// 1. Serialization of the app state (This file):\n//    This is a JSON object that represents the visual app state (pinned tracks,\n//    visible viewport bounds, etc) BUT not the trace source.\n// 2. An outer layer that contains the app state AND a link to the trace file.\n//    (permalink.ts)\n//\n// In a nutshell:\n//   AppState:  {viewport: {...}, pinnedTracks: {...}, notes: {...}}\n//   Permalink: {appState: {see above}, traceUrl: 'https://gcs/trace/file'}\n//\n// This file deals with the app state. permalink.ts deals with the outer layer.\n\n/**\n * Serializes the current app state into a JSON-friendly POJO that can be stored\n * in a permalink (@see permalink.ts).\n * @returns A @type {SerializedAppState} object, @see state_serialization_schema.ts\n */\nexport function serializeAppState(trace: TraceImpl): SerializedAppState {\n  const vizWindow = trace.timeline.visibleWindow.toTimeSpan();\n\n  const notes = new Array<SerializedNote>();\n  for (const [id, note] of trace.notes.notes.entries()) {\n    if (note.noteType === 'DEFAULT') {\n      notes.push({\n        noteType: 'DEFAULT',\n        id,\n        start: note.timestamp,\n        color: note.color,\n        text: note.text,\n      });\n    } else if (note.noteType === 'SPAN') {\n      notes.push({\n        noteType: 'SPAN',\n        id,\n        start: note.start,\n        end: note.end,\n        color: note.color,\n        text: note.text,\n      });\n    }\n  }\n\n  const selection = new Array<SerializedSelection>();\n  const stateSel = trace.selection.selection;\n  if (stateSel.kind === 'track_event') {\n    selection.push({\n      kind: 'TRACK_EVENT',\n      trackKey: stateSel.trackUri,\n      eventId: stateSel.eventId.toString(),\n      detailsPanel: trace.selection\n        .getDetailsPanelForSelection()\n        ?.serializatonState(),\n    });\n  } else if (stateSel.kind === 'area') {\n    selection.push({\n      kind: 'AREA',\n      trackUris: stateSel.trackUris,\n      start: stateSel.start,\n      end: stateSel.end,\n    });\n  }\n\n  const plugins = new Array<SerializedPluginState>();\n  const pluginsStore = trace.getPluginStoreForSerialization();\n\n  for (const [id, pluginState] of Object.entries(pluginsStore)) {\n    plugins.push({id, state: pluginState});\n  }\n\n  return {\n    version: SERIALIZED_STATE_VERSION,\n    pinnedTracks: trace.workspace.pinnedTracks\n      .map((t) => t.uri)\n      .filter((uri) => uri !== undefined),\n    viewport: {\n      start: vizWindow.start,\n      end: vizWindow.end,\n    },\n    notes,\n    selection,\n    plugins,\n  };\n}\n\nexport type ParseStateResult =\n  | {success: true; data: SerializedAppState}\n  | {success: false; error: string};\n\n/**\n * Parses the app state from a JSON blob.\n * @param jsonDecodedObj the output of JSON.parse() that needs validation\n * @returns Either a @type {SerializedAppState} object or an error.\n */\nexport function parseAppState(jsonDecodedObj: unknown): ParseStateResult {\n  const parseRes = APP_STATE_SCHEMA.safeParse(jsonDecodedObj);\n  if (parseRes.success) {\n    if (parseRes.data.version == SERIALIZED_STATE_VERSION) {\n      return {success: true, data: parseRes.data};\n    } else {\n      return {\n        success: false,\n        error:\n          `SERIALIZED_STATE_VERSION mismatch ` +\n          `(actual: ${parseRes.data.version}, ` +\n          `expected: ${SERIALIZED_STATE_VERSION})`,\n      };\n    }\n  }\n  return {success: false, error: parseRes.error.toString()};\n}\n\n/**\n * This function gets invoked after the trace is loaded, but before plugins,\n * track decider and initial selections are run.\n * @param appState the .data object returned by parseAppState() when successful.\n */\nexport function deserializeAppStatePhase1(\n  appState: SerializedAppState,\n  trace: TraceImpl,\n): void {\n  // Restore the plugin state.\n  trace.getPluginStoreForSerialization().edit((draft) => {\n    for (const p of appState.plugins ?? []) {\n      draft[p.id] = p.state ?? {};\n    }\n  });\n}\n\n/**\n * This function gets invoked after the trace controller has run and all plugins\n * have executed.\n * @param appState the .data object returned by parseAppState() when successful.\n * @param trace the target trace object to manipulate.\n */\nexport function deserializeAppStatePhase2(\n  appState: SerializedAppState,\n  trace: TraceImpl,\n): void {\n  if (appState.viewport !== undefined) {\n    trace.timeline.updateVisibleTime(\n      new TimeSpan(appState.viewport.start, appState.viewport.end),\n    );\n  }\n\n  // Restore the pinned tracks, if they exist.\n  for (const uri of appState.pinnedTracks) {\n    const track = trace.workspace.findTrackByUri(uri);\n    if (track) {\n      track.pin();\n    }\n  }\n\n  // Restore notes.\n  for (const note of appState.notes) {\n    const commonArgs = {\n      id: note.id,\n      timestamp: note.start,\n      color: note.color,\n      text: note.text,\n    };\n    if (note.noteType === 'DEFAULT') {\n      trace.notes.addNote({...commonArgs});\n    } else if (note.noteType === 'SPAN') {\n      trace.notes.addSpanNote({\n        ...commonArgs,\n        start: commonArgs.timestamp,\n        end: note.end,\n      });\n    }\n  }\n\n  // Restore the selection\n  trace.selection.deserialize(appState.selection[0]);\n}\n\n/**\n * Performs JSON serialization, taking care of also serializing BigInt->string.\n * For the matching deserializer see zType in state_serialization_schema.ts.\n * @param obj A POJO, typically a SerializedAppState or PermalinkState.\n * @returns JSON-encoded string.\n */\nexport function JsonSerialize(obj: Object): string {\n  return JSON.stringify(obj, (_key, value) => {\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n    return value;\n  });\n}\n"]}
{"version":3,"file":"router.js","sourceRoot":"","sources":["../../../src/core/router.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {assertTrue} from '../base/logging';\nimport {RouteArgs, ROUTE_SCHEMA} from '../public/route_schema';\nimport {PageAttrs} from '../public/page';\n\nexport const ROUTE_PREFIX = '#!';\n\n// The set of args that can be set on the route via #!/page?a=1&b2.\n// Route args are orthogonal to pages (i.e. should NOT make sense only in a\n// only within a specific page, use /page/subpages for that).\n// Args are !== the querystring (location.search) which is sent to the\n// server. The route args are NOT sent to the HTTP server.\n// Given this URL:\n// http://host/?foo=1&bar=2#!/page/subpage?local_cache_key=a0b1&baz=3.\n//\n// location.search = 'foo=1&bar=2'.\n//   This is seen by the HTTP server. We really don't use querystrings as the\n//   perfetto UI is client only.\n//\n// location.hash = '#!/page/subpage?local_cache_key=a0b1'.\n//   This is client-only. All the routing logic in the Perfetto UI uses only\n//   this.\n\nfunction safeParseRoute(rawRoute: unknown): RouteArgs {\n  const res = ROUTE_SCHEMA.safeParse(rawRoute);\n  return res.success ? res.data : {};\n}\n\n// A broken down representation of a route.\n// For instance: #!/record/gpu?local_cache_key=a0b1\n// becomes: {page: '/record', subpage: '/gpu', args: {local_cache_key: 'a0b1'}}\nexport interface Route {\n  page: string;\n  subpage: string;\n  fragment: string;\n  args: RouteArgs;\n}\n\nexport interface RoutesMap {\n  [key: string]: m.ComponentTypes<PageAttrs>;\n}\n\n// This router does two things:\n// 1) Maps fragment paths (#!/page/subpage) to Mithril components.\n// The route map is passed to the ctor and is later used when calling the\n// resolve() method.\n//\n// 2) Handles the (optional) args, e.g. #!/page?arg=1&arg2=2.\n// Route args are carry information that is orthogonal to the page (e.g. the\n// trace id).\n// local_cache_key has some special treatment: once a URL has a local_cache_key,\n// it gets automatically appended to further navigations that don't have one.\n// For instance if the current url is #!/viewer?local_cache_key=1234 and a later\n// action (either user-initiated or code-initited) navigates to #!/info, the\n// rotuer will automatically replace the history entry with\n// #!/info?local_cache_key=1234.\n// This is to keep propagating the trace id across page changes, for handling\n// tab discards (b/175041881).\n//\n// This class does NOT deal with the \"load a trace when the url contains ?url=\n// or ?local_cache_key=\". That logic lives in trace_url_handler.ts, which is\n// triggered by Router.onRouteChanged().\nexport class Router {\n  private readonly recentChanges: number[] = [];\n\n  // frontend/index.ts calls maybeOpenTraceFromRoute() + redraw here.\n  // This event is decoupled for testing and to avoid circular deps.\n  onRouteChanged: (route: Route) => void = () => {};\n\n  constructor() {\n    window.onhashchange = (e: HashChangeEvent) => this.onHashChange(e);\n    const route = Router.parseUrl(window.location.href);\n    this.onRouteChanged(route);\n  }\n\n  private onHashChange(e: HashChangeEvent) {\n    this.crashIfLivelock();\n\n    const oldRoute = Router.parseUrl(e.oldURL);\n    const newRoute = Router.parseUrl(e.newURL);\n\n    if (\n      newRoute.args.local_cache_key === undefined &&\n      oldRoute.args.local_cache_key\n    ) {\n      // Propagate `local_cache_key across` navigations. When a trace is loaded,\n      // the URL becomes #!/viewer?local_cache_key=123. `local_cache_key` allows\n      // reopening the trace from cache in the case of a reload or discard.\n      // When using the UI we can hit \"bare\" links (e.g. just '#!/info') which\n      // don't have the trace_uuid:\n      // - When clicking on an <a> element from the sidebar.\n      // - When the code calls Router.navigate().\n      // - When the user pastes a URL from docs page.\n      // In all these cases we want to keep propagating the `local_cache_key`.\n      // We do so by re-setting the `local_cache_key` and doing a\n      // location.replace which overwrites the history entry (note\n      // location.replace is NOT just a String.replace operation).\n      newRoute.args.local_cache_key = oldRoute.args.local_cache_key;\n    }\n\n    const args = m.buildQueryString(newRoute.args);\n    let normalizedFragment = `#!${newRoute.page}${newRoute.subpage}`;\n    if (args.length) {\n      normalizedFragment += `?${args}`;\n    }\n    if (newRoute.fragment) {\n      normalizedFragment += `#${newRoute.fragment}`;\n    }\n\n    if (!e.newURL.endsWith(normalizedFragment)) {\n      location.replace(normalizedFragment);\n      return;\n    }\n\n    this.onRouteChanged(newRoute);\n  }\n\n  static navigate(newHash: string) {\n    assertTrue(newHash.startsWith(ROUTE_PREFIX));\n    window.location.hash = newHash;\n  }\n\n  // Breaks down a fragment into a Route object.\n  // Sample input:\n  // '#!/record/gpu?local_cache_key=abcd-1234#myfragment'\n  // Sample output:\n  // {\n  //  page: '/record',\n  //  subpage: '/gpu',\n  //  fragment: 'myfragment',\n  //  args: {local_cache_key: 'abcd-1234'}\n  // }\n  static parseFragment(hash: string): Route {\n    if (hash.startsWith(ROUTE_PREFIX)) {\n      hash = hash.substring(ROUTE_PREFIX.length);\n    } else {\n      hash = '';\n    }\n\n    const url = new URL(`https://example.com${hash}`);\n\n    const path = url.pathname;\n    let page = path;\n    let subpage = '';\n    const splittingPoint = path.indexOf('/', 1);\n    if (splittingPoint > 0) {\n      page = path.substring(0, splittingPoint);\n      subpage = path.substring(splittingPoint);\n    }\n    if (page === '/') {\n      page = '';\n    }\n\n    let rawArgs = {};\n    if (url.search) {\n      rawArgs = Router.parseQueryString(url.search);\n    }\n\n    const args = safeParseRoute(rawArgs);\n\n    // Javascript sadly distinguishes between foo[bar] === undefined\n    // and foo[bar] is not set at all. Here we need the second case to\n    // avoid making the URL ugly.\n    for (const key of Object.keys(args)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if ((args as any)[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        delete (args as any)[key];\n      }\n    }\n\n    let fragment = url.hash;\n    if (fragment.startsWith('#')) {\n      fragment = fragment.substring(1);\n    }\n\n    return {page, subpage, args, fragment};\n  }\n\n  private static parseQueryString(query: string) {\n    query = query.replaceAll('+', ' ');\n    return m.parseQueryString(query);\n  }\n\n  private static parseSearchParams(url: string): RouteArgs {\n    const query = new URL(url).search;\n    const rawArgs = Router.parseQueryString(query);\n    const args = safeParseRoute(rawArgs);\n    return args;\n  }\n\n  // Like parseFragment() but takes a full URL.\n  static parseUrl(url: string): Route {\n    const searchArgs = Router.parseSearchParams(url);\n\n    const hashPos = url.indexOf('#');\n    const fragment = hashPos < 0 ? '' : url.substring(hashPos);\n    const route = Router.parseFragment(fragment);\n    route.args = Object.assign({}, searchArgs, route.args);\n\n    return route;\n  }\n\n  // Throws if EVENT_LIMIT onhashchange events occur within WINDOW_MS.\n  private crashIfLivelock() {\n    const WINDOW_MS = 1000;\n    const EVENT_LIMIT = 20;\n    const now = Date.now();\n    while (\n      this.recentChanges.length > 0 &&\n      now - this.recentChanges[0] > WINDOW_MS\n    ) {\n      this.recentChanges.shift();\n    }\n    this.recentChanges.push(now);\n    if (this.recentChanges.length > EVENT_LIMIT) {\n      throw new Error('History rewriting livelock');\n    }\n  }\n}\n"]}
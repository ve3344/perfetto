{"version":3,"file":"selection_aggregation_manager.js","sourceRoot":"","sources":["../../../src/core/selection_aggregation_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {AsyncLimiter} from '../base/async_limiter';\nimport {isString} from '../base/object_utils';\nimport {AggregateData, Column, ColumnDef, Sorting} from '../public/aggregation';\nimport {AreaSelection, AreaSelectionAggregator} from '../public/selection';\nimport {Engine} from '../trace_processor/engine';\nimport {NUM} from '../trace_processor/query_result';\nimport {raf} from './raf_scheduler';\n\nexport class SelectionAggregationManager {\n  private engine: Engine;\n  private readonly limiter = new AsyncLimiter();\n  private _aggregators = new Array<AreaSelectionAggregator>();\n  private _aggregatedData = new Map<string, AggregateData>();\n  private _sorting = new Map<string, Sorting>();\n  private _currentArea: AreaSelection | undefined = undefined;\n\n  constructor(engine: Engine) {\n    this.engine = engine;\n  }\n\n  registerAggregator(aggr: AreaSelectionAggregator) {\n    this._aggregators.push(aggr);\n  }\n\n  aggregateArea(area: AreaSelection) {\n    this.limiter.schedule(async () => {\n      this._currentArea = area;\n      this._aggregatedData.clear();\n      for (const aggr of this._aggregators) {\n        const data = await this.runAggregator(aggr, area);\n        if (data !== undefined) {\n          this._aggregatedData.set(aggr.id, data);\n        }\n      }\n      raf.scheduleFullRedraw();\n    });\n  }\n\n  clear() {\n    // This is wrapped in the async limiter to make sure that an aggregateArea()\n    // followed by a clear() (e.g., because selection changes) doesn't end up\n    // with the aggregation being displayed anyways once the promise completes.\n    this.limiter.schedule(async () => {\n      this._currentArea = undefined;\n      this._aggregatedData.clear();\n      this._sorting.clear();\n      raf.scheduleFullRedraw();\n    });\n  }\n\n  getSortingPrefs(aggregatorId: string): Sorting | undefined {\n    return this._sorting.get(aggregatorId);\n  }\n\n  toggleSortingColumn(aggregatorId: string, column: string) {\n    const sorting = this._sorting.get(aggregatorId);\n\n    if (sorting === undefined || sorting.column !== column) {\n      // No sorting set for current column.\n      this._sorting.set(aggregatorId, {\n        column,\n        direction: 'DESC',\n      });\n    } else if (sorting.direction === 'DESC') {\n      // Toggle the direction if the column is currently sorted.\n      this._sorting.set(aggregatorId, {\n        column,\n        direction: 'ASC',\n      });\n    } else {\n      // If direction is currently 'ASC' toggle to no sorting.\n      this._sorting.delete(aggregatorId);\n    }\n\n    // Re-run the aggregation.\n    if (this._currentArea) {\n      this.aggregateArea(this._currentArea);\n    }\n  }\n\n  get aggregators(): ReadonlyArray<AreaSelectionAggregator> {\n    return this._aggregators;\n  }\n\n  getAggregatedData(aggregatorId: string): AggregateData | undefined {\n    return this._aggregatedData.get(aggregatorId);\n  }\n\n  private async runAggregator(\n    aggr: AreaSelectionAggregator,\n    area: AreaSelection,\n  ): Promise<AggregateData | undefined> {\n    const viewExists = await aggr.createAggregateView(this.engine, area);\n    if (!viewExists) {\n      return undefined;\n    }\n\n    const defs = aggr.getColumnDefinitions();\n    const colIds = defs.map((col) => col.columnId);\n    const sorting = this._sorting.get(aggr.id);\n    let sortClause = `${aggr.getDefaultSorting().column} ${\n      aggr.getDefaultSorting().direction\n    }`;\n    if (sorting) {\n      sortClause = `${sorting.column} ${sorting.direction}`;\n    }\n    const query = `select ${colIds} from ${aggr.id} order by ${sortClause}`;\n    const result = await this.engine.query(query);\n\n    const numRows = result.numRows();\n    const columns = defs.map((def) => columnFromColumnDef(def, numRows));\n    const columnSums = await Promise.all(\n      defs.map((def) => this.getSum(aggr.id, def)),\n    );\n    const extraData = await aggr.getExtra(this.engine, area);\n    const extra = extraData ? extraData : undefined;\n    const data: AggregateData = {\n      tabName: aggr.getTabName(),\n      columns,\n      columnSums,\n      strings: [],\n      extra,\n    };\n\n    const stringIndexes = new Map<string, number>();\n    function internString(str: string) {\n      let idx = stringIndexes.get(str);\n      if (idx !== undefined) return idx;\n      idx = data.strings.length;\n      data.strings.push(str);\n      stringIndexes.set(str, idx);\n      return idx;\n    }\n\n    const it = result.iter({});\n    for (let i = 0; it.valid(); it.next(), ++i) {\n      for (const column of data.columns) {\n        const item = it.get(column.columnId);\n        if (item === null) {\n          column.data[i] = isStringColumn(column) ? internString('NULL') : 0;\n        } else if (isString(item)) {\n          column.data[i] = internString(item);\n        } else if (item instanceof Uint8Array) {\n          column.data[i] = internString('<Binary blob>');\n        } else if (typeof item === 'bigint') {\n          // TODO(stevegolton) It would be nice to keep bigints as bigints for\n          // the purposes of aggregation, however the aggregation infrastructure\n          // is likely to be significantly reworked when we introduce EventSet,\n          // and the complexity of supporting bigints throughout the aggregation\n          // panels in its current form is not worth it. Thus, we simply\n          // convert bigints to numbers.\n          column.data[i] = Number(item);\n        } else {\n          column.data[i] = item;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  private async getSum(tableName: string, def: ColumnDef): Promise<string> {\n    if (!def.sum) return '';\n    const result = await this.engine.query(\n      `select ifnull(sum(${def.columnId}), 0) as s from ${tableName}`,\n    );\n    let sum = result.firstRow({s: NUM}).s;\n    if (def.kind === 'TIMESTAMP_NS') {\n      sum = sum / 1e6;\n    }\n    return `${sum}`;\n  }\n}\n\nfunction columnFromColumnDef(def: ColumnDef, numRows: number): Column {\n  // TODO(hjd): The Column type should be based on the\n  // ColumnDef type or vice versa to avoid this cast.\n  return {\n    title: def.title,\n    kind: def.kind,\n    data: new def.columnConstructor(numRows),\n    columnId: def.columnId,\n  } as Column;\n}\n\nfunction isStringColumn(column: Column): boolean {\n  return column.kind === 'STRING' || column.kind === 'STATE';\n}\n"]}
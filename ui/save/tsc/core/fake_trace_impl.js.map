{"version":3,"file":"fake_trace_impl.js","sourceRoot":"","sources":["../../../src/core/fake_trace_impl.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAiBjC,kEAMC;AAGD,kDAwBC;AAhDD,uCAAkC;AAClC,sDAAqD;AACrD,yCAAmC;AACnC,6CAAuC;AAUvC,IAAI,kBAAkB,GAAG,KAAK,CAAC;AAE/B,SAAgB,2BAA2B;IACzC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxB,kBAAkB,GAAG,IAAI,CAAC;QAC1B,kBAAO,CAAC,UAAU,CAAC,EAAC,gBAAgB,EAAE,EAAE,EAAC,CAAC,CAAC;IAC7C,CAAC;IACD,OAAO,kBAAO,CAAC,QAAQ,CAAC;AAC1B,CAAC;AAED,6BAA6B;AAC7B,SAAgB,mBAAmB,CAAC,OAA0B,EAAE;IAC9D,2BAA2B,EAAE,CAAC;IAC9B,MAAM,aAAa,GAAkB;QACnC,MAAM,EAAE,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAC;QAC9B,UAAU,EAAE,EAAE;QACd,QAAQ,EAAE,EAAE;QACZ,KAAK,EAAE,WAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QAC1B,GAAG,EAAE,WAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACzB,cAAc,EAAE,WAAI,CAAC,IAAI;QACzB,SAAS,EAAE,WAAI,CAAC,IAAI;QACpB,aAAa,EAAE,WAAI,CAAC,IAAI;QACxB,IAAI,EAAE,EAAE;QACR,YAAY,EAAE,CAAC;QACf,SAAS,EAAE,OAAO;QAClB,SAAS,EAAE,KAAK;QAChB,IAAI,EAAE,EAAE;QACR,MAAM,EAAE,KAAK;QACb,YAAY,EAAE,KAAK;KACpB,CAAC;IACF,OAAO,sBAAS,CAAC,qBAAqB,CACpC,kBAAO,CAAC,QAAQ,EAChB,IAAI,UAAU,CAAC,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,EAC1C,aAAa,CACd,CAAC;AACJ,CAAC;AAED,MAAM,UAAW,SAAQ,mBAAU;IAIb;IAHX,IAAI,GAAG,MAAM,CAAC;IACvB,EAAE,GAAW,YAAY,CAAC;IAE1B,YAAoB,YAAqB;QACvC,KAAK,EAAE,CAAC;QADU,iBAAY,GAAZ,YAAY,CAAS;IAEzC,CAAC;IAED,mBAAmB,CAAC,KAAiB;QACnC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CACb,8CAA8C;gBAC5C,gEAAgE;gBAChE,6BAA6B,CAChC,CAAC;QACJ,CAAC;IACH,CAAC;IAED,CAAC,MAAM,CAAC,OAAO,CAAC,KAAI,CAAC;CACtB","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Time} from '../base/time';\nimport {EngineBase} from '../trace_processor/engine';\nimport {AppImpl} from './app_impl';\nimport {TraceImpl} from './trace_impl';\nimport {TraceInfoImpl} from './trace_info_impl';\n\nexport interface FakeTraceImplArgs {\n  // If true suppresses exceptions when trying to issue a query. This is to\n  // catch bugs where we are trying to query an empty instance. However some\n  // unittests need to do so. Default: false.\n  allowQueries?: boolean;\n}\n\nlet appImplInitialized = false;\n\nexport function initializeAppImplForTesting(): AppImpl {\n  if (!appImplInitialized) {\n    appImplInitialized = true;\n    AppImpl.initialize({initialRouteArgs: {}});\n  }\n  return AppImpl.instance;\n}\n\n// For testing purposes only.\nexport function createFakeTraceImpl(args: FakeTraceImplArgs = {}) {\n  initializeAppImplForTesting();\n  const fakeTraceInfo: TraceInfoImpl = {\n    source: {type: 'URL', url: ''},\n    traceTitle: '',\n    traceUrl: '',\n    start: Time.fromSeconds(0),\n    end: Time.fromSeconds(10),\n    realtimeOffset: Time.ZERO,\n    utcOffset: Time.ZERO,\n    traceTzOffset: Time.ZERO,\n    cpus: [],\n    importErrors: 0,\n    traceType: 'proto',\n    hasFtrace: false,\n    uuid: '',\n    cached: false,\n    downloadable: false,\n  };\n  return TraceImpl.createInstanceForCore(\n    AppImpl.instance,\n    new FakeEngine(args.allowQueries ?? false),\n    fakeTraceInfo,\n  );\n}\n\nclass FakeEngine extends EngineBase {\n  readonly mode = 'WASM';\n  id: string = 'TestEngine';\n\n  constructor(private allowQueries: boolean) {\n    super();\n  }\n\n  rpcSendRequestBytes(_data: Uint8Array) {\n    if (!this.allowQueries) {\n      throw new Error(\n        'FakeEngine.query() should never be reached. ' +\n          'If this is a unittest, try adding {allowQueries: true} to the ' +\n          'createFakeTraceImpl() call.',\n      );\n    }\n  }\n\n  [Symbol.dispose]() {}\n}\n"]}
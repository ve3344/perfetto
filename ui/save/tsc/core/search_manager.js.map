{"version":3,"file":"search_manager.js","sourceRoot":"","sources":["../../../src/core/search_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {AsyncLimiter} from '../base/async_limiter';\nimport {searchSegment} from '../base/binary_search';\nimport {assertExists, assertTrue} from '../base/logging';\nimport {sqliteString} from '../base/string_utils';\nimport {Time, TimeSpan} from '../base/time';\nimport {exists} from '../base/utils';\nimport {ResultStepEventHandler} from '../public/search';\nimport {\n  ANDROID_LOGS_TRACK_KIND,\n  CPU_SLICE_TRACK_KIND,\n} from '../public/track_kinds';\nimport {Workspace} from '../public/workspace';\nimport {Engine} from '../trace_processor/engine';\nimport {LONG, NUM, STR} from '../trace_processor/query_result';\nimport {escapeSearchQuery} from '../trace_processor/query_utils';\nimport {raf} from './raf_scheduler';\nimport {SearchSource} from './search_data';\nimport {TimelineImpl} from './timeline';\nimport {TrackManagerImpl} from './track_manager';\n\nexport interface SearchResults {\n  eventIds: Float64Array;\n  tses: BigInt64Array;\n  utids: Float64Array;\n  trackUris: string[];\n  sources: SearchSource[];\n  totalResults: number;\n}\n\nexport class SearchManagerImpl {\n  private _searchGeneration = 0;\n  private _searchText = '';\n  private _searchWindow?: TimeSpan;\n  private _results?: SearchResults;\n  private _resultIndex = -1;\n  private _searchInProgress = false;\n\n  // TODO(primiano): once we get rid of globals, these below can be made always\n  // defined. the ?: is to deal with globals-before-trace-load.\n  private _timeline?: TimelineImpl;\n  private _trackManager?: TrackManagerImpl;\n  private _workspace?: Workspace;\n  private _engine?: Engine;\n  private _limiter = new AsyncLimiter();\n  private _onResultStep?: ResultStepEventHandler;\n\n  constructor(args?: {\n    timeline: TimelineImpl;\n    trackManager: TrackManagerImpl;\n    workspace: Workspace;\n    engine: Engine;\n    onResultStep: ResultStepEventHandler;\n  }) {\n    this._timeline = args?.timeline;\n    this._trackManager = args?.trackManager;\n    this._engine = args?.engine;\n    this._workspace = args?.workspace;\n    this._onResultStep = args?.onResultStep;\n  }\n\n  search(text: string) {\n    if (text === this._searchText) {\n      return;\n    }\n    this._searchText = text;\n    this._searchGeneration++;\n    this._results = undefined;\n    this._resultIndex = -1;\n    this._searchInProgress = false;\n    if (text !== '') {\n      this._searchInProgress = true;\n      this._searchWindow = this._timeline?.visibleWindow.toTimeSpan();\n      this._limiter.schedule(async () => {\n        await this.executeSearch();\n        this._searchInProgress = false;\n        raf.scheduleFullRedraw();\n      });\n    }\n    raf.scheduleFullRedraw();\n  }\n\n  reset() {\n    this.search('');\n  }\n\n  stepForward() {\n    this.stepInternal(false);\n  }\n\n  stepBackwards() {\n    this.stepInternal(true);\n  }\n\n  private stepInternal(reverse = false) {\n    if (this._searchWindow === undefined) return;\n    if (this._results === undefined) return;\n\n    const index = this._resultIndex;\n    const {start: startNs, end: endNs} = this._searchWindow;\n    const currentTs = this._results.tses[index];\n\n    // If the value of |this._results.totalResults| is 0,\n    // it means that the query is in progress or no results are found.\n    if (this._results.totalResults === 0) {\n      return;\n    }\n\n    // If this is a new search or the currentTs is not in the viewport,\n    // select the first/last item in the viewport.\n    if (\n      index === -1 ||\n      (currentTs !== -1n && (currentTs < startNs || currentTs > endNs))\n    ) {\n      if (reverse) {\n        const [smaller] = searchSegment(this._results.tses, endNs);\n        // If there is no item in the viewport just go to the previous.\n        if (smaller === -1) {\n          this.setResultIndexWithSaturation(index - 1);\n        } else {\n          this._resultIndex = smaller;\n        }\n      } else {\n        const [, larger] = searchSegment(this._results.tses, startNs);\n        // If there is no item in the viewport just go to the next.\n        if (larger === -1) {\n          this.setResultIndexWithSaturation(index + 1);\n        } else {\n          this._resultIndex = larger;\n        }\n      }\n    } else {\n      // If the currentTs is in the viewport, increment the index.\n      if (reverse) {\n        this.setResultIndexWithSaturation(index - 1);\n      } else {\n        this.setResultIndexWithSaturation(index + 1);\n      }\n    }\n    if (this._onResultStep) {\n      this._onResultStep({\n        eventId: this._results.eventIds[this._resultIndex],\n        ts: Time.fromRaw(this._results.tses[this._resultIndex]),\n        trackUri: this._results.trackUris[this._resultIndex],\n        source: this._results.sources[this._resultIndex],\n      });\n    }\n    raf.scheduleFullRedraw();\n  }\n\n  private setResultIndexWithSaturation(nextIndex: number) {\n    const tot = assertExists(this._results).totalResults;\n    assertTrue(tot !== 0); // The early out in step() guarantees this.\n    // This is a modulo operation that works also for negative numbers.\n    this._resultIndex = ((nextIndex % tot) + tot) % tot;\n  }\n\n  get hasResults() {\n    return this._results !== undefined;\n  }\n\n  get searchResults() {\n    return this._results;\n  }\n\n  get resultIndex() {\n    return this._resultIndex;\n  }\n\n  get searchText() {\n    return this._searchText;\n  }\n\n  get searchGeneration() {\n    return this._searchGeneration;\n  }\n\n  get searchInProgress(): boolean {\n    return this._searchInProgress;\n  }\n\n  private async executeSearch() {\n    const search = this._searchText;\n    const window = this._searchWindow;\n    const searchLiteral = escapeSearchQuery(this._searchText);\n    const generation = this._searchGeneration;\n\n    const engine = this._engine;\n    const trackManager = this._trackManager;\n    const workspace = this._workspace;\n    if (!engine || !trackManager || !workspace || !window) {\n      return;\n    }\n\n    // TODO(stevegolton): Avoid recomputing these indexes each time.\n    const trackUrisByCpu = new Map<number, string>();\n    const allTracks = trackManager.getAllTracks();\n    allTracks.forEach((td) => {\n      const tags = td?.tags;\n      const cpu = tags?.cpu;\n      const kind = tags?.kind;\n      exists(cpu) &&\n        kind === CPU_SLICE_TRACK_KIND &&\n        trackUrisByCpu.set(cpu, td.uri);\n    });\n\n    const trackUrisByTrackId = new Map<number, string>();\n    allTracks.forEach((td) => {\n      const trackIds = td?.tags?.trackIds ?? [];\n      trackIds.forEach((trackId) => trackUrisByTrackId.set(trackId, td.uri));\n    });\n\n    const utidRes = await engine.query(`select utid from thread join process\n    using(upid) where\n      thread.name glob ${searchLiteral} or\n      process.name glob ${searchLiteral}`);\n    const utids = [];\n    for (const it = utidRes.iter({utid: NUM}); it.valid(); it.next()) {\n      utids.push(it.utid);\n    }\n\n    const res = await engine.query(`\n      select\n        id as sliceId,\n        ts,\n        'cpu' as source,\n        cpu as sourceId,\n        utid\n      from sched where utid in (${utids.join(',')})\n      union all\n      select *\n      from (\n        select\n          slice_id as sliceId,\n          ts,\n          'slice' as source,\n          track_id as sourceId,\n          0 as utid\n          from slice\n          where slice.name glob ${searchLiteral}\n            or (\n              0 != CAST(${sqliteString(search)} AS INT) and\n              sliceId = CAST(${sqliteString(search)} AS INT)\n            )\n        union\n        select\n          slice_id as sliceId,\n          ts,\n          'slice' as source,\n          track_id as sourceId,\n          0 as utid\n        from slice\n        join args using(arg_set_id)\n        where string_value glob ${searchLiteral} or key glob ${searchLiteral}\n      )\n      union all\n      select\n        id as sliceId,\n        ts,\n        'log' as source,\n        0 as sourceId,\n        utid\n      from android_logs where msg glob ${searchLiteral}\n      order by ts\n    `);\n\n    const searchResults: SearchResults = {\n      eventIds: new Float64Array(0),\n      tses: new BigInt64Array(0),\n      utids: new Float64Array(0),\n      sources: [],\n      trackUris: [],\n      totalResults: 0,\n    };\n\n    const lowerSearch = search.toLowerCase();\n    for (const track of workspace.flatTracksOrdered) {\n      // We don't support searching for tracks that don't have a URI.\n      if (!track.uri) continue;\n      if (track.title.toLowerCase().indexOf(lowerSearch) === -1) {\n        continue;\n      }\n      searchResults.totalResults++;\n      searchResults.sources.push('track');\n      searchResults.trackUris.push(track.uri);\n    }\n\n    const rows = res.numRows();\n    searchResults.eventIds = new Float64Array(\n      searchResults.totalResults + rows,\n    );\n    searchResults.tses = new BigInt64Array(searchResults.totalResults + rows);\n    searchResults.utids = new Float64Array(searchResults.totalResults + rows);\n    for (let i = 0; i < searchResults.totalResults; ++i) {\n      searchResults.eventIds[i] = -1;\n      searchResults.tses[i] = -1n;\n      searchResults.utids[i] = -1;\n    }\n\n    const it = res.iter({\n      sliceId: NUM,\n      ts: LONG,\n      source: STR,\n      sourceId: NUM,\n      utid: NUM,\n    });\n    for (; it.valid(); it.next()) {\n      let track: string | undefined = undefined;\n\n      if (it.source === 'cpu') {\n        track = trackUrisByCpu.get(it.sourceId);\n      } else if (it.source === 'slice') {\n        track = trackUrisByTrackId.get(it.sourceId);\n      } else if (it.source === 'log') {\n        track = trackManager\n          .getAllTracks()\n          .find((td) => td.tags?.kind === ANDROID_LOGS_TRACK_KIND)?.uri;\n      }\n      // The .get() calls above could return undefined, this isn't just an else.\n      if (track === undefined) {\n        continue;\n      }\n\n      const i = searchResults.totalResults++;\n      searchResults.trackUris.push(track);\n      searchResults.sources.push(it.source as SearchSource);\n      searchResults.eventIds[i] = it.sliceId;\n      searchResults.tses[i] = it.ts;\n      searchResults.utids[i] = it.utid;\n    }\n\n    if (generation !== this._searchGeneration) {\n      // We arrived too late. By the time we computed results the user issued\n      // another search.\n      return;\n    }\n    this._results = searchResults;\n    this._resultIndex = -1;\n  }\n}\n"]}
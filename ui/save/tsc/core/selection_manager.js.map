{"version":3,"file":"selection_manager.js","sourceRoot":"","sources":["../../../src/core/selection_manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertTrue, assertUnreachable} from '../base/logging';\nimport {\n  Selection,\n  Area,\n  SelectionOpts,\n  SelectionManager,\n  AreaSelectionAggregator,\n  SqlSelectionResolver,\n  TrackEventSelection,\n} from '../public/selection';\nimport {TimeSpan} from '../base/time';\nimport {raf} from './raf_scheduler';\nimport {exists} from '../base/utils';\nimport {TrackManagerImpl} from './track_manager';\nimport {Engine} from '../trace_processor/engine';\nimport {ScrollHelper} from './scroll_helper';\nimport {NoteManagerImpl} from './note_manager';\nimport {SearchResult} from '../public/search';\nimport {SelectionAggregationManager} from './selection_aggregation_manager';\nimport {AsyncLimiter} from '../base/async_limiter';\nimport m from 'mithril';\nimport {SerializedSelection} from './state_serialization_schema';\n\nconst INSTANT_FOCUS_DURATION = 1n;\nconst INCOMPLETE_SLICE_DURATION = 30_000n;\n\ninterface SelectionDetailsPanel {\n  isLoading: boolean;\n  render(): m.Children;\n  serializatonState(): unknown;\n}\n\n// There are two selection-related states in this class.\n// 1. _selection: This is the \"input\" / locator of the selection, what other\n//    parts of the codebase specify (e.g., a tuple of trackUri + eventId) to say\n//    \"please select this object if it exists\".\n// 2. _selected{Slice,ThreadState}: This is the resolved selection, that is, the\n//    rich details about the object that has been selected. If the input\n//    `_selection` is valid, this is filled in the near future. Doing so\n//    requires querying the SQL engine, which is an async operation.\nexport class SelectionManagerImpl implements SelectionManager {\n  private readonly detailsPanelLimiter = new AsyncLimiter();\n  private _selection: Selection = {kind: 'empty'};\n  private _aggregationManager: SelectionAggregationManager;\n  // Incremented every time _selection changes.\n  private readonly selectionResolvers = new Array<SqlSelectionResolver>();\n  private readonly detailsPanels = new WeakMap<\n    Selection,\n    SelectionDetailsPanel\n  >();\n\n  constructor(\n    engine: Engine,\n    private trackManager: TrackManagerImpl,\n    private noteManager: NoteManagerImpl,\n    private scrollHelper: ScrollHelper,\n    private onSelectionChange: (s: Selection, opts: SelectionOpts) => void,\n  ) {\n    this._aggregationManager = new SelectionAggregationManager(\n      engine.getProxy('SelectionAggregationManager'),\n    );\n  }\n\n  registerAreaSelectionAggregator(aggr: AreaSelectionAggregator): void {\n    this._aggregationManager.registerAggregator(aggr);\n  }\n\n  clear(): void {\n    this.setSelection({kind: 'empty'});\n  }\n\n  async selectTrackEvent(\n    trackUri: string,\n    eventId: number,\n    opts?: SelectionOpts,\n  ) {\n    this.selectTrackEventInternal(trackUri, eventId, opts);\n  }\n\n  selectTrack(trackUri: string, opts?: SelectionOpts) {\n    this.setSelection({kind: 'track', trackUri}, opts);\n  }\n\n  selectNote(args: {id: string}, opts?: SelectionOpts) {\n    this.setSelection(\n      {\n        kind: 'note',\n        id: args.id,\n      },\n      opts,\n    );\n  }\n\n  selectArea(area: Area, opts?: SelectionOpts): void {\n    const {start, end} = area;\n    assertTrue(start <= end);\n\n    // In the case of area selection, the caller provides a list of trackUris.\n    // However, all the consumer want to access the resolved TrackDescriptor.\n    // Rather than delegating this to the various consumers, we resolve them\n    // now once and for all and place them in the selection object.\n    const tracks = [];\n    for (const uri of area.trackUris) {\n      const trackDescr = this.trackManager.getTrack(uri);\n      if (trackDescr === undefined) continue;\n      tracks.push(trackDescr);\n    }\n\n    this.setSelection(\n      {\n        ...area,\n        kind: 'area',\n        tracks,\n      },\n      opts,\n    );\n  }\n\n  deserialize(serialized: SerializedSelection | undefined) {\n    if (serialized === undefined) {\n      return;\n    }\n    switch (serialized.kind) {\n      case 'TRACK_EVENT':\n        this.selectTrackEventInternal(\n          serialized.trackKey,\n          parseInt(serialized.eventId),\n          undefined,\n          serialized.detailsPanel,\n        );\n        break;\n      case 'AREA':\n        this.selectArea({\n          start: serialized.start,\n          end: serialized.end,\n          trackUris: serialized.trackUris,\n        });\n    }\n  }\n\n  toggleTrackAreaSelection(trackUri: string) {\n    const curSelection = this._selection;\n    if (curSelection.kind !== 'area') return;\n\n    let trackUris = curSelection.trackUris.slice();\n    if (!trackUris.includes(trackUri)) {\n      trackUris.push(trackUri);\n    } else {\n      trackUris = trackUris.filter((t) => t !== trackUri);\n    }\n    this.selectArea({\n      ...curSelection,\n      trackUris,\n    });\n  }\n\n  toggleGroupAreaSelection(trackUris: string[]) {\n    const curSelection = this._selection;\n    if (curSelection.kind !== 'area') return;\n\n    const allTracksSelected = trackUris.every((t) =>\n      curSelection.trackUris.includes(t),\n    );\n\n    let newTrackUris: string[];\n    if (allTracksSelected) {\n      // Deselect all tracks in the list\n      newTrackUris = curSelection.trackUris.filter(\n        (t) => !trackUris.includes(t),\n      );\n    } else {\n      newTrackUris = curSelection.trackUris.slice();\n      trackUris.forEach((t) => {\n        if (!newTrackUris.includes(t)) {\n          newTrackUris.push(t);\n        }\n      });\n    }\n    this.selectArea({\n      ...curSelection,\n      trackUris: newTrackUris,\n    });\n  }\n\n  get selection(): Selection {\n    return this._selection;\n  }\n\n  getDetailsPanelForSelection(): SelectionDetailsPanel | undefined {\n    return this.detailsPanels.get(this._selection);\n  }\n\n  registerSqlSelectionResolver(resolver: SqlSelectionResolver): void {\n    this.selectionResolvers.push(resolver);\n  }\n\n  async resolveSqlEvent(\n    sqlTableName: string,\n    id: number,\n  ): Promise<{eventId: number; trackUri: string} | undefined> {\n    const matchingResolvers = this.selectionResolvers.filter(\n      (r) => r.sqlTableName === sqlTableName,\n    );\n\n    for (const resolver of matchingResolvers) {\n      const result = await resolver.callback(id, sqlTableName);\n      if (result) {\n        // If we have multiple resolvers for the same table, just return the first one.\n        return result;\n      }\n    }\n\n    return undefined;\n  }\n\n  selectSqlEvent(sqlTableName: string, id: number, opts?: SelectionOpts): void {\n    this.resolveSqlEvent(sqlTableName, id).then((selection) => {\n      selection &&\n        this.selectTrackEvent(selection.trackUri, selection.eventId, opts);\n    });\n  }\n\n  private setSelection(selection: Selection, opts?: SelectionOpts) {\n    this._selection = selection;\n    this.onSelectionChange(selection, opts ?? {});\n    raf.scheduleFullRedraw();\n\n    if (opts?.scrollToSelection) {\n      this.scrollToCurrentSelection();\n    }\n\n    if (this._selection.kind === 'area') {\n      this._aggregationManager.aggregateArea(this._selection);\n    } else {\n      this._aggregationManager.clear();\n    }\n  }\n\n  selectSearchResult(searchResult: SearchResult) {\n    const {source, eventId, trackUri} = searchResult;\n    if (eventId === undefined) {\n      return;\n    }\n    switch (source) {\n      case 'track':\n        this.selectTrack(trackUri, {\n          clearSearch: false,\n          scrollToSelection: true,\n        });\n        break;\n      case 'cpu':\n        this.selectSqlEvent('sched_slice', eventId, {\n          clearSearch: false,\n          scrollToSelection: true,\n          switchToCurrentSelectionTab: true,\n        });\n        break;\n      case 'log':\n        // TODO(stevegolton): Get log selection working.\n        break;\n      case 'slice':\n        // Search results only include slices from the slice table for now.\n        // When we include annotations we need to pass the correct table.\n        this.selectSqlEvent('slice', eventId, {\n          clearSearch: false,\n          scrollToSelection: true,\n          switchToCurrentSelectionTab: true,\n        });\n        break;\n      default:\n        assertUnreachable(source);\n    }\n  }\n\n  scrollToCurrentSelection() {\n    const uri = (() => {\n      switch (this.selection.kind) {\n        case 'track_event':\n        case 'track':\n          return this.selection.trackUri;\n        // TODO(stevegolton): Handle scrolling to area and note selections.\n        default:\n          return undefined;\n      }\n    })();\n    const range = this.findFocusRangeOfSelection();\n    this.scrollHelper.scrollTo({\n      time: range ? {...range} : undefined,\n      track: uri ? {uri: uri, expandGroup: true} : undefined,\n    });\n  }\n\n  // Finds the time range range that we should actually focus on - using dummy\n  // values for instant and incomplete slices, so we don't end up super zoomed\n  // in.\n  private findFocusRangeOfSelection(): TimeSpan | undefined {\n    const sel = this.selection;\n    if (sel.kind === 'track_event') {\n      // The focus range of slices is different to that of the actual span\n      if (sel.dur === -1n) {\n        return TimeSpan.fromTimeAndDuration(sel.ts, INCOMPLETE_SLICE_DURATION);\n      } else if (sel.dur === 0n) {\n        return TimeSpan.fromTimeAndDuration(sel.ts, INSTANT_FOCUS_DURATION);\n      } else {\n        return TimeSpan.fromTimeAndDuration(sel.ts, sel.dur);\n      }\n    } else {\n      return this.findTimeRangeOfSelection();\n    }\n  }\n\n  private async selectTrackEventInternal(\n    trackUri: string,\n    eventId: number,\n    opts?: SelectionOpts,\n    serializedDetailsPanel?: unknown,\n  ) {\n    const details = await this.trackManager\n      .getTrack(trackUri)\n      ?.track.getSelectionDetails?.(eventId);\n\n    if (!exists(details)) {\n      throw new Error('Unable to resolve selection details');\n    }\n\n    const selection: TrackEventSelection = {\n      ...details,\n      kind: 'track_event',\n      trackUri,\n      eventId,\n    };\n    this.createTrackEventDetailsPanel(selection, serializedDetailsPanel);\n    this.setSelection(selection, opts);\n  }\n\n  private createTrackEventDetailsPanel(\n    selection: TrackEventSelection,\n    serializedState: unknown,\n  ) {\n    const td = this.trackManager.getTrack(selection.trackUri);\n    if (!td) {\n      return;\n    }\n    const panel = td.track.detailsPanel?.(selection);\n    if (!panel) {\n      return;\n    }\n\n    if (panel.serialization && serializedState !== undefined) {\n      const res = panel.serialization.schema.safeParse(serializedState);\n      if (res.success) {\n        panel.serialization.state = res.data;\n      }\n    }\n\n    const detailsPanel: SelectionDetailsPanel = {\n      render: () => panel.render(),\n      serializatonState: () => panel.serialization?.state,\n      isLoading: true,\n    };\n    // Associate this details panel with this selection object\n    this.detailsPanels.set(selection, detailsPanel);\n\n    this.detailsPanelLimiter.schedule(async () => {\n      await panel?.load?.(selection);\n      detailsPanel.isLoading = false;\n      raf.scheduleFullRedraw();\n    });\n  }\n\n  findTimeRangeOfSelection(): TimeSpan | undefined {\n    const sel = this.selection;\n    if (sel.kind === 'area') {\n      return new TimeSpan(sel.start, sel.end);\n    } else if (sel.kind === 'note') {\n      const selectedNote = this.noteManager.getNote(sel.id);\n      if (selectedNote !== undefined) {\n        const kind = selectedNote.noteType;\n        switch (kind) {\n          case 'SPAN':\n            return new TimeSpan(selectedNote.start, selectedNote.end);\n          case 'DEFAULT':\n            return TimeSpan.fromTimeAndDuration(\n              selectedNote.timestamp,\n              INSTANT_FOCUS_DURATION,\n            );\n          default:\n            assertUnreachable(kind);\n        }\n      }\n    } else if (sel.kind === 'track_event') {\n      return TimeSpan.fromTimeAndDuration(sel.ts, sel.dur);\n    }\n\n    return undefined;\n  }\n\n  get aggregation() {\n    return this._aggregationManager;\n  }\n}\n"]}
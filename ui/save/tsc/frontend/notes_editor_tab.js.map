{"version":3,"file":"notes_editor_tab.js","sourceRoot":"","sources":["../../../src/frontend/notes_editor_tab.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {assertUnreachable} from '../base/logging';\nimport {Icons} from '../base/semantic_icons';\nimport {Timestamp} from '../components/widgets/timestamp';\nimport {TraceImpl} from '../core/trace_impl';\nimport {DetailsPanel} from '../public/details_panel';\nimport {Note, SpanNote} from '../public/note';\nimport {Selection} from '../public/selection';\nimport {Button} from '../widgets/button';\n\nfunction getStartTimestamp(note: Note | SpanNote) {\n  const noteType = note.noteType;\n  switch (noteType) {\n    case 'SPAN':\n      return note.start;\n    case 'DEFAULT':\n      return note.timestamp;\n    default:\n      assertUnreachable(noteType);\n  }\n}\n\nexport class NotesEditorTab implements DetailsPanel {\n  constructor(private trace: TraceImpl) {}\n\n  render(selection: Selection) {\n    if (selection.kind !== 'note') {\n      return undefined;\n    }\n\n    const id = selection.id;\n\n    const note = this.trace.notes.getNote(id);\n    if (note === undefined) {\n      return m('.', `No Note with id ${id}`);\n    }\n    const startTime = getStartTimestamp(note);\n    return m(\n      '.notes-editor-panel',\n      {\n        key: id, // Every note shoul get its own brand new DOM.\n      },\n      m(\n        '.notes-editor-panel-heading-bar',\n        m(\n          '.notes-editor-panel-heading',\n          `Annotation at `,\n          m(Timestamp, {ts: startTime}),\n        ),\n        m('input[type=text]', {\n          oncreate: (v: m.VnodeDOM) => {\n            // NOTE: due to bad design decisions elsewhere this component is\n            // rendered every time the mouse moves on the canvas. We cannot set\n            // `value: note.text` as an input as that will clobber the input\n            // value as we move the mouse.\n            const inputElement = v.dom as HTMLInputElement;\n            inputElement.value = note.text;\n          },\n          onchange: (e: InputEvent) => {\n            const newText = (e.target as HTMLInputElement).value;\n            this.trace.notes.changeNote(id, {text: newText});\n          },\n        }),\n        m(\n          'span.color-change',\n          `Change color: `,\n          m('input[type=color]', {\n            value: note.color,\n            onchange: (e: Event) => {\n              const newColor = (e.target as HTMLInputElement).value;\n              this.trace.notes.changeNote(id, {color: newColor});\n            },\n          }),\n        ),\n        m(Button, {\n          label: 'Remove',\n          icon: Icons.Delete,\n          onclick: () => this.trace.notes.removeNote(id),\n        }),\n      ),\n    );\n  }\n}\n"]}
{"version":3,"file":"service_worker_controller.js","sourceRoot":"","sources":["../../../src/frontend/service_worker_controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Handles registration, unregistration and lifecycle of the service worker.\n// This class contains only the controlling logic, all the code in here runs in\n// the main thread, not in the service worker thread.\n// The actual service worker code is in src/service_worker.\n// Design doc: http://go/perfetto-offline.\n\nimport {getServingRoot} from '../base/http_utils';\nimport {reportError} from '../base/logging';\nimport {raf} from '../core/raf_scheduler';\n\n// We use a dedicated |caches| object to share a global boolean beween the main\n// thread and the SW. SW cannot use local-storage or anything else other than\n// IndexedDB (which would be overkill).\nconst BYPASS_ID = 'BYPASS_SERVICE_WORKER';\n\nclass BypassCache {\n  static async isBypassed(): Promise<boolean> {\n    try {\n      return await caches.has(BYPASS_ID);\n    } catch (_) {\n      // TODO(288483453): Reinstate:\n      // return ignoreCacheUnactionableErrors(e, false);\n      return false;\n    }\n  }\n\n  static async setBypass(bypass: boolean): Promise<void> {\n    try {\n      if (bypass) {\n        await caches.open(BYPASS_ID);\n      } else {\n        await caches.delete(BYPASS_ID);\n      }\n    } catch (_) {\n      // TODO(288483453): Reinstate:\n      // ignoreCacheUnactionableErrors(e, undefined);\n    }\n  }\n}\n\nexport class ServiceWorkerController {\n  private readonly servingRoot = getServingRoot();\n  private _bypassed = false;\n  private _installing = false;\n\n  // Caller should reload().\n  async setBypass(bypass: boolean) {\n    if (!('serviceWorker' in navigator)) return; // Not supported.\n    this._bypassed = bypass;\n    if (bypass) {\n      await BypassCache.setBypass(true); // Create the entry.\n      for (const reg of await navigator.serviceWorker.getRegistrations()) {\n        await reg.unregister();\n      }\n    } else {\n      await BypassCache.setBypass(false);\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      if (window.localStorage) {\n        window.localStorage.setItem('bypassDisabled', '1');\n      }\n      this.install();\n    }\n    raf.scheduleFullRedraw();\n  }\n\n  onStateChange(sw: ServiceWorker) {\n    raf.scheduleFullRedraw();\n    if (sw.state === 'installing') {\n      this._installing = true;\n    } else if (sw.state === 'activated') {\n      this._installing = false;\n    }\n  }\n\n  monitorWorker(sw: ServiceWorker | null) {\n    if (!sw) return;\n    sw.addEventListener('error', (e) => reportError(e));\n    sw.addEventListener('statechange', () => this.onStateChange(sw));\n    this.onStateChange(sw); // Trigger updates for the current state.\n  }\n\n  async install() {\n    const versionDir = this.servingRoot.split('/').slice(-2)[0];\n\n    if (!('serviceWorker' in navigator)) return; // Not supported.\n\n    if (location.pathname !== '/') {\n      // Disable the service worker when the UI is loaded from a non-root URL\n      // (e.g. from the CI artifacts GCS bucket). Supporting the case of a\n      // nested index.html is too cumbersome and has no benefits.\n      return;\n    }\n\n    // If this is localhost disable the service worker by default, unless the\n    // user manually re-enabled it (in which case bypassDisabled = '1').\n    const hostname = location.hostname;\n    const isLocalhost = ['127.0.0.1', '::1', 'localhost'].includes(hostname);\n    const bypassDisabled =\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n      window.localStorage &&\n      window.localStorage.getItem('bypassDisabled') === '1';\n    if (isLocalhost && !bypassDisabled) {\n      await this.setBypass(true); // Will cause the check below to bail out.\n    }\n\n    if (await BypassCache.isBypassed()) {\n      this._bypassed = true;\n      console.log('Skipping service worker registration, disabled by the user');\n      return;\n    }\n    // In production cases versionDir == VERSION. We use this here for ease of\n    // testing (so we can have /v1.0.0a/ /v1.0.0b/ even if they have the same\n    // version code).\n    const swUri = `/service_worker.js?v=${versionDir}`;\n    navigator.serviceWorker.register(swUri).then((registration) => {\n      // At this point there are two options:\n      // 1. This is the first time we visit the site (or cache was cleared) and\n      //    no SW is installed yet. In this case |installing| will be set.\n      // 2. A SW is already installed (though it might be obsolete). In this\n      //    case |active| will be set.\n      this.monitorWorker(registration.installing);\n      this.monitorWorker(registration.active);\n\n      // Setup the event that shows the \"Updated to v1.2.3\" notification.\n      registration.addEventListener('updatefound', () => {\n        this.monitorWorker(registration.installing);\n      });\n    });\n  }\n\n  get bypassed() {\n    return this._bypassed;\n  }\n  get installing() {\n    return this._installing;\n  }\n}\n"]}
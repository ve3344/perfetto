{"version":3,"file":"idle_detector.js","sourceRoot":"","sources":["../../../src/frontend/idle_detector.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,+CAAuC;AACvC,yDAA0C;AAC1C,+CAAyC;AACzC,iDAA2C;AAE3C;;;GAGG;AAEH,MAAM,kBAAkB,GAAG,GAAG,CAAC;AAC/B,MAAM,UAAU,GAAG,MAAM,CAAC;AAE1B,MAAa,YAAY;IACf,OAAO,GAAG,IAAA,gBAAK,GAAQ,CAAC;IACxB,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC;IAC1C,SAAS,CAAU;IACnB,gBAAgB,GAAG,kBAAkB,CAAC;IAE9C,mBAAmB,CAAC,gBAAgB,GAAG,kBAAkB;QACvD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,cAAc;QACpB,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAC9B,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACxB,IAAI,CAAC,OAAO,CAAC,MAAM,CACjB,4BAA4B,UAAU,gBAAgB;gBACpD,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE,CAC9B,CAAC;YACF,OAAO;QACT,CAAC;QACD,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC;YACvC,MAAM,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;YACrC,IAAI,OAAO,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACrC,0DAA0D;gBAC1D,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACvB,OAAO;YACT,CAAC;YACD,qDAAqD;YACrD,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,OAAO;QACT,CAAC;QACD,8BAA8B;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,gBAAgB;QACtB,mBAAmB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACnD,CAAC;IAEO,cAAc;QACpB,MAAM,WAAW,GAAG,kBAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,kBAAkB,IAAI,CAAC,CAAC;QAC3E,OAAO;YACL,CAAC,kBAAO,CAAC,QAAQ,CAAC,cAAc;YAChC,WAAW,KAAK,CAAC;YACjB,CAAC,mBAAG,CAAC,iBAAiB;YACtB,CAAC,0BAAW,CAAC,eAAe,EAAE;YAC9B,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC;YAChE,QAAQ,CAAC,aAAa,CAAC,yBAAyB,CAAC,IAAI,IAAI;YACzD,QAAQ,CAAC,aAAa,CAAC,uBAAuB,CAAC,IAAI,IAAI;SACxD,CAAC;IACJ,CAAC;CACF;AAvDD,oCAuDC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {defer} from '../base/deferred';\nimport {raf} from '../core/raf_scheduler';\nimport {AppImpl} from '../core/app_impl';\nimport {taskTracker} from './task_tracker';\n\n/**\n * This class is exposed by index.ts as window.waitForPerfettoIdle() and is used\n * by tests, to detect when we reach quiescence.\n */\n\nconst IDLE_HYSTERESIS_MS = 100;\nconst TIMEOUT_MS = 30_000;\n\nexport class IdleDetector {\n  private promise = defer<void>();\n  private deadline = performance.now() + TIMEOUT_MS;\n  private idleSince?: number;\n  private idleHysteresisMs = IDLE_HYSTERESIS_MS;\n\n  waitForPerfettoIdle(idleHysteresisMs = IDLE_HYSTERESIS_MS): Promise<void> {\n    this.idleSince = undefined;\n    this.idleHysteresisMs = idleHysteresisMs;\n    this.scheduleNextTask();\n    return this.promise;\n  }\n\n  private onIdleCallback() {\n    const now = performance.now();\n    if (now > this.deadline) {\n      this.promise.reject(\n        `Didn't reach idle within ${TIMEOUT_MS} ms, giving up` +\n          ` ${this.idleIndicators()}`,\n      );\n      return;\n    }\n    if (this.idleIndicators().every((x) => x)) {\n      this.idleSince = this.idleSince ?? now;\n      const idleDur = now - this.idleSince;\n      if (idleDur >= this.idleHysteresisMs) {\n        // We have been idle for more than the threshold, success.\n        this.promise.resolve();\n        return;\n      }\n      // We are idle, but not for long enough. keep waiting\n      this.scheduleNextTask();\n      return;\n    }\n    // Not idle, reset and repeat.\n    this.idleSince = undefined;\n    this.scheduleNextTask();\n  }\n\n  private scheduleNextTask() {\n    requestIdleCallback(() => this.onIdleCallback());\n  }\n\n  private idleIndicators() {\n    const reqsPending = AppImpl.instance.trace?.engine.numRequestsPending ?? 0;\n    return [\n      !AppImpl.instance.isLoadingTrace,\n      reqsPending === 0,\n      !raf.hasPendingRedraws,\n      !taskTracker.hasPendingTasks(),\n      !document.getAnimations().some((a) => a.playState === 'running'),\n      document.querySelector('.progress.progress-anim') == null,\n      document.querySelector('.omnibox.message-mode') == null,\n    ];\n  }\n}\n"]}
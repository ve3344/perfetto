{"version":3,"file":"globals.js","sourceRoot":"","sources":["../../../src/frontend/globals.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAEjC,yDAA0C;AAC1C,+CAAyC;AAEzC;;GAEG;AACH,MAAM,OAAO;IACX,qEAAqE;IACrE,uEAAuE;IACvE,wBAAwB;IAChB,eAAe,GAAwB,SAAS,CAAC;IAEzD,uEAAuE;IACvE,wBAAwB;IACxB,IAAI,gBAAgB;QAClB,OAAO,kBAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC;IAC3C,CAAC;IAED,0EAA0E;IAC1E,0EAA0E;IAC1E,wEAAwE;IACxE,qEAAqE;IACrE,6EAA6E;IAC7E,mBAAmB;IACnB,IAAI,cAAc;QAChB,IAAI,IAAI,CAAC,eAAe,KAAK,SAAS,EAAE,CAAC;YACvC,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,GAAG,CAAC;QACxE,CAAC;QACD,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAI,cAAc,CAAC,KAAc;QAC/B,YAAY,CAAC,OAAO,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC1D,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,mBAAG,CAAC,kBAAkB,EAAE,CAAC;IAC3B,CAAC;IAED,oDAAoD;IACpD,0EAA0E;IAC1E,4EAA4E;IAC5E,4BAA4B;IAC5B,QAAQ;QACN,mBAAG,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;CACF;AAEY,QAAA,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {raf} from '../core/raf_scheduler';\nimport {AppImpl} from '../core/app_impl';\n\n/**\n * Global accessors for state/dispatch in the frontend.\n */\nclass Globals {\n  // This is normally undefined is injected in via is_internal_user.js.\n  // WARNING: do not change/rename/move without considering impact on the\n  // internal_user script.\n  private _isInternalUser: boolean | undefined = undefined;\n\n  // WARNING: do not change/rename/move without considering impact on the\n  // internal_user script.\n  get extraSqlPackages() {\n    return AppImpl.instance.extraSqlPackages;\n  }\n\n  // This variable is set by the is_internal_user.js script if the user is a\n  // googler. This is used to avoid exposing features that are not ready yet\n  // for public consumption. The gated features themselves are not secret.\n  // If a user has been detected as a Googler once, make that sticky in\n  // localStorage, so that we keep treating them as such when they connect over\n  // public networks.\n  get isInternalUser() {\n    if (this._isInternalUser === undefined) {\n      this._isInternalUser = localStorage.getItem('isInternalUser') === '1';\n    }\n    return this._isInternalUser;\n  }\n\n  set isInternalUser(value: boolean) {\n    localStorage.setItem('isInternalUser', value ? '1' : '0');\n    this._isInternalUser = value;\n    raf.scheduleFullRedraw();\n  }\n\n  // Used when switching to the legacy TraceViewer UI.\n  // Most resources are cleaned up by replacing the current |window| object,\n  // however pending RAFs and workers seem to outlive the |window| and need to\n  // be cleaned up explicitly.\n  shutdown() {\n    raf.shutdown();\n  }\n}\n\nexport const globals = new Globals();\n"]}
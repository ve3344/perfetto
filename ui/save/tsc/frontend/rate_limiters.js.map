{"version":3,"file":"rate_limiters.js","sourceRoot":"","sources":["../../../src/frontend/rate_limiters.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAGjC,8BAYC;AAID,4BAWC;AA5BD,wEAAwE;AACxE,SAAgB,SAAS,CAAC,CAAW,EAAE,EAAU;IAC/C,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,OAAO,GAAG,EAAE;QACV,IAAI,SAAS,EAAE,CAAC;YACd,OAAO;QACT,CAAC;QACD,SAAS,GAAG,IAAI,CAAC;QACjB,UAAU,CAAC,GAAG,EAAE;YACd,CAAC,EAAE,CAAC;YACJ,SAAS,GAAG,KAAK,CAAC;QACpB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC;AACJ,CAAC;AAED,uEAAuE;AACvE,sBAAsB;AACtB,SAAgB,QAAQ,CAAC,CAAW,EAAE,EAAU;IAC9C,IAAI,OAAkD,CAAC;IACvD,OAAO,GAAG,EAAE;QACV,IAAI,OAAO,EAAE,CAAC;YACZ,YAAY,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC;QACD,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;YACxB,CAAC,EAAE,CAAC;YACJ,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Returns a wrapper around |f| which calls f at most once every |ms|ms.\nexport function ratelimit(f: Function, ms: number): Function {\n  let inProgess = false;\n  return () => {\n    if (inProgess) {\n      return;\n    }\n    inProgess = true;\n    setTimeout(() => {\n      f();\n      inProgess = false;\n    }, ms);\n  };\n}\n\n// Returns a wrapper around |f| which waits for a |ms|ms pause in calls\n// before calling |f|.\nexport function debounce(f: Function, ms: number): Function {\n  let timerId: undefined | ReturnType<typeof setTimeout>;\n  return () => {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(() => {\n      f();\n      timerId = undefined;\n    }, ms);\n  };\n}\n"]}
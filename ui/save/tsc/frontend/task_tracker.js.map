{"version":3,"file":"task_tracker.js","sourceRoot":"","sources":["../../../src/frontend/task_tracker.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAOjC,MAAa,WAAW;IACd,YAAY,CAAS;IACrB,gBAAgB,CAAS;IACzB,iBAAiB,CAAS;IAC1B,WAAW,CAAqC;IAExD;QACE,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,CAAC;IAED,YAAY,CAAC,OAAyB,EAAE,OAAe;QACrD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE;YAC5B,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,eAAe,EAAE;YACzC,OAAO;SACR,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;QACvB,OAAO;aACJ,IAAI,CAAC,GAAG,EAAE;YACT,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC;aACD,KAAK,CAAC,GAAG,EAAE;YACV,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;QAC7B,CAAC,CAAC;aACD,OAAO,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,eAAe;QACb,OAAO,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAC5E,CAAC;IAED,eAAe;QACb,MAAM,EAAC,KAAK,EAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;QACjD,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YACxB,OAAO,KAAK,CAAC;QACf,CAAC;aAAM,CAAC;YACN,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,eAAe,EAAE,CAAC;YAC3C,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC;YACtE,OAAO,GAAG,KAAK,CAAC,OAAO,KAAK,cAAc,IAAI,CAAC;QACjD,CAAC;IACH,CAAC;CACF;AA7CD,kCA6CC;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["// Copyright (C) 2020 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ninterface PromiseInfo {\n  startTimeMs: number;\n  message: string;\n}\n\nexport class TaskTracker {\n  private promisesSeen: number;\n  private promisesRejected: number;\n  private promisesFulfilled: number;\n  private promiseInfo: Map<Promise<unknown>, PromiseInfo>;\n\n  constructor() {\n    this.promisesSeen = 0;\n    this.promisesRejected = 0;\n    this.promisesFulfilled = 0;\n    this.promiseInfo = new Map();\n  }\n\n  trackPromise(promise: Promise<unknown>, message: string): void {\n    this.promiseInfo.set(promise, {\n      startTimeMs: new Date().getMilliseconds(),\n      message,\n    });\n    this.promisesSeen += 1;\n    promise\n      .then(() => {\n        this.promisesFulfilled += 1;\n      })\n      .catch(() => {\n        this.promisesRejected += 1;\n      })\n      .finally(() => {\n        this.promiseInfo.delete(promise);\n      });\n  }\n\n  hasPendingTasks(): boolean {\n    return this.promisesSeen > this.promisesFulfilled + this.promisesRejected;\n  }\n\n  progressMessage(): string | undefined {\n    const {value} = this.promiseInfo.values().next();\n    if (value === undefined) {\n      return value;\n    } else {\n      const nowMs = new Date().getMilliseconds();\n      const runtimeSeconds = Math.round((nowMs - value.startTimeMs) / 1000);\n      return `${value.message} (${runtimeSeconds}s)`;\n    }\n  }\n}\n\nexport const taskTracker = new TaskTracker();\n"]}
{"version":3,"file":"panel_container.js","sourceRoot":"","sources":["../../../../src/frontend/viewer_page/panel_container.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2018 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {canvasClip} from '../../base/canvas_utils';\nimport {DisposableStack} from '../../base/disposable_stack';\nimport {findRef, toHTMLElement} from '../../base/dom_utils';\nimport {Bounds2D, Size2D, VerticalBounds} from '../../base/geom';\nimport {assertExists, assertFalse} from '../../base/logging';\nimport {SimpleResizeObserver} from '../../base/resize_observer';\nimport {TimeScale} from '../../base/time_scale';\nimport {VirtualCanvas} from '../../base/virtual_canvas';\nimport {\n  PerfStats,\n  PerfStatsContainer,\n  runningStatStr,\n} from '../../core/perf_stats';\nimport {raf} from '../../core/raf_scheduler';\nimport {TraceImpl, TraceImplAttrs} from '../../core/trace_impl';\nimport {TrackNode} from '../../public/workspace';\nimport {HTMLAttrs} from '../../widgets/common';\nimport {SELECTION_STROKE_COLOR, TRACK_SHELL_WIDTH} from '../css_constants';\n\nconst CANVAS_OVERDRAW_PX = 300;\nconst CANVAS_TOLERANCE_PX = 100;\n\nexport interface Panel {\n  readonly kind: 'panel';\n  render(): m.Children;\n  readonly selectable: boolean;\n  // TODO(stevegolton): Remove this - panel container should know nothing of\n  // tracks!\n  readonly trackNode?: TrackNode;\n  renderCanvas(ctx: CanvasRenderingContext2D, size: Size2D): void;\n  getSliceVerticalBounds?(depth: number): VerticalBounds | undefined;\n}\n\nexport interface PanelGroup {\n  readonly kind: 'group';\n  readonly collapsed: boolean;\n  readonly header?: Panel;\n  readonly topOffsetPx: number;\n  readonly sticky: boolean;\n  readonly childPanels: PanelOrGroup[];\n}\n\nexport type PanelOrGroup = Panel | PanelGroup;\n\nexport interface PanelContainerAttrs extends TraceImplAttrs {\n  panels: PanelOrGroup[];\n  className?: string;\n  selectedYRange: VerticalBounds | undefined;\n\n  onPanelStackResize?: (width: number, height: number) => void;\n\n  // Called after all panels have been rendered to the canvas, to give the\n  // caller the opportunity to render an overlay on top of the panels.\n  renderOverlay?(\n    ctx: CanvasRenderingContext2D,\n    size: Size2D,\n    panels: ReadonlyArray<RenderedPanelInfo>,\n  ): void;\n\n  // Called before the panels are rendered\n  renderUnderlay?(ctx: CanvasRenderingContext2D, size: Size2D): void;\n}\n\ninterface PanelInfo {\n  trackNode?: TrackNode; // Can be undefined for singleton panels.\n  panel: Panel;\n  height: number;\n  width: number;\n  clientX: number;\n  clientY: number;\n  absY: number;\n}\n\nexport interface RenderedPanelInfo {\n  panel: Panel;\n  rect: Bounds2D;\n}\n\nexport class PanelContainer\n  implements m.ClassComponent<PanelContainerAttrs>, PerfStatsContainer\n{\n  private readonly trace: TraceImpl;\n  private attrs: PanelContainerAttrs;\n\n  // Updated every render cycle in the view() hook\n  private panelById = new Map<string, Panel>();\n\n  // Updated every render cycle in the oncreate/onupdate hook\n  private panelInfos: PanelInfo[] = [];\n\n  private perfStatsEnabled = false;\n  private panelPerfStats = new WeakMap<Panel, PerfStats>();\n  private perfStats = {\n    totalPanels: 0,\n    panelsOnCanvas: 0,\n    renderStats: new PerfStats(10),\n  };\n\n  private ctx?: CanvasRenderingContext2D;\n\n  private readonly trash = new DisposableStack();\n\n  private readonly OVERLAY_REF = 'overlay';\n  private readonly PANEL_STACK_REF = 'panel-stack';\n\n  constructor({attrs}: m.CVnode<PanelContainerAttrs>) {\n    this.attrs = attrs;\n    this.trace = attrs.trace;\n    this.trash.use(raf.addCanvasRedrawCallback(() => this.renderCanvas()));\n    this.trash.use(attrs.trace.perfDebugging.addContainer(this));\n  }\n\n  getPanelsInRegion(\n    startX: number,\n    endX: number,\n    startY: number,\n    endY: number,\n  ): Panel[] {\n    const minX = Math.min(startX, endX);\n    const maxX = Math.max(startX, endX);\n    const minY = Math.min(startY, endY);\n    const maxY = Math.max(startY, endY);\n    const panels: Panel[] = [];\n    for (let i = 0; i < this.panelInfos.length; i++) {\n      const pos = this.panelInfos[i];\n      const realPosX = pos.clientX - TRACK_SHELL_WIDTH;\n      if (\n        realPosX + pos.width >= minX &&\n        realPosX <= maxX &&\n        pos.absY + pos.height >= minY &&\n        pos.absY <= maxY &&\n        pos.panel.selectable\n      ) {\n        panels.push(pos.panel);\n      }\n    }\n    return panels;\n  }\n\n  // This finds the tracks covered by the in-progress area selection. When\n  // editing areaY is not set, so this will not be used.\n  handleAreaSelection() {\n    const {selectedYRange} = this.attrs;\n    const area = this.trace.timeline.selectedArea;\n    if (\n      area === undefined ||\n      selectedYRange === undefined ||\n      this.panelInfos.length === 0\n    ) {\n      return;\n    }\n\n    // TODO(stevegolton): We shouldn't know anything about visible time scale\n    // right now, that's a job for our parent, but we can put one together so we\n    // don't have to refactor this entire bit right now...\n\n    const visibleTimeScale = new TimeScale(this.trace.timeline.visibleWindow, {\n      left: 0,\n      right: this.virtualCanvas!.size.width - TRACK_SHELL_WIDTH,\n    });\n\n    // The Y value is given from the top of the pan and zoom region, we want it\n    // from the top of the panel container. The parent offset corrects that.\n    const panels = this.getPanelsInRegion(\n      visibleTimeScale.timeToPx(area.start),\n      visibleTimeScale.timeToPx(area.end),\n      selectedYRange.top,\n      selectedYRange.bottom,\n    );\n\n    // Get the track ids from the panels.\n    const trackUris: string[] = [];\n    for (const panel of panels) {\n      if (panel.trackNode) {\n        if (panel.trackNode.isSummary) {\n          const groupNode = panel.trackNode;\n          // Select a track group and all child tracks if it is collapsed\n          if (groupNode.collapsed) {\n            for (const track of groupNode.flatTracks) {\n              track.uri && trackUris.push(track.uri);\n            }\n          }\n        } else {\n          panel.trackNode.uri && trackUris.push(panel.trackNode.uri);\n        }\n      }\n    }\n    this.trace.timeline.selectArea(area.start, area.end, trackUris);\n  }\n\n  private virtualCanvas?: VirtualCanvas;\n\n  oncreate(vnode: m.CVnodeDOM<PanelContainerAttrs>) {\n    const {dom, attrs} = vnode;\n\n    const overlayElement = toHTMLElement(\n      assertExists(findRef(dom, this.OVERLAY_REF)),\n    );\n\n    const virtualCanvas = new VirtualCanvas(overlayElement, dom, {\n      overdrawAxes: 'y',\n      overdrawPx: CANVAS_OVERDRAW_PX,\n      tolerancePx: CANVAS_TOLERANCE_PX,\n    });\n    this.trash.use(virtualCanvas);\n    this.virtualCanvas = virtualCanvas;\n\n    const ctx = virtualCanvas.canvasElement.getContext('2d');\n    if (!ctx) {\n      throw Error('Cannot create canvas context');\n    }\n    this.ctx = ctx;\n\n    virtualCanvas.setCanvasResizeListener((canvas, width, height) => {\n      const dpr = window.devicePixelRatio;\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n    });\n\n    virtualCanvas.setLayoutShiftListener(() => {\n      this.renderCanvas();\n    });\n\n    this.onupdate(vnode);\n\n    const panelStackElement = toHTMLElement(\n      assertExists(findRef(dom, this.PANEL_STACK_REF)),\n    );\n\n    // Listen for when the panel stack changes size\n    this.trash.use(\n      new SimpleResizeObserver(panelStackElement, () => {\n        attrs.onPanelStackResize?.(\n          panelStackElement.clientWidth,\n          panelStackElement.clientHeight,\n        );\n      }),\n    );\n  }\n\n  onremove() {\n    this.trash.dispose();\n  }\n\n  renderPanel(node: Panel, panelId: string, htmlAttrs?: HTMLAttrs): m.Vnode {\n    assertFalse(this.panelById.has(panelId));\n    this.panelById.set(panelId, node);\n    return m(\n      `.pf-panel`,\n      {...htmlAttrs, 'data-panel-id': panelId},\n      node.render(),\n    );\n  }\n\n  // Render a tree of panels into one vnode. Argument `path` is used to build\n  // `key` attribute for intermediate tree vnodes: otherwise Mithril internals\n  // will complain about keyed and non-keyed vnodes mixed together.\n  renderTree(node: PanelOrGroup, panelId: string): m.Vnode {\n    if (node.kind === 'group') {\n      const style = {\n        position: 'sticky',\n        top: `${node.topOffsetPx}px`,\n        zIndex: `${2000 - node.topOffsetPx}`,\n      };\n      return m(\n        'div.pf-panel-group',\n        node.header &&\n          this.renderPanel(node.header, `${panelId}-header`, {\n            style: !node.collapsed && node.sticky ? style : {},\n          }),\n        ...node.childPanels.map((child, index) =>\n          this.renderTree(child, `${panelId}-${index}`),\n        ),\n      );\n    }\n    return this.renderPanel(node, panelId);\n  }\n\n  view({attrs}: m.CVnode<PanelContainerAttrs>) {\n    this.attrs = attrs;\n    this.panelById.clear();\n    const children = attrs.panels.map((panel, index) =>\n      this.renderTree(panel, `${index}`),\n    );\n\n    return m(\n      '.pf-panel-container',\n      {className: attrs.className},\n      m(\n        '.pf-panel-stack',\n        {ref: this.PANEL_STACK_REF},\n        m('.pf-overlay', {ref: this.OVERLAY_REF}),\n        children,\n      ),\n    );\n  }\n\n  onupdate({dom}: m.CVnodeDOM<PanelContainerAttrs>) {\n    this.readPanelRectsFromDom(dom);\n  }\n\n  private readPanelRectsFromDom(dom: Element): void {\n    this.panelInfos = [];\n\n    const panel = dom.querySelectorAll('.pf-panel');\n    const panels = assertExists(findRef(dom, this.PANEL_STACK_REF));\n    const {top} = panels.getBoundingClientRect();\n    panel.forEach((panelElement) => {\n      const panelHTMLElement = toHTMLElement(panelElement);\n      const panelId = assertExists(panelHTMLElement.dataset.panelId);\n      const panel = assertExists(this.panelById.get(panelId));\n\n      // NOTE: the id can be undefined for singletons like overview timeline.\n      const rect = panelElement.getBoundingClientRect();\n      this.panelInfos.push({\n        trackNode: panel.trackNode,\n        height: rect.height,\n        width: rect.width,\n        clientX: rect.x,\n        clientY: rect.y,\n        absY: rect.y - top,\n        panel,\n      });\n    });\n  }\n\n  private renderCanvas() {\n    if (!this.ctx) return;\n    if (!this.virtualCanvas) return;\n\n    const ctx = this.ctx;\n    const vc = this.virtualCanvas;\n    const redrawStart = performance.now();\n\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    const dpr = window.devicePixelRatio;\n    ctx.scale(dpr, dpr);\n    ctx.translate(-vc.canvasRect.left, -vc.canvasRect.top);\n\n    this.handleAreaSelection();\n\n    const totalRenderedPanels = this.renderPanels(ctx, vc);\n    this.drawTopLayerOnCanvas(ctx, vc);\n\n    // Collect performance as the last thing we do.\n    const redrawDur = performance.now() - redrawStart;\n    this.updatePerfStats(\n      redrawDur,\n      this.panelInfos.length,\n      totalRenderedPanels,\n    );\n  }\n\n  private renderPanels(\n    ctx: CanvasRenderingContext2D,\n    vc: VirtualCanvas,\n  ): number {\n    this.attrs.renderUnderlay?.(ctx, vc.size);\n\n    let panelTop = 0;\n    let totalOnCanvas = 0;\n\n    const renderedPanels = Array<RenderedPanelInfo>();\n\n    for (let i = 0; i < this.panelInfos.length; i++) {\n      const {\n        panel,\n        width: panelWidth,\n        height: panelHeight,\n      } = this.panelInfos[i];\n\n      const panelRect = {\n        left: 0,\n        top: panelTop,\n        bottom: panelTop + panelHeight,\n        right: panelWidth,\n      };\n      const panelSize = {width: panelWidth, height: panelHeight};\n\n      if (vc.overlapsCanvas(panelRect)) {\n        totalOnCanvas++;\n\n        ctx.save();\n        ctx.translate(0, panelTop);\n        canvasClip(ctx, 0, 0, panelWidth, panelHeight);\n        const beforeRender = performance.now();\n        panel.renderCanvas(ctx, panelSize);\n        this.updatePanelStats(\n          i,\n          panel,\n          performance.now() - beforeRender,\n          ctx,\n          panelSize,\n        );\n        ctx.restore();\n      }\n\n      renderedPanels.push({\n        panel,\n        rect: {\n          top: panelTop,\n          bottom: panelTop + panelHeight,\n          left: 0,\n          right: panelWidth,\n        },\n      });\n\n      panelTop += panelHeight;\n    }\n\n    this.attrs.renderOverlay?.(ctx, vc.size, renderedPanels);\n\n    return totalOnCanvas;\n  }\n\n  // The panels each draw on the canvas but some details need to be drawn across\n  // the whole canvas rather than per panel.\n  private drawTopLayerOnCanvas(\n    ctx: CanvasRenderingContext2D,\n    vc: VirtualCanvas,\n  ): void {\n    const {selectedYRange} = this.attrs;\n    const area = this.trace.timeline.selectedArea;\n    if (area === undefined || selectedYRange === undefined) {\n      return;\n    }\n    if (this.panelInfos.length === 0 || area.trackUris.length === 0) {\n      return;\n    }\n\n    // Find the minY and maxY of the selected tracks in this panel container.\n    let selectedTracksMinY = selectedYRange.top;\n    let selectedTracksMaxY = selectedYRange.bottom;\n    for (let i = 0; i < this.panelInfos.length; i++) {\n      const trackUri = this.panelInfos[i].trackNode?.uri;\n      if (trackUri && area.trackUris.includes(trackUri)) {\n        selectedTracksMinY = Math.min(\n          selectedTracksMinY,\n          this.panelInfos[i].absY,\n        );\n        selectedTracksMaxY = Math.max(\n          selectedTracksMaxY,\n          this.panelInfos[i].absY + this.panelInfos[i].height,\n        );\n      }\n    }\n\n    // TODO(stevegolton): We shouldn't know anything about visible time scale\n    // right now, that's a job for our parent, but we can put one together so we\n    // don't have to refactor this entire bit right now...\n\n    const visibleTimeScale = new TimeScale(this.trace.timeline.visibleWindow, {\n      left: 0,\n      right: vc.size.width - TRACK_SHELL_WIDTH,\n    });\n\n    const startX = visibleTimeScale.timeToPx(area.start);\n    const endX = visibleTimeScale.timeToPx(area.end);\n    ctx.save();\n    ctx.strokeStyle = SELECTION_STROKE_COLOR;\n    ctx.lineWidth = 1;\n\n    ctx.translate(TRACK_SHELL_WIDTH, 0);\n\n    // Clip off any drawing happening outside the bounds of the timeline area\n    canvasClip(ctx, 0, 0, vc.size.width - TRACK_SHELL_WIDTH, vc.size.height);\n\n    ctx.strokeRect(\n      startX,\n      selectedTracksMaxY,\n      endX - startX,\n      selectedTracksMinY - selectedTracksMaxY,\n    );\n    ctx.restore();\n  }\n\n  private updatePanelStats(\n    panelIndex: number,\n    panel: Panel,\n    renderTime: number,\n    ctx: CanvasRenderingContext2D,\n    size: Size2D,\n  ) {\n    if (!this.perfStatsEnabled) return;\n    let renderStats = this.panelPerfStats.get(panel);\n    if (renderStats === undefined) {\n      renderStats = new PerfStats();\n      this.panelPerfStats.set(panel, renderStats);\n    }\n    renderStats.addValue(renderTime);\n\n    // Draw a green box around the whole panel\n    ctx.strokeStyle = 'rgba(69, 187, 73, 0.5)';\n    const lineWidth = 1;\n    ctx.lineWidth = lineWidth;\n    ctx.strokeRect(\n      lineWidth / 2,\n      lineWidth / 2,\n      size.width - lineWidth,\n      size.height - lineWidth,\n    );\n\n    const statW = 300;\n    ctx.fillStyle = 'hsl(97, 100%, 96%)';\n    ctx.fillRect(size.width - statW, size.height - 20, statW, 20);\n    ctx.fillStyle = 'hsla(122, 77%, 22%)';\n    const statStr = `Panel ${panelIndex + 1} | ` + runningStatStr(renderStats);\n    ctx.fillText(statStr, size.width - statW, size.height - 10);\n  }\n\n  private updatePerfStats(\n    renderTime: number,\n    totalPanels: number,\n    panelsOnCanvas: number,\n  ) {\n    if (!this.perfStatsEnabled) return;\n    this.perfStats.renderStats.addValue(renderTime);\n    this.perfStats.totalPanels = totalPanels;\n    this.perfStats.panelsOnCanvas = panelsOnCanvas;\n  }\n\n  setPerfStatsEnabled(enable: boolean): void {\n    this.perfStatsEnabled = enable;\n  }\n\n  renderPerfStats() {\n    return [\n      m(\n        'div',\n        `${this.perfStats.totalPanels} panels, ` +\n          `${this.perfStats.panelsOnCanvas} on canvas.`,\n      ),\n      m('div', runningStatStr(this.perfStats.renderStats)),\n    ];\n  }\n}\n"]}
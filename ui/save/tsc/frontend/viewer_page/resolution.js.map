{"version":3,"file":"resolution.js","sourceRoot":"","sources":["../../../../src/frontend/viewer_page/resolution.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAiBjC,kDAUC;AAzBD,wDAAkD;AAIlD;;;;;;;;;;GAUG;AACH,SAAgB,mBAAmB,CACjC,QAA+B,EAC/B,OAAe;IAEf,kDAAkD;IAClD,MAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;IAEzD,4EAA4E;IAC5E,2BAA2B;IAC3B,OAAO,wBAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {BigintMath} from '../../base/bigint_math';\nimport {HighPrecisionTimeSpan} from '../../base/high_precision_time_span';\nimport {duration} from '../../base/time';\n\n/**\n * Work out an appropriate \"resolution\" for a given time span stretched over a\n * given number of pixels.\n *\n * The returned value will be rounded down to the nearest power of 2, and will\n * always be >= 1.\n *\n * @param timeSpan The span of time to represent.\n * @param widthPx How many pixels we have to represent the time span.\n * @returns The resultant resolution.\n */\nexport function calculateResolution(\n  timeSpan: HighPrecisionTimeSpan,\n  widthPx: number,\n): duration {\n  // Work out how much time corresponds to one pixel\n  const timePerPixel = Number(timeSpan.duration) / widthPx;\n\n  // Round down to the nearest power of 2, noting that the smallest value this\n  // function can return is 1\n  return BigintMath.bitFloor(BigInt(Math.floor(timePerPixel)));\n}\n"]}
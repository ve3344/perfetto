{"version":3,"file":"tickmark_panel.js","sourceRoot":"","sources":["../../../../src/frontend/viewer_page/tickmark_panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use size file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {canvasClip} from '../../base/canvas_utils';\nimport {Size2D} from '../../base/geom';\nimport {TimeScale} from '../../base/time_scale';\nimport {getOrCreate} from '../../base/utils';\nimport {TraceImpl} from '../../core/trace_impl';\nimport {TRACK_SHELL_WIDTH} from '../css_constants';\nimport {generateTicks, getMaxMajorTicks, TickType} from './gridline_helper';\nimport {Panel} from './panel_container';\nimport {SearchOverviewTrack} from './search_overview_track';\n\n// We want to create the overview track only once per trace, but this\n// class can be delete and re-instantiated when switching between pages via\n// the sidebar. So we cache the overview track and bind it to the lifetime of\n// the TraceImpl object.\nconst trackTraceMap = new WeakMap<TraceImpl, SearchOverviewTrack>();\n\n// This is used to display the summary of search results.\nexport class TickmarkPanel implements Panel {\n  readonly kind = 'panel';\n  readonly selectable = false;\n  private searchOverviewTrack: SearchOverviewTrack;\n\n  constructor(private readonly trace: TraceImpl) {\n    this.searchOverviewTrack = getOrCreate(\n      trackTraceMap,\n      trace,\n      () => new SearchOverviewTrack(trace),\n    );\n  }\n\n  render(): m.Children {\n    return m('.tickbar');\n  }\n\n  renderCanvas(ctx: CanvasRenderingContext2D, size: Size2D): void {\n    ctx.fillStyle = '#999';\n    ctx.fillRect(TRACK_SHELL_WIDTH - 2, 0, 2, size.height);\n\n    const trackSize = {...size, width: size.width - TRACK_SHELL_WIDTH};\n    ctx.save();\n    ctx.translate(TRACK_SHELL_WIDTH, 0);\n    canvasClip(ctx, 0, 0, trackSize.width, trackSize.height);\n    this.renderTrack(ctx, trackSize);\n    ctx.restore();\n  }\n\n  private renderTrack(ctx: CanvasRenderingContext2D, size: Size2D): void {\n    const visibleWindow = this.trace.timeline.visibleWindow;\n    const timescale = new TimeScale(visibleWindow, {\n      left: 0,\n      right: size.width,\n    });\n    const timespan = visibleWindow.toTimeSpan();\n\n    if (size.width > 0 && timespan.duration > 0n) {\n      const maxMajorTicks = getMaxMajorTicks(size.width);\n\n      const offset = this.trace.timeline.timestampOffset();\n      const tickGen = generateTicks(timespan, maxMajorTicks, offset);\n      for (const {type, time} of tickGen) {\n        const px = Math.floor(timescale.timeToPx(time));\n        if (type === TickType.MAJOR) {\n          ctx.fillRect(px, 0, 1, size.height);\n        }\n      }\n    }\n\n    this.searchOverviewTrack.render(ctx, size);\n  }\n}\n"]}
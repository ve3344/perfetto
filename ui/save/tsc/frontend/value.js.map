{"version":3,"file":"value.js","sourceRoot":"","sources":["../../../src/frontend/value.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use size file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Tree, TreeNode} from '../widgets/tree';\nimport {PopupMenu2} from '../widgets/menu';\nimport {Button} from '../widgets/button';\n\n// This file implements a component for rendering JSON-like values (with\n// customisation options like context menu and action buttons).\n//\n// It defines the common Value, StringValue, DictValue, ArrayValue types,\n// to be used as an interchangeable format between different components\n// and `renderValue` function to convert DictValue into vdom nodes.\n\n// Leaf (non-dict and non-array) value which can be displayed to the user\n// together with the rendering customisation parameters.\ntype StringValue = {\n  kind: 'STRING';\n  value: string;\n} & StringValueParams;\n\n// Helper function to create a StringValue from string together with optional\n// parameters.\nexport function value(value: string, params?: StringValueParams): StringValue {\n  return {\n    kind: 'STRING',\n    value,\n    ...params,\n  };\n}\n\n// Helper function to convert a potentially undefined value to StringValue or\n// null.\nexport function maybeValue(\n  v?: string,\n  params?: StringValueParams,\n): StringValue | null {\n  if (!v) {\n    return null;\n  }\n  return value(v, params);\n}\n\n// A basic type for the JSON-like value, comprising a primitive type (string)\n// and composite types (arrays and dicts).\nexport type Value = StringValue | Array | Dict;\n\n// Dictionary type.\nexport type Dict = {\n  kind: 'DICT';\n  items: {[name: string]: Value};\n} & ValueParams;\n\n// Helper function to simplify creation of a dictionary.\n// This function accepts and filters out nulls as values in the passed\n// dictionary (useful for simplifying the code to render optional values).\nexport function dict(\n  items: {[name: string]: Value | null},\n  params?: ValueParams,\n): Dict {\n  const result: {[name: string]: Value} = {};\n  for (const [name, value] of Object.entries(items)) {\n    if (value !== null) {\n      result[name] = value;\n    }\n  }\n  return {\n    kind: 'DICT',\n    items: result,\n    ...params,\n  };\n}\n\n// Array type.\nexport type Array = {\n  kind: 'ARRAY';\n  items: Value[];\n} & ValueParams;\n\n// Helper function to simplify creation of an array.\n// This function accepts and filters out nulls in the passed array (useful for\n// simplifying the code to render optional values).\nexport function array(items: (Value | null)[], params?: ValueParams): Array {\n  return {\n    kind: 'ARRAY',\n    items: items.filter((item: Value | null) => item !== null) as Value[],\n    ...params,\n  };\n}\n\n// Parameters for displaying a button next to a value to perform\n// the context-dependent action (i.e. go to the corresponding slice).\ntype ButtonParams = {\n  action: () => void;\n  hoverText?: string;\n  icon?: string;\n};\n\n// Customisation parameters which apply to any Value (e.g. context menu).\ninterface ValueParams {\n  contextMenu?: m.Child[];\n}\n\n// Customisation parameters which apply for a primitive value (e.g. showing\n// button next to a string, or making it clickable, or adding onhover effect).\ninterface StringValueParams extends ValueParams {\n  leftButton?: ButtonParams;\n  rightButton?: ButtonParams;\n}\n\nexport function isArray(value: Value): value is Array {\n  return value.kind === 'ARRAY';\n}\n\nexport function isDict(value: Value): value is Dict {\n  return value.kind === 'DICT';\n}\n\nexport function isStringValue(value: Value): value is StringValue {\n  return !isArray(value) && !isDict(value);\n}\n\n// Recursively render the given value and its children, returning a list of\n// vnodes corresponding to the nodes of the table.\nfunction renderValue(name: string, value: Value): m.Children {\n  const left = [\n    name,\n    value.contextMenu\n      ? m(\n          PopupMenu2,\n          {\n            trigger: m(Button, {\n              icon: 'arrow_drop_down',\n            }),\n          },\n          value.contextMenu,\n        )\n      : null,\n  ];\n  if (isArray(value)) {\n    const nodes = value.items.map((value: Value, index: number) => {\n      return renderValue(`[${index}]`, value);\n    });\n    return m(TreeNode, {left, right: `array[${nodes.length}]`}, nodes);\n  } else if (isDict(value)) {\n    const nodes: m.Children[] = [];\n    for (const key of Object.keys(value.items)) {\n      nodes.push(renderValue(key, value.items[key]));\n    }\n    return m(TreeNode, {left, right: `dict`}, nodes);\n  } else {\n    const renderButton = (button?: ButtonParams) => {\n      if (!button) {\n        return null;\n      }\n      return m(\n        'i.material-icons.grey',\n        {\n          onclick: button.action,\n          title: button.hoverText,\n        },\n        button.icon ?? 'call_made',\n      );\n    };\n    if (value.kind === 'STRING') {\n      const right = [\n        renderButton(value.leftButton),\n        m('span', value.value),\n        renderButton(value.rightButton),\n      ];\n      return m(TreeNode, {left, right});\n    } else {\n      return null;\n    }\n  }\n}\n\n// Render a given dictionary to a tree.\nexport function renderDict(dict: Dict): m.Child {\n  const rows: m.Children[] = [];\n  for (const key of Object.keys(dict.items)) {\n    rows.push(renderValue(key, dict.items[key]));\n  }\n  return m(Tree, rows);\n}\n"]}
{"version":3,"file":"trace_converter.js","sourceRoot":"","sources":["../../../src/frontend/trace_converter.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AA+EjC,sEAMC;AAED,8EAMC;AAED,sCAaC;AAED,wEAWC;AAvHD,2CAAwC;AACxC,iDAA2C;AAC3C,+CAAuC;AAEvC,uDAAgD;AAEhD,+CAAyC;AACzC,iDAAoD;AAwCpD,KAAK,UAAU,iBAAiB,CAC9B,GAAY,EACZ,iBAA6C;IAE7C,MAAM,OAAO,GAAG,IAAA,gBAAK,GAAQ,CAAC;IAE9B,SAAS,eAAe,CAAC,GAAiB;QACxC,MAAM,IAAI,GAAS,GAAG,CAAC,IAAI,CAAC;QAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACjC,kBAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAC;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACxC,OAAO,CAAC,OAAO,EAAE,CAAC;QACpB,CAAC;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;YACxC,IAAA,oBAAQ,EAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3D,CAAC;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;YAC7C,MAAM,GAAG,GAAG,IAAA,yBAAU,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,iBAAiB,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACjC,IAAA,mCAAoB,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,KAAK,CAAC,qBAAqB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAA,iBAAQ,EAAC,qBAAqB,CAAC,CAAC,CAAC;IAC3D,MAAM,CAAC,SAAS,GAAG,eAAe,CAAC;IACnC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACxB,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAgB,6BAA6B,CAAC,KAAW;IACvD,OAAO,iBAAiB,CAAC;QACvB,IAAI,EAAE,yBAAyB;QAC/B,KAAK;QACL,MAAM,EAAE,MAAM;KACf,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,iCAAiC,CAAC,KAAW;IAC3D,OAAO,iBAAiB,CAAC;QACvB,IAAI,EAAE,yBAAyB;QAC/B,KAAK;QACL,MAAM,EAAE,UAAU;KACnB,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,aAAa,CAC3B,KAAW,EACX,iBAA4C,EAC5C,QAA0B;IAE1B,OAAO,iBAAiB,CACtB;QACE,IAAI,EAAE,6BAA6B;QACnC,KAAK;QACL,QAAQ;KACT,EACD,iBAAiB,CAClB,CAAC;AACJ,CAAC;AAED,SAAgB,8BAA8B,CAC5C,KAAW,EACX,GAAW,EACX,EAAQ;IAER,OAAO,iBAAiB,CAAC;QACvB,IAAI,EAAE,qBAAqB;QAC3B,KAAK;QACL,GAAG;QACH,EAAE;KACH,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (C) 2021 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assetSrc} from '../base/assets';\nimport {download} from '../base/clipboard';\nimport {defer} from '../base/deferred';\nimport {ErrorDetails} from '../base/logging';\nimport {utf8Decode} from '../base/string_utils';\nimport {time} from '../base/time';\nimport {AppImpl} from '../core/app_impl';\nimport {maybeShowErrorDialog} from './error_dialog';\n\ntype Args =\n  | UpdateStatusArgs\n  | JobCompletedArgs\n  | DownloadFileArgs\n  | OpenTraceInLegacyArgs\n  | ErrorArgs;\n\ninterface UpdateStatusArgs {\n  kind: 'updateStatus';\n  status: string;\n}\n\ninterface JobCompletedArgs {\n  kind: 'jobCompleted';\n}\n\ninterface DownloadFileArgs {\n  kind: 'downloadFile';\n  buffer: Uint8Array;\n  name: string;\n}\n\ninterface OpenTraceInLegacyArgs {\n  kind: 'openTraceInLegacy';\n  buffer: Uint8Array;\n}\n\ninterface ErrorArgs {\n  kind: 'error';\n  error: ErrorDetails;\n}\n\ntype OpenTraceInLegacyCallback = (\n  name: string,\n  data: ArrayBuffer | string,\n  size: number,\n) => void;\n\nasync function makeWorkerAndPost(\n  msg: unknown,\n  openTraceInLegacy?: OpenTraceInLegacyCallback,\n) {\n  const promise = defer<void>();\n\n  function handleOnMessage(msg: MessageEvent): void {\n    const args: Args = msg.data;\n    if (args.kind === 'updateStatus') {\n      AppImpl.instance.omnibox.showStatusMessage(args.status);\n    } else if (args.kind === 'jobCompleted') {\n      promise.resolve();\n    } else if (args.kind === 'downloadFile') {\n      download(new File([new Blob([args.buffer])], args.name));\n    } else if (args.kind === 'openTraceInLegacy') {\n      const str = utf8Decode(args.buffer);\n      openTraceInLegacy?.('trace.json', str, 0);\n    } else if (args.kind === 'error') {\n      maybeShowErrorDialog(args.error);\n    } else {\n      throw new Error(`Unhandled message ${JSON.stringify(args)}`);\n    }\n  }\n\n  const worker = new Worker(assetSrc('traceconv_bundle.js'));\n  worker.onmessage = handleOnMessage;\n  worker.postMessage(msg);\n  return promise;\n}\n\nexport function convertTraceToJsonAndDownload(trace: Blob): Promise<void> {\n  return makeWorkerAndPost({\n    kind: 'ConvertTraceAndDownload',\n    trace,\n    format: 'json',\n  });\n}\n\nexport function convertTraceToSystraceAndDownload(trace: Blob): Promise<void> {\n  return makeWorkerAndPost({\n    kind: 'ConvertTraceAndDownload',\n    trace,\n    format: 'systrace',\n  });\n}\n\nexport function convertToJson(\n  trace: Blob,\n  openTraceInLegacy: OpenTraceInLegacyCallback,\n  truncate?: 'start' | 'end',\n): Promise<void> {\n  return makeWorkerAndPost(\n    {\n      kind: 'ConvertTraceAndOpenInLegacy',\n      trace,\n      truncate,\n    },\n    openTraceInLegacy,\n  );\n}\n\nexport function convertTraceToPprofAndDownload(\n  trace: Blob,\n  pid: number,\n  ts: time,\n): Promise<void> {\n  return makeWorkerAndPost({\n    kind: 'ConvertTraceToPprof',\n    trace,\n    pid,\n    ts,\n  });\n}\n"]}
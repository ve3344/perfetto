{"version":3,"file":"android_bug_tool.js","sourceRoot":"","sources":["../../../src/frontend/android_bug_tool.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;AAgCH,wDAuCC;AArED,+CAAuC;AAEvC,IAAK,2BAIJ;AAJD,WAAK,2BAA2B;IAC9B,mFAAO,CAAA;IACP,yGAAkB,CAAA;IAClB,2HAA2B,CAAA;AAC7B,CAAC,EAJI,2BAA2B,KAA3B,2BAA2B,QAI/B;AAED,MAAM,6BAA6B,GAAG,kCAAkC,CAAC;AAsBzE,SAAgB,sBAAsB;IACpC,MAAM,QAAQ,GAAG,IAAA,gBAAK,GAAsB,CAAC;IAE7C,uEAAuE;IACvE,wEAAwE;IACxE,MAAM,CAAC,OAAO,CAAC,WAAW,CACxB,6BAA6B,EAC7B,EAAC,MAAM,EAAE,2BAA2B,CAAC,kBAAkB,EAAC,EACxD,KAAK,EAAE,QAAkC,EAAE,EAAE;QAC3C,QAAQ,QAAQ,CAAC,MAAM,EAAE,CAAC;YACxB,KAAK,2BAA2B,CAAC,2BAA2B;gBAC1D,IAAI,QAAQ,CAAC,WAAW,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;oBACrC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAChD,KAAK,EAAE,UAAU,EAAE,EAAE;wBACnB,MAAM,iBAAiB,GAAG,MAAM,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;wBAC5D,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,IAAI,EAAE,CAAC;wBAC5C,4DAA4D;wBAC5D,kCAAkC;wBAClC,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC3C,CAAC,CACF,CAAC;oBACF,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBACnD,QAAQ,CAAC,OAAO,CAAC;wBACf,OAAO,EAAE,QAAQ,CAAC,OAAO;wBACzB,UAAU,EAAE,QAAQ,CAAC,UAAU;wBAC/B,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;qBACf,CAAC,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACN,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;gBACxD,CAAC;gBACD,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CACb,qCAAqC,QAAQ,CAAC,MAAM,mBAAmB,CACxE,CAAC;QACN,CAAC;IACH,CAAC,CACF,CAAC;IACF,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["/*\n * Copyright (C) 2022 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {defer} from '../base/deferred';\n\nenum WebContentScriptMessageType {\n  UNKNOWN,\n  CONVERT_OBJECT_URL,\n  CONVERT_OBJECT_URL_RESPONSE,\n}\n\nconst ANDROID_BUG_TOOL_EXTENSION_ID = 'mbbaofdfoekifkfpgehgffcpagbbjkmj';\n\ninterface Attachment {\n  name: string;\n  objectUrl: string;\n  restrictionSeverity: number;\n}\n\ninterface ConvertObjectUrlResponse {\n  action: WebContentScriptMessageType.CONVERT_OBJECT_URL_RESPONSE;\n  attachments: Attachment[];\n  issueAccessLevel: string;\n  issueId: string;\n  issueTitle: string;\n}\n\nexport interface TraceFromBuganizer {\n  issueId: string;\n  issueTitle: string;\n  file: File;\n}\n\nexport function loadAndroidBugToolInfo(): Promise<TraceFromBuganizer> {\n  const deferred = defer<TraceFromBuganizer>();\n\n  // Request to convert the blob object url \"blob:chrome-extension://xxx\"\n  // the chrome extension has to a web downloadable url \"blob:http://xxx\".\n  chrome.runtime.sendMessage(\n    ANDROID_BUG_TOOL_EXTENSION_ID,\n    {action: WebContentScriptMessageType.CONVERT_OBJECT_URL},\n    async (response: ConvertObjectUrlResponse) => {\n      switch (response.action) {\n        case WebContentScriptMessageType.CONVERT_OBJECT_URL_RESPONSE:\n          if (response.attachments?.length > 0) {\n            const filesBlobPromises = response.attachments.map(\n              async (attachment) => {\n                const fileQueryResponse = await fetch(attachment.objectUrl);\n                const blob = await fileQueryResponse.blob();\n                // Note: The blob's media type is always set to \"image/png\".\n                // Clone blob to clear media type.\n                return new File([blob], attachment.name);\n              },\n            );\n            const files = await Promise.all(filesBlobPromises);\n            deferred.resolve({\n              issueId: response.issueId,\n              issueTitle: response.issueTitle,\n              file: files[0],\n            });\n          } else {\n            throw new Error('Got no attachements from extension');\n          }\n          break;\n        default:\n          throw new Error(\n            `Received unhandled response code (${response.action}) from extension.`,\n          );\n      }\n    },\n  );\n  return deferred;\n}\n"]}
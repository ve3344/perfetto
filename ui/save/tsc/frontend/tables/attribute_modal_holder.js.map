{"version":3,"file":"attribute_modal_holder.js","sourceRoot":"","sources":["../../../../src/frontend/tables/attribute_modal_holder.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,+CAA8C;AAC9C,8EAA4D;AAE5D,MAAa,oBAAoB;IAC/B,aAAa,GAAG,EAAE,CAAC;IAEnB,QAAQ,CAAwB;IAEhC,YAAY,QAA+B;QACzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,KAAK;QACH,IAAA,iBAAS,EAAC;YACR,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACzC,OAAO,EAAE;gBACP;oBACE,IAAI,EAAE,KAAK;oBACX,MAAM,EAAE,GAAG,EAAE;wBACX,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wBAClC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;oBAC1B,CAAC;iBACF;aACF;SACF,CAAC,CAAC;IACL,CAAC;IAEO,mBAAmB;QACzB,OAAO,IAAA,iBAAC,EAAC,0CAAa,EAAE;YACtB,gBAAgB,EAAE,CAAC,GAAG,EAAE,EAAE;gBACxB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC;YAC3B,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAhCD,oDAgCC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {showModal} from '../../widgets/modal';\nimport {ArgumentPopup} from '../pivot_table_argument_popup';\n\nexport class AttributeModalHolder {\n  typedArgument = '';\n\n  callback: (arg: string) => void;\n\n  constructor(callback: (arg: string) => void) {\n    this.callback = callback;\n  }\n\n  start() {\n    showModal({\n      title: 'Enter argument name',\n      content: () => this.renderModalContents(),\n      buttons: [\n        {\n          text: 'Add',\n          action: () => {\n            this.callback(this.typedArgument);\n            this.typedArgument = '';\n          },\n        },\n      ],\n    });\n  }\n\n  private renderModalContents() {\n    return m(ArgumentPopup, {\n      onArgumentChange: (arg) => {\n        this.typedArgument = arg;\n      },\n    });\n  }\n}\n"]}
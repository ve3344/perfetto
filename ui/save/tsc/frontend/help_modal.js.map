{"version":3,"file":"help_modal.js","sourceRoot":"","sources":["../../../src/frontend/help_modal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {assertExists} from '../base/logging';\nimport {AppImpl} from '../core/app_impl';\nimport {HotkeyGlyphs} from '../widgets/hotkey_glyphs';\nimport {showModal} from '../widgets/modal';\nimport {Spinner} from '../widgets/spinner';\nimport {\n  KeyboardLayoutMap,\n  nativeKeyboardLayoutMap,\n  NotSupportedError,\n} from '../base/keyboard_layout_map';\nimport {KeyMapping} from './viewer_page/pan_and_zoom_handler';\n\nexport function toggleHelp() {\n  AppImpl.instance.analytics.logEvent('User Actions', 'Show help');\n  showModal({\n    title: 'Perfetto Help',\n    content: () => m(KeyMappingsHelp),\n    buttons: [],\n  });\n}\n\nfunction keycap(glyph: m.Children): m.Children {\n  return m('.keycap', glyph);\n}\n\n// A fallback keyboard map based on the QWERTY keymap. Converts keyboard event\n// codes to their associated glyphs on an English QWERTY keyboard.\nclass EnglishQwertyKeyboardLayoutMap implements KeyboardLayoutMap {\n  get(code: string): string {\n    // Converts 'KeyX' -> 'x'\n    return code.replace(/^Key([A-Z])$/, '$1').toLowerCase();\n  }\n}\n\nclass KeyMappingsHelp implements m.ClassComponent {\n  private keyMap?: KeyboardLayoutMap;\n\n  oninit() {\n    nativeKeyboardLayoutMap()\n      .then((keyMap: KeyboardLayoutMap) => {\n        this.keyMap = keyMap;\n        AppImpl.instance.scheduleFullRedraw('force');\n      })\n      .catch((e) => {\n        if (\n          e instanceof NotSupportedError ||\n          String(e).includes('SecurityError')\n        ) {\n          // Keyboard layout is unavailable. Since showing the keyboard\n          // mappings correct for the user's keyboard layout is a nice-to-\n          // have, and users with non-QWERTY layouts are usually aware of the\n          // fact that the are using non-QWERTY layouts, we resort to showing\n          // English QWERTY mappings as a best-effort approach.\n          // The alternative would be to show key mappings for all keyboard\n          // layouts which is not feasible.\n          this.keyMap = new EnglishQwertyKeyboardLayoutMap();\n          AppImpl.instance.scheduleFullRedraw('force');\n        } else {\n          // Something unexpected happened. Either the browser doesn't conform\n          // to the keyboard API spec, or the keyboard API spec has changed!\n          throw e;\n        }\n      });\n  }\n\n  view(): m.Children {\n    return m(\n      '.help',\n      m('h2', 'Navigation'),\n      m(\n        'table',\n        m(\n          'tr',\n          m(\n            'td',\n            this.codeToKeycap(KeyMapping.KEY_ZOOM_IN),\n            '/',\n            this.codeToKeycap(KeyMapping.KEY_ZOOM_OUT),\n          ),\n          m('td', 'Zoom in/out'),\n        ),\n        m(\n          'tr',\n          m(\n            'td',\n            this.codeToKeycap(KeyMapping.KEY_PAN_LEFT),\n            '/',\n            this.codeToKeycap(KeyMapping.KEY_PAN_RIGHT),\n          ),\n          m('td', 'Pan left/right'),\n        ),\n      ),\n      m('h2', 'Mouse Controls'),\n      m(\n        'table',\n        m('tr', m('td', 'Click'), m('td', 'Select event')),\n        m('tr', m('td', 'Ctrl + Scroll wheel'), m('td', 'Zoom in/out')),\n        m('tr', m('td', 'Click + Drag'), m('td', 'Select area')),\n        m('tr', m('td', 'Shift + Click + Drag'), m('td', 'Pan left/right')),\n      ),\n      m('h2', 'Running commands from the viewer page'),\n      m(\n        'table',\n        m(\n          'tr',\n          m('td', keycap('>'), ' in the (empty) search box'),\n          m('td', 'Switch to command mode'),\n        ),\n      ),\n      m('h2', 'Making SQL queries from the viewer page'),\n      m(\n        'table',\n        m(\n          'tr',\n          m('td', keycap(':'), ' in the (empty) search box'),\n          m('td', 'Switch to query mode'),\n        ),\n        m('tr', m('td', keycap('Enter')), m('td', 'Execute query')),\n        m(\n          'tr',\n          m('td', keycap('Ctrl'), ' + ', keycap('Enter')),\n          m(\n            'td',\n            'Execute query and pin output ' +\n              '(output will not be replaced by regular query input)',\n          ),\n        ),\n      ),\n      m('h2', 'Making SQL queries from the query page'),\n      m(\n        'table',\n        m(\n          'tr',\n          m('td', keycap('Ctrl'), ' + ', keycap('Enter')),\n          m('td', 'Execute query'),\n        ),\n        m(\n          'tr',\n          m('td', keycap('Ctrl'), ' + ', keycap('Enter'), ' (with selection)'),\n          m('td', 'Execute selection'),\n        ),\n      ),\n      m('h2', 'Command Hotkeys'),\n      m(\n        'table',\n        AppImpl.instance.commands.commands\n          .filter(({defaultHotkey}) => defaultHotkey)\n          .sort((a, b) => a.name.localeCompare(b.name))\n          .map(({defaultHotkey, name}) => {\n            return m(\n              'tr',\n              m('td', m(HotkeyGlyphs, {hotkey: assertExists(defaultHotkey)})),\n              m('td', name),\n            );\n          }),\n      ),\n    );\n  }\n\n  private codeToKeycap(code: string): m.Children {\n    if (this.keyMap) {\n      return keycap(this.keyMap.get(code));\n    } else {\n      return keycap(m(Spinner));\n    }\n  }\n}\n"]}
/*!
 * rollup-plugin-re v1.0.7
 * (c) 2018 jetiny 86287344@qq.com
 * Release under the MIT License.
 */
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var rollupPluginutils = require('rollup-pluginutils');
var MagicString = _interopDefault(require('magic-string'));
var path = require('path');
var fs = _interopDefault(require('fs'));

/*
  {
    defines: {
      IS_MOCK: true,
    }
  }
 */
function parseDefines (defines, patterns) {
  if (isObject(defines)) {
    for (var defineName in defines) {
      if (!defines[defineName]) { // remove define blocks
        patterns.push({
          test: makeDefineRegexp(defineName),
          replace: ''
        });
      }
    }
  }
}

/*
  {
    replaces: {
      Host: `'localhost'`,        // replace
    }
  }
*/
function parseReplaces (replaces, patterns) {
  if (isObject(replaces)) {
    for (var replaceName in replaces) {
      patterns.push({
        test: replaceName,
        replace: replaces[replaceName]
      });
    }
  }
}

/*
  {
    patterns: [
      {
        include: 'String|Regexp',
        exclude: 'String|Regexp',
        match: 'String|Regexp|Function',

        test: 'String|RegExp',

        replace: 'String|Function',
        file: 'String',
        text: 'String',

        transform: 'Function'
      }
    ]
  }
*/
function parsePatterns (patterns, contents) {
  patterns.forEach(function (it) {
    if (it._pass) {
      return contents.push(it)
    }
    // filter
    it.filter = rollupPluginutils.createFilter(it.include, it.exclude);

    // match
    if (isFunction(it.match)) {
      it.matcher = it.match;
    } else if (isRegExp(it.match)) {
      it.matcher = it.match.test.bind(it.match);
    } else if (isString(it.match)) {
      it.matcher = rollupPluginutils.createFilter(it.match);
    }
    // test
    if (isRegExp(it.test)) {
      it.testIsRegexp = true;
    } else if (isString(it.test)) {
      it.testIsString = true;
    }
    // replace
    if (isString(it.replace)) {
      it.replaceIsString = true;
    } else if (isFunction(it.replace)) {
      it.replaceIsFunction = true;
    }
    // content by file
    if (isString(it.file)) {
      it.replaceContent = function (res) {
        var file = path.resolve(res.id, '../', it.file);
        try {
          res.content = fs.readFileSync(file).toString();
        } catch (err) {
          throw new Error('[rollup-plugin-re] can not readFile: ' + file)
        }
      };
    }
    // text
    if (isString(it.text)) {
      it.replaceContent = function (res) {
        res.content = it.text;
      };
    }
    contents.push(it);
  });
}

function verbose (opts, result, id) {
  if (opts.verbose) {
    if (isFunction(opts.verbose)) {
      opts.verbose(result, id);
    } else {
      console.log(("[" + result + "]"), id);
    }
  }
}

function replace (options) {
  if ( options === void 0 ) options = {};

  var filter = rollupPluginutils.createFilter(options.include, options.exclude);
  var contents = [];
  var patterns = options.patterns || (options.patterns = []);
  parseDefines(options.defines, patterns);
  parseReplaces(options.replaces, patterns);
  parsePatterns(patterns, contents);
  return {
    name: 're',
    transform: function transform (code, id) {
      if (!filter(id)) {
        verbose(options, 'exclude', id);
        return
      }
      if (!contents.length) {
        verbose(options, 'ignore', id);
        return
      }
      var hasReplacements = false;
      var magicString = new MagicString(code);
      contents.forEach(function (pattern) {
        if (!pattern.filter(id)) {
          return
        }
        if (pattern.matcher && !pattern.matcher(id)) {
          return
        }
        // replace content
        if (pattern.replaceContent) {
          var res = {
            id: id,
            code: code,
            magicString: magicString
          };
          pattern.replaceContent(res);
          if (isString(res.content) && res.content !== code) {
            hasReplacements = true;
            magicString = new MagicString(res.content);
            code = res.content;
          }
        }
        // transform
        if (isFunction(pattern.transform)) {
          var newCode = pattern.transform(code, id);
          if (isString(newCode) && newCode !== code) {
            hasReplacements = true;
            magicString = new MagicString(newCode);
            code = newCode;
          }
        }
        // test & replace
        if (pattern.testIsRegexp) {
          var match = pattern.test.exec(code);
          var start, end;
          while (match) {
            hasReplacements = true;
            start = match.index;
            end = start + match[0].length;
            var str = (void 0);
            if (pattern.replaceIsString) {
              // fill capture groups
              str = pattern.replace.replace(/\$\$|\$&|\$`|\$'|\$\d+/g, function (m) {
                if (m === '$$') {
                  return '$'
                }
                if (m === '$&') {
                  return match[0]
                }
                if (m === '$`') {
                  return code.slice(0, start)
                }
                if (m === "$'") {
                  return code.slice(end)
                }
                var n = +m.slice(1);
                if (n >= 1 && n < match.length) {
                  return match[n] || ''
                }
                return m
              });
            } else {
              str = pattern.replace.apply(null, match);
            }
            if (!isString(str)) {
              throw new Error('[rollup-plugin-re] replace function should return a string')
            }
            magicString.overwrite(start, end, str);
            match = pattern.test.global ? pattern.test.exec(code) : null;
          }
        } else if (pattern.testIsString) {
          var start$1, end$1;
          var len = pattern.test.length;
          var pos = code.indexOf(pattern.test);
          while (pos !== -1) {
            hasReplacements = true;
            start$1 = pos;
            end$1 = start$1 + len;
            if (pattern.replaceIsString) {
              magicString.overwrite(start$1, end$1, pattern.replace);
            } else if (pattern.replaceIsFunction) {
              var str$1 = pattern.replace(id);
              if (!isString(str$1)) {
                throw new Error('[rollup-plugin-re] replace function should return a string')
              }
              magicString.overwrite(start$1, end$1, str$1);
            }
            pos = code.indexOf(pattern.test, pos + 1);
          }
        }
      });

      if (!hasReplacements) {
        return
      }
      verbose(options, 'replace', id);
      var result = { code: magicString.toString() };
      if (options.sourceMap !== false) {
        result.map = magicString.generateMap({ hires: true });
      }
      return result
    }
  }
}

var source = /\/\/\s#if\sIS_DEFINE(.*)([\s\S]*?)\/\/\s#endif/g.source;

function makeDefineRegexp (text) {
  return new RegExp(source.replace('IS_DEFINE', text), 'g')
}

function isRegExp (re) {
  return Object.prototype.toString.call(re) === '[object RegExp]'
}

function isString (str) {
  return typeof str === 'string'
}

function isFunction (val) {
  return typeof val === 'function'
}

function isObject (val) {
  return val !== null && Object.prototype.toString.call(val) === '[object Object]'
}

module.exports = replace;

{"version":3,"file":"hotkey_context.js","sourceRoot":"","sources":["../../../src/widgets/hotkey_context.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AAGjC,6CAAoD;AACpD,+BAAyC;AAWzC,MAAa,aAAa;IAChB,OAAO,CAAkB;IAEjC,IAAI,CAAC,KAAkC;QACrC,OAAO,KAAK,CAAC,QAAQ,CAAC;IACxB,CAAC;IAED,QAAQ,CAAC,KAAqC;QAC5C,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,KAAqC;QAC5C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;IACrC,CAAC;IAED,QAAQ,CAAC,MAAsC;QAC7C,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;IAC3B,CAAC;IAED,6EAA6E;IAC7E,8EAA8E;IAC9E,kDAAkD;IAClD,yEAAyE;IACjE,SAAS,GAAG,CAAC,CAAQ,EAAE,EAAE;QAC/B,4EAA4E;QAC5E,IAAI,CAAC,CAAC,gBAAgB;YAAE,OAAO;QAE/B,IAAI,CAAC,YAAY,aAAa,EAAE,CAAC;YAC/B,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,EAAC,QAAQ,EAAE,MAAM,EAAC,EAAE,EAAE;gBAC3C,IAAI,IAAA,qBAAW,EAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;oBAC3B,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,QAAQ,EAAE,CAAC;oBACX,IAAA,wBAAkB,EAAC,OAAO,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;CACH;AAvCD,sCAuCC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {checkHotkey, Hotkey} from '../base/hotkeys';\nimport {scheduleFullRedraw} from './raf';\n\nexport interface HotkeyConfig {\n  hotkey: Hotkey;\n  callback: () => void;\n}\n\nexport interface HotkeyContextAttrs {\n  hotkeys: HotkeyConfig[];\n}\n\nexport class HotkeyContext implements m.ClassComponent<HotkeyContextAttrs> {\n  private hotkeys?: HotkeyConfig[];\n\n  view(vnode: m.Vnode<HotkeyContextAttrs>): m.Children {\n    return vnode.children;\n  }\n\n  oncreate(vnode: m.VnodeDOM<HotkeyContextAttrs>) {\n    document.addEventListener('keydown', this.onKeyDown);\n    this.hotkeys = vnode.attrs.hotkeys;\n  }\n\n  onupdate(vnode: m.VnodeDOM<HotkeyContextAttrs>) {\n    this.hotkeys = vnode.attrs.hotkeys;\n  }\n\n  onremove(_vnode: m.VnodeDOM<HotkeyContextAttrs>) {\n    document.removeEventListener('keydown', this.onKeyDown);\n    this.hotkeys = undefined;\n  }\n\n  // Due to a bug in chrome, we get onKeyDown events fired where the payload is\n  // not a KeyboardEvent when selecting an item from an autocomplete suggestion.\n  // See https://issues.chromium.org/issues/41425904\n  // Thus, we can't assume we get an KeyboardEvent and must check manually.\n  private onKeyDown = (e: Event) => {\n    // Find out whether the event has already been handled further up the chain.\n    if (e.defaultPrevented) return;\n\n    if (e instanceof KeyboardEvent) {\n      this.hotkeys?.forEach(({callback, hotkey}) => {\n        if (checkHotkey(hotkey, e)) {\n          e.preventDefault();\n          callback();\n          scheduleFullRedraw('force');\n        }\n      });\n    }\n  };\n}\n"]}
{"version":3,"file":"tag_input.js","sourceRoot":"","sources":["../../../src/widgets/tag_input.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {HTMLFocusableAttrs} from './common';\nimport {Icon} from './icon';\nimport {findRef} from '../base/dom_utils';\n\nexport interface TagInputAttrs extends HTMLFocusableAttrs {\n  value?: string;\n  onChange?: (text: string) => void;\n  tags: ReadonlyArray<string>;\n  onTagAdd: (text: string) => void;\n  onTagRemove: (index: number) => void;\n  placeholder?: string;\n}\n\nconst INPUT_REF = 'input';\n\n/**\n * TagInput displays Tag elements inside an input, followed by an interactive\n * text input. The container is styled to look like a TextInput, but the actual\n * editable element appears after the last tag. Clicking anywhere on the\n * container will focus the text input.\n *\n * To use this widget, the user must provide the tags as a list of strings, and\n * provide callbacks which are called when the user modifies the list of tags,\n * either adding a new tag by typing and pressing enter, or removing a tag by\n * clicking the close button on a tag.\n *\n * The text value can be optionally be controlled, which allows access to this\n * value from outside the widget.\n *\n * Uncontrolled example:\n *\n * In this example, we only have access to the list of tags from outside.\n *\n * ```\n * const tags = [];\n *\n * m(TagInput, {\n *   tags,\n *   onTagAdd: (tag) => tags.push(tag),\n *   onTagRemove: (index) => tags.splice(index),\n * });\n * ```\n *\n * Controlled example:\n *\n * In this example we have complete control over the value in the text field.\n *\n * ```\n * const tags = [];\n * let value = '';\n *\n * m(TagInput, {\n *   tags,\n *   onTagAdd: (tag) => {\n *     tags.push(tag);\n *     value = ''; // The value is controlled so we must manually clear it here\n *   },\n *   onTagRemove: (index) => tags.splice(index),\n *   value,\n *   onChange: (x) => value = x,\n * });\n * ```\n *\n */\n\nexport class TagInput implements m.ClassComponent<TagInputAttrs> {\n  view({attrs}: m.CVnode<TagInputAttrs>) {\n    const {\n      value,\n      onChange,\n      tags,\n      onTagAdd,\n      onTagRemove,\n      onfocus,\n      onblur,\n      placeholder,\n      ...htmlAttrs\n    } = attrs;\n\n    const valueIsControlled = value !== undefined;\n\n    return m(\n      '.pf-tag-input',\n      {\n        onclick: (ev: PointerEvent) => {\n          const target = ev.currentTarget as HTMLElement;\n          const inputElement = findRef(target, INPUT_REF);\n          if (inputElement) {\n            (inputElement as HTMLInputElement).focus();\n          }\n        },\n        ...htmlAttrs,\n      },\n      tags.map((tag, index) => renderTag(tag, () => onTagRemove(index))),\n      m('input', {\n        ref: INPUT_REF,\n        value,\n        placeholder,\n        onkeydown: (ev: KeyboardEvent) => {\n          if (ev.key === 'Enter') {\n            const el = ev.target as HTMLInputElement;\n            if (el.value.trim() !== '') {\n              onTagAdd(el.value);\n              if (!valueIsControlled) {\n                el.value = '';\n              }\n            }\n          } else if (ev.key === 'Backspace') {\n            const el = ev.target as HTMLInputElement;\n            if (el.value !== '') return;\n            if (tags.length === 0) return;\n\n            const lastTagIndex = tags.length - 1;\n            onTagRemove(lastTagIndex);\n          }\n        },\n        oninput: (ev: InputEvent) => {\n          const el = ev.target as HTMLInputElement;\n          onChange?.(el.value);\n        },\n        onfocus,\n        onblur,\n      }),\n    );\n  }\n}\n\nfunction renderTag(text: string, onRemove: () => void): m.Children {\n  return m(\n    'span.pf-tag',\n    text,\n    m(Icon, {\n      icon: 'close',\n      onclick: () => {\n        onRemove();\n      },\n    }),\n  );\n}\n"]}
{"version":3,"file":"split_panel.js","sourceRoot":"","sources":["../../../src/widgets/split_panel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {DisposableStack} from '../base/disposable_stack';\nimport {toHTMLElement} from '../base/dom_utils';\nimport {DragGestureHandler} from '../base/drag_gesture_handler';\nimport {assertExists, assertUnreachable} from '../base/logging';\nimport {Button, ButtonBar} from './button';\n\nexport enum SplitPanelDrawerVisibility {\n  VISIBLE,\n  FULLSCREEN,\n  COLLAPSED,\n}\n\nexport interface SplitPanelAttrs {\n  // Content to display on the handle.\n  readonly handleContent?: m.Children;\n\n  // Content to display inside the drawer.\n  readonly drawerContent?: m.Children;\n\n  // Whether the drawer is currently visible or not (when in controlled mode).\n  readonly visibility?: SplitPanelDrawerVisibility;\n\n  // Extra classes applied to the root element.\n  readonly className?: string;\n\n  // What height should the drawer be initially?\n  readonly startingHeight?: number;\n\n  // Called when the drawer visibility is changed.\n  onVisibilityChange?(visibility: SplitPanelDrawerVisibility): void;\n}\n\n/**\n * A container that fills its parent container, splitting into two adjustable\n * horizontal sections. The upper half is reserved for the main content and any\n * children are placed here, and the lower half should be considered a drawer,\n * the `drawerContent` attribute can be used to define what goes here.\n *\n * The drawer features a handle that can be dragged to adjust the height of the\n * drawer, and also features buttons to maximize and minimise the drawer.\n *\n * Content can also optionally be displayed on the handle itself to the left of\n * the buttons.\n *\n * The layout looks like this:\n *\n * ┌──────────────────────────────────────────────────────────────────┐\n * │pf-split-panel                                                    │\n * │┌────────────────────────────────────────────────────────────────┐|\n * ││pf-split-panel__main                                            ││\n * |└────────────────────────────────────────────────────────────────┘|\n * │┌────────────────────────────────────────────────────────────────┐|\n * ││pf-split-panel__handle                                          ││\n * │|┌─────────────────────────────────┐┌───────────────────────────┐||\n * |||pf-split-panel__handle-content   ||pf-button-bar              |||\n * ||└─────────────────────────────────┘└───────────────────────────┘||\n * |└────────────────────────────────────────────────────────────────┘|\n * │┌────────────────────────────────────────────────────────────────┐|\n * ││pf-split-panel__drawer                                          ││\n * |└────────────────────────────────────────────────────────────────┘|\n * └──────────────────────────────────────────────────────────────────┘\n */\nexport class SplitPanel implements m.ClassComponent<SplitPanelAttrs> {\n  private readonly trash = new DisposableStack();\n\n  // The actual height of the vdom node. It matches resizableHeight if VISIBLE,\n  // 0 if COLLAPSED, fullscreenHeight if FULLSCREEN.\n  private height = 0;\n\n  // The height when the panel is 'VISIBLE'.\n  private resizableHeight: number;\n\n  // The height when the panel is 'FULLSCREEN'.\n  private fullscreenHeight = 0;\n\n  // Current visibility state (if not controlled).\n  private visibility = SplitPanelDrawerVisibility.VISIBLE;\n\n  constructor({attrs}: m.CVnode<SplitPanelAttrs>) {\n    this.resizableHeight = attrs.startingHeight ?? 100;\n  }\n\n  view({attrs, children}: m.CVnode<SplitPanelAttrs>) {\n    const {\n      visibility = this.visibility,\n      className,\n      handleContent,\n      onVisibilityChange,\n      drawerContent,\n    } = attrs;\n\n    switch (visibility) {\n      case SplitPanelDrawerVisibility.VISIBLE:\n        this.height = Math.min(\n          Math.max(this.resizableHeight, 0),\n          this.fullscreenHeight,\n        );\n        break;\n      case SplitPanelDrawerVisibility.FULLSCREEN:\n        this.height = this.fullscreenHeight;\n        break;\n      case SplitPanelDrawerVisibility.COLLAPSED:\n        this.height = 0;\n        break;\n    }\n\n    return m(\n      '.pf-split-panel',\n      {\n        className,\n      },\n      // Note: Using BEM class naming conventions: See https://getbem.com/\n      m('.pf-split-panel__main', children),\n      m(\n        '.pf-split-panel__handle',\n        m('.pf-split-panel__handle-content', handleContent),\n        this.renderTabResizeButtons(visibility, onVisibilityChange),\n      ),\n      m(\n        '.pf-split-panel__drawer',\n        {\n          style: {height: `${this.height}px`},\n        },\n        drawerContent,\n      ),\n    );\n  }\n\n  oncreate(vnode: m.VnodeDOM<SplitPanelAttrs, this>) {\n    let dragStartY = 0;\n    let heightWhenDragStarted = 0;\n\n    const handle = toHTMLElement(\n      assertExists(vnode.dom.querySelector('.pf-split-panel__handle')),\n    );\n\n    this.trash.use(\n      new DragGestureHandler(\n        handle,\n        /* onDrag */ (_x, y) => {\n          const deltaYSinceDragStart = dragStartY - y;\n          this.resizableHeight = heightWhenDragStarted + deltaYSinceDragStart;\n          m.redraw();\n        },\n        /* onDragStarted */ (_x, y) => {\n          this.resizableHeight = this.height;\n          heightWhenDragStarted = this.height;\n          dragStartY = y;\n          this.updatePanelVisibility(\n            SplitPanelDrawerVisibility.VISIBLE,\n            vnode.attrs.onVisibilityChange,\n          );\n        },\n        /* onDragFinished */ () => {},\n      ),\n    );\n\n    const parent = assertExists(vnode.dom.parentElement);\n    this.fullscreenHeight = parent.clientHeight;\n    const resizeObs = new ResizeObserver(() => {\n      this.fullscreenHeight = parent.clientHeight;\n      m.redraw();\n    });\n    resizeObs.observe(parent);\n    this.trash.defer(() => resizeObs.disconnect());\n  }\n\n  onremove() {\n    this.trash.dispose();\n  }\n\n  private renderTabResizeButtons(\n    visibility: SplitPanelDrawerVisibility,\n    setVisibility?: (visibility: SplitPanelDrawerVisibility) => void,\n  ): m.Child {\n    const isClosed = visibility === SplitPanelDrawerVisibility.COLLAPSED;\n    return m(\n      ButtonBar,\n      m(Button, {\n        title: 'Open fullscreen',\n        disabled: visibility === SplitPanelDrawerVisibility.FULLSCREEN,\n        icon: 'vertical_align_top',\n        compact: true,\n        onclick: () => {\n          this.updatePanelVisibility(\n            SplitPanelDrawerVisibility.FULLSCREEN,\n            setVisibility,\n          );\n        },\n      }),\n      m(Button, {\n        onclick: () => {\n          this.updatePanelVisibility(\n            toggleVisibility(visibility),\n            setVisibility,\n          );\n        },\n        title: isClosed ? 'Show panel' : 'Hide panel',\n        icon: isClosed ? 'keyboard_arrow_up' : 'keyboard_arrow_down',\n        compact: true,\n      }),\n    );\n  }\n\n  private updatePanelVisibility(\n    visibility: SplitPanelDrawerVisibility,\n    setVisibility?: (visibility: SplitPanelDrawerVisibility) => void,\n  ) {\n    this.visibility = visibility;\n    setVisibility?.(visibility);\n  }\n}\n\nexport function toggleVisibility(visibility: SplitPanelDrawerVisibility) {\n  switch (visibility) {\n    case SplitPanelDrawerVisibility.COLLAPSED:\n    case SplitPanelDrawerVisibility.FULLSCREEN:\n      return SplitPanelDrawerVisibility.VISIBLE;\n    case SplitPanelDrawerVisibility.VISIBLE:\n      return SplitPanelDrawerVisibility.COLLAPSED;\n    default:\n      assertUnreachable(visibility);\n  }\n}\n"]}
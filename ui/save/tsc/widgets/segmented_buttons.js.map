{"version":3,"file":"segmented_buttons.js","sourceRoot":"","sources":["../../../src/widgets/segmented_buttons.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,qCAAgC;AAgChC,MAAa,gBAAgB;IAG3B,IAAI,CAAC,EAAC,KAAK,EAAkC;QAC3C,MAAM,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG,SAAS,EAAC,GACvE,KAAK,CAAC;QACR,OAAO,IAAA,iBAAC,EACN,uBAAuB,EACvB,SAAS,EACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACnB,IAAA,iBAAC,EAAC,eAAM,EAAE;YACR,GAAG,CAAC;YACJ,QAAQ,EAAE,QAAQ;YAClB,MAAM,EAAE,CAAC,KAAK,cAAc;YAC5B,OAAO,EAAE,GAAG,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;SACnC,CAAC,CACH,CACF,CAAC;IACJ,CAAC;CACF;AAnBD,4CAmBC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Button} from './button';\nimport {HTMLAttrs} from './common';\n\ninterface IconOption {\n  // Icon buttons require an icon.\n  readonly icon: string;\n}\n\ninterface LabelOption {\n  // Label buttons require a label.\n  readonly label: string;\n  // Label buttons can have an optional icon.\n  readonly icon?: string;\n}\n\ntype Option = LabelOption | IconOption;\n\nexport interface SegmentedButtonsAttrs extends HTMLAttrs {\n  // Options for segmented buttons.\n  readonly options: ReadonlyArray<Option>;\n\n  // The index of the selected button.\n  readonly selectedOption: number;\n\n  // Callback function which is called every time a\n  readonly onOptionSelected: (num: number) => void;\n\n  // Whether the segmented buttons is disabled.\n  // false by default.\n  readonly disabled?: boolean;\n}\n\nexport class SegmentedButtons\n  implements m.ClassComponent<SegmentedButtonsAttrs>\n{\n  view({attrs}: m.CVnode<SegmentedButtonsAttrs>) {\n    const {options, selectedOption, disabled, onOptionSelected, ...htmlAttrs} =\n      attrs;\n    return m(\n      '.pf-segmented-buttons',\n      htmlAttrs,\n      options.map((o, i) =>\n        m(Button, {\n          ...o,\n          disabled: disabled,\n          active: i === selectedOption,\n          onclick: () => onOptionSelected(i),\n        }),\n      ),\n    );\n  }\n}\n"]}
{"version":3,"file":"tabbed_split_panel.js","sourceRoot":"","sources":["../../../src/widgets/tabbed_split_panel.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,+CAAqE;AACrE,yDAA2C;AAC3C,qCAAgC;AA8ChC;;;GAGG;AACH,MAAa,gBAAgB;IAGnB,aAAa,CAAU;IAE/B,IAAI,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAkC;QACrD,MAAM,EACJ,aAAa,GAAG,IAAI,CAAC,aAAa,EAClC,WAAW,EACX,iBAAiB,EAAE,WAAW,EAC9B,cAAc,EACd,IAAI,EACJ,UAAU,EACV,kBAAkB,EAClB,SAAS,GACV,GAAG,KAAK,CAAC;QACV,OAAO,IAAA,iBAAC,EACN,wBAAU,EACV;YACE,SAAS;YACT,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAC9B,IAAA,iBAAC,EAAC,oBAAI,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,GAAG,KAAK,aAAa,EAAC,EAAE,GAAG,CAAC,OAAO,CAAC,CACxD;YACD,cAAc;YACd,UAAU;YACV,kBAAkB;YAClB,aAAa,EAAE,IAAA,iBAAC,EACd,gBAAgB,EAChB,WAAW,EACX,IAAA,iBAAC,EACC,sBAAsB,EACtB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;gBACf,MAAM,EAAC,GAAG,EAAE,cAAc,GAAG,KAAK,EAAC,GAAG,GAAG,CAAC;gBAC1C,OAAO,IAAA,iBAAC,EACN,qBAAqB,EACrB;oBACE,MAAM,EAAE,aAAa,KAAK,GAAG;oBAC7B,GAAG;oBACH,4BAA4B;oBAC5B,OAAO,EAAE,GAAG,EAAE;wBACZ,WAAW,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACvB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC;oBAC/B,CAAC;oBACD,wBAAwB;oBACxB,UAAU,EAAE,GAAG,EAAE;wBACf,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;oBAClB,CAAC;iBACF,EACD,IAAA,iBAAC,EAAC,+BAA+B,EAAE,GAAG,CAAC,KAAK,CAAC,EAC7C,cAAc;oBACZ,IAAA,iBAAC,EAAC,eAAM,EAAE;wBACR,OAAO,EAAE,CAAC,CAAa,EAAE,EAAE;4BACzB,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC;4BAChB,CAAC,CAAC,eAAe,EAAE,CAAC;wBACtB,CAAC;wBACD,OAAO,EAAE,IAAI;wBACb,IAAI,EAAE,OAAO;qBACd,CAAC,CACL,CAAC;YACJ,CAAC,CAAC,CACH,CACF;SACF,EACD,QAAQ,CACT,CAAC;IACJ,CAAC;CACF;AAlED,4CAkEC","sourcesContent":["// Copyright (C) 2024 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {SplitPanelDrawerVisibility, SplitPanel} from './split_panel';\nimport {Gate} from '../base/mithril_utils';\nimport {Button} from './button';\n\nexport interface Tab {\n  // A unique key for this tab.\n  readonly key: string;\n\n  // The title of the tab to show on the tab strip.\n  readonly title: string;\n\n  // The content of this tab to show on the tab drawer.\n  readonly content: m.Children;\n\n  // Whether we have a close button or not on the tab handle.\n  readonly hasCloseButton?: boolean;\n\n  // Called when the tab is closed via its close button or via middle click on\n  // the tab handle.\n  onClose?(): void;\n}\n\nexport interface TabbedSplitPanelAttrs {\n  // The list of tabs.\n  readonly tabs: ReadonlyArray<Tab>;\n\n  // The key of the currently showing tab.\n  readonly currentTabKey?: string;\n\n  // Content to put to the left of the tabs on the split handle.\n  readonly leftHandleContent?: m.Children;\n\n  // Whether the drawer is currently visible or not (when in controlled mode).\n  readonly visibility?: SplitPanelDrawerVisibility;\n\n  // Extra classes applied to the root element.\n  readonly className?: string;\n\n  // What height should the drawer be initially?\n  readonly startingHeight?: number;\n\n  // Called when the active tab is changed.\n  onTabChange?(key: string): void;\n\n  // Called when the drawer visibility is changed.\n  onVisibilityChange?(visibility: SplitPanelDrawerVisibility): void;\n}\n\n/**\n * An extended SplitPanel with tabs which are displayed in a tab strip along the\n * handle, and the active tab's content in shown in the drawer.\n */\nexport class TabbedSplitPanel\n  implements m.ClassComponent<TabbedSplitPanelAttrs>\n{\n  private currentTabKey?: string;\n\n  view({attrs, children}: m.CVnode<TabbedSplitPanelAttrs>) {\n    const {\n      currentTabKey = this.currentTabKey,\n      onTabChange,\n      leftHandleContent: leftContent,\n      startingHeight,\n      tabs,\n      visibility,\n      onVisibilityChange,\n      className,\n    } = attrs;\n    return m(\n      SplitPanel,\n      {\n        className,\n        drawerContent: tabs.map((tab) =>\n          m(Gate, {open: tab.key === currentTabKey}, tab.content),\n        ),\n        startingHeight,\n        visibility,\n        onVisibilityChange,\n        handleContent: m(\n          '.pf-tab-handle',\n          leftContent,\n          m(\n            '.pf-tab-handle__tabs',\n            tabs.map((tab) => {\n              const {key, hasCloseButton = false} = tab;\n              return m(\n                '.pf-tab-handle__tab',\n                {\n                  active: currentTabKey === key,\n                  key,\n                  // Click tab to switch to it\n                  onclick: () => {\n                    onTabChange?.(tab.key);\n                    this.currentTabKey = tab.key;\n                  },\n                  // Middle click to close\n                  onauxclick: () => {\n                    tab.onClose?.();\n                  },\n                },\n                m('span.pf-tab-handle__tab-title', tab.title),\n                hasCloseButton &&\n                  m(Button, {\n                    onclick: (e: MouseEvent) => {\n                      tab.onClose?.();\n                      e.stopPropagation();\n                    },\n                    compact: true,\n                    icon: 'close',\n                  }),\n              );\n            }),\n          ),\n        ),\n      },\n      children,\n    );\n  }\n}\n"]}
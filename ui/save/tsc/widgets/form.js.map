{"version":3,"file":"form.js","sourceRoot":"","sources":["../../../src/widgets/form.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,qCAAgC;AAEhC,mCAA8B;AAC9B,8CAAyC;AA6BzC,8EAA8E;AAC9E,0EAA0E;AAC1E,6EAA6E;AAC7E,sCAAsC;AACtC,iCAAiC;AACjC,MAAa,IAAI;IACf,IAAI,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAsB;QACzC,MAAM,EACJ,UAAU,GAAG,SAAS,EACtB,WAAW,GAAG,QAAQ,EACtB,WAAW,EACX,UAAU,EACV,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC,EACnB,cAAc,GAAG,IAAI,EACrB,GAAG,SAAS,EACb,GAAG,KAAK,CAAC;QAEV,OAAO,IAAA,iBAAC,EACN,cAAc,EACd,SAAS,EACT,QAAQ,EACR,IAAA,iBAAC,EACC,qBAAqB,EACrB,IAAA,iBAAC,EAAC,eAAM,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,WAAW;YAClB,SAAS,EAAE,UAAU;YACrB,SAAS,EAAE,aAAK,CAAC,yBAAyB;YAC1C,MAAM,EAAE,eAAM,CAAC,OAAO;YACtB,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;gBACpB,cAAc,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;gBACrC,QAAQ,EAAE,CAAC;YACb,CAAC;SACF,CAAC;QACF,iEAAiE;QACjE,WAAW;YACT,IAAA,iBAAC,EAAC,eAAM,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,WAAW;gBAClB,SAAS,EAAE,aAAK,CAAC,yBAAyB;aAC3C,CAAC;QACJ,0CAA0C;QAC1C,UAAU;YACR,IAAA,iBAAC,EAAC,eAAM,EAAE;gBACR,KAAK,EAAE,UAAU;gBACjB,IAAI,EAAE,OAAO;aACd,CAAC,CACL,CACF,CAAC;IACJ,CAAC;CACF;AA7CD,oBA6CC;AAED,6EAA6E;AAC7E,yEAAyE;AACzE,WAAW;AACX,EAAE;AACF,wEAAwE;AACxE,gDAAgD;AAChD,EAAE;AACF,+EAA+E;AAC/E,2DAA2D;AAC3D,MAAa,SAAS;IACpB,IAAI,CAAC,EAAC,KAAK,EAAE,QAAQ,EAA2B;QAC9C,OAAO,IAAA,iBAAC,EAAC,qBAAqB,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;CACF;AAJD,8BAIC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {Button} from './button';\nimport {HTMLAttrs, HTMLLabelAttrs} from './common';\nimport {Popup} from './popup';\nimport {Intent} from '../widgets/common';\n\nexport interface FormAttrs extends HTMLAttrs {\n  // Text to show on the \"submit\" button.\n  // Defaults to \"Submit\".\n  submitLabel?: string;\n\n  // Icon to show on the \"submit\" button.\n  submitIcon?: string;\n\n  // Text to show on the \"cancel\" button.\n  // No button is rendered if this value is omitted.\n  cancelLabel?: string;\n\n  // Text to show on the \"reset\" button.\n  // No button is rendered if this value is omitted.\n  resetLabel?: string;\n\n  // Action to take when the form is submitted either by the enter key or\n  // the submit button.\n  onSubmit?: () => void;\n\n  // Action to take when the form is cancelled.\n  onCancel?: () => void;\n\n  // Prevent default form action on submit. Defaults to true.\n  preventDefault?: boolean;\n}\n\n// A simple wrapper around a <form> element providing some opinionated default\n// buttons and form behavior. Designed to be used with FormLabel elements.\n// Can be used in popups and popup menus and pressing either of the cancel or\n// submit buttons dismisses the popup.\n// See Widgets page for examples.\nexport class Form implements m.ClassComponent<FormAttrs> {\n  view({attrs, children}: m.CVnode<FormAttrs>) {\n    const {\n      submitIcon = undefined,\n      submitLabel = 'Submit',\n      cancelLabel,\n      resetLabel,\n      onSubmit = () => {},\n      preventDefault = true,\n      ...htmlAttrs\n    } = attrs;\n\n    return m(\n      'form.pf-form',\n      htmlAttrs,\n      children,\n      m(\n        '.pf-form-button-bar',\n        m(Button, {\n          type: 'submit',\n          label: submitLabel,\n          rightIcon: submitIcon,\n          className: Popup.DISMISS_POPUP_GROUP_CLASS,\n          intent: Intent.Primary,\n          onclick: (e: Event) => {\n            preventDefault && e.preventDefault();\n            onSubmit();\n          },\n        }),\n        // This cancel button just closes the popup if we are inside one.\n        cancelLabel &&\n          m(Button, {\n            type: 'button',\n            label: cancelLabel,\n            className: Popup.DISMISS_POPUP_GROUP_CLASS,\n          }),\n        // This reset button just clears the form.\n        resetLabel &&\n          m(Button, {\n            label: resetLabel,\n            type: 'reset',\n          }),\n      ),\n    );\n  }\n}\n\n// A simple wrapper around a <label> element. Designed to be used within Form\n// widgets in combination with input controls to provide consistent label\n// styling.\n//\n// Like normal labels, FormLabels provide a name for an input while also\n// improving their hit area which improves a11y.\n//\n// Labels are bound to inputs by placing the input inside the FormLabel widget,\n// or by referencing the input's \"id\" tag with a \"for\" tag.\nexport class FormLabel implements m.ClassComponent<HTMLLabelAttrs> {\n  view({attrs, children}: m.CVnode<HTMLLabelAttrs>) {\n    return m('label.pf-form-label', attrs, children);\n  }\n}\n"]}
{"version":3,"file":"menu.js","sourceRoot":"","sources":["../../../src/widgets/menu.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {classNames} from '../base/classnames';\nimport {hasChildren} from '../base/mithril_utils';\nimport {HTMLAttrs} from './common';\nimport {Icon} from './icon';\nimport {Popup, PopupAttrs, PopupPosition} from './popup';\n\nexport interface MenuItemAttrs extends HTMLAttrs {\n  // Text to display on the menu button.\n  label: string;\n  // Optional left icon.\n  icon?: string;\n  // Optional right icon.\n  rightIcon?: string;\n  // Make the item appear greyed out block any interaction with it. No events\n  // will be fired.\n  // Defaults to false.\n  disabled?: boolean;\n  // Always show the button as if the \"active\" pseudo class were applied, which\n  // makes the button look permanently pressed.\n  // Useful for when the button represents some toggleable state, such as\n  // showing/hiding a popup menu.\n  // Defaults to false.\n  active?: boolean;\n  // If this menu item is a descendant of a popup, this setting means that\n  // clicking it will result in the popup being dismissed.\n  // Defaults to false when menuitem has children, true otherwise.\n  closePopupOnClick?: boolean;\n}\n\n// An interactive menu element with an icon.\n// If this node has children, a nested popup menu will be rendered.\nexport class MenuItem implements m.ClassComponent<MenuItemAttrs> {\n  view(vnode: m.CVnode<MenuItemAttrs>): m.Children {\n    if (hasChildren(vnode)) {\n      return this.renderNested(vnode);\n    } else {\n      return this.renderSingle(vnode);\n    }\n  }\n\n  private renderNested({attrs, children}: m.CVnode<MenuItemAttrs>) {\n    const {\n      rightIcon = 'chevron_right',\n      closePopupOnClick = false,\n      ...rest\n    } = attrs;\n\n    return m(\n      PopupMenu2,\n      {\n        popupPosition: PopupPosition.RightStart,\n        trigger: m(MenuItem, {\n          rightIcon: rightIcon,\n          closePopupOnClick,\n          ...rest,\n        }),\n        showArrow: false,\n        createNewGroup: false,\n        edgeOffset: 5, // Adjust for popup padding & border.\n      },\n      children,\n    );\n  }\n\n  private renderSingle({attrs}: m.CVnode<MenuItemAttrs>) {\n    const {\n      label,\n      icon,\n      rightIcon,\n      disabled,\n      active,\n      closePopupOnClick = true,\n      className,\n      ...htmlAttrs\n    } = attrs;\n\n    const classes = classNames(\n      active && 'pf-active',\n      !disabled && closePopupOnClick && Popup.DISMISS_POPUP_GROUP_CLASS,\n      className,\n    );\n\n    return m(\n      'button.pf-menu-item' + (disabled ? '[disabled]' : ''),\n      {\n        ...htmlAttrs,\n        className: classes,\n      },\n      icon && m(Icon, {className: 'pf-left-icon', icon}),\n      rightIcon && m(Icon, {className: 'pf-right-icon', icon: rightIcon}),\n      label,\n    );\n  }\n}\n\n// An element which shows a dividing line between menu items.\nexport class MenuDivider implements m.ClassComponent {\n  view() {\n    return m('.pf-menu-divider');\n  }\n}\n\n// A siple container for a menu.\n// The menu contents are passed in as children, and are typically MenuItems or\n// MenuDividers, but really they can be any Mithril component.\nexport class Menu implements m.ClassComponent<HTMLAttrs> {\n  view({attrs, children}: m.CVnode<HTMLAttrs>) {\n    return m('.pf-menu', attrs, children);\n  }\n}\n\ninterface PopupMenu2Attrs extends PopupAttrs {\n  // The trigger is mithril component which is used to toggle the popup when\n  // clicked, and provides the anchor on the page which the popup shall hover\n  // next to, and to which the popup's arrow shall point. The popup shall move\n  // around the page with this component, as if attached to it.\n  // This trigger can be any mithril component, but it is typically a Button,\n  // an Icon, or some other interactive component.\n  // Beware this element will have its `onclick`, `ref`, and `active` attributes\n  // overwritten.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  trigger: m.Vnode<any, any>;\n  // Which side of the trigger to place to popup.\n  // Defaults to \"bottom\".\n  popupPosition?: PopupPosition;\n  // Whether we should show the little arrow pointing to the trigger.\n  // Defaults to true.\n  showArrow?: boolean;\n  // Whether this popup should form a new popup group.\n  // When nesting popups, grouping controls how popups are closed.\n  // When closing popups via the Escape key, each group is closed one by one,\n  // starting at the topmost group in the stack.\n  // When using a magic button to close groups (see DISMISS_POPUP_GROUP_CLASS),\n  // only the group in which the button lives and it's children will be closed.\n  // Defaults to true.\n  createNewGroup?: boolean;\n}\n\n// A combination of a Popup and a Menu component.\n// The menu contents are passed in as children, and are typically MenuItems or\n// MenuDividers, but really they can be any Mithril component.\nexport class PopupMenu2 implements m.ClassComponent<PopupMenu2Attrs> {\n  view({attrs, children}: m.CVnode<PopupMenu2Attrs>) {\n    const {\n      trigger,\n      popupPosition = PopupPosition.Bottom,\n      ...popupAttrs\n    } = attrs;\n\n    return m(\n      Popup,\n      {\n        trigger,\n        position: popupPosition,\n        className: 'pf-popup-menu',\n        ...popupAttrs,\n      },\n      m(Menu, children),\n    );\n  }\n}\n"]}
{"version":3,"file":"portal.js","sourceRoot":"","sources":["../../../src/widgets/portal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\n\ntype Style = string | Partial<CSSStyleDeclaration>;\n\nexport interface MountOptions {\n  // Optionally specify an element in which to place our portal.\n  // Defaults to body.\n  container?: Element;\n}\n\nexport interface PortalAttrs {\n  // Space delimited class list forwarded to our portal element.\n  className?: string;\n  // Inline styles forwarded to our portal element.\n  style?: Style;\n  // Called before our portal is created, allowing customization of where in the\n  // DOM the portal is mounted.\n  // The dom parameter is a dummy element representing where the portal would be\n  // located if it were rendered into the normal tree hierarchy.\n  onBeforeContentMount?: (dom: Element) => MountOptions;\n  // Called after our portal is created and its content rendered.\n  onContentMount?: (portalElement: HTMLElement) => void;\n  // Called after our portal's content is updated.\n  onContentUpdate?: (portalElement: HTMLElement) => void;\n  // Called before our portal is removed.\n  onContentUnmount?: (portalElement: HTMLElement) => void;\n}\n\n// A portal renders children into a a div outside of the normal hierarchy of the\n// parent component, usually in order to stack elements on top of others.\n// Useful for creating overlays, dialogs, and popups.\nexport class Portal implements m.ClassComponent<PortalAttrs> {\n  private portalElement?: HTMLElement;\n  private containerElement?: Element;\n  private contentComponent: m.Component;\n\n  constructor({children}: m.CVnode<PortalAttrs>) {\n    // Create a temporary component that we can mount in oncreate, and unmount\n    // in onremove, but inject the new portal content (children) into it each\n    // render cycle. This is initialized here rather than in oncreate to avoid\n    // having to make it optional or use assertExists().\n    this.contentComponent = {view: () => children};\n  }\n\n  view() {\n    // Dummy element renders nothing but permits DOM access in lifecycle hooks.\n    return m('span', {style: {display: 'none'}});\n  }\n\n  oncreate({attrs, dom}: m.CVnodeDOM<PortalAttrs>) {\n    const {\n      onContentMount = () => {},\n      onBeforeContentMount = (): MountOptions => ({}),\n    } = attrs;\n\n    const {container = document.body} = onBeforeContentMount(dom);\n    this.containerElement = container;\n\n    this.portalElement = document.createElement('div');\n    container.appendChild(this.portalElement);\n    this.applyPortalProps(attrs);\n\n    m.mount(this.portalElement, this.contentComponent);\n\n    onContentMount(this.portalElement);\n  }\n\n  onbeforeupdate({children}: m.CVnode<PortalAttrs>) {\n    // Update the mounted content's view function to return the latest portal\n    // content passed in via children, without changing the component itself.\n    this.contentComponent.view = () => children;\n  }\n\n  onupdate({attrs}: m.CVnodeDOM<PortalAttrs>) {\n    const {onContentUpdate = () => {}} = attrs;\n    if (this.portalElement) {\n      this.applyPortalProps(attrs);\n      onContentUpdate(this.portalElement);\n    }\n  }\n\n  private applyPortalProps(attrs: PortalAttrs) {\n    if (this.portalElement) {\n      this.portalElement.className = attrs.className ?? '';\n      Object.assign(this.portalElement.style, attrs.style);\n    }\n  }\n\n  onremove({attrs}: m.CVnodeDOM<PortalAttrs>) {\n    const {onContentUnmount = () => {}} = attrs;\n    const container = this.containerElement ?? document.body;\n    if (this.portalElement) {\n      if (container.contains(this.portalElement)) {\n        onContentUnmount(this.portalElement);\n        // Rendering null ensures previous vnodes are removed properly.\n        m.mount(this.portalElement, null);\n        container.removeChild(this.portalElement);\n      }\n    }\n  }\n}\n"]}
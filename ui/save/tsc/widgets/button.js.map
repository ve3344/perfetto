{"version":3,"file":"button.js","sourceRoot":"","sources":["../../../src/widgets/button.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,mDAA8C;AAC9C,qCAA4E;AAC5E,iCAA4B;AAC5B,mCAA8B;AAC9B,uCAAkC;AA4ClC,MAAa,MAAM;IACjB,IAAI,CAAC,EAAC,KAAK,EAAwB;QACjC,MAAM,EACJ,IAAI,EACJ,MAAM,EACN,OAAO,EACP,SAAS,EACT,SAAS,EACT,YAAY,EACZ,UAAU,EACV,MAAM,GAAG,eAAM,CAAC,IAAI,EACpB,GAAG,SAAS,EACb,GAAG,KAAK,CAAC;QAEV,MAAM,KAAK,GAAG,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAEzD,MAAM,OAAO,GAAG,IAAA,uBAAU,EACxB,MAAM,IAAI,WAAW,EACrB,OAAO,IAAI,YAAY,EACvB,IAAA,uBAAc,EAAC,MAAM,CAAC,EACtB,IAAI,IAAI,CAAC,KAAK,IAAI,cAAc,EAChC,YAAY,IAAI,aAAK,CAAC,yBAAyB,EAC/C,SAAS,CACV,CAAC;QAEF,OAAO,IAAA,iBAAC,EACN,kBAAkB,EAClB;YACE,GAAG,SAAS;YACZ,SAAS,EAAE,OAAO;SACnB,EACD,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EACtB,SAAS;YACP,IAAA,iBAAC,EAAC,WAAI,EAAE;gBACN,SAAS,EAAE,eAAe;gBAC1B,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,UAAU;aACnB,CAAC,EACJ,KAAK,IAAI,QAAQ,CAClB,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,KAAkB;QACnC,MAAM,EAAC,IAAI,EAAE,UAAU,EAAC,GAAG,KAAK,CAAC;QACjC,MAAM,SAAS,GAAG,cAAc,CAAC;QACjC,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO,IAAA,iBAAC,EAAC,iBAAO,EAAE,EAAC,SAAS,EAAC,CAAC,CAAC;QACjC,CAAC;aAAM,IAAI,IAAI,EAAE,CAAC;YAChB,OAAO,IAAA,iBAAC,EAAC,WAAI,EAAE,EAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAC,CAAC,CAAC;QACxD,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAC;QACnB,CAAC;IACH,CAAC;CACF;AArDD,wBAqDC;AAED;;GAEG;AACH,MAAa,SAAS;IACpB,IAAI,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAsB;QACzC,OAAO,IAAA,iBAAC,EAAC,gBAAgB,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;CACF;AAJD,8BAIC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {classNames} from '../base/classnames';\nimport {HTMLAttrs, HTMLButtonAttrs, Intent, classForIntent} from './common';\nimport {Icon} from './icon';\nimport {Popup} from './popup';\nimport {Spinner} from './spinner';\n\ninterface CommonAttrs extends HTMLButtonAttrs {\n  // Always show the button as if the \"active\" pseudo class were applied, which\n  // makes the button look permanently pressed.\n  // Useful for when the button represents some toggleable state, such as\n  // showing/hiding a popup menu.\n  // Defaults to false.\n  active?: boolean;\n  // Use minimal padding, reducing the overall size of the button by a few px.\n  // Defaults to false.\n  compact?: boolean;\n  // Optional right icon.\n  rightIcon?: string;\n  // List of space separated class names forwarded to the icon.\n  className?: string;\n  // Allow clicking this button to close parent popups.\n  // Defaults to false.\n  dismissPopup?: boolean;\n  // Show loading spinner instead of icon.\n  // Defaults to false.\n  loading?: boolean;\n  // Whether to use a filled icon\n  // Defaults to false;\n  iconFilled?: boolean;\n  // Indicate button colouring by intent.\n  // Defaults to undefined aka \"None\"\n  intent?: Intent;\n}\n\ninterface IconButtonAttrs extends CommonAttrs {\n  // Icon buttons require an icon.\n  icon: string;\n}\n\ninterface LabelButtonAttrs extends CommonAttrs {\n  // Label buttons require a label.\n  label: string;\n  // Label buttons can have an optional icon.\n  icon?: string;\n}\n\nexport type ButtonAttrs = LabelButtonAttrs | IconButtonAttrs;\n\nexport class Button implements m.ClassComponent<ButtonAttrs> {\n  view({attrs}: m.CVnode<ButtonAttrs>) {\n    const {\n      icon,\n      active,\n      compact,\n      rightIcon,\n      className,\n      dismissPopup,\n      iconFilled,\n      intent = Intent.None,\n      ...htmlAttrs\n    } = attrs;\n\n    const label = 'label' in attrs ? attrs.label : undefined;\n\n    const classes = classNames(\n      active && 'pf-active',\n      compact && 'pf-compact',\n      classForIntent(intent),\n      icon && !label && 'pf-icon-only',\n      dismissPopup && Popup.DISMISS_POPUP_GROUP_CLASS,\n      className,\n    );\n\n    return m(\n      'button.pf-button',\n      {\n        ...htmlAttrs,\n        className: classes,\n      },\n      this.renderIcon(attrs),\n      rightIcon &&\n        m(Icon, {\n          className: 'pf-right-icon',\n          icon: rightIcon,\n          filled: iconFilled,\n        }),\n      label || '\\u200B', // Zero width space keeps button in-flow\n    );\n  }\n\n  private renderIcon(attrs: ButtonAttrs): m.Children {\n    const {icon, iconFilled} = attrs;\n    const className = 'pf-left-icon';\n    if (attrs.loading) {\n      return m(Spinner, {className});\n    } else if (icon) {\n      return m(Icon, {className, icon, filled: iconFilled});\n    } else {\n      return undefined;\n    }\n  }\n}\n\n/**\n * Space buttons out with a little gap between each one.\n */\nexport class ButtonBar implements m.ClassComponent<HTMLAttrs> {\n  view({attrs, children}: m.CVnode<HTMLAttrs>): m.Children {\n    return m('.pf-button-bar', attrs, children);\n  }\n}\n"]}
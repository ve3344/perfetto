{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../src/widgets/modal.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2019 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {defer} from '../base/deferred';\nimport {Icon} from './icon';\nimport {scheduleFullRedraw} from './raf';\n\n// This module deals with modal dialogs. Unlike most components, here we want to\n// render the DOM elements outside of the corresponding vdom tree. For instance\n// we might want to instantiate a modal dialog all the way down from a nested\n// Mithril sub-component, but we want the result dom element to be nested under\n// the root <body>.\n\n// Usage:\n// Full-screen modal use cases (the most common case)\n// --------------------------------------------------\n// - app.ts calls maybeRenderFullscreenModalDialog() when rendering the\n//   top-level vdom, if a modal dialog is created via showModal()\n// - The user (any TS code anywhere) calls showModal()\n// - showModal() takes either:\n//   - A static set of mithril vnodes (for cases when the contents of the modal\n//     dialog is static and never changes)\n//   - A function, invoked on each render pass, that returns mithril vnodes upon\n//     each invocation.\n//   - See examples in widgets_page.ts for both.\n//\n// Nested modal use-cases\n// ----------------------\n// A modal dialog can be created in a \"positioned\" layer (e.g., any div that has\n// position:relative|absolute), so it's modal but only within the scope of that\n// layer.\n// In this case, just ust the Modal class as a standard mithril component.\n// showModal()/closeModal() are irrelevant in this case.\n\nexport interface ModalAttrs {\n  title: string;\n  buttons?: ModalButton[];\n  vAlign?: 'MIDDLE' /* default */ | 'TOP';\n\n  // Used to disambiguate between different modal dialogs that might overlap\n  // due to different client showing modal dialogs at the same time. This needs\n  // to match the key passed to closeModal() (if non-undefined). If the key is\n  // not provided, showModal will make up a random key in the showModal() call.\n  key?: string;\n\n  // A callback that is called when the dialog is closed, whether by pressing\n  // any buttons or hitting ESC or clicking outside of the modal.\n  onClose?: () => void;\n\n  // The content/body of the modal dialog. This can be either:\n  // 1. A static set of children, for simple dialogs which content never change.\n  // 2. A factory method that returns a m() vnode for dyamic content.\n  content?: m.Children | (() => m.Children);\n}\n\nexport interface ModalButton {\n  text: string;\n  primary?: boolean;\n  id?: string;\n  action?: () => void;\n}\n\n// Usually users don't need to care about this class, as this is instantiated\n// by showModal. The only case when users should depend on this is when they\n// want to nest a modal dialog in a <div> they control (i.e. when the modal\n// is scoped to a mithril component, not fullscreen).\nexport class Modal implements m.ClassComponent<ModalAttrs> {\n  onbeforeremove(vnode: m.VnodeDOM<ModalAttrs>) {\n    const removePromise = defer<void>();\n    vnode.dom.addEventListener('animationend', () => {\n      scheduleFullRedraw('force');\n      removePromise.resolve();\n    });\n    vnode.dom.classList.add('modal-fadeout');\n\n    // Retuning `removePromise` will cause Mithril to defer the actual component\n    // removal until the fade-out animation is done. onremove() will be invoked\n    // after this.\n    return removePromise;\n  }\n\n  onremove(vnode: m.VnodeDOM<ModalAttrs>) {\n    if (vnode.attrs.onClose !== undefined) {\n      // The onClose here is the promise wrapper created by showModal(), which\n      // in turn will: (1) call the user's original attrs.onClose; (2) resolve\n      // the promise returned by showModal().\n      vnode.attrs.onClose();\n    }\n  }\n\n  oncreate(vnode: m.VnodeDOM<ModalAttrs>) {\n    if (vnode.dom instanceof HTMLElement) {\n      // Focus the newly created dialog, so that we react to Escape keydown\n      // even if the user has not clicked yet on any element.\n      // If there is a primary button, focus that, so Enter does the default\n      // action. If not just focus the whole dialog.\n      const primaryBtn = vnode.dom.querySelector('.modal-btn-primary');\n      if (primaryBtn) {\n        (primaryBtn as HTMLElement).focus();\n      } else {\n        vnode.dom.focus();\n      }\n      // If the modal dialog is instantiated in a tall scrollable container,\n      // make sure to scroll it into the view.\n      vnode.dom.scrollIntoView({block: 'center'});\n    }\n  }\n\n  view(vnode: m.Vnode<ModalAttrs>) {\n    const attrs = vnode.attrs;\n\n    const buttons: m.Children = [];\n    for (const button of attrs.buttons || []) {\n      buttons.push(\n        m(\n          'button.modal-btn',\n          {\n            class: button.primary ? 'modal-btn-primary' : '',\n            id: button.id,\n            onclick: () => {\n              closeModal(attrs.key);\n              if (button.action !== undefined) button.action();\n            },\n          },\n          button.text,\n        ),\n      );\n    }\n\n    const aria = '[aria-labelledby=mm-title][aria-model][role=dialog]';\n    const align = attrs.vAlign === 'TOP' ? '.modal-dialog-valign-top' : '';\n    return m(\n      '.modal-backdrop',\n      {\n        onclick: this.onBackdropClick.bind(this, attrs),\n        onkeyup: this.onBackdropKeyupdown.bind(this, attrs),\n        onkeydown: this.onBackdropKeyupdown.bind(this, attrs),\n        tabIndex: 0,\n      },\n      m(\n        `.modal-dialog${align}${aria}`,\n        m(\n          'header',\n          m('h2', {id: 'mm-title'}, attrs.title),\n          m(\n            'button[aria-label=Close Modal]',\n            {onclick: () => closeModal(attrs.key)},\n            m(Icon, {icon: 'close'}),\n          ),\n        ),\n        m('main', vnode.children),\n        buttons.length > 0 ? m('footer', buttons) : null,\n      ),\n    );\n  }\n\n  onBackdropClick(attrs: ModalAttrs, e: MouseEvent) {\n    e.stopPropagation();\n    // Only react when clicking on the backdrop. Don't close if the user clicks\n    // on the dialog itself.\n    const t = e.target;\n    if (t instanceof Element && t.classList.contains('modal-backdrop')) {\n      closeModal(attrs.key);\n    }\n  }\n\n  onBackdropKeyupdown(attrs: ModalAttrs, e: KeyboardEvent) {\n    e.stopPropagation();\n    if (e.key === 'Escape' && e.type !== 'keyup') {\n      closeModal(attrs.key);\n    }\n  }\n}\n\n// Set by showModal().\nlet currentModal: ModalAttrs | undefined = undefined;\nlet generationCounter = 0;\n\n// This should be called only by app.ts and nothing else.\n// This generates the modal dialog at the root of the DOM, so it can overlay\n// on top of everything else.\nexport function maybeRenderFullscreenModalDialog() {\n  // We use the generation counter as key to distinguish between: (1) two render\n  // passes for the same dialog vs (2) rendering a new dialog that has been\n  // created invoking showModal() while another modal dialog was already being\n  // shown.\n  if (currentModal === undefined) return [];\n  let children: m.Children;\n  if (currentModal.content === undefined) {\n    children = null;\n  } else if (typeof currentModal.content === 'function') {\n    children = currentModal.content();\n  } else {\n    children = currentModal.content;\n  }\n  return [m(Modal, currentModal, children)];\n}\n\n// Shows a full-screen modal dialog.\nexport async function showModal(userAttrs: ModalAttrs): Promise<void> {\n  const returnedClosePromise = defer<void>();\n  const userOnClose = userAttrs.onClose ?? (() => {});\n\n  // If the user doesn't specify a key (to match the closeModal), generate a\n  // random key to distinguish two showModal({key:undefined}) calls.\n  const key = userAttrs.key ?? `${++generationCounter}`;\n  const attrs: ModalAttrs = {\n    ...userAttrs,\n    key,\n    onClose: () => {\n      userOnClose();\n      returnedClosePromise.resolve();\n    },\n  };\n  currentModal = attrs;\n  redrawModal();\n  return returnedClosePromise;\n}\n\n// Technically we don't need to redraw the whole app, but it's the more\n// pragmatic option. This is exposed to keep the plugin code more clear, so it's\n// evident why a redraw is requested.\nexport function redrawModal() {\n  if (currentModal !== undefined) {\n    scheduleFullRedraw('force');\n  }\n}\n\n// Closes the full-screen modal dialog (if any).\n// `key` is optional: if provided it will close the modal dialog only if the key\n// matches. This is to avoid accidentally closing another dialog that popped\n// in the meanwhile. If undefined, it closes whatever modal dialog is currently\n// open (if any).\nexport function closeModal(key?: string) {\n  if (\n    currentModal === undefined ||\n    (key !== undefined && currentModal.key !== key)\n  ) {\n    // Somebody else closed the modal dialog already, or opened a new one with\n    // a different key.\n    return;\n  }\n  currentModal = undefined;\n  scheduleFullRedraw('force');\n}\n\nexport function getCurrentModalKey(): string | undefined {\n  return currentModal?.key;\n}\n"]}
{"version":3,"file":"hotkey_glyphs.js","sourceRoot":"","sources":["../../../src/widgets/hotkey_glyphs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {getPlatform, Hotkey, Key, parseHotkey, Platform} from '../base/hotkeys';\nimport {Icon} from './icon';\n\nexport interface HotkeyGlyphsAttrs {\n  hotkey: Hotkey;\n  spoof?: Platform;\n}\n\n// Renders a hotkey as a series of little keycaps.\nexport class HotkeyGlyphs implements m.ClassComponent<HotkeyGlyphsAttrs> {\n  view({attrs}: m.Vnode<HotkeyGlyphsAttrs>) {\n    const {hotkey, spoof} = attrs;\n\n    const platform = spoof || getPlatform();\n    const result = parseHotkey(hotkey);\n    if (result) {\n      const {key, modifier} = result;\n      const hasMod = modifier.includes('Mod');\n      const hasCtrl = modifier.includes('Ctrl');\n      const hasAlt = modifier.includes('Alt');\n      const hasShift = modifier.includes('Shift');\n\n      return m(\n        'span.pf-hotkey',\n        hasMod && m('span.pf-keycap', glyphForMod(platform)),\n        hasCtrl && m('span.pf-keycap', glyphForCtrl(platform)),\n        hasAlt && m('span.pf-keycap', glyphForAlt(platform)),\n        hasShift && m('span.pf-keycap', glyphForShift()),\n        m('span.pf-keycap', glyphForKey(key, platform)),\n      );\n    } else {\n      return m('span.pf-keycap', '???');\n    }\n  }\n}\n\nexport interface KeycapGlyphsAttrs {\n  keyValue: Key;\n  spoof?: Platform;\n}\n\n// Renders a single keycap.\nexport class KeycapGlyph implements m.ClassComponent<KeycapGlyphsAttrs> {\n  view({attrs}: m.Vnode<KeycapGlyphsAttrs>) {\n    const {keyValue, spoof} = attrs;\n    const platform = spoof || getPlatform();\n    return m('span.pf-keycap', glyphForKey(keyValue, platform));\n  }\n}\n\nfunction glyphForKey(key: Key, platform: Platform): m.Children {\n  if (key === 'Enter') {\n    return m(Icon, {icon: 'keyboard_return'});\n  } else if (key === 'ArrowUp') {\n    return m(Icon, {icon: 'arrow_upward'});\n  } else if (key === 'ArrowDown') {\n    return m(Icon, {icon: 'arrow_downward'});\n  } else if (key === 'Space') {\n    return m(Icon, {icon: 'space_bar'});\n  } else if (key === 'Escape') {\n    if (platform === 'Mac') {\n      return 'esc';\n    } else {\n      return 'Esc';\n    }\n  } else {\n    return key;\n  }\n}\n\nfunction glyphForMod(platform: Platform): m.Children {\n  if (platform === 'Mac') {\n    return m(Icon, {icon: 'keyboard_command_key'});\n  } else {\n    return 'Ctrl';\n  }\n}\n\nfunction glyphForShift(): m.Children {\n  return m(Icon, {icon: 'shift'});\n}\n\nfunction glyphForCtrl(platform: Platform): m.Children {\n  if (platform === 'Mac') {\n    return m(Icon, {icon: 'keyboard_control_key'});\n  } else {\n    return 'Ctrl';\n  }\n}\n\nfunction glyphForAlt(platform: Platform): m.Children {\n  if (platform === 'Mac') {\n    return m(Icon, {icon: 'keyboard_option_key'});\n  } else {\n    return 'Alt';\n  }\n}\n"]}
{"version":3,"file":"tree.js","sourceRoot":"","sources":["../../../src/widgets/tree.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {classNames} from '../base/classnames';\nimport {hasChildren} from '../base/mithril_utils';\nimport {scheduleFullRedraw} from './raf';\n\n// Heirachical tree layout with left and right values.\n// Right and left values of the same indentation level are horizontally aligned.\n// Example:\n// foo    bar\n//  ├ baz  qux\n//  └ quux corge\n//    ├ looong_left aaa\n//    └ a           bbb\n// grault garply\n\ninterface TreeAttrs {\n  // Space delimited class list applied to our tree element.\n  className?: string;\n}\n\nexport class Tree implements m.ClassComponent<TreeAttrs> {\n  view({attrs, children}: m.Vnode<TreeAttrs>): m.Children {\n    const {className = ''} = attrs;\n\n    const classes = classNames(className);\n\n    return m('.pf-tree', {class: classes}, children);\n  }\n}\n\ninterface TreeNodeAttrs {\n  // Content to display in the left hand column.\n  // If omitted, this side will be blank.\n  left?: m.Children;\n  // Content to display in the right hand column.\n  // If omitted, this side will be left blank.\n  right?: m.Children;\n  // Content to display in the right hand column when the node is collapsed.\n  // If omitted, the value of `right` shall be shown when collapsed instead.\n  // If the node has no children, this value is never shown.\n  summary?: m.Children;\n  // Whether this node is collapsed or not.\n  // If omitted, collapsed state 'uncontrolled' - i.e. controlled internally.\n  collapsed?: boolean;\n  // Whether the node should start collapsed or not, default: false.\n  startsCollapsed?: boolean;\n  loading?: boolean;\n  showCaret?: boolean;\n  // Optional icon to show to the left of the text.\n  // If this node contains children, this icon is ignored.\n  icon?: string;\n  // Called when the collapsed state is changed, mainly used in controlled mode.\n  onCollapseChanged?: (collapsed: boolean, attrs: TreeNodeAttrs) => void;\n}\n\nexport class TreeNode implements m.ClassComponent<TreeNodeAttrs> {\n  private collapsed;\n\n  constructor({attrs}: m.CVnode<TreeNodeAttrs>) {\n    this.collapsed = attrs.startsCollapsed ?? false;\n  }\n\n  view(vnode: m.CVnode<TreeNodeAttrs>): m.Children {\n    const {\n      children,\n      attrs,\n      attrs: {left, onCollapseChanged = () => {}},\n    } = vnode;\n    return [\n      m(\n        '.pf-tree-node',\n        {\n          class: classNames(this.getClassNameForNode(vnode)),\n        },\n        m(\n          '.pf-tree-left',\n          m('span.pf-tree-gutter', {\n            onclick: () => {\n              this.collapsed = !this.isCollapsed(vnode);\n              onCollapseChanged(this.collapsed, attrs);\n              scheduleFullRedraw();\n            },\n          }),\n          left,\n        ),\n        this.renderRight(vnode),\n      ),\n      hasChildren(vnode) && m('.pf-tree-children', children),\n    ];\n  }\n\n  private getClassNameForNode(vnode: m.CVnode<TreeNodeAttrs>) {\n    const {loading = false, showCaret = false} = vnode.attrs;\n    if (loading) {\n      return 'pf-loading';\n    } else if (hasChildren(vnode) || showCaret) {\n      if (this.isCollapsed(vnode)) {\n        return 'pf-collapsed';\n      } else {\n        return 'pf-expanded';\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  private renderRight(vnode: m.CVnode<TreeNodeAttrs>) {\n    const {\n      attrs: {right, summary},\n    } = vnode;\n    if (hasChildren(vnode) && this.isCollapsed(vnode)) {\n      return m('.pf-tree-right', summary ?? right);\n    } else {\n      return m('.pf-tree-right', right);\n    }\n  }\n\n  private isCollapsed({attrs}: m.Vnode<TreeNodeAttrs>): boolean {\n    // If collapsed is omitted, use our local collapsed state instead.\n    const {collapsed = this.collapsed} = attrs;\n\n    return collapsed;\n  }\n}\n\nexport function dictToTreeNodes(dict: {[key: string]: m.Child}): m.Child[] {\n  const children: m.Child[] = [];\n  for (const key of Object.keys(dict)) {\n    if (dict[key] == undefined) {\n      continue;\n    }\n    children.push(\n      m(TreeNode, {\n        left: key,\n        right: dict[key],\n      }),\n    );\n  }\n  return children;\n}\n\n// Create a flat tree from a POJO\nexport function dictToTree(dict: {[key: string]: m.Child}): m.Children {\n  return m(Tree, dictToTreeNodes(dict));\n}\ninterface LazyTreeNodeAttrs {\n  // Same as TreeNode (see above).\n  left?: m.Children;\n  // Same as TreeNode (see above).\n  right?: m.Children;\n  // Same as TreeNode (see above).\n  icon?: string;\n  // Same as TreeNode (see above).\n  summary?: m.Children;\n  // A callback to be called when the TreeNode is expanded, in order to fetch\n  // child nodes.\n  // The callback must return a promise to a function which returns m.Children.\n  // The reason the promise must return a function rather than the actual\n  // children is to avoid storing vnodes between render cycles, which is a bug\n  // in Mithril.\n  fetchData: () => Promise<() => m.Children>;\n  // Whether to unload children on collapse.\n  // Defaults to false, data will be kept in memory until the node is destroyed.\n  unloadOnCollapse?: boolean;\n}\n\n// This component is a TreeNode which only loads child nodes when it's expanded.\n// This allows us to represent huge trees without having to load all the data\n// up front, and even allows us to represent infinite or recursive trees.\nexport class LazyTreeNode implements m.ClassComponent<LazyTreeNodeAttrs> {\n  private collapsed: boolean = true;\n  private loading: boolean = false;\n  private renderChildren?: () => m.Children;\n\n  view({attrs}: m.CVnode<LazyTreeNodeAttrs>): m.Children {\n    const {\n      left,\n      right,\n      icon,\n      summary,\n      fetchData,\n      unloadOnCollapse = false,\n    } = attrs;\n\n    return m(\n      TreeNode,\n      {\n        left,\n        right,\n        icon,\n        summary,\n        showCaret: true,\n        loading: this.loading,\n        collapsed: this.collapsed,\n        onCollapseChanged: (collapsed) => {\n          if (collapsed) {\n            if (unloadOnCollapse) {\n              this.renderChildren = undefined;\n            }\n          } else {\n            // Expanding\n            if (this.renderChildren) {\n              this.collapsed = false;\n              scheduleFullRedraw();\n            } else {\n              this.loading = true;\n              fetchData().then((result) => {\n                this.loading = false;\n                this.collapsed = false;\n                this.renderChildren = result;\n                scheduleFullRedraw();\n              });\n            }\n          }\n          this.collapsed = collapsed;\n          scheduleFullRedraw();\n        },\n      },\n      this.renderChildren && this.renderChildren(),\n    );\n  }\n}\n"]}
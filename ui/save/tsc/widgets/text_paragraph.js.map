{"version":3,"file":"text_paragraph.js","sourceRoot":"","sources":["../../../src/widgets/text_paragraph.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;;AAEjC,8DAAwB;AACxB,mDAA8C;AAU9C,MAAa,aAAa;IACxB,IAAI,CAAC,EAAC,KAAK,EAA+B;QACxC,IAAI,EAAC,IAAI,EAAE,aAAa,EAAC,GAAG,KAAK,CAAC;QAClC,IAAI,aAAa,KAAK,SAAS,EAAE,CAAC;YAChC,aAAa,GAAG,IAAI,CAAC;QACvB,CAAC;QACD,OAAO,IAAA,iBAAC,EACN,uBAAuB,EACvB,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CACnD,CAAC;IACJ,CAAC;CACF;AAXD,sCAWC;AAOD,MAAa,kBAAkB;IAG7B,IAAI,CAAC,EAAC,KAAK,EAAE,QAAQ,EAAmC;QACtD,MAAM,EAAC,SAAS,GAAG,EAAE,EAAC,GAAG,KAAK,CAAC;QAE/B,MAAM,OAAO,GAAG,IAAA,uBAAU,EAAC,SAAS,CAAC,CAAC;QAEtC,OAAO,IAAA,iBAAC,EAAC,KAAK,EAAE,EAAC,KAAK,EAAE,OAAO,EAAC,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;CACF;AAVD,gDAUC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport m from 'mithril';\nimport {classNames} from '../base/classnames';\n\nexport interface TextParagraphAttrs {\n  // Paragraph text.\n  text: string;\n  // Whether to compress multiple spaces (e.g. the string is multi-line but\n  // should render with the default UI wrapping)\n  compressSpace?: boolean;\n}\n\nexport class TextParagraph implements m.ClassComponent<TextParagraphAttrs> {\n  view({attrs}: m.CVnode<TextParagraphAttrs>) {\n    let {text, compressSpace} = attrs;\n    if (compressSpace === undefined) {\n      compressSpace = true;\n    }\n    return m(\n      `div.pf-text-paragraph`,\n      compressSpace ? text.replace(/\\s\\s+/g, ' ') : text,\n    );\n  }\n}\n\ninterface MultiParagraphTextAttrs {\n  // Space delimited class list applied to element.\n  className?: string;\n}\n\nexport class MultiParagraphText\n  implements m.ClassComponent<MultiParagraphTextAttrs>\n{\n  view({attrs, children}: m.Vnode<MultiParagraphTextAttrs>): m.Children {\n    const {className = ''} = attrs;\n\n    const classes = classNames(className);\n\n    return m('div', {class: classes}, children);\n  }\n}\n"]}
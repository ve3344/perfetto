{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../src/widgets/common.ts"],"names":[],"mappings":";AAAA,qDAAqD;AACrD,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,kDAAkD;AAClD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;;AA8DjC,wCASC;AArED,6CAAkD;AAuDlD,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,uBAAa,CAAA;IACb,6BAAmB,CAAA;AACrB,CAAC,EAHW,MAAM,sBAAN,MAAM,QAGjB;AAED,SAAgB,cAAc,CAAC,MAAc;IAC3C,QAAQ,MAAM,EAAE,CAAC;QACf,KAAK,MAAM,CAAC,IAAI;YACd,OAAO,SAAS,CAAC;QACnB,KAAK,MAAM,CAAC,OAAO;YACjB,OAAO,mBAAmB,CAAC;QAC7B;YACE,OAAO,IAAA,2BAAiB,EAAC,MAAM,CAAC,CAAC;IACrC,CAAC;AACH,CAAC","sourcesContent":["// Copyright (C) 2023 The Android Open Source Project\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {assertUnreachable} from '../base/logging';\n\n// This file contains interfaces for attributes for various HTML elements.\n// They are typically used by widgets which pass attributes down to their\n// internal child, to provide a type-safe interface to users of those widgets.\n// Note: This is a non-exhaustive list, and is added to when required.\n// Feel free to add any missing attributes as they arise.\nexport type Style = string | Partial<CSSStyleDeclaration>;\n\nexport interface HTMLAttrs {\n  readonly ref?: string; // This is a common attribute used in Perfetto.\n  readonly style?: Style;\n  readonly id?: string;\n  readonly title?: string;\n  readonly className?: string;\n  readonly onclick?: (e: PointerEvent) => void;\n  readonly onmouseover?: (e: MouseEvent) => void;\n  readonly onmouseout?: (e: MouseEvent) => void;\n  readonly onmousedown?: (e: MouseEvent) => void;\n  readonly onmouseup?: (e: MouseEvent) => void;\n  readonly onmousemove?: (e: MouseEvent) => void;\n  readonly onload?: (e: Event) => void;\n}\n\nexport interface HTMLFocusableAttrs extends HTMLAttrs {\n  readonly onblur?: (e: FocusEvent) => void;\n  readonly onfocus?: (e: FocusEvent) => void;\n}\n\nexport interface HTMLInputAttrs extends HTMLFocusableAttrs {\n  readonly disabled?: boolean;\n  readonly type?: string;\n  readonly onchange?: (e: Event) => void;\n  readonly oninput?: (e: KeyboardEvent) => void;\n  readonly onkeydown?: (e: KeyboardEvent) => void;\n  readonly onkeyup?: (e: KeyboardEvent) => void;\n  readonly value?: string;\n  readonly placeholder?: string;\n}\n\nexport interface HTMLCheckboxAttrs extends HTMLInputAttrs {\n  readonly checked?: boolean;\n}\n\nexport interface HTMLButtonAttrs extends HTMLInputAttrs {}\n\nexport interface HTMLAnchorAttrs extends HTMLAttrs {\n  readonly href?: string;\n  readonly target?: string;\n}\n\nexport interface HTMLLabelAttrs extends HTMLAttrs {\n  readonly for?: string;\n}\n\nexport enum Intent {\n  None = 'none',\n  Primary = 'primary',\n}\n\nexport function classForIntent(intent: Intent): string | undefined {\n  switch (intent) {\n    case Intent.None:\n      return undefined;\n    case Intent.Primary:\n      return 'pf-intent-primary';\n    default:\n      return assertUnreachable(intent);\n  }\n}\n"]}
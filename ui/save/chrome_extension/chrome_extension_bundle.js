var chrome_extension = (function () {
'use strict';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var chrome_extension = {};

var string_utils = {};

var base64 = {};

var hasRequiredBase64;

function requireBase64 () {
	if (hasRequiredBase64) return base64;
	hasRequiredBase64 = 1;
	(function (exports) {

		/**
		 * A minimal base64 implementation for number arrays.
		 * @memberof util
		 * @namespace
		 */
		var base64 = exports;

		/**
		 * Calculates the byte length of a base64 encoded string.
		 * @param {string} string Base64 encoded string
		 * @returns {number} Byte length
		 */
		base64.length = function length(string) {
		    var p = string.length;
		    if (!p)
		        return 0;
		    var n = 0;
		    while (--p % 4 > 1 && string.charAt(p) === "=")
		        ++n;
		    return Math.ceil(string.length * 3) / 4 - n;
		};

		// Base64 encoding table
		var b64 = new Array(64);

		// Base64 decoding table
		var s64 = new Array(123);

		// 65..90, 97..122, 48..57, 43, 47
		for (var i = 0; i < 64;)
		    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

		/**
		 * Encodes a buffer to a base64 encoded string.
		 * @param {Uint8Array} buffer Source buffer
		 * @param {number} start Source start
		 * @param {number} end Source end
		 * @returns {string} Base64 encoded string
		 */
		base64.encode = function encode(buffer, start, end) {
		    var parts = null,
		        chunk = [];
		    var i = 0, // output index
		        j = 0, // goto index
		        t;     // temporary
		    while (start < end) {
		        var b = buffer[start++];
		        switch (j) {
		            case 0:
		                chunk[i++] = b64[b >> 2];
		                t = (b & 3) << 4;
		                j = 1;
		                break;
		            case 1:
		                chunk[i++] = b64[t | b >> 4];
		                t = (b & 15) << 2;
		                j = 2;
		                break;
		            case 2:
		                chunk[i++] = b64[t | b >> 6];
		                chunk[i++] = b64[b & 63];
		                j = 0;
		                break;
		        }
		        if (i > 8191) {
		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
		            i = 0;
		        }
		    }
		    if (j) {
		        chunk[i++] = b64[t];
		        chunk[i++] = 61;
		        if (j === 1)
		            chunk[i++] = 61;
		    }
		    if (parts) {
		        if (i)
		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
		        return parts.join("");
		    }
		    return String.fromCharCode.apply(String, chunk.slice(0, i));
		};

		var invalidEncoding = "invalid encoding";

		/**
		 * Decodes a base64 encoded string to a buffer.
		 * @param {string} string Source string
		 * @param {Uint8Array} buffer Destination buffer
		 * @param {number} offset Destination offset
		 * @returns {number} Number of bytes written
		 * @throws {Error} If encoding is invalid
		 */
		base64.decode = function decode(string, buffer, offset) {
		    var start = offset;
		    var j = 0, // goto index
		        t;     // temporary
		    for (var i = 0; i < string.length;) {
		        var c = string.charCodeAt(i++);
		        if (c === 61 && j > 1)
		            break;
		        if ((c = s64[c]) === undefined)
		            throw Error(invalidEncoding);
		        switch (j) {
		            case 0:
		                t = c;
		                j = 1;
		                break;
		            case 1:
		                buffer[offset++] = t << 2 | (c & 48) >> 4;
		                t = c;
		                j = 2;
		                break;
		            case 2:
		                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
		                t = c;
		                j = 3;
		                break;
		            case 3:
		                buffer[offset++] = (t & 3) << 6 | c;
		                j = 0;
		                break;
		        }
		    }
		    if (j === 1)
		        throw Error(invalidEncoding);
		    return offset - start;
		};

		/**
		 * Tests if the specified string appears to be base64 encoded.
		 * @param {string} string String to test
		 * @returns {boolean} `true` if probably base64 encoded, otherwise false
		 */
		base64.test = function test(string) {
		    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
		}; 
	} (base64));
	return base64;
}

var logging = {};

var perfetto_version = {};

var hasRequiredPerfetto_version;

function requirePerfetto_version () {
	if (hasRequiredPerfetto_version) return perfetto_version;
	hasRequiredPerfetto_version = 1;
	Object.defineProperty(perfetto_version, "__esModule", { value: true });
	perfetto_version.SCM_REVISION = perfetto_version.VERSION = void 0;
	perfetto_version.VERSION = "v48.1-9920148e2";
	perfetto_version.SCM_REVISION = "9920148e2699079614cd5bab2ed64aee97dcd247";
	
	return perfetto_version;
}

var utils = {};

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils;
	hasRequiredUtils = 1;
	// Copyright (C) 2023 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(utils, "__esModule", { value: true });
	utils.exists = exists;
	utils.escapeCSSSelector = escapeCSSSelector;
	utils.getOrCreate = getOrCreate;
	utils.createProxy = createProxy;
	// Return true if value is not nullish - i.e. not null or undefined
	// Allows doing the following
	//   exists(val) && m('div', val)
	// Even if val is a non-nullish falsey value like 0 or ''
	function exists(value) {
	    return value !== undefined && value !== null;
	}
	// Escape characters that are not allowed inside a css selector
	function escapeCSSSelector(selector) {
	    return selector.replace(/([!"#$%&'()*+,.\/:;<=>?@[\\\]^`{|}~])/g, '\\$1');
	}
	function getOrCreate(map, key, factory) {
	    let value = map.get(key);
	    if (value !== undefined)
	        return value;
	    value = factory();
	    map.set(key, value);
	    return value;
	}
	// Allows to take an existing class instance (`target`) and override some of its
	// methods via `overrides`. We use this for cases where we want to expose a
	// "manager" (e.g. TrackManager, SidebarManager) to the plugins, but we want to
	// override few of its methods (e.g. to inject the pluginId in the args).
	function createProxy(target, overrides) {
	    return new Proxy(target, {
	        get: (target, prop, receiver) => {
	            // If the property is overriden, use that; otherwise, use target
	            const overrideValue = overrides[prop];
	            if (overrideValue !== undefined) {
	                return typeof overrideValue === 'function'
	                    ? overrideValue.bind(overrides)
	                    : overrideValue;
	            }
	            const baseValue = Reflect.get(target, prop, receiver);
	            return typeof baseValue === 'function'
	                ? baseValue.bind(target)
	                : baseValue;
	        },
	    });
	}
	
	return utils;
}

var hasRequiredLogging;

function requireLogging () {
	if (hasRequiredLogging) return logging;
	hasRequiredLogging = 1;
	// Copyright (C) 2018 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(logging, "__esModule", { value: true });
	logging.assertExists = assertExists;
	logging.assertIsInstance = assertIsInstance;
	logging.assertTrue = assertTrue;
	logging.assertFalse = assertFalse;
	logging.addErrorHandler = addErrorHandler;
	logging.reportError = reportError;
	logging.assertUnreachable = assertUnreachable;
	const perfetto_version_1 = requirePerfetto_version();
	const utils_1 = requireUtils();
	const errorHandlers = [];
	function assertExists(value) {
	    if (value === null || value === undefined) {
	        throw new Error("Value doesn't exist");
	    }
	    return value;
	}
	function assertIsInstance(value, clazz) {
	    assertTrue(value instanceof clazz);
	    return value;
	}
	function assertTrue(value, optMsg) {
	    if (!value) {
	        throw new Error(optMsg ?? 'Failed assertion');
	    }
	}
	function assertFalse(value, optMsg) {
	    assertTrue(!value, optMsg);
	}
	function addErrorHandler(handler) {
	    if (!errorHandlers.includes(handler)) {
	        errorHandlers.push(handler);
	    }
	}
	function reportError(err) {
	    let errorObj = undefined;
	    let errMsg = '';
	    let errType;
	    const stack = [];
	    const baseUrl = `${location.protocol}//${location.host}`;
	    if (err instanceof ErrorEvent) {
	        errType = 'ERROR';
	        // In nominal cases the error is set in err.error{message,stack} and
	        // a toString() of the error object returns a meaningful one-line
	        // description. However, in the case of wasm errors, emscripten seems to
	        // wrap the error in an unusual way: err.error is null but err.message
	        // contains the whole one-line + stack trace.
	        if (err.error === null || err.error === undefined) {
	            // Wasm case.
	            const errLines = `${err.message}`.split('\n');
	            errMsg = errLines[0];
	            errorObj = { stack: errLines.slice(1).join('\n') };
	        }
	        else {
	            // Standard JS case.
	            errMsg = `${err.error}`;
	            errorObj = err.error;
	        }
	    }
	    else if (err instanceof PromiseRejectionEvent) {
	        errType = 'PROMISE_REJ';
	        errMsg = `${err.reason}`;
	        errorObj = err.reason;
	    }
	    else {
	        errType = 'OTHER';
	        errMsg = `${err}`;
	    }
	    // Remove useless "Uncaught Error:" or "Error:" prefixes which just create
	    // noise in the bug tracker without adding any meaningful value.
	    errMsg = errMsg.replace(/^Uncaught Error:/, '');
	    errMsg = errMsg.replace(/^Error:/, '');
	    errMsg = errMsg.trim();
	    if (errorObj !== undefined && errorObj !== null) {
	        const maybeStack = errorObj.stack;
	        let errStack = maybeStack !== undefined ? `${maybeStack}` : '';
	        errStack = errStack.replaceAll(/\r/g, ''); // Strip Windows CR.
	        for (let line of errStack.split('\n')) {
	            if (errMsg.includes(line))
	                continue;
	            // Chrome, Firefox and safari don't agree on the stack format:
	            // Chrome: prefixes entries with a '  at ' and uses the format
	            //         function(https://url:line:col), e.g.
	            //         '    at FooBar (https://.../frontend_bundle.js:2073:15)'
	            //         however, if the function name is not known, it prints just:
	            //         '     at https://.../frontend_bundle.js:2073:15'
	            //         or also:
	            //         '     at <anonymous>:5:11'
	            // Firefox and Safari: don't have any prefix and use @ as a separator:
	            //         redrawCanvas@https://.../frontend_bundle.js:468814:26
	            //         @debugger eval code:1:32
	            // Here we first normalize Chrome into the Firefox/Safari format by
	            // removing the '   at ' prefix and replacing (xxx)$ into @xxx.
	            line = line.replace(/^\s*at\s*/, '');
	            line = line.replace(/\s*\(([^)]+)\)$/, '@$1');
	            // This leaves us still with two possible options here:
	            // 1. FooBar@https://ui.perfetto.dev/v123/frontend_bundle.js:2073:15
	            // 2. https://ui.perfetto.dev/v123/frontend_bundle.js:2073:15
	            const lastAt = line.lastIndexOf('@');
	            let entryName = '';
	            let entryLocation = '';
	            if (lastAt >= 0) {
	                entryLocation = line.substring(lastAt + 1);
	                entryName = line.substring(0, lastAt);
	            }
	            else {
	                entryLocation = line;
	            }
	            // Remove redundant https://ui.perfetto.dev/v38.0-d6ed090ee/ as we have
	            // that information already and don't need to repeat it on each line.
	            if (entryLocation.includes(baseUrl)) {
	                entryLocation = entryLocation.replace(baseUrl, '');
	                entryLocation = entryLocation.replace(`/${perfetto_version_1.VERSION}/`, '');
	            }
	            stack.push({ name: entryName, location: entryLocation });
	        } // for (line in stack)
	        // Beautify the Wasm error message if possible. Most Wasm errors are of the
	        // form RuntimeError: unreachable or RuntimeError: abort. Those lead to bug
	        // titles that are undistinguishable from each other. Instead try using the
	        // first entry of the stack that contains a perfetto:: function name.
	        const wasmFunc = stack.find((e) => e.name.includes('perfetto::'))?.name;
	        if (errMsg.includes('RuntimeError') && (0, utils_1.exists)(wasmFunc)) {
	            errMsg += ` @ ${wasmFunc.trim()}`;
	        }
	    }
	    // Invoke all the handlers registered through addErrorHandler.
	    // There are usually two handlers registered, one for the UI (error_dialog.ts)
	    // and one for Analytics (analytics.ts).
	    for (const handler of errorHandlers) {
	        handler({
	            errType,
	            message: errMsg,
	            stack,
	        });
	    }
	}
	// This function serves two purposes.
	// 1) A runtime check - if we are ever called, we throw an exception.
	// This is useful for checking that code we suspect should never be reached is
	// actually never reached.
	// 2) A compile time check where typescript asserts that the value passed can be
	// cast to the "never" type.
	// This is useful for ensuring we exhastively check union types.
	function assertUnreachable(value) {
	    throw new Error(`This code should not be reachable ${value}`);
	}
	
	return logging;
}

var hasRequiredString_utils;

function requireString_utils () {
	if (hasRequiredString_utils) return string_utils;
	hasRequiredString_utils = 1;
	// Copyright (C) 2019 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(string_utils, "__esModule", { value: true });
	string_utils.base64Encode = base64Encode;
	string_utils.base64Decode = base64Decode;
	string_utils.hexEncode = hexEncode;
	string_utils.utf8Encode = utf8Encode;
	string_utils.utf8Decode = utf8Decode;
	string_utils.binaryEncode = binaryEncode;
	string_utils.binaryDecode = binaryDecode;
	string_utils.sqliteString = sqliteString;
	string_utils.sqlNameSafe = sqlNameSafe;
	string_utils.undoCommonChatAppReplacements = undoCommonChatAppReplacements;
	string_utils.cropText = cropText;
	const base64_1 = requireBase64();
	const logging_1 = requireLogging();
	// Lazy initialize at first use.
	let textDecoder = undefined;
	let textEncoder = undefined;
	function base64Encode(buffer) {
	    return (0, base64_1.encode)(buffer, 0, buffer.length);
	}
	function base64Decode(str) {
	    // if the string is in base64url format, convert to base64
	    const b64 = str.replaceAll('-', '+').replaceAll('_', '/');
	    const arr = new Uint8Array((0, base64_1.length)(b64));
	    const written = (0, base64_1.decode)(b64, arr, 0);
	    (0, logging_1.assertTrue)(written === arr.length);
	    return arr;
	}
	// encode binary array to hex string
	function hexEncode(bytes) {
	    return bytes.reduce((prev, cur) => prev + ('0' + cur.toString(16)).slice(-2), '');
	}
	function utf8Encode(str) {
	    textEncoder = textEncoder ?? new TextEncoder();
	    return textEncoder.encode(str);
	}
	// Note: not all byte sequences can be converted to<>from UTF8. This can be
	// used only with valid unicode strings, not arbitrary byte buffers.
	function utf8Decode(buffer) {
	    textDecoder = textDecoder ?? new TextDecoder();
	    return textDecoder.decode(buffer);
	}
	// The binaryEncode/Decode functions below allow to encode an arbitrary binary
	// buffer into a string that can be JSON-encoded. binaryEncode() applies
	// UTF-16 encoding to each byte individually.
	// Unlike utf8Encode/Decode, any arbitrary byte sequence can be converted into a
	// valid string, and viceversa.
	// This should be only used when a byte array needs to be transmitted over an
	// interface that supports only JSON serialization (e.g., postmessage to a
	// chrome extension).
	function binaryEncode(buf) {
	    let str = '';
	    for (let i = 0; i < buf.length; i++) {
	        str += String.fromCharCode(buf[i]);
	    }
	    return str;
	}
	function binaryDecode(str) {
	    const buf = new Uint8Array(str.length);
	    const strLen = str.length;
	    for (let i = 0; i < strLen; i++) {
	        buf[i] = str.charCodeAt(i);
	    }
	    return buf;
	}
	// A function used to interpolate strings into SQL query. The only replacement
	// is done is that single quote replaced with two single quotes, according to
	// SQLite documentation:
	// https://www.sqlite.org/lang_expr.html#literal_values_constants_
	//
	// The purpose of this function is to use in simple comparisons, to escape
	// strings used in GLOB clauses see escapeQuery function.
	function sqliteString(str) {
	    return `'${str.replaceAll("'", "''")}'`;
	}
	// Makes a string safe to be used as a SQL table/view/function name.
	function sqlNameSafe(str) {
	    return str.replace(/[^a-zA-Z0-9_]+/g, '_');
	}
	// Chat apps (including G Chat) sometimes replace ASCII characters with similar
	// looking unicode characters that break code snippets.
	// This function attempts to undo these replacements.
	function undoCommonChatAppReplacements(str) {
	    // Replace non-breaking spaces with normal spaces.
	    return str.replaceAll('\u00A0', ' ');
	}
	function cropText(str, charWidth, rectWidth) {
	    let displayText = '';
	    const maxLength = Math.floor(rectWidth / charWidth) - 1;
	    if (str.length <= maxLength) {
	        displayText = str;
	    }
	    else {
	        let limit = maxLength;
	        let maybeTripleDot = '';
	        if (maxLength > 1) {
	            limit = maxLength - 1;
	            maybeTripleDot = '\u2026';
	        }
	        // Javascript strings are UTF-16. |limit| could point in the middle of a
	        // 32-bit double-wchar codepoint (e.g., an emoji). Here we detect if the
	        // |limit|-th wchar is a leading surrogate and attach the trailing one.
	        const lastCharCode = str.charCodeAt(limit - 1);
	        limit += lastCharCode >= 55296 && lastCharCode < 56320 ? 1 : 0;
	        displayText = str.substring(0, limit) + maybeTripleDot;
	    }
	    return displayText;
	}
	
	return string_utils;
}

var chrome_tracing_controller = {};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  };
  return __assign.apply(this, arguments);
};

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
}
var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

var tslib_es6 = {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
};

var tslib_es6$1 = /*#__PURE__*/Object.freeze({
__proto__: null,
__extends: __extends,
get __assign () { return __assign; },
__rest: __rest,
__decorate: __decorate,
__param: __param,
__esDecorate: __esDecorate,
__runInitializers: __runInitializers,
__propKey: __propKey,
__setFunctionName: __setFunctionName,
__metadata: __metadata,
__awaiter: __awaiter,
__generator: __generator,
__createBinding: __createBinding,
__exportStar: __exportStar,
__values: __values,
__read: __read,
__spread: __spread,
__spreadArrays: __spreadArrays,
__spreadArray: __spreadArray,
__await: __await,
__asyncGenerator: __asyncGenerator,
__asyncDelegator: __asyncDelegator,
__asyncValues: __asyncValues,
__makeTemplateObject: __makeTemplateObject,
__importStar: __importStar,
__importDefault: __importDefault,
__classPrivateFieldGet: __classPrivateFieldGet,
__classPrivateFieldSet: __classPrivateFieldSet,
__classPrivateFieldIn: __classPrivateFieldIn,
__addDisposableResource: __addDisposableResource,
__disposeResources: __disposeResources,
'default': tslib_es6
});

var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$1);

var noiceJsonRpc = {};

var events = {exports: {}};

var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events.exports;
	hasRequiredEvents = 1;

	var R = typeof Reflect === 'object' ? Reflect : null;
	var ReflectApply = R && typeof R.apply === 'function'
	  ? R.apply
	  : function ReflectApply(target, receiver, args) {
	    return Function.prototype.apply.call(target, receiver, args);
	  };

	var ReflectOwnKeys;
	if (R && typeof R.ownKeys === 'function') {
	  ReflectOwnKeys = R.ownKeys;
	} else if (Object.getOwnPropertySymbols) {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target)
	      .concat(Object.getOwnPropertySymbols(target));
	  };
	} else {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target);
	  };
	}

	function ProcessEmitWarning(warning) {
	  if (console && console.warn) console.warn(warning);
	}

	var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
	  return value !== value;
	};

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}
	events.exports = EventEmitter;
	events.exports.once = once;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._eventsCount = 0;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	var defaultMaxListeners = 10;

	function checkListener(listener) {
	  if (typeof listener !== 'function') {
	    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
	  }
	}

	Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
	  enumerable: true,
	  get: function() {
	    return defaultMaxListeners;
	  },
	  set: function(arg) {
	    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
	      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
	    }
	    defaultMaxListeners = arg;
	  }
	});

	EventEmitter.init = function() {

	  if (this._events === undefined ||
	      this._events === Object.getPrototypeOf(this)._events) {
	    this._events = Object.create(null);
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
	    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
	  }
	  this._maxListeners = n;
	  return this;
	};

	function _getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return _getMaxListeners(this);
	};

	EventEmitter.prototype.emit = function emit(type) {
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
	  var doError = (type === 'error');

	  var events = this._events;
	  if (events !== undefined)
	    doError = (doError && events.error === undefined);
	  else if (!doError)
	    return false;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    var er;
	    if (args.length > 0)
	      er = args[0];
	    if (er instanceof Error) {
	      // Note: The comments on the `throw` lines are intentional, they show
	      // up in Node's output if this results in an unhandled exception.
	      throw er; // Unhandled 'error' event
	    }
	    // At least give some kind of context to the user
	    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
	    err.context = er;
	    throw err; // Unhandled 'error' event
	  }

	  var handler = events[type];

	  if (handler === undefined)
	    return false;

	  if (typeof handler === 'function') {
	    ReflectApply(handler, this, args);
	  } else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      ReflectApply(listeners[i], this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  checkListener(listener);

	  events = target._events;
	  if (events === undefined) {
	    events = target._events = Object.create(null);
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener !== undefined) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (existing === undefined) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] =
	        prepend ? [listener, existing] : [existing, listener];
	      // If we've already got an array, just append.
	    } else if (prepend) {
	      existing.unshift(listener);
	    } else {
	      existing.push(listener);
	    }

	    // Check for listener leak
	    m = _getMaxListeners(target);
	    if (m > 0 && existing.length > m && !existing.warned) {
	      existing.warned = true;
	      // No error code for this since it is a Warning
	      // eslint-disable-next-line no-restricted-syntax
	      var w = new Error('Possible EventEmitter memory leak detected. ' +
	                          existing.length + ' ' + String(type) + ' listeners ' +
	                          'added. Use emitter.setMaxListeners() to ' +
	                          'increase limit');
	      w.name = 'MaxListenersExceededWarning';
	      w.emitter = target;
	      w.type = type;
	      w.count = existing.length;
	      ProcessEmitWarning(w);
	    }
	  }

	  return target;
	}

	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function onceWrapper() {
	  if (!this.fired) {
	    this.target.removeListener(this.type, this.wrapFn);
	    this.fired = true;
	    if (arguments.length === 0)
	      return this.listener.call(this.target);
	    return this.listener.apply(this.target, arguments);
	  }
	}

	function _onceWrap(target, type, listener) {
	  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
	  var wrapped = onceWrapper.bind(state);
	  wrapped.listener = listener;
	  state.wrapFn = wrapped;
	  return wrapped;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  checkListener(listener);
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      checkListener(listener);
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// Emits a 'removeListener' event if and only if the listener was removed.
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      checkListener(listener);

	      events = this._events;
	      if (events === undefined)
	        return this;

	      list = events[type];
	      if (list === undefined)
	        return this;

	      if (list === listener || list.listener === listener) {
	        if (--this._eventsCount === 0)
	          this._events = Object.create(null);
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length - 1; i >= 0; i--) {
	          if (list[i] === listener || list[i].listener === listener) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (position === 0)
	          list.shift();
	        else {
	          spliceOne(list, position);
	        }

	        if (list.length === 1)
	          events[type] = list[0];

	        if (events.removeListener !== undefined)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events, i;

	      events = this._events;
	      if (events === undefined)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (events.removeListener === undefined) {
	        if (arguments.length === 0) {
	          this._events = Object.create(null);
	          this._eventsCount = 0;
	        } else if (events[type] !== undefined) {
	          if (--this._eventsCount === 0)
	            this._events = Object.create(null);
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        var key;
	        for (i = 0; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = Object.create(null);
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners !== undefined) {
	        // LIFO order
	        for (i = listeners.length - 1; i >= 0; i--) {
	          this.removeListener(type, listeners[i]);
	        }
	      }

	      return this;
	    };

	function _listeners(target, type, unwrap) {
	  var events = target._events;

	  if (events === undefined)
	    return [];

	  var evlistener = events[type];
	  if (evlistener === undefined)
	    return [];

	  if (typeof evlistener === 'function')
	    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

	  return unwrap ?
	    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
	}

	EventEmitter.prototype.listeners = function listeners(type) {
	  return _listeners(this, type, true);
	};

	EventEmitter.prototype.rawListeners = function rawListeners(type) {
	  return _listeners(this, type, false);
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events !== undefined) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener !== undefined) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
	};

	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i)
	    copy[i] = arr[i];
	  return copy;
	}

	function spliceOne(list, index) {
	  for (; index + 1 < list.length; index++)
	    list[index] = list[index + 1];
	  list.pop();
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function once(emitter, name) {
	  return new Promise(function (resolve, reject) {
	    function errorListener(err) {
	      emitter.removeListener(name, resolver);
	      reject(err);
	    }

	    function resolver() {
	      if (typeof emitter.removeListener === 'function') {
	        emitter.removeListener('error', errorListener);
	      }
	      resolve([].slice.call(arguments));
	    }
	    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
	    if (name !== 'error') {
	      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
	    }
	  });
	}

	function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
	  if (typeof emitter.on === 'function') {
	    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
	  }
	}

	function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
	  if (typeof emitter.on === 'function') {
	    if (flags.once) {
	      emitter.once(name, listener);
	    } else {
	      emitter.on(name, listener);
	    }
	  } else if (typeof emitter.addEventListener === 'function') {
	    // EventTarget does not have `error` event semantics like Node
	    // EventEmitters, we do not listen for `error` events here.
	    emitter.addEventListener(name, function wrapListener(arg) {
	      // IE does not have builtin `{ once: true }` support so we
	      // have to do it manually.
	      if (flags.once) {
	        emitter.removeEventListener(name, wrapListener);
	      }
	      listener(arg);
	    });
	  } else {
	    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
	  }
	}
	return events.exports;
}

var hasRequiredNoiceJsonRpc;

function requireNoiceJsonRpc () {
	if (hasRequiredNoiceJsonRpc) return noiceJsonRpc;
	hasRequiredNoiceJsonRpc = 1;
	Object.defineProperty(noiceJsonRpc, "__esModule", { value: true });
	const events_1 = requireEvents();
	class MessageError extends Error {
	    constructor(error) {
	        super(error.message);
	        this._code = error.code || 0;
	        this._data = error.data || null;
	    }
	    get code() {
	        return this._code;
	    }
	    get data() {
	        return this._data;
	    }
	}
	noiceJsonRpc.MessageError = MessageError;
	/**
	 * Creates a RPC Client.
	 * It is intentional that Client does not create a WebSocket object since we prefer composability
	 * The Client can be used to communicate over processes, http or anything that can send and receive strings
	 * It just needs to pass in an object that implements LikeSocket interface
	 */
	class Client extends events_1.EventEmitter {
	    constructor(socket, opts) {
	        super();
	        this._responsePromiseMap = new Map();
	        this._nextMessageId = 0;
	        this._connected = false;
	        this._emitLog = false;
	        this._consoleLog = false;
	        this._requestQueue = [];
	        this.setLogging(opts);
	        if (!socket) {
	            throw new TypeError('socket cannot be undefined or null');
	        }
	        this._socket = socket;
	        socket.on('open', () => {
	            this._connected = true;
	            this._sendQueuedRequests();
	        });
	        socket.on('message', (message) => this.processMessage(message));
	    }
	    processMessage(messageStr) {
	        this._logMessage(messageStr, 'receive');
	        let message;
	        // Ensure JSON is not malformed
	        try {
	            message = JSON.parse(messageStr);
	        }
	        catch (e) {
	            return this.emit('error', e);
	        }
	        // Check that messages is well formed
	        if (!message) {
	            this.emit('error', new Error(`Message cannot be null, empty or undefined`));
	        }
	        else if (message.id) {
	            if (this._responsePromiseMap.has(message.id)) {
	                // Resolve promise from pending message
	                const promise = this._responsePromiseMap.get(message.id);
	                if (message.result) {
	                    promise.resolve(message.result);
	                }
	                else if (message.error) {
	                    promise.reject(new MessageError(message.error));
	                }
	                else {
	                    this.emit('error', new Error(`Response must have result or error: ${messageStr}`));
	                }
	            }
	            else {
	                this.emit('error', new Error(`Response with id:${message.id} has no pending request`));
	            }
	        }
	        else if (message.method) {
	            // Server has sent a notification
	            this.emit(message.method, message.params);
	        }
	        else {
	            this.emit('error', new Error(`Invalid message: ${messageStr}`));
	        }
	    }
	    /** Set logging for all received and sent messages */
	    setLogging({ logEmit, logConsole } = {}) {
	        this._emitLog = logEmit;
	        this._consoleLog = logConsole;
	    }
	    _send(message) {
	        this._requestQueue.push(JSON.stringify(message));
	        this._sendQueuedRequests();
	    }
	    _sendQueuedRequests() {
	        if (this._connected) {
	            for (let messageStr of this._requestQueue) {
	                this._logMessage(messageStr, 'send');
	                this._socket.send(messageStr);
	            }
	            this._requestQueue = [];
	        }
	    }
	    _logMessage(message, direction) {
	        if (this._consoleLog) {
	            console.log(`Client ${direction === 'send' ? '>' : '<'}`, message);
	        }
	        if (this._emitLog) {
	            this.emit(direction, message);
	        }
	    }
	    call(method, params) {
	        const id = ++this._nextMessageId;
	        const message = { id, method, params };
	        return new Promise((resolve, reject) => {
	            try {
	                this._send(message);
	                this._responsePromiseMap.set(id, { resolve, reject });
	            }
	            catch (error) {
	                return reject(error);
	            }
	        });
	    }
	    notify(method, params) {
	        this._send({ method, params });
	    }
	    /**
	     * Builds an ES6 Proxy where api.domain.method(params) transates into client.send('{domain}.{method}', params) calls
	     * api.domain.on{method} will add event handlers for {method} events
	     * api.domain.emit{method} will send {method} notifications to the server
	     * The api object leads itself to a very clean interface i.e `await api.Domain.func(params)` calls
	     * This allows the consumer to abstract all the internal details of marshalling the message from function call to a string
	     * Calling client.api('') will return an unprefixed client. e.g api.hello() is equivalient to client.send('hello')
	     */
	    api(prefix) {
	        if (!Proxy) {
	            throw new Error('api() requires ES6 Proxy. Please use an ES6 compatible engine');
	        }
	        return new Proxy({}, {
	            get: (target, prop) => {
	                if (target[prop]) {
	                    return target[prop];
	                }
	                // Special handling for prototype so console intellisense works on noice objects
	                if (prop === '__proto__' || prop === 'prototype') {
	                    return Object.prototype;
	                }
	                else if (prefix === void 0) { // Prefix is undefined. Create domain prefix
	                    target[prop] = this.api(`${prop}.`);
	                }
	                else if (prop === 'on') {
	                    target[prop] = (method, handler) => this.on(`${prefix}${method}`, handler);
	                }
	                else if (prop === 'emit') {
	                    target[prop] = (method, params) => this.notify(`${prefix}${method}`, params);
	                }
	                else if (prop.substr(0, 2) === 'on' && prop.length > 3) { // TODO: deprecate this
	                    const method = prop[2].toLowerCase() + prop.substr(3);
	                    target[prop] = (handler) => this.on(`${prefix}${method}`, handler);
	                }
	                else if (prop.substr(0, 4) === 'emit' && prop.length > 5) { // TODO: deprecate this
	                    const method = prop[4].toLowerCase() + prop.substr(5);
	                    target[prop] = (params) => this.notify(`${prefix}${method}`, params);
	                }
	                else {
	                    const method = prop;
	                    target[prop] = (params) => this.call(`${prefix}${method}`, params);
	                }
	                return target[prop];
	            }
	        });
	    }
	}
	noiceJsonRpc.Client = Client;
	/**
	 * Creates a RPC Server.
	 * It is intentional that Server does not create a WebSocketServer object since we prefer composability
	 * The Server can be used to communicate over processes, http or anything that can send and receive strings
	 * It just needs to pass in an object that implements LikeSocketServer interface
	 */
	class Server extends events_1.EventEmitter {
	    constructor(server, opts) {
	        super();
	        this._exposedMethodsMap = new Map();
	        this._emitLog = false;
	        this._consoleLog = false;
	        this.setLogging(opts);
	        if (!server) {
	            throw new TypeError('server cannot be undefined or null');
	        }
	        this._socketServer = server;
	        server.on('connection', (socket) => {
	            socket.on('message', (message) => this.processMessage(message, socket));
	        });
	    }
	    processMessage(messageStr, socket) {
	        this._logMessage(messageStr, 'receive');
	        let request;
	        // Ensure JSON is not malformed
	        try {
	            request = JSON.parse(messageStr);
	        }
	        catch (e) {
	            return this._sendError(socket, request, -32700 /* ParseError */);
	        }
	        // Ensure method is atleast defined
	        if (request && request.method && typeof request.method === 'string') {
	            if (request.id && typeof request.id === 'number') {
	                const handler = this._exposedMethodsMap.get(request.method);
	                // Handler is defined so lets call it
	                if (handler) {
	                    try {
	                        const result = handler.call(null, request.params);
	                        if (result instanceof Promise) {
	                            // Result is a promise, so lets wait for the result and handle accordingly
	                            result.then((actualResult) => {
	                                this._send(socket, { id: request.id, result: actualResult || {} });
	                            }).catch((error) => {
	                                this._sendError(socket, request, -32603 /* InternalError */, error);
	                            });
	                        }
	                        else {
	                            // Result is not a promise so send immediately
	                            this._send(socket, { id: request.id, result: result || {} });
	                        }
	                    }
	                    catch (error) {
	                        this._sendError(socket, request, -32603 /* InternalError */, error);
	                    }
	                }
	                else {
	                    this._sendError(socket, request, -32601 /* MethodNotFound */);
	                }
	            }
	            else {
	                // Message is a notification, so just emit
	                this.emit(request.method, request.params);
	            }
	        }
	        else {
	            // No method property, send InvalidRequest error
	            this._sendError(socket, request, -32600 /* InvalidRequest */);
	        }
	    }
	    /** Set logging for all received and sent messages */
	    setLogging({ logEmit, logConsole } = {}) {
	        this._emitLog = logEmit;
	        this._consoleLog = logConsole;
	    }
	    _logMessage(messageStr, direction) {
	        if (this._consoleLog) {
	            console.log(`Server ${direction === 'send' ? '>' : '<'}`, messageStr);
	        }
	        if (this._emitLog) {
	            this.emit(direction, messageStr);
	        }
	    }
	    _send(socket, message) {
	        const messageStr = JSON.stringify(message);
	        this._logMessage(messageStr, 'send');
	        socket.send(messageStr);
	    }
	    _sendError(socket, request, errorCode, error) {
	        try {
	            this._send(socket, {
	                id: request && request.id || -1,
	                error: this._errorFromCode(errorCode, error && error.message || error, request && request.method)
	            });
	        }
	        catch (error) {
	            // Since we can't even send errors, do nothing. The connection was probably closed.
	        }
	    }
	    _errorFromCode(code, data, method) {
	        let message = '';
	        switch (code) {
	            case -32603 /* InternalError */:
	                message = `InternalError: Internal Error when calling '${method}'`;
	                break;
	            case -32601 /* MethodNotFound */:
	                message = `MethodNotFound: '${method}' wasn't found`;
	                break;
	            case -32600 /* InvalidRequest */:
	                message = 'InvalidRequest: JSON sent is not a valid request object';
	                break;
	            case -32700 /* ParseError */:
	                message = 'ParseError: invalid JSON received';
	                break;
	        }
	        return { code, message, data };
	    }
	    expose(method, handler) {
	        this._exposedMethodsMap.set(method, handler);
	    }
	    notify(method, params) {
	        // Broadcast message to all clients
	        if (this._socketServer.clients) {
	            for (let ws of this._socketServer.clients) {
	                this._send(ws, { method, params });
	            }
	        }
	        else {
	            throw new Error('SocketServer does not support broadcasting. No "clients: LikeSocket[]" property found');
	        }
	    }
	    /**
	     * Builds an ES6 Proxy where api.domain.expose(module) exposes all the functions in the module over RPC
	     * api.domain.emit{method} calls will send {method} notifications to the client
	     * The api object leads itself to a very clean interface i.e `await api.Domain.func(params)` calls
	     * This allows the consumer to abstract all the internal details of marshalling the message from function call to a string
	     */
	    api(prefix) {
	        if (!Proxy) {
	            throw new Error('api() requires ES6 Proxy. Please use an ES6 compatible engine');
	        }
	        return new Proxy({}, {
	            get: (target, prop) => {
	                if (target[prop]) {
	                    return target[prop];
	                }
	                if (prop === '__proto__' || prop === 'prototype') {
	                    return Object.prototype;
	                }
	                else if (prefix === void 0) {
	                    target[prop] = this.api(`${prop}.`);
	                }
	                else if (prop === 'on') {
	                    target[prop] = (method, handler) => this.on(`${prefix}${method}`, handler);
	                }
	                else if (prop === 'emit') {
	                    target[prop] = (method, params) => this.notify(`${prefix}${method}`, params);
	                }
	                else if (prop.substr(0, 2) === 'on' && prop.length > 3) { // TODO deprecate this
	                    const method = prop[2].toLowerCase() + prop.substr(3);
	                    target[prop] = (handler) => this.on(`${prefix}${method}`, handler);
	                }
	                else if (prop.substr(0, 4) === 'emit' && prop.length > 5) { // TODO deprecate this
	                    const method = prop[4].toLowerCase() + prop.substr(5);
	                    target[prop] = (params) => this.notify(`${prefix}${method}`, params);
	                }
	                else if (prop === 'expose') {
	                    target[prop] = (module) => {
	                        if (!module || typeof module !== 'object') {
	                            throw new Error('Expected an iterable object to expose functions');
	                        }
	                        for (let funcName in module) {
	                            if (typeof module[funcName] === 'function') {
	                                this.expose(`${prefix}${funcName}`, module[funcName].bind(module));
	                            }
	                        }
	                    };
	                }
	                else {
	                    return undefined;
	                }
	                return target[prop];
	            }
	        });
	    }
	}
	noiceJsonRpc.Server = Server;
	return noiceJsonRpc;
}

var record_controller_interfaces = {};

var trace = {};

var hasRequiredTrace;

function requireTrace () {
	if (hasRequiredTrace) return trace;
	hasRequiredTrace = 1;
	// Copyright (C) 2024 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(trace, "__esModule", { value: true });
	trace.TRACE_SUFFIX = void 0;
	trace.TRACE_SUFFIX = '.perfetto-trace';
	
	return trace;
}

var hasRequiredRecord_controller_interfaces;

function requireRecord_controller_interfaces () {
	if (hasRequiredRecord_controller_interfaces) return record_controller_interfaces;
	hasRequiredRecord_controller_interfaces = 1;
	// Copyright (C) 2019 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(record_controller_interfaces, "__esModule", { value: true });
	record_controller_interfaces.RpcConsumerPort = void 0;
	const trace_1 = requireTrace();
	class RpcConsumerPort {
	    // The responses of the call invocations should be sent through this listener.
	    // This is done by the 3 "send" methods in this abstract class.
	    consumerPortListener;
	    constructor(consumerPortListener) {
	        this.consumerPortListener = consumerPortListener;
	    }
	    sendMessage(data) {
	        this.consumerPortListener.onConsumerPortResponse(data);
	    }
	    sendErrorMessage(message) {
	        this.consumerPortListener.onError(message);
	    }
	    sendStatus(status) {
	        this.consumerPortListener.onStatus(status);
	    }
	    // Allows the recording controller to customise the suffix added to recorded
	    // traces when they are downloaded. In the general case this will be
	    // .perfetto-trace however if the trace is recorded compressed if could be
	    // .perfetto-trace.gz etc.
	    getRecordedTraceSuffix() {
	        return trace_1.TRACE_SUFFIX;
	    }
	}
	record_controller_interfaces.RpcConsumerPort = RpcConsumerPort;
	
	return record_controller_interfaces;
}

var trace_config_utils = {};

var protos$2 = {};

var indexMinimal = {};

var minimal$1 = {};

var aspromise;
var hasRequiredAspromise;

function requireAspromise () {
	if (hasRequiredAspromise) return aspromise;
	hasRequiredAspromise = 1;
	aspromise = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx/*, varargs */) {
	    var params  = new Array(arguments.length - 1),
	        offset  = 0,
	        index   = 2,
	        pending = true;
	    while (index < arguments.length)
	        params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err/*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err)
	                    reject(err);
	                else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length)
	                        params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}
	return aspromise;
}

var eventemitter;
var hasRequiredEventemitter;

function requireEventemitter () {
	if (hasRequiredEventemitter) return eventemitter;
	hasRequiredEventemitter = 1;
	eventemitter = EventEmitter;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn  : fn,
	        ctx : ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.off = function off(evt, fn) {
	    if (evt === undefined)
	        this._listeners = {};
	    else {
	        if (fn === undefined)
	            this._listeners[evt] = [];
	        else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;)
	                if (listeners[i].fn === fn)
	                    listeners.splice(i, 1);
	                else
	                    ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;)
	            args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;)
	            listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};
	return eventemitter;
}

var float;
var hasRequiredFloat;

function requireFloat () {
	if (hasRequiredFloat) return float;
	hasRequiredFloat = 1;

	float = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function() {

	        var f32 = new Float32Array([ -0 ]),
	            f8b = new Uint8Array(f32.buffer),
	            le  = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos    ];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	    // float: ieee754
	    })(); else (function() {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0)
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
	            else if (isNaN(val))
	                writeUint(2143289344, buf, pos);
	            else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
	            else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
	            else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 1.401298464324817e-45 * mantissa
	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function() {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le  = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos    ];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	    // double: ieee754
	    })(); else (function() {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) { // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024)
	                        exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 5e-324 * mantissa
	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE(val, buf, pos) {
	    buf[pos    ] =  val        & 255;
	    buf[pos + 1] =  val >>> 8  & 255;
	    buf[pos + 2] =  val >>> 16 & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	function writeUintBE(val, buf, pos) {
	    buf[pos    ] =  val >>> 24;
	    buf[pos + 1] =  val >>> 16 & 255;
	    buf[pos + 2] =  val >>> 8  & 255;
	    buf[pos + 3] =  val        & 255;
	}

	function readUintLE(buf, pos) {
	    return (buf[pos    ]
	          | buf[pos + 1] << 8
	          | buf[pos + 2] << 16
	          | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE(buf, pos) {
	    return (buf[pos    ] << 24
	          | buf[pos + 1] << 16
	          | buf[pos + 2] << 8
	          | buf[pos + 3]) >>> 0;
	}
	return float;
}

var inquire_1;
var hasRequiredInquire;

function requireInquire () {
	if (hasRequiredInquire) return inquire_1;
	hasRequiredInquire = 1;
	inquire_1 = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = undefined; // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length))
	            return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}
	return inquire_1;
}

var utf8 = {};

var hasRequiredUtf8;

function requireUtf8 () {
	if (hasRequiredUtf8) return utf8;
	hasRequiredUtf8 = 1;
	(function (exports) {

		/**
		 * A minimal UTF8 implementation for number arrays.
		 * @memberof util
		 * @namespace
		 */
		var utf8 = exports;

		/**
		 * Calculates the UTF8 byte length of a string.
		 * @param {string} string String
		 * @returns {number} Byte length
		 */
		utf8.length = function utf8_length(string) {
		    var len = 0,
		        c = 0;
		    for (var i = 0; i < string.length; ++i) {
		        c = string.charCodeAt(i);
		        if (c < 128)
		            len += 1;
		        else if (c < 2048)
		            len += 2;
		        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
		            ++i;
		            len += 4;
		        } else
		            len += 3;
		    }
		    return len;
		};

		/**
		 * Reads UTF8 bytes as a string.
		 * @param {Uint8Array} buffer Source buffer
		 * @param {number} start Source start
		 * @param {number} end Source end
		 * @returns {string} String read
		 */
		utf8.read = function utf8_read(buffer, start, end) {
		    var len = end - start;
		    if (len < 1)
		        return "";
		    var parts = null,
		        chunk = [],
		        i = 0, // char offset
		        t;     // temporary
		    while (start < end) {
		        t = buffer[start++];
		        if (t < 128)
		            chunk[i++] = t;
		        else if (t > 191 && t < 224)
		            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
		        else if (t > 239 && t < 365) {
		            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
		            chunk[i++] = 0xD800 + (t >> 10);
		            chunk[i++] = 0xDC00 + (t & 1023);
		        } else
		            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
		        if (i > 8191) {
		            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
		            i = 0;
		        }
		    }
		    if (parts) {
		        if (i)
		            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
		        return parts.join("");
		    }
		    return String.fromCharCode.apply(String, chunk.slice(0, i));
		};

		/**
		 * Writes a string as UTF8 bytes.
		 * @param {string} string Source string
		 * @param {Uint8Array} buffer Destination buffer
		 * @param {number} offset Destination offset
		 * @returns {number} Bytes written
		 */
		utf8.write = function utf8_write(string, buffer, offset) {
		    var start = offset,
		        c1, // character 1
		        c2; // character 2
		    for (var i = 0; i < string.length; ++i) {
		        c1 = string.charCodeAt(i);
		        if (c1 < 128) {
		            buffer[offset++] = c1;
		        } else if (c1 < 2048) {
		            buffer[offset++] = c1 >> 6       | 192;
		            buffer[offset++] = c1       & 63 | 128;
		        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
		            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
		            ++i;
		            buffer[offset++] = c1 >> 18      | 240;
		            buffer[offset++] = c1 >> 12 & 63 | 128;
		            buffer[offset++] = c1 >> 6  & 63 | 128;
		            buffer[offset++] = c1       & 63 | 128;
		        } else {
		            buffer[offset++] = c1 >> 12      | 224;
		            buffer[offset++] = c1 >> 6  & 63 | 128;
		            buffer[offset++] = c1       & 63 | 128;
		        }
		    }
		    return offset - start;
		}; 
	} (utf8));
	return utf8;
}

var pool_1;
var hasRequiredPool;

function requirePool () {
	if (hasRequiredPool) return pool_1;
	hasRequiredPool = 1;
	pool_1 = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE   = size || 8192;
	    var MAX    = SIZE >>> 1;
	    var slab   = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX)
	            return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}
	return pool_1;
}

var longbits;
var hasRequiredLongbits;

function requireLongbits () {
	if (hasRequiredLongbits) return longbits;
	hasRequiredLongbits = 1;
	longbits = LongBits;

	var util = requireMinimal$1();

	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero = LongBits.zero = new LongBits(0, 0);

	zero.toNumber = function() { return 0; };
	zero.zzEncode = zero.zzDecode = function() { return this; };
	zero.length = function() { return 1; };

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.fromNumber = function fromNumber(value) {
	    if (value === 0)
	        return zero;
	    var sign = value < 0;
	    if (sign)
	        value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295)
	                hi = 0;
	        }
	    }
	    return new LongBits(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits.from = function from(value) {
	    if (typeof value === "number")
	        return LongBits.fromNumber(value);
	    if (util.isString(value)) {
	        /* istanbul ignore else */
	        if (util.Long)
	            value = util.Long.fromString(value);
	        else
	            return LongBits.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi     >>> 0;
	        if (!lo)
	            hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits.prototype.toLong = function toLong(unsigned) {
	    return util.Long
	        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	        /* istanbul ignore next */
	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits.fromHash = function fromHash(hash) {
	    if (hash === zeroHash)
	        return zero;
	    return new LongBits(
	        ( charCodeAt.call(hash, 0)
	        | charCodeAt.call(hash, 1) << 8
	        | charCodeAt.call(hash, 2) << 16
	        | charCodeAt.call(hash, 3) << 24) >>> 0
	    ,
	        ( charCodeAt.call(hash, 4)
	        | charCodeAt.call(hash, 5) << 8
	        | charCodeAt.call(hash, 6) << 16
	        | charCodeAt.call(hash, 7) << 24) >>> 0
	    );
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits.prototype.toHash = function toHash() {
	    return String.fromCharCode(
	        this.lo        & 255,
	        this.lo >>> 8  & 255,
	        this.lo >>> 16 & 255,
	        this.lo >>> 24      ,
	        this.hi        & 255,
	        this.hi >>> 8  & 255,
	        this.hi >>> 16 & 255,
	        this.hi >>> 24
	    );
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzEncode = function zzEncode() {
	    var mask =   this.hi >> 31;
	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits.prototype.length = function length() {
	    var part0 =  this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 =  this.hi >>> 24;
	    return part2 === 0
	         ? part1 === 0
	           ? part0 < 16384
	             ? part0 < 128 ? 1 : 2
	             : part0 < 2097152 ? 3 : 4
	           : part1 < 16384
	             ? part1 < 128 ? 5 : 6
	             : part1 < 2097152 ? 7 : 8
	         : part2 < 128 ? 9 : 10;
	};
	return longbits;
}

var hasRequiredMinimal$1;

function requireMinimal$1 () {
	if (hasRequiredMinimal$1) return minimal$1;
	hasRequiredMinimal$1 = 1;
	(function (exports) {
		var util = exports;

		// used to return a Promise where callback is omitted
		util.asPromise = requireAspromise();

		// converts to / from base64 encoded strings
		util.base64 = requireBase64();

		// base class of rpc.Service
		util.EventEmitter = requireEventemitter();

		// float handling accross browsers
		util.float = requireFloat();

		// requires modules optionally and hides the call from bundlers
		util.inquire = requireInquire();

		// converts to / from utf8 encoded strings
		util.utf8 = requireUtf8();

		// provides a node-like buffer pool in the browser
		util.pool = requirePool();

		// utility to work with the low and high bits of a 64 bit value
		util.LongBits = requireLongbits();

		/**
		 * Whether running within node or not.
		 * @memberof util
		 * @type {boolean}
		 */
		util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
		                   && commonjsGlobal
		                   && commonjsGlobal.process
		                   && commonjsGlobal.process.versions
		                   && commonjsGlobal.process.versions.node);

		/**
		 * Global object reference.
		 * @memberof util
		 * @type {Object}
		 */
		util.global = util.isNode && commonjsGlobal
		           || typeof window !== "undefined" && window
		           || typeof self   !== "undefined" && self
		           || commonjsGlobal; // eslint-disable-line no-invalid-this

		/**
		 * An immuable empty array.
		 * @memberof util
		 * @type {Array.<*>}
		 * @const
		 */
		util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

		/**
		 * An immutable empty object.
		 * @type {Object}
		 * @const
		 */
		util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

		/**
		 * Tests if the specified value is an integer.
		 * @function
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is an integer
		 */
		util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
		    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
		};

		/**
		 * Tests if the specified value is a string.
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is a string
		 */
		util.isString = function isString(value) {
		    return typeof value === "string" || value instanceof String;
		};

		/**
		 * Tests if the specified value is a non-null object.
		 * @param {*} value Value to test
		 * @returns {boolean} `true` if the value is a non-null object
		 */
		util.isObject = function isObject(value) {
		    return value && typeof value === "object";
		};

		/**
		 * Checks if a property on a message is considered to be present.
		 * This is an alias of {@link util.isSet}.
		 * @function
		 * @param {Object} obj Plain object or message instance
		 * @param {string} prop Property name
		 * @returns {boolean} `true` if considered to be present, otherwise `false`
		 */
		util.isset =

		/**
		 * Checks if a property on a message is considered to be present.
		 * @param {Object} obj Plain object or message instance
		 * @param {string} prop Property name
		 * @returns {boolean} `true` if considered to be present, otherwise `false`
		 */
		util.isSet = function isSet(obj, prop) {
		    var value = obj[prop];
		    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
		        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
		    return false;
		};

		/**
		 * Any compatible Buffer instance.
		 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
		 * @interface Buffer
		 * @extends Uint8Array
		 */

		/**
		 * Node's Buffer class if available.
		 * @type {Constructor<Buffer>}
		 */
		util.Buffer = (function() {
		    try {
		        var Buffer = util.inquire("buffer").Buffer;
		        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
		        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
		    } catch (e) {
		        /* istanbul ignore next */
		        return null;
		    }
		})();

		// Internal alias of or polyfull for Buffer.from.
		util._Buffer_from = null;

		// Internal alias of or polyfill for Buffer.allocUnsafe.
		util._Buffer_allocUnsafe = null;

		/**
		 * Creates a new buffer of whatever type supported by the environment.
		 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
		 * @returns {Uint8Array|Buffer} Buffer
		 */
		util.newBuffer = function newBuffer(sizeOrArray) {
		    /* istanbul ignore next */
		    return typeof sizeOrArray === "number"
		        ? util.Buffer
		            ? util._Buffer_allocUnsafe(sizeOrArray)
		            : new util.Array(sizeOrArray)
		        : util.Buffer
		            ? util._Buffer_from(sizeOrArray)
		            : typeof Uint8Array === "undefined"
		                ? sizeOrArray
		                : new Uint8Array(sizeOrArray);
		};

		/**
		 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
		 * @type {Constructor<Uint8Array>}
		 */
		util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

		/**
		 * Any compatible Long instance.
		 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
		 * @interface Long
		 * @property {number} low Low bits
		 * @property {number} high High bits
		 * @property {boolean} unsigned Whether unsigned or not
		 */

		/**
		 * Long.js's Long class if available.
		 * @type {Constructor<Long>}
		 */
		util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
		         || /* istanbul ignore next */ util.global.Long
		         || util.inquire("long");

		/**
		 * Regular expression used to verify 2 bit (`bool`) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key2Re = /^true|false|0|1$/;

		/**
		 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

		/**
		 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
		 * @type {RegExp}
		 * @const
		 */
		util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

		/**
		 * Converts a number or long to an 8 characters long hash string.
		 * @param {Long|number} value Value to convert
		 * @returns {string} Hash
		 */
		util.longToHash = function longToHash(value) {
		    return value
		        ? util.LongBits.from(value).toHash()
		        : util.LongBits.zeroHash;
		};

		/**
		 * Converts an 8 characters long hash string to a long or number.
		 * @param {string} hash Hash
		 * @param {boolean} [unsigned=false] Whether unsigned or not
		 * @returns {Long|number} Original value
		 */
		util.longFromHash = function longFromHash(hash, unsigned) {
		    var bits = util.LongBits.fromHash(hash);
		    if (util.Long)
		        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
		    return bits.toNumber(Boolean(unsigned));
		};

		/**
		 * Merges the properties of the source object into the destination object.
		 * @memberof util
		 * @param {Object.<string,*>} dst Destination object
		 * @param {Object.<string,*>} src Source object
		 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
		 * @returns {Object.<string,*>} Destination object
		 */
		function merge(dst, src, ifNotSet) { // used by converters
		    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
		        if (dst[keys[i]] === undefined || !ifNotSet)
		            dst[keys[i]] = src[keys[i]];
		    return dst;
		}

		util.merge = merge;

		/**
		 * Converts the first character of a string to lower case.
		 * @param {string} str String to convert
		 * @returns {string} Converted string
		 */
		util.lcFirst = function lcFirst(str) {
		    return str.charAt(0).toLowerCase() + str.substring(1);
		};

		/**
		 * Creates a custom error constructor.
		 * @memberof util
		 * @param {string} name Error name
		 * @returns {Constructor<Error>} Custom error constructor
		 */
		function newError(name) {

		    function CustomError(message, properties) {

		        if (!(this instanceof CustomError))
		            return new CustomError(message, properties);

		        // Error.call(this, message);
		        // ^ just returns a new error instance because the ctor can be called as a function

		        Object.defineProperty(this, "message", { get: function() { return message; } });

		        /* istanbul ignore next */
		        if (Error.captureStackTrace) // node
		            Error.captureStackTrace(this, CustomError);
		        else
		            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

		        if (properties)
		            merge(this, properties);
		    }

		    CustomError.prototype = Object.create(Error.prototype, {
		        constructor: {
		            value: CustomError,
		            writable: true,
		            enumerable: false,
		            configurable: true,
		        },
		        name: {
		            get: function get() { return name; },
		            set: undefined,
		            enumerable: false,
		            // configurable: false would accurately preserve the behavior of
		            // the original, but I'm guessing that was not intentional.
		            // For an actual error subclass, this property would
		            // be configurable.
		            configurable: true,
		        },
		        toString: {
		            value: function value() { return this.name + ": " + this.message; },
		            writable: true,
		            enumerable: false,
		            configurable: true,
		        },
		    });

		    return CustomError;
		}

		util.newError = newError;

		/**
		 * Constructs a new protocol error.
		 * @classdesc Error subclass indicating a protocol specifc error.
		 * @memberof util
		 * @extends Error
		 * @template T extends Message<T>
		 * @constructor
		 * @param {string} message Error message
		 * @param {Object.<string,*>} [properties] Additional properties
		 * @example
		 * try {
		 *     MyMessage.decode(someBuffer); // throws if required fields are missing
		 * } catch (e) {
		 *     if (e instanceof ProtocolError && e.instance)
		 *         console.log("decoded so far: " + JSON.stringify(e.instance));
		 * }
		 */
		util.ProtocolError = newError("ProtocolError");

		/**
		 * So far decoded message instance.
		 * @name util.ProtocolError#instance
		 * @type {Message<T>}
		 */

		/**
		 * A OneOf getter as returned by {@link util.oneOfGetter}.
		 * @typedef OneOfGetter
		 * @type {function}
		 * @returns {string|undefined} Set field name, if any
		 */

		/**
		 * Builds a getter for a oneof's present field name.
		 * @param {string[]} fieldNames Field names
		 * @returns {OneOfGetter} Unbound getter
		 */
		util.oneOfGetter = function getOneOf(fieldNames) {
		    var fieldMap = {};
		    for (var i = 0; i < fieldNames.length; ++i)
		        fieldMap[fieldNames[i]] = 1;

		    /**
		     * @returns {string|undefined} Set field name, if any
		     * @this Object
		     * @ignore
		     */
		    return function() { // eslint-disable-line consistent-return
		        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
		            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
		                return keys[i];
		    };
		};

		/**
		 * A OneOf setter as returned by {@link util.oneOfSetter}.
		 * @typedef OneOfSetter
		 * @type {function}
		 * @param {string|undefined} value Field name
		 * @returns {undefined}
		 */

		/**
		 * Builds a setter for a oneof's present field name.
		 * @param {string[]} fieldNames Field names
		 * @returns {OneOfSetter} Unbound setter
		 */
		util.oneOfSetter = function setOneOf(fieldNames) {

		    /**
		     * @param {string} name Field name
		     * @returns {undefined}
		     * @this Object
		     * @ignore
		     */
		    return function(name) {
		        for (var i = 0; i < fieldNames.length; ++i)
		            if (fieldNames[i] !== name)
		                delete this[fieldNames[i]];
		    };
		};

		/**
		 * Default conversion options used for {@link Message#toJSON} implementations.
		 *
		 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
		 *
		 * - Longs become strings
		 * - Enums become string keys
		 * - Bytes become base64 encoded strings
		 * - (Sub-)Messages become plain objects
		 * - Maps become plain objects with all string keys
		 * - Repeated fields become arrays
		 * - NaN and Infinity for float and double fields become strings
		 *
		 * @type {IConversionOptions}
		 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
		 */
		util.toJSONOptions = {
		    longs: String,
		    enums: String,
		    bytes: String,
		    json: true
		};

		// Sets up buffer utility according to the environment (called in index-minimal)
		util._configure = function() {
		    var Buffer = util.Buffer;
		    /* istanbul ignore if */
		    if (!Buffer) {
		        util._Buffer_from = util._Buffer_allocUnsafe = null;
		        return;
		    }
		    // because node 4.x buffers are incompatible & immutable
		    // see: https://github.com/dcodeIO/protobuf.js/pull/665
		    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
		        /* istanbul ignore next */
		        function Buffer_from(value, encoding) {
		            return new Buffer(value, encoding);
		        };
		    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
		        /* istanbul ignore next */
		        function Buffer_allocUnsafe(size) {
		            return new Buffer(size);
		        };
		}; 
	} (minimal$1));
	return minimal$1;
}

var writer;
var hasRequiredWriter;

function requireWriter () {
	if (hasRequiredWriter) return writer;
	hasRequiredWriter = 1;
	writer = Writer;

	var util      = requireMinimal$1();

	var BufferWriter; // cyclic

	var LongBits  = util.LongBits,
	    base64    = util.base64,
	    utf8      = util.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	var create = function create() {
	    return util.Buffer
	        ? function create_buffer_setup() {
	            return (Writer.create = function create_buffer() {
	                return new BufferWriter();
	            })();
	        }
	        /* istanbul ignore next */
	        : function create_array() {
	            return new Writer();
	        };
	};

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer.create = create();

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer.alloc = function alloc(size) {
	    return new util.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (util.Array !== Array)
	    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp(
	        (value = value >>> 0)
	                < 128       ? 1
	        : value < 16384     ? 2
	        : value < 2097152   ? 3
	        : value < 268435456 ? 4
	        :                     5,
	    value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.int32 = function write_int32(value) {
	    return value < 0
	        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
	        : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.int64 = Writer.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos    ] =  val         & 255;
	    buf[pos + 1] =  val >>> 8   & 255;
	    buf[pos + 2] =  val >>> 16  & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.sfixed32 = Writer.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer.prototype.sfixed64 = Writer.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.float = function write_float(value) {
	    return this._push(util.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.double = function write_double(value) {
	    return this._push(util.float.writeDoubleLE, 8, value);
	};

	var writeBytes = util.Array.prototype.set
	    ? function writeBytes_set(val, buf, pos) {
	        buf.set(val, pos); // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytes_for(val, buf, pos) {
	        for (var i = 0; i < val.length; ++i)
	            buf[pos + i] = val[i];
	    };

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len)
	        return this._push(writeByte, 1, 0);
	    if (util.isString(value)) {
	        var buf = Writer.alloc(len = base64.length(value));
	        base64.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer.prototype.string = function write_string(value) {
	    var len = utf8.length(value);
	    return len
	        ? this.uint32(len)._push(utf8.write, len, value)
	        : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.reset = function reset() {
	    if (this.states) {
	        this.head   = this.states.head;
	        this.tail   = this.states.tail;
	        this.len    = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop, 0, 0);
	        this.len  = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len  = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer.prototype.finish = function finish() {
	    var head = this.head.next, // skip noop
	        buf  = this.constructor.alloc(this.len),
	        pos  = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer._configure = function(BufferWriter_) {
	    BufferWriter = BufferWriter_;
	    Writer.create = create();
	    BufferWriter._configure();
	};
	return writer;
}

var writer_buffer;
var hasRequiredWriter_buffer;

function requireWriter_buffer () {
	if (hasRequiredWriter_buffer) return writer_buffer;
	hasRequiredWriter_buffer = 1;
	writer_buffer = BufferWriter;

	// extends Writer
	var Writer = requireWriter();
	(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

	var util = requireMinimal$1();

	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter() {
	    Writer.call(this);
	}

	BufferWriter._configure = function () {
	    /**
	     * Allocates a buffer of the specified size.
	     * @function
	     * @param {number} size Buffer size
	     * @returns {Buffer} Buffer
	     */
	    BufferWriter.alloc = util._Buffer_allocUnsafe;

	    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
	        ? function writeBytesBuffer_set(val, buf, pos) {
	          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	          // also works for plain array values
	        }
	        /* istanbul ignore next */
	        : function writeBytesBuffer_copy(val, buf, pos) {
	          if (val.copy) // Buffer values
	            val.copy(buf, pos, 0, val.length);
	          else for (var i = 0; i < val.length;) // plain array values
	            buf[pos++] = val[i++];
	        };
	};


	/**
	 * @override
	 */
	BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
	    if (util.isString(value))
	        value = util._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len)
	        this._push(BufferWriter.writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        util.utf8.write(val, buf, pos);
	    else if (buf.utf8Write)
	        buf.utf8Write(val, pos);
	    else
	        buf.write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter.prototype.string = function write_string_buffer(value) {
	    var len = util.Buffer.byteLength(value);
	    this.uint32(len);
	    if (len)
	        this._push(writeStringBuffer, len, value);
	    return this;
	};


	/**
	 * Finishes the write operation.
	 * @name BufferWriter#finish
	 * @function
	 * @returns {Buffer} Finished buffer
	 */

	BufferWriter._configure();
	return writer_buffer;
}

var reader;
var hasRequiredReader;

function requireReader () {
	if (hasRequiredReader) return reader;
	hasRequiredReader = 1;
	reader = Reader;

	var util      = requireMinimal$1();

	var BufferReader; // cyclic

	var LongBits  = util.LongBits,
	    utf8      = util.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined"
	    ? function create_typed_array(buffer) {
	        if (buffer instanceof Uint8Array || Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    }
	    /* istanbul ignore next */
	    : function create_array(buffer) {
	        if (Array.isArray(buffer))
	            return new Reader(buffer);
	        throw Error("illegal buffer");
	    };

	var create = function create() {
	    return util.Buffer
	        ? function create_buffer_setup(buffer) {
	            return (Reader.create = function create_buffer(buffer) {
	                return util.Buffer.isBuffer(buffer)
	                    ? new BufferReader(buffer)
	                    /* istanbul ignore next */
	                    : create_array(buffer);
	            })(buffer);
	        }
	        /* istanbul ignore next */
	        : create_array;
	};

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader.create = create();

	Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.uint32 = (function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	})();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) { // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
	        if (this.buf[this.pos++] < 128)
	            return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) { // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
	    return (buf[end - 4]
	          | buf[end - 3] << 8
	          | buf[end - 2] << 16
	          | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64(/* this: Reader */) {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 8);

	    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start  = this.pos,
	        end    = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len)
	        throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);

	    if (start === end) { // fix for IE 10/Win8 and others' subarray returning array of size 1
	        var nativeBuffer = util.Buffer;
	        return nativeBuffer
	            ? nativeBuffer.alloc(0)
	            : new this.buf.constructor(0);
	    }
	    return this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len)
	            throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader.prototype.skipType = function(wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            while ((wireType = this.uint32() & 7) !== 4) {
	                this.skipType(wireType);
	            }
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader._configure = function(BufferReader_) {
	    BufferReader = BufferReader_;
	    Reader.create = create();
	    BufferReader._configure();

	    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
	    util.merge(Reader.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};
	return reader;
}

var reader_buffer;
var hasRequiredReader_buffer;

function requireReader_buffer () {
	if (hasRequiredReader_buffer) return reader_buffer;
	hasRequiredReader_buffer = 1;
	reader_buffer = BufferReader;

	// extends Reader
	var Reader = requireReader();
	(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

	var util = requireMinimal$1();

	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader(buffer) {
	    Reader.call(this, buffer);

	    /**
	     * Read buffer.
	     * @name BufferReader#buf
	     * @type {Buffer}
	     */
	}

	BufferReader._configure = function () {
	    /* istanbul ignore else */
	    if (util.Buffer)
	        BufferReader.prototype._slice = util.Buffer.prototype.slice;
	};


	/**
	 * @override
	 */
	BufferReader.prototype.string = function read_string_buffer() {
	    var len = this.uint32(); // modifies pos
	    return this.buf.utf8Slice
	        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
	        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @name BufferReader#bytes
	 * @function
	 * @returns {Buffer} Value read
	 */

	BufferReader._configure();
	return reader_buffer;
}

var rpc = {};

var service;
var hasRequiredService;

function requireService () {
	if (hasRequiredService) return service;
	hasRequiredService = 1;
	service = Service;

	var util = requireMinimal$1();

	// Extends EventEmitter
	(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function")
	        throw TypeError("rpcImpl must be a function");

	    util.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request)
	        throw TypeError("request must be specified");

	    var self = this;
	    if (!callback)
	        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function() { callback(Error("already ended")); }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(
	            method,
	            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
	            function rpcCallback(err, response) {

	                if (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }

	                if (response === null) {
	                    self.end(/* endedByRPC */ true);
	                    return undefined;
	                }

	                if (!(response instanceof responseCtor)) {
	                    try {
	                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                    } catch (err) {
	                        self.emit("error", err, method);
	                        return callback(err);
	                    }
	                }

	                self.emit("data", response, method);
	                return callback(null, response);
	            }
	        );
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function() { callback(err); }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};
	return service;
}

var hasRequiredRpc;

function requireRpc () {
	if (hasRequiredRpc) return rpc;
	hasRequiredRpc = 1;
	(function (exports) {

		/**
		 * Streaming RPC helpers.
		 * @namespace
		 */
		var rpc = exports;

		/**
		 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
		 * @typedef RPCImpl
		 * @type {function}
		 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
		 * @param {Uint8Array} requestData Request data
		 * @param {RPCImplCallback} callback Callback function
		 * @returns {undefined}
		 * @example
		 * function rpcImpl(method, requestData, callback) {
		 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
		 *         throw Error("no such method");
		 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
		 *         callback(err, responseData);
		 *     });
		 * }
		 */

		/**
		 * Node-style callback as used by {@link RPCImpl}.
		 * @typedef RPCImplCallback
		 * @type {function}
		 * @param {Error|null} error Error, if any, otherwise `null`
		 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
		 * @returns {undefined}
		 */

		rpc.Service = requireService(); 
	} (rpc));
	return rpc;
}

var roots;
var hasRequiredRoots;

function requireRoots () {
	if (hasRequiredRoots) return roots;
	hasRequiredRoots = 1;
	roots = {};

	/**
	 * Named roots.
	 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
	 * Can also be used manually to make roots available across modules.
	 * @name roots
	 * @type {Object.<string,Root>}
	 * @example
	 * // pbjs -r myroot -o compiled.js ...
	 *
	 * // in another module:
	 * require("./compiled.js");
	 *
	 * // in any subsequent module:
	 * var root = protobuf.roots["myroot"];
	 */
	return roots;
}

var hasRequiredIndexMinimal;

function requireIndexMinimal () {
	if (hasRequiredIndexMinimal) return indexMinimal;
	hasRequiredIndexMinimal = 1;
	(function (exports) {
		var protobuf = exports;

		/**
		 * Build type, one of `"full"`, `"light"` or `"minimal"`.
		 * @name build
		 * @type {string}
		 * @const
		 */
		protobuf.build = "minimal";

		// Serialization
		protobuf.Writer       = requireWriter();
		protobuf.BufferWriter = requireWriter_buffer();
		protobuf.Reader       = requireReader();
		protobuf.BufferReader = requireReader_buffer();

		// Utility
		protobuf.util         = requireMinimal$1();
		protobuf.rpc          = requireRpc();
		protobuf.roots        = requireRoots();
		protobuf.configure    = configure;

		/* istanbul ignore next */
		/**
		 * Reconfigures the library according to the environment.
		 * @returns {undefined}
		 */
		function configure() {
		    protobuf.util._configure();
		    protobuf.Writer._configure(protobuf.BufferWriter);
		    protobuf.Reader._configure(protobuf.BufferReader);
		}

		// Set up buffer utility according to the environment
		configure(); 
	} (indexMinimal));
	return indexMinimal;
}

var minimal;
var hasRequiredMinimal;

function requireMinimal () {
	if (hasRequiredMinimal) return minimal;
	hasRequiredMinimal = 1;
	minimal = requireIndexMinimal();
	return minimal;
}

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/

var protos$1;
var hasRequiredProtos$2;

function requireProtos$2 () {
	if (hasRequiredProtos$2) return protos$1;
	hasRequiredProtos$2 = 1;

	var $protobuf = requireMinimal();

	// Common aliases
	var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

	// Exported root namespace
	var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

	$root.perfetto = (function() {

	    /**
	     * Namespace perfetto.
	     * @exports perfetto
	     * @namespace
	     */
	    var perfetto = {};

	    perfetto.protos = (function() {

	        /**
	         * Namespace protos.
	         * @memberof perfetto
	         * @namespace
	         */
	        var protos = {};

	        protos.ConsumerPort = (function() {

	            /**
	             * Constructs a new ConsumerPort service.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ConsumerPort
	             * @extends $protobuf.rpc.Service
	             * @constructor
	             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
	             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	             */
	            function ConsumerPort(rpcImpl, requestDelimited, responseDelimited) {
	                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
	            }

	            (ConsumerPort.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ConsumerPort;

	            /**
	             * Creates new ConsumerPort service using the specified rpc implementation.
	             * @function create
	             * @memberof perfetto.protos.ConsumerPort
	             * @static
	             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
	             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	             * @returns {ConsumerPort} RPC service. Useful where requests and/or responses are streamed.
	             */
	            ConsumerPort.create = function create(rpcImpl, requestDelimited, responseDelimited) {
	                return new this(rpcImpl, requestDelimited, responseDelimited);
	            };

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#enableTracing}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef EnableTracingCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.EnableTracingResponse} [response] EnableTracingResponse
	             */

	            /**
	             * Calls EnableTracing.
	             * @function enableTracing
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IEnableTracingRequest} request EnableTracingRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.EnableTracingCallback} callback Node-style callback called with the error, if any, and EnableTracingResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.enableTracing = function enableTracing(request, callback) {
	                return this.rpcCall(enableTracing, $root.perfetto.protos.EnableTracingRequest, $root.perfetto.protos.EnableTracingResponse, request, callback);
	            }, "name", { value: "EnableTracing" });

	            /**
	             * Calls EnableTracing.
	             * @function enableTracing
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IEnableTracingRequest} request EnableTracingRequest message or plain object
	             * @returns {Promise<perfetto.protos.EnableTracingResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#disableTracing}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef DisableTracingCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.DisableTracingResponse} [response] DisableTracingResponse
	             */

	            /**
	             * Calls DisableTracing.
	             * @function disableTracing
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IDisableTracingRequest} request DisableTracingRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.DisableTracingCallback} callback Node-style callback called with the error, if any, and DisableTracingResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.disableTracing = function disableTracing(request, callback) {
	                return this.rpcCall(disableTracing, $root.perfetto.protos.DisableTracingRequest, $root.perfetto.protos.DisableTracingResponse, request, callback);
	            }, "name", { value: "DisableTracing" });

	            /**
	             * Calls DisableTracing.
	             * @function disableTracing
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IDisableTracingRequest} request DisableTracingRequest message or plain object
	             * @returns {Promise<perfetto.protos.DisableTracingResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#readBuffers}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef ReadBuffersCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.ReadBuffersResponse} [response] ReadBuffersResponse
	             */

	            /**
	             * Calls ReadBuffers.
	             * @function readBuffers
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IReadBuffersRequest} request ReadBuffersRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.ReadBuffersCallback} callback Node-style callback called with the error, if any, and ReadBuffersResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.readBuffers = function readBuffers(request, callback) {
	                return this.rpcCall(readBuffers, $root.perfetto.protos.ReadBuffersRequest, $root.perfetto.protos.ReadBuffersResponse, request, callback);
	            }, "name", { value: "ReadBuffers" });

	            /**
	             * Calls ReadBuffers.
	             * @function readBuffers
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IReadBuffersRequest} request ReadBuffersRequest message or plain object
	             * @returns {Promise<perfetto.protos.ReadBuffersResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#freeBuffers}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef FreeBuffersCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.FreeBuffersResponse} [response] FreeBuffersResponse
	             */

	            /**
	             * Calls FreeBuffers.
	             * @function freeBuffers
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IFreeBuffersRequest} request FreeBuffersRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.FreeBuffersCallback} callback Node-style callback called with the error, if any, and FreeBuffersResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.freeBuffers = function freeBuffers(request, callback) {
	                return this.rpcCall(freeBuffers, $root.perfetto.protos.FreeBuffersRequest, $root.perfetto.protos.FreeBuffersResponse, request, callback);
	            }, "name", { value: "FreeBuffers" });

	            /**
	             * Calls FreeBuffers.
	             * @function freeBuffers
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IFreeBuffersRequest} request FreeBuffersRequest message or plain object
	             * @returns {Promise<perfetto.protos.FreeBuffersResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#flush}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef FlushCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.FlushResponse} [response] FlushResponse
	             */

	            /**
	             * Calls Flush.
	             * @function flush
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IFlushRequest} request FlushRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.FlushCallback} callback Node-style callback called with the error, if any, and FlushResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.flush = function flush(request, callback) {
	                return this.rpcCall(flush, $root.perfetto.protos.FlushRequest, $root.perfetto.protos.FlushResponse, request, callback);
	            }, "name", { value: "Flush" });

	            /**
	             * Calls Flush.
	             * @function flush
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IFlushRequest} request FlushRequest message or plain object
	             * @returns {Promise<perfetto.protos.FlushResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#startTracing}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef StartTracingCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.StartTracingResponse} [response] StartTracingResponse
	             */

	            /**
	             * Calls StartTracing.
	             * @function startTracing
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IStartTracingRequest} request StartTracingRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.StartTracingCallback} callback Node-style callback called with the error, if any, and StartTracingResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.startTracing = function startTracing(request, callback) {
	                return this.rpcCall(startTracing, $root.perfetto.protos.StartTracingRequest, $root.perfetto.protos.StartTracingResponse, request, callback);
	            }, "name", { value: "StartTracing" });

	            /**
	             * Calls StartTracing.
	             * @function startTracing
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IStartTracingRequest} request StartTracingRequest message or plain object
	             * @returns {Promise<perfetto.protos.StartTracingResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#changeTraceConfig}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef ChangeTraceConfigCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.ChangeTraceConfigResponse} [response] ChangeTraceConfigResponse
	             */

	            /**
	             * Calls ChangeTraceConfig.
	             * @function changeTraceConfig
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IChangeTraceConfigRequest} request ChangeTraceConfigRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.ChangeTraceConfigCallback} callback Node-style callback called with the error, if any, and ChangeTraceConfigResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.changeTraceConfig = function changeTraceConfig(request, callback) {
	                return this.rpcCall(changeTraceConfig, $root.perfetto.protos.ChangeTraceConfigRequest, $root.perfetto.protos.ChangeTraceConfigResponse, request, callback);
	            }, "name", { value: "ChangeTraceConfig" });

	            /**
	             * Calls ChangeTraceConfig.
	             * @function changeTraceConfig
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IChangeTraceConfigRequest} request ChangeTraceConfigRequest message or plain object
	             * @returns {Promise<perfetto.protos.ChangeTraceConfigResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#detach}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef DetachCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.DetachResponse} [response] DetachResponse
	             */

	            /**
	             * Calls Detach.
	             * @function detach
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IDetachRequest} request DetachRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.DetachCallback} callback Node-style callback called with the error, if any, and DetachResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.detach = function detach(request, callback) {
	                return this.rpcCall(detach, $root.perfetto.protos.DetachRequest, $root.perfetto.protos.DetachResponse, request, callback);
	            }, "name", { value: "Detach" });

	            /**
	             * Calls Detach.
	             * @function detach
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IDetachRequest} request DetachRequest message or plain object
	             * @returns {Promise<perfetto.protos.DetachResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#attach}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef AttachCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.AttachResponse} [response] AttachResponse
	             */

	            /**
	             * Calls Attach.
	             * @function attach
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IAttachRequest} request AttachRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.AttachCallback} callback Node-style callback called with the error, if any, and AttachResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.attach = function attach(request, callback) {
	                return this.rpcCall(attach, $root.perfetto.protos.AttachRequest, $root.perfetto.protos.AttachResponse, request, callback);
	            }, "name", { value: "Attach" });

	            /**
	             * Calls Attach.
	             * @function attach
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IAttachRequest} request AttachRequest message or plain object
	             * @returns {Promise<perfetto.protos.AttachResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#getTraceStats}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef GetTraceStatsCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.GetTraceStatsResponse} [response] GetTraceStatsResponse
	             */

	            /**
	             * Calls GetTraceStats.
	             * @function getTraceStats
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IGetTraceStatsRequest} request GetTraceStatsRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.GetTraceStatsCallback} callback Node-style callback called with the error, if any, and GetTraceStatsResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.getTraceStats = function getTraceStats(request, callback) {
	                return this.rpcCall(getTraceStats, $root.perfetto.protos.GetTraceStatsRequest, $root.perfetto.protos.GetTraceStatsResponse, request, callback);
	            }, "name", { value: "GetTraceStats" });

	            /**
	             * Calls GetTraceStats.
	             * @function getTraceStats
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IGetTraceStatsRequest} request GetTraceStatsRequest message or plain object
	             * @returns {Promise<perfetto.protos.GetTraceStatsResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#observeEvents}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef ObserveEventsCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.ObserveEventsResponse} [response] ObserveEventsResponse
	             */

	            /**
	             * Calls ObserveEvents.
	             * @function observeEvents
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IObserveEventsRequest} request ObserveEventsRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.ObserveEventsCallback} callback Node-style callback called with the error, if any, and ObserveEventsResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.observeEvents = function observeEvents(request, callback) {
	                return this.rpcCall(observeEvents, $root.perfetto.protos.ObserveEventsRequest, $root.perfetto.protos.ObserveEventsResponse, request, callback);
	            }, "name", { value: "ObserveEvents" });

	            /**
	             * Calls ObserveEvents.
	             * @function observeEvents
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IObserveEventsRequest} request ObserveEventsRequest message or plain object
	             * @returns {Promise<perfetto.protos.ObserveEventsResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#queryServiceState}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef QueryServiceStateCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.QueryServiceStateResponse} [response] QueryServiceStateResponse
	             */

	            /**
	             * Calls QueryServiceState.
	             * @function queryServiceState
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IQueryServiceStateRequest} request QueryServiceStateRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.QueryServiceStateCallback} callback Node-style callback called with the error, if any, and QueryServiceStateResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.queryServiceState = function queryServiceState(request, callback) {
	                return this.rpcCall(queryServiceState, $root.perfetto.protos.QueryServiceStateRequest, $root.perfetto.protos.QueryServiceStateResponse, request, callback);
	            }, "name", { value: "QueryServiceState" });

	            /**
	             * Calls QueryServiceState.
	             * @function queryServiceState
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IQueryServiceStateRequest} request QueryServiceStateRequest message or plain object
	             * @returns {Promise<perfetto.protos.QueryServiceStateResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#queryCapabilities}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef QueryCapabilitiesCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.QueryCapabilitiesResponse} [response] QueryCapabilitiesResponse
	             */

	            /**
	             * Calls QueryCapabilities.
	             * @function queryCapabilities
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IQueryCapabilitiesRequest} request QueryCapabilitiesRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.QueryCapabilitiesCallback} callback Node-style callback called with the error, if any, and QueryCapabilitiesResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.queryCapabilities = function queryCapabilities(request, callback) {
	                return this.rpcCall(queryCapabilities, $root.perfetto.protos.QueryCapabilitiesRequest, $root.perfetto.protos.QueryCapabilitiesResponse, request, callback);
	            }, "name", { value: "QueryCapabilities" });

	            /**
	             * Calls QueryCapabilities.
	             * @function queryCapabilities
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.IQueryCapabilitiesRequest} request QueryCapabilitiesRequest message or plain object
	             * @returns {Promise<perfetto.protos.QueryCapabilitiesResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#saveTraceForBugreport}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef SaveTraceForBugreportCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.SaveTraceForBugreportResponse} [response] SaveTraceForBugreportResponse
	             */

	            /**
	             * Calls SaveTraceForBugreport.
	             * @function saveTraceForBugreport
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.ISaveTraceForBugreportRequest} request SaveTraceForBugreportRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.SaveTraceForBugreportCallback} callback Node-style callback called with the error, if any, and SaveTraceForBugreportResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.saveTraceForBugreport = function saveTraceForBugreport(request, callback) {
	                return this.rpcCall(saveTraceForBugreport, $root.perfetto.protos.SaveTraceForBugreportRequest, $root.perfetto.protos.SaveTraceForBugreportResponse, request, callback);
	            }, "name", { value: "SaveTraceForBugreport" });

	            /**
	             * Calls SaveTraceForBugreport.
	             * @function saveTraceForBugreport
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.ISaveTraceForBugreportRequest} request SaveTraceForBugreportRequest message or plain object
	             * @returns {Promise<perfetto.protos.SaveTraceForBugreportResponse>} Promise
	             * @variation 2
	             */

	            /**
	             * Callback as used by {@link perfetto.protos.ConsumerPort#cloneSession}.
	             * @memberof perfetto.protos.ConsumerPort
	             * @typedef CloneSessionCallback
	             * @type {function}
	             * @param {Error|null} error Error, if any
	             * @param {perfetto.protos.CloneSessionResponse} [response] CloneSessionResponse
	             */

	            /**
	             * Calls CloneSession.
	             * @function cloneSession
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.ICloneSessionRequest} request CloneSessionRequest message or plain object
	             * @param {perfetto.protos.ConsumerPort.CloneSessionCallback} callback Node-style callback called with the error, if any, and CloneSessionResponse
	             * @returns {undefined}
	             * @variation 1
	             */
	            Object.defineProperty(ConsumerPort.prototype.cloneSession = function cloneSession(request, callback) {
	                return this.rpcCall(cloneSession, $root.perfetto.protos.CloneSessionRequest, $root.perfetto.protos.CloneSessionResponse, request, callback);
	            }, "name", { value: "CloneSession" });

	            /**
	             * Calls CloneSession.
	             * @function cloneSession
	             * @memberof perfetto.protos.ConsumerPort
	             * @instance
	             * @param {perfetto.protos.ICloneSessionRequest} request CloneSessionRequest message or plain object
	             * @returns {Promise<perfetto.protos.CloneSessionResponse>} Promise
	             * @variation 2
	             */

	            return ConsumerPort;
	        })();

	        protos.EnableTracingRequest = (function() {

	            /**
	             * Properties of an EnableTracingRequest.
	             * @memberof perfetto.protos
	             * @interface IEnableTracingRequest
	             * @property {perfetto.protos.ITraceConfig|null} [traceConfig] EnableTracingRequest traceConfig
	             * @property {boolean|null} [attachNotificationOnly] EnableTracingRequest attachNotificationOnly
	             */

	            /**
	             * Constructs a new EnableTracingRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EnableTracingRequest.
	             * @implements IEnableTracingRequest
	             * @constructor
	             * @param {perfetto.protos.IEnableTracingRequest=} [p] Properties to set
	             */
	            function EnableTracingRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * EnableTracingRequest traceConfig.
	             * @member {perfetto.protos.ITraceConfig|null|undefined} traceConfig
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @instance
	             */
	            EnableTracingRequest.prototype.traceConfig = null;

	            /**
	             * EnableTracingRequest attachNotificationOnly.
	             * @member {boolean} attachNotificationOnly
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @instance
	             */
	            EnableTracingRequest.prototype.attachNotificationOnly = false;

	            /**
	             * Creates a new EnableTracingRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @static
	             * @param {perfetto.protos.IEnableTracingRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.EnableTracingRequest} EnableTracingRequest instance
	             */
	            EnableTracingRequest.create = function create(properties) {
	                return new EnableTracingRequest(properties);
	            };

	            /**
	             * Encodes the specified EnableTracingRequest message. Does not implicitly {@link perfetto.protos.EnableTracingRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @static
	             * @param {perfetto.protos.IEnableTracingRequest} m EnableTracingRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EnableTracingRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.traceConfig != null && Object.hasOwnProperty.call(m, "traceConfig"))
	                    $root.perfetto.protos.TraceConfig.encode(m.traceConfig, w.uint32(10).fork()).ldelim();
	                if (m.attachNotificationOnly != null && Object.hasOwnProperty.call(m, "attachNotificationOnly"))
	                    w.uint32(16).bool(m.attachNotificationOnly);
	                return w;
	            };

	            /**
	             * Decodes an EnableTracingRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EnableTracingRequest} EnableTracingRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EnableTracingRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EnableTracingRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.traceConfig = $root.perfetto.protos.TraceConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 2: {
	                            m.attachNotificationOnly = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EnableTracingRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EnableTracingRequest} EnableTracingRequest
	             */
	            EnableTracingRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EnableTracingRequest)
	                    return d;
	                var m = new $root.perfetto.protos.EnableTracingRequest();
	                if (d.traceConfig != null) {
	                    if (typeof d.traceConfig !== "object")
	                        throw TypeError(".perfetto.protos.EnableTracingRequest.traceConfig: object expected");
	                    m.traceConfig = $root.perfetto.protos.TraceConfig.fromObject(d.traceConfig);
	                }
	                if (d.attachNotificationOnly != null) {
	                    m.attachNotificationOnly = Boolean(d.attachNotificationOnly);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an EnableTracingRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @static
	             * @param {perfetto.protos.EnableTracingRequest} m EnableTracingRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EnableTracingRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.traceConfig = null;
	                    d.attachNotificationOnly = false;
	                }
	                if (m.traceConfig != null && m.hasOwnProperty("traceConfig")) {
	                    d.traceConfig = $root.perfetto.protos.TraceConfig.toObject(m.traceConfig, o);
	                }
	                if (m.attachNotificationOnly != null && m.hasOwnProperty("attachNotificationOnly")) {
	                    d.attachNotificationOnly = m.attachNotificationOnly;
	                }
	                return d;
	            };

	            /**
	             * Converts this EnableTracingRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EnableTracingRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EnableTracingRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EnableTracingRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EnableTracingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EnableTracingRequest";
	            };

	            return EnableTracingRequest;
	        })();

	        protos.EnableTracingResponse = (function() {

	            /**
	             * Properties of an EnableTracingResponse.
	             * @memberof perfetto.protos
	             * @interface IEnableTracingResponse
	             * @property {boolean|null} [disabled] EnableTracingResponse disabled
	             * @property {string|null} [error] EnableTracingResponse error
	             */

	            /**
	             * Constructs a new EnableTracingResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EnableTracingResponse.
	             * @implements IEnableTracingResponse
	             * @constructor
	             * @param {perfetto.protos.IEnableTracingResponse=} [p] Properties to set
	             */
	            function EnableTracingResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * EnableTracingResponse disabled.
	             * @member {boolean|null|undefined} disabled
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @instance
	             */
	            EnableTracingResponse.prototype.disabled = null;

	            /**
	             * EnableTracingResponse error.
	             * @member {string} error
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @instance
	             */
	            EnableTracingResponse.prototype.error = "";

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * EnableTracingResponse state.
	             * @member {"disabled"|undefined} state
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @instance
	             */
	            Object.defineProperty(EnableTracingResponse.prototype, "state", {
	                get: $util.oneOfGetter($oneOfFields = ["disabled"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new EnableTracingResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @static
	             * @param {perfetto.protos.IEnableTracingResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.EnableTracingResponse} EnableTracingResponse instance
	             */
	            EnableTracingResponse.create = function create(properties) {
	                return new EnableTracingResponse(properties);
	            };

	            /**
	             * Encodes the specified EnableTracingResponse message. Does not implicitly {@link perfetto.protos.EnableTracingResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @static
	             * @param {perfetto.protos.IEnableTracingResponse} m EnableTracingResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EnableTracingResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.disabled != null && Object.hasOwnProperty.call(m, "disabled"))
	                    w.uint32(8).bool(m.disabled);
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(26).string(m.error);
	                return w;
	            };

	            /**
	             * Decodes an EnableTracingResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EnableTracingResponse} EnableTracingResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EnableTracingResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EnableTracingResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.disabled = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.error = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EnableTracingResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EnableTracingResponse} EnableTracingResponse
	             */
	            EnableTracingResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EnableTracingResponse)
	                    return d;
	                var m = new $root.perfetto.protos.EnableTracingResponse();
	                if (d.disabled != null) {
	                    m.disabled = Boolean(d.disabled);
	                }
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an EnableTracingResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @static
	             * @param {perfetto.protos.EnableTracingResponse} m EnableTracingResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EnableTracingResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.error = "";
	                }
	                if (m.disabled != null && m.hasOwnProperty("disabled")) {
	                    d.disabled = m.disabled;
	                    if (o.oneofs)
	                        d.state = "disabled";
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                return d;
	            };

	            /**
	             * Converts this EnableTracingResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EnableTracingResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EnableTracingResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EnableTracingResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EnableTracingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EnableTracingResponse";
	            };

	            return EnableTracingResponse;
	        })();

	        protos.StartTracingRequest = (function() {

	            /**
	             * Properties of a StartTracingRequest.
	             * @memberof perfetto.protos
	             * @interface IStartTracingRequest
	             */

	            /**
	             * Constructs a new StartTracingRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a StartTracingRequest.
	             * @implements IStartTracingRequest
	             * @constructor
	             * @param {perfetto.protos.IStartTracingRequest=} [p] Properties to set
	             */
	            function StartTracingRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new StartTracingRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.StartTracingRequest
	             * @static
	             * @param {perfetto.protos.IStartTracingRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.StartTracingRequest} StartTracingRequest instance
	             */
	            StartTracingRequest.create = function create(properties) {
	                return new StartTracingRequest(properties);
	            };

	            /**
	             * Encodes the specified StartTracingRequest message. Does not implicitly {@link perfetto.protos.StartTracingRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.StartTracingRequest
	             * @static
	             * @param {perfetto.protos.IStartTracingRequest} m StartTracingRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            StartTracingRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a StartTracingRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.StartTracingRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.StartTracingRequest} StartTracingRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            StartTracingRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.StartTracingRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a StartTracingRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.StartTracingRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.StartTracingRequest} StartTracingRequest
	             */
	            StartTracingRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.StartTracingRequest)
	                    return d;
	                return new $root.perfetto.protos.StartTracingRequest();
	            };

	            /**
	             * Creates a plain object from a StartTracingRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.StartTracingRequest
	             * @static
	             * @param {perfetto.protos.StartTracingRequest} m StartTracingRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            StartTracingRequest.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this StartTracingRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.StartTracingRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            StartTracingRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for StartTracingRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.StartTracingRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            StartTracingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.StartTracingRequest";
	            };

	            return StartTracingRequest;
	        })();

	        protos.StartTracingResponse = (function() {

	            /**
	             * Properties of a StartTracingResponse.
	             * @memberof perfetto.protos
	             * @interface IStartTracingResponse
	             */

	            /**
	             * Constructs a new StartTracingResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a StartTracingResponse.
	             * @implements IStartTracingResponse
	             * @constructor
	             * @param {perfetto.protos.IStartTracingResponse=} [p] Properties to set
	             */
	            function StartTracingResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new StartTracingResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.StartTracingResponse
	             * @static
	             * @param {perfetto.protos.IStartTracingResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.StartTracingResponse} StartTracingResponse instance
	             */
	            StartTracingResponse.create = function create(properties) {
	                return new StartTracingResponse(properties);
	            };

	            /**
	             * Encodes the specified StartTracingResponse message. Does not implicitly {@link perfetto.protos.StartTracingResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.StartTracingResponse
	             * @static
	             * @param {perfetto.protos.IStartTracingResponse} m StartTracingResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            StartTracingResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a StartTracingResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.StartTracingResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.StartTracingResponse} StartTracingResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            StartTracingResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.StartTracingResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a StartTracingResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.StartTracingResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.StartTracingResponse} StartTracingResponse
	             */
	            StartTracingResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.StartTracingResponse)
	                    return d;
	                return new $root.perfetto.protos.StartTracingResponse();
	            };

	            /**
	             * Creates a plain object from a StartTracingResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.StartTracingResponse
	             * @static
	             * @param {perfetto.protos.StartTracingResponse} m StartTracingResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            StartTracingResponse.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this StartTracingResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.StartTracingResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            StartTracingResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for StartTracingResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.StartTracingResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            StartTracingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.StartTracingResponse";
	            };

	            return StartTracingResponse;
	        })();

	        protos.ChangeTraceConfigRequest = (function() {

	            /**
	             * Properties of a ChangeTraceConfigRequest.
	             * @memberof perfetto.protos
	             * @interface IChangeTraceConfigRequest
	             * @property {perfetto.protos.ITraceConfig|null} [traceConfig] ChangeTraceConfigRequest traceConfig
	             */

	            /**
	             * Constructs a new ChangeTraceConfigRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ChangeTraceConfigRequest.
	             * @implements IChangeTraceConfigRequest
	             * @constructor
	             * @param {perfetto.protos.IChangeTraceConfigRequest=} [p] Properties to set
	             */
	            function ChangeTraceConfigRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ChangeTraceConfigRequest traceConfig.
	             * @member {perfetto.protos.ITraceConfig|null|undefined} traceConfig
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @instance
	             */
	            ChangeTraceConfigRequest.prototype.traceConfig = null;

	            /**
	             * Creates a new ChangeTraceConfigRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @static
	             * @param {perfetto.protos.IChangeTraceConfigRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.ChangeTraceConfigRequest} ChangeTraceConfigRequest instance
	             */
	            ChangeTraceConfigRequest.create = function create(properties) {
	                return new ChangeTraceConfigRequest(properties);
	            };

	            /**
	             * Encodes the specified ChangeTraceConfigRequest message. Does not implicitly {@link perfetto.protos.ChangeTraceConfigRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @static
	             * @param {perfetto.protos.IChangeTraceConfigRequest} m ChangeTraceConfigRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ChangeTraceConfigRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.traceConfig != null && Object.hasOwnProperty.call(m, "traceConfig"))
	                    $root.perfetto.protos.TraceConfig.encode(m.traceConfig, w.uint32(10).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a ChangeTraceConfigRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ChangeTraceConfigRequest} ChangeTraceConfigRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ChangeTraceConfigRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ChangeTraceConfigRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.traceConfig = $root.perfetto.protos.TraceConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ChangeTraceConfigRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ChangeTraceConfigRequest} ChangeTraceConfigRequest
	             */
	            ChangeTraceConfigRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ChangeTraceConfigRequest)
	                    return d;
	                var m = new $root.perfetto.protos.ChangeTraceConfigRequest();
	                if (d.traceConfig != null) {
	                    if (typeof d.traceConfig !== "object")
	                        throw TypeError(".perfetto.protos.ChangeTraceConfigRequest.traceConfig: object expected");
	                    m.traceConfig = $root.perfetto.protos.TraceConfig.fromObject(d.traceConfig);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ChangeTraceConfigRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @static
	             * @param {perfetto.protos.ChangeTraceConfigRequest} m ChangeTraceConfigRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ChangeTraceConfigRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.traceConfig = null;
	                }
	                if (m.traceConfig != null && m.hasOwnProperty("traceConfig")) {
	                    d.traceConfig = $root.perfetto.protos.TraceConfig.toObject(m.traceConfig, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this ChangeTraceConfigRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ChangeTraceConfigRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ChangeTraceConfigRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ChangeTraceConfigRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ChangeTraceConfigRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ChangeTraceConfigRequest";
	            };

	            return ChangeTraceConfigRequest;
	        })();

	        protos.ChangeTraceConfigResponse = (function() {

	            /**
	             * Properties of a ChangeTraceConfigResponse.
	             * @memberof perfetto.protos
	             * @interface IChangeTraceConfigResponse
	             */

	            /**
	             * Constructs a new ChangeTraceConfigResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ChangeTraceConfigResponse.
	             * @implements IChangeTraceConfigResponse
	             * @constructor
	             * @param {perfetto.protos.IChangeTraceConfigResponse=} [p] Properties to set
	             */
	            function ChangeTraceConfigResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new ChangeTraceConfigResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @static
	             * @param {perfetto.protos.IChangeTraceConfigResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.ChangeTraceConfigResponse} ChangeTraceConfigResponse instance
	             */
	            ChangeTraceConfigResponse.create = function create(properties) {
	                return new ChangeTraceConfigResponse(properties);
	            };

	            /**
	             * Encodes the specified ChangeTraceConfigResponse message. Does not implicitly {@link perfetto.protos.ChangeTraceConfigResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @static
	             * @param {perfetto.protos.IChangeTraceConfigResponse} m ChangeTraceConfigResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ChangeTraceConfigResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a ChangeTraceConfigResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ChangeTraceConfigResponse} ChangeTraceConfigResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ChangeTraceConfigResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ChangeTraceConfigResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ChangeTraceConfigResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ChangeTraceConfigResponse} ChangeTraceConfigResponse
	             */
	            ChangeTraceConfigResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ChangeTraceConfigResponse)
	                    return d;
	                return new $root.perfetto.protos.ChangeTraceConfigResponse();
	            };

	            /**
	             * Creates a plain object from a ChangeTraceConfigResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @static
	             * @param {perfetto.protos.ChangeTraceConfigResponse} m ChangeTraceConfigResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ChangeTraceConfigResponse.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this ChangeTraceConfigResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ChangeTraceConfigResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ChangeTraceConfigResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ChangeTraceConfigResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ChangeTraceConfigResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ChangeTraceConfigResponse";
	            };

	            return ChangeTraceConfigResponse;
	        })();

	        protos.DisableTracingRequest = (function() {

	            /**
	             * Properties of a DisableTracingRequest.
	             * @memberof perfetto.protos
	             * @interface IDisableTracingRequest
	             */

	            /**
	             * Constructs a new DisableTracingRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DisableTracingRequest.
	             * @implements IDisableTracingRequest
	             * @constructor
	             * @param {perfetto.protos.IDisableTracingRequest=} [p] Properties to set
	             */
	            function DisableTracingRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new DisableTracingRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @static
	             * @param {perfetto.protos.IDisableTracingRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.DisableTracingRequest} DisableTracingRequest instance
	             */
	            DisableTracingRequest.create = function create(properties) {
	                return new DisableTracingRequest(properties);
	            };

	            /**
	             * Encodes the specified DisableTracingRequest message. Does not implicitly {@link perfetto.protos.DisableTracingRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @static
	             * @param {perfetto.protos.IDisableTracingRequest} m DisableTracingRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DisableTracingRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a DisableTracingRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DisableTracingRequest} DisableTracingRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DisableTracingRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DisableTracingRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DisableTracingRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DisableTracingRequest} DisableTracingRequest
	             */
	            DisableTracingRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DisableTracingRequest)
	                    return d;
	                return new $root.perfetto.protos.DisableTracingRequest();
	            };

	            /**
	             * Creates a plain object from a DisableTracingRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @static
	             * @param {perfetto.protos.DisableTracingRequest} m DisableTracingRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DisableTracingRequest.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this DisableTracingRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DisableTracingRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DisableTracingRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DisableTracingRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DisableTracingRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DisableTracingRequest";
	            };

	            return DisableTracingRequest;
	        })();

	        protos.DisableTracingResponse = (function() {

	            /**
	             * Properties of a DisableTracingResponse.
	             * @memberof perfetto.protos
	             * @interface IDisableTracingResponse
	             */

	            /**
	             * Constructs a new DisableTracingResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DisableTracingResponse.
	             * @implements IDisableTracingResponse
	             * @constructor
	             * @param {perfetto.protos.IDisableTracingResponse=} [p] Properties to set
	             */
	            function DisableTracingResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new DisableTracingResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @static
	             * @param {perfetto.protos.IDisableTracingResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.DisableTracingResponse} DisableTracingResponse instance
	             */
	            DisableTracingResponse.create = function create(properties) {
	                return new DisableTracingResponse(properties);
	            };

	            /**
	             * Encodes the specified DisableTracingResponse message. Does not implicitly {@link perfetto.protos.DisableTracingResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @static
	             * @param {perfetto.protos.IDisableTracingResponse} m DisableTracingResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DisableTracingResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a DisableTracingResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DisableTracingResponse} DisableTracingResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DisableTracingResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DisableTracingResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DisableTracingResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DisableTracingResponse} DisableTracingResponse
	             */
	            DisableTracingResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DisableTracingResponse)
	                    return d;
	                return new $root.perfetto.protos.DisableTracingResponse();
	            };

	            /**
	             * Creates a plain object from a DisableTracingResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @static
	             * @param {perfetto.protos.DisableTracingResponse} m DisableTracingResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DisableTracingResponse.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this DisableTracingResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DisableTracingResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DisableTracingResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DisableTracingResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DisableTracingResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DisableTracingResponse";
	            };

	            return DisableTracingResponse;
	        })();

	        protos.ReadBuffersRequest = (function() {

	            /**
	             * Properties of a ReadBuffersRequest.
	             * @memberof perfetto.protos
	             * @interface IReadBuffersRequest
	             */

	            /**
	             * Constructs a new ReadBuffersRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ReadBuffersRequest.
	             * @implements IReadBuffersRequest
	             * @constructor
	             * @param {perfetto.protos.IReadBuffersRequest=} [p] Properties to set
	             */
	            function ReadBuffersRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new ReadBuffersRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @static
	             * @param {perfetto.protos.IReadBuffersRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.ReadBuffersRequest} ReadBuffersRequest instance
	             */
	            ReadBuffersRequest.create = function create(properties) {
	                return new ReadBuffersRequest(properties);
	            };

	            /**
	             * Encodes the specified ReadBuffersRequest message. Does not implicitly {@link perfetto.protos.ReadBuffersRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @static
	             * @param {perfetto.protos.IReadBuffersRequest} m ReadBuffersRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ReadBuffersRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a ReadBuffersRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ReadBuffersRequest} ReadBuffersRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ReadBuffersRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ReadBuffersRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ReadBuffersRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ReadBuffersRequest} ReadBuffersRequest
	             */
	            ReadBuffersRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ReadBuffersRequest)
	                    return d;
	                return new $root.perfetto.protos.ReadBuffersRequest();
	            };

	            /**
	             * Creates a plain object from a ReadBuffersRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @static
	             * @param {perfetto.protos.ReadBuffersRequest} m ReadBuffersRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ReadBuffersRequest.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this ReadBuffersRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ReadBuffersRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ReadBuffersRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ReadBuffersRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ReadBuffersRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ReadBuffersRequest";
	            };

	            return ReadBuffersRequest;
	        })();

	        protos.ReadBuffersResponse = (function() {

	            /**
	             * Properties of a ReadBuffersResponse.
	             * @memberof perfetto.protos
	             * @interface IReadBuffersResponse
	             * @property {Array.<perfetto.protos.ReadBuffersResponse.ISlice>|null} [slices] ReadBuffersResponse slices
	             */

	            /**
	             * Constructs a new ReadBuffersResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ReadBuffersResponse.
	             * @implements IReadBuffersResponse
	             * @constructor
	             * @param {perfetto.protos.IReadBuffersResponse=} [p] Properties to set
	             */
	            function ReadBuffersResponse(p) {
	                this.slices = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ReadBuffersResponse slices.
	             * @member {Array.<perfetto.protos.ReadBuffersResponse.ISlice>} slices
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @instance
	             */
	            ReadBuffersResponse.prototype.slices = $util.emptyArray;

	            /**
	             * Creates a new ReadBuffersResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @static
	             * @param {perfetto.protos.IReadBuffersResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.ReadBuffersResponse} ReadBuffersResponse instance
	             */
	            ReadBuffersResponse.create = function create(properties) {
	                return new ReadBuffersResponse(properties);
	            };

	            /**
	             * Encodes the specified ReadBuffersResponse message. Does not implicitly {@link perfetto.protos.ReadBuffersResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @static
	             * @param {perfetto.protos.IReadBuffersResponse} m ReadBuffersResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ReadBuffersResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.slices != null && m.slices.length) {
	                    for (var i = 0; i < m.slices.length; ++i)
	                        $root.perfetto.protos.ReadBuffersResponse.Slice.encode(m.slices[i], w.uint32(18).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a ReadBuffersResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ReadBuffersResponse} ReadBuffersResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ReadBuffersResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ReadBuffersResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 2: {
	                            if (!(m.slices && m.slices.length))
	                                m.slices = [];
	                            m.slices.push($root.perfetto.protos.ReadBuffersResponse.Slice.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ReadBuffersResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ReadBuffersResponse} ReadBuffersResponse
	             */
	            ReadBuffersResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ReadBuffersResponse)
	                    return d;
	                var m = new $root.perfetto.protos.ReadBuffersResponse();
	                if (d.slices) {
	                    if (!Array.isArray(d.slices))
	                        throw TypeError(".perfetto.protos.ReadBuffersResponse.slices: array expected");
	                    m.slices = [];
	                    for (var i = 0; i < d.slices.length; ++i) {
	                        if (typeof d.slices[i] !== "object")
	                            throw TypeError(".perfetto.protos.ReadBuffersResponse.slices: object expected");
	                        m.slices[i] = $root.perfetto.protos.ReadBuffersResponse.Slice.fromObject(d.slices[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ReadBuffersResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @static
	             * @param {perfetto.protos.ReadBuffersResponse} m ReadBuffersResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ReadBuffersResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.slices = [];
	                }
	                if (m.slices && m.slices.length) {
	                    d.slices = [];
	                    for (var j = 0; j < m.slices.length; ++j) {
	                        d.slices[j] = $root.perfetto.protos.ReadBuffersResponse.Slice.toObject(m.slices[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this ReadBuffersResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ReadBuffersResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ReadBuffersResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ReadBuffersResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ReadBuffersResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ReadBuffersResponse";
	            };

	            ReadBuffersResponse.Slice = (function() {

	                /**
	                 * Properties of a Slice.
	                 * @memberof perfetto.protos.ReadBuffersResponse
	                 * @interface ISlice
	                 * @property {Uint8Array|null} [data] Slice data
	                 * @property {boolean|null} [lastSliceForPacket] Slice lastSliceForPacket
	                 */

	                /**
	                 * Constructs a new Slice.
	                 * @memberof perfetto.protos.ReadBuffersResponse
	                 * @classdesc Represents a Slice.
	                 * @implements ISlice
	                 * @constructor
	                 * @param {perfetto.protos.ReadBuffersResponse.ISlice=} [p] Properties to set
	                 */
	                function Slice(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Slice data.
	                 * @member {Uint8Array} data
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @instance
	                 */
	                Slice.prototype.data = $util.newBuffer([]);

	                /**
	                 * Slice lastSliceForPacket.
	                 * @member {boolean} lastSliceForPacket
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @instance
	                 */
	                Slice.prototype.lastSliceForPacket = false;

	                /**
	                 * Creates a new Slice instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @static
	                 * @param {perfetto.protos.ReadBuffersResponse.ISlice=} [properties] Properties to set
	                 * @returns {perfetto.protos.ReadBuffersResponse.Slice} Slice instance
	                 */
	                Slice.create = function create(properties) {
	                    return new Slice(properties);
	                };

	                /**
	                 * Encodes the specified Slice message. Does not implicitly {@link perfetto.protos.ReadBuffersResponse.Slice.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @static
	                 * @param {perfetto.protos.ReadBuffersResponse.ISlice} m Slice message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Slice.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.data != null && Object.hasOwnProperty.call(m, "data"))
	                        w.uint32(10).bytes(m.data);
	                    if (m.lastSliceForPacket != null && Object.hasOwnProperty.call(m, "lastSliceForPacket"))
	                        w.uint32(16).bool(m.lastSliceForPacket);
	                    return w;
	                };

	                /**
	                 * Decodes a Slice message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.ReadBuffersResponse.Slice} Slice
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Slice.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ReadBuffersResponse.Slice();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.data = r.bytes();
	                                break;
	                            }
	                        case 2: {
	                                m.lastSliceForPacket = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a Slice message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.ReadBuffersResponse.Slice} Slice
	                 */
	                Slice.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.ReadBuffersResponse.Slice)
	                        return d;
	                    var m = new $root.perfetto.protos.ReadBuffersResponse.Slice();
	                    if (d.data != null) {
	                        if (typeof d.data === "string")
	                            $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);
	                        else if (d.data.length >= 0)
	                            m.data = d.data;
	                    }
	                    if (d.lastSliceForPacket != null) {
	                        m.lastSliceForPacket = Boolean(d.lastSliceForPacket);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a Slice message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @static
	                 * @param {perfetto.protos.ReadBuffersResponse.Slice} m Slice
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Slice.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if (o.bytes === String)
	                            d.data = "";
	                        else {
	                            d.data = [];
	                            if (o.bytes !== Array)
	                                d.data = $util.newBuffer(d.data);
	                        }
	                        d.lastSliceForPacket = false;
	                    }
	                    if (m.data != null && m.hasOwnProperty("data")) {
	                        d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
	                    }
	                    if (m.lastSliceForPacket != null && m.hasOwnProperty("lastSliceForPacket")) {
	                        d.lastSliceForPacket = m.lastSliceForPacket;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Slice to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Slice.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Slice
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.ReadBuffersResponse.Slice
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Slice.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.ReadBuffersResponse.Slice";
	                };

	                return Slice;
	            })();

	            return ReadBuffersResponse;
	        })();

	        protos.FreeBuffersRequest = (function() {

	            /**
	             * Properties of a FreeBuffersRequest.
	             * @memberof perfetto.protos
	             * @interface IFreeBuffersRequest
	             * @property {Array.<number>|null} [bufferIds] FreeBuffersRequest bufferIds
	             */

	            /**
	             * Constructs a new FreeBuffersRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FreeBuffersRequest.
	             * @implements IFreeBuffersRequest
	             * @constructor
	             * @param {perfetto.protos.IFreeBuffersRequest=} [p] Properties to set
	             */
	            function FreeBuffersRequest(p) {
	                this.bufferIds = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FreeBuffersRequest bufferIds.
	             * @member {Array.<number>} bufferIds
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @instance
	             */
	            FreeBuffersRequest.prototype.bufferIds = $util.emptyArray;

	            /**
	             * Creates a new FreeBuffersRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @static
	             * @param {perfetto.protos.IFreeBuffersRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.FreeBuffersRequest} FreeBuffersRequest instance
	             */
	            FreeBuffersRequest.create = function create(properties) {
	                return new FreeBuffersRequest(properties);
	            };

	            /**
	             * Encodes the specified FreeBuffersRequest message. Does not implicitly {@link perfetto.protos.FreeBuffersRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @static
	             * @param {perfetto.protos.IFreeBuffersRequest} m FreeBuffersRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FreeBuffersRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.bufferIds != null && m.bufferIds.length) {
	                    for (var i = 0; i < m.bufferIds.length; ++i)
	                        w.uint32(8).uint32(m.bufferIds[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a FreeBuffersRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FreeBuffersRequest} FreeBuffersRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FreeBuffersRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FreeBuffersRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.bufferIds && m.bufferIds.length))
	                                m.bufferIds = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.bufferIds.push(r.uint32());
	                            } else
	                                m.bufferIds.push(r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FreeBuffersRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FreeBuffersRequest} FreeBuffersRequest
	             */
	            FreeBuffersRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FreeBuffersRequest)
	                    return d;
	                var m = new $root.perfetto.protos.FreeBuffersRequest();
	                if (d.bufferIds) {
	                    if (!Array.isArray(d.bufferIds))
	                        throw TypeError(".perfetto.protos.FreeBuffersRequest.bufferIds: array expected");
	                    m.bufferIds = [];
	                    for (var i = 0; i < d.bufferIds.length; ++i) {
	                        m.bufferIds[i] = d.bufferIds[i] >>> 0;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FreeBuffersRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @static
	             * @param {perfetto.protos.FreeBuffersRequest} m FreeBuffersRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FreeBuffersRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.bufferIds = [];
	                }
	                if (m.bufferIds && m.bufferIds.length) {
	                    d.bufferIds = [];
	                    for (var j = 0; j < m.bufferIds.length; ++j) {
	                        d.bufferIds[j] = m.bufferIds[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this FreeBuffersRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FreeBuffersRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FreeBuffersRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FreeBuffersRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FreeBuffersRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FreeBuffersRequest";
	            };

	            return FreeBuffersRequest;
	        })();

	        protos.FreeBuffersResponse = (function() {

	            /**
	             * Properties of a FreeBuffersResponse.
	             * @memberof perfetto.protos
	             * @interface IFreeBuffersResponse
	             */

	            /**
	             * Constructs a new FreeBuffersResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FreeBuffersResponse.
	             * @implements IFreeBuffersResponse
	             * @constructor
	             * @param {perfetto.protos.IFreeBuffersResponse=} [p] Properties to set
	             */
	            function FreeBuffersResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new FreeBuffersResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @static
	             * @param {perfetto.protos.IFreeBuffersResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.FreeBuffersResponse} FreeBuffersResponse instance
	             */
	            FreeBuffersResponse.create = function create(properties) {
	                return new FreeBuffersResponse(properties);
	            };

	            /**
	             * Encodes the specified FreeBuffersResponse message. Does not implicitly {@link perfetto.protos.FreeBuffersResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @static
	             * @param {perfetto.protos.IFreeBuffersResponse} m FreeBuffersResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FreeBuffersResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a FreeBuffersResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FreeBuffersResponse} FreeBuffersResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FreeBuffersResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FreeBuffersResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FreeBuffersResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FreeBuffersResponse} FreeBuffersResponse
	             */
	            FreeBuffersResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FreeBuffersResponse)
	                    return d;
	                return new $root.perfetto.protos.FreeBuffersResponse();
	            };

	            /**
	             * Creates a plain object from a FreeBuffersResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @static
	             * @param {perfetto.protos.FreeBuffersResponse} m FreeBuffersResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FreeBuffersResponse.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this FreeBuffersResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FreeBuffersResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FreeBuffersResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FreeBuffersResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FreeBuffersResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FreeBuffersResponse";
	            };

	            return FreeBuffersResponse;
	        })();

	        protos.FlushRequest = (function() {

	            /**
	             * Properties of a FlushRequest.
	             * @memberof perfetto.protos
	             * @interface IFlushRequest
	             * @property {number|null} [timeoutMs] FlushRequest timeoutMs
	             * @property {number|null} [flags] FlushRequest flags
	             */

	            /**
	             * Constructs a new FlushRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FlushRequest.
	             * @implements IFlushRequest
	             * @constructor
	             * @param {perfetto.protos.IFlushRequest=} [p] Properties to set
	             */
	            function FlushRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FlushRequest timeoutMs.
	             * @member {number} timeoutMs
	             * @memberof perfetto.protos.FlushRequest
	             * @instance
	             */
	            FlushRequest.prototype.timeoutMs = 0;

	            /**
	             * FlushRequest flags.
	             * @member {number} flags
	             * @memberof perfetto.protos.FlushRequest
	             * @instance
	             */
	            FlushRequest.prototype.flags = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * Creates a new FlushRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FlushRequest
	             * @static
	             * @param {perfetto.protos.IFlushRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.FlushRequest} FlushRequest instance
	             */
	            FlushRequest.create = function create(properties) {
	                return new FlushRequest(properties);
	            };

	            /**
	             * Encodes the specified FlushRequest message. Does not implicitly {@link perfetto.protos.FlushRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FlushRequest
	             * @static
	             * @param {perfetto.protos.IFlushRequest} m FlushRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FlushRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.timeoutMs != null && Object.hasOwnProperty.call(m, "timeoutMs"))
	                    w.uint32(8).uint32(m.timeoutMs);
	                if (m.flags != null && Object.hasOwnProperty.call(m, "flags"))
	                    w.uint32(16).uint64(m.flags);
	                return w;
	            };

	            /**
	             * Decodes a FlushRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FlushRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FlushRequest} FlushRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FlushRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FlushRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.timeoutMs = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            m.flags = r.uint64();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FlushRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FlushRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FlushRequest} FlushRequest
	             */
	            FlushRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FlushRequest)
	                    return d;
	                var m = new $root.perfetto.protos.FlushRequest();
	                if (d.timeoutMs != null) {
	                    m.timeoutMs = d.timeoutMs >>> 0;
	                }
	                if (d.flags != null) {
	                    if ($util.Long)
	                        (m.flags = $util.Long.fromValue(d.flags)).unsigned = true;
	                    else if (typeof d.flags === "string")
	                        m.flags = parseInt(d.flags, 10);
	                    else if (typeof d.flags === "number")
	                        m.flags = d.flags;
	                    else if (typeof d.flags === "object")
	                        m.flags = new $util.LongBits(d.flags.low >>> 0, d.flags.high >>> 0).toNumber(true);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FlushRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FlushRequest
	             * @static
	             * @param {perfetto.protos.FlushRequest} m FlushRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FlushRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.timeoutMs = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.flags = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.flags = o.longs === String ? "0" : 0;
	                }
	                if (m.timeoutMs != null && m.hasOwnProperty("timeoutMs")) {
	                    d.timeoutMs = m.timeoutMs;
	                }
	                if (m.flags != null && m.hasOwnProperty("flags")) {
	                    if (typeof m.flags === "number")
	                        d.flags = o.longs === String ? String(m.flags) : m.flags;
	                    else
	                        d.flags = o.longs === String ? $util.Long.prototype.toString.call(m.flags) : o.longs === Number ? new $util.LongBits(m.flags.low >>> 0, m.flags.high >>> 0).toNumber(true) : m.flags;
	                }
	                return d;
	            };

	            /**
	             * Converts this FlushRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FlushRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FlushRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FlushRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FlushRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FlushRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FlushRequest";
	            };

	            return FlushRequest;
	        })();

	        protos.FlushResponse = (function() {

	            /**
	             * Properties of a FlushResponse.
	             * @memberof perfetto.protos
	             * @interface IFlushResponse
	             */

	            /**
	             * Constructs a new FlushResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FlushResponse.
	             * @implements IFlushResponse
	             * @constructor
	             * @param {perfetto.protos.IFlushResponse=} [p] Properties to set
	             */
	            function FlushResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new FlushResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FlushResponse
	             * @static
	             * @param {perfetto.protos.IFlushResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.FlushResponse} FlushResponse instance
	             */
	            FlushResponse.create = function create(properties) {
	                return new FlushResponse(properties);
	            };

	            /**
	             * Encodes the specified FlushResponse message. Does not implicitly {@link perfetto.protos.FlushResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FlushResponse
	             * @static
	             * @param {perfetto.protos.IFlushResponse} m FlushResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FlushResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a FlushResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FlushResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FlushResponse} FlushResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FlushResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FlushResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FlushResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FlushResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FlushResponse} FlushResponse
	             */
	            FlushResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FlushResponse)
	                    return d;
	                return new $root.perfetto.protos.FlushResponse();
	            };

	            /**
	             * Creates a plain object from a FlushResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FlushResponse
	             * @static
	             * @param {perfetto.protos.FlushResponse} m FlushResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FlushResponse.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this FlushResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FlushResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FlushResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FlushResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FlushResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FlushResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FlushResponse";
	            };

	            return FlushResponse;
	        })();

	        protos.DetachRequest = (function() {

	            /**
	             * Properties of a DetachRequest.
	             * @memberof perfetto.protos
	             * @interface IDetachRequest
	             * @property {string|null} [key] DetachRequest key
	             */

	            /**
	             * Constructs a new DetachRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DetachRequest.
	             * @implements IDetachRequest
	             * @constructor
	             * @param {perfetto.protos.IDetachRequest=} [p] Properties to set
	             */
	            function DetachRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * DetachRequest key.
	             * @member {string} key
	             * @memberof perfetto.protos.DetachRequest
	             * @instance
	             */
	            DetachRequest.prototype.key = "";

	            /**
	             * Creates a new DetachRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DetachRequest
	             * @static
	             * @param {perfetto.protos.IDetachRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.DetachRequest} DetachRequest instance
	             */
	            DetachRequest.create = function create(properties) {
	                return new DetachRequest(properties);
	            };

	            /**
	             * Encodes the specified DetachRequest message. Does not implicitly {@link perfetto.protos.DetachRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DetachRequest
	             * @static
	             * @param {perfetto.protos.IDetachRequest} m DetachRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DetachRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	                    w.uint32(10).string(m.key);
	                return w;
	            };

	            /**
	             * Decodes a DetachRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DetachRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DetachRequest} DetachRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DetachRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DetachRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.key = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DetachRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DetachRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DetachRequest} DetachRequest
	             */
	            DetachRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DetachRequest)
	                    return d;
	                var m = new $root.perfetto.protos.DetachRequest();
	                if (d.key != null) {
	                    m.key = String(d.key);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a DetachRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DetachRequest
	             * @static
	             * @param {perfetto.protos.DetachRequest} m DetachRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DetachRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.key = "";
	                }
	                if (m.key != null && m.hasOwnProperty("key")) {
	                    d.key = m.key;
	                }
	                return d;
	            };

	            /**
	             * Converts this DetachRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DetachRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DetachRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DetachRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DetachRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DetachRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DetachRequest";
	            };

	            return DetachRequest;
	        })();

	        protos.DetachResponse = (function() {

	            /**
	             * Properties of a DetachResponse.
	             * @memberof perfetto.protos
	             * @interface IDetachResponse
	             */

	            /**
	             * Constructs a new DetachResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DetachResponse.
	             * @implements IDetachResponse
	             * @constructor
	             * @param {perfetto.protos.IDetachResponse=} [p] Properties to set
	             */
	            function DetachResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new DetachResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DetachResponse
	             * @static
	             * @param {perfetto.protos.IDetachResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.DetachResponse} DetachResponse instance
	             */
	            DetachResponse.create = function create(properties) {
	                return new DetachResponse(properties);
	            };

	            /**
	             * Encodes the specified DetachResponse message. Does not implicitly {@link perfetto.protos.DetachResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DetachResponse
	             * @static
	             * @param {perfetto.protos.IDetachResponse} m DetachResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DetachResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a DetachResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DetachResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DetachResponse} DetachResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DetachResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DetachResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DetachResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DetachResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DetachResponse} DetachResponse
	             */
	            DetachResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DetachResponse)
	                    return d;
	                return new $root.perfetto.protos.DetachResponse();
	            };

	            /**
	             * Creates a plain object from a DetachResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DetachResponse
	             * @static
	             * @param {perfetto.protos.DetachResponse} m DetachResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DetachResponse.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this DetachResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DetachResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DetachResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DetachResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DetachResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DetachResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DetachResponse";
	            };

	            return DetachResponse;
	        })();

	        protos.AttachRequest = (function() {

	            /**
	             * Properties of an AttachRequest.
	             * @memberof perfetto.protos
	             * @interface IAttachRequest
	             * @property {string|null} [key] AttachRequest key
	             */

	            /**
	             * Constructs a new AttachRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AttachRequest.
	             * @implements IAttachRequest
	             * @constructor
	             * @param {perfetto.protos.IAttachRequest=} [p] Properties to set
	             */
	            function AttachRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AttachRequest key.
	             * @member {string} key
	             * @memberof perfetto.protos.AttachRequest
	             * @instance
	             */
	            AttachRequest.prototype.key = "";

	            /**
	             * Creates a new AttachRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AttachRequest
	             * @static
	             * @param {perfetto.protos.IAttachRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.AttachRequest} AttachRequest instance
	             */
	            AttachRequest.create = function create(properties) {
	                return new AttachRequest(properties);
	            };

	            /**
	             * Encodes the specified AttachRequest message. Does not implicitly {@link perfetto.protos.AttachRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AttachRequest
	             * @static
	             * @param {perfetto.protos.IAttachRequest} m AttachRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AttachRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	                    w.uint32(10).string(m.key);
	                return w;
	            };

	            /**
	             * Decodes an AttachRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AttachRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AttachRequest} AttachRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AttachRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AttachRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.key = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AttachRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AttachRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AttachRequest} AttachRequest
	             */
	            AttachRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AttachRequest)
	                    return d;
	                var m = new $root.perfetto.protos.AttachRequest();
	                if (d.key != null) {
	                    m.key = String(d.key);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AttachRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AttachRequest
	             * @static
	             * @param {perfetto.protos.AttachRequest} m AttachRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AttachRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.key = "";
	                }
	                if (m.key != null && m.hasOwnProperty("key")) {
	                    d.key = m.key;
	                }
	                return d;
	            };

	            /**
	             * Converts this AttachRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AttachRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AttachRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AttachRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AttachRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AttachRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AttachRequest";
	            };

	            return AttachRequest;
	        })();

	        protos.AttachResponse = (function() {

	            /**
	             * Properties of an AttachResponse.
	             * @memberof perfetto.protos
	             * @interface IAttachResponse
	             * @property {perfetto.protos.ITraceConfig|null} [traceConfig] AttachResponse traceConfig
	             */

	            /**
	             * Constructs a new AttachResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AttachResponse.
	             * @implements IAttachResponse
	             * @constructor
	             * @param {perfetto.protos.IAttachResponse=} [p] Properties to set
	             */
	            function AttachResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AttachResponse traceConfig.
	             * @member {perfetto.protos.ITraceConfig|null|undefined} traceConfig
	             * @memberof perfetto.protos.AttachResponse
	             * @instance
	             */
	            AttachResponse.prototype.traceConfig = null;

	            /**
	             * Creates a new AttachResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AttachResponse
	             * @static
	             * @param {perfetto.protos.IAttachResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.AttachResponse} AttachResponse instance
	             */
	            AttachResponse.create = function create(properties) {
	                return new AttachResponse(properties);
	            };

	            /**
	             * Encodes the specified AttachResponse message. Does not implicitly {@link perfetto.protos.AttachResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AttachResponse
	             * @static
	             * @param {perfetto.protos.IAttachResponse} m AttachResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AttachResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.traceConfig != null && Object.hasOwnProperty.call(m, "traceConfig"))
	                    $root.perfetto.protos.TraceConfig.encode(m.traceConfig, w.uint32(10).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes an AttachResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AttachResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AttachResponse} AttachResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AttachResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AttachResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.traceConfig = $root.perfetto.protos.TraceConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AttachResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AttachResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AttachResponse} AttachResponse
	             */
	            AttachResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AttachResponse)
	                    return d;
	                var m = new $root.perfetto.protos.AttachResponse();
	                if (d.traceConfig != null) {
	                    if (typeof d.traceConfig !== "object")
	                        throw TypeError(".perfetto.protos.AttachResponse.traceConfig: object expected");
	                    m.traceConfig = $root.perfetto.protos.TraceConfig.fromObject(d.traceConfig);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AttachResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AttachResponse
	             * @static
	             * @param {perfetto.protos.AttachResponse} m AttachResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AttachResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.traceConfig = null;
	                }
	                if (m.traceConfig != null && m.hasOwnProperty("traceConfig")) {
	                    d.traceConfig = $root.perfetto.protos.TraceConfig.toObject(m.traceConfig, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this AttachResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AttachResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AttachResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AttachResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AttachResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AttachResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AttachResponse";
	            };

	            return AttachResponse;
	        })();

	        protos.GetTraceStatsRequest = (function() {

	            /**
	             * Properties of a GetTraceStatsRequest.
	             * @memberof perfetto.protos
	             * @interface IGetTraceStatsRequest
	             */

	            /**
	             * Constructs a new GetTraceStatsRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a GetTraceStatsRequest.
	             * @implements IGetTraceStatsRequest
	             * @constructor
	             * @param {perfetto.protos.IGetTraceStatsRequest=} [p] Properties to set
	             */
	            function GetTraceStatsRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new GetTraceStatsRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @static
	             * @param {perfetto.protos.IGetTraceStatsRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.GetTraceStatsRequest} GetTraceStatsRequest instance
	             */
	            GetTraceStatsRequest.create = function create(properties) {
	                return new GetTraceStatsRequest(properties);
	            };

	            /**
	             * Encodes the specified GetTraceStatsRequest message. Does not implicitly {@link perfetto.protos.GetTraceStatsRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @static
	             * @param {perfetto.protos.IGetTraceStatsRequest} m GetTraceStatsRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            GetTraceStatsRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a GetTraceStatsRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.GetTraceStatsRequest} GetTraceStatsRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            GetTraceStatsRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.GetTraceStatsRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a GetTraceStatsRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.GetTraceStatsRequest} GetTraceStatsRequest
	             */
	            GetTraceStatsRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.GetTraceStatsRequest)
	                    return d;
	                return new $root.perfetto.protos.GetTraceStatsRequest();
	            };

	            /**
	             * Creates a plain object from a GetTraceStatsRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @static
	             * @param {perfetto.protos.GetTraceStatsRequest} m GetTraceStatsRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            GetTraceStatsRequest.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this GetTraceStatsRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            GetTraceStatsRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for GetTraceStatsRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.GetTraceStatsRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            GetTraceStatsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.GetTraceStatsRequest";
	            };

	            return GetTraceStatsRequest;
	        })();

	        protos.GetTraceStatsResponse = (function() {

	            /**
	             * Properties of a GetTraceStatsResponse.
	             * @memberof perfetto.protos
	             * @interface IGetTraceStatsResponse
	             * @property {perfetto.protos.ITraceStats|null} [traceStats] GetTraceStatsResponse traceStats
	             */

	            /**
	             * Constructs a new GetTraceStatsResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a GetTraceStatsResponse.
	             * @implements IGetTraceStatsResponse
	             * @constructor
	             * @param {perfetto.protos.IGetTraceStatsResponse=} [p] Properties to set
	             */
	            function GetTraceStatsResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * GetTraceStatsResponse traceStats.
	             * @member {perfetto.protos.ITraceStats|null|undefined} traceStats
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @instance
	             */
	            GetTraceStatsResponse.prototype.traceStats = null;

	            /**
	             * Creates a new GetTraceStatsResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @static
	             * @param {perfetto.protos.IGetTraceStatsResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.GetTraceStatsResponse} GetTraceStatsResponse instance
	             */
	            GetTraceStatsResponse.create = function create(properties) {
	                return new GetTraceStatsResponse(properties);
	            };

	            /**
	             * Encodes the specified GetTraceStatsResponse message. Does not implicitly {@link perfetto.protos.GetTraceStatsResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @static
	             * @param {perfetto.protos.IGetTraceStatsResponse} m GetTraceStatsResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            GetTraceStatsResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.traceStats != null && Object.hasOwnProperty.call(m, "traceStats"))
	                    $root.perfetto.protos.TraceStats.encode(m.traceStats, w.uint32(10).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a GetTraceStatsResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.GetTraceStatsResponse} GetTraceStatsResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            GetTraceStatsResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.GetTraceStatsResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.traceStats = $root.perfetto.protos.TraceStats.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a GetTraceStatsResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.GetTraceStatsResponse} GetTraceStatsResponse
	             */
	            GetTraceStatsResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.GetTraceStatsResponse)
	                    return d;
	                var m = new $root.perfetto.protos.GetTraceStatsResponse();
	                if (d.traceStats != null) {
	                    if (typeof d.traceStats !== "object")
	                        throw TypeError(".perfetto.protos.GetTraceStatsResponse.traceStats: object expected");
	                    m.traceStats = $root.perfetto.protos.TraceStats.fromObject(d.traceStats);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a GetTraceStatsResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @static
	             * @param {perfetto.protos.GetTraceStatsResponse} m GetTraceStatsResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            GetTraceStatsResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.traceStats = null;
	                }
	                if (m.traceStats != null && m.hasOwnProperty("traceStats")) {
	                    d.traceStats = $root.perfetto.protos.TraceStats.toObject(m.traceStats, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this GetTraceStatsResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            GetTraceStatsResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for GetTraceStatsResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.GetTraceStatsResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            GetTraceStatsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.GetTraceStatsResponse";
	            };

	            return GetTraceStatsResponse;
	        })();

	        protos.ObserveEventsRequest = (function() {

	            /**
	             * Properties of an ObserveEventsRequest.
	             * @memberof perfetto.protos
	             * @interface IObserveEventsRequest
	             * @property {Array.<perfetto.protos.ObservableEvents.Type>|null} [eventsToObserve] ObserveEventsRequest eventsToObserve
	             */

	            /**
	             * Constructs a new ObserveEventsRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents an ObserveEventsRequest.
	             * @implements IObserveEventsRequest
	             * @constructor
	             * @param {perfetto.protos.IObserveEventsRequest=} [p] Properties to set
	             */
	            function ObserveEventsRequest(p) {
	                this.eventsToObserve = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ObserveEventsRequest eventsToObserve.
	             * @member {Array.<perfetto.protos.ObservableEvents.Type>} eventsToObserve
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @instance
	             */
	            ObserveEventsRequest.prototype.eventsToObserve = $util.emptyArray;

	            /**
	             * Creates a new ObserveEventsRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @static
	             * @param {perfetto.protos.IObserveEventsRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.ObserveEventsRequest} ObserveEventsRequest instance
	             */
	            ObserveEventsRequest.create = function create(properties) {
	                return new ObserveEventsRequest(properties);
	            };

	            /**
	             * Encodes the specified ObserveEventsRequest message. Does not implicitly {@link perfetto.protos.ObserveEventsRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @static
	             * @param {perfetto.protos.IObserveEventsRequest} m ObserveEventsRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ObserveEventsRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.eventsToObserve != null && m.eventsToObserve.length) {
	                    for (var i = 0; i < m.eventsToObserve.length; ++i)
	                        w.uint32(8).int32(m.eventsToObserve[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an ObserveEventsRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ObserveEventsRequest} ObserveEventsRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ObserveEventsRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ObserveEventsRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.eventsToObserve && m.eventsToObserve.length))
	                                m.eventsToObserve = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.eventsToObserve.push(r.int32());
	                            } else
	                                m.eventsToObserve.push(r.int32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an ObserveEventsRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ObserveEventsRequest} ObserveEventsRequest
	             */
	            ObserveEventsRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ObserveEventsRequest)
	                    return d;
	                var m = new $root.perfetto.protos.ObserveEventsRequest();
	                if (d.eventsToObserve) {
	                    if (!Array.isArray(d.eventsToObserve))
	                        throw TypeError(".perfetto.protos.ObserveEventsRequest.eventsToObserve: array expected");
	                    m.eventsToObserve = [];
	                    for (var i = 0; i < d.eventsToObserve.length; ++i) {
	                        switch (d.eventsToObserve[i]) {
	                        default:
	                            if (typeof d.eventsToObserve[i] === "number") {
	                                m.eventsToObserve[i] = d.eventsToObserve[i];
	                                break;
	                            }
	                        case "TYPE_UNSPECIFIED":
	                        case 0:
	                            m.eventsToObserve[i] = 0;
	                            break;
	                        case "TYPE_DATA_SOURCES_INSTANCES":
	                        case 1:
	                            m.eventsToObserve[i] = 1;
	                            break;
	                        case "TYPE_ALL_DATA_SOURCES_STARTED":
	                        case 2:
	                            m.eventsToObserve[i] = 2;
	                            break;
	                        case "TYPE_CLONE_TRIGGER_HIT":
	                        case 4:
	                            m.eventsToObserve[i] = 4;
	                            break;
	                        }
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an ObserveEventsRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @static
	             * @param {perfetto.protos.ObserveEventsRequest} m ObserveEventsRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ObserveEventsRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.eventsToObserve = [];
	                }
	                if (m.eventsToObserve && m.eventsToObserve.length) {
	                    d.eventsToObserve = [];
	                    for (var j = 0; j < m.eventsToObserve.length; ++j) {
	                        d.eventsToObserve[j] = o.enums === String ? $root.perfetto.protos.ObservableEvents.Type[m.eventsToObserve[j]] === undefined ? m.eventsToObserve[j] : $root.perfetto.protos.ObservableEvents.Type[m.eventsToObserve[j]] : m.eventsToObserve[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this ObserveEventsRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ObserveEventsRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ObserveEventsRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ObserveEventsRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ObserveEventsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ObserveEventsRequest";
	            };

	            return ObserveEventsRequest;
	        })();

	        protos.ObserveEventsResponse = (function() {

	            /**
	             * Properties of an ObserveEventsResponse.
	             * @memberof perfetto.protos
	             * @interface IObserveEventsResponse
	             * @property {perfetto.protos.IObservableEvents|null} [events] ObserveEventsResponse events
	             */

	            /**
	             * Constructs a new ObserveEventsResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents an ObserveEventsResponse.
	             * @implements IObserveEventsResponse
	             * @constructor
	             * @param {perfetto.protos.IObserveEventsResponse=} [p] Properties to set
	             */
	            function ObserveEventsResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ObserveEventsResponse events.
	             * @member {perfetto.protos.IObservableEvents|null|undefined} events
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @instance
	             */
	            ObserveEventsResponse.prototype.events = null;

	            /**
	             * Creates a new ObserveEventsResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @static
	             * @param {perfetto.protos.IObserveEventsResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.ObserveEventsResponse} ObserveEventsResponse instance
	             */
	            ObserveEventsResponse.create = function create(properties) {
	                return new ObserveEventsResponse(properties);
	            };

	            /**
	             * Encodes the specified ObserveEventsResponse message. Does not implicitly {@link perfetto.protos.ObserveEventsResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @static
	             * @param {perfetto.protos.IObserveEventsResponse} m ObserveEventsResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ObserveEventsResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.events != null && Object.hasOwnProperty.call(m, "events"))
	                    $root.perfetto.protos.ObservableEvents.encode(m.events, w.uint32(10).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes an ObserveEventsResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ObserveEventsResponse} ObserveEventsResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ObserveEventsResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ObserveEventsResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.events = $root.perfetto.protos.ObservableEvents.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an ObserveEventsResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ObserveEventsResponse} ObserveEventsResponse
	             */
	            ObserveEventsResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ObserveEventsResponse)
	                    return d;
	                var m = new $root.perfetto.protos.ObserveEventsResponse();
	                if (d.events != null) {
	                    if (typeof d.events !== "object")
	                        throw TypeError(".perfetto.protos.ObserveEventsResponse.events: object expected");
	                    m.events = $root.perfetto.protos.ObservableEvents.fromObject(d.events);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an ObserveEventsResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @static
	             * @param {perfetto.protos.ObserveEventsResponse} m ObserveEventsResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ObserveEventsResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.events = null;
	                }
	                if (m.events != null && m.hasOwnProperty("events")) {
	                    d.events = $root.perfetto.protos.ObservableEvents.toObject(m.events, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this ObserveEventsResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ObserveEventsResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ObserveEventsResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ObserveEventsResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ObserveEventsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ObserveEventsResponse";
	            };

	            return ObserveEventsResponse;
	        })();

	        protos.QueryServiceStateRequest = (function() {

	            /**
	             * Properties of a QueryServiceStateRequest.
	             * @memberof perfetto.protos
	             * @interface IQueryServiceStateRequest
	             * @property {boolean|null} [sessionsOnly] QueryServiceStateRequest sessionsOnly
	             */

	            /**
	             * Constructs a new QueryServiceStateRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a QueryServiceStateRequest.
	             * @implements IQueryServiceStateRequest
	             * @constructor
	             * @param {perfetto.protos.IQueryServiceStateRequest=} [p] Properties to set
	             */
	            function QueryServiceStateRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * QueryServiceStateRequest sessionsOnly.
	             * @member {boolean} sessionsOnly
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @instance
	             */
	            QueryServiceStateRequest.prototype.sessionsOnly = false;

	            /**
	             * Creates a new QueryServiceStateRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @static
	             * @param {perfetto.protos.IQueryServiceStateRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.QueryServiceStateRequest} QueryServiceStateRequest instance
	             */
	            QueryServiceStateRequest.create = function create(properties) {
	                return new QueryServiceStateRequest(properties);
	            };

	            /**
	             * Encodes the specified QueryServiceStateRequest message. Does not implicitly {@link perfetto.protos.QueryServiceStateRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @static
	             * @param {perfetto.protos.IQueryServiceStateRequest} m QueryServiceStateRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            QueryServiceStateRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.sessionsOnly != null && Object.hasOwnProperty.call(m, "sessionsOnly"))
	                    w.uint32(8).bool(m.sessionsOnly);
	                return w;
	            };

	            /**
	             * Decodes a QueryServiceStateRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.QueryServiceStateRequest} QueryServiceStateRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            QueryServiceStateRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryServiceStateRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.sessionsOnly = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a QueryServiceStateRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.QueryServiceStateRequest} QueryServiceStateRequest
	             */
	            QueryServiceStateRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.QueryServiceStateRequest)
	                    return d;
	                var m = new $root.perfetto.protos.QueryServiceStateRequest();
	                if (d.sessionsOnly != null) {
	                    m.sessionsOnly = Boolean(d.sessionsOnly);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a QueryServiceStateRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @static
	             * @param {perfetto.protos.QueryServiceStateRequest} m QueryServiceStateRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            QueryServiceStateRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.sessionsOnly = false;
	                }
	                if (m.sessionsOnly != null && m.hasOwnProperty("sessionsOnly")) {
	                    d.sessionsOnly = m.sessionsOnly;
	                }
	                return d;
	            };

	            /**
	             * Converts this QueryServiceStateRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            QueryServiceStateRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for QueryServiceStateRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.QueryServiceStateRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            QueryServiceStateRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.QueryServiceStateRequest";
	            };

	            return QueryServiceStateRequest;
	        })();

	        protos.QueryServiceStateResponse = (function() {

	            /**
	             * Properties of a QueryServiceStateResponse.
	             * @memberof perfetto.protos
	             * @interface IQueryServiceStateResponse
	             * @property {perfetto.protos.ITracingServiceState|null} [serviceState] QueryServiceStateResponse serviceState
	             */

	            /**
	             * Constructs a new QueryServiceStateResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a QueryServiceStateResponse.
	             * @implements IQueryServiceStateResponse
	             * @constructor
	             * @param {perfetto.protos.IQueryServiceStateResponse=} [p] Properties to set
	             */
	            function QueryServiceStateResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * QueryServiceStateResponse serviceState.
	             * @member {perfetto.protos.ITracingServiceState|null|undefined} serviceState
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @instance
	             */
	            QueryServiceStateResponse.prototype.serviceState = null;

	            /**
	             * Creates a new QueryServiceStateResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @static
	             * @param {perfetto.protos.IQueryServiceStateResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.QueryServiceStateResponse} QueryServiceStateResponse instance
	             */
	            QueryServiceStateResponse.create = function create(properties) {
	                return new QueryServiceStateResponse(properties);
	            };

	            /**
	             * Encodes the specified QueryServiceStateResponse message. Does not implicitly {@link perfetto.protos.QueryServiceStateResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @static
	             * @param {perfetto.protos.IQueryServiceStateResponse} m QueryServiceStateResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            QueryServiceStateResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.serviceState != null && Object.hasOwnProperty.call(m, "serviceState"))
	                    $root.perfetto.protos.TracingServiceState.encode(m.serviceState, w.uint32(10).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a QueryServiceStateResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.QueryServiceStateResponse} QueryServiceStateResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            QueryServiceStateResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryServiceStateResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.serviceState = $root.perfetto.protos.TracingServiceState.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a QueryServiceStateResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.QueryServiceStateResponse} QueryServiceStateResponse
	             */
	            QueryServiceStateResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.QueryServiceStateResponse)
	                    return d;
	                var m = new $root.perfetto.protos.QueryServiceStateResponse();
	                if (d.serviceState != null) {
	                    if (typeof d.serviceState !== "object")
	                        throw TypeError(".perfetto.protos.QueryServiceStateResponse.serviceState: object expected");
	                    m.serviceState = $root.perfetto.protos.TracingServiceState.fromObject(d.serviceState);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a QueryServiceStateResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @static
	             * @param {perfetto.protos.QueryServiceStateResponse} m QueryServiceStateResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            QueryServiceStateResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.serviceState = null;
	                }
	                if (m.serviceState != null && m.hasOwnProperty("serviceState")) {
	                    d.serviceState = $root.perfetto.protos.TracingServiceState.toObject(m.serviceState, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this QueryServiceStateResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            QueryServiceStateResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for QueryServiceStateResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.QueryServiceStateResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            QueryServiceStateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.QueryServiceStateResponse";
	            };

	            return QueryServiceStateResponse;
	        })();

	        protos.QueryCapabilitiesRequest = (function() {

	            /**
	             * Properties of a QueryCapabilitiesRequest.
	             * @memberof perfetto.protos
	             * @interface IQueryCapabilitiesRequest
	             */

	            /**
	             * Constructs a new QueryCapabilitiesRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a QueryCapabilitiesRequest.
	             * @implements IQueryCapabilitiesRequest
	             * @constructor
	             * @param {perfetto.protos.IQueryCapabilitiesRequest=} [p] Properties to set
	             */
	            function QueryCapabilitiesRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new QueryCapabilitiesRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @static
	             * @param {perfetto.protos.IQueryCapabilitiesRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.QueryCapabilitiesRequest} QueryCapabilitiesRequest instance
	             */
	            QueryCapabilitiesRequest.create = function create(properties) {
	                return new QueryCapabilitiesRequest(properties);
	            };

	            /**
	             * Encodes the specified QueryCapabilitiesRequest message. Does not implicitly {@link perfetto.protos.QueryCapabilitiesRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @static
	             * @param {perfetto.protos.IQueryCapabilitiesRequest} m QueryCapabilitiesRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            QueryCapabilitiesRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a QueryCapabilitiesRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.QueryCapabilitiesRequest} QueryCapabilitiesRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            QueryCapabilitiesRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryCapabilitiesRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a QueryCapabilitiesRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.QueryCapabilitiesRequest} QueryCapabilitiesRequest
	             */
	            QueryCapabilitiesRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.QueryCapabilitiesRequest)
	                    return d;
	                return new $root.perfetto.protos.QueryCapabilitiesRequest();
	            };

	            /**
	             * Creates a plain object from a QueryCapabilitiesRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @static
	             * @param {perfetto.protos.QueryCapabilitiesRequest} m QueryCapabilitiesRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            QueryCapabilitiesRequest.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this QueryCapabilitiesRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            QueryCapabilitiesRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for QueryCapabilitiesRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.QueryCapabilitiesRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            QueryCapabilitiesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.QueryCapabilitiesRequest";
	            };

	            return QueryCapabilitiesRequest;
	        })();

	        protos.QueryCapabilitiesResponse = (function() {

	            /**
	             * Properties of a QueryCapabilitiesResponse.
	             * @memberof perfetto.protos
	             * @interface IQueryCapabilitiesResponse
	             * @property {perfetto.protos.ITracingServiceCapabilities|null} [capabilities] QueryCapabilitiesResponse capabilities
	             */

	            /**
	             * Constructs a new QueryCapabilitiesResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a QueryCapabilitiesResponse.
	             * @implements IQueryCapabilitiesResponse
	             * @constructor
	             * @param {perfetto.protos.IQueryCapabilitiesResponse=} [p] Properties to set
	             */
	            function QueryCapabilitiesResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * QueryCapabilitiesResponse capabilities.
	             * @member {perfetto.protos.ITracingServiceCapabilities|null|undefined} capabilities
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @instance
	             */
	            QueryCapabilitiesResponse.prototype.capabilities = null;

	            /**
	             * Creates a new QueryCapabilitiesResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @static
	             * @param {perfetto.protos.IQueryCapabilitiesResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.QueryCapabilitiesResponse} QueryCapabilitiesResponse instance
	             */
	            QueryCapabilitiesResponse.create = function create(properties) {
	                return new QueryCapabilitiesResponse(properties);
	            };

	            /**
	             * Encodes the specified QueryCapabilitiesResponse message. Does not implicitly {@link perfetto.protos.QueryCapabilitiesResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @static
	             * @param {perfetto.protos.IQueryCapabilitiesResponse} m QueryCapabilitiesResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            QueryCapabilitiesResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.capabilities != null && Object.hasOwnProperty.call(m, "capabilities"))
	                    $root.perfetto.protos.TracingServiceCapabilities.encode(m.capabilities, w.uint32(10).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a QueryCapabilitiesResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.QueryCapabilitiesResponse} QueryCapabilitiesResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            QueryCapabilitiesResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryCapabilitiesResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.capabilities = $root.perfetto.protos.TracingServiceCapabilities.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a QueryCapabilitiesResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.QueryCapabilitiesResponse} QueryCapabilitiesResponse
	             */
	            QueryCapabilitiesResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.QueryCapabilitiesResponse)
	                    return d;
	                var m = new $root.perfetto.protos.QueryCapabilitiesResponse();
	                if (d.capabilities != null) {
	                    if (typeof d.capabilities !== "object")
	                        throw TypeError(".perfetto.protos.QueryCapabilitiesResponse.capabilities: object expected");
	                    m.capabilities = $root.perfetto.protos.TracingServiceCapabilities.fromObject(d.capabilities);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a QueryCapabilitiesResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @static
	             * @param {perfetto.protos.QueryCapabilitiesResponse} m QueryCapabilitiesResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            QueryCapabilitiesResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.capabilities = null;
	                }
	                if (m.capabilities != null && m.hasOwnProperty("capabilities")) {
	                    d.capabilities = $root.perfetto.protos.TracingServiceCapabilities.toObject(m.capabilities, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this QueryCapabilitiesResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            QueryCapabilitiesResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for QueryCapabilitiesResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.QueryCapabilitiesResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            QueryCapabilitiesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.QueryCapabilitiesResponse";
	            };

	            return QueryCapabilitiesResponse;
	        })();

	        protos.SaveTraceForBugreportRequest = (function() {

	            /**
	             * Properties of a SaveTraceForBugreportRequest.
	             * @memberof perfetto.protos
	             * @interface ISaveTraceForBugreportRequest
	             */

	            /**
	             * Constructs a new SaveTraceForBugreportRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a SaveTraceForBugreportRequest.
	             * @implements ISaveTraceForBugreportRequest
	             * @constructor
	             * @param {perfetto.protos.ISaveTraceForBugreportRequest=} [p] Properties to set
	             */
	            function SaveTraceForBugreportRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new SaveTraceForBugreportRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @static
	             * @param {perfetto.protos.ISaveTraceForBugreportRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.SaveTraceForBugreportRequest} SaveTraceForBugreportRequest instance
	             */
	            SaveTraceForBugreportRequest.create = function create(properties) {
	                return new SaveTraceForBugreportRequest(properties);
	            };

	            /**
	             * Encodes the specified SaveTraceForBugreportRequest message. Does not implicitly {@link perfetto.protos.SaveTraceForBugreportRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @static
	             * @param {perfetto.protos.ISaveTraceForBugreportRequest} m SaveTraceForBugreportRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SaveTraceForBugreportRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a SaveTraceForBugreportRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.SaveTraceForBugreportRequest} SaveTraceForBugreportRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SaveTraceForBugreportRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.SaveTraceForBugreportRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a SaveTraceForBugreportRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.SaveTraceForBugreportRequest} SaveTraceForBugreportRequest
	             */
	            SaveTraceForBugreportRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.SaveTraceForBugreportRequest)
	                    return d;
	                return new $root.perfetto.protos.SaveTraceForBugreportRequest();
	            };

	            /**
	             * Creates a plain object from a SaveTraceForBugreportRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @static
	             * @param {perfetto.protos.SaveTraceForBugreportRequest} m SaveTraceForBugreportRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SaveTraceForBugreportRequest.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this SaveTraceForBugreportRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SaveTraceForBugreportRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for SaveTraceForBugreportRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.SaveTraceForBugreportRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            SaveTraceForBugreportRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.SaveTraceForBugreportRequest";
	            };

	            return SaveTraceForBugreportRequest;
	        })();

	        protos.SaveTraceForBugreportResponse = (function() {

	            /**
	             * Properties of a SaveTraceForBugreportResponse.
	             * @memberof perfetto.protos
	             * @interface ISaveTraceForBugreportResponse
	             * @property {boolean|null} [success] SaveTraceForBugreportResponse success
	             * @property {string|null} [msg] SaveTraceForBugreportResponse msg
	             */

	            /**
	             * Constructs a new SaveTraceForBugreportResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a SaveTraceForBugreportResponse.
	             * @implements ISaveTraceForBugreportResponse
	             * @constructor
	             * @param {perfetto.protos.ISaveTraceForBugreportResponse=} [p] Properties to set
	             */
	            function SaveTraceForBugreportResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * SaveTraceForBugreportResponse success.
	             * @member {boolean} success
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @instance
	             */
	            SaveTraceForBugreportResponse.prototype.success = false;

	            /**
	             * SaveTraceForBugreportResponse msg.
	             * @member {string} msg
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @instance
	             */
	            SaveTraceForBugreportResponse.prototype.msg = "";

	            /**
	             * Creates a new SaveTraceForBugreportResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @static
	             * @param {perfetto.protos.ISaveTraceForBugreportResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.SaveTraceForBugreportResponse} SaveTraceForBugreportResponse instance
	             */
	            SaveTraceForBugreportResponse.create = function create(properties) {
	                return new SaveTraceForBugreportResponse(properties);
	            };

	            /**
	             * Encodes the specified SaveTraceForBugreportResponse message. Does not implicitly {@link perfetto.protos.SaveTraceForBugreportResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @static
	             * @param {perfetto.protos.ISaveTraceForBugreportResponse} m SaveTraceForBugreportResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SaveTraceForBugreportResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.success != null && Object.hasOwnProperty.call(m, "success"))
	                    w.uint32(8).bool(m.success);
	                if (m.msg != null && Object.hasOwnProperty.call(m, "msg"))
	                    w.uint32(18).string(m.msg);
	                return w;
	            };

	            /**
	             * Decodes a SaveTraceForBugreportResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.SaveTraceForBugreportResponse} SaveTraceForBugreportResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SaveTraceForBugreportResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.SaveTraceForBugreportResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.success = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            m.msg = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a SaveTraceForBugreportResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.SaveTraceForBugreportResponse} SaveTraceForBugreportResponse
	             */
	            SaveTraceForBugreportResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.SaveTraceForBugreportResponse)
	                    return d;
	                var m = new $root.perfetto.protos.SaveTraceForBugreportResponse();
	                if (d.success != null) {
	                    m.success = Boolean(d.success);
	                }
	                if (d.msg != null) {
	                    m.msg = String(d.msg);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a SaveTraceForBugreportResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @static
	             * @param {perfetto.protos.SaveTraceForBugreportResponse} m SaveTraceForBugreportResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SaveTraceForBugreportResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.success = false;
	                    d.msg = "";
	                }
	                if (m.success != null && m.hasOwnProperty("success")) {
	                    d.success = m.success;
	                }
	                if (m.msg != null && m.hasOwnProperty("msg")) {
	                    d.msg = m.msg;
	                }
	                return d;
	            };

	            /**
	             * Converts this SaveTraceForBugreportResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SaveTraceForBugreportResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for SaveTraceForBugreportResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.SaveTraceForBugreportResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            SaveTraceForBugreportResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.SaveTraceForBugreportResponse";
	            };

	            return SaveTraceForBugreportResponse;
	        })();

	        protos.CloneSessionRequest = (function() {

	            /**
	             * Properties of a CloneSessionRequest.
	             * @memberof perfetto.protos
	             * @interface ICloneSessionRequest
	             * @property {number|null} [sessionId] CloneSessionRequest sessionId
	             * @property {string|null} [uniqueSessionName] CloneSessionRequest uniqueSessionName
	             * @property {boolean|null} [skipTraceFilter] CloneSessionRequest skipTraceFilter
	             * @property {boolean|null} [forBugreport] CloneSessionRequest forBugreport
	             * @property {string|null} [cloneTriggerName] CloneSessionRequest cloneTriggerName
	             * @property {string|null} [cloneTriggerProducerName] CloneSessionRequest cloneTriggerProducerName
	             * @property {number|null} [cloneTriggerTrustedProducerUid] CloneSessionRequest cloneTriggerTrustedProducerUid
	             * @property {number|null} [cloneTriggerBootTimeNs] CloneSessionRequest cloneTriggerBootTimeNs
	             */

	            /**
	             * Constructs a new CloneSessionRequest.
	             * @memberof perfetto.protos
	             * @classdesc Represents a CloneSessionRequest.
	             * @implements ICloneSessionRequest
	             * @constructor
	             * @param {perfetto.protos.ICloneSessionRequest=} [p] Properties to set
	             */
	            function CloneSessionRequest(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * CloneSessionRequest sessionId.
	             * @member {number|null|undefined} sessionId
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.sessionId = null;

	            /**
	             * CloneSessionRequest uniqueSessionName.
	             * @member {string|null|undefined} uniqueSessionName
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.uniqueSessionName = null;

	            /**
	             * CloneSessionRequest skipTraceFilter.
	             * @member {boolean} skipTraceFilter
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.skipTraceFilter = false;

	            /**
	             * CloneSessionRequest forBugreport.
	             * @member {boolean} forBugreport
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.forBugreport = false;

	            /**
	             * CloneSessionRequest cloneTriggerName.
	             * @member {string} cloneTriggerName
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.cloneTriggerName = "";

	            /**
	             * CloneSessionRequest cloneTriggerProducerName.
	             * @member {string} cloneTriggerProducerName
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.cloneTriggerProducerName = "";

	            /**
	             * CloneSessionRequest cloneTriggerTrustedProducerUid.
	             * @member {number} cloneTriggerTrustedProducerUid
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.cloneTriggerTrustedProducerUid = 0;

	            /**
	             * CloneSessionRequest cloneTriggerBootTimeNs.
	             * @member {number} cloneTriggerBootTimeNs
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            CloneSessionRequest.prototype.cloneTriggerBootTimeNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * CloneSessionRequest selector.
	             * @member {"sessionId"|"uniqueSessionName"|undefined} selector
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             */
	            Object.defineProperty(CloneSessionRequest.prototype, "selector", {
	                get: $util.oneOfGetter($oneOfFields = ["sessionId", "uniqueSessionName"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new CloneSessionRequest instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @static
	             * @param {perfetto.protos.ICloneSessionRequest=} [properties] Properties to set
	             * @returns {perfetto.protos.CloneSessionRequest} CloneSessionRequest instance
	             */
	            CloneSessionRequest.create = function create(properties) {
	                return new CloneSessionRequest(properties);
	            };

	            /**
	             * Encodes the specified CloneSessionRequest message. Does not implicitly {@link perfetto.protos.CloneSessionRequest.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @static
	             * @param {perfetto.protos.ICloneSessionRequest} m CloneSessionRequest message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            CloneSessionRequest.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.sessionId != null && Object.hasOwnProperty.call(m, "sessionId"))
	                    w.uint32(8).uint64(m.sessionId);
	                if (m.skipTraceFilter != null && Object.hasOwnProperty.call(m, "skipTraceFilter"))
	                    w.uint32(16).bool(m.skipTraceFilter);
	                if (m.forBugreport != null && Object.hasOwnProperty.call(m, "forBugreport"))
	                    w.uint32(24).bool(m.forBugreport);
	                if (m.uniqueSessionName != null && Object.hasOwnProperty.call(m, "uniqueSessionName"))
	                    w.uint32(34).string(m.uniqueSessionName);
	                if (m.cloneTriggerName != null && Object.hasOwnProperty.call(m, "cloneTriggerName"))
	                    w.uint32(42).string(m.cloneTriggerName);
	                if (m.cloneTriggerProducerName != null && Object.hasOwnProperty.call(m, "cloneTriggerProducerName"))
	                    w.uint32(50).string(m.cloneTriggerProducerName);
	                if (m.cloneTriggerTrustedProducerUid != null && Object.hasOwnProperty.call(m, "cloneTriggerTrustedProducerUid"))
	                    w.uint32(56).int32(m.cloneTriggerTrustedProducerUid);
	                if (m.cloneTriggerBootTimeNs != null && Object.hasOwnProperty.call(m, "cloneTriggerBootTimeNs"))
	                    w.uint32(64).uint64(m.cloneTriggerBootTimeNs);
	                return w;
	            };

	            /**
	             * Decodes a CloneSessionRequest message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.CloneSessionRequest} CloneSessionRequest
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            CloneSessionRequest.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.CloneSessionRequest();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.sessionId = r.uint64();
	                            break;
	                        }
	                    case 4: {
	                            m.uniqueSessionName = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.skipTraceFilter = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.forBugreport = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.cloneTriggerName = r.string();
	                            break;
	                        }
	                    case 6: {
	                            m.cloneTriggerProducerName = r.string();
	                            break;
	                        }
	                    case 7: {
	                            m.cloneTriggerTrustedProducerUid = r.int32();
	                            break;
	                        }
	                    case 8: {
	                            m.cloneTriggerBootTimeNs = r.uint64();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a CloneSessionRequest message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.CloneSessionRequest} CloneSessionRequest
	             */
	            CloneSessionRequest.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.CloneSessionRequest)
	                    return d;
	                var m = new $root.perfetto.protos.CloneSessionRequest();
	                if (d.sessionId != null) {
	                    if ($util.Long)
	                        (m.sessionId = $util.Long.fromValue(d.sessionId)).unsigned = true;
	                    else if (typeof d.sessionId === "string")
	                        m.sessionId = parseInt(d.sessionId, 10);
	                    else if (typeof d.sessionId === "number")
	                        m.sessionId = d.sessionId;
	                    else if (typeof d.sessionId === "object")
	                        m.sessionId = new $util.LongBits(d.sessionId.low >>> 0, d.sessionId.high >>> 0).toNumber(true);
	                }
	                if (d.uniqueSessionName != null) {
	                    m.uniqueSessionName = String(d.uniqueSessionName);
	                }
	                if (d.skipTraceFilter != null) {
	                    m.skipTraceFilter = Boolean(d.skipTraceFilter);
	                }
	                if (d.forBugreport != null) {
	                    m.forBugreport = Boolean(d.forBugreport);
	                }
	                if (d.cloneTriggerName != null) {
	                    m.cloneTriggerName = String(d.cloneTriggerName);
	                }
	                if (d.cloneTriggerProducerName != null) {
	                    m.cloneTriggerProducerName = String(d.cloneTriggerProducerName);
	                }
	                if (d.cloneTriggerTrustedProducerUid != null) {
	                    m.cloneTriggerTrustedProducerUid = d.cloneTriggerTrustedProducerUid | 0;
	                }
	                if (d.cloneTriggerBootTimeNs != null) {
	                    if ($util.Long)
	                        (m.cloneTriggerBootTimeNs = $util.Long.fromValue(d.cloneTriggerBootTimeNs)).unsigned = true;
	                    else if (typeof d.cloneTriggerBootTimeNs === "string")
	                        m.cloneTriggerBootTimeNs = parseInt(d.cloneTriggerBootTimeNs, 10);
	                    else if (typeof d.cloneTriggerBootTimeNs === "number")
	                        m.cloneTriggerBootTimeNs = d.cloneTriggerBootTimeNs;
	                    else if (typeof d.cloneTriggerBootTimeNs === "object")
	                        m.cloneTriggerBootTimeNs = new $util.LongBits(d.cloneTriggerBootTimeNs.low >>> 0, d.cloneTriggerBootTimeNs.high >>> 0).toNumber(true);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a CloneSessionRequest message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @static
	             * @param {perfetto.protos.CloneSessionRequest} m CloneSessionRequest
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            CloneSessionRequest.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.skipTraceFilter = false;
	                    d.forBugreport = false;
	                    d.cloneTriggerName = "";
	                    d.cloneTriggerProducerName = "";
	                    d.cloneTriggerTrustedProducerUid = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.cloneTriggerBootTimeNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.cloneTriggerBootTimeNs = o.longs === String ? "0" : 0;
	                }
	                if (m.sessionId != null && m.hasOwnProperty("sessionId")) {
	                    if (typeof m.sessionId === "number")
	                        d.sessionId = o.longs === String ? String(m.sessionId) : m.sessionId;
	                    else
	                        d.sessionId = o.longs === String ? $util.Long.prototype.toString.call(m.sessionId) : o.longs === Number ? new $util.LongBits(m.sessionId.low >>> 0, m.sessionId.high >>> 0).toNumber(true) : m.sessionId;
	                    if (o.oneofs)
	                        d.selector = "sessionId";
	                }
	                if (m.skipTraceFilter != null && m.hasOwnProperty("skipTraceFilter")) {
	                    d.skipTraceFilter = m.skipTraceFilter;
	                }
	                if (m.forBugreport != null && m.hasOwnProperty("forBugreport")) {
	                    d.forBugreport = m.forBugreport;
	                }
	                if (m.uniqueSessionName != null && m.hasOwnProperty("uniqueSessionName")) {
	                    d.uniqueSessionName = m.uniqueSessionName;
	                    if (o.oneofs)
	                        d.selector = "uniqueSessionName";
	                }
	                if (m.cloneTriggerName != null && m.hasOwnProperty("cloneTriggerName")) {
	                    d.cloneTriggerName = m.cloneTriggerName;
	                }
	                if (m.cloneTriggerProducerName != null && m.hasOwnProperty("cloneTriggerProducerName")) {
	                    d.cloneTriggerProducerName = m.cloneTriggerProducerName;
	                }
	                if (m.cloneTriggerTrustedProducerUid != null && m.hasOwnProperty("cloneTriggerTrustedProducerUid")) {
	                    d.cloneTriggerTrustedProducerUid = m.cloneTriggerTrustedProducerUid;
	                }
	                if (m.cloneTriggerBootTimeNs != null && m.hasOwnProperty("cloneTriggerBootTimeNs")) {
	                    if (typeof m.cloneTriggerBootTimeNs === "number")
	                        d.cloneTriggerBootTimeNs = o.longs === String ? String(m.cloneTriggerBootTimeNs) : m.cloneTriggerBootTimeNs;
	                    else
	                        d.cloneTriggerBootTimeNs = o.longs === String ? $util.Long.prototype.toString.call(m.cloneTriggerBootTimeNs) : o.longs === Number ? new $util.LongBits(m.cloneTriggerBootTimeNs.low >>> 0, m.cloneTriggerBootTimeNs.high >>> 0).toNumber(true) : m.cloneTriggerBootTimeNs;
	                }
	                return d;
	            };

	            /**
	             * Converts this CloneSessionRequest to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            CloneSessionRequest.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for CloneSessionRequest
	             * @function getTypeUrl
	             * @memberof perfetto.protos.CloneSessionRequest
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            CloneSessionRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.CloneSessionRequest";
	            };

	            return CloneSessionRequest;
	        })();

	        protos.CloneSessionResponse = (function() {

	            /**
	             * Properties of a CloneSessionResponse.
	             * @memberof perfetto.protos
	             * @interface ICloneSessionResponse
	             * @property {boolean|null} [success] CloneSessionResponse success
	             * @property {string|null} [error] CloneSessionResponse error
	             * @property {number|null} [uuidMsb] CloneSessionResponse uuidMsb
	             * @property {number|null} [uuidLsb] CloneSessionResponse uuidLsb
	             */

	            /**
	             * Constructs a new CloneSessionResponse.
	             * @memberof perfetto.protos
	             * @classdesc Represents a CloneSessionResponse.
	             * @implements ICloneSessionResponse
	             * @constructor
	             * @param {perfetto.protos.ICloneSessionResponse=} [p] Properties to set
	             */
	            function CloneSessionResponse(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * CloneSessionResponse success.
	             * @member {boolean} success
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @instance
	             */
	            CloneSessionResponse.prototype.success = false;

	            /**
	             * CloneSessionResponse error.
	             * @member {string} error
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @instance
	             */
	            CloneSessionResponse.prototype.error = "";

	            /**
	             * CloneSessionResponse uuidMsb.
	             * @member {number} uuidMsb
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @instance
	             */
	            CloneSessionResponse.prototype.uuidMsb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * CloneSessionResponse uuidLsb.
	             * @member {number} uuidLsb
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @instance
	             */
	            CloneSessionResponse.prototype.uuidLsb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * Creates a new CloneSessionResponse instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @static
	             * @param {perfetto.protos.ICloneSessionResponse=} [properties] Properties to set
	             * @returns {perfetto.protos.CloneSessionResponse} CloneSessionResponse instance
	             */
	            CloneSessionResponse.create = function create(properties) {
	                return new CloneSessionResponse(properties);
	            };

	            /**
	             * Encodes the specified CloneSessionResponse message. Does not implicitly {@link perfetto.protos.CloneSessionResponse.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @static
	             * @param {perfetto.protos.ICloneSessionResponse} m CloneSessionResponse message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            CloneSessionResponse.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.success != null && Object.hasOwnProperty.call(m, "success"))
	                    w.uint32(8).bool(m.success);
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(18).string(m.error);
	                if (m.uuidMsb != null && Object.hasOwnProperty.call(m, "uuidMsb"))
	                    w.uint32(24).int64(m.uuidMsb);
	                if (m.uuidLsb != null && Object.hasOwnProperty.call(m, "uuidLsb"))
	                    w.uint32(32).int64(m.uuidLsb);
	                return w;
	            };

	            /**
	             * Decodes a CloneSessionResponse message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.CloneSessionResponse} CloneSessionResponse
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            CloneSessionResponse.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.CloneSessionResponse();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.success = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            m.error = r.string();
	                            break;
	                        }
	                    case 3: {
	                            m.uuidMsb = r.int64();
	                            break;
	                        }
	                    case 4: {
	                            m.uuidLsb = r.int64();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a CloneSessionResponse message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.CloneSessionResponse} CloneSessionResponse
	             */
	            CloneSessionResponse.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.CloneSessionResponse)
	                    return d;
	                var m = new $root.perfetto.protos.CloneSessionResponse();
	                if (d.success != null) {
	                    m.success = Boolean(d.success);
	                }
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                if (d.uuidMsb != null) {
	                    if ($util.Long)
	                        (m.uuidMsb = $util.Long.fromValue(d.uuidMsb)).unsigned = false;
	                    else if (typeof d.uuidMsb === "string")
	                        m.uuidMsb = parseInt(d.uuidMsb, 10);
	                    else if (typeof d.uuidMsb === "number")
	                        m.uuidMsb = d.uuidMsb;
	                    else if (typeof d.uuidMsb === "object")
	                        m.uuidMsb = new $util.LongBits(d.uuidMsb.low >>> 0, d.uuidMsb.high >>> 0).toNumber();
	                }
	                if (d.uuidLsb != null) {
	                    if ($util.Long)
	                        (m.uuidLsb = $util.Long.fromValue(d.uuidLsb)).unsigned = false;
	                    else if (typeof d.uuidLsb === "string")
	                        m.uuidLsb = parseInt(d.uuidLsb, 10);
	                    else if (typeof d.uuidLsb === "number")
	                        m.uuidLsb = d.uuidLsb;
	                    else if (typeof d.uuidLsb === "object")
	                        m.uuidLsb = new $util.LongBits(d.uuidLsb.low >>> 0, d.uuidLsb.high >>> 0).toNumber();
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a CloneSessionResponse message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @static
	             * @param {perfetto.protos.CloneSessionResponse} m CloneSessionResponse
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            CloneSessionResponse.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.success = false;
	                    d.error = "";
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.uuidMsb = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.uuidMsb = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.uuidLsb = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.uuidLsb = o.longs === String ? "0" : 0;
	                }
	                if (m.success != null && m.hasOwnProperty("success")) {
	                    d.success = m.success;
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                if (m.uuidMsb != null && m.hasOwnProperty("uuidMsb")) {
	                    if (typeof m.uuidMsb === "number")
	                        d.uuidMsb = o.longs === String ? String(m.uuidMsb) : m.uuidMsb;
	                    else
	                        d.uuidMsb = o.longs === String ? $util.Long.prototype.toString.call(m.uuidMsb) : o.longs === Number ? new $util.LongBits(m.uuidMsb.low >>> 0, m.uuidMsb.high >>> 0).toNumber() : m.uuidMsb;
	                }
	                if (m.uuidLsb != null && m.hasOwnProperty("uuidLsb")) {
	                    if (typeof m.uuidLsb === "number")
	                        d.uuidLsb = o.longs === String ? String(m.uuidLsb) : m.uuidLsb;
	                    else
	                        d.uuidLsb = o.longs === String ? $util.Long.prototype.toString.call(m.uuidLsb) : o.longs === Number ? new $util.LongBits(m.uuidLsb.low >>> 0, m.uuidLsb.high >>> 0).toNumber() : m.uuidLsb;
	                }
	                return d;
	            };

	            /**
	             * Converts this CloneSessionResponse to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            CloneSessionResponse.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for CloneSessionResponse
	             * @function getTypeUrl
	             * @memberof perfetto.protos.CloneSessionResponse
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            CloneSessionResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.CloneSessionResponse";
	            };

	            return CloneSessionResponse;
	        })();

	        protos.ObservableEvents = (function() {

	            /**
	             * Properties of an ObservableEvents.
	             * @memberof perfetto.protos
	             * @interface IObservableEvents
	             * @property {Array.<perfetto.protos.ObservableEvents.IDataSourceInstanceStateChange>|null} [instanceStateChanges] ObservableEvents instanceStateChanges
	             * @property {boolean|null} [allDataSourcesStarted] ObservableEvents allDataSourcesStarted
	             * @property {perfetto.protos.ObservableEvents.ICloneTriggerHit|null} [cloneTriggerHit] ObservableEvents cloneTriggerHit
	             */

	            /**
	             * Constructs a new ObservableEvents.
	             * @memberof perfetto.protos
	             * @classdesc Represents an ObservableEvents.
	             * @implements IObservableEvents
	             * @constructor
	             * @param {perfetto.protos.IObservableEvents=} [p] Properties to set
	             */
	            function ObservableEvents(p) {
	                this.instanceStateChanges = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ObservableEvents instanceStateChanges.
	             * @member {Array.<perfetto.protos.ObservableEvents.IDataSourceInstanceStateChange>} instanceStateChanges
	             * @memberof perfetto.protos.ObservableEvents
	             * @instance
	             */
	            ObservableEvents.prototype.instanceStateChanges = $util.emptyArray;

	            /**
	             * ObservableEvents allDataSourcesStarted.
	             * @member {boolean} allDataSourcesStarted
	             * @memberof perfetto.protos.ObservableEvents
	             * @instance
	             */
	            ObservableEvents.prototype.allDataSourcesStarted = false;

	            /**
	             * ObservableEvents cloneTriggerHit.
	             * @member {perfetto.protos.ObservableEvents.ICloneTriggerHit|null|undefined} cloneTriggerHit
	             * @memberof perfetto.protos.ObservableEvents
	             * @instance
	             */
	            ObservableEvents.prototype.cloneTriggerHit = null;

	            /**
	             * Creates a new ObservableEvents instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ObservableEvents
	             * @static
	             * @param {perfetto.protos.IObservableEvents=} [properties] Properties to set
	             * @returns {perfetto.protos.ObservableEvents} ObservableEvents instance
	             */
	            ObservableEvents.create = function create(properties) {
	                return new ObservableEvents(properties);
	            };

	            /**
	             * Encodes the specified ObservableEvents message. Does not implicitly {@link perfetto.protos.ObservableEvents.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ObservableEvents
	             * @static
	             * @param {perfetto.protos.IObservableEvents} m ObservableEvents message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ObservableEvents.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.instanceStateChanges != null && m.instanceStateChanges.length) {
	                    for (var i = 0; i < m.instanceStateChanges.length; ++i)
	                        $root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange.encode(m.instanceStateChanges[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.allDataSourcesStarted != null && Object.hasOwnProperty.call(m, "allDataSourcesStarted"))
	                    w.uint32(16).bool(m.allDataSourcesStarted);
	                if (m.cloneTriggerHit != null && Object.hasOwnProperty.call(m, "cloneTriggerHit"))
	                    $root.perfetto.protos.ObservableEvents.CloneTriggerHit.encode(m.cloneTriggerHit, w.uint32(26).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes an ObservableEvents message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ObservableEvents
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ObservableEvents} ObservableEvents
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ObservableEvents.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ObservableEvents();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.instanceStateChanges && m.instanceStateChanges.length))
	                                m.instanceStateChanges = [];
	                            m.instanceStateChanges.push($root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            m.allDataSourcesStarted = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.cloneTriggerHit = $root.perfetto.protos.ObservableEvents.CloneTriggerHit.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an ObservableEvents message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ObservableEvents
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ObservableEvents} ObservableEvents
	             */
	            ObservableEvents.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ObservableEvents)
	                    return d;
	                var m = new $root.perfetto.protos.ObservableEvents();
	                if (d.instanceStateChanges) {
	                    if (!Array.isArray(d.instanceStateChanges))
	                        throw TypeError(".perfetto.protos.ObservableEvents.instanceStateChanges: array expected");
	                    m.instanceStateChanges = [];
	                    for (var i = 0; i < d.instanceStateChanges.length; ++i) {
	                        if (typeof d.instanceStateChanges[i] !== "object")
	                            throw TypeError(".perfetto.protos.ObservableEvents.instanceStateChanges: object expected");
	                        m.instanceStateChanges[i] = $root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange.fromObject(d.instanceStateChanges[i]);
	                    }
	                }
	                if (d.allDataSourcesStarted != null) {
	                    m.allDataSourcesStarted = Boolean(d.allDataSourcesStarted);
	                }
	                if (d.cloneTriggerHit != null) {
	                    if (typeof d.cloneTriggerHit !== "object")
	                        throw TypeError(".perfetto.protos.ObservableEvents.cloneTriggerHit: object expected");
	                    m.cloneTriggerHit = $root.perfetto.protos.ObservableEvents.CloneTriggerHit.fromObject(d.cloneTriggerHit);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an ObservableEvents message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ObservableEvents
	             * @static
	             * @param {perfetto.protos.ObservableEvents} m ObservableEvents
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ObservableEvents.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.instanceStateChanges = [];
	                }
	                if (o.defaults) {
	                    d.allDataSourcesStarted = false;
	                    d.cloneTriggerHit = null;
	                }
	                if (m.instanceStateChanges && m.instanceStateChanges.length) {
	                    d.instanceStateChanges = [];
	                    for (var j = 0; j < m.instanceStateChanges.length; ++j) {
	                        d.instanceStateChanges[j] = $root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange.toObject(m.instanceStateChanges[j], o);
	                    }
	                }
	                if (m.allDataSourcesStarted != null && m.hasOwnProperty("allDataSourcesStarted")) {
	                    d.allDataSourcesStarted = m.allDataSourcesStarted;
	                }
	                if (m.cloneTriggerHit != null && m.hasOwnProperty("cloneTriggerHit")) {
	                    d.cloneTriggerHit = $root.perfetto.protos.ObservableEvents.CloneTriggerHit.toObject(m.cloneTriggerHit, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this ObservableEvents to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ObservableEvents
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ObservableEvents.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ObservableEvents
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ObservableEvents
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ObservableEvents.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ObservableEvents";
	            };

	            /**
	             * Type enum.
	             * @name perfetto.protos.ObservableEvents.Type
	             * @enum {number}
	             * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
	             * @property {number} TYPE_DATA_SOURCES_INSTANCES=1 TYPE_DATA_SOURCES_INSTANCES value
	             * @property {number} TYPE_ALL_DATA_SOURCES_STARTED=2 TYPE_ALL_DATA_SOURCES_STARTED value
	             * @property {number} TYPE_CLONE_TRIGGER_HIT=4 TYPE_CLONE_TRIGGER_HIT value
	             */
	            ObservableEvents.Type = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "TYPE_DATA_SOURCES_INSTANCES"] = 1;
	                values[valuesById[2] = "TYPE_ALL_DATA_SOURCES_STARTED"] = 2;
	                values[valuesById[4] = "TYPE_CLONE_TRIGGER_HIT"] = 4;
	                return values;
	            })();

	            /**
	             * DataSourceInstanceState enum.
	             * @name perfetto.protos.ObservableEvents.DataSourceInstanceState
	             * @enum {number}
	             * @property {number} DATA_SOURCE_INSTANCE_STATE_STOPPED=1 DATA_SOURCE_INSTANCE_STATE_STOPPED value
	             * @property {number} DATA_SOURCE_INSTANCE_STATE_STARTED=2 DATA_SOURCE_INSTANCE_STATE_STARTED value
	             */
	            ObservableEvents.DataSourceInstanceState = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[1] = "DATA_SOURCE_INSTANCE_STATE_STOPPED"] = 1;
	                values[valuesById[2] = "DATA_SOURCE_INSTANCE_STATE_STARTED"] = 2;
	                return values;
	            })();

	            ObservableEvents.DataSourceInstanceStateChange = (function() {

	                /**
	                 * Properties of a DataSourceInstanceStateChange.
	                 * @memberof perfetto.protos.ObservableEvents
	                 * @interface IDataSourceInstanceStateChange
	                 * @property {string|null} [producerName] DataSourceInstanceStateChange producerName
	                 * @property {string|null} [dataSourceName] DataSourceInstanceStateChange dataSourceName
	                 * @property {perfetto.protos.ObservableEvents.DataSourceInstanceState|null} [state] DataSourceInstanceStateChange state
	                 */

	                /**
	                 * Constructs a new DataSourceInstanceStateChange.
	                 * @memberof perfetto.protos.ObservableEvents
	                 * @classdesc Represents a DataSourceInstanceStateChange.
	                 * @implements IDataSourceInstanceStateChange
	                 * @constructor
	                 * @param {perfetto.protos.ObservableEvents.IDataSourceInstanceStateChange=} [p] Properties to set
	                 */
	                function DataSourceInstanceStateChange(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * DataSourceInstanceStateChange producerName.
	                 * @member {string} producerName
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @instance
	                 */
	                DataSourceInstanceStateChange.prototype.producerName = "";

	                /**
	                 * DataSourceInstanceStateChange dataSourceName.
	                 * @member {string} dataSourceName
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @instance
	                 */
	                DataSourceInstanceStateChange.prototype.dataSourceName = "";

	                /**
	                 * DataSourceInstanceStateChange state.
	                 * @member {perfetto.protos.ObservableEvents.DataSourceInstanceState} state
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @instance
	                 */
	                DataSourceInstanceStateChange.prototype.state = 1;

	                /**
	                 * Creates a new DataSourceInstanceStateChange instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @static
	                 * @param {perfetto.protos.ObservableEvents.IDataSourceInstanceStateChange=} [properties] Properties to set
	                 * @returns {perfetto.protos.ObservableEvents.DataSourceInstanceStateChange} DataSourceInstanceStateChange instance
	                 */
	                DataSourceInstanceStateChange.create = function create(properties) {
	                    return new DataSourceInstanceStateChange(properties);
	                };

	                /**
	                 * Encodes the specified DataSourceInstanceStateChange message. Does not implicitly {@link perfetto.protos.ObservableEvents.DataSourceInstanceStateChange.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @static
	                 * @param {perfetto.protos.ObservableEvents.IDataSourceInstanceStateChange} m DataSourceInstanceStateChange message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                DataSourceInstanceStateChange.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.producerName != null && Object.hasOwnProperty.call(m, "producerName"))
	                        w.uint32(10).string(m.producerName);
	                    if (m.dataSourceName != null && Object.hasOwnProperty.call(m, "dataSourceName"))
	                        w.uint32(18).string(m.dataSourceName);
	                    if (m.state != null && Object.hasOwnProperty.call(m, "state"))
	                        w.uint32(24).int32(m.state);
	                    return w;
	                };

	                /**
	                 * Decodes a DataSourceInstanceStateChange message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.ObservableEvents.DataSourceInstanceStateChange} DataSourceInstanceStateChange
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                DataSourceInstanceStateChange.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.producerName = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.dataSourceName = r.string();
	                                break;
	                            }
	                        case 3: {
	                                m.state = r.int32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a DataSourceInstanceStateChange message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.ObservableEvents.DataSourceInstanceStateChange} DataSourceInstanceStateChange
	                 */
	                DataSourceInstanceStateChange.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange)
	                        return d;
	                    var m = new $root.perfetto.protos.ObservableEvents.DataSourceInstanceStateChange();
	                    if (d.producerName != null) {
	                        m.producerName = String(d.producerName);
	                    }
	                    if (d.dataSourceName != null) {
	                        m.dataSourceName = String(d.dataSourceName);
	                    }
	                    switch (d.state) {
	                    default:
	                        if (typeof d.state === "number") {
	                            m.state = d.state;
	                            break;
	                        }
	                        break;
	                    case "DATA_SOURCE_INSTANCE_STATE_STOPPED":
	                    case 1:
	                        m.state = 1;
	                        break;
	                    case "DATA_SOURCE_INSTANCE_STATE_STARTED":
	                    case 2:
	                        m.state = 2;
	                        break;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a DataSourceInstanceStateChange message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @static
	                 * @param {perfetto.protos.ObservableEvents.DataSourceInstanceStateChange} m DataSourceInstanceStateChange
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                DataSourceInstanceStateChange.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.producerName = "";
	                        d.dataSourceName = "";
	                        d.state = o.enums === String ? "DATA_SOURCE_INSTANCE_STATE_STOPPED" : 1;
	                    }
	                    if (m.producerName != null && m.hasOwnProperty("producerName")) {
	                        d.producerName = m.producerName;
	                    }
	                    if (m.dataSourceName != null && m.hasOwnProperty("dataSourceName")) {
	                        d.dataSourceName = m.dataSourceName;
	                    }
	                    if (m.state != null && m.hasOwnProperty("state")) {
	                        d.state = o.enums === String ? $root.perfetto.protos.ObservableEvents.DataSourceInstanceState[m.state] === undefined ? m.state : $root.perfetto.protos.ObservableEvents.DataSourceInstanceState[m.state] : m.state;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this DataSourceInstanceStateChange to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                DataSourceInstanceStateChange.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for DataSourceInstanceStateChange
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.ObservableEvents.DataSourceInstanceStateChange
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                DataSourceInstanceStateChange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.ObservableEvents.DataSourceInstanceStateChange";
	                };

	                return DataSourceInstanceStateChange;
	            })();

	            ObservableEvents.CloneTriggerHit = (function() {

	                /**
	                 * Properties of a CloneTriggerHit.
	                 * @memberof perfetto.protos.ObservableEvents
	                 * @interface ICloneTriggerHit
	                 * @property {number|null} [tracingSessionId] CloneTriggerHit tracingSessionId
	                 * @property {string|null} [triggerName] CloneTriggerHit triggerName
	                 * @property {string|null} [producerName] CloneTriggerHit producerName
	                 * @property {number|null} [producerUid] CloneTriggerHit producerUid
	                 * @property {number|null} [bootTimeNs] CloneTriggerHit bootTimeNs
	                 */

	                /**
	                 * Constructs a new CloneTriggerHit.
	                 * @memberof perfetto.protos.ObservableEvents
	                 * @classdesc Represents a CloneTriggerHit.
	                 * @implements ICloneTriggerHit
	                 * @constructor
	                 * @param {perfetto.protos.ObservableEvents.ICloneTriggerHit=} [p] Properties to set
	                 */
	                function CloneTriggerHit(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * CloneTriggerHit tracingSessionId.
	                 * @member {number} tracingSessionId
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @instance
	                 */
	                CloneTriggerHit.prototype.tracingSessionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * CloneTriggerHit triggerName.
	                 * @member {string} triggerName
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @instance
	                 */
	                CloneTriggerHit.prototype.triggerName = "";

	                /**
	                 * CloneTriggerHit producerName.
	                 * @member {string} producerName
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @instance
	                 */
	                CloneTriggerHit.prototype.producerName = "";

	                /**
	                 * CloneTriggerHit producerUid.
	                 * @member {number} producerUid
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @instance
	                 */
	                CloneTriggerHit.prototype.producerUid = 0;

	                /**
	                 * CloneTriggerHit bootTimeNs.
	                 * @member {number} bootTimeNs
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @instance
	                 */
	                CloneTriggerHit.prototype.bootTimeNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * Creates a new CloneTriggerHit instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @static
	                 * @param {perfetto.protos.ObservableEvents.ICloneTriggerHit=} [properties] Properties to set
	                 * @returns {perfetto.protos.ObservableEvents.CloneTriggerHit} CloneTriggerHit instance
	                 */
	                CloneTriggerHit.create = function create(properties) {
	                    return new CloneTriggerHit(properties);
	                };

	                /**
	                 * Encodes the specified CloneTriggerHit message. Does not implicitly {@link perfetto.protos.ObservableEvents.CloneTriggerHit.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @static
	                 * @param {perfetto.protos.ObservableEvents.ICloneTriggerHit} m CloneTriggerHit message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                CloneTriggerHit.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.tracingSessionId != null && Object.hasOwnProperty.call(m, "tracingSessionId"))
	                        w.uint32(8).int64(m.tracingSessionId);
	                    if (m.triggerName != null && Object.hasOwnProperty.call(m, "triggerName"))
	                        w.uint32(18).string(m.triggerName);
	                    if (m.producerName != null && Object.hasOwnProperty.call(m, "producerName"))
	                        w.uint32(26).string(m.producerName);
	                    if (m.producerUid != null && Object.hasOwnProperty.call(m, "producerUid"))
	                        w.uint32(32).uint32(m.producerUid);
	                    if (m.bootTimeNs != null && Object.hasOwnProperty.call(m, "bootTimeNs"))
	                        w.uint32(40).uint64(m.bootTimeNs);
	                    return w;
	                };

	                /**
	                 * Decodes a CloneTriggerHit message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.ObservableEvents.CloneTriggerHit} CloneTriggerHit
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                CloneTriggerHit.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ObservableEvents.CloneTriggerHit();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.tracingSessionId = r.int64();
	                                break;
	                            }
	                        case 2: {
	                                m.triggerName = r.string();
	                                break;
	                            }
	                        case 3: {
	                                m.producerName = r.string();
	                                break;
	                            }
	                        case 4: {
	                                m.producerUid = r.uint32();
	                                break;
	                            }
	                        case 5: {
	                                m.bootTimeNs = r.uint64();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a CloneTriggerHit message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.ObservableEvents.CloneTriggerHit} CloneTriggerHit
	                 */
	                CloneTriggerHit.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.ObservableEvents.CloneTriggerHit)
	                        return d;
	                    var m = new $root.perfetto.protos.ObservableEvents.CloneTriggerHit();
	                    if (d.tracingSessionId != null) {
	                        if ($util.Long)
	                            (m.tracingSessionId = $util.Long.fromValue(d.tracingSessionId)).unsigned = false;
	                        else if (typeof d.tracingSessionId === "string")
	                            m.tracingSessionId = parseInt(d.tracingSessionId, 10);
	                        else if (typeof d.tracingSessionId === "number")
	                            m.tracingSessionId = d.tracingSessionId;
	                        else if (typeof d.tracingSessionId === "object")
	                            m.tracingSessionId = new $util.LongBits(d.tracingSessionId.low >>> 0, d.tracingSessionId.high >>> 0).toNumber();
	                    }
	                    if (d.triggerName != null) {
	                        m.triggerName = String(d.triggerName);
	                    }
	                    if (d.producerName != null) {
	                        m.producerName = String(d.producerName);
	                    }
	                    if (d.producerUid != null) {
	                        m.producerUid = d.producerUid >>> 0;
	                    }
	                    if (d.bootTimeNs != null) {
	                        if ($util.Long)
	                            (m.bootTimeNs = $util.Long.fromValue(d.bootTimeNs)).unsigned = true;
	                        else if (typeof d.bootTimeNs === "string")
	                            m.bootTimeNs = parseInt(d.bootTimeNs, 10);
	                        else if (typeof d.bootTimeNs === "number")
	                            m.bootTimeNs = d.bootTimeNs;
	                        else if (typeof d.bootTimeNs === "object")
	                            m.bootTimeNs = new $util.LongBits(d.bootTimeNs.low >>> 0, d.bootTimeNs.high >>> 0).toNumber(true);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a CloneTriggerHit message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @static
	                 * @param {perfetto.protos.ObservableEvents.CloneTriggerHit} m CloneTriggerHit
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                CloneTriggerHit.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.tracingSessionId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.tracingSessionId = o.longs === String ? "0" : 0;
	                        d.triggerName = "";
	                        d.producerName = "";
	                        d.producerUid = 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.bootTimeNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.bootTimeNs = o.longs === String ? "0" : 0;
	                    }
	                    if (m.tracingSessionId != null && m.hasOwnProperty("tracingSessionId")) {
	                        if (typeof m.tracingSessionId === "number")
	                            d.tracingSessionId = o.longs === String ? String(m.tracingSessionId) : m.tracingSessionId;
	                        else
	                            d.tracingSessionId = o.longs === String ? $util.Long.prototype.toString.call(m.tracingSessionId) : o.longs === Number ? new $util.LongBits(m.tracingSessionId.low >>> 0, m.tracingSessionId.high >>> 0).toNumber() : m.tracingSessionId;
	                    }
	                    if (m.triggerName != null && m.hasOwnProperty("triggerName")) {
	                        d.triggerName = m.triggerName;
	                    }
	                    if (m.producerName != null && m.hasOwnProperty("producerName")) {
	                        d.producerName = m.producerName;
	                    }
	                    if (m.producerUid != null && m.hasOwnProperty("producerUid")) {
	                        d.producerUid = m.producerUid;
	                    }
	                    if (m.bootTimeNs != null && m.hasOwnProperty("bootTimeNs")) {
	                        if (typeof m.bootTimeNs === "number")
	                            d.bootTimeNs = o.longs === String ? String(m.bootTimeNs) : m.bootTimeNs;
	                        else
	                            d.bootTimeNs = o.longs === String ? $util.Long.prototype.toString.call(m.bootTimeNs) : o.longs === Number ? new $util.LongBits(m.bootTimeNs.low >>> 0, m.bootTimeNs.high >>> 0).toNumber(true) : m.bootTimeNs;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this CloneTriggerHit to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                CloneTriggerHit.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for CloneTriggerHit
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.ObservableEvents.CloneTriggerHit
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                CloneTriggerHit.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.ObservableEvents.CloneTriggerHit";
	                };

	                return CloneTriggerHit;
	            })();

	            return ObservableEvents;
	        })();

	        protos.TracingServiceState = (function() {

	            /**
	             * Properties of a TracingServiceState.
	             * @memberof perfetto.protos
	             * @interface ITracingServiceState
	             * @property {Array.<perfetto.protos.TracingServiceState.IProducer>|null} [producers] TracingServiceState producers
	             * @property {Array.<perfetto.protos.TracingServiceState.IDataSource>|null} [dataSources] TracingServiceState dataSources
	             * @property {Array.<perfetto.protos.TracingServiceState.ITracingSession>|null} [tracingSessions] TracingServiceState tracingSessions
	             * @property {boolean|null} [supportsTracingSessions] TracingServiceState supportsTracingSessions
	             * @property {number|null} [numSessions] TracingServiceState numSessions
	             * @property {number|null} [numSessionsStarted] TracingServiceState numSessionsStarted
	             * @property {string|null} [tracingServiceVersion] TracingServiceState tracingServiceVersion
	             */

	            /**
	             * Constructs a new TracingServiceState.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TracingServiceState.
	             * @implements ITracingServiceState
	             * @constructor
	             * @param {perfetto.protos.ITracingServiceState=} [p] Properties to set
	             */
	            function TracingServiceState(p) {
	                this.producers = [];
	                this.dataSources = [];
	                this.tracingSessions = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TracingServiceState producers.
	             * @member {Array.<perfetto.protos.TracingServiceState.IProducer>} producers
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.producers = $util.emptyArray;

	            /**
	             * TracingServiceState dataSources.
	             * @member {Array.<perfetto.protos.TracingServiceState.IDataSource>} dataSources
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.dataSources = $util.emptyArray;

	            /**
	             * TracingServiceState tracingSessions.
	             * @member {Array.<perfetto.protos.TracingServiceState.ITracingSession>} tracingSessions
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.tracingSessions = $util.emptyArray;

	            /**
	             * TracingServiceState supportsTracingSessions.
	             * @member {boolean} supportsTracingSessions
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.supportsTracingSessions = false;

	            /**
	             * TracingServiceState numSessions.
	             * @member {number} numSessions
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.numSessions = 0;

	            /**
	             * TracingServiceState numSessionsStarted.
	             * @member {number} numSessionsStarted
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.numSessionsStarted = 0;

	            /**
	             * TracingServiceState tracingServiceVersion.
	             * @member {string} tracingServiceVersion
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             */
	            TracingServiceState.prototype.tracingServiceVersion = "";

	            /**
	             * Creates a new TracingServiceState instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TracingServiceState
	             * @static
	             * @param {perfetto.protos.ITracingServiceState=} [properties] Properties to set
	             * @returns {perfetto.protos.TracingServiceState} TracingServiceState instance
	             */
	            TracingServiceState.create = function create(properties) {
	                return new TracingServiceState(properties);
	            };

	            /**
	             * Encodes the specified TracingServiceState message. Does not implicitly {@link perfetto.protos.TracingServiceState.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TracingServiceState
	             * @static
	             * @param {perfetto.protos.ITracingServiceState} m TracingServiceState message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TracingServiceState.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.producers != null && m.producers.length) {
	                    for (var i = 0; i < m.producers.length; ++i)
	                        $root.perfetto.protos.TracingServiceState.Producer.encode(m.producers[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.dataSources != null && m.dataSources.length) {
	                    for (var i = 0; i < m.dataSources.length; ++i)
	                        $root.perfetto.protos.TracingServiceState.DataSource.encode(m.dataSources[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.numSessions != null && Object.hasOwnProperty.call(m, "numSessions"))
	                    w.uint32(24).int32(m.numSessions);
	                if (m.numSessionsStarted != null && Object.hasOwnProperty.call(m, "numSessionsStarted"))
	                    w.uint32(32).int32(m.numSessionsStarted);
	                if (m.tracingServiceVersion != null && Object.hasOwnProperty.call(m, "tracingServiceVersion"))
	                    w.uint32(42).string(m.tracingServiceVersion);
	                if (m.tracingSessions != null && m.tracingSessions.length) {
	                    for (var i = 0; i < m.tracingSessions.length; ++i)
	                        $root.perfetto.protos.TracingServiceState.TracingSession.encode(m.tracingSessions[i], w.uint32(50).fork()).ldelim();
	                }
	                if (m.supportsTracingSessions != null && Object.hasOwnProperty.call(m, "supportsTracingSessions"))
	                    w.uint32(56).bool(m.supportsTracingSessions);
	                return w;
	            };

	            /**
	             * Decodes a TracingServiceState message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TracingServiceState
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TracingServiceState} TracingServiceState
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TracingServiceState.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TracingServiceState();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.producers && m.producers.length))
	                                m.producers = [];
	                            m.producers.push($root.perfetto.protos.TracingServiceState.Producer.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.dataSources && m.dataSources.length))
	                                m.dataSources = [];
	                            m.dataSources.push($root.perfetto.protos.TracingServiceState.DataSource.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.tracingSessions && m.tracingSessions.length))
	                                m.tracingSessions = [];
	                            m.tracingSessions.push($root.perfetto.protos.TracingServiceState.TracingSession.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 7: {
	                            m.supportsTracingSessions = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.numSessions = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            m.numSessionsStarted = r.int32();
	                            break;
	                        }
	                    case 5: {
	                            m.tracingServiceVersion = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TracingServiceState message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TracingServiceState
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TracingServiceState} TracingServiceState
	             */
	            TracingServiceState.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TracingServiceState)
	                    return d;
	                var m = new $root.perfetto.protos.TracingServiceState();
	                if (d.producers) {
	                    if (!Array.isArray(d.producers))
	                        throw TypeError(".perfetto.protos.TracingServiceState.producers: array expected");
	                    m.producers = [];
	                    for (var i = 0; i < d.producers.length; ++i) {
	                        if (typeof d.producers[i] !== "object")
	                            throw TypeError(".perfetto.protos.TracingServiceState.producers: object expected");
	                        m.producers[i] = $root.perfetto.protos.TracingServiceState.Producer.fromObject(d.producers[i]);
	                    }
	                }
	                if (d.dataSources) {
	                    if (!Array.isArray(d.dataSources))
	                        throw TypeError(".perfetto.protos.TracingServiceState.dataSources: array expected");
	                    m.dataSources = [];
	                    for (var i = 0; i < d.dataSources.length; ++i) {
	                        if (typeof d.dataSources[i] !== "object")
	                            throw TypeError(".perfetto.protos.TracingServiceState.dataSources: object expected");
	                        m.dataSources[i] = $root.perfetto.protos.TracingServiceState.DataSource.fromObject(d.dataSources[i]);
	                    }
	                }
	                if (d.tracingSessions) {
	                    if (!Array.isArray(d.tracingSessions))
	                        throw TypeError(".perfetto.protos.TracingServiceState.tracingSessions: array expected");
	                    m.tracingSessions = [];
	                    for (var i = 0; i < d.tracingSessions.length; ++i) {
	                        if (typeof d.tracingSessions[i] !== "object")
	                            throw TypeError(".perfetto.protos.TracingServiceState.tracingSessions: object expected");
	                        m.tracingSessions[i] = $root.perfetto.protos.TracingServiceState.TracingSession.fromObject(d.tracingSessions[i]);
	                    }
	                }
	                if (d.supportsTracingSessions != null) {
	                    m.supportsTracingSessions = Boolean(d.supportsTracingSessions);
	                }
	                if (d.numSessions != null) {
	                    m.numSessions = d.numSessions | 0;
	                }
	                if (d.numSessionsStarted != null) {
	                    m.numSessionsStarted = d.numSessionsStarted | 0;
	                }
	                if (d.tracingServiceVersion != null) {
	                    m.tracingServiceVersion = String(d.tracingServiceVersion);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TracingServiceState message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TracingServiceState
	             * @static
	             * @param {perfetto.protos.TracingServiceState} m TracingServiceState
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TracingServiceState.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.producers = [];
	                    d.dataSources = [];
	                    d.tracingSessions = [];
	                }
	                if (o.defaults) {
	                    d.numSessions = 0;
	                    d.numSessionsStarted = 0;
	                    d.tracingServiceVersion = "";
	                    d.supportsTracingSessions = false;
	                }
	                if (m.producers && m.producers.length) {
	                    d.producers = [];
	                    for (var j = 0; j < m.producers.length; ++j) {
	                        d.producers[j] = $root.perfetto.protos.TracingServiceState.Producer.toObject(m.producers[j], o);
	                    }
	                }
	                if (m.dataSources && m.dataSources.length) {
	                    d.dataSources = [];
	                    for (var j = 0; j < m.dataSources.length; ++j) {
	                        d.dataSources[j] = $root.perfetto.protos.TracingServiceState.DataSource.toObject(m.dataSources[j], o);
	                    }
	                }
	                if (m.numSessions != null && m.hasOwnProperty("numSessions")) {
	                    d.numSessions = m.numSessions;
	                }
	                if (m.numSessionsStarted != null && m.hasOwnProperty("numSessionsStarted")) {
	                    d.numSessionsStarted = m.numSessionsStarted;
	                }
	                if (m.tracingServiceVersion != null && m.hasOwnProperty("tracingServiceVersion")) {
	                    d.tracingServiceVersion = m.tracingServiceVersion;
	                }
	                if (m.tracingSessions && m.tracingSessions.length) {
	                    d.tracingSessions = [];
	                    for (var j = 0; j < m.tracingSessions.length; ++j) {
	                        d.tracingSessions[j] = $root.perfetto.protos.TracingServiceState.TracingSession.toObject(m.tracingSessions[j], o);
	                    }
	                }
	                if (m.supportsTracingSessions != null && m.hasOwnProperty("supportsTracingSessions")) {
	                    d.supportsTracingSessions = m.supportsTracingSessions;
	                }
	                return d;
	            };

	            /**
	             * Converts this TracingServiceState to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TracingServiceState
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TracingServiceState.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TracingServiceState
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TracingServiceState
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TracingServiceState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TracingServiceState";
	            };

	            TracingServiceState.Producer = (function() {

	                /**
	                 * Properties of a Producer.
	                 * @memberof perfetto.protos.TracingServiceState
	                 * @interface IProducer
	                 * @property {number|null} [id] Producer id
	                 * @property {string|null} [name] Producer name
	                 * @property {number|null} [pid] Producer pid
	                 * @property {number|null} [uid] Producer uid
	                 * @property {string|null} [sdkVersion] Producer sdkVersion
	                 * @property {boolean|null} [frozen] Producer frozen
	                 */

	                /**
	                 * Constructs a new Producer.
	                 * @memberof perfetto.protos.TracingServiceState
	                 * @classdesc Represents a Producer.
	                 * @implements IProducer
	                 * @constructor
	                 * @param {perfetto.protos.TracingServiceState.IProducer=} [p] Properties to set
	                 */
	                function Producer(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Producer id.
	                 * @member {number} id
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 */
	                Producer.prototype.id = 0;

	                /**
	                 * Producer name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 */
	                Producer.prototype.name = "";

	                /**
	                 * Producer pid.
	                 * @member {number} pid
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 */
	                Producer.prototype.pid = 0;

	                /**
	                 * Producer uid.
	                 * @member {number} uid
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 */
	                Producer.prototype.uid = 0;

	                /**
	                 * Producer sdkVersion.
	                 * @member {string} sdkVersion
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 */
	                Producer.prototype.sdkVersion = "";

	                /**
	                 * Producer frozen.
	                 * @member {boolean} frozen
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 */
	                Producer.prototype.frozen = false;

	                /**
	                 * Creates a new Producer instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.IProducer=} [properties] Properties to set
	                 * @returns {perfetto.protos.TracingServiceState.Producer} Producer instance
	                 */
	                Producer.create = function create(properties) {
	                    return new Producer(properties);
	                };

	                /**
	                 * Encodes the specified Producer message. Does not implicitly {@link perfetto.protos.TracingServiceState.Producer.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.IProducer} m Producer message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Producer.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.id != null && Object.hasOwnProperty.call(m, "id"))
	                        w.uint32(8).int32(m.id);
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(18).string(m.name);
	                    if (m.uid != null && Object.hasOwnProperty.call(m, "uid"))
	                        w.uint32(24).int32(m.uid);
	                    if (m.sdkVersion != null && Object.hasOwnProperty.call(m, "sdkVersion"))
	                        w.uint32(34).string(m.sdkVersion);
	                    if (m.pid != null && Object.hasOwnProperty.call(m, "pid"))
	                        w.uint32(40).int32(m.pid);
	                    if (m.frozen != null && Object.hasOwnProperty.call(m, "frozen"))
	                        w.uint32(48).bool(m.frozen);
	                    return w;
	                };

	                /**
	                 * Decodes a Producer message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TracingServiceState.Producer} Producer
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Producer.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TracingServiceState.Producer();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.id = r.int32();
	                                break;
	                            }
	                        case 2: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 5: {
	                                m.pid = r.int32();
	                                break;
	                            }
	                        case 3: {
	                                m.uid = r.int32();
	                                break;
	                            }
	                        case 4: {
	                                m.sdkVersion = r.string();
	                                break;
	                            }
	                        case 6: {
	                                m.frozen = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a Producer message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TracingServiceState.Producer} Producer
	                 */
	                Producer.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TracingServiceState.Producer)
	                        return d;
	                    var m = new $root.perfetto.protos.TracingServiceState.Producer();
	                    if (d.id != null) {
	                        m.id = d.id | 0;
	                    }
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.pid != null) {
	                        m.pid = d.pid | 0;
	                    }
	                    if (d.uid != null) {
	                        m.uid = d.uid | 0;
	                    }
	                    if (d.sdkVersion != null) {
	                        m.sdkVersion = String(d.sdkVersion);
	                    }
	                    if (d.frozen != null) {
	                        m.frozen = Boolean(d.frozen);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a Producer message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.Producer} m Producer
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Producer.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.id = 0;
	                        d.name = "";
	                        d.uid = 0;
	                        d.sdkVersion = "";
	                        d.pid = 0;
	                        d.frozen = false;
	                    }
	                    if (m.id != null && m.hasOwnProperty("id")) {
	                        d.id = m.id;
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.uid != null && m.hasOwnProperty("uid")) {
	                        d.uid = m.uid;
	                    }
	                    if (m.sdkVersion != null && m.hasOwnProperty("sdkVersion")) {
	                        d.sdkVersion = m.sdkVersion;
	                    }
	                    if (m.pid != null && m.hasOwnProperty("pid")) {
	                        d.pid = m.pid;
	                    }
	                    if (m.frozen != null && m.hasOwnProperty("frozen")) {
	                        d.frozen = m.frozen;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Producer to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Producer.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Producer
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TracingServiceState.Producer
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Producer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TracingServiceState.Producer";
	                };

	                return Producer;
	            })();

	            TracingServiceState.DataSource = (function() {

	                /**
	                 * Properties of a DataSource.
	                 * @memberof perfetto.protos.TracingServiceState
	                 * @interface IDataSource
	                 * @property {perfetto.protos.IDataSourceDescriptor|null} [dsDescriptor] DataSource dsDescriptor
	                 * @property {number|null} [producerId] DataSource producerId
	                 */

	                /**
	                 * Constructs a new DataSource.
	                 * @memberof perfetto.protos.TracingServiceState
	                 * @classdesc Represents a DataSource.
	                 * @implements IDataSource
	                 * @constructor
	                 * @param {perfetto.protos.TracingServiceState.IDataSource=} [p] Properties to set
	                 */
	                function DataSource(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * DataSource dsDescriptor.
	                 * @member {perfetto.protos.IDataSourceDescriptor|null|undefined} dsDescriptor
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @instance
	                 */
	                DataSource.prototype.dsDescriptor = null;

	                /**
	                 * DataSource producerId.
	                 * @member {number} producerId
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @instance
	                 */
	                DataSource.prototype.producerId = 0;

	                /**
	                 * Creates a new DataSource instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.IDataSource=} [properties] Properties to set
	                 * @returns {perfetto.protos.TracingServiceState.DataSource} DataSource instance
	                 */
	                DataSource.create = function create(properties) {
	                    return new DataSource(properties);
	                };

	                /**
	                 * Encodes the specified DataSource message. Does not implicitly {@link perfetto.protos.TracingServiceState.DataSource.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.IDataSource} m DataSource message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                DataSource.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.dsDescriptor != null && Object.hasOwnProperty.call(m, "dsDescriptor"))
	                        $root.perfetto.protos.DataSourceDescriptor.encode(m.dsDescriptor, w.uint32(10).fork()).ldelim();
	                    if (m.producerId != null && Object.hasOwnProperty.call(m, "producerId"))
	                        w.uint32(16).int32(m.producerId);
	                    return w;
	                };

	                /**
	                 * Decodes a DataSource message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TracingServiceState.DataSource} DataSource
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                DataSource.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TracingServiceState.DataSource();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.dsDescriptor = $root.perfetto.protos.DataSourceDescriptor.decode(r, r.uint32());
	                                break;
	                            }
	                        case 2: {
	                                m.producerId = r.int32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a DataSource message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TracingServiceState.DataSource} DataSource
	                 */
	                DataSource.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TracingServiceState.DataSource)
	                        return d;
	                    var m = new $root.perfetto.protos.TracingServiceState.DataSource();
	                    if (d.dsDescriptor != null) {
	                        if (typeof d.dsDescriptor !== "object")
	                            throw TypeError(".perfetto.protos.TracingServiceState.DataSource.dsDescriptor: object expected");
	                        m.dsDescriptor = $root.perfetto.protos.DataSourceDescriptor.fromObject(d.dsDescriptor);
	                    }
	                    if (d.producerId != null) {
	                        m.producerId = d.producerId | 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a DataSource message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.DataSource} m DataSource
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                DataSource.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.dsDescriptor = null;
	                        d.producerId = 0;
	                    }
	                    if (m.dsDescriptor != null && m.hasOwnProperty("dsDescriptor")) {
	                        d.dsDescriptor = $root.perfetto.protos.DataSourceDescriptor.toObject(m.dsDescriptor, o);
	                    }
	                    if (m.producerId != null && m.hasOwnProperty("producerId")) {
	                        d.producerId = m.producerId;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this DataSource to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                DataSource.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for DataSource
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TracingServiceState.DataSource
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                DataSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TracingServiceState.DataSource";
	                };

	                return DataSource;
	            })();

	            TracingServiceState.TracingSession = (function() {

	                /**
	                 * Properties of a TracingSession.
	                 * @memberof perfetto.protos.TracingServiceState
	                 * @interface ITracingSession
	                 * @property {number|null} [id] TracingSession id
	                 * @property {number|null} [consumerUid] TracingSession consumerUid
	                 * @property {string|null} [state] TracingSession state
	                 * @property {string|null} [uniqueSessionName] TracingSession uniqueSessionName
	                 * @property {Array.<number>|null} [bufferSizeKb] TracingSession bufferSizeKb
	                 * @property {number|null} [durationMs] TracingSession durationMs
	                 * @property {number|null} [numDataSources] TracingSession numDataSources
	                 * @property {number|null} [startRealtimeNs] TracingSession startRealtimeNs
	                 * @property {number|null} [bugreportScore] TracingSession bugreportScore
	                 * @property {string|null} [bugreportFilename] TracingSession bugreportFilename
	                 * @property {boolean|null} [isStarted] TracingSession isStarted
	                 */

	                /**
	                 * Constructs a new TracingSession.
	                 * @memberof perfetto.protos.TracingServiceState
	                 * @classdesc Represents a TracingSession.
	                 * @implements ITracingSession
	                 * @constructor
	                 * @param {perfetto.protos.TracingServiceState.ITracingSession=} [p] Properties to set
	                 */
	                function TracingSession(p) {
	                    this.bufferSizeKb = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * TracingSession id.
	                 * @member {number} id
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * TracingSession consumerUid.
	                 * @member {number} consumerUid
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.consumerUid = 0;

	                /**
	                 * TracingSession state.
	                 * @member {string} state
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.state = "";

	                /**
	                 * TracingSession uniqueSessionName.
	                 * @member {string} uniqueSessionName
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.uniqueSessionName = "";

	                /**
	                 * TracingSession bufferSizeKb.
	                 * @member {Array.<number>} bufferSizeKb
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.bufferSizeKb = $util.emptyArray;

	                /**
	                 * TracingSession durationMs.
	                 * @member {number} durationMs
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.durationMs = 0;

	                /**
	                 * TracingSession numDataSources.
	                 * @member {number} numDataSources
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.numDataSources = 0;

	                /**
	                 * TracingSession startRealtimeNs.
	                 * @member {number} startRealtimeNs
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.startRealtimeNs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * TracingSession bugreportScore.
	                 * @member {number} bugreportScore
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.bugreportScore = 0;

	                /**
	                 * TracingSession bugreportFilename.
	                 * @member {string} bugreportFilename
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.bugreportFilename = "";

	                /**
	                 * TracingSession isStarted.
	                 * @member {boolean} isStarted
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 */
	                TracingSession.prototype.isStarted = false;

	                /**
	                 * Creates a new TracingSession instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.ITracingSession=} [properties] Properties to set
	                 * @returns {perfetto.protos.TracingServiceState.TracingSession} TracingSession instance
	                 */
	                TracingSession.create = function create(properties) {
	                    return new TracingSession(properties);
	                };

	                /**
	                 * Encodes the specified TracingSession message. Does not implicitly {@link perfetto.protos.TracingServiceState.TracingSession.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.ITracingSession} m TracingSession message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                TracingSession.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.id != null && Object.hasOwnProperty.call(m, "id"))
	                        w.uint32(8).uint64(m.id);
	                    if (m.consumerUid != null && Object.hasOwnProperty.call(m, "consumerUid"))
	                        w.uint32(16).int32(m.consumerUid);
	                    if (m.state != null && Object.hasOwnProperty.call(m, "state"))
	                        w.uint32(26).string(m.state);
	                    if (m.uniqueSessionName != null && Object.hasOwnProperty.call(m, "uniqueSessionName"))
	                        w.uint32(34).string(m.uniqueSessionName);
	                    if (m.bufferSizeKb != null && m.bufferSizeKb.length) {
	                        for (var i = 0; i < m.bufferSizeKb.length; ++i)
	                            w.uint32(40).uint32(m.bufferSizeKb[i]);
	                    }
	                    if (m.durationMs != null && Object.hasOwnProperty.call(m, "durationMs"))
	                        w.uint32(48).uint32(m.durationMs);
	                    if (m.numDataSources != null && Object.hasOwnProperty.call(m, "numDataSources"))
	                        w.uint32(56).uint32(m.numDataSources);
	                    if (m.startRealtimeNs != null && Object.hasOwnProperty.call(m, "startRealtimeNs"))
	                        w.uint32(64).int64(m.startRealtimeNs);
	                    if (m.bugreportScore != null && Object.hasOwnProperty.call(m, "bugreportScore"))
	                        w.uint32(72).int32(m.bugreportScore);
	                    if (m.bugreportFilename != null && Object.hasOwnProperty.call(m, "bugreportFilename"))
	                        w.uint32(82).string(m.bugreportFilename);
	                    if (m.isStarted != null && Object.hasOwnProperty.call(m, "isStarted"))
	                        w.uint32(88).bool(m.isStarted);
	                    return w;
	                };

	                /**
	                 * Decodes a TracingSession message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TracingServiceState.TracingSession} TracingSession
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                TracingSession.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TracingServiceState.TracingSession();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.id = r.uint64();
	                                break;
	                            }
	                        case 2: {
	                                m.consumerUid = r.int32();
	                                break;
	                            }
	                        case 3: {
	                                m.state = r.string();
	                                break;
	                            }
	                        case 4: {
	                                m.uniqueSessionName = r.string();
	                                break;
	                            }
	                        case 5: {
	                                if (!(m.bufferSizeKb && m.bufferSizeKb.length))
	                                    m.bufferSizeKb = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.bufferSizeKb.push(r.uint32());
	                                } else
	                                    m.bufferSizeKb.push(r.uint32());
	                                break;
	                            }
	                        case 6: {
	                                m.durationMs = r.uint32();
	                                break;
	                            }
	                        case 7: {
	                                m.numDataSources = r.uint32();
	                                break;
	                            }
	                        case 8: {
	                                m.startRealtimeNs = r.int64();
	                                break;
	                            }
	                        case 9: {
	                                m.bugreportScore = r.int32();
	                                break;
	                            }
	                        case 10: {
	                                m.bugreportFilename = r.string();
	                                break;
	                            }
	                        case 11: {
	                                m.isStarted = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a TracingSession message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TracingServiceState.TracingSession} TracingSession
	                 */
	                TracingSession.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TracingServiceState.TracingSession)
	                        return d;
	                    var m = new $root.perfetto.protos.TracingServiceState.TracingSession();
	                    if (d.id != null) {
	                        if ($util.Long)
	                            (m.id = $util.Long.fromValue(d.id)).unsigned = true;
	                        else if (typeof d.id === "string")
	                            m.id = parseInt(d.id, 10);
	                        else if (typeof d.id === "number")
	                            m.id = d.id;
	                        else if (typeof d.id === "object")
	                            m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber(true);
	                    }
	                    if (d.consumerUid != null) {
	                        m.consumerUid = d.consumerUid | 0;
	                    }
	                    if (d.state != null) {
	                        m.state = String(d.state);
	                    }
	                    if (d.uniqueSessionName != null) {
	                        m.uniqueSessionName = String(d.uniqueSessionName);
	                    }
	                    if (d.bufferSizeKb) {
	                        if (!Array.isArray(d.bufferSizeKb))
	                            throw TypeError(".perfetto.protos.TracingServiceState.TracingSession.bufferSizeKb: array expected");
	                        m.bufferSizeKb = [];
	                        for (var i = 0; i < d.bufferSizeKb.length; ++i) {
	                            m.bufferSizeKb[i] = d.bufferSizeKb[i] >>> 0;
	                        }
	                    }
	                    if (d.durationMs != null) {
	                        m.durationMs = d.durationMs >>> 0;
	                    }
	                    if (d.numDataSources != null) {
	                        m.numDataSources = d.numDataSources >>> 0;
	                    }
	                    if (d.startRealtimeNs != null) {
	                        if ($util.Long)
	                            (m.startRealtimeNs = $util.Long.fromValue(d.startRealtimeNs)).unsigned = false;
	                        else if (typeof d.startRealtimeNs === "string")
	                            m.startRealtimeNs = parseInt(d.startRealtimeNs, 10);
	                        else if (typeof d.startRealtimeNs === "number")
	                            m.startRealtimeNs = d.startRealtimeNs;
	                        else if (typeof d.startRealtimeNs === "object")
	                            m.startRealtimeNs = new $util.LongBits(d.startRealtimeNs.low >>> 0, d.startRealtimeNs.high >>> 0).toNumber();
	                    }
	                    if (d.bugreportScore != null) {
	                        m.bugreportScore = d.bugreportScore | 0;
	                    }
	                    if (d.bugreportFilename != null) {
	                        m.bugreportFilename = String(d.bugreportFilename);
	                    }
	                    if (d.isStarted != null) {
	                        m.isStarted = Boolean(d.isStarted);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a TracingSession message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @static
	                 * @param {perfetto.protos.TracingServiceState.TracingSession} m TracingSession
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                TracingSession.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.bufferSizeKb = [];
	                    }
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.id = o.longs === String ? "0" : 0;
	                        d.consumerUid = 0;
	                        d.state = "";
	                        d.uniqueSessionName = "";
	                        d.durationMs = 0;
	                        d.numDataSources = 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.startRealtimeNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.startRealtimeNs = o.longs === String ? "0" : 0;
	                        d.bugreportScore = 0;
	                        d.bugreportFilename = "";
	                        d.isStarted = false;
	                    }
	                    if (m.id != null && m.hasOwnProperty("id")) {
	                        if (typeof m.id === "number")
	                            d.id = o.longs === String ? String(m.id) : m.id;
	                        else
	                            d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber(true) : m.id;
	                    }
	                    if (m.consumerUid != null && m.hasOwnProperty("consumerUid")) {
	                        d.consumerUid = m.consumerUid;
	                    }
	                    if (m.state != null && m.hasOwnProperty("state")) {
	                        d.state = m.state;
	                    }
	                    if (m.uniqueSessionName != null && m.hasOwnProperty("uniqueSessionName")) {
	                        d.uniqueSessionName = m.uniqueSessionName;
	                    }
	                    if (m.bufferSizeKb && m.bufferSizeKb.length) {
	                        d.bufferSizeKb = [];
	                        for (var j = 0; j < m.bufferSizeKb.length; ++j) {
	                            d.bufferSizeKb[j] = m.bufferSizeKb[j];
	                        }
	                    }
	                    if (m.durationMs != null && m.hasOwnProperty("durationMs")) {
	                        d.durationMs = m.durationMs;
	                    }
	                    if (m.numDataSources != null && m.hasOwnProperty("numDataSources")) {
	                        d.numDataSources = m.numDataSources;
	                    }
	                    if (m.startRealtimeNs != null && m.hasOwnProperty("startRealtimeNs")) {
	                        if (typeof m.startRealtimeNs === "number")
	                            d.startRealtimeNs = o.longs === String ? String(m.startRealtimeNs) : m.startRealtimeNs;
	                        else
	                            d.startRealtimeNs = o.longs === String ? $util.Long.prototype.toString.call(m.startRealtimeNs) : o.longs === Number ? new $util.LongBits(m.startRealtimeNs.low >>> 0, m.startRealtimeNs.high >>> 0).toNumber() : m.startRealtimeNs;
	                    }
	                    if (m.bugreportScore != null && m.hasOwnProperty("bugreportScore")) {
	                        d.bugreportScore = m.bugreportScore;
	                    }
	                    if (m.bugreportFilename != null && m.hasOwnProperty("bugreportFilename")) {
	                        d.bugreportFilename = m.bugreportFilename;
	                    }
	                    if (m.isStarted != null && m.hasOwnProperty("isStarted")) {
	                        d.isStarted = m.isStarted;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this TracingSession to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                TracingSession.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for TracingSession
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TracingServiceState.TracingSession
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                TracingSession.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TracingServiceState.TracingSession";
	                };

	                return TracingSession;
	            })();

	            return TracingServiceState;
	        })();

	        protos.DataSourceDescriptor = (function() {

	            /**
	             * Properties of a DataSourceDescriptor.
	             * @memberof perfetto.protos
	             * @interface IDataSourceDescriptor
	             * @property {string|null} [name] DataSourceDescriptor name
	             * @property {number|null} [id] DataSourceDescriptor id
	             * @property {boolean|null} [willNotifyOnStop] DataSourceDescriptor willNotifyOnStop
	             * @property {boolean|null} [willNotifyOnStart] DataSourceDescriptor willNotifyOnStart
	             * @property {boolean|null} [handlesIncrementalStateClear] DataSourceDescriptor handlesIncrementalStateClear
	             * @property {boolean|null} [noFlush] DataSourceDescriptor noFlush
	             * @property {perfetto.protos.IGpuCounterDescriptor|null} [gpuCounterDescriptor] DataSourceDescriptor gpuCounterDescriptor
	             * @property {perfetto.protos.ITrackEventDescriptor|null} [trackEventDescriptor] DataSourceDescriptor trackEventDescriptor
	             * @property {perfetto.protos.IFtraceDescriptor|null} [ftraceDescriptor] DataSourceDescriptor ftraceDescriptor
	             */

	            /**
	             * Constructs a new DataSourceDescriptor.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DataSourceDescriptor.
	             * @implements IDataSourceDescriptor
	             * @constructor
	             * @param {perfetto.protos.IDataSourceDescriptor=} [p] Properties to set
	             */
	            function DataSourceDescriptor(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * DataSourceDescriptor name.
	             * @member {string} name
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.name = "";

	            /**
	             * DataSourceDescriptor id.
	             * @member {number} id
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * DataSourceDescriptor willNotifyOnStop.
	             * @member {boolean} willNotifyOnStop
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.willNotifyOnStop = false;

	            /**
	             * DataSourceDescriptor willNotifyOnStart.
	             * @member {boolean} willNotifyOnStart
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.willNotifyOnStart = false;

	            /**
	             * DataSourceDescriptor handlesIncrementalStateClear.
	             * @member {boolean} handlesIncrementalStateClear
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.handlesIncrementalStateClear = false;

	            /**
	             * DataSourceDescriptor noFlush.
	             * @member {boolean} noFlush
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.noFlush = false;

	            /**
	             * DataSourceDescriptor gpuCounterDescriptor.
	             * @member {perfetto.protos.IGpuCounterDescriptor|null|undefined} gpuCounterDescriptor
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.gpuCounterDescriptor = null;

	            /**
	             * DataSourceDescriptor trackEventDescriptor.
	             * @member {perfetto.protos.ITrackEventDescriptor|null|undefined} trackEventDescriptor
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.trackEventDescriptor = null;

	            /**
	             * DataSourceDescriptor ftraceDescriptor.
	             * @member {perfetto.protos.IFtraceDescriptor|null|undefined} ftraceDescriptor
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             */
	            DataSourceDescriptor.prototype.ftraceDescriptor = null;

	            /**
	             * Creates a new DataSourceDescriptor instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @static
	             * @param {perfetto.protos.IDataSourceDescriptor=} [properties] Properties to set
	             * @returns {perfetto.protos.DataSourceDescriptor} DataSourceDescriptor instance
	             */
	            DataSourceDescriptor.create = function create(properties) {
	                return new DataSourceDescriptor(properties);
	            };

	            /**
	             * Encodes the specified DataSourceDescriptor message. Does not implicitly {@link perfetto.protos.DataSourceDescriptor.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @static
	             * @param {perfetto.protos.IDataSourceDescriptor} m DataSourceDescriptor message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DataSourceDescriptor.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.willNotifyOnStop != null && Object.hasOwnProperty.call(m, "willNotifyOnStop"))
	                    w.uint32(16).bool(m.willNotifyOnStop);
	                if (m.willNotifyOnStart != null && Object.hasOwnProperty.call(m, "willNotifyOnStart"))
	                    w.uint32(24).bool(m.willNotifyOnStart);
	                if (m.handlesIncrementalStateClear != null && Object.hasOwnProperty.call(m, "handlesIncrementalStateClear"))
	                    w.uint32(32).bool(m.handlesIncrementalStateClear);
	                if (m.gpuCounterDescriptor != null && Object.hasOwnProperty.call(m, "gpuCounterDescriptor"))
	                    $root.perfetto.protos.GpuCounterDescriptor.encode(m.gpuCounterDescriptor, w.uint32(42).fork()).ldelim();
	                if (m.trackEventDescriptor != null && Object.hasOwnProperty.call(m, "trackEventDescriptor"))
	                    $root.perfetto.protos.TrackEventDescriptor.encode(m.trackEventDescriptor, w.uint32(50).fork()).ldelim();
	                if (m.id != null && Object.hasOwnProperty.call(m, "id"))
	                    w.uint32(56).uint64(m.id);
	                if (m.ftraceDescriptor != null && Object.hasOwnProperty.call(m, "ftraceDescriptor"))
	                    $root.perfetto.protos.FtraceDescriptor.encode(m.ftraceDescriptor, w.uint32(66).fork()).ldelim();
	                if (m.noFlush != null && Object.hasOwnProperty.call(m, "noFlush"))
	                    w.uint32(72).bool(m.noFlush);
	                return w;
	            };

	            /**
	             * Decodes a DataSourceDescriptor message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DataSourceDescriptor} DataSourceDescriptor
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DataSourceDescriptor.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DataSourceDescriptor();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 7: {
	                            m.id = r.uint64();
	                            break;
	                        }
	                    case 2: {
	                            m.willNotifyOnStop = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.willNotifyOnStart = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.handlesIncrementalStateClear = r.bool();
	                            break;
	                        }
	                    case 9: {
	                            m.noFlush = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.gpuCounterDescriptor = $root.perfetto.protos.GpuCounterDescriptor.decode(r, r.uint32());
	                            break;
	                        }
	                    case 6: {
	                            m.trackEventDescriptor = $root.perfetto.protos.TrackEventDescriptor.decode(r, r.uint32());
	                            break;
	                        }
	                    case 8: {
	                            m.ftraceDescriptor = $root.perfetto.protos.FtraceDescriptor.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DataSourceDescriptor message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DataSourceDescriptor} DataSourceDescriptor
	             */
	            DataSourceDescriptor.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DataSourceDescriptor)
	                    return d;
	                var m = new $root.perfetto.protos.DataSourceDescriptor();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.id != null) {
	                    if ($util.Long)
	                        (m.id = $util.Long.fromValue(d.id)).unsigned = true;
	                    else if (typeof d.id === "string")
	                        m.id = parseInt(d.id, 10);
	                    else if (typeof d.id === "number")
	                        m.id = d.id;
	                    else if (typeof d.id === "object")
	                        m.id = new $util.LongBits(d.id.low >>> 0, d.id.high >>> 0).toNumber(true);
	                }
	                if (d.willNotifyOnStop != null) {
	                    m.willNotifyOnStop = Boolean(d.willNotifyOnStop);
	                }
	                if (d.willNotifyOnStart != null) {
	                    m.willNotifyOnStart = Boolean(d.willNotifyOnStart);
	                }
	                if (d.handlesIncrementalStateClear != null) {
	                    m.handlesIncrementalStateClear = Boolean(d.handlesIncrementalStateClear);
	                }
	                if (d.noFlush != null) {
	                    m.noFlush = Boolean(d.noFlush);
	                }
	                if (d.gpuCounterDescriptor != null) {
	                    if (typeof d.gpuCounterDescriptor !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceDescriptor.gpuCounterDescriptor: object expected");
	                    m.gpuCounterDescriptor = $root.perfetto.protos.GpuCounterDescriptor.fromObject(d.gpuCounterDescriptor);
	                }
	                if (d.trackEventDescriptor != null) {
	                    if (typeof d.trackEventDescriptor !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceDescriptor.trackEventDescriptor: object expected");
	                    m.trackEventDescriptor = $root.perfetto.protos.TrackEventDescriptor.fromObject(d.trackEventDescriptor);
	                }
	                if (d.ftraceDescriptor != null) {
	                    if (typeof d.ftraceDescriptor !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceDescriptor.ftraceDescriptor: object expected");
	                    m.ftraceDescriptor = $root.perfetto.protos.FtraceDescriptor.fromObject(d.ftraceDescriptor);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a DataSourceDescriptor message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @static
	             * @param {perfetto.protos.DataSourceDescriptor} m DataSourceDescriptor
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DataSourceDescriptor.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                    d.willNotifyOnStop = false;
	                    d.willNotifyOnStart = false;
	                    d.handlesIncrementalStateClear = false;
	                    d.gpuCounterDescriptor = null;
	                    d.trackEventDescriptor = null;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.id = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.id = o.longs === String ? "0" : 0;
	                    d.ftraceDescriptor = null;
	                    d.noFlush = false;
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.willNotifyOnStop != null && m.hasOwnProperty("willNotifyOnStop")) {
	                    d.willNotifyOnStop = m.willNotifyOnStop;
	                }
	                if (m.willNotifyOnStart != null && m.hasOwnProperty("willNotifyOnStart")) {
	                    d.willNotifyOnStart = m.willNotifyOnStart;
	                }
	                if (m.handlesIncrementalStateClear != null && m.hasOwnProperty("handlesIncrementalStateClear")) {
	                    d.handlesIncrementalStateClear = m.handlesIncrementalStateClear;
	                }
	                if (m.gpuCounterDescriptor != null && m.hasOwnProperty("gpuCounterDescriptor")) {
	                    d.gpuCounterDescriptor = $root.perfetto.protos.GpuCounterDescriptor.toObject(m.gpuCounterDescriptor, o);
	                }
	                if (m.trackEventDescriptor != null && m.hasOwnProperty("trackEventDescriptor")) {
	                    d.trackEventDescriptor = $root.perfetto.protos.TrackEventDescriptor.toObject(m.trackEventDescriptor, o);
	                }
	                if (m.id != null && m.hasOwnProperty("id")) {
	                    if (typeof m.id === "number")
	                        d.id = o.longs === String ? String(m.id) : m.id;
	                    else
	                        d.id = o.longs === String ? $util.Long.prototype.toString.call(m.id) : o.longs === Number ? new $util.LongBits(m.id.low >>> 0, m.id.high >>> 0).toNumber(true) : m.id;
	                }
	                if (m.ftraceDescriptor != null && m.hasOwnProperty("ftraceDescriptor")) {
	                    d.ftraceDescriptor = $root.perfetto.protos.FtraceDescriptor.toObject(m.ftraceDescriptor, o);
	                }
	                if (m.noFlush != null && m.hasOwnProperty("noFlush")) {
	                    d.noFlush = m.noFlush;
	                }
	                return d;
	            };

	            /**
	             * Converts this DataSourceDescriptor to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DataSourceDescriptor.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DataSourceDescriptor
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DataSourceDescriptor
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DataSourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DataSourceDescriptor";
	            };

	            return DataSourceDescriptor;
	        })();

	        protos.FtraceDescriptor = (function() {

	            /**
	             * Properties of a FtraceDescriptor.
	             * @memberof perfetto.protos
	             * @interface IFtraceDescriptor
	             * @property {Array.<perfetto.protos.FtraceDescriptor.IAtraceCategory>|null} [atraceCategories] FtraceDescriptor atraceCategories
	             */

	            /**
	             * Constructs a new FtraceDescriptor.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FtraceDescriptor.
	             * @implements IFtraceDescriptor
	             * @constructor
	             * @param {perfetto.protos.IFtraceDescriptor=} [p] Properties to set
	             */
	            function FtraceDescriptor(p) {
	                this.atraceCategories = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FtraceDescriptor atraceCategories.
	             * @member {Array.<perfetto.protos.FtraceDescriptor.IAtraceCategory>} atraceCategories
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @instance
	             */
	            FtraceDescriptor.prototype.atraceCategories = $util.emptyArray;

	            /**
	             * Creates a new FtraceDescriptor instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @static
	             * @param {perfetto.protos.IFtraceDescriptor=} [properties] Properties to set
	             * @returns {perfetto.protos.FtraceDescriptor} FtraceDescriptor instance
	             */
	            FtraceDescriptor.create = function create(properties) {
	                return new FtraceDescriptor(properties);
	            };

	            /**
	             * Encodes the specified FtraceDescriptor message. Does not implicitly {@link perfetto.protos.FtraceDescriptor.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @static
	             * @param {perfetto.protos.IFtraceDescriptor} m FtraceDescriptor message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FtraceDescriptor.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.atraceCategories != null && m.atraceCategories.length) {
	                    for (var i = 0; i < m.atraceCategories.length; ++i)
	                        $root.perfetto.protos.FtraceDescriptor.AtraceCategory.encode(m.atraceCategories[i], w.uint32(10).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a FtraceDescriptor message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FtraceDescriptor} FtraceDescriptor
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FtraceDescriptor.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceDescriptor();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.atraceCategories && m.atraceCategories.length))
	                                m.atraceCategories = [];
	                            m.atraceCategories.push($root.perfetto.protos.FtraceDescriptor.AtraceCategory.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FtraceDescriptor message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FtraceDescriptor} FtraceDescriptor
	             */
	            FtraceDescriptor.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FtraceDescriptor)
	                    return d;
	                var m = new $root.perfetto.protos.FtraceDescriptor();
	                if (d.atraceCategories) {
	                    if (!Array.isArray(d.atraceCategories))
	                        throw TypeError(".perfetto.protos.FtraceDescriptor.atraceCategories: array expected");
	                    m.atraceCategories = [];
	                    for (var i = 0; i < d.atraceCategories.length; ++i) {
	                        if (typeof d.atraceCategories[i] !== "object")
	                            throw TypeError(".perfetto.protos.FtraceDescriptor.atraceCategories: object expected");
	                        m.atraceCategories[i] = $root.perfetto.protos.FtraceDescriptor.AtraceCategory.fromObject(d.atraceCategories[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FtraceDescriptor message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @static
	             * @param {perfetto.protos.FtraceDescriptor} m FtraceDescriptor
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FtraceDescriptor.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.atraceCategories = [];
	                }
	                if (m.atraceCategories && m.atraceCategories.length) {
	                    d.atraceCategories = [];
	                    for (var j = 0; j < m.atraceCategories.length; ++j) {
	                        d.atraceCategories[j] = $root.perfetto.protos.FtraceDescriptor.AtraceCategory.toObject(m.atraceCategories[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this FtraceDescriptor to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FtraceDescriptor.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FtraceDescriptor
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FtraceDescriptor
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FtraceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FtraceDescriptor";
	            };

	            FtraceDescriptor.AtraceCategory = (function() {

	                /**
	                 * Properties of an AtraceCategory.
	                 * @memberof perfetto.protos.FtraceDescriptor
	                 * @interface IAtraceCategory
	                 * @property {string|null} [name] AtraceCategory name
	                 * @property {string|null} [description] AtraceCategory description
	                 */

	                /**
	                 * Constructs a new AtraceCategory.
	                 * @memberof perfetto.protos.FtraceDescriptor
	                 * @classdesc Represents an AtraceCategory.
	                 * @implements IAtraceCategory
	                 * @constructor
	                 * @param {perfetto.protos.FtraceDescriptor.IAtraceCategory=} [p] Properties to set
	                 */
	                function AtraceCategory(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * AtraceCategory name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @instance
	                 */
	                AtraceCategory.prototype.name = "";

	                /**
	                 * AtraceCategory description.
	                 * @member {string} description
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @instance
	                 */
	                AtraceCategory.prototype.description = "";

	                /**
	                 * Creates a new AtraceCategory instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @static
	                 * @param {perfetto.protos.FtraceDescriptor.IAtraceCategory=} [properties] Properties to set
	                 * @returns {perfetto.protos.FtraceDescriptor.AtraceCategory} AtraceCategory instance
	                 */
	                AtraceCategory.create = function create(properties) {
	                    return new AtraceCategory(properties);
	                };

	                /**
	                 * Encodes the specified AtraceCategory message. Does not implicitly {@link perfetto.protos.FtraceDescriptor.AtraceCategory.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @static
	                 * @param {perfetto.protos.FtraceDescriptor.IAtraceCategory} m AtraceCategory message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                AtraceCategory.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(10).string(m.name);
	                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
	                        w.uint32(18).string(m.description);
	                    return w;
	                };

	                /**
	                 * Decodes an AtraceCategory message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.FtraceDescriptor.AtraceCategory} AtraceCategory
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                AtraceCategory.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceDescriptor.AtraceCategory();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.description = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an AtraceCategory message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.FtraceDescriptor.AtraceCategory} AtraceCategory
	                 */
	                AtraceCategory.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.FtraceDescriptor.AtraceCategory)
	                        return d;
	                    var m = new $root.perfetto.protos.FtraceDescriptor.AtraceCategory();
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.description != null) {
	                        m.description = String(d.description);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an AtraceCategory message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @static
	                 * @param {perfetto.protos.FtraceDescriptor.AtraceCategory} m AtraceCategory
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                AtraceCategory.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.name = "";
	                        d.description = "";
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.description != null && m.hasOwnProperty("description")) {
	                        d.description = m.description;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this AtraceCategory to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                AtraceCategory.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for AtraceCategory
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.FtraceDescriptor.AtraceCategory
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                AtraceCategory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.FtraceDescriptor.AtraceCategory";
	                };

	                return AtraceCategory;
	            })();

	            return FtraceDescriptor;
	        })();

	        protos.GpuCounterDescriptor = (function() {

	            /**
	             * Properties of a GpuCounterDescriptor.
	             * @memberof perfetto.protos
	             * @interface IGpuCounterDescriptor
	             * @property {Array.<perfetto.protos.GpuCounterDescriptor.IGpuCounterSpec>|null} [specs] GpuCounterDescriptor specs
	             * @property {Array.<perfetto.protos.GpuCounterDescriptor.IGpuCounterBlock>|null} [blocks] GpuCounterDescriptor blocks
	             * @property {number|null} [minSamplingPeriodNs] GpuCounterDescriptor minSamplingPeriodNs
	             * @property {number|null} [maxSamplingPeriodNs] GpuCounterDescriptor maxSamplingPeriodNs
	             * @property {boolean|null} [supportsInstrumentedSampling] GpuCounterDescriptor supportsInstrumentedSampling
	             */

	            /**
	             * Constructs a new GpuCounterDescriptor.
	             * @memberof perfetto.protos
	             * @classdesc Represents a GpuCounterDescriptor.
	             * @implements IGpuCounterDescriptor
	             * @constructor
	             * @param {perfetto.protos.IGpuCounterDescriptor=} [p] Properties to set
	             */
	            function GpuCounterDescriptor(p) {
	                this.specs = [];
	                this.blocks = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * GpuCounterDescriptor specs.
	             * @member {Array.<perfetto.protos.GpuCounterDescriptor.IGpuCounterSpec>} specs
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @instance
	             */
	            GpuCounterDescriptor.prototype.specs = $util.emptyArray;

	            /**
	             * GpuCounterDescriptor blocks.
	             * @member {Array.<perfetto.protos.GpuCounterDescriptor.IGpuCounterBlock>} blocks
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @instance
	             */
	            GpuCounterDescriptor.prototype.blocks = $util.emptyArray;

	            /**
	             * GpuCounterDescriptor minSamplingPeriodNs.
	             * @member {number} minSamplingPeriodNs
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @instance
	             */
	            GpuCounterDescriptor.prototype.minSamplingPeriodNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * GpuCounterDescriptor maxSamplingPeriodNs.
	             * @member {number} maxSamplingPeriodNs
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @instance
	             */
	            GpuCounterDescriptor.prototype.maxSamplingPeriodNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * GpuCounterDescriptor supportsInstrumentedSampling.
	             * @member {boolean} supportsInstrumentedSampling
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @instance
	             */
	            GpuCounterDescriptor.prototype.supportsInstrumentedSampling = false;

	            /**
	             * Creates a new GpuCounterDescriptor instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @static
	             * @param {perfetto.protos.IGpuCounterDescriptor=} [properties] Properties to set
	             * @returns {perfetto.protos.GpuCounterDescriptor} GpuCounterDescriptor instance
	             */
	            GpuCounterDescriptor.create = function create(properties) {
	                return new GpuCounterDescriptor(properties);
	            };

	            /**
	             * Encodes the specified GpuCounterDescriptor message. Does not implicitly {@link perfetto.protos.GpuCounterDescriptor.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @static
	             * @param {perfetto.protos.IGpuCounterDescriptor} m GpuCounterDescriptor message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            GpuCounterDescriptor.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.specs != null && m.specs.length) {
	                    for (var i = 0; i < m.specs.length; ++i)
	                        $root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.encode(m.specs[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.blocks != null && m.blocks.length) {
	                    for (var i = 0; i < m.blocks.length; ++i)
	                        $root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.encode(m.blocks[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.minSamplingPeriodNs != null && Object.hasOwnProperty.call(m, "minSamplingPeriodNs"))
	                    w.uint32(24).uint64(m.minSamplingPeriodNs);
	                if (m.maxSamplingPeriodNs != null && Object.hasOwnProperty.call(m, "maxSamplingPeriodNs"))
	                    w.uint32(32).uint64(m.maxSamplingPeriodNs);
	                if (m.supportsInstrumentedSampling != null && Object.hasOwnProperty.call(m, "supportsInstrumentedSampling"))
	                    w.uint32(40).bool(m.supportsInstrumentedSampling);
	                return w;
	            };

	            /**
	             * Decodes a GpuCounterDescriptor message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.GpuCounterDescriptor} GpuCounterDescriptor
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            GpuCounterDescriptor.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.GpuCounterDescriptor();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.specs && m.specs.length))
	                                m.specs = [];
	                            m.specs.push($root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.blocks && m.blocks.length))
	                                m.blocks = [];
	                            m.blocks.push($root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 3: {
	                            m.minSamplingPeriodNs = r.uint64();
	                            break;
	                        }
	                    case 4: {
	                            m.maxSamplingPeriodNs = r.uint64();
	                            break;
	                        }
	                    case 5: {
	                            m.supportsInstrumentedSampling = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a GpuCounterDescriptor message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.GpuCounterDescriptor} GpuCounterDescriptor
	             */
	            GpuCounterDescriptor.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.GpuCounterDescriptor)
	                    return d;
	                var m = new $root.perfetto.protos.GpuCounterDescriptor();
	                if (d.specs) {
	                    if (!Array.isArray(d.specs))
	                        throw TypeError(".perfetto.protos.GpuCounterDescriptor.specs: array expected");
	                    m.specs = [];
	                    for (var i = 0; i < d.specs.length; ++i) {
	                        if (typeof d.specs[i] !== "object")
	                            throw TypeError(".perfetto.protos.GpuCounterDescriptor.specs: object expected");
	                        m.specs[i] = $root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.fromObject(d.specs[i]);
	                    }
	                }
	                if (d.blocks) {
	                    if (!Array.isArray(d.blocks))
	                        throw TypeError(".perfetto.protos.GpuCounterDescriptor.blocks: array expected");
	                    m.blocks = [];
	                    for (var i = 0; i < d.blocks.length; ++i) {
	                        if (typeof d.blocks[i] !== "object")
	                            throw TypeError(".perfetto.protos.GpuCounterDescriptor.blocks: object expected");
	                        m.blocks[i] = $root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.fromObject(d.blocks[i]);
	                    }
	                }
	                if (d.minSamplingPeriodNs != null) {
	                    if ($util.Long)
	                        (m.minSamplingPeriodNs = $util.Long.fromValue(d.minSamplingPeriodNs)).unsigned = true;
	                    else if (typeof d.minSamplingPeriodNs === "string")
	                        m.minSamplingPeriodNs = parseInt(d.minSamplingPeriodNs, 10);
	                    else if (typeof d.minSamplingPeriodNs === "number")
	                        m.minSamplingPeriodNs = d.minSamplingPeriodNs;
	                    else if (typeof d.minSamplingPeriodNs === "object")
	                        m.minSamplingPeriodNs = new $util.LongBits(d.minSamplingPeriodNs.low >>> 0, d.minSamplingPeriodNs.high >>> 0).toNumber(true);
	                }
	                if (d.maxSamplingPeriodNs != null) {
	                    if ($util.Long)
	                        (m.maxSamplingPeriodNs = $util.Long.fromValue(d.maxSamplingPeriodNs)).unsigned = true;
	                    else if (typeof d.maxSamplingPeriodNs === "string")
	                        m.maxSamplingPeriodNs = parseInt(d.maxSamplingPeriodNs, 10);
	                    else if (typeof d.maxSamplingPeriodNs === "number")
	                        m.maxSamplingPeriodNs = d.maxSamplingPeriodNs;
	                    else if (typeof d.maxSamplingPeriodNs === "object")
	                        m.maxSamplingPeriodNs = new $util.LongBits(d.maxSamplingPeriodNs.low >>> 0, d.maxSamplingPeriodNs.high >>> 0).toNumber(true);
	                }
	                if (d.supportsInstrumentedSampling != null) {
	                    m.supportsInstrumentedSampling = Boolean(d.supportsInstrumentedSampling);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a GpuCounterDescriptor message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @static
	             * @param {perfetto.protos.GpuCounterDescriptor} m GpuCounterDescriptor
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            GpuCounterDescriptor.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.specs = [];
	                    d.blocks = [];
	                }
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.minSamplingPeriodNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.minSamplingPeriodNs = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.maxSamplingPeriodNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.maxSamplingPeriodNs = o.longs === String ? "0" : 0;
	                    d.supportsInstrumentedSampling = false;
	                }
	                if (m.specs && m.specs.length) {
	                    d.specs = [];
	                    for (var j = 0; j < m.specs.length; ++j) {
	                        d.specs[j] = $root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.toObject(m.specs[j], o);
	                    }
	                }
	                if (m.blocks && m.blocks.length) {
	                    d.blocks = [];
	                    for (var j = 0; j < m.blocks.length; ++j) {
	                        d.blocks[j] = $root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.toObject(m.blocks[j], o);
	                    }
	                }
	                if (m.minSamplingPeriodNs != null && m.hasOwnProperty("minSamplingPeriodNs")) {
	                    if (typeof m.minSamplingPeriodNs === "number")
	                        d.minSamplingPeriodNs = o.longs === String ? String(m.minSamplingPeriodNs) : m.minSamplingPeriodNs;
	                    else
	                        d.minSamplingPeriodNs = o.longs === String ? $util.Long.prototype.toString.call(m.minSamplingPeriodNs) : o.longs === Number ? new $util.LongBits(m.minSamplingPeriodNs.low >>> 0, m.minSamplingPeriodNs.high >>> 0).toNumber(true) : m.minSamplingPeriodNs;
	                }
	                if (m.maxSamplingPeriodNs != null && m.hasOwnProperty("maxSamplingPeriodNs")) {
	                    if (typeof m.maxSamplingPeriodNs === "number")
	                        d.maxSamplingPeriodNs = o.longs === String ? String(m.maxSamplingPeriodNs) : m.maxSamplingPeriodNs;
	                    else
	                        d.maxSamplingPeriodNs = o.longs === String ? $util.Long.prototype.toString.call(m.maxSamplingPeriodNs) : o.longs === Number ? new $util.LongBits(m.maxSamplingPeriodNs.low >>> 0, m.maxSamplingPeriodNs.high >>> 0).toNumber(true) : m.maxSamplingPeriodNs;
	                }
	                if (m.supportsInstrumentedSampling != null && m.hasOwnProperty("supportsInstrumentedSampling")) {
	                    d.supportsInstrumentedSampling = m.supportsInstrumentedSampling;
	                }
	                return d;
	            };

	            /**
	             * Converts this GpuCounterDescriptor to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            GpuCounterDescriptor.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for GpuCounterDescriptor
	             * @function getTypeUrl
	             * @memberof perfetto.protos.GpuCounterDescriptor
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            GpuCounterDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.GpuCounterDescriptor";
	            };

	            /**
	             * GpuCounterGroup enum.
	             * @name perfetto.protos.GpuCounterDescriptor.GpuCounterGroup
	             * @enum {number}
	             * @property {number} UNCLASSIFIED=0 UNCLASSIFIED value
	             * @property {number} SYSTEM=1 SYSTEM value
	             * @property {number} VERTICES=2 VERTICES value
	             * @property {number} FRAGMENTS=3 FRAGMENTS value
	             * @property {number} PRIMITIVES=4 PRIMITIVES value
	             * @property {number} MEMORY=5 MEMORY value
	             * @property {number} COMPUTE=6 COMPUTE value
	             */
	            GpuCounterDescriptor.GpuCounterGroup = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "UNCLASSIFIED"] = 0;
	                values[valuesById[1] = "SYSTEM"] = 1;
	                values[valuesById[2] = "VERTICES"] = 2;
	                values[valuesById[3] = "FRAGMENTS"] = 3;
	                values[valuesById[4] = "PRIMITIVES"] = 4;
	                values[valuesById[5] = "MEMORY"] = 5;
	                values[valuesById[6] = "COMPUTE"] = 6;
	                return values;
	            })();

	            GpuCounterDescriptor.GpuCounterSpec = (function() {

	                /**
	                 * Properties of a GpuCounterSpec.
	                 * @memberof perfetto.protos.GpuCounterDescriptor
	                 * @interface IGpuCounterSpec
	                 * @property {number|null} [counterId] GpuCounterSpec counterId
	                 * @property {string|null} [name] GpuCounterSpec name
	                 * @property {string|null} [description] GpuCounterSpec description
	                 * @property {number|null} [intPeakValue] GpuCounterSpec intPeakValue
	                 * @property {number|null} [doublePeakValue] GpuCounterSpec doublePeakValue
	                 * @property {Array.<perfetto.protos.GpuCounterDescriptor.MeasureUnit>|null} [numeratorUnits] GpuCounterSpec numeratorUnits
	                 * @property {Array.<perfetto.protos.GpuCounterDescriptor.MeasureUnit>|null} [denominatorUnits] GpuCounterSpec denominatorUnits
	                 * @property {boolean|null} [selectByDefault] GpuCounterSpec selectByDefault
	                 * @property {Array.<perfetto.protos.GpuCounterDescriptor.GpuCounterGroup>|null} [groups] GpuCounterSpec groups
	                 */

	                /**
	                 * Constructs a new GpuCounterSpec.
	                 * @memberof perfetto.protos.GpuCounterDescriptor
	                 * @classdesc Represents a GpuCounterSpec.
	                 * @implements IGpuCounterSpec
	                 * @constructor
	                 * @param {perfetto.protos.GpuCounterDescriptor.IGpuCounterSpec=} [p] Properties to set
	                 */
	                function GpuCounterSpec(p) {
	                    this.numeratorUnits = [];
	                    this.denominatorUnits = [];
	                    this.groups = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * GpuCounterSpec counterId.
	                 * @member {number} counterId
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.counterId = 0;

	                /**
	                 * GpuCounterSpec name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.name = "";

	                /**
	                 * GpuCounterSpec description.
	                 * @member {string} description
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.description = "";

	                /**
	                 * GpuCounterSpec intPeakValue.
	                 * @member {number|null|undefined} intPeakValue
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.intPeakValue = null;

	                /**
	                 * GpuCounterSpec doublePeakValue.
	                 * @member {number|null|undefined} doublePeakValue
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.doublePeakValue = null;

	                /**
	                 * GpuCounterSpec numeratorUnits.
	                 * @member {Array.<perfetto.protos.GpuCounterDescriptor.MeasureUnit>} numeratorUnits
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.numeratorUnits = $util.emptyArray;

	                /**
	                 * GpuCounterSpec denominatorUnits.
	                 * @member {Array.<perfetto.protos.GpuCounterDescriptor.MeasureUnit>} denominatorUnits
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.denominatorUnits = $util.emptyArray;

	                /**
	                 * GpuCounterSpec selectByDefault.
	                 * @member {boolean} selectByDefault
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.selectByDefault = false;

	                /**
	                 * GpuCounterSpec groups.
	                 * @member {Array.<perfetto.protos.GpuCounterDescriptor.GpuCounterGroup>} groups
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                GpuCounterSpec.prototype.groups = $util.emptyArray;

	                // OneOf field names bound to virtual getters and setters
	                var $oneOfFields;

	                /**
	                 * GpuCounterSpec peakValue.
	                 * @member {"intPeakValue"|"doublePeakValue"|undefined} peakValue
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 */
	                Object.defineProperty(GpuCounterSpec.prototype, "peakValue", {
	                    get: $util.oneOfGetter($oneOfFields = ["intPeakValue", "doublePeakValue"]),
	                    set: $util.oneOfSetter($oneOfFields)
	                });

	                /**
	                 * Creates a new GpuCounterSpec instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @static
	                 * @param {perfetto.protos.GpuCounterDescriptor.IGpuCounterSpec=} [properties] Properties to set
	                 * @returns {perfetto.protos.GpuCounterDescriptor.GpuCounterSpec} GpuCounterSpec instance
	                 */
	                GpuCounterSpec.create = function create(properties) {
	                    return new GpuCounterSpec(properties);
	                };

	                /**
	                 * Encodes the specified GpuCounterSpec message. Does not implicitly {@link perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @static
	                 * @param {perfetto.protos.GpuCounterDescriptor.IGpuCounterSpec} m GpuCounterSpec message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                GpuCounterSpec.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.counterId != null && Object.hasOwnProperty.call(m, "counterId"))
	                        w.uint32(8).uint32(m.counterId);
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(18).string(m.name);
	                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
	                        w.uint32(26).string(m.description);
	                    if (m.intPeakValue != null && Object.hasOwnProperty.call(m, "intPeakValue"))
	                        w.uint32(40).int64(m.intPeakValue);
	                    if (m.doublePeakValue != null && Object.hasOwnProperty.call(m, "doublePeakValue"))
	                        w.uint32(49).double(m.doublePeakValue);
	                    if (m.numeratorUnits != null && m.numeratorUnits.length) {
	                        for (var i = 0; i < m.numeratorUnits.length; ++i)
	                            w.uint32(56).int32(m.numeratorUnits[i]);
	                    }
	                    if (m.denominatorUnits != null && m.denominatorUnits.length) {
	                        for (var i = 0; i < m.denominatorUnits.length; ++i)
	                            w.uint32(64).int32(m.denominatorUnits[i]);
	                    }
	                    if (m.selectByDefault != null && Object.hasOwnProperty.call(m, "selectByDefault"))
	                        w.uint32(72).bool(m.selectByDefault);
	                    if (m.groups != null && m.groups.length) {
	                        for (var i = 0; i < m.groups.length; ++i)
	                            w.uint32(80).int32(m.groups[i]);
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a GpuCounterSpec message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.GpuCounterDescriptor.GpuCounterSpec} GpuCounterSpec
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                GpuCounterSpec.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.counterId = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 3: {
	                                m.description = r.string();
	                                break;
	                            }
	                        case 5: {
	                                m.intPeakValue = r.int64();
	                                break;
	                            }
	                        case 6: {
	                                m.doublePeakValue = r.double();
	                                break;
	                            }
	                        case 7: {
	                                if (!(m.numeratorUnits && m.numeratorUnits.length))
	                                    m.numeratorUnits = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.numeratorUnits.push(r.int32());
	                                } else
	                                    m.numeratorUnits.push(r.int32());
	                                break;
	                            }
	                        case 8: {
	                                if (!(m.denominatorUnits && m.denominatorUnits.length))
	                                    m.denominatorUnits = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.denominatorUnits.push(r.int32());
	                                } else
	                                    m.denominatorUnits.push(r.int32());
	                                break;
	                            }
	                        case 9: {
	                                m.selectByDefault = r.bool();
	                                break;
	                            }
	                        case 10: {
	                                if (!(m.groups && m.groups.length))
	                                    m.groups = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.groups.push(r.int32());
	                                } else
	                                    m.groups.push(r.int32());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a GpuCounterSpec message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.GpuCounterDescriptor.GpuCounterSpec} GpuCounterSpec
	                 */
	                GpuCounterSpec.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec)
	                        return d;
	                    var m = new $root.perfetto.protos.GpuCounterDescriptor.GpuCounterSpec();
	                    if (d.counterId != null) {
	                        m.counterId = d.counterId >>> 0;
	                    }
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.description != null) {
	                        m.description = String(d.description);
	                    }
	                    if (d.intPeakValue != null) {
	                        if ($util.Long)
	                            (m.intPeakValue = $util.Long.fromValue(d.intPeakValue)).unsigned = false;
	                        else if (typeof d.intPeakValue === "string")
	                            m.intPeakValue = parseInt(d.intPeakValue, 10);
	                        else if (typeof d.intPeakValue === "number")
	                            m.intPeakValue = d.intPeakValue;
	                        else if (typeof d.intPeakValue === "object")
	                            m.intPeakValue = new $util.LongBits(d.intPeakValue.low >>> 0, d.intPeakValue.high >>> 0).toNumber();
	                    }
	                    if (d.doublePeakValue != null) {
	                        m.doublePeakValue = Number(d.doublePeakValue);
	                    }
	                    if (d.numeratorUnits) {
	                        if (!Array.isArray(d.numeratorUnits))
	                            throw TypeError(".perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numeratorUnits: array expected");
	                        m.numeratorUnits = [];
	                        for (var i = 0; i < d.numeratorUnits.length; ++i) {
	                            switch (d.numeratorUnits[i]) {
	                            default:
	                                if (typeof d.numeratorUnits[i] === "number") {
	                                    m.numeratorUnits[i] = d.numeratorUnits[i];
	                                    break;
	                                }
	                            case "NONE":
	                            case 0:
	                                m.numeratorUnits[i] = 0;
	                                break;
	                            case "BIT":
	                            case 1:
	                                m.numeratorUnits[i] = 1;
	                                break;
	                            case "KILOBIT":
	                            case 2:
	                                m.numeratorUnits[i] = 2;
	                                break;
	                            case "MEGABIT":
	                            case 3:
	                                m.numeratorUnits[i] = 3;
	                                break;
	                            case "GIGABIT":
	                            case 4:
	                                m.numeratorUnits[i] = 4;
	                                break;
	                            case "TERABIT":
	                            case 5:
	                                m.numeratorUnits[i] = 5;
	                                break;
	                            case "PETABIT":
	                            case 6:
	                                m.numeratorUnits[i] = 6;
	                                break;
	                            case "BYTE":
	                            case 7:
	                                m.numeratorUnits[i] = 7;
	                                break;
	                            case "KILOBYTE":
	                            case 8:
	                                m.numeratorUnits[i] = 8;
	                                break;
	                            case "MEGABYTE":
	                            case 9:
	                                m.numeratorUnits[i] = 9;
	                                break;
	                            case "GIGABYTE":
	                            case 10:
	                                m.numeratorUnits[i] = 10;
	                                break;
	                            case "TERABYTE":
	                            case 11:
	                                m.numeratorUnits[i] = 11;
	                                break;
	                            case "PETABYTE":
	                            case 12:
	                                m.numeratorUnits[i] = 12;
	                                break;
	                            case "HERTZ":
	                            case 13:
	                                m.numeratorUnits[i] = 13;
	                                break;
	                            case "KILOHERTZ":
	                            case 14:
	                                m.numeratorUnits[i] = 14;
	                                break;
	                            case "MEGAHERTZ":
	                            case 15:
	                                m.numeratorUnits[i] = 15;
	                                break;
	                            case "GIGAHERTZ":
	                            case 16:
	                                m.numeratorUnits[i] = 16;
	                                break;
	                            case "TERAHERTZ":
	                            case 17:
	                                m.numeratorUnits[i] = 17;
	                                break;
	                            case "PETAHERTZ":
	                            case 18:
	                                m.numeratorUnits[i] = 18;
	                                break;
	                            case "NANOSECOND":
	                            case 19:
	                                m.numeratorUnits[i] = 19;
	                                break;
	                            case "MICROSECOND":
	                            case 20:
	                                m.numeratorUnits[i] = 20;
	                                break;
	                            case "MILLISECOND":
	                            case 21:
	                                m.numeratorUnits[i] = 21;
	                                break;
	                            case "SECOND":
	                            case 22:
	                                m.numeratorUnits[i] = 22;
	                                break;
	                            case "MINUTE":
	                            case 23:
	                                m.numeratorUnits[i] = 23;
	                                break;
	                            case "HOUR":
	                            case 24:
	                                m.numeratorUnits[i] = 24;
	                                break;
	                            case "VERTEX":
	                            case 25:
	                                m.numeratorUnits[i] = 25;
	                                break;
	                            case "PIXEL":
	                            case 26:
	                                m.numeratorUnits[i] = 26;
	                                break;
	                            case "TRIANGLE":
	                            case 27:
	                                m.numeratorUnits[i] = 27;
	                                break;
	                            case "PRIMITIVE":
	                            case 38:
	                                m.numeratorUnits[i] = 38;
	                                break;
	                            case "FRAGMENT":
	                            case 39:
	                                m.numeratorUnits[i] = 39;
	                                break;
	                            case "MILLIWATT":
	                            case 28:
	                                m.numeratorUnits[i] = 28;
	                                break;
	                            case "WATT":
	                            case 29:
	                                m.numeratorUnits[i] = 29;
	                                break;
	                            case "KILOWATT":
	                            case 30:
	                                m.numeratorUnits[i] = 30;
	                                break;
	                            case "JOULE":
	                            case 31:
	                                m.numeratorUnits[i] = 31;
	                                break;
	                            case "VOLT":
	                            case 32:
	                                m.numeratorUnits[i] = 32;
	                                break;
	                            case "AMPERE":
	                            case 33:
	                                m.numeratorUnits[i] = 33;
	                                break;
	                            case "CELSIUS":
	                            case 34:
	                                m.numeratorUnits[i] = 34;
	                                break;
	                            case "FAHRENHEIT":
	                            case 35:
	                                m.numeratorUnits[i] = 35;
	                                break;
	                            case "KELVIN":
	                            case 36:
	                                m.numeratorUnits[i] = 36;
	                                break;
	                            case "PERCENT":
	                            case 37:
	                                m.numeratorUnits[i] = 37;
	                                break;
	                            case "INSTRUCTION":
	                            case 40:
	                                m.numeratorUnits[i] = 40;
	                                break;
	                            }
	                        }
	                    }
	                    if (d.denominatorUnits) {
	                        if (!Array.isArray(d.denominatorUnits))
	                            throw TypeError(".perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominatorUnits: array expected");
	                        m.denominatorUnits = [];
	                        for (var i = 0; i < d.denominatorUnits.length; ++i) {
	                            switch (d.denominatorUnits[i]) {
	                            default:
	                                if (typeof d.denominatorUnits[i] === "number") {
	                                    m.denominatorUnits[i] = d.denominatorUnits[i];
	                                    break;
	                                }
	                            case "NONE":
	                            case 0:
	                                m.denominatorUnits[i] = 0;
	                                break;
	                            case "BIT":
	                            case 1:
	                                m.denominatorUnits[i] = 1;
	                                break;
	                            case "KILOBIT":
	                            case 2:
	                                m.denominatorUnits[i] = 2;
	                                break;
	                            case "MEGABIT":
	                            case 3:
	                                m.denominatorUnits[i] = 3;
	                                break;
	                            case "GIGABIT":
	                            case 4:
	                                m.denominatorUnits[i] = 4;
	                                break;
	                            case "TERABIT":
	                            case 5:
	                                m.denominatorUnits[i] = 5;
	                                break;
	                            case "PETABIT":
	                            case 6:
	                                m.denominatorUnits[i] = 6;
	                                break;
	                            case "BYTE":
	                            case 7:
	                                m.denominatorUnits[i] = 7;
	                                break;
	                            case "KILOBYTE":
	                            case 8:
	                                m.denominatorUnits[i] = 8;
	                                break;
	                            case "MEGABYTE":
	                            case 9:
	                                m.denominatorUnits[i] = 9;
	                                break;
	                            case "GIGABYTE":
	                            case 10:
	                                m.denominatorUnits[i] = 10;
	                                break;
	                            case "TERABYTE":
	                            case 11:
	                                m.denominatorUnits[i] = 11;
	                                break;
	                            case "PETABYTE":
	                            case 12:
	                                m.denominatorUnits[i] = 12;
	                                break;
	                            case "HERTZ":
	                            case 13:
	                                m.denominatorUnits[i] = 13;
	                                break;
	                            case "KILOHERTZ":
	                            case 14:
	                                m.denominatorUnits[i] = 14;
	                                break;
	                            case "MEGAHERTZ":
	                            case 15:
	                                m.denominatorUnits[i] = 15;
	                                break;
	                            case "GIGAHERTZ":
	                            case 16:
	                                m.denominatorUnits[i] = 16;
	                                break;
	                            case "TERAHERTZ":
	                            case 17:
	                                m.denominatorUnits[i] = 17;
	                                break;
	                            case "PETAHERTZ":
	                            case 18:
	                                m.denominatorUnits[i] = 18;
	                                break;
	                            case "NANOSECOND":
	                            case 19:
	                                m.denominatorUnits[i] = 19;
	                                break;
	                            case "MICROSECOND":
	                            case 20:
	                                m.denominatorUnits[i] = 20;
	                                break;
	                            case "MILLISECOND":
	                            case 21:
	                                m.denominatorUnits[i] = 21;
	                                break;
	                            case "SECOND":
	                            case 22:
	                                m.denominatorUnits[i] = 22;
	                                break;
	                            case "MINUTE":
	                            case 23:
	                                m.denominatorUnits[i] = 23;
	                                break;
	                            case "HOUR":
	                            case 24:
	                                m.denominatorUnits[i] = 24;
	                                break;
	                            case "VERTEX":
	                            case 25:
	                                m.denominatorUnits[i] = 25;
	                                break;
	                            case "PIXEL":
	                            case 26:
	                                m.denominatorUnits[i] = 26;
	                                break;
	                            case "TRIANGLE":
	                            case 27:
	                                m.denominatorUnits[i] = 27;
	                                break;
	                            case "PRIMITIVE":
	                            case 38:
	                                m.denominatorUnits[i] = 38;
	                                break;
	                            case "FRAGMENT":
	                            case 39:
	                                m.denominatorUnits[i] = 39;
	                                break;
	                            case "MILLIWATT":
	                            case 28:
	                                m.denominatorUnits[i] = 28;
	                                break;
	                            case "WATT":
	                            case 29:
	                                m.denominatorUnits[i] = 29;
	                                break;
	                            case "KILOWATT":
	                            case 30:
	                                m.denominatorUnits[i] = 30;
	                                break;
	                            case "JOULE":
	                            case 31:
	                                m.denominatorUnits[i] = 31;
	                                break;
	                            case "VOLT":
	                            case 32:
	                                m.denominatorUnits[i] = 32;
	                                break;
	                            case "AMPERE":
	                            case 33:
	                                m.denominatorUnits[i] = 33;
	                                break;
	                            case "CELSIUS":
	                            case 34:
	                                m.denominatorUnits[i] = 34;
	                                break;
	                            case "FAHRENHEIT":
	                            case 35:
	                                m.denominatorUnits[i] = 35;
	                                break;
	                            case "KELVIN":
	                            case 36:
	                                m.denominatorUnits[i] = 36;
	                                break;
	                            case "PERCENT":
	                            case 37:
	                                m.denominatorUnits[i] = 37;
	                                break;
	                            case "INSTRUCTION":
	                            case 40:
	                                m.denominatorUnits[i] = 40;
	                                break;
	                            }
	                        }
	                    }
	                    if (d.selectByDefault != null) {
	                        m.selectByDefault = Boolean(d.selectByDefault);
	                    }
	                    if (d.groups) {
	                        if (!Array.isArray(d.groups))
	                            throw TypeError(".perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups: array expected");
	                        m.groups = [];
	                        for (var i = 0; i < d.groups.length; ++i) {
	                            switch (d.groups[i]) {
	                            default:
	                                if (typeof d.groups[i] === "number") {
	                                    m.groups[i] = d.groups[i];
	                                    break;
	                                }
	                            case "UNCLASSIFIED":
	                            case 0:
	                                m.groups[i] = 0;
	                                break;
	                            case "SYSTEM":
	                            case 1:
	                                m.groups[i] = 1;
	                                break;
	                            case "VERTICES":
	                            case 2:
	                                m.groups[i] = 2;
	                                break;
	                            case "FRAGMENTS":
	                            case 3:
	                                m.groups[i] = 3;
	                                break;
	                            case "PRIMITIVES":
	                            case 4:
	                                m.groups[i] = 4;
	                                break;
	                            case "MEMORY":
	                            case 5:
	                                m.groups[i] = 5;
	                                break;
	                            case "COMPUTE":
	                            case 6:
	                                m.groups[i] = 6;
	                                break;
	                            }
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a GpuCounterSpec message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @static
	                 * @param {perfetto.protos.GpuCounterDescriptor.GpuCounterSpec} m GpuCounterSpec
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                GpuCounterSpec.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.numeratorUnits = [];
	                        d.denominatorUnits = [];
	                        d.groups = [];
	                    }
	                    if (o.defaults) {
	                        d.counterId = 0;
	                        d.name = "";
	                        d.description = "";
	                        d.selectByDefault = false;
	                    }
	                    if (m.counterId != null && m.hasOwnProperty("counterId")) {
	                        d.counterId = m.counterId;
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.description != null && m.hasOwnProperty("description")) {
	                        d.description = m.description;
	                    }
	                    if (m.intPeakValue != null && m.hasOwnProperty("intPeakValue")) {
	                        if (typeof m.intPeakValue === "number")
	                            d.intPeakValue = o.longs === String ? String(m.intPeakValue) : m.intPeakValue;
	                        else
	                            d.intPeakValue = o.longs === String ? $util.Long.prototype.toString.call(m.intPeakValue) : o.longs === Number ? new $util.LongBits(m.intPeakValue.low >>> 0, m.intPeakValue.high >>> 0).toNumber() : m.intPeakValue;
	                        if (o.oneofs)
	                            d.peakValue = "intPeakValue";
	                    }
	                    if (m.doublePeakValue != null && m.hasOwnProperty("doublePeakValue")) {
	                        d.doublePeakValue = o.json && !isFinite(m.doublePeakValue) ? String(m.doublePeakValue) : m.doublePeakValue;
	                        if (o.oneofs)
	                            d.peakValue = "doublePeakValue";
	                    }
	                    if (m.numeratorUnits && m.numeratorUnits.length) {
	                        d.numeratorUnits = [];
	                        for (var j = 0; j < m.numeratorUnits.length; ++j) {
	                            d.numeratorUnits[j] = o.enums === String ? $root.perfetto.protos.GpuCounterDescriptor.MeasureUnit[m.numeratorUnits[j]] === undefined ? m.numeratorUnits[j] : $root.perfetto.protos.GpuCounterDescriptor.MeasureUnit[m.numeratorUnits[j]] : m.numeratorUnits[j];
	                        }
	                    }
	                    if (m.denominatorUnits && m.denominatorUnits.length) {
	                        d.denominatorUnits = [];
	                        for (var j = 0; j < m.denominatorUnits.length; ++j) {
	                            d.denominatorUnits[j] = o.enums === String ? $root.perfetto.protos.GpuCounterDescriptor.MeasureUnit[m.denominatorUnits[j]] === undefined ? m.denominatorUnits[j] : $root.perfetto.protos.GpuCounterDescriptor.MeasureUnit[m.denominatorUnits[j]] : m.denominatorUnits[j];
	                        }
	                    }
	                    if (m.selectByDefault != null && m.hasOwnProperty("selectByDefault")) {
	                        d.selectByDefault = m.selectByDefault;
	                    }
	                    if (m.groups && m.groups.length) {
	                        d.groups = [];
	                        for (var j = 0; j < m.groups.length; ++j) {
	                            d.groups[j] = o.enums === String ? $root.perfetto.protos.GpuCounterDescriptor.GpuCounterGroup[m.groups[j]] === undefined ? m.groups[j] : $root.perfetto.protos.GpuCounterDescriptor.GpuCounterGroup[m.groups[j]] : m.groups[j];
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this GpuCounterSpec to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                GpuCounterSpec.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for GpuCounterSpec
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                GpuCounterSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.GpuCounterDescriptor.GpuCounterSpec";
	                };

	                return GpuCounterSpec;
	            })();

	            GpuCounterDescriptor.GpuCounterBlock = (function() {

	                /**
	                 * Properties of a GpuCounterBlock.
	                 * @memberof perfetto.protos.GpuCounterDescriptor
	                 * @interface IGpuCounterBlock
	                 * @property {number|null} [blockId] GpuCounterBlock blockId
	                 * @property {number|null} [blockCapacity] GpuCounterBlock blockCapacity
	                 * @property {string|null} [name] GpuCounterBlock name
	                 * @property {string|null} [description] GpuCounterBlock description
	                 * @property {Array.<number>|null} [counterIds] GpuCounterBlock counterIds
	                 */

	                /**
	                 * Constructs a new GpuCounterBlock.
	                 * @memberof perfetto.protos.GpuCounterDescriptor
	                 * @classdesc Represents a GpuCounterBlock.
	                 * @implements IGpuCounterBlock
	                 * @constructor
	                 * @param {perfetto.protos.GpuCounterDescriptor.IGpuCounterBlock=} [p] Properties to set
	                 */
	                function GpuCounterBlock(p) {
	                    this.counterIds = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * GpuCounterBlock blockId.
	                 * @member {number} blockId
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @instance
	                 */
	                GpuCounterBlock.prototype.blockId = 0;

	                /**
	                 * GpuCounterBlock blockCapacity.
	                 * @member {number} blockCapacity
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @instance
	                 */
	                GpuCounterBlock.prototype.blockCapacity = 0;

	                /**
	                 * GpuCounterBlock name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @instance
	                 */
	                GpuCounterBlock.prototype.name = "";

	                /**
	                 * GpuCounterBlock description.
	                 * @member {string} description
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @instance
	                 */
	                GpuCounterBlock.prototype.description = "";

	                /**
	                 * GpuCounterBlock counterIds.
	                 * @member {Array.<number>} counterIds
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @instance
	                 */
	                GpuCounterBlock.prototype.counterIds = $util.emptyArray;

	                /**
	                 * Creates a new GpuCounterBlock instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @static
	                 * @param {perfetto.protos.GpuCounterDescriptor.IGpuCounterBlock=} [properties] Properties to set
	                 * @returns {perfetto.protos.GpuCounterDescriptor.GpuCounterBlock} GpuCounterBlock instance
	                 */
	                GpuCounterBlock.create = function create(properties) {
	                    return new GpuCounterBlock(properties);
	                };

	                /**
	                 * Encodes the specified GpuCounterBlock message. Does not implicitly {@link perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @static
	                 * @param {perfetto.protos.GpuCounterDescriptor.IGpuCounterBlock} m GpuCounterBlock message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                GpuCounterBlock.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.blockId != null && Object.hasOwnProperty.call(m, "blockId"))
	                        w.uint32(8).uint32(m.blockId);
	                    if (m.blockCapacity != null && Object.hasOwnProperty.call(m, "blockCapacity"))
	                        w.uint32(16).uint32(m.blockCapacity);
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(26).string(m.name);
	                    if (m.description != null && Object.hasOwnProperty.call(m, "description"))
	                        w.uint32(34).string(m.description);
	                    if (m.counterIds != null && m.counterIds.length) {
	                        for (var i = 0; i < m.counterIds.length; ++i)
	                            w.uint32(40).uint32(m.counterIds[i]);
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a GpuCounterBlock message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.GpuCounterDescriptor.GpuCounterBlock} GpuCounterBlock
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                GpuCounterBlock.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.blockId = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.blockCapacity = r.uint32();
	                                break;
	                            }
	                        case 3: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 4: {
	                                m.description = r.string();
	                                break;
	                            }
	                        case 5: {
	                                if (!(m.counterIds && m.counterIds.length))
	                                    m.counterIds = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.counterIds.push(r.uint32());
	                                } else
	                                    m.counterIds.push(r.uint32());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a GpuCounterBlock message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.GpuCounterDescriptor.GpuCounterBlock} GpuCounterBlock
	                 */
	                GpuCounterBlock.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock)
	                        return d;
	                    var m = new $root.perfetto.protos.GpuCounterDescriptor.GpuCounterBlock();
	                    if (d.blockId != null) {
	                        m.blockId = d.blockId >>> 0;
	                    }
	                    if (d.blockCapacity != null) {
	                        m.blockCapacity = d.blockCapacity >>> 0;
	                    }
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.description != null) {
	                        m.description = String(d.description);
	                    }
	                    if (d.counterIds) {
	                        if (!Array.isArray(d.counterIds))
	                            throw TypeError(".perfetto.protos.GpuCounterDescriptor.GpuCounterBlock.counterIds: array expected");
	                        m.counterIds = [];
	                        for (var i = 0; i < d.counterIds.length; ++i) {
	                            m.counterIds[i] = d.counterIds[i] >>> 0;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a GpuCounterBlock message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @static
	                 * @param {perfetto.protos.GpuCounterDescriptor.GpuCounterBlock} m GpuCounterBlock
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                GpuCounterBlock.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.counterIds = [];
	                    }
	                    if (o.defaults) {
	                        d.blockId = 0;
	                        d.blockCapacity = 0;
	                        d.name = "";
	                        d.description = "";
	                    }
	                    if (m.blockId != null && m.hasOwnProperty("blockId")) {
	                        d.blockId = m.blockId;
	                    }
	                    if (m.blockCapacity != null && m.hasOwnProperty("blockCapacity")) {
	                        d.blockCapacity = m.blockCapacity;
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.description != null && m.hasOwnProperty("description")) {
	                        d.description = m.description;
	                    }
	                    if (m.counterIds && m.counterIds.length) {
	                        d.counterIds = [];
	                        for (var j = 0; j < m.counterIds.length; ++j) {
	                            d.counterIds[j] = m.counterIds[j];
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this GpuCounterBlock to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                GpuCounterBlock.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for GpuCounterBlock
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                GpuCounterBlock.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.GpuCounterDescriptor.GpuCounterBlock";
	                };

	                return GpuCounterBlock;
	            })();

	            /**
	             * MeasureUnit enum.
	             * @name perfetto.protos.GpuCounterDescriptor.MeasureUnit
	             * @enum {number}
	             * @property {number} NONE=0 NONE value
	             * @property {number} BIT=1 BIT value
	             * @property {number} KILOBIT=2 KILOBIT value
	             * @property {number} MEGABIT=3 MEGABIT value
	             * @property {number} GIGABIT=4 GIGABIT value
	             * @property {number} TERABIT=5 TERABIT value
	             * @property {number} PETABIT=6 PETABIT value
	             * @property {number} BYTE=7 BYTE value
	             * @property {number} KILOBYTE=8 KILOBYTE value
	             * @property {number} MEGABYTE=9 MEGABYTE value
	             * @property {number} GIGABYTE=10 GIGABYTE value
	             * @property {number} TERABYTE=11 TERABYTE value
	             * @property {number} PETABYTE=12 PETABYTE value
	             * @property {number} HERTZ=13 HERTZ value
	             * @property {number} KILOHERTZ=14 KILOHERTZ value
	             * @property {number} MEGAHERTZ=15 MEGAHERTZ value
	             * @property {number} GIGAHERTZ=16 GIGAHERTZ value
	             * @property {number} TERAHERTZ=17 TERAHERTZ value
	             * @property {number} PETAHERTZ=18 PETAHERTZ value
	             * @property {number} NANOSECOND=19 NANOSECOND value
	             * @property {number} MICROSECOND=20 MICROSECOND value
	             * @property {number} MILLISECOND=21 MILLISECOND value
	             * @property {number} SECOND=22 SECOND value
	             * @property {number} MINUTE=23 MINUTE value
	             * @property {number} HOUR=24 HOUR value
	             * @property {number} VERTEX=25 VERTEX value
	             * @property {number} PIXEL=26 PIXEL value
	             * @property {number} TRIANGLE=27 TRIANGLE value
	             * @property {number} PRIMITIVE=38 PRIMITIVE value
	             * @property {number} FRAGMENT=39 FRAGMENT value
	             * @property {number} MILLIWATT=28 MILLIWATT value
	             * @property {number} WATT=29 WATT value
	             * @property {number} KILOWATT=30 KILOWATT value
	             * @property {number} JOULE=31 JOULE value
	             * @property {number} VOLT=32 VOLT value
	             * @property {number} AMPERE=33 AMPERE value
	             * @property {number} CELSIUS=34 CELSIUS value
	             * @property {number} FAHRENHEIT=35 FAHRENHEIT value
	             * @property {number} KELVIN=36 KELVIN value
	             * @property {number} PERCENT=37 PERCENT value
	             * @property {number} INSTRUCTION=40 INSTRUCTION value
	             */
	            GpuCounterDescriptor.MeasureUnit = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "NONE"] = 0;
	                values[valuesById[1] = "BIT"] = 1;
	                values[valuesById[2] = "KILOBIT"] = 2;
	                values[valuesById[3] = "MEGABIT"] = 3;
	                values[valuesById[4] = "GIGABIT"] = 4;
	                values[valuesById[5] = "TERABIT"] = 5;
	                values[valuesById[6] = "PETABIT"] = 6;
	                values[valuesById[7] = "BYTE"] = 7;
	                values[valuesById[8] = "KILOBYTE"] = 8;
	                values[valuesById[9] = "MEGABYTE"] = 9;
	                values[valuesById[10] = "GIGABYTE"] = 10;
	                values[valuesById[11] = "TERABYTE"] = 11;
	                values[valuesById[12] = "PETABYTE"] = 12;
	                values[valuesById[13] = "HERTZ"] = 13;
	                values[valuesById[14] = "KILOHERTZ"] = 14;
	                values[valuesById[15] = "MEGAHERTZ"] = 15;
	                values[valuesById[16] = "GIGAHERTZ"] = 16;
	                values[valuesById[17] = "TERAHERTZ"] = 17;
	                values[valuesById[18] = "PETAHERTZ"] = 18;
	                values[valuesById[19] = "NANOSECOND"] = 19;
	                values[valuesById[20] = "MICROSECOND"] = 20;
	                values[valuesById[21] = "MILLISECOND"] = 21;
	                values[valuesById[22] = "SECOND"] = 22;
	                values[valuesById[23] = "MINUTE"] = 23;
	                values[valuesById[24] = "HOUR"] = 24;
	                values[valuesById[25] = "VERTEX"] = 25;
	                values[valuesById[26] = "PIXEL"] = 26;
	                values[valuesById[27] = "TRIANGLE"] = 27;
	                values[valuesById[38] = "PRIMITIVE"] = 38;
	                values[valuesById[39] = "FRAGMENT"] = 39;
	                values[valuesById[28] = "MILLIWATT"] = 28;
	                values[valuesById[29] = "WATT"] = 29;
	                values[valuesById[30] = "KILOWATT"] = 30;
	                values[valuesById[31] = "JOULE"] = 31;
	                values[valuesById[32] = "VOLT"] = 32;
	                values[valuesById[33] = "AMPERE"] = 33;
	                values[valuesById[34] = "CELSIUS"] = 34;
	                values[valuesById[35] = "FAHRENHEIT"] = 35;
	                values[valuesById[36] = "KELVIN"] = 36;
	                values[valuesById[37] = "PERCENT"] = 37;
	                values[valuesById[40] = "INSTRUCTION"] = 40;
	                return values;
	            })();

	            return GpuCounterDescriptor;
	        })();

	        protos.TrackEventCategory = (function() {

	            /**
	             * Properties of a TrackEventCategory.
	             * @memberof perfetto.protos
	             * @interface ITrackEventCategory
	             * @property {string|null} [name] TrackEventCategory name
	             * @property {string|null} [description] TrackEventCategory description
	             * @property {Array.<string>|null} [tags] TrackEventCategory tags
	             */

	            /**
	             * Constructs a new TrackEventCategory.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TrackEventCategory.
	             * @implements ITrackEventCategory
	             * @constructor
	             * @param {perfetto.protos.ITrackEventCategory=} [p] Properties to set
	             */
	            function TrackEventCategory(p) {
	                this.tags = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TrackEventCategory name.
	             * @member {string} name
	             * @memberof perfetto.protos.TrackEventCategory
	             * @instance
	             */
	            TrackEventCategory.prototype.name = "";

	            /**
	             * TrackEventCategory description.
	             * @member {string} description
	             * @memberof perfetto.protos.TrackEventCategory
	             * @instance
	             */
	            TrackEventCategory.prototype.description = "";

	            /**
	             * TrackEventCategory tags.
	             * @member {Array.<string>} tags
	             * @memberof perfetto.protos.TrackEventCategory
	             * @instance
	             */
	            TrackEventCategory.prototype.tags = $util.emptyArray;

	            /**
	             * Creates a new TrackEventCategory instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TrackEventCategory
	             * @static
	             * @param {perfetto.protos.ITrackEventCategory=} [properties] Properties to set
	             * @returns {perfetto.protos.TrackEventCategory} TrackEventCategory instance
	             */
	            TrackEventCategory.create = function create(properties) {
	                return new TrackEventCategory(properties);
	            };

	            /**
	             * Encodes the specified TrackEventCategory message. Does not implicitly {@link perfetto.protos.TrackEventCategory.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TrackEventCategory
	             * @static
	             * @param {perfetto.protos.ITrackEventCategory} m TrackEventCategory message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TrackEventCategory.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.description != null && Object.hasOwnProperty.call(m, "description"))
	                    w.uint32(18).string(m.description);
	                if (m.tags != null && m.tags.length) {
	                    for (var i = 0; i < m.tags.length; ++i)
	                        w.uint32(26).string(m.tags[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a TrackEventCategory message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TrackEventCategory
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TrackEventCategory} TrackEventCategory
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TrackEventCategory.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TrackEventCategory();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.description = r.string();
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.tags && m.tags.length))
	                                m.tags = [];
	                            m.tags.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TrackEventCategory message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TrackEventCategory
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TrackEventCategory} TrackEventCategory
	             */
	            TrackEventCategory.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TrackEventCategory)
	                    return d;
	                var m = new $root.perfetto.protos.TrackEventCategory();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.description != null) {
	                    m.description = String(d.description);
	                }
	                if (d.tags) {
	                    if (!Array.isArray(d.tags))
	                        throw TypeError(".perfetto.protos.TrackEventCategory.tags: array expected");
	                    m.tags = [];
	                    for (var i = 0; i < d.tags.length; ++i) {
	                        m.tags[i] = String(d.tags[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TrackEventCategory message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TrackEventCategory
	             * @static
	             * @param {perfetto.protos.TrackEventCategory} m TrackEventCategory
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TrackEventCategory.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.tags = [];
	                }
	                if (o.defaults) {
	                    d.name = "";
	                    d.description = "";
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.description != null && m.hasOwnProperty("description")) {
	                    d.description = m.description;
	                }
	                if (m.tags && m.tags.length) {
	                    d.tags = [];
	                    for (var j = 0; j < m.tags.length; ++j) {
	                        d.tags[j] = m.tags[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this TrackEventCategory to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TrackEventCategory
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TrackEventCategory.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TrackEventCategory
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TrackEventCategory
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TrackEventCategory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TrackEventCategory";
	            };

	            return TrackEventCategory;
	        })();

	        protos.TrackEventDescriptor = (function() {

	            /**
	             * Properties of a TrackEventDescriptor.
	             * @memberof perfetto.protos
	             * @interface ITrackEventDescriptor
	             * @property {Array.<perfetto.protos.ITrackEventCategory>|null} [availableCategories] TrackEventDescriptor availableCategories
	             */

	            /**
	             * Constructs a new TrackEventDescriptor.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TrackEventDescriptor.
	             * @implements ITrackEventDescriptor
	             * @constructor
	             * @param {perfetto.protos.ITrackEventDescriptor=} [p] Properties to set
	             */
	            function TrackEventDescriptor(p) {
	                this.availableCategories = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TrackEventDescriptor availableCategories.
	             * @member {Array.<perfetto.protos.ITrackEventCategory>} availableCategories
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @instance
	             */
	            TrackEventDescriptor.prototype.availableCategories = $util.emptyArray;

	            /**
	             * Creates a new TrackEventDescriptor instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @static
	             * @param {perfetto.protos.ITrackEventDescriptor=} [properties] Properties to set
	             * @returns {perfetto.protos.TrackEventDescriptor} TrackEventDescriptor instance
	             */
	            TrackEventDescriptor.create = function create(properties) {
	                return new TrackEventDescriptor(properties);
	            };

	            /**
	             * Encodes the specified TrackEventDescriptor message. Does not implicitly {@link perfetto.protos.TrackEventDescriptor.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @static
	             * @param {perfetto.protos.ITrackEventDescriptor} m TrackEventDescriptor message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TrackEventDescriptor.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.availableCategories != null && m.availableCategories.length) {
	                    for (var i = 0; i < m.availableCategories.length; ++i)
	                        $root.perfetto.protos.TrackEventCategory.encode(m.availableCategories[i], w.uint32(10).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a TrackEventDescriptor message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TrackEventDescriptor} TrackEventDescriptor
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TrackEventDescriptor.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TrackEventDescriptor();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.availableCategories && m.availableCategories.length))
	                                m.availableCategories = [];
	                            m.availableCategories.push($root.perfetto.protos.TrackEventCategory.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TrackEventDescriptor message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TrackEventDescriptor} TrackEventDescriptor
	             */
	            TrackEventDescriptor.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TrackEventDescriptor)
	                    return d;
	                var m = new $root.perfetto.protos.TrackEventDescriptor();
	                if (d.availableCategories) {
	                    if (!Array.isArray(d.availableCategories))
	                        throw TypeError(".perfetto.protos.TrackEventDescriptor.availableCategories: array expected");
	                    m.availableCategories = [];
	                    for (var i = 0; i < d.availableCategories.length; ++i) {
	                        if (typeof d.availableCategories[i] !== "object")
	                            throw TypeError(".perfetto.protos.TrackEventDescriptor.availableCategories: object expected");
	                        m.availableCategories[i] = $root.perfetto.protos.TrackEventCategory.fromObject(d.availableCategories[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TrackEventDescriptor message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @static
	             * @param {perfetto.protos.TrackEventDescriptor} m TrackEventDescriptor
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TrackEventDescriptor.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.availableCategories = [];
	                }
	                if (m.availableCategories && m.availableCategories.length) {
	                    d.availableCategories = [];
	                    for (var j = 0; j < m.availableCategories.length; ++j) {
	                        d.availableCategories[j] = $root.perfetto.protos.TrackEventCategory.toObject(m.availableCategories[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this TrackEventDescriptor to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TrackEventDescriptor.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TrackEventDescriptor
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TrackEventDescriptor
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TrackEventDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TrackEventDescriptor";
	            };

	            return TrackEventDescriptor;
	        })();

	        protos.TracingServiceCapabilities = (function() {

	            /**
	             * Properties of a TracingServiceCapabilities.
	             * @memberof perfetto.protos
	             * @interface ITracingServiceCapabilities
	             * @property {boolean|null} [hasQueryCapabilities] TracingServiceCapabilities hasQueryCapabilities
	             * @property {Array.<perfetto.protos.ObservableEvents.Type>|null} [observableEvents] TracingServiceCapabilities observableEvents
	             * @property {boolean|null} [hasTraceConfigOutputPath] TracingServiceCapabilities hasTraceConfigOutputPath
	             * @property {boolean|null} [hasCloneSession] TracingServiceCapabilities hasCloneSession
	             */

	            /**
	             * Constructs a new TracingServiceCapabilities.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TracingServiceCapabilities.
	             * @implements ITracingServiceCapabilities
	             * @constructor
	             * @param {perfetto.protos.ITracingServiceCapabilities=} [p] Properties to set
	             */
	            function TracingServiceCapabilities(p) {
	                this.observableEvents = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TracingServiceCapabilities hasQueryCapabilities.
	             * @member {boolean} hasQueryCapabilities
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @instance
	             */
	            TracingServiceCapabilities.prototype.hasQueryCapabilities = false;

	            /**
	             * TracingServiceCapabilities observableEvents.
	             * @member {Array.<perfetto.protos.ObservableEvents.Type>} observableEvents
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @instance
	             */
	            TracingServiceCapabilities.prototype.observableEvents = $util.emptyArray;

	            /**
	             * TracingServiceCapabilities hasTraceConfigOutputPath.
	             * @member {boolean} hasTraceConfigOutputPath
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @instance
	             */
	            TracingServiceCapabilities.prototype.hasTraceConfigOutputPath = false;

	            /**
	             * TracingServiceCapabilities hasCloneSession.
	             * @member {boolean} hasCloneSession
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @instance
	             */
	            TracingServiceCapabilities.prototype.hasCloneSession = false;

	            /**
	             * Creates a new TracingServiceCapabilities instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @static
	             * @param {perfetto.protos.ITracingServiceCapabilities=} [properties] Properties to set
	             * @returns {perfetto.protos.TracingServiceCapabilities} TracingServiceCapabilities instance
	             */
	            TracingServiceCapabilities.create = function create(properties) {
	                return new TracingServiceCapabilities(properties);
	            };

	            /**
	             * Encodes the specified TracingServiceCapabilities message. Does not implicitly {@link perfetto.protos.TracingServiceCapabilities.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @static
	             * @param {perfetto.protos.ITracingServiceCapabilities} m TracingServiceCapabilities message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TracingServiceCapabilities.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.hasQueryCapabilities != null && Object.hasOwnProperty.call(m, "hasQueryCapabilities"))
	                    w.uint32(8).bool(m.hasQueryCapabilities);
	                if (m.observableEvents != null && m.observableEvents.length) {
	                    for (var i = 0; i < m.observableEvents.length; ++i)
	                        w.uint32(16).int32(m.observableEvents[i]);
	                }
	                if (m.hasTraceConfigOutputPath != null && Object.hasOwnProperty.call(m, "hasTraceConfigOutputPath"))
	                    w.uint32(24).bool(m.hasTraceConfigOutputPath);
	                if (m.hasCloneSession != null && Object.hasOwnProperty.call(m, "hasCloneSession"))
	                    w.uint32(32).bool(m.hasCloneSession);
	                return w;
	            };

	            /**
	             * Decodes a TracingServiceCapabilities message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TracingServiceCapabilities} TracingServiceCapabilities
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TracingServiceCapabilities.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TracingServiceCapabilities();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.hasQueryCapabilities = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.observableEvents && m.observableEvents.length))
	                                m.observableEvents = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.observableEvents.push(r.int32());
	                            } else
	                                m.observableEvents.push(r.int32());
	                            break;
	                        }
	                    case 3: {
	                            m.hasTraceConfigOutputPath = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.hasCloneSession = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TracingServiceCapabilities message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TracingServiceCapabilities} TracingServiceCapabilities
	             */
	            TracingServiceCapabilities.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TracingServiceCapabilities)
	                    return d;
	                var m = new $root.perfetto.protos.TracingServiceCapabilities();
	                if (d.hasQueryCapabilities != null) {
	                    m.hasQueryCapabilities = Boolean(d.hasQueryCapabilities);
	                }
	                if (d.observableEvents) {
	                    if (!Array.isArray(d.observableEvents))
	                        throw TypeError(".perfetto.protos.TracingServiceCapabilities.observableEvents: array expected");
	                    m.observableEvents = [];
	                    for (var i = 0; i < d.observableEvents.length; ++i) {
	                        switch (d.observableEvents[i]) {
	                        default:
	                            if (typeof d.observableEvents[i] === "number") {
	                                m.observableEvents[i] = d.observableEvents[i];
	                                break;
	                            }
	                        case "TYPE_UNSPECIFIED":
	                        case 0:
	                            m.observableEvents[i] = 0;
	                            break;
	                        case "TYPE_DATA_SOURCES_INSTANCES":
	                        case 1:
	                            m.observableEvents[i] = 1;
	                            break;
	                        case "TYPE_ALL_DATA_SOURCES_STARTED":
	                        case 2:
	                            m.observableEvents[i] = 2;
	                            break;
	                        case "TYPE_CLONE_TRIGGER_HIT":
	                        case 4:
	                            m.observableEvents[i] = 4;
	                            break;
	                        }
	                    }
	                }
	                if (d.hasTraceConfigOutputPath != null) {
	                    m.hasTraceConfigOutputPath = Boolean(d.hasTraceConfigOutputPath);
	                }
	                if (d.hasCloneSession != null) {
	                    m.hasCloneSession = Boolean(d.hasCloneSession);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TracingServiceCapabilities message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @static
	             * @param {perfetto.protos.TracingServiceCapabilities} m TracingServiceCapabilities
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TracingServiceCapabilities.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.observableEvents = [];
	                }
	                if (o.defaults) {
	                    d.hasQueryCapabilities = false;
	                    d.hasTraceConfigOutputPath = false;
	                    d.hasCloneSession = false;
	                }
	                if (m.hasQueryCapabilities != null && m.hasOwnProperty("hasQueryCapabilities")) {
	                    d.hasQueryCapabilities = m.hasQueryCapabilities;
	                }
	                if (m.observableEvents && m.observableEvents.length) {
	                    d.observableEvents = [];
	                    for (var j = 0; j < m.observableEvents.length; ++j) {
	                        d.observableEvents[j] = o.enums === String ? $root.perfetto.protos.ObservableEvents.Type[m.observableEvents[j]] === undefined ? m.observableEvents[j] : $root.perfetto.protos.ObservableEvents.Type[m.observableEvents[j]] : m.observableEvents[j];
	                    }
	                }
	                if (m.hasTraceConfigOutputPath != null && m.hasOwnProperty("hasTraceConfigOutputPath")) {
	                    d.hasTraceConfigOutputPath = m.hasTraceConfigOutputPath;
	                }
	                if (m.hasCloneSession != null && m.hasOwnProperty("hasCloneSession")) {
	                    d.hasCloneSession = m.hasCloneSession;
	                }
	                return d;
	            };

	            /**
	             * Converts this TracingServiceCapabilities to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TracingServiceCapabilities.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TracingServiceCapabilities
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TracingServiceCapabilities
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TracingServiceCapabilities.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TracingServiceCapabilities";
	            };

	            return TracingServiceCapabilities;
	        })();

	        protos.TraceStats = (function() {

	            /**
	             * Properties of a TraceStats.
	             * @memberof perfetto.protos
	             * @interface ITraceStats
	             * @property {Array.<perfetto.protos.TraceStats.IBufferStats>|null} [bufferStats] TraceStats bufferStats
	             * @property {Array.<number>|null} [chunkPayloadHistogramDef] TraceStats chunkPayloadHistogramDef
	             * @property {Array.<perfetto.protos.TraceStats.IWriterStats>|null} [writerStats] TraceStats writerStats
	             * @property {number|null} [producersConnected] TraceStats producersConnected
	             * @property {number|null} [producersSeen] TraceStats producersSeen
	             * @property {number|null} [dataSourcesRegistered] TraceStats dataSourcesRegistered
	             * @property {number|null} [dataSourcesSeen] TraceStats dataSourcesSeen
	             * @property {number|null} [tracingSessions] TraceStats tracingSessions
	             * @property {number|null} [totalBuffers] TraceStats totalBuffers
	             * @property {number|null} [chunksDiscarded] TraceStats chunksDiscarded
	             * @property {number|null} [patchesDiscarded] TraceStats patchesDiscarded
	             * @property {number|null} [invalidPackets] TraceStats invalidPackets
	             * @property {perfetto.protos.TraceStats.IFilterStats|null} [filterStats] TraceStats filterStats
	             * @property {number|null} [flushesRequested] TraceStats flushesRequested
	             * @property {number|null} [flushesSucceeded] TraceStats flushesSucceeded
	             * @property {number|null} [flushesFailed] TraceStats flushesFailed
	             * @property {perfetto.protos.TraceStats.FinalFlushOutcome|null} [finalFlushOutcome] TraceStats finalFlushOutcome
	             */

	            /**
	             * Constructs a new TraceStats.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TraceStats.
	             * @implements ITraceStats
	             * @constructor
	             * @param {perfetto.protos.ITraceStats=} [p] Properties to set
	             */
	            function TraceStats(p) {
	                this.bufferStats = [];
	                this.chunkPayloadHistogramDef = [];
	                this.writerStats = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TraceStats bufferStats.
	             * @member {Array.<perfetto.protos.TraceStats.IBufferStats>} bufferStats
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.bufferStats = $util.emptyArray;

	            /**
	             * TraceStats chunkPayloadHistogramDef.
	             * @member {Array.<number>} chunkPayloadHistogramDef
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.chunkPayloadHistogramDef = $util.emptyArray;

	            /**
	             * TraceStats writerStats.
	             * @member {Array.<perfetto.protos.TraceStats.IWriterStats>} writerStats
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.writerStats = $util.emptyArray;

	            /**
	             * TraceStats producersConnected.
	             * @member {number} producersConnected
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.producersConnected = 0;

	            /**
	             * TraceStats producersSeen.
	             * @member {number} producersSeen
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.producersSeen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats dataSourcesRegistered.
	             * @member {number} dataSourcesRegistered
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.dataSourcesRegistered = 0;

	            /**
	             * TraceStats dataSourcesSeen.
	             * @member {number} dataSourcesSeen
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.dataSourcesSeen = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats tracingSessions.
	             * @member {number} tracingSessions
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.tracingSessions = 0;

	            /**
	             * TraceStats totalBuffers.
	             * @member {number} totalBuffers
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.totalBuffers = 0;

	            /**
	             * TraceStats chunksDiscarded.
	             * @member {number} chunksDiscarded
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.chunksDiscarded = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats patchesDiscarded.
	             * @member {number} patchesDiscarded
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.patchesDiscarded = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats invalidPackets.
	             * @member {number} invalidPackets
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.invalidPackets = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats filterStats.
	             * @member {perfetto.protos.TraceStats.IFilterStats|null|undefined} filterStats
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.filterStats = null;

	            /**
	             * TraceStats flushesRequested.
	             * @member {number} flushesRequested
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.flushesRequested = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats flushesSucceeded.
	             * @member {number} flushesSucceeded
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.flushesSucceeded = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats flushesFailed.
	             * @member {number} flushesFailed
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.flushesFailed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceStats finalFlushOutcome.
	             * @member {perfetto.protos.TraceStats.FinalFlushOutcome} finalFlushOutcome
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             */
	            TraceStats.prototype.finalFlushOutcome = 0;

	            /**
	             * Creates a new TraceStats instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TraceStats
	             * @static
	             * @param {perfetto.protos.ITraceStats=} [properties] Properties to set
	             * @returns {perfetto.protos.TraceStats} TraceStats instance
	             */
	            TraceStats.create = function create(properties) {
	                return new TraceStats(properties);
	            };

	            /**
	             * Encodes the specified TraceStats message. Does not implicitly {@link perfetto.protos.TraceStats.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TraceStats
	             * @static
	             * @param {perfetto.protos.ITraceStats} m TraceStats message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TraceStats.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.bufferStats != null && m.bufferStats.length) {
	                    for (var i = 0; i < m.bufferStats.length; ++i)
	                        $root.perfetto.protos.TraceStats.BufferStats.encode(m.bufferStats[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.producersConnected != null && Object.hasOwnProperty.call(m, "producersConnected"))
	                    w.uint32(16).uint32(m.producersConnected);
	                if (m.producersSeen != null && Object.hasOwnProperty.call(m, "producersSeen"))
	                    w.uint32(24).uint64(m.producersSeen);
	                if (m.dataSourcesRegistered != null && Object.hasOwnProperty.call(m, "dataSourcesRegistered"))
	                    w.uint32(32).uint32(m.dataSourcesRegistered);
	                if (m.dataSourcesSeen != null && Object.hasOwnProperty.call(m, "dataSourcesSeen"))
	                    w.uint32(40).uint64(m.dataSourcesSeen);
	                if (m.tracingSessions != null && Object.hasOwnProperty.call(m, "tracingSessions"))
	                    w.uint32(48).uint32(m.tracingSessions);
	                if (m.totalBuffers != null && Object.hasOwnProperty.call(m, "totalBuffers"))
	                    w.uint32(56).uint32(m.totalBuffers);
	                if (m.chunksDiscarded != null && Object.hasOwnProperty.call(m, "chunksDiscarded"))
	                    w.uint32(64).uint64(m.chunksDiscarded);
	                if (m.patchesDiscarded != null && Object.hasOwnProperty.call(m, "patchesDiscarded"))
	                    w.uint32(72).uint64(m.patchesDiscarded);
	                if (m.invalidPackets != null && Object.hasOwnProperty.call(m, "invalidPackets"))
	                    w.uint32(80).uint64(m.invalidPackets);
	                if (m.filterStats != null && Object.hasOwnProperty.call(m, "filterStats"))
	                    $root.perfetto.protos.TraceStats.FilterStats.encode(m.filterStats, w.uint32(90).fork()).ldelim();
	                if (m.flushesRequested != null && Object.hasOwnProperty.call(m, "flushesRequested"))
	                    w.uint32(96).uint64(m.flushesRequested);
	                if (m.flushesSucceeded != null && Object.hasOwnProperty.call(m, "flushesSucceeded"))
	                    w.uint32(104).uint64(m.flushesSucceeded);
	                if (m.flushesFailed != null && Object.hasOwnProperty.call(m, "flushesFailed"))
	                    w.uint32(112).uint64(m.flushesFailed);
	                if (m.finalFlushOutcome != null && Object.hasOwnProperty.call(m, "finalFlushOutcome"))
	                    w.uint32(120).int32(m.finalFlushOutcome);
	                if (m.chunkPayloadHistogramDef != null && m.chunkPayloadHistogramDef.length) {
	                    for (var i = 0; i < m.chunkPayloadHistogramDef.length; ++i)
	                        w.uint32(136).int64(m.chunkPayloadHistogramDef[i]);
	                }
	                if (m.writerStats != null && m.writerStats.length) {
	                    for (var i = 0; i < m.writerStats.length; ++i)
	                        $root.perfetto.protos.TraceStats.WriterStats.encode(m.writerStats[i], w.uint32(146).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a TraceStats message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TraceStats
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TraceStats} TraceStats
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TraceStats.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceStats();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.bufferStats && m.bufferStats.length))
	                                m.bufferStats = [];
	                            m.bufferStats.push($root.perfetto.protos.TraceStats.BufferStats.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 17: {
	                            if (!(m.chunkPayloadHistogramDef && m.chunkPayloadHistogramDef.length))
	                                m.chunkPayloadHistogramDef = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.chunkPayloadHistogramDef.push(r.int64());
	                            } else
	                                m.chunkPayloadHistogramDef.push(r.int64());
	                            break;
	                        }
	                    case 18: {
	                            if (!(m.writerStats && m.writerStats.length))
	                                m.writerStats = [];
	                            m.writerStats.push($root.perfetto.protos.TraceStats.WriterStats.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            m.producersConnected = r.uint32();
	                            break;
	                        }
	                    case 3: {
	                            m.producersSeen = r.uint64();
	                            break;
	                        }
	                    case 4: {
	                            m.dataSourcesRegistered = r.uint32();
	                            break;
	                        }
	                    case 5: {
	                            m.dataSourcesSeen = r.uint64();
	                            break;
	                        }
	                    case 6: {
	                            m.tracingSessions = r.uint32();
	                            break;
	                        }
	                    case 7: {
	                            m.totalBuffers = r.uint32();
	                            break;
	                        }
	                    case 8: {
	                            m.chunksDiscarded = r.uint64();
	                            break;
	                        }
	                    case 9: {
	                            m.patchesDiscarded = r.uint64();
	                            break;
	                        }
	                    case 10: {
	                            m.invalidPackets = r.uint64();
	                            break;
	                        }
	                    case 11: {
	                            m.filterStats = $root.perfetto.protos.TraceStats.FilterStats.decode(r, r.uint32());
	                            break;
	                        }
	                    case 12: {
	                            m.flushesRequested = r.uint64();
	                            break;
	                        }
	                    case 13: {
	                            m.flushesSucceeded = r.uint64();
	                            break;
	                        }
	                    case 14: {
	                            m.flushesFailed = r.uint64();
	                            break;
	                        }
	                    case 15: {
	                            m.finalFlushOutcome = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TraceStats message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TraceStats
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TraceStats} TraceStats
	             */
	            TraceStats.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TraceStats)
	                    return d;
	                var m = new $root.perfetto.protos.TraceStats();
	                if (d.bufferStats) {
	                    if (!Array.isArray(d.bufferStats))
	                        throw TypeError(".perfetto.protos.TraceStats.bufferStats: array expected");
	                    m.bufferStats = [];
	                    for (var i = 0; i < d.bufferStats.length; ++i) {
	                        if (typeof d.bufferStats[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceStats.bufferStats: object expected");
	                        m.bufferStats[i] = $root.perfetto.protos.TraceStats.BufferStats.fromObject(d.bufferStats[i]);
	                    }
	                }
	                if (d.chunkPayloadHistogramDef) {
	                    if (!Array.isArray(d.chunkPayloadHistogramDef))
	                        throw TypeError(".perfetto.protos.TraceStats.chunkPayloadHistogramDef: array expected");
	                    m.chunkPayloadHistogramDef = [];
	                    for (var i = 0; i < d.chunkPayloadHistogramDef.length; ++i) {
	                        if ($util.Long)
	                            (m.chunkPayloadHistogramDef[i] = $util.Long.fromValue(d.chunkPayloadHistogramDef[i])).unsigned = false;
	                        else if (typeof d.chunkPayloadHistogramDef[i] === "string")
	                            m.chunkPayloadHistogramDef[i] = parseInt(d.chunkPayloadHistogramDef[i], 10);
	                        else if (typeof d.chunkPayloadHistogramDef[i] === "number")
	                            m.chunkPayloadHistogramDef[i] = d.chunkPayloadHistogramDef[i];
	                        else if (typeof d.chunkPayloadHistogramDef[i] === "object")
	                            m.chunkPayloadHistogramDef[i] = new $util.LongBits(d.chunkPayloadHistogramDef[i].low >>> 0, d.chunkPayloadHistogramDef[i].high >>> 0).toNumber();
	                    }
	                }
	                if (d.writerStats) {
	                    if (!Array.isArray(d.writerStats))
	                        throw TypeError(".perfetto.protos.TraceStats.writerStats: array expected");
	                    m.writerStats = [];
	                    for (var i = 0; i < d.writerStats.length; ++i) {
	                        if (typeof d.writerStats[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceStats.writerStats: object expected");
	                        m.writerStats[i] = $root.perfetto.protos.TraceStats.WriterStats.fromObject(d.writerStats[i]);
	                    }
	                }
	                if (d.producersConnected != null) {
	                    m.producersConnected = d.producersConnected >>> 0;
	                }
	                if (d.producersSeen != null) {
	                    if ($util.Long)
	                        (m.producersSeen = $util.Long.fromValue(d.producersSeen)).unsigned = true;
	                    else if (typeof d.producersSeen === "string")
	                        m.producersSeen = parseInt(d.producersSeen, 10);
	                    else if (typeof d.producersSeen === "number")
	                        m.producersSeen = d.producersSeen;
	                    else if (typeof d.producersSeen === "object")
	                        m.producersSeen = new $util.LongBits(d.producersSeen.low >>> 0, d.producersSeen.high >>> 0).toNumber(true);
	                }
	                if (d.dataSourcesRegistered != null) {
	                    m.dataSourcesRegistered = d.dataSourcesRegistered >>> 0;
	                }
	                if (d.dataSourcesSeen != null) {
	                    if ($util.Long)
	                        (m.dataSourcesSeen = $util.Long.fromValue(d.dataSourcesSeen)).unsigned = true;
	                    else if (typeof d.dataSourcesSeen === "string")
	                        m.dataSourcesSeen = parseInt(d.dataSourcesSeen, 10);
	                    else if (typeof d.dataSourcesSeen === "number")
	                        m.dataSourcesSeen = d.dataSourcesSeen;
	                    else if (typeof d.dataSourcesSeen === "object")
	                        m.dataSourcesSeen = new $util.LongBits(d.dataSourcesSeen.low >>> 0, d.dataSourcesSeen.high >>> 0).toNumber(true);
	                }
	                if (d.tracingSessions != null) {
	                    m.tracingSessions = d.tracingSessions >>> 0;
	                }
	                if (d.totalBuffers != null) {
	                    m.totalBuffers = d.totalBuffers >>> 0;
	                }
	                if (d.chunksDiscarded != null) {
	                    if ($util.Long)
	                        (m.chunksDiscarded = $util.Long.fromValue(d.chunksDiscarded)).unsigned = true;
	                    else if (typeof d.chunksDiscarded === "string")
	                        m.chunksDiscarded = parseInt(d.chunksDiscarded, 10);
	                    else if (typeof d.chunksDiscarded === "number")
	                        m.chunksDiscarded = d.chunksDiscarded;
	                    else if (typeof d.chunksDiscarded === "object")
	                        m.chunksDiscarded = new $util.LongBits(d.chunksDiscarded.low >>> 0, d.chunksDiscarded.high >>> 0).toNumber(true);
	                }
	                if (d.patchesDiscarded != null) {
	                    if ($util.Long)
	                        (m.patchesDiscarded = $util.Long.fromValue(d.patchesDiscarded)).unsigned = true;
	                    else if (typeof d.patchesDiscarded === "string")
	                        m.patchesDiscarded = parseInt(d.patchesDiscarded, 10);
	                    else if (typeof d.patchesDiscarded === "number")
	                        m.patchesDiscarded = d.patchesDiscarded;
	                    else if (typeof d.patchesDiscarded === "object")
	                        m.patchesDiscarded = new $util.LongBits(d.patchesDiscarded.low >>> 0, d.patchesDiscarded.high >>> 0).toNumber(true);
	                }
	                if (d.invalidPackets != null) {
	                    if ($util.Long)
	                        (m.invalidPackets = $util.Long.fromValue(d.invalidPackets)).unsigned = true;
	                    else if (typeof d.invalidPackets === "string")
	                        m.invalidPackets = parseInt(d.invalidPackets, 10);
	                    else if (typeof d.invalidPackets === "number")
	                        m.invalidPackets = d.invalidPackets;
	                    else if (typeof d.invalidPackets === "object")
	                        m.invalidPackets = new $util.LongBits(d.invalidPackets.low >>> 0, d.invalidPackets.high >>> 0).toNumber(true);
	                }
	                if (d.filterStats != null) {
	                    if (typeof d.filterStats !== "object")
	                        throw TypeError(".perfetto.protos.TraceStats.filterStats: object expected");
	                    m.filterStats = $root.perfetto.protos.TraceStats.FilterStats.fromObject(d.filterStats);
	                }
	                if (d.flushesRequested != null) {
	                    if ($util.Long)
	                        (m.flushesRequested = $util.Long.fromValue(d.flushesRequested)).unsigned = true;
	                    else if (typeof d.flushesRequested === "string")
	                        m.flushesRequested = parseInt(d.flushesRequested, 10);
	                    else if (typeof d.flushesRequested === "number")
	                        m.flushesRequested = d.flushesRequested;
	                    else if (typeof d.flushesRequested === "object")
	                        m.flushesRequested = new $util.LongBits(d.flushesRequested.low >>> 0, d.flushesRequested.high >>> 0).toNumber(true);
	                }
	                if (d.flushesSucceeded != null) {
	                    if ($util.Long)
	                        (m.flushesSucceeded = $util.Long.fromValue(d.flushesSucceeded)).unsigned = true;
	                    else if (typeof d.flushesSucceeded === "string")
	                        m.flushesSucceeded = parseInt(d.flushesSucceeded, 10);
	                    else if (typeof d.flushesSucceeded === "number")
	                        m.flushesSucceeded = d.flushesSucceeded;
	                    else if (typeof d.flushesSucceeded === "object")
	                        m.flushesSucceeded = new $util.LongBits(d.flushesSucceeded.low >>> 0, d.flushesSucceeded.high >>> 0).toNumber(true);
	                }
	                if (d.flushesFailed != null) {
	                    if ($util.Long)
	                        (m.flushesFailed = $util.Long.fromValue(d.flushesFailed)).unsigned = true;
	                    else if (typeof d.flushesFailed === "string")
	                        m.flushesFailed = parseInt(d.flushesFailed, 10);
	                    else if (typeof d.flushesFailed === "number")
	                        m.flushesFailed = d.flushesFailed;
	                    else if (typeof d.flushesFailed === "object")
	                        m.flushesFailed = new $util.LongBits(d.flushesFailed.low >>> 0, d.flushesFailed.high >>> 0).toNumber(true);
	                }
	                switch (d.finalFlushOutcome) {
	                default:
	                    if (typeof d.finalFlushOutcome === "number") {
	                        m.finalFlushOutcome = d.finalFlushOutcome;
	                        break;
	                    }
	                    break;
	                case "FINAL_FLUSH_UNSPECIFIED":
	                case 0:
	                    m.finalFlushOutcome = 0;
	                    break;
	                case "FINAL_FLUSH_SUCCEEDED":
	                case 1:
	                    m.finalFlushOutcome = 1;
	                    break;
	                case "FINAL_FLUSH_FAILED":
	                case 2:
	                    m.finalFlushOutcome = 2;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TraceStats message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TraceStats
	             * @static
	             * @param {perfetto.protos.TraceStats} m TraceStats
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TraceStats.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.bufferStats = [];
	                    d.chunkPayloadHistogramDef = [];
	                    d.writerStats = [];
	                }
	                if (o.defaults) {
	                    d.producersConnected = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.producersSeen = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.producersSeen = o.longs === String ? "0" : 0;
	                    d.dataSourcesRegistered = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.dataSourcesSeen = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.dataSourcesSeen = o.longs === String ? "0" : 0;
	                    d.tracingSessions = 0;
	                    d.totalBuffers = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.chunksDiscarded = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.chunksDiscarded = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.patchesDiscarded = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.patchesDiscarded = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.invalidPackets = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.invalidPackets = o.longs === String ? "0" : 0;
	                    d.filterStats = null;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.flushesRequested = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.flushesRequested = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.flushesSucceeded = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.flushesSucceeded = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.flushesFailed = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.flushesFailed = o.longs === String ? "0" : 0;
	                    d.finalFlushOutcome = o.enums === String ? "FINAL_FLUSH_UNSPECIFIED" : 0;
	                }
	                if (m.bufferStats && m.bufferStats.length) {
	                    d.bufferStats = [];
	                    for (var j = 0; j < m.bufferStats.length; ++j) {
	                        d.bufferStats[j] = $root.perfetto.protos.TraceStats.BufferStats.toObject(m.bufferStats[j], o);
	                    }
	                }
	                if (m.producersConnected != null && m.hasOwnProperty("producersConnected")) {
	                    d.producersConnected = m.producersConnected;
	                }
	                if (m.producersSeen != null && m.hasOwnProperty("producersSeen")) {
	                    if (typeof m.producersSeen === "number")
	                        d.producersSeen = o.longs === String ? String(m.producersSeen) : m.producersSeen;
	                    else
	                        d.producersSeen = o.longs === String ? $util.Long.prototype.toString.call(m.producersSeen) : o.longs === Number ? new $util.LongBits(m.producersSeen.low >>> 0, m.producersSeen.high >>> 0).toNumber(true) : m.producersSeen;
	                }
	                if (m.dataSourcesRegistered != null && m.hasOwnProperty("dataSourcesRegistered")) {
	                    d.dataSourcesRegistered = m.dataSourcesRegistered;
	                }
	                if (m.dataSourcesSeen != null && m.hasOwnProperty("dataSourcesSeen")) {
	                    if (typeof m.dataSourcesSeen === "number")
	                        d.dataSourcesSeen = o.longs === String ? String(m.dataSourcesSeen) : m.dataSourcesSeen;
	                    else
	                        d.dataSourcesSeen = o.longs === String ? $util.Long.prototype.toString.call(m.dataSourcesSeen) : o.longs === Number ? new $util.LongBits(m.dataSourcesSeen.low >>> 0, m.dataSourcesSeen.high >>> 0).toNumber(true) : m.dataSourcesSeen;
	                }
	                if (m.tracingSessions != null && m.hasOwnProperty("tracingSessions")) {
	                    d.tracingSessions = m.tracingSessions;
	                }
	                if (m.totalBuffers != null && m.hasOwnProperty("totalBuffers")) {
	                    d.totalBuffers = m.totalBuffers;
	                }
	                if (m.chunksDiscarded != null && m.hasOwnProperty("chunksDiscarded")) {
	                    if (typeof m.chunksDiscarded === "number")
	                        d.chunksDiscarded = o.longs === String ? String(m.chunksDiscarded) : m.chunksDiscarded;
	                    else
	                        d.chunksDiscarded = o.longs === String ? $util.Long.prototype.toString.call(m.chunksDiscarded) : o.longs === Number ? new $util.LongBits(m.chunksDiscarded.low >>> 0, m.chunksDiscarded.high >>> 0).toNumber(true) : m.chunksDiscarded;
	                }
	                if (m.patchesDiscarded != null && m.hasOwnProperty("patchesDiscarded")) {
	                    if (typeof m.patchesDiscarded === "number")
	                        d.patchesDiscarded = o.longs === String ? String(m.patchesDiscarded) : m.patchesDiscarded;
	                    else
	                        d.patchesDiscarded = o.longs === String ? $util.Long.prototype.toString.call(m.patchesDiscarded) : o.longs === Number ? new $util.LongBits(m.patchesDiscarded.low >>> 0, m.patchesDiscarded.high >>> 0).toNumber(true) : m.patchesDiscarded;
	                }
	                if (m.invalidPackets != null && m.hasOwnProperty("invalidPackets")) {
	                    if (typeof m.invalidPackets === "number")
	                        d.invalidPackets = o.longs === String ? String(m.invalidPackets) : m.invalidPackets;
	                    else
	                        d.invalidPackets = o.longs === String ? $util.Long.prototype.toString.call(m.invalidPackets) : o.longs === Number ? new $util.LongBits(m.invalidPackets.low >>> 0, m.invalidPackets.high >>> 0).toNumber(true) : m.invalidPackets;
	                }
	                if (m.filterStats != null && m.hasOwnProperty("filterStats")) {
	                    d.filterStats = $root.perfetto.protos.TraceStats.FilterStats.toObject(m.filterStats, o);
	                }
	                if (m.flushesRequested != null && m.hasOwnProperty("flushesRequested")) {
	                    if (typeof m.flushesRequested === "number")
	                        d.flushesRequested = o.longs === String ? String(m.flushesRequested) : m.flushesRequested;
	                    else
	                        d.flushesRequested = o.longs === String ? $util.Long.prototype.toString.call(m.flushesRequested) : o.longs === Number ? new $util.LongBits(m.flushesRequested.low >>> 0, m.flushesRequested.high >>> 0).toNumber(true) : m.flushesRequested;
	                }
	                if (m.flushesSucceeded != null && m.hasOwnProperty("flushesSucceeded")) {
	                    if (typeof m.flushesSucceeded === "number")
	                        d.flushesSucceeded = o.longs === String ? String(m.flushesSucceeded) : m.flushesSucceeded;
	                    else
	                        d.flushesSucceeded = o.longs === String ? $util.Long.prototype.toString.call(m.flushesSucceeded) : o.longs === Number ? new $util.LongBits(m.flushesSucceeded.low >>> 0, m.flushesSucceeded.high >>> 0).toNumber(true) : m.flushesSucceeded;
	                }
	                if (m.flushesFailed != null && m.hasOwnProperty("flushesFailed")) {
	                    if (typeof m.flushesFailed === "number")
	                        d.flushesFailed = o.longs === String ? String(m.flushesFailed) : m.flushesFailed;
	                    else
	                        d.flushesFailed = o.longs === String ? $util.Long.prototype.toString.call(m.flushesFailed) : o.longs === Number ? new $util.LongBits(m.flushesFailed.low >>> 0, m.flushesFailed.high >>> 0).toNumber(true) : m.flushesFailed;
	                }
	                if (m.finalFlushOutcome != null && m.hasOwnProperty("finalFlushOutcome")) {
	                    d.finalFlushOutcome = o.enums === String ? $root.perfetto.protos.TraceStats.FinalFlushOutcome[m.finalFlushOutcome] === undefined ? m.finalFlushOutcome : $root.perfetto.protos.TraceStats.FinalFlushOutcome[m.finalFlushOutcome] : m.finalFlushOutcome;
	                }
	                if (m.chunkPayloadHistogramDef && m.chunkPayloadHistogramDef.length) {
	                    d.chunkPayloadHistogramDef = [];
	                    for (var j = 0; j < m.chunkPayloadHistogramDef.length; ++j) {
	                        if (typeof m.chunkPayloadHistogramDef[j] === "number")
	                            d.chunkPayloadHistogramDef[j] = o.longs === String ? String(m.chunkPayloadHistogramDef[j]) : m.chunkPayloadHistogramDef[j];
	                        else
	                            d.chunkPayloadHistogramDef[j] = o.longs === String ? $util.Long.prototype.toString.call(m.chunkPayloadHistogramDef[j]) : o.longs === Number ? new $util.LongBits(m.chunkPayloadHistogramDef[j].low >>> 0, m.chunkPayloadHistogramDef[j].high >>> 0).toNumber() : m.chunkPayloadHistogramDef[j];
	                    }
	                }
	                if (m.writerStats && m.writerStats.length) {
	                    d.writerStats = [];
	                    for (var j = 0; j < m.writerStats.length; ++j) {
	                        d.writerStats[j] = $root.perfetto.protos.TraceStats.WriterStats.toObject(m.writerStats[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this TraceStats to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TraceStats
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TraceStats.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TraceStats
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TraceStats
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TraceStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TraceStats";
	            };

	            TraceStats.BufferStats = (function() {

	                /**
	                 * Properties of a BufferStats.
	                 * @memberof perfetto.protos.TraceStats
	                 * @interface IBufferStats
	                 * @property {number|null} [bufferSize] BufferStats bufferSize
	                 * @property {number|null} [bytesWritten] BufferStats bytesWritten
	                 * @property {number|null} [bytesOverwritten] BufferStats bytesOverwritten
	                 * @property {number|null} [bytesRead] BufferStats bytesRead
	                 * @property {number|null} [paddingBytesWritten] BufferStats paddingBytesWritten
	                 * @property {number|null} [paddingBytesCleared] BufferStats paddingBytesCleared
	                 * @property {number|null} [chunksWritten] BufferStats chunksWritten
	                 * @property {number|null} [chunksRewritten] BufferStats chunksRewritten
	                 * @property {number|null} [chunksOverwritten] BufferStats chunksOverwritten
	                 * @property {number|null} [chunksDiscarded] BufferStats chunksDiscarded
	                 * @property {number|null} [chunksRead] BufferStats chunksRead
	                 * @property {number|null} [chunksCommittedOutOfOrder] BufferStats chunksCommittedOutOfOrder
	                 * @property {number|null} [writeWrapCount] BufferStats writeWrapCount
	                 * @property {number|null} [patchesSucceeded] BufferStats patchesSucceeded
	                 * @property {number|null} [patchesFailed] BufferStats patchesFailed
	                 * @property {number|null} [readaheadsSucceeded] BufferStats readaheadsSucceeded
	                 * @property {number|null} [readaheadsFailed] BufferStats readaheadsFailed
	                 * @property {number|null} [abiViolations] BufferStats abiViolations
	                 * @property {number|null} [traceWriterPacketLoss] BufferStats traceWriterPacketLoss
	                 */

	                /**
	                 * Constructs a new BufferStats.
	                 * @memberof perfetto.protos.TraceStats
	                 * @classdesc Represents a BufferStats.
	                 * @implements IBufferStats
	                 * @constructor
	                 * @param {perfetto.protos.TraceStats.IBufferStats=} [p] Properties to set
	                 */
	                function BufferStats(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * BufferStats bufferSize.
	                 * @member {number} bufferSize
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.bufferSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats bytesWritten.
	                 * @member {number} bytesWritten
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.bytesWritten = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats bytesOverwritten.
	                 * @member {number} bytesOverwritten
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.bytesOverwritten = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats bytesRead.
	                 * @member {number} bytesRead
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.bytesRead = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats paddingBytesWritten.
	                 * @member {number} paddingBytesWritten
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.paddingBytesWritten = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats paddingBytesCleared.
	                 * @member {number} paddingBytesCleared
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.paddingBytesCleared = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats chunksWritten.
	                 * @member {number} chunksWritten
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.chunksWritten = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats chunksRewritten.
	                 * @member {number} chunksRewritten
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.chunksRewritten = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats chunksOverwritten.
	                 * @member {number} chunksOverwritten
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.chunksOverwritten = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats chunksDiscarded.
	                 * @member {number} chunksDiscarded
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.chunksDiscarded = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats chunksRead.
	                 * @member {number} chunksRead
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.chunksRead = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats chunksCommittedOutOfOrder.
	                 * @member {number} chunksCommittedOutOfOrder
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.chunksCommittedOutOfOrder = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats writeWrapCount.
	                 * @member {number} writeWrapCount
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.writeWrapCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats patchesSucceeded.
	                 * @member {number} patchesSucceeded
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.patchesSucceeded = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats patchesFailed.
	                 * @member {number} patchesFailed
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.patchesFailed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats readaheadsSucceeded.
	                 * @member {number} readaheadsSucceeded
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.readaheadsSucceeded = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats readaheadsFailed.
	                 * @member {number} readaheadsFailed
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.readaheadsFailed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats abiViolations.
	                 * @member {number} abiViolations
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.abiViolations = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * BufferStats traceWriterPacketLoss.
	                 * @member {number} traceWriterPacketLoss
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 */
	                BufferStats.prototype.traceWriterPacketLoss = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * Creates a new BufferStats instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.IBufferStats=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceStats.BufferStats} BufferStats instance
	                 */
	                BufferStats.create = function create(properties) {
	                    return new BufferStats(properties);
	                };

	                /**
	                 * Encodes the specified BufferStats message. Does not implicitly {@link perfetto.protos.TraceStats.BufferStats.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.IBufferStats} m BufferStats message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                BufferStats.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.bytesWritten != null && Object.hasOwnProperty.call(m, "bytesWritten"))
	                        w.uint32(8).uint64(m.bytesWritten);
	                    if (m.chunksWritten != null && Object.hasOwnProperty.call(m, "chunksWritten"))
	                        w.uint32(16).uint64(m.chunksWritten);
	                    if (m.chunksOverwritten != null && Object.hasOwnProperty.call(m, "chunksOverwritten"))
	                        w.uint32(24).uint64(m.chunksOverwritten);
	                    if (m.writeWrapCount != null && Object.hasOwnProperty.call(m, "writeWrapCount"))
	                        w.uint32(32).uint64(m.writeWrapCount);
	                    if (m.patchesSucceeded != null && Object.hasOwnProperty.call(m, "patchesSucceeded"))
	                        w.uint32(40).uint64(m.patchesSucceeded);
	                    if (m.patchesFailed != null && Object.hasOwnProperty.call(m, "patchesFailed"))
	                        w.uint32(48).uint64(m.patchesFailed);
	                    if (m.readaheadsSucceeded != null && Object.hasOwnProperty.call(m, "readaheadsSucceeded"))
	                        w.uint32(56).uint64(m.readaheadsSucceeded);
	                    if (m.readaheadsFailed != null && Object.hasOwnProperty.call(m, "readaheadsFailed"))
	                        w.uint32(64).uint64(m.readaheadsFailed);
	                    if (m.abiViolations != null && Object.hasOwnProperty.call(m, "abiViolations"))
	                        w.uint32(72).uint64(m.abiViolations);
	                    if (m.chunksRewritten != null && Object.hasOwnProperty.call(m, "chunksRewritten"))
	                        w.uint32(80).uint64(m.chunksRewritten);
	                    if (m.chunksCommittedOutOfOrder != null && Object.hasOwnProperty.call(m, "chunksCommittedOutOfOrder"))
	                        w.uint32(88).uint64(m.chunksCommittedOutOfOrder);
	                    if (m.bufferSize != null && Object.hasOwnProperty.call(m, "bufferSize"))
	                        w.uint32(96).uint64(m.bufferSize);
	                    if (m.bytesOverwritten != null && Object.hasOwnProperty.call(m, "bytesOverwritten"))
	                        w.uint32(104).uint64(m.bytesOverwritten);
	                    if (m.bytesRead != null && Object.hasOwnProperty.call(m, "bytesRead"))
	                        w.uint32(112).uint64(m.bytesRead);
	                    if (m.paddingBytesWritten != null && Object.hasOwnProperty.call(m, "paddingBytesWritten"))
	                        w.uint32(120).uint64(m.paddingBytesWritten);
	                    if (m.paddingBytesCleared != null && Object.hasOwnProperty.call(m, "paddingBytesCleared"))
	                        w.uint32(128).uint64(m.paddingBytesCleared);
	                    if (m.chunksRead != null && Object.hasOwnProperty.call(m, "chunksRead"))
	                        w.uint32(136).uint64(m.chunksRead);
	                    if (m.chunksDiscarded != null && Object.hasOwnProperty.call(m, "chunksDiscarded"))
	                        w.uint32(144).uint64(m.chunksDiscarded);
	                    if (m.traceWriterPacketLoss != null && Object.hasOwnProperty.call(m, "traceWriterPacketLoss"))
	                        w.uint32(152).uint64(m.traceWriterPacketLoss);
	                    return w;
	                };

	                /**
	                 * Decodes a BufferStats message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceStats.BufferStats} BufferStats
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                BufferStats.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceStats.BufferStats();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 12: {
	                                m.bufferSize = r.uint64();
	                                break;
	                            }
	                        case 1: {
	                                m.bytesWritten = r.uint64();
	                                break;
	                            }
	                        case 13: {
	                                m.bytesOverwritten = r.uint64();
	                                break;
	                            }
	                        case 14: {
	                                m.bytesRead = r.uint64();
	                                break;
	                            }
	                        case 15: {
	                                m.paddingBytesWritten = r.uint64();
	                                break;
	                            }
	                        case 16: {
	                                m.paddingBytesCleared = r.uint64();
	                                break;
	                            }
	                        case 2: {
	                                m.chunksWritten = r.uint64();
	                                break;
	                            }
	                        case 10: {
	                                m.chunksRewritten = r.uint64();
	                                break;
	                            }
	                        case 3: {
	                                m.chunksOverwritten = r.uint64();
	                                break;
	                            }
	                        case 18: {
	                                m.chunksDiscarded = r.uint64();
	                                break;
	                            }
	                        case 17: {
	                                m.chunksRead = r.uint64();
	                                break;
	                            }
	                        case 11: {
	                                m.chunksCommittedOutOfOrder = r.uint64();
	                                break;
	                            }
	                        case 4: {
	                                m.writeWrapCount = r.uint64();
	                                break;
	                            }
	                        case 5: {
	                                m.patchesSucceeded = r.uint64();
	                                break;
	                            }
	                        case 6: {
	                                m.patchesFailed = r.uint64();
	                                break;
	                            }
	                        case 7: {
	                                m.readaheadsSucceeded = r.uint64();
	                                break;
	                            }
	                        case 8: {
	                                m.readaheadsFailed = r.uint64();
	                                break;
	                            }
	                        case 9: {
	                                m.abiViolations = r.uint64();
	                                break;
	                            }
	                        case 19: {
	                                m.traceWriterPacketLoss = r.uint64();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a BufferStats message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceStats.BufferStats} BufferStats
	                 */
	                BufferStats.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceStats.BufferStats)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceStats.BufferStats();
	                    if (d.bufferSize != null) {
	                        if ($util.Long)
	                            (m.bufferSize = $util.Long.fromValue(d.bufferSize)).unsigned = true;
	                        else if (typeof d.bufferSize === "string")
	                            m.bufferSize = parseInt(d.bufferSize, 10);
	                        else if (typeof d.bufferSize === "number")
	                            m.bufferSize = d.bufferSize;
	                        else if (typeof d.bufferSize === "object")
	                            m.bufferSize = new $util.LongBits(d.bufferSize.low >>> 0, d.bufferSize.high >>> 0).toNumber(true);
	                    }
	                    if (d.bytesWritten != null) {
	                        if ($util.Long)
	                            (m.bytesWritten = $util.Long.fromValue(d.bytesWritten)).unsigned = true;
	                        else if (typeof d.bytesWritten === "string")
	                            m.bytesWritten = parseInt(d.bytesWritten, 10);
	                        else if (typeof d.bytesWritten === "number")
	                            m.bytesWritten = d.bytesWritten;
	                        else if (typeof d.bytesWritten === "object")
	                            m.bytesWritten = new $util.LongBits(d.bytesWritten.low >>> 0, d.bytesWritten.high >>> 0).toNumber(true);
	                    }
	                    if (d.bytesOverwritten != null) {
	                        if ($util.Long)
	                            (m.bytesOverwritten = $util.Long.fromValue(d.bytesOverwritten)).unsigned = true;
	                        else if (typeof d.bytesOverwritten === "string")
	                            m.bytesOverwritten = parseInt(d.bytesOverwritten, 10);
	                        else if (typeof d.bytesOverwritten === "number")
	                            m.bytesOverwritten = d.bytesOverwritten;
	                        else if (typeof d.bytesOverwritten === "object")
	                            m.bytesOverwritten = new $util.LongBits(d.bytesOverwritten.low >>> 0, d.bytesOverwritten.high >>> 0).toNumber(true);
	                    }
	                    if (d.bytesRead != null) {
	                        if ($util.Long)
	                            (m.bytesRead = $util.Long.fromValue(d.bytesRead)).unsigned = true;
	                        else if (typeof d.bytesRead === "string")
	                            m.bytesRead = parseInt(d.bytesRead, 10);
	                        else if (typeof d.bytesRead === "number")
	                            m.bytesRead = d.bytesRead;
	                        else if (typeof d.bytesRead === "object")
	                            m.bytesRead = new $util.LongBits(d.bytesRead.low >>> 0, d.bytesRead.high >>> 0).toNumber(true);
	                    }
	                    if (d.paddingBytesWritten != null) {
	                        if ($util.Long)
	                            (m.paddingBytesWritten = $util.Long.fromValue(d.paddingBytesWritten)).unsigned = true;
	                        else if (typeof d.paddingBytesWritten === "string")
	                            m.paddingBytesWritten = parseInt(d.paddingBytesWritten, 10);
	                        else if (typeof d.paddingBytesWritten === "number")
	                            m.paddingBytesWritten = d.paddingBytesWritten;
	                        else if (typeof d.paddingBytesWritten === "object")
	                            m.paddingBytesWritten = new $util.LongBits(d.paddingBytesWritten.low >>> 0, d.paddingBytesWritten.high >>> 0).toNumber(true);
	                    }
	                    if (d.paddingBytesCleared != null) {
	                        if ($util.Long)
	                            (m.paddingBytesCleared = $util.Long.fromValue(d.paddingBytesCleared)).unsigned = true;
	                        else if (typeof d.paddingBytesCleared === "string")
	                            m.paddingBytesCleared = parseInt(d.paddingBytesCleared, 10);
	                        else if (typeof d.paddingBytesCleared === "number")
	                            m.paddingBytesCleared = d.paddingBytesCleared;
	                        else if (typeof d.paddingBytesCleared === "object")
	                            m.paddingBytesCleared = new $util.LongBits(d.paddingBytesCleared.low >>> 0, d.paddingBytesCleared.high >>> 0).toNumber(true);
	                    }
	                    if (d.chunksWritten != null) {
	                        if ($util.Long)
	                            (m.chunksWritten = $util.Long.fromValue(d.chunksWritten)).unsigned = true;
	                        else if (typeof d.chunksWritten === "string")
	                            m.chunksWritten = parseInt(d.chunksWritten, 10);
	                        else if (typeof d.chunksWritten === "number")
	                            m.chunksWritten = d.chunksWritten;
	                        else if (typeof d.chunksWritten === "object")
	                            m.chunksWritten = new $util.LongBits(d.chunksWritten.low >>> 0, d.chunksWritten.high >>> 0).toNumber(true);
	                    }
	                    if (d.chunksRewritten != null) {
	                        if ($util.Long)
	                            (m.chunksRewritten = $util.Long.fromValue(d.chunksRewritten)).unsigned = true;
	                        else if (typeof d.chunksRewritten === "string")
	                            m.chunksRewritten = parseInt(d.chunksRewritten, 10);
	                        else if (typeof d.chunksRewritten === "number")
	                            m.chunksRewritten = d.chunksRewritten;
	                        else if (typeof d.chunksRewritten === "object")
	                            m.chunksRewritten = new $util.LongBits(d.chunksRewritten.low >>> 0, d.chunksRewritten.high >>> 0).toNumber(true);
	                    }
	                    if (d.chunksOverwritten != null) {
	                        if ($util.Long)
	                            (m.chunksOverwritten = $util.Long.fromValue(d.chunksOverwritten)).unsigned = true;
	                        else if (typeof d.chunksOverwritten === "string")
	                            m.chunksOverwritten = parseInt(d.chunksOverwritten, 10);
	                        else if (typeof d.chunksOverwritten === "number")
	                            m.chunksOverwritten = d.chunksOverwritten;
	                        else if (typeof d.chunksOverwritten === "object")
	                            m.chunksOverwritten = new $util.LongBits(d.chunksOverwritten.low >>> 0, d.chunksOverwritten.high >>> 0).toNumber(true);
	                    }
	                    if (d.chunksDiscarded != null) {
	                        if ($util.Long)
	                            (m.chunksDiscarded = $util.Long.fromValue(d.chunksDiscarded)).unsigned = true;
	                        else if (typeof d.chunksDiscarded === "string")
	                            m.chunksDiscarded = parseInt(d.chunksDiscarded, 10);
	                        else if (typeof d.chunksDiscarded === "number")
	                            m.chunksDiscarded = d.chunksDiscarded;
	                        else if (typeof d.chunksDiscarded === "object")
	                            m.chunksDiscarded = new $util.LongBits(d.chunksDiscarded.low >>> 0, d.chunksDiscarded.high >>> 0).toNumber(true);
	                    }
	                    if (d.chunksRead != null) {
	                        if ($util.Long)
	                            (m.chunksRead = $util.Long.fromValue(d.chunksRead)).unsigned = true;
	                        else if (typeof d.chunksRead === "string")
	                            m.chunksRead = parseInt(d.chunksRead, 10);
	                        else if (typeof d.chunksRead === "number")
	                            m.chunksRead = d.chunksRead;
	                        else if (typeof d.chunksRead === "object")
	                            m.chunksRead = new $util.LongBits(d.chunksRead.low >>> 0, d.chunksRead.high >>> 0).toNumber(true);
	                    }
	                    if (d.chunksCommittedOutOfOrder != null) {
	                        if ($util.Long)
	                            (m.chunksCommittedOutOfOrder = $util.Long.fromValue(d.chunksCommittedOutOfOrder)).unsigned = true;
	                        else if (typeof d.chunksCommittedOutOfOrder === "string")
	                            m.chunksCommittedOutOfOrder = parseInt(d.chunksCommittedOutOfOrder, 10);
	                        else if (typeof d.chunksCommittedOutOfOrder === "number")
	                            m.chunksCommittedOutOfOrder = d.chunksCommittedOutOfOrder;
	                        else if (typeof d.chunksCommittedOutOfOrder === "object")
	                            m.chunksCommittedOutOfOrder = new $util.LongBits(d.chunksCommittedOutOfOrder.low >>> 0, d.chunksCommittedOutOfOrder.high >>> 0).toNumber(true);
	                    }
	                    if (d.writeWrapCount != null) {
	                        if ($util.Long)
	                            (m.writeWrapCount = $util.Long.fromValue(d.writeWrapCount)).unsigned = true;
	                        else if (typeof d.writeWrapCount === "string")
	                            m.writeWrapCount = parseInt(d.writeWrapCount, 10);
	                        else if (typeof d.writeWrapCount === "number")
	                            m.writeWrapCount = d.writeWrapCount;
	                        else if (typeof d.writeWrapCount === "object")
	                            m.writeWrapCount = new $util.LongBits(d.writeWrapCount.low >>> 0, d.writeWrapCount.high >>> 0).toNumber(true);
	                    }
	                    if (d.patchesSucceeded != null) {
	                        if ($util.Long)
	                            (m.patchesSucceeded = $util.Long.fromValue(d.patchesSucceeded)).unsigned = true;
	                        else if (typeof d.patchesSucceeded === "string")
	                            m.patchesSucceeded = parseInt(d.patchesSucceeded, 10);
	                        else if (typeof d.patchesSucceeded === "number")
	                            m.patchesSucceeded = d.patchesSucceeded;
	                        else if (typeof d.patchesSucceeded === "object")
	                            m.patchesSucceeded = new $util.LongBits(d.patchesSucceeded.low >>> 0, d.patchesSucceeded.high >>> 0).toNumber(true);
	                    }
	                    if (d.patchesFailed != null) {
	                        if ($util.Long)
	                            (m.patchesFailed = $util.Long.fromValue(d.patchesFailed)).unsigned = true;
	                        else if (typeof d.patchesFailed === "string")
	                            m.patchesFailed = parseInt(d.patchesFailed, 10);
	                        else if (typeof d.patchesFailed === "number")
	                            m.patchesFailed = d.patchesFailed;
	                        else if (typeof d.patchesFailed === "object")
	                            m.patchesFailed = new $util.LongBits(d.patchesFailed.low >>> 0, d.patchesFailed.high >>> 0).toNumber(true);
	                    }
	                    if (d.readaheadsSucceeded != null) {
	                        if ($util.Long)
	                            (m.readaheadsSucceeded = $util.Long.fromValue(d.readaheadsSucceeded)).unsigned = true;
	                        else if (typeof d.readaheadsSucceeded === "string")
	                            m.readaheadsSucceeded = parseInt(d.readaheadsSucceeded, 10);
	                        else if (typeof d.readaheadsSucceeded === "number")
	                            m.readaheadsSucceeded = d.readaheadsSucceeded;
	                        else if (typeof d.readaheadsSucceeded === "object")
	                            m.readaheadsSucceeded = new $util.LongBits(d.readaheadsSucceeded.low >>> 0, d.readaheadsSucceeded.high >>> 0).toNumber(true);
	                    }
	                    if (d.readaheadsFailed != null) {
	                        if ($util.Long)
	                            (m.readaheadsFailed = $util.Long.fromValue(d.readaheadsFailed)).unsigned = true;
	                        else if (typeof d.readaheadsFailed === "string")
	                            m.readaheadsFailed = parseInt(d.readaheadsFailed, 10);
	                        else if (typeof d.readaheadsFailed === "number")
	                            m.readaheadsFailed = d.readaheadsFailed;
	                        else if (typeof d.readaheadsFailed === "object")
	                            m.readaheadsFailed = new $util.LongBits(d.readaheadsFailed.low >>> 0, d.readaheadsFailed.high >>> 0).toNumber(true);
	                    }
	                    if (d.abiViolations != null) {
	                        if ($util.Long)
	                            (m.abiViolations = $util.Long.fromValue(d.abiViolations)).unsigned = true;
	                        else if (typeof d.abiViolations === "string")
	                            m.abiViolations = parseInt(d.abiViolations, 10);
	                        else if (typeof d.abiViolations === "number")
	                            m.abiViolations = d.abiViolations;
	                        else if (typeof d.abiViolations === "object")
	                            m.abiViolations = new $util.LongBits(d.abiViolations.low >>> 0, d.abiViolations.high >>> 0).toNumber(true);
	                    }
	                    if (d.traceWriterPacketLoss != null) {
	                        if ($util.Long)
	                            (m.traceWriterPacketLoss = $util.Long.fromValue(d.traceWriterPacketLoss)).unsigned = true;
	                        else if (typeof d.traceWriterPacketLoss === "string")
	                            m.traceWriterPacketLoss = parseInt(d.traceWriterPacketLoss, 10);
	                        else if (typeof d.traceWriterPacketLoss === "number")
	                            m.traceWriterPacketLoss = d.traceWriterPacketLoss;
	                        else if (typeof d.traceWriterPacketLoss === "object")
	                            m.traceWriterPacketLoss = new $util.LongBits(d.traceWriterPacketLoss.low >>> 0, d.traceWriterPacketLoss.high >>> 0).toNumber(true);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a BufferStats message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.BufferStats} m BufferStats
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                BufferStats.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.bytesWritten = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.bytesWritten = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.chunksWritten = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.chunksWritten = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.chunksOverwritten = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.chunksOverwritten = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.writeWrapCount = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.writeWrapCount = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.patchesSucceeded = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.patchesSucceeded = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.patchesFailed = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.patchesFailed = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.readaheadsSucceeded = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.readaheadsSucceeded = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.readaheadsFailed = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.readaheadsFailed = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.abiViolations = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.abiViolations = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.chunksRewritten = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.chunksRewritten = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.chunksCommittedOutOfOrder = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.chunksCommittedOutOfOrder = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.bufferSize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.bufferSize = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.bytesOverwritten = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.bytesOverwritten = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.bytesRead = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.bytesRead = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.paddingBytesWritten = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.paddingBytesWritten = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.paddingBytesCleared = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.paddingBytesCleared = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.chunksRead = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.chunksRead = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.chunksDiscarded = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.chunksDiscarded = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.traceWriterPacketLoss = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.traceWriterPacketLoss = o.longs === String ? "0" : 0;
	                    }
	                    if (m.bytesWritten != null && m.hasOwnProperty("bytesWritten")) {
	                        if (typeof m.bytesWritten === "number")
	                            d.bytesWritten = o.longs === String ? String(m.bytesWritten) : m.bytesWritten;
	                        else
	                            d.bytesWritten = o.longs === String ? $util.Long.prototype.toString.call(m.bytesWritten) : o.longs === Number ? new $util.LongBits(m.bytesWritten.low >>> 0, m.bytesWritten.high >>> 0).toNumber(true) : m.bytesWritten;
	                    }
	                    if (m.chunksWritten != null && m.hasOwnProperty("chunksWritten")) {
	                        if (typeof m.chunksWritten === "number")
	                            d.chunksWritten = o.longs === String ? String(m.chunksWritten) : m.chunksWritten;
	                        else
	                            d.chunksWritten = o.longs === String ? $util.Long.prototype.toString.call(m.chunksWritten) : o.longs === Number ? new $util.LongBits(m.chunksWritten.low >>> 0, m.chunksWritten.high >>> 0).toNumber(true) : m.chunksWritten;
	                    }
	                    if (m.chunksOverwritten != null && m.hasOwnProperty("chunksOverwritten")) {
	                        if (typeof m.chunksOverwritten === "number")
	                            d.chunksOverwritten = o.longs === String ? String(m.chunksOverwritten) : m.chunksOverwritten;
	                        else
	                            d.chunksOverwritten = o.longs === String ? $util.Long.prototype.toString.call(m.chunksOverwritten) : o.longs === Number ? new $util.LongBits(m.chunksOverwritten.low >>> 0, m.chunksOverwritten.high >>> 0).toNumber(true) : m.chunksOverwritten;
	                    }
	                    if (m.writeWrapCount != null && m.hasOwnProperty("writeWrapCount")) {
	                        if (typeof m.writeWrapCount === "number")
	                            d.writeWrapCount = o.longs === String ? String(m.writeWrapCount) : m.writeWrapCount;
	                        else
	                            d.writeWrapCount = o.longs === String ? $util.Long.prototype.toString.call(m.writeWrapCount) : o.longs === Number ? new $util.LongBits(m.writeWrapCount.low >>> 0, m.writeWrapCount.high >>> 0).toNumber(true) : m.writeWrapCount;
	                    }
	                    if (m.patchesSucceeded != null && m.hasOwnProperty("patchesSucceeded")) {
	                        if (typeof m.patchesSucceeded === "number")
	                            d.patchesSucceeded = o.longs === String ? String(m.patchesSucceeded) : m.patchesSucceeded;
	                        else
	                            d.patchesSucceeded = o.longs === String ? $util.Long.prototype.toString.call(m.patchesSucceeded) : o.longs === Number ? new $util.LongBits(m.patchesSucceeded.low >>> 0, m.patchesSucceeded.high >>> 0).toNumber(true) : m.patchesSucceeded;
	                    }
	                    if (m.patchesFailed != null && m.hasOwnProperty("patchesFailed")) {
	                        if (typeof m.patchesFailed === "number")
	                            d.patchesFailed = o.longs === String ? String(m.patchesFailed) : m.patchesFailed;
	                        else
	                            d.patchesFailed = o.longs === String ? $util.Long.prototype.toString.call(m.patchesFailed) : o.longs === Number ? new $util.LongBits(m.patchesFailed.low >>> 0, m.patchesFailed.high >>> 0).toNumber(true) : m.patchesFailed;
	                    }
	                    if (m.readaheadsSucceeded != null && m.hasOwnProperty("readaheadsSucceeded")) {
	                        if (typeof m.readaheadsSucceeded === "number")
	                            d.readaheadsSucceeded = o.longs === String ? String(m.readaheadsSucceeded) : m.readaheadsSucceeded;
	                        else
	                            d.readaheadsSucceeded = o.longs === String ? $util.Long.prototype.toString.call(m.readaheadsSucceeded) : o.longs === Number ? new $util.LongBits(m.readaheadsSucceeded.low >>> 0, m.readaheadsSucceeded.high >>> 0).toNumber(true) : m.readaheadsSucceeded;
	                    }
	                    if (m.readaheadsFailed != null && m.hasOwnProperty("readaheadsFailed")) {
	                        if (typeof m.readaheadsFailed === "number")
	                            d.readaheadsFailed = o.longs === String ? String(m.readaheadsFailed) : m.readaheadsFailed;
	                        else
	                            d.readaheadsFailed = o.longs === String ? $util.Long.prototype.toString.call(m.readaheadsFailed) : o.longs === Number ? new $util.LongBits(m.readaheadsFailed.low >>> 0, m.readaheadsFailed.high >>> 0).toNumber(true) : m.readaheadsFailed;
	                    }
	                    if (m.abiViolations != null && m.hasOwnProperty("abiViolations")) {
	                        if (typeof m.abiViolations === "number")
	                            d.abiViolations = o.longs === String ? String(m.abiViolations) : m.abiViolations;
	                        else
	                            d.abiViolations = o.longs === String ? $util.Long.prototype.toString.call(m.abiViolations) : o.longs === Number ? new $util.LongBits(m.abiViolations.low >>> 0, m.abiViolations.high >>> 0).toNumber(true) : m.abiViolations;
	                    }
	                    if (m.chunksRewritten != null && m.hasOwnProperty("chunksRewritten")) {
	                        if (typeof m.chunksRewritten === "number")
	                            d.chunksRewritten = o.longs === String ? String(m.chunksRewritten) : m.chunksRewritten;
	                        else
	                            d.chunksRewritten = o.longs === String ? $util.Long.prototype.toString.call(m.chunksRewritten) : o.longs === Number ? new $util.LongBits(m.chunksRewritten.low >>> 0, m.chunksRewritten.high >>> 0).toNumber(true) : m.chunksRewritten;
	                    }
	                    if (m.chunksCommittedOutOfOrder != null && m.hasOwnProperty("chunksCommittedOutOfOrder")) {
	                        if (typeof m.chunksCommittedOutOfOrder === "number")
	                            d.chunksCommittedOutOfOrder = o.longs === String ? String(m.chunksCommittedOutOfOrder) : m.chunksCommittedOutOfOrder;
	                        else
	                            d.chunksCommittedOutOfOrder = o.longs === String ? $util.Long.prototype.toString.call(m.chunksCommittedOutOfOrder) : o.longs === Number ? new $util.LongBits(m.chunksCommittedOutOfOrder.low >>> 0, m.chunksCommittedOutOfOrder.high >>> 0).toNumber(true) : m.chunksCommittedOutOfOrder;
	                    }
	                    if (m.bufferSize != null && m.hasOwnProperty("bufferSize")) {
	                        if (typeof m.bufferSize === "number")
	                            d.bufferSize = o.longs === String ? String(m.bufferSize) : m.bufferSize;
	                        else
	                            d.bufferSize = o.longs === String ? $util.Long.prototype.toString.call(m.bufferSize) : o.longs === Number ? new $util.LongBits(m.bufferSize.low >>> 0, m.bufferSize.high >>> 0).toNumber(true) : m.bufferSize;
	                    }
	                    if (m.bytesOverwritten != null && m.hasOwnProperty("bytesOverwritten")) {
	                        if (typeof m.bytesOverwritten === "number")
	                            d.bytesOverwritten = o.longs === String ? String(m.bytesOverwritten) : m.bytesOverwritten;
	                        else
	                            d.bytesOverwritten = o.longs === String ? $util.Long.prototype.toString.call(m.bytesOverwritten) : o.longs === Number ? new $util.LongBits(m.bytesOverwritten.low >>> 0, m.bytesOverwritten.high >>> 0).toNumber(true) : m.bytesOverwritten;
	                    }
	                    if (m.bytesRead != null && m.hasOwnProperty("bytesRead")) {
	                        if (typeof m.bytesRead === "number")
	                            d.bytesRead = o.longs === String ? String(m.bytesRead) : m.bytesRead;
	                        else
	                            d.bytesRead = o.longs === String ? $util.Long.prototype.toString.call(m.bytesRead) : o.longs === Number ? new $util.LongBits(m.bytesRead.low >>> 0, m.bytesRead.high >>> 0).toNumber(true) : m.bytesRead;
	                    }
	                    if (m.paddingBytesWritten != null && m.hasOwnProperty("paddingBytesWritten")) {
	                        if (typeof m.paddingBytesWritten === "number")
	                            d.paddingBytesWritten = o.longs === String ? String(m.paddingBytesWritten) : m.paddingBytesWritten;
	                        else
	                            d.paddingBytesWritten = o.longs === String ? $util.Long.prototype.toString.call(m.paddingBytesWritten) : o.longs === Number ? new $util.LongBits(m.paddingBytesWritten.low >>> 0, m.paddingBytesWritten.high >>> 0).toNumber(true) : m.paddingBytesWritten;
	                    }
	                    if (m.paddingBytesCleared != null && m.hasOwnProperty("paddingBytesCleared")) {
	                        if (typeof m.paddingBytesCleared === "number")
	                            d.paddingBytesCleared = o.longs === String ? String(m.paddingBytesCleared) : m.paddingBytesCleared;
	                        else
	                            d.paddingBytesCleared = o.longs === String ? $util.Long.prototype.toString.call(m.paddingBytesCleared) : o.longs === Number ? new $util.LongBits(m.paddingBytesCleared.low >>> 0, m.paddingBytesCleared.high >>> 0).toNumber(true) : m.paddingBytesCleared;
	                    }
	                    if (m.chunksRead != null && m.hasOwnProperty("chunksRead")) {
	                        if (typeof m.chunksRead === "number")
	                            d.chunksRead = o.longs === String ? String(m.chunksRead) : m.chunksRead;
	                        else
	                            d.chunksRead = o.longs === String ? $util.Long.prototype.toString.call(m.chunksRead) : o.longs === Number ? new $util.LongBits(m.chunksRead.low >>> 0, m.chunksRead.high >>> 0).toNumber(true) : m.chunksRead;
	                    }
	                    if (m.chunksDiscarded != null && m.hasOwnProperty("chunksDiscarded")) {
	                        if (typeof m.chunksDiscarded === "number")
	                            d.chunksDiscarded = o.longs === String ? String(m.chunksDiscarded) : m.chunksDiscarded;
	                        else
	                            d.chunksDiscarded = o.longs === String ? $util.Long.prototype.toString.call(m.chunksDiscarded) : o.longs === Number ? new $util.LongBits(m.chunksDiscarded.low >>> 0, m.chunksDiscarded.high >>> 0).toNumber(true) : m.chunksDiscarded;
	                    }
	                    if (m.traceWriterPacketLoss != null && m.hasOwnProperty("traceWriterPacketLoss")) {
	                        if (typeof m.traceWriterPacketLoss === "number")
	                            d.traceWriterPacketLoss = o.longs === String ? String(m.traceWriterPacketLoss) : m.traceWriterPacketLoss;
	                        else
	                            d.traceWriterPacketLoss = o.longs === String ? $util.Long.prototype.toString.call(m.traceWriterPacketLoss) : o.longs === Number ? new $util.LongBits(m.traceWriterPacketLoss.low >>> 0, m.traceWriterPacketLoss.high >>> 0).toNumber(true) : m.traceWriterPacketLoss;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this BufferStats to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                BufferStats.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for BufferStats
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceStats.BufferStats
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                BufferStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceStats.BufferStats";
	                };

	                return BufferStats;
	            })();

	            TraceStats.WriterStats = (function() {

	                /**
	                 * Properties of a WriterStats.
	                 * @memberof perfetto.protos.TraceStats
	                 * @interface IWriterStats
	                 * @property {number|null} [sequenceId] WriterStats sequenceId
	                 * @property {number|null} [buffer] WriterStats buffer
	                 * @property {Array.<number>|null} [chunkPayloadHistogramCounts] WriterStats chunkPayloadHistogramCounts
	                 * @property {Array.<number>|null} [chunkPayloadHistogramSum] WriterStats chunkPayloadHistogramSum
	                 */

	                /**
	                 * Constructs a new WriterStats.
	                 * @memberof perfetto.protos.TraceStats
	                 * @classdesc Represents a WriterStats.
	                 * @implements IWriterStats
	                 * @constructor
	                 * @param {perfetto.protos.TraceStats.IWriterStats=} [p] Properties to set
	                 */
	                function WriterStats(p) {
	                    this.chunkPayloadHistogramCounts = [];
	                    this.chunkPayloadHistogramSum = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * WriterStats sequenceId.
	                 * @member {number} sequenceId
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @instance
	                 */
	                WriterStats.prototype.sequenceId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * WriterStats buffer.
	                 * @member {number} buffer
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @instance
	                 */
	                WriterStats.prototype.buffer = 0;

	                /**
	                 * WriterStats chunkPayloadHistogramCounts.
	                 * @member {Array.<number>} chunkPayloadHistogramCounts
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @instance
	                 */
	                WriterStats.prototype.chunkPayloadHistogramCounts = $util.emptyArray;

	                /**
	                 * WriterStats chunkPayloadHistogramSum.
	                 * @member {Array.<number>} chunkPayloadHistogramSum
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @instance
	                 */
	                WriterStats.prototype.chunkPayloadHistogramSum = $util.emptyArray;

	                /**
	                 * Creates a new WriterStats instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.IWriterStats=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceStats.WriterStats} WriterStats instance
	                 */
	                WriterStats.create = function create(properties) {
	                    return new WriterStats(properties);
	                };

	                /**
	                 * Encodes the specified WriterStats message. Does not implicitly {@link perfetto.protos.TraceStats.WriterStats.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.IWriterStats} m WriterStats message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                WriterStats.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.sequenceId != null && Object.hasOwnProperty.call(m, "sequenceId"))
	                        w.uint32(8).uint64(m.sequenceId);
	                    if (m.chunkPayloadHistogramCounts != null && m.chunkPayloadHistogramCounts.length) {
	                        w.uint32(18).fork();
	                        for (var i = 0; i < m.chunkPayloadHistogramCounts.length; ++i)
	                            w.uint64(m.chunkPayloadHistogramCounts[i]);
	                        w.ldelim();
	                    }
	                    if (m.chunkPayloadHistogramSum != null && m.chunkPayloadHistogramSum.length) {
	                        w.uint32(26).fork();
	                        for (var i = 0; i < m.chunkPayloadHistogramSum.length; ++i)
	                            w.int64(m.chunkPayloadHistogramSum[i]);
	                        w.ldelim();
	                    }
	                    if (m.buffer != null && Object.hasOwnProperty.call(m, "buffer"))
	                        w.uint32(32).uint32(m.buffer);
	                    return w;
	                };

	                /**
	                 * Decodes a WriterStats message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceStats.WriterStats} WriterStats
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                WriterStats.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceStats.WriterStats();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.sequenceId = r.uint64();
	                                break;
	                            }
	                        case 4: {
	                                m.buffer = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.chunkPayloadHistogramCounts && m.chunkPayloadHistogramCounts.length))
	                                    m.chunkPayloadHistogramCounts = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.chunkPayloadHistogramCounts.push(r.uint64());
	                                } else
	                                    m.chunkPayloadHistogramCounts.push(r.uint64());
	                                break;
	                            }
	                        case 3: {
	                                if (!(m.chunkPayloadHistogramSum && m.chunkPayloadHistogramSum.length))
	                                    m.chunkPayloadHistogramSum = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.chunkPayloadHistogramSum.push(r.int64());
	                                } else
	                                    m.chunkPayloadHistogramSum.push(r.int64());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a WriterStats message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceStats.WriterStats} WriterStats
	                 */
	                WriterStats.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceStats.WriterStats)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceStats.WriterStats();
	                    if (d.sequenceId != null) {
	                        if ($util.Long)
	                            (m.sequenceId = $util.Long.fromValue(d.sequenceId)).unsigned = true;
	                        else if (typeof d.sequenceId === "string")
	                            m.sequenceId = parseInt(d.sequenceId, 10);
	                        else if (typeof d.sequenceId === "number")
	                            m.sequenceId = d.sequenceId;
	                        else if (typeof d.sequenceId === "object")
	                            m.sequenceId = new $util.LongBits(d.sequenceId.low >>> 0, d.sequenceId.high >>> 0).toNumber(true);
	                    }
	                    if (d.buffer != null) {
	                        m.buffer = d.buffer >>> 0;
	                    }
	                    if (d.chunkPayloadHistogramCounts) {
	                        if (!Array.isArray(d.chunkPayloadHistogramCounts))
	                            throw TypeError(".perfetto.protos.TraceStats.WriterStats.chunkPayloadHistogramCounts: array expected");
	                        m.chunkPayloadHistogramCounts = [];
	                        for (var i = 0; i < d.chunkPayloadHistogramCounts.length; ++i) {
	                            if ($util.Long)
	                                (m.chunkPayloadHistogramCounts[i] = $util.Long.fromValue(d.chunkPayloadHistogramCounts[i])).unsigned = true;
	                            else if (typeof d.chunkPayloadHistogramCounts[i] === "string")
	                                m.chunkPayloadHistogramCounts[i] = parseInt(d.chunkPayloadHistogramCounts[i], 10);
	                            else if (typeof d.chunkPayloadHistogramCounts[i] === "number")
	                                m.chunkPayloadHistogramCounts[i] = d.chunkPayloadHistogramCounts[i];
	                            else if (typeof d.chunkPayloadHistogramCounts[i] === "object")
	                                m.chunkPayloadHistogramCounts[i] = new $util.LongBits(d.chunkPayloadHistogramCounts[i].low >>> 0, d.chunkPayloadHistogramCounts[i].high >>> 0).toNumber(true);
	                        }
	                    }
	                    if (d.chunkPayloadHistogramSum) {
	                        if (!Array.isArray(d.chunkPayloadHistogramSum))
	                            throw TypeError(".perfetto.protos.TraceStats.WriterStats.chunkPayloadHistogramSum: array expected");
	                        m.chunkPayloadHistogramSum = [];
	                        for (var i = 0; i < d.chunkPayloadHistogramSum.length; ++i) {
	                            if ($util.Long)
	                                (m.chunkPayloadHistogramSum[i] = $util.Long.fromValue(d.chunkPayloadHistogramSum[i])).unsigned = false;
	                            else if (typeof d.chunkPayloadHistogramSum[i] === "string")
	                                m.chunkPayloadHistogramSum[i] = parseInt(d.chunkPayloadHistogramSum[i], 10);
	                            else if (typeof d.chunkPayloadHistogramSum[i] === "number")
	                                m.chunkPayloadHistogramSum[i] = d.chunkPayloadHistogramSum[i];
	                            else if (typeof d.chunkPayloadHistogramSum[i] === "object")
	                                m.chunkPayloadHistogramSum[i] = new $util.LongBits(d.chunkPayloadHistogramSum[i].low >>> 0, d.chunkPayloadHistogramSum[i].high >>> 0).toNumber();
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a WriterStats message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.WriterStats} m WriterStats
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                WriterStats.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.chunkPayloadHistogramCounts = [];
	                        d.chunkPayloadHistogramSum = [];
	                    }
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.sequenceId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.sequenceId = o.longs === String ? "0" : 0;
	                        d.buffer = 0;
	                    }
	                    if (m.sequenceId != null && m.hasOwnProperty("sequenceId")) {
	                        if (typeof m.sequenceId === "number")
	                            d.sequenceId = o.longs === String ? String(m.sequenceId) : m.sequenceId;
	                        else
	                            d.sequenceId = o.longs === String ? $util.Long.prototype.toString.call(m.sequenceId) : o.longs === Number ? new $util.LongBits(m.sequenceId.low >>> 0, m.sequenceId.high >>> 0).toNumber(true) : m.sequenceId;
	                    }
	                    if (m.chunkPayloadHistogramCounts && m.chunkPayloadHistogramCounts.length) {
	                        d.chunkPayloadHistogramCounts = [];
	                        for (var j = 0; j < m.chunkPayloadHistogramCounts.length; ++j) {
	                            if (typeof m.chunkPayloadHistogramCounts[j] === "number")
	                                d.chunkPayloadHistogramCounts[j] = o.longs === String ? String(m.chunkPayloadHistogramCounts[j]) : m.chunkPayloadHistogramCounts[j];
	                            else
	                                d.chunkPayloadHistogramCounts[j] = o.longs === String ? $util.Long.prototype.toString.call(m.chunkPayloadHistogramCounts[j]) : o.longs === Number ? new $util.LongBits(m.chunkPayloadHistogramCounts[j].low >>> 0, m.chunkPayloadHistogramCounts[j].high >>> 0).toNumber(true) : m.chunkPayloadHistogramCounts[j];
	                        }
	                    }
	                    if (m.chunkPayloadHistogramSum && m.chunkPayloadHistogramSum.length) {
	                        d.chunkPayloadHistogramSum = [];
	                        for (var j = 0; j < m.chunkPayloadHistogramSum.length; ++j) {
	                            if (typeof m.chunkPayloadHistogramSum[j] === "number")
	                                d.chunkPayloadHistogramSum[j] = o.longs === String ? String(m.chunkPayloadHistogramSum[j]) : m.chunkPayloadHistogramSum[j];
	                            else
	                                d.chunkPayloadHistogramSum[j] = o.longs === String ? $util.Long.prototype.toString.call(m.chunkPayloadHistogramSum[j]) : o.longs === Number ? new $util.LongBits(m.chunkPayloadHistogramSum[j].low >>> 0, m.chunkPayloadHistogramSum[j].high >>> 0).toNumber() : m.chunkPayloadHistogramSum[j];
	                        }
	                    }
	                    if (m.buffer != null && m.hasOwnProperty("buffer")) {
	                        d.buffer = m.buffer;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this WriterStats to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                WriterStats.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for WriterStats
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceStats.WriterStats
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                WriterStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceStats.WriterStats";
	                };

	                return WriterStats;
	            })();

	            TraceStats.FilterStats = (function() {

	                /**
	                 * Properties of a FilterStats.
	                 * @memberof perfetto.protos.TraceStats
	                 * @interface IFilterStats
	                 * @property {number|null} [inputPackets] FilterStats inputPackets
	                 * @property {number|null} [inputBytes] FilterStats inputBytes
	                 * @property {number|null} [outputBytes] FilterStats outputBytes
	                 * @property {number|null} [errors] FilterStats errors
	                 * @property {number|null} [timeTakenNs] FilterStats timeTakenNs
	                 * @property {Array.<number>|null} [bytesDiscardedPerBuffer] FilterStats bytesDiscardedPerBuffer
	                 */

	                /**
	                 * Constructs a new FilterStats.
	                 * @memberof perfetto.protos.TraceStats
	                 * @classdesc Represents a FilterStats.
	                 * @implements IFilterStats
	                 * @constructor
	                 * @param {perfetto.protos.TraceStats.IFilterStats=} [p] Properties to set
	                 */
	                function FilterStats(p) {
	                    this.bytesDiscardedPerBuffer = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * FilterStats inputPackets.
	                 * @member {number} inputPackets
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 */
	                FilterStats.prototype.inputPackets = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * FilterStats inputBytes.
	                 * @member {number} inputBytes
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 */
	                FilterStats.prototype.inputBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * FilterStats outputBytes.
	                 * @member {number} outputBytes
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 */
	                FilterStats.prototype.outputBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * FilterStats errors.
	                 * @member {number} errors
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 */
	                FilterStats.prototype.errors = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * FilterStats timeTakenNs.
	                 * @member {number} timeTakenNs
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 */
	                FilterStats.prototype.timeTakenNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * FilterStats bytesDiscardedPerBuffer.
	                 * @member {Array.<number>} bytesDiscardedPerBuffer
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 */
	                FilterStats.prototype.bytesDiscardedPerBuffer = $util.emptyArray;

	                /**
	                 * Creates a new FilterStats instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.IFilterStats=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceStats.FilterStats} FilterStats instance
	                 */
	                FilterStats.create = function create(properties) {
	                    return new FilterStats(properties);
	                };

	                /**
	                 * Encodes the specified FilterStats message. Does not implicitly {@link perfetto.protos.TraceStats.FilterStats.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.IFilterStats} m FilterStats message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                FilterStats.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.inputPackets != null && Object.hasOwnProperty.call(m, "inputPackets"))
	                        w.uint32(8).uint64(m.inputPackets);
	                    if (m.inputBytes != null && Object.hasOwnProperty.call(m, "inputBytes"))
	                        w.uint32(16).uint64(m.inputBytes);
	                    if (m.outputBytes != null && Object.hasOwnProperty.call(m, "outputBytes"))
	                        w.uint32(24).uint64(m.outputBytes);
	                    if (m.errors != null && Object.hasOwnProperty.call(m, "errors"))
	                        w.uint32(32).uint64(m.errors);
	                    if (m.timeTakenNs != null && Object.hasOwnProperty.call(m, "timeTakenNs"))
	                        w.uint32(40).uint64(m.timeTakenNs);
	                    if (m.bytesDiscardedPerBuffer != null && m.bytesDiscardedPerBuffer.length) {
	                        for (var i = 0; i < m.bytesDiscardedPerBuffer.length; ++i)
	                            w.uint32(160).uint64(m.bytesDiscardedPerBuffer[i]);
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a FilterStats message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceStats.FilterStats} FilterStats
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                FilterStats.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceStats.FilterStats();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.inputPackets = r.uint64();
	                                break;
	                            }
	                        case 2: {
	                                m.inputBytes = r.uint64();
	                                break;
	                            }
	                        case 3: {
	                                m.outputBytes = r.uint64();
	                                break;
	                            }
	                        case 4: {
	                                m.errors = r.uint64();
	                                break;
	                            }
	                        case 5: {
	                                m.timeTakenNs = r.uint64();
	                                break;
	                            }
	                        case 20: {
	                                if (!(m.bytesDiscardedPerBuffer && m.bytesDiscardedPerBuffer.length))
	                                    m.bytesDiscardedPerBuffer = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.bytesDiscardedPerBuffer.push(r.uint64());
	                                } else
	                                    m.bytesDiscardedPerBuffer.push(r.uint64());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a FilterStats message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceStats.FilterStats} FilterStats
	                 */
	                FilterStats.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceStats.FilterStats)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceStats.FilterStats();
	                    if (d.inputPackets != null) {
	                        if ($util.Long)
	                            (m.inputPackets = $util.Long.fromValue(d.inputPackets)).unsigned = true;
	                        else if (typeof d.inputPackets === "string")
	                            m.inputPackets = parseInt(d.inputPackets, 10);
	                        else if (typeof d.inputPackets === "number")
	                            m.inputPackets = d.inputPackets;
	                        else if (typeof d.inputPackets === "object")
	                            m.inputPackets = new $util.LongBits(d.inputPackets.low >>> 0, d.inputPackets.high >>> 0).toNumber(true);
	                    }
	                    if (d.inputBytes != null) {
	                        if ($util.Long)
	                            (m.inputBytes = $util.Long.fromValue(d.inputBytes)).unsigned = true;
	                        else if (typeof d.inputBytes === "string")
	                            m.inputBytes = parseInt(d.inputBytes, 10);
	                        else if (typeof d.inputBytes === "number")
	                            m.inputBytes = d.inputBytes;
	                        else if (typeof d.inputBytes === "object")
	                            m.inputBytes = new $util.LongBits(d.inputBytes.low >>> 0, d.inputBytes.high >>> 0).toNumber(true);
	                    }
	                    if (d.outputBytes != null) {
	                        if ($util.Long)
	                            (m.outputBytes = $util.Long.fromValue(d.outputBytes)).unsigned = true;
	                        else if (typeof d.outputBytes === "string")
	                            m.outputBytes = parseInt(d.outputBytes, 10);
	                        else if (typeof d.outputBytes === "number")
	                            m.outputBytes = d.outputBytes;
	                        else if (typeof d.outputBytes === "object")
	                            m.outputBytes = new $util.LongBits(d.outputBytes.low >>> 0, d.outputBytes.high >>> 0).toNumber(true);
	                    }
	                    if (d.errors != null) {
	                        if ($util.Long)
	                            (m.errors = $util.Long.fromValue(d.errors)).unsigned = true;
	                        else if (typeof d.errors === "string")
	                            m.errors = parseInt(d.errors, 10);
	                        else if (typeof d.errors === "number")
	                            m.errors = d.errors;
	                        else if (typeof d.errors === "object")
	                            m.errors = new $util.LongBits(d.errors.low >>> 0, d.errors.high >>> 0).toNumber(true);
	                    }
	                    if (d.timeTakenNs != null) {
	                        if ($util.Long)
	                            (m.timeTakenNs = $util.Long.fromValue(d.timeTakenNs)).unsigned = true;
	                        else if (typeof d.timeTakenNs === "string")
	                            m.timeTakenNs = parseInt(d.timeTakenNs, 10);
	                        else if (typeof d.timeTakenNs === "number")
	                            m.timeTakenNs = d.timeTakenNs;
	                        else if (typeof d.timeTakenNs === "object")
	                            m.timeTakenNs = new $util.LongBits(d.timeTakenNs.low >>> 0, d.timeTakenNs.high >>> 0).toNumber(true);
	                    }
	                    if (d.bytesDiscardedPerBuffer) {
	                        if (!Array.isArray(d.bytesDiscardedPerBuffer))
	                            throw TypeError(".perfetto.protos.TraceStats.FilterStats.bytesDiscardedPerBuffer: array expected");
	                        m.bytesDiscardedPerBuffer = [];
	                        for (var i = 0; i < d.bytesDiscardedPerBuffer.length; ++i) {
	                            if ($util.Long)
	                                (m.bytesDiscardedPerBuffer[i] = $util.Long.fromValue(d.bytesDiscardedPerBuffer[i])).unsigned = true;
	                            else if (typeof d.bytesDiscardedPerBuffer[i] === "string")
	                                m.bytesDiscardedPerBuffer[i] = parseInt(d.bytesDiscardedPerBuffer[i], 10);
	                            else if (typeof d.bytesDiscardedPerBuffer[i] === "number")
	                                m.bytesDiscardedPerBuffer[i] = d.bytesDiscardedPerBuffer[i];
	                            else if (typeof d.bytesDiscardedPerBuffer[i] === "object")
	                                m.bytesDiscardedPerBuffer[i] = new $util.LongBits(d.bytesDiscardedPerBuffer[i].low >>> 0, d.bytesDiscardedPerBuffer[i].high >>> 0).toNumber(true);
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a FilterStats message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @static
	                 * @param {perfetto.protos.TraceStats.FilterStats} m FilterStats
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                FilterStats.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.bytesDiscardedPerBuffer = [];
	                    }
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.inputPackets = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.inputPackets = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.inputBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.inputBytes = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.outputBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.outputBytes = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.errors = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.errors = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.timeTakenNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.timeTakenNs = o.longs === String ? "0" : 0;
	                    }
	                    if (m.inputPackets != null && m.hasOwnProperty("inputPackets")) {
	                        if (typeof m.inputPackets === "number")
	                            d.inputPackets = o.longs === String ? String(m.inputPackets) : m.inputPackets;
	                        else
	                            d.inputPackets = o.longs === String ? $util.Long.prototype.toString.call(m.inputPackets) : o.longs === Number ? new $util.LongBits(m.inputPackets.low >>> 0, m.inputPackets.high >>> 0).toNumber(true) : m.inputPackets;
	                    }
	                    if (m.inputBytes != null && m.hasOwnProperty("inputBytes")) {
	                        if (typeof m.inputBytes === "number")
	                            d.inputBytes = o.longs === String ? String(m.inputBytes) : m.inputBytes;
	                        else
	                            d.inputBytes = o.longs === String ? $util.Long.prototype.toString.call(m.inputBytes) : o.longs === Number ? new $util.LongBits(m.inputBytes.low >>> 0, m.inputBytes.high >>> 0).toNumber(true) : m.inputBytes;
	                    }
	                    if (m.outputBytes != null && m.hasOwnProperty("outputBytes")) {
	                        if (typeof m.outputBytes === "number")
	                            d.outputBytes = o.longs === String ? String(m.outputBytes) : m.outputBytes;
	                        else
	                            d.outputBytes = o.longs === String ? $util.Long.prototype.toString.call(m.outputBytes) : o.longs === Number ? new $util.LongBits(m.outputBytes.low >>> 0, m.outputBytes.high >>> 0).toNumber(true) : m.outputBytes;
	                    }
	                    if (m.errors != null && m.hasOwnProperty("errors")) {
	                        if (typeof m.errors === "number")
	                            d.errors = o.longs === String ? String(m.errors) : m.errors;
	                        else
	                            d.errors = o.longs === String ? $util.Long.prototype.toString.call(m.errors) : o.longs === Number ? new $util.LongBits(m.errors.low >>> 0, m.errors.high >>> 0).toNumber(true) : m.errors;
	                    }
	                    if (m.timeTakenNs != null && m.hasOwnProperty("timeTakenNs")) {
	                        if (typeof m.timeTakenNs === "number")
	                            d.timeTakenNs = o.longs === String ? String(m.timeTakenNs) : m.timeTakenNs;
	                        else
	                            d.timeTakenNs = o.longs === String ? $util.Long.prototype.toString.call(m.timeTakenNs) : o.longs === Number ? new $util.LongBits(m.timeTakenNs.low >>> 0, m.timeTakenNs.high >>> 0).toNumber(true) : m.timeTakenNs;
	                    }
	                    if (m.bytesDiscardedPerBuffer && m.bytesDiscardedPerBuffer.length) {
	                        d.bytesDiscardedPerBuffer = [];
	                        for (var j = 0; j < m.bytesDiscardedPerBuffer.length; ++j) {
	                            if (typeof m.bytesDiscardedPerBuffer[j] === "number")
	                                d.bytesDiscardedPerBuffer[j] = o.longs === String ? String(m.bytesDiscardedPerBuffer[j]) : m.bytesDiscardedPerBuffer[j];
	                            else
	                                d.bytesDiscardedPerBuffer[j] = o.longs === String ? $util.Long.prototype.toString.call(m.bytesDiscardedPerBuffer[j]) : o.longs === Number ? new $util.LongBits(m.bytesDiscardedPerBuffer[j].low >>> 0, m.bytesDiscardedPerBuffer[j].high >>> 0).toNumber(true) : m.bytesDiscardedPerBuffer[j];
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this FilterStats to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                FilterStats.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for FilterStats
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceStats.FilterStats
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                FilterStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceStats.FilterStats";
	                };

	                return FilterStats;
	            })();

	            /**
	             * FinalFlushOutcome enum.
	             * @name perfetto.protos.TraceStats.FinalFlushOutcome
	             * @enum {number}
	             * @property {number} FINAL_FLUSH_UNSPECIFIED=0 FINAL_FLUSH_UNSPECIFIED value
	             * @property {number} FINAL_FLUSH_SUCCEEDED=1 FINAL_FLUSH_SUCCEEDED value
	             * @property {number} FINAL_FLUSH_FAILED=2 FINAL_FLUSH_FAILED value
	             */
	            TraceStats.FinalFlushOutcome = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "FINAL_FLUSH_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "FINAL_FLUSH_SUCCEEDED"] = 1;
	                values[valuesById[2] = "FINAL_FLUSH_FAILED"] = 2;
	                return values;
	            })();

	            return TraceStats;
	        })();

	        protos.TraceConfig = (function() {

	            /**
	             * Properties of a TraceConfig.
	             * @memberof perfetto.protos
	             * @interface ITraceConfig
	             * @property {Array.<perfetto.protos.TraceConfig.IBufferConfig>|null} [buffers] TraceConfig buffers
	             * @property {Array.<perfetto.protos.TraceConfig.IDataSource>|null} [dataSources] TraceConfig dataSources
	             * @property {perfetto.protos.TraceConfig.IBuiltinDataSource|null} [builtinDataSources] TraceConfig builtinDataSources
	             * @property {number|null} [durationMs] TraceConfig durationMs
	             * @property {boolean|null} [preferSuspendClockForDuration] TraceConfig preferSuspendClockForDuration
	             * @property {boolean|null} [enableExtraGuardrails] TraceConfig enableExtraGuardrails
	             * @property {perfetto.protos.TraceConfig.LockdownModeOperation|null} [lockdownMode] TraceConfig lockdownMode
	             * @property {Array.<perfetto.protos.TraceConfig.IProducerConfig>|null} [producers] TraceConfig producers
	             * @property {perfetto.protos.TraceConfig.IStatsdMetadata|null} [statsdMetadata] TraceConfig statsdMetadata
	             * @property {boolean|null} [writeIntoFile] TraceConfig writeIntoFile
	             * @property {string|null} [outputPath] TraceConfig outputPath
	             * @property {number|null} [fileWritePeriodMs] TraceConfig fileWritePeriodMs
	             * @property {number|null} [maxFileSizeBytes] TraceConfig maxFileSizeBytes
	             * @property {perfetto.protos.TraceConfig.IGuardrailOverrides|null} [guardrailOverrides] TraceConfig guardrailOverrides
	             * @property {boolean|null} [deferredStart] TraceConfig deferredStart
	             * @property {number|null} [flushPeriodMs] TraceConfig flushPeriodMs
	             * @property {number|null} [flushTimeoutMs] TraceConfig flushTimeoutMs
	             * @property {number|null} [dataSourceStopTimeoutMs] TraceConfig dataSourceStopTimeoutMs
	             * @property {boolean|null} [notifyTraceur] TraceConfig notifyTraceur
	             * @property {number|null} [bugreportScore] TraceConfig bugreportScore
	             * @property {string|null} [bugreportFilename] TraceConfig bugreportFilename
	             * @property {perfetto.protos.TraceConfig.ITriggerConfig|null} [triggerConfig] TraceConfig triggerConfig
	             * @property {Array.<string>|null} [activateTriggers] TraceConfig activateTriggers
	             * @property {perfetto.protos.TraceConfig.IIncrementalStateConfig|null} [incrementalStateConfig] TraceConfig incrementalStateConfig
	             * @property {boolean|null} [allowUserBuildTracing] TraceConfig allowUserBuildTracing
	             * @property {string|null} [uniqueSessionName] TraceConfig uniqueSessionName
	             * @property {perfetto.protos.TraceConfig.CompressionType|null} [compressionType] TraceConfig compressionType
	             * @property {perfetto.protos.TraceConfig.IIncidentReportConfig|null} [incidentReportConfig] TraceConfig incidentReportConfig
	             * @property {perfetto.protos.TraceConfig.StatsdLogging|null} [statsdLogging] TraceConfig statsdLogging
	             * @property {number|null} [traceUuidMsb] TraceConfig traceUuidMsb
	             * @property {number|null} [traceUuidLsb] TraceConfig traceUuidLsb
	             * @property {perfetto.protos.TraceConfig.ITraceFilter|null} [traceFilter] TraceConfig traceFilter
	             * @property {perfetto.protos.TraceConfig.IAndroidReportConfig|null} [androidReportConfig] TraceConfig androidReportConfig
	             * @property {perfetto.protos.TraceConfig.ICmdTraceStartDelay|null} [cmdTraceStartDelay] TraceConfig cmdTraceStartDelay
	             * @property {Array.<perfetto.protos.TraceConfig.ISessionSemaphore>|null} [sessionSemaphores] TraceConfig sessionSemaphores
	             */

	            /**
	             * Constructs a new TraceConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TraceConfig.
	             * @implements ITraceConfig
	             * @constructor
	             * @param {perfetto.protos.ITraceConfig=} [p] Properties to set
	             */
	            function TraceConfig(p) {
	                this.buffers = [];
	                this.dataSources = [];
	                this.producers = [];
	                this.activateTriggers = [];
	                this.sessionSemaphores = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TraceConfig buffers.
	             * @member {Array.<perfetto.protos.TraceConfig.IBufferConfig>} buffers
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.buffers = $util.emptyArray;

	            /**
	             * TraceConfig dataSources.
	             * @member {Array.<perfetto.protos.TraceConfig.IDataSource>} dataSources
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.dataSources = $util.emptyArray;

	            /**
	             * TraceConfig builtinDataSources.
	             * @member {perfetto.protos.TraceConfig.IBuiltinDataSource|null|undefined} builtinDataSources
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.builtinDataSources = null;

	            /**
	             * TraceConfig durationMs.
	             * @member {number} durationMs
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.durationMs = 0;

	            /**
	             * TraceConfig preferSuspendClockForDuration.
	             * @member {boolean} preferSuspendClockForDuration
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.preferSuspendClockForDuration = false;

	            /**
	             * TraceConfig enableExtraGuardrails.
	             * @member {boolean} enableExtraGuardrails
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.enableExtraGuardrails = false;

	            /**
	             * TraceConfig lockdownMode.
	             * @member {perfetto.protos.TraceConfig.LockdownModeOperation} lockdownMode
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.lockdownMode = 0;

	            /**
	             * TraceConfig producers.
	             * @member {Array.<perfetto.protos.TraceConfig.IProducerConfig>} producers
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.producers = $util.emptyArray;

	            /**
	             * TraceConfig statsdMetadata.
	             * @member {perfetto.protos.TraceConfig.IStatsdMetadata|null|undefined} statsdMetadata
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.statsdMetadata = null;

	            /**
	             * TraceConfig writeIntoFile.
	             * @member {boolean} writeIntoFile
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.writeIntoFile = false;

	            /**
	             * TraceConfig outputPath.
	             * @member {string} outputPath
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.outputPath = "";

	            /**
	             * TraceConfig fileWritePeriodMs.
	             * @member {number} fileWritePeriodMs
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.fileWritePeriodMs = 0;

	            /**
	             * TraceConfig maxFileSizeBytes.
	             * @member {number} maxFileSizeBytes
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.maxFileSizeBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TraceConfig guardrailOverrides.
	             * @member {perfetto.protos.TraceConfig.IGuardrailOverrides|null|undefined} guardrailOverrides
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.guardrailOverrides = null;

	            /**
	             * TraceConfig deferredStart.
	             * @member {boolean} deferredStart
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.deferredStart = false;

	            /**
	             * TraceConfig flushPeriodMs.
	             * @member {number} flushPeriodMs
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.flushPeriodMs = 0;

	            /**
	             * TraceConfig flushTimeoutMs.
	             * @member {number} flushTimeoutMs
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.flushTimeoutMs = 0;

	            /**
	             * TraceConfig dataSourceStopTimeoutMs.
	             * @member {number} dataSourceStopTimeoutMs
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.dataSourceStopTimeoutMs = 0;

	            /**
	             * TraceConfig notifyTraceur.
	             * @member {boolean} notifyTraceur
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.notifyTraceur = false;

	            /**
	             * TraceConfig bugreportScore.
	             * @member {number} bugreportScore
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.bugreportScore = 0;

	            /**
	             * TraceConfig bugreportFilename.
	             * @member {string} bugreportFilename
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.bugreportFilename = "";

	            /**
	             * TraceConfig triggerConfig.
	             * @member {perfetto.protos.TraceConfig.ITriggerConfig|null|undefined} triggerConfig
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.triggerConfig = null;

	            /**
	             * TraceConfig activateTriggers.
	             * @member {Array.<string>} activateTriggers
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.activateTriggers = $util.emptyArray;

	            /**
	             * TraceConfig incrementalStateConfig.
	             * @member {perfetto.protos.TraceConfig.IIncrementalStateConfig|null|undefined} incrementalStateConfig
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.incrementalStateConfig = null;

	            /**
	             * TraceConfig allowUserBuildTracing.
	             * @member {boolean} allowUserBuildTracing
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.allowUserBuildTracing = false;

	            /**
	             * TraceConfig uniqueSessionName.
	             * @member {string} uniqueSessionName
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.uniqueSessionName = "";

	            /**
	             * TraceConfig compressionType.
	             * @member {perfetto.protos.TraceConfig.CompressionType} compressionType
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.compressionType = 0;

	            /**
	             * TraceConfig incidentReportConfig.
	             * @member {perfetto.protos.TraceConfig.IIncidentReportConfig|null|undefined} incidentReportConfig
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.incidentReportConfig = null;

	            /**
	             * TraceConfig statsdLogging.
	             * @member {perfetto.protos.TraceConfig.StatsdLogging} statsdLogging
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.statsdLogging = 0;

	            /**
	             * TraceConfig traceUuidMsb.
	             * @member {number} traceUuidMsb
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.traceUuidMsb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * TraceConfig traceUuidLsb.
	             * @member {number} traceUuidLsb
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.traceUuidLsb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * TraceConfig traceFilter.
	             * @member {perfetto.protos.TraceConfig.ITraceFilter|null|undefined} traceFilter
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.traceFilter = null;

	            /**
	             * TraceConfig androidReportConfig.
	             * @member {perfetto.protos.TraceConfig.IAndroidReportConfig|null|undefined} androidReportConfig
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.androidReportConfig = null;

	            /**
	             * TraceConfig cmdTraceStartDelay.
	             * @member {perfetto.protos.TraceConfig.ICmdTraceStartDelay|null|undefined} cmdTraceStartDelay
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.cmdTraceStartDelay = null;

	            /**
	             * TraceConfig sessionSemaphores.
	             * @member {Array.<perfetto.protos.TraceConfig.ISessionSemaphore>} sessionSemaphores
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             */
	            TraceConfig.prototype.sessionSemaphores = $util.emptyArray;

	            /**
	             * Creates a new TraceConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TraceConfig
	             * @static
	             * @param {perfetto.protos.ITraceConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.TraceConfig} TraceConfig instance
	             */
	            TraceConfig.create = function create(properties) {
	                return new TraceConfig(properties);
	            };

	            /**
	             * Encodes the specified TraceConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TraceConfig
	             * @static
	             * @param {perfetto.protos.ITraceConfig} m TraceConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TraceConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.buffers != null && m.buffers.length) {
	                    for (var i = 0; i < m.buffers.length; ++i)
	                        $root.perfetto.protos.TraceConfig.BufferConfig.encode(m.buffers[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.dataSources != null && m.dataSources.length) {
	                    for (var i = 0; i < m.dataSources.length; ++i)
	                        $root.perfetto.protos.TraceConfig.DataSource.encode(m.dataSources[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.durationMs != null && Object.hasOwnProperty.call(m, "durationMs"))
	                    w.uint32(24).uint32(m.durationMs);
	                if (m.enableExtraGuardrails != null && Object.hasOwnProperty.call(m, "enableExtraGuardrails"))
	                    w.uint32(32).bool(m.enableExtraGuardrails);
	                if (m.lockdownMode != null && Object.hasOwnProperty.call(m, "lockdownMode"))
	                    w.uint32(40).int32(m.lockdownMode);
	                if (m.producers != null && m.producers.length) {
	                    for (var i = 0; i < m.producers.length; ++i)
	                        $root.perfetto.protos.TraceConfig.ProducerConfig.encode(m.producers[i], w.uint32(50).fork()).ldelim();
	                }
	                if (m.statsdMetadata != null && Object.hasOwnProperty.call(m, "statsdMetadata"))
	                    $root.perfetto.protos.TraceConfig.StatsdMetadata.encode(m.statsdMetadata, w.uint32(58).fork()).ldelim();
	                if (m.writeIntoFile != null && Object.hasOwnProperty.call(m, "writeIntoFile"))
	                    w.uint32(64).bool(m.writeIntoFile);
	                if (m.fileWritePeriodMs != null && Object.hasOwnProperty.call(m, "fileWritePeriodMs"))
	                    w.uint32(72).uint32(m.fileWritePeriodMs);
	                if (m.maxFileSizeBytes != null && Object.hasOwnProperty.call(m, "maxFileSizeBytes"))
	                    w.uint32(80).uint64(m.maxFileSizeBytes);
	                if (m.guardrailOverrides != null && Object.hasOwnProperty.call(m, "guardrailOverrides"))
	                    $root.perfetto.protos.TraceConfig.GuardrailOverrides.encode(m.guardrailOverrides, w.uint32(90).fork()).ldelim();
	                if (m.deferredStart != null && Object.hasOwnProperty.call(m, "deferredStart"))
	                    w.uint32(96).bool(m.deferredStart);
	                if (m.flushPeriodMs != null && Object.hasOwnProperty.call(m, "flushPeriodMs"))
	                    w.uint32(104).uint32(m.flushPeriodMs);
	                if (m.flushTimeoutMs != null && Object.hasOwnProperty.call(m, "flushTimeoutMs"))
	                    w.uint32(112).uint32(m.flushTimeoutMs);
	                if (m.notifyTraceur != null && Object.hasOwnProperty.call(m, "notifyTraceur"))
	                    w.uint32(128).bool(m.notifyTraceur);
	                if (m.triggerConfig != null && Object.hasOwnProperty.call(m, "triggerConfig"))
	                    $root.perfetto.protos.TraceConfig.TriggerConfig.encode(m.triggerConfig, w.uint32(138).fork()).ldelim();
	                if (m.activateTriggers != null && m.activateTriggers.length) {
	                    for (var i = 0; i < m.activateTriggers.length; ++i)
	                        w.uint32(146).string(m.activateTriggers[i]);
	                }
	                if (m.allowUserBuildTracing != null && Object.hasOwnProperty.call(m, "allowUserBuildTracing"))
	                    w.uint32(152).bool(m.allowUserBuildTracing);
	                if (m.builtinDataSources != null && Object.hasOwnProperty.call(m, "builtinDataSources"))
	                    $root.perfetto.protos.TraceConfig.BuiltinDataSource.encode(m.builtinDataSources, w.uint32(162).fork()).ldelim();
	                if (m.incrementalStateConfig != null && Object.hasOwnProperty.call(m, "incrementalStateConfig"))
	                    $root.perfetto.protos.TraceConfig.IncrementalStateConfig.encode(m.incrementalStateConfig, w.uint32(170).fork()).ldelim();
	                if (m.uniqueSessionName != null && Object.hasOwnProperty.call(m, "uniqueSessionName"))
	                    w.uint32(178).string(m.uniqueSessionName);
	                if (m.dataSourceStopTimeoutMs != null && Object.hasOwnProperty.call(m, "dataSourceStopTimeoutMs"))
	                    w.uint32(184).uint32(m.dataSourceStopTimeoutMs);
	                if (m.compressionType != null && Object.hasOwnProperty.call(m, "compressionType"))
	                    w.uint32(192).int32(m.compressionType);
	                if (m.incidentReportConfig != null && Object.hasOwnProperty.call(m, "incidentReportConfig"))
	                    $root.perfetto.protos.TraceConfig.IncidentReportConfig.encode(m.incidentReportConfig, w.uint32(202).fork()).ldelim();
	                if (m.traceUuidMsb != null && Object.hasOwnProperty.call(m, "traceUuidMsb"))
	                    w.uint32(216).int64(m.traceUuidMsb);
	                if (m.traceUuidLsb != null && Object.hasOwnProperty.call(m, "traceUuidLsb"))
	                    w.uint32(224).int64(m.traceUuidLsb);
	                if (m.outputPath != null && Object.hasOwnProperty.call(m, "outputPath"))
	                    w.uint32(234).string(m.outputPath);
	                if (m.bugreportScore != null && Object.hasOwnProperty.call(m, "bugreportScore"))
	                    w.uint32(240).int32(m.bugreportScore);
	                if (m.statsdLogging != null && Object.hasOwnProperty.call(m, "statsdLogging"))
	                    w.uint32(248).int32(m.statsdLogging);
	                if (m.traceFilter != null && Object.hasOwnProperty.call(m, "traceFilter"))
	                    $root.perfetto.protos.TraceConfig.TraceFilter.encode(m.traceFilter, w.uint32(266).fork()).ldelim();
	                if (m.androidReportConfig != null && Object.hasOwnProperty.call(m, "androidReportConfig"))
	                    $root.perfetto.protos.TraceConfig.AndroidReportConfig.encode(m.androidReportConfig, w.uint32(274).fork()).ldelim();
	                if (m.cmdTraceStartDelay != null && Object.hasOwnProperty.call(m, "cmdTraceStartDelay"))
	                    $root.perfetto.protos.TraceConfig.CmdTraceStartDelay.encode(m.cmdTraceStartDelay, w.uint32(282).fork()).ldelim();
	                if (m.preferSuspendClockForDuration != null && Object.hasOwnProperty.call(m, "preferSuspendClockForDuration"))
	                    w.uint32(288).bool(m.preferSuspendClockForDuration);
	                if (m.bugreportFilename != null && Object.hasOwnProperty.call(m, "bugreportFilename"))
	                    w.uint32(306).string(m.bugreportFilename);
	                if (m.sessionSemaphores != null && m.sessionSemaphores.length) {
	                    for (var i = 0; i < m.sessionSemaphores.length; ++i)
	                        $root.perfetto.protos.TraceConfig.SessionSemaphore.encode(m.sessionSemaphores[i], w.uint32(314).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a TraceConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TraceConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TraceConfig} TraceConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TraceConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.buffers && m.buffers.length))
	                                m.buffers = [];
	                            m.buffers.push($root.perfetto.protos.TraceConfig.BufferConfig.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.dataSources && m.dataSources.length))
	                                m.dataSources = [];
	                            m.dataSources.push($root.perfetto.protos.TraceConfig.DataSource.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 20: {
	                            m.builtinDataSources = $root.perfetto.protos.TraceConfig.BuiltinDataSource.decode(r, r.uint32());
	                            break;
	                        }
	                    case 3: {
	                            m.durationMs = r.uint32();
	                            break;
	                        }
	                    case 36: {
	                            m.preferSuspendClockForDuration = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.enableExtraGuardrails = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.lockdownMode = r.int32();
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.producers && m.producers.length))
	                                m.producers = [];
	                            m.producers.push($root.perfetto.protos.TraceConfig.ProducerConfig.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 7: {
	                            m.statsdMetadata = $root.perfetto.protos.TraceConfig.StatsdMetadata.decode(r, r.uint32());
	                            break;
	                        }
	                    case 8: {
	                            m.writeIntoFile = r.bool();
	                            break;
	                        }
	                    case 29: {
	                            m.outputPath = r.string();
	                            break;
	                        }
	                    case 9: {
	                            m.fileWritePeriodMs = r.uint32();
	                            break;
	                        }
	                    case 10: {
	                            m.maxFileSizeBytes = r.uint64();
	                            break;
	                        }
	                    case 11: {
	                            m.guardrailOverrides = $root.perfetto.protos.TraceConfig.GuardrailOverrides.decode(r, r.uint32());
	                            break;
	                        }
	                    case 12: {
	                            m.deferredStart = r.bool();
	                            break;
	                        }
	                    case 13: {
	                            m.flushPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 14: {
	                            m.flushTimeoutMs = r.uint32();
	                            break;
	                        }
	                    case 23: {
	                            m.dataSourceStopTimeoutMs = r.uint32();
	                            break;
	                        }
	                    case 16: {
	                            m.notifyTraceur = r.bool();
	                            break;
	                        }
	                    case 30: {
	                            m.bugreportScore = r.int32();
	                            break;
	                        }
	                    case 38: {
	                            m.bugreportFilename = r.string();
	                            break;
	                        }
	                    case 17: {
	                            m.triggerConfig = $root.perfetto.protos.TraceConfig.TriggerConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 18: {
	                            if (!(m.activateTriggers && m.activateTriggers.length))
	                                m.activateTriggers = [];
	                            m.activateTriggers.push(r.string());
	                            break;
	                        }
	                    case 21: {
	                            m.incrementalStateConfig = $root.perfetto.protos.TraceConfig.IncrementalStateConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 19: {
	                            m.allowUserBuildTracing = r.bool();
	                            break;
	                        }
	                    case 22: {
	                            m.uniqueSessionName = r.string();
	                            break;
	                        }
	                    case 24: {
	                            m.compressionType = r.int32();
	                            break;
	                        }
	                    case 25: {
	                            m.incidentReportConfig = $root.perfetto.protos.TraceConfig.IncidentReportConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 31: {
	                            m.statsdLogging = r.int32();
	                            break;
	                        }
	                    case 27: {
	                            m.traceUuidMsb = r.int64();
	                            break;
	                        }
	                    case 28: {
	                            m.traceUuidLsb = r.int64();
	                            break;
	                        }
	                    case 33: {
	                            m.traceFilter = $root.perfetto.protos.TraceConfig.TraceFilter.decode(r, r.uint32());
	                            break;
	                        }
	                    case 34: {
	                            m.androidReportConfig = $root.perfetto.protos.TraceConfig.AndroidReportConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 35: {
	                            m.cmdTraceStartDelay = $root.perfetto.protos.TraceConfig.CmdTraceStartDelay.decode(r, r.uint32());
	                            break;
	                        }
	                    case 39: {
	                            if (!(m.sessionSemaphores && m.sessionSemaphores.length))
	                                m.sessionSemaphores = [];
	                            m.sessionSemaphores.push($root.perfetto.protos.TraceConfig.SessionSemaphore.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TraceConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TraceConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TraceConfig} TraceConfig
	             */
	            TraceConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TraceConfig)
	                    return d;
	                var m = new $root.perfetto.protos.TraceConfig();
	                if (d.buffers) {
	                    if (!Array.isArray(d.buffers))
	                        throw TypeError(".perfetto.protos.TraceConfig.buffers: array expected");
	                    m.buffers = [];
	                    for (var i = 0; i < d.buffers.length; ++i) {
	                        if (typeof d.buffers[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceConfig.buffers: object expected");
	                        m.buffers[i] = $root.perfetto.protos.TraceConfig.BufferConfig.fromObject(d.buffers[i]);
	                    }
	                }
	                if (d.dataSources) {
	                    if (!Array.isArray(d.dataSources))
	                        throw TypeError(".perfetto.protos.TraceConfig.dataSources: array expected");
	                    m.dataSources = [];
	                    for (var i = 0; i < d.dataSources.length; ++i) {
	                        if (typeof d.dataSources[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceConfig.dataSources: object expected");
	                        m.dataSources[i] = $root.perfetto.protos.TraceConfig.DataSource.fromObject(d.dataSources[i]);
	                    }
	                }
	                if (d.builtinDataSources != null) {
	                    if (typeof d.builtinDataSources !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.builtinDataSources: object expected");
	                    m.builtinDataSources = $root.perfetto.protos.TraceConfig.BuiltinDataSource.fromObject(d.builtinDataSources);
	                }
	                if (d.durationMs != null) {
	                    m.durationMs = d.durationMs >>> 0;
	                }
	                if (d.preferSuspendClockForDuration != null) {
	                    m.preferSuspendClockForDuration = Boolean(d.preferSuspendClockForDuration);
	                }
	                if (d.enableExtraGuardrails != null) {
	                    m.enableExtraGuardrails = Boolean(d.enableExtraGuardrails);
	                }
	                switch (d.lockdownMode) {
	                default:
	                    if (typeof d.lockdownMode === "number") {
	                        m.lockdownMode = d.lockdownMode;
	                        break;
	                    }
	                    break;
	                case "LOCKDOWN_UNCHANGED":
	                case 0:
	                    m.lockdownMode = 0;
	                    break;
	                case "LOCKDOWN_CLEAR":
	                case 1:
	                    m.lockdownMode = 1;
	                    break;
	                case "LOCKDOWN_SET":
	                case 2:
	                    m.lockdownMode = 2;
	                    break;
	                }
	                if (d.producers) {
	                    if (!Array.isArray(d.producers))
	                        throw TypeError(".perfetto.protos.TraceConfig.producers: array expected");
	                    m.producers = [];
	                    for (var i = 0; i < d.producers.length; ++i) {
	                        if (typeof d.producers[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceConfig.producers: object expected");
	                        m.producers[i] = $root.perfetto.protos.TraceConfig.ProducerConfig.fromObject(d.producers[i]);
	                    }
	                }
	                if (d.statsdMetadata != null) {
	                    if (typeof d.statsdMetadata !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.statsdMetadata: object expected");
	                    m.statsdMetadata = $root.perfetto.protos.TraceConfig.StatsdMetadata.fromObject(d.statsdMetadata);
	                }
	                if (d.writeIntoFile != null) {
	                    m.writeIntoFile = Boolean(d.writeIntoFile);
	                }
	                if (d.outputPath != null) {
	                    m.outputPath = String(d.outputPath);
	                }
	                if (d.fileWritePeriodMs != null) {
	                    m.fileWritePeriodMs = d.fileWritePeriodMs >>> 0;
	                }
	                if (d.maxFileSizeBytes != null) {
	                    if ($util.Long)
	                        (m.maxFileSizeBytes = $util.Long.fromValue(d.maxFileSizeBytes)).unsigned = true;
	                    else if (typeof d.maxFileSizeBytes === "string")
	                        m.maxFileSizeBytes = parseInt(d.maxFileSizeBytes, 10);
	                    else if (typeof d.maxFileSizeBytes === "number")
	                        m.maxFileSizeBytes = d.maxFileSizeBytes;
	                    else if (typeof d.maxFileSizeBytes === "object")
	                        m.maxFileSizeBytes = new $util.LongBits(d.maxFileSizeBytes.low >>> 0, d.maxFileSizeBytes.high >>> 0).toNumber(true);
	                }
	                if (d.guardrailOverrides != null) {
	                    if (typeof d.guardrailOverrides !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.guardrailOverrides: object expected");
	                    m.guardrailOverrides = $root.perfetto.protos.TraceConfig.GuardrailOverrides.fromObject(d.guardrailOverrides);
	                }
	                if (d.deferredStart != null) {
	                    m.deferredStart = Boolean(d.deferredStart);
	                }
	                if (d.flushPeriodMs != null) {
	                    m.flushPeriodMs = d.flushPeriodMs >>> 0;
	                }
	                if (d.flushTimeoutMs != null) {
	                    m.flushTimeoutMs = d.flushTimeoutMs >>> 0;
	                }
	                if (d.dataSourceStopTimeoutMs != null) {
	                    m.dataSourceStopTimeoutMs = d.dataSourceStopTimeoutMs >>> 0;
	                }
	                if (d.notifyTraceur != null) {
	                    m.notifyTraceur = Boolean(d.notifyTraceur);
	                }
	                if (d.bugreportScore != null) {
	                    m.bugreportScore = d.bugreportScore | 0;
	                }
	                if (d.bugreportFilename != null) {
	                    m.bugreportFilename = String(d.bugreportFilename);
	                }
	                if (d.triggerConfig != null) {
	                    if (typeof d.triggerConfig !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.triggerConfig: object expected");
	                    m.triggerConfig = $root.perfetto.protos.TraceConfig.TriggerConfig.fromObject(d.triggerConfig);
	                }
	                if (d.activateTriggers) {
	                    if (!Array.isArray(d.activateTriggers))
	                        throw TypeError(".perfetto.protos.TraceConfig.activateTriggers: array expected");
	                    m.activateTriggers = [];
	                    for (var i = 0; i < d.activateTriggers.length; ++i) {
	                        m.activateTriggers[i] = String(d.activateTriggers[i]);
	                    }
	                }
	                if (d.incrementalStateConfig != null) {
	                    if (typeof d.incrementalStateConfig !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.incrementalStateConfig: object expected");
	                    m.incrementalStateConfig = $root.perfetto.protos.TraceConfig.IncrementalStateConfig.fromObject(d.incrementalStateConfig);
	                }
	                if (d.allowUserBuildTracing != null) {
	                    m.allowUserBuildTracing = Boolean(d.allowUserBuildTracing);
	                }
	                if (d.uniqueSessionName != null) {
	                    m.uniqueSessionName = String(d.uniqueSessionName);
	                }
	                switch (d.compressionType) {
	                default:
	                    if (typeof d.compressionType === "number") {
	                        m.compressionType = d.compressionType;
	                        break;
	                    }
	                    break;
	                case "COMPRESSION_TYPE_UNSPECIFIED":
	                case 0:
	                    m.compressionType = 0;
	                    break;
	                case "COMPRESSION_TYPE_DEFLATE":
	                case 1:
	                    m.compressionType = 1;
	                    break;
	                }
	                if (d.incidentReportConfig != null) {
	                    if (typeof d.incidentReportConfig !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.incidentReportConfig: object expected");
	                    m.incidentReportConfig = $root.perfetto.protos.TraceConfig.IncidentReportConfig.fromObject(d.incidentReportConfig);
	                }
	                switch (d.statsdLogging) {
	                default:
	                    if (typeof d.statsdLogging === "number") {
	                        m.statsdLogging = d.statsdLogging;
	                        break;
	                    }
	                    break;
	                case "STATSD_LOGGING_UNSPECIFIED":
	                case 0:
	                    m.statsdLogging = 0;
	                    break;
	                case "STATSD_LOGGING_ENABLED":
	                case 1:
	                    m.statsdLogging = 1;
	                    break;
	                case "STATSD_LOGGING_DISABLED":
	                case 2:
	                    m.statsdLogging = 2;
	                    break;
	                }
	                if (d.traceUuidMsb != null) {
	                    if ($util.Long)
	                        (m.traceUuidMsb = $util.Long.fromValue(d.traceUuidMsb)).unsigned = false;
	                    else if (typeof d.traceUuidMsb === "string")
	                        m.traceUuidMsb = parseInt(d.traceUuidMsb, 10);
	                    else if (typeof d.traceUuidMsb === "number")
	                        m.traceUuidMsb = d.traceUuidMsb;
	                    else if (typeof d.traceUuidMsb === "object")
	                        m.traceUuidMsb = new $util.LongBits(d.traceUuidMsb.low >>> 0, d.traceUuidMsb.high >>> 0).toNumber();
	                }
	                if (d.traceUuidLsb != null) {
	                    if ($util.Long)
	                        (m.traceUuidLsb = $util.Long.fromValue(d.traceUuidLsb)).unsigned = false;
	                    else if (typeof d.traceUuidLsb === "string")
	                        m.traceUuidLsb = parseInt(d.traceUuidLsb, 10);
	                    else if (typeof d.traceUuidLsb === "number")
	                        m.traceUuidLsb = d.traceUuidLsb;
	                    else if (typeof d.traceUuidLsb === "object")
	                        m.traceUuidLsb = new $util.LongBits(d.traceUuidLsb.low >>> 0, d.traceUuidLsb.high >>> 0).toNumber();
	                }
	                if (d.traceFilter != null) {
	                    if (typeof d.traceFilter !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.traceFilter: object expected");
	                    m.traceFilter = $root.perfetto.protos.TraceConfig.TraceFilter.fromObject(d.traceFilter);
	                }
	                if (d.androidReportConfig != null) {
	                    if (typeof d.androidReportConfig !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.androidReportConfig: object expected");
	                    m.androidReportConfig = $root.perfetto.protos.TraceConfig.AndroidReportConfig.fromObject(d.androidReportConfig);
	                }
	                if (d.cmdTraceStartDelay != null) {
	                    if (typeof d.cmdTraceStartDelay !== "object")
	                        throw TypeError(".perfetto.protos.TraceConfig.cmdTraceStartDelay: object expected");
	                    m.cmdTraceStartDelay = $root.perfetto.protos.TraceConfig.CmdTraceStartDelay.fromObject(d.cmdTraceStartDelay);
	                }
	                if (d.sessionSemaphores) {
	                    if (!Array.isArray(d.sessionSemaphores))
	                        throw TypeError(".perfetto.protos.TraceConfig.sessionSemaphores: array expected");
	                    m.sessionSemaphores = [];
	                    for (var i = 0; i < d.sessionSemaphores.length; ++i) {
	                        if (typeof d.sessionSemaphores[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceConfig.sessionSemaphores: object expected");
	                        m.sessionSemaphores[i] = $root.perfetto.protos.TraceConfig.SessionSemaphore.fromObject(d.sessionSemaphores[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TraceConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TraceConfig
	             * @static
	             * @param {perfetto.protos.TraceConfig} m TraceConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TraceConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.buffers = [];
	                    d.dataSources = [];
	                    d.producers = [];
	                    d.activateTriggers = [];
	                    d.sessionSemaphores = [];
	                }
	                if (o.defaults) {
	                    d.durationMs = 0;
	                    d.enableExtraGuardrails = false;
	                    d.lockdownMode = o.enums === String ? "LOCKDOWN_UNCHANGED" : 0;
	                    d.statsdMetadata = null;
	                    d.writeIntoFile = false;
	                    d.fileWritePeriodMs = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.maxFileSizeBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.maxFileSizeBytes = o.longs === String ? "0" : 0;
	                    d.guardrailOverrides = null;
	                    d.deferredStart = false;
	                    d.flushPeriodMs = 0;
	                    d.flushTimeoutMs = 0;
	                    d.notifyTraceur = false;
	                    d.triggerConfig = null;
	                    d.allowUserBuildTracing = false;
	                    d.builtinDataSources = null;
	                    d.incrementalStateConfig = null;
	                    d.uniqueSessionName = "";
	                    d.dataSourceStopTimeoutMs = 0;
	                    d.compressionType = o.enums === String ? "COMPRESSION_TYPE_UNSPECIFIED" : 0;
	                    d.incidentReportConfig = null;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.traceUuidMsb = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.traceUuidMsb = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.traceUuidLsb = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.traceUuidLsb = o.longs === String ? "0" : 0;
	                    d.outputPath = "";
	                    d.bugreportScore = 0;
	                    d.statsdLogging = o.enums === String ? "STATSD_LOGGING_UNSPECIFIED" : 0;
	                    d.traceFilter = null;
	                    d.androidReportConfig = null;
	                    d.cmdTraceStartDelay = null;
	                    d.preferSuspendClockForDuration = false;
	                    d.bugreportFilename = "";
	                }
	                if (m.buffers && m.buffers.length) {
	                    d.buffers = [];
	                    for (var j = 0; j < m.buffers.length; ++j) {
	                        d.buffers[j] = $root.perfetto.protos.TraceConfig.BufferConfig.toObject(m.buffers[j], o);
	                    }
	                }
	                if (m.dataSources && m.dataSources.length) {
	                    d.dataSources = [];
	                    for (var j = 0; j < m.dataSources.length; ++j) {
	                        d.dataSources[j] = $root.perfetto.protos.TraceConfig.DataSource.toObject(m.dataSources[j], o);
	                    }
	                }
	                if (m.durationMs != null && m.hasOwnProperty("durationMs")) {
	                    d.durationMs = m.durationMs;
	                }
	                if (m.enableExtraGuardrails != null && m.hasOwnProperty("enableExtraGuardrails")) {
	                    d.enableExtraGuardrails = m.enableExtraGuardrails;
	                }
	                if (m.lockdownMode != null && m.hasOwnProperty("lockdownMode")) {
	                    d.lockdownMode = o.enums === String ? $root.perfetto.protos.TraceConfig.LockdownModeOperation[m.lockdownMode] === undefined ? m.lockdownMode : $root.perfetto.protos.TraceConfig.LockdownModeOperation[m.lockdownMode] : m.lockdownMode;
	                }
	                if (m.producers && m.producers.length) {
	                    d.producers = [];
	                    for (var j = 0; j < m.producers.length; ++j) {
	                        d.producers[j] = $root.perfetto.protos.TraceConfig.ProducerConfig.toObject(m.producers[j], o);
	                    }
	                }
	                if (m.statsdMetadata != null && m.hasOwnProperty("statsdMetadata")) {
	                    d.statsdMetadata = $root.perfetto.protos.TraceConfig.StatsdMetadata.toObject(m.statsdMetadata, o);
	                }
	                if (m.writeIntoFile != null && m.hasOwnProperty("writeIntoFile")) {
	                    d.writeIntoFile = m.writeIntoFile;
	                }
	                if (m.fileWritePeriodMs != null && m.hasOwnProperty("fileWritePeriodMs")) {
	                    d.fileWritePeriodMs = m.fileWritePeriodMs;
	                }
	                if (m.maxFileSizeBytes != null && m.hasOwnProperty("maxFileSizeBytes")) {
	                    if (typeof m.maxFileSizeBytes === "number")
	                        d.maxFileSizeBytes = o.longs === String ? String(m.maxFileSizeBytes) : m.maxFileSizeBytes;
	                    else
	                        d.maxFileSizeBytes = o.longs === String ? $util.Long.prototype.toString.call(m.maxFileSizeBytes) : o.longs === Number ? new $util.LongBits(m.maxFileSizeBytes.low >>> 0, m.maxFileSizeBytes.high >>> 0).toNumber(true) : m.maxFileSizeBytes;
	                }
	                if (m.guardrailOverrides != null && m.hasOwnProperty("guardrailOverrides")) {
	                    d.guardrailOverrides = $root.perfetto.protos.TraceConfig.GuardrailOverrides.toObject(m.guardrailOverrides, o);
	                }
	                if (m.deferredStart != null && m.hasOwnProperty("deferredStart")) {
	                    d.deferredStart = m.deferredStart;
	                }
	                if (m.flushPeriodMs != null && m.hasOwnProperty("flushPeriodMs")) {
	                    d.flushPeriodMs = m.flushPeriodMs;
	                }
	                if (m.flushTimeoutMs != null && m.hasOwnProperty("flushTimeoutMs")) {
	                    d.flushTimeoutMs = m.flushTimeoutMs;
	                }
	                if (m.notifyTraceur != null && m.hasOwnProperty("notifyTraceur")) {
	                    d.notifyTraceur = m.notifyTraceur;
	                }
	                if (m.triggerConfig != null && m.hasOwnProperty("triggerConfig")) {
	                    d.triggerConfig = $root.perfetto.protos.TraceConfig.TriggerConfig.toObject(m.triggerConfig, o);
	                }
	                if (m.activateTriggers && m.activateTriggers.length) {
	                    d.activateTriggers = [];
	                    for (var j = 0; j < m.activateTriggers.length; ++j) {
	                        d.activateTriggers[j] = m.activateTriggers[j];
	                    }
	                }
	                if (m.allowUserBuildTracing != null && m.hasOwnProperty("allowUserBuildTracing")) {
	                    d.allowUserBuildTracing = m.allowUserBuildTracing;
	                }
	                if (m.builtinDataSources != null && m.hasOwnProperty("builtinDataSources")) {
	                    d.builtinDataSources = $root.perfetto.protos.TraceConfig.BuiltinDataSource.toObject(m.builtinDataSources, o);
	                }
	                if (m.incrementalStateConfig != null && m.hasOwnProperty("incrementalStateConfig")) {
	                    d.incrementalStateConfig = $root.perfetto.protos.TraceConfig.IncrementalStateConfig.toObject(m.incrementalStateConfig, o);
	                }
	                if (m.uniqueSessionName != null && m.hasOwnProperty("uniqueSessionName")) {
	                    d.uniqueSessionName = m.uniqueSessionName;
	                }
	                if (m.dataSourceStopTimeoutMs != null && m.hasOwnProperty("dataSourceStopTimeoutMs")) {
	                    d.dataSourceStopTimeoutMs = m.dataSourceStopTimeoutMs;
	                }
	                if (m.compressionType != null && m.hasOwnProperty("compressionType")) {
	                    d.compressionType = o.enums === String ? $root.perfetto.protos.TraceConfig.CompressionType[m.compressionType] === undefined ? m.compressionType : $root.perfetto.protos.TraceConfig.CompressionType[m.compressionType] : m.compressionType;
	                }
	                if (m.incidentReportConfig != null && m.hasOwnProperty("incidentReportConfig")) {
	                    d.incidentReportConfig = $root.perfetto.protos.TraceConfig.IncidentReportConfig.toObject(m.incidentReportConfig, o);
	                }
	                if (m.traceUuidMsb != null && m.hasOwnProperty("traceUuidMsb")) {
	                    if (typeof m.traceUuidMsb === "number")
	                        d.traceUuidMsb = o.longs === String ? String(m.traceUuidMsb) : m.traceUuidMsb;
	                    else
	                        d.traceUuidMsb = o.longs === String ? $util.Long.prototype.toString.call(m.traceUuidMsb) : o.longs === Number ? new $util.LongBits(m.traceUuidMsb.low >>> 0, m.traceUuidMsb.high >>> 0).toNumber() : m.traceUuidMsb;
	                }
	                if (m.traceUuidLsb != null && m.hasOwnProperty("traceUuidLsb")) {
	                    if (typeof m.traceUuidLsb === "number")
	                        d.traceUuidLsb = o.longs === String ? String(m.traceUuidLsb) : m.traceUuidLsb;
	                    else
	                        d.traceUuidLsb = o.longs === String ? $util.Long.prototype.toString.call(m.traceUuidLsb) : o.longs === Number ? new $util.LongBits(m.traceUuidLsb.low >>> 0, m.traceUuidLsb.high >>> 0).toNumber() : m.traceUuidLsb;
	                }
	                if (m.outputPath != null && m.hasOwnProperty("outputPath")) {
	                    d.outputPath = m.outputPath;
	                }
	                if (m.bugreportScore != null && m.hasOwnProperty("bugreportScore")) {
	                    d.bugreportScore = m.bugreportScore;
	                }
	                if (m.statsdLogging != null && m.hasOwnProperty("statsdLogging")) {
	                    d.statsdLogging = o.enums === String ? $root.perfetto.protos.TraceConfig.StatsdLogging[m.statsdLogging] === undefined ? m.statsdLogging : $root.perfetto.protos.TraceConfig.StatsdLogging[m.statsdLogging] : m.statsdLogging;
	                }
	                if (m.traceFilter != null && m.hasOwnProperty("traceFilter")) {
	                    d.traceFilter = $root.perfetto.protos.TraceConfig.TraceFilter.toObject(m.traceFilter, o);
	                }
	                if (m.androidReportConfig != null && m.hasOwnProperty("androidReportConfig")) {
	                    d.androidReportConfig = $root.perfetto.protos.TraceConfig.AndroidReportConfig.toObject(m.androidReportConfig, o);
	                }
	                if (m.cmdTraceStartDelay != null && m.hasOwnProperty("cmdTraceStartDelay")) {
	                    d.cmdTraceStartDelay = $root.perfetto.protos.TraceConfig.CmdTraceStartDelay.toObject(m.cmdTraceStartDelay, o);
	                }
	                if (m.preferSuspendClockForDuration != null && m.hasOwnProperty("preferSuspendClockForDuration")) {
	                    d.preferSuspendClockForDuration = m.preferSuspendClockForDuration;
	                }
	                if (m.bugreportFilename != null && m.hasOwnProperty("bugreportFilename")) {
	                    d.bugreportFilename = m.bugreportFilename;
	                }
	                if (m.sessionSemaphores && m.sessionSemaphores.length) {
	                    d.sessionSemaphores = [];
	                    for (var j = 0; j < m.sessionSemaphores.length; ++j) {
	                        d.sessionSemaphores[j] = $root.perfetto.protos.TraceConfig.SessionSemaphore.toObject(m.sessionSemaphores[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this TraceConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TraceConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TraceConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TraceConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TraceConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TraceConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TraceConfig";
	            };

	            TraceConfig.BufferConfig = (function() {

	                /**
	                 * Properties of a BufferConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IBufferConfig
	                 * @property {number|null} [sizeKb] BufferConfig sizeKb
	                 * @property {perfetto.protos.TraceConfig.BufferConfig.FillPolicy|null} [fillPolicy] BufferConfig fillPolicy
	                 * @property {boolean|null} [transferOnClone] BufferConfig transferOnClone
	                 * @property {boolean|null} [clearBeforeClone] BufferConfig clearBeforeClone
	                 */

	                /**
	                 * Constructs a new BufferConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a BufferConfig.
	                 * @implements IBufferConfig
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IBufferConfig=} [p] Properties to set
	                 */
	                function BufferConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * BufferConfig sizeKb.
	                 * @member {number} sizeKb
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @instance
	                 */
	                BufferConfig.prototype.sizeKb = 0;

	                /**
	                 * BufferConfig fillPolicy.
	                 * @member {perfetto.protos.TraceConfig.BufferConfig.FillPolicy} fillPolicy
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @instance
	                 */
	                BufferConfig.prototype.fillPolicy = 0;

	                /**
	                 * BufferConfig transferOnClone.
	                 * @member {boolean} transferOnClone
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @instance
	                 */
	                BufferConfig.prototype.transferOnClone = false;

	                /**
	                 * BufferConfig clearBeforeClone.
	                 * @member {boolean} clearBeforeClone
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @instance
	                 */
	                BufferConfig.prototype.clearBeforeClone = false;

	                /**
	                 * Creates a new BufferConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IBufferConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.BufferConfig} BufferConfig instance
	                 */
	                BufferConfig.create = function create(properties) {
	                    return new BufferConfig(properties);
	                };

	                /**
	                 * Encodes the specified BufferConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.BufferConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IBufferConfig} m BufferConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                BufferConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.sizeKb != null && Object.hasOwnProperty.call(m, "sizeKb"))
	                        w.uint32(8).uint32(m.sizeKb);
	                    if (m.fillPolicy != null && Object.hasOwnProperty.call(m, "fillPolicy"))
	                        w.uint32(32).int32(m.fillPolicy);
	                    if (m.transferOnClone != null && Object.hasOwnProperty.call(m, "transferOnClone"))
	                        w.uint32(40).bool(m.transferOnClone);
	                    if (m.clearBeforeClone != null && Object.hasOwnProperty.call(m, "clearBeforeClone"))
	                        w.uint32(48).bool(m.clearBeforeClone);
	                    return w;
	                };

	                /**
	                 * Decodes a BufferConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.BufferConfig} BufferConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                BufferConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.BufferConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.sizeKb = r.uint32();
	                                break;
	                            }
	                        case 4: {
	                                m.fillPolicy = r.int32();
	                                break;
	                            }
	                        case 5: {
	                                m.transferOnClone = r.bool();
	                                break;
	                            }
	                        case 6: {
	                                m.clearBeforeClone = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a BufferConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.BufferConfig} BufferConfig
	                 */
	                BufferConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.BufferConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.BufferConfig();
	                    if (d.sizeKb != null) {
	                        m.sizeKb = d.sizeKb >>> 0;
	                    }
	                    switch (d.fillPolicy) {
	                    default:
	                        if (typeof d.fillPolicy === "number") {
	                            m.fillPolicy = d.fillPolicy;
	                            break;
	                        }
	                        break;
	                    case "UNSPECIFIED":
	                    case 0:
	                        m.fillPolicy = 0;
	                        break;
	                    case "RING_BUFFER":
	                    case 1:
	                        m.fillPolicy = 1;
	                        break;
	                    case "DISCARD":
	                    case 2:
	                        m.fillPolicy = 2;
	                        break;
	                    }
	                    if (d.transferOnClone != null) {
	                        m.transferOnClone = Boolean(d.transferOnClone);
	                    }
	                    if (d.clearBeforeClone != null) {
	                        m.clearBeforeClone = Boolean(d.clearBeforeClone);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a BufferConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.BufferConfig} m BufferConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                BufferConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.sizeKb = 0;
	                        d.fillPolicy = o.enums === String ? "UNSPECIFIED" : 0;
	                        d.transferOnClone = false;
	                        d.clearBeforeClone = false;
	                    }
	                    if (m.sizeKb != null && m.hasOwnProperty("sizeKb")) {
	                        d.sizeKb = m.sizeKb;
	                    }
	                    if (m.fillPolicy != null && m.hasOwnProperty("fillPolicy")) {
	                        d.fillPolicy = o.enums === String ? $root.perfetto.protos.TraceConfig.BufferConfig.FillPolicy[m.fillPolicy] === undefined ? m.fillPolicy : $root.perfetto.protos.TraceConfig.BufferConfig.FillPolicy[m.fillPolicy] : m.fillPolicy;
	                    }
	                    if (m.transferOnClone != null && m.hasOwnProperty("transferOnClone")) {
	                        d.transferOnClone = m.transferOnClone;
	                    }
	                    if (m.clearBeforeClone != null && m.hasOwnProperty("clearBeforeClone")) {
	                        d.clearBeforeClone = m.clearBeforeClone;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this BufferConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                BufferConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for BufferConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.BufferConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                BufferConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.BufferConfig";
	                };

	                /**
	                 * FillPolicy enum.
	                 * @name perfetto.protos.TraceConfig.BufferConfig.FillPolicy
	                 * @enum {number}
	                 * @property {number} UNSPECIFIED=0 UNSPECIFIED value
	                 * @property {number} RING_BUFFER=1 RING_BUFFER value
	                 * @property {number} DISCARD=2 DISCARD value
	                 */
	                BufferConfig.FillPolicy = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[0] = "UNSPECIFIED"] = 0;
	                    values[valuesById[1] = "RING_BUFFER"] = 1;
	                    values[valuesById[2] = "DISCARD"] = 2;
	                    return values;
	                })();

	                return BufferConfig;
	            })();

	            TraceConfig.DataSource = (function() {

	                /**
	                 * Properties of a DataSource.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IDataSource
	                 * @property {perfetto.protos.IDataSourceConfig|null} [config] DataSource config
	                 * @property {Array.<string>|null} [producerNameFilter] DataSource producerNameFilter
	                 * @property {Array.<string>|null} [producerNameRegexFilter] DataSource producerNameRegexFilter
	                 */

	                /**
	                 * Constructs a new DataSource.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a DataSource.
	                 * @implements IDataSource
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IDataSource=} [p] Properties to set
	                 */
	                function DataSource(p) {
	                    this.producerNameFilter = [];
	                    this.producerNameRegexFilter = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * DataSource config.
	                 * @member {perfetto.protos.IDataSourceConfig|null|undefined} config
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @instance
	                 */
	                DataSource.prototype.config = null;

	                /**
	                 * DataSource producerNameFilter.
	                 * @member {Array.<string>} producerNameFilter
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @instance
	                 */
	                DataSource.prototype.producerNameFilter = $util.emptyArray;

	                /**
	                 * DataSource producerNameRegexFilter.
	                 * @member {Array.<string>} producerNameRegexFilter
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @instance
	                 */
	                DataSource.prototype.producerNameRegexFilter = $util.emptyArray;

	                /**
	                 * Creates a new DataSource instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IDataSource=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.DataSource} DataSource instance
	                 */
	                DataSource.create = function create(properties) {
	                    return new DataSource(properties);
	                };

	                /**
	                 * Encodes the specified DataSource message. Does not implicitly {@link perfetto.protos.TraceConfig.DataSource.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IDataSource} m DataSource message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                DataSource.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.config != null && Object.hasOwnProperty.call(m, "config"))
	                        $root.perfetto.protos.DataSourceConfig.encode(m.config, w.uint32(10).fork()).ldelim();
	                    if (m.producerNameFilter != null && m.producerNameFilter.length) {
	                        for (var i = 0; i < m.producerNameFilter.length; ++i)
	                            w.uint32(18).string(m.producerNameFilter[i]);
	                    }
	                    if (m.producerNameRegexFilter != null && m.producerNameRegexFilter.length) {
	                        for (var i = 0; i < m.producerNameRegexFilter.length; ++i)
	                            w.uint32(26).string(m.producerNameRegexFilter[i]);
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a DataSource message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.DataSource} DataSource
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                DataSource.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.DataSource();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.config = $root.perfetto.protos.DataSourceConfig.decode(r, r.uint32());
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.producerNameFilter && m.producerNameFilter.length))
	                                    m.producerNameFilter = [];
	                                m.producerNameFilter.push(r.string());
	                                break;
	                            }
	                        case 3: {
	                                if (!(m.producerNameRegexFilter && m.producerNameRegexFilter.length))
	                                    m.producerNameRegexFilter = [];
	                                m.producerNameRegexFilter.push(r.string());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a DataSource message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.DataSource} DataSource
	                 */
	                DataSource.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.DataSource)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.DataSource();
	                    if (d.config != null) {
	                        if (typeof d.config !== "object")
	                            throw TypeError(".perfetto.protos.TraceConfig.DataSource.config: object expected");
	                        m.config = $root.perfetto.protos.DataSourceConfig.fromObject(d.config);
	                    }
	                    if (d.producerNameFilter) {
	                        if (!Array.isArray(d.producerNameFilter))
	                            throw TypeError(".perfetto.protos.TraceConfig.DataSource.producerNameFilter: array expected");
	                        m.producerNameFilter = [];
	                        for (var i = 0; i < d.producerNameFilter.length; ++i) {
	                            m.producerNameFilter[i] = String(d.producerNameFilter[i]);
	                        }
	                    }
	                    if (d.producerNameRegexFilter) {
	                        if (!Array.isArray(d.producerNameRegexFilter))
	                            throw TypeError(".perfetto.protos.TraceConfig.DataSource.producerNameRegexFilter: array expected");
	                        m.producerNameRegexFilter = [];
	                        for (var i = 0; i < d.producerNameRegexFilter.length; ++i) {
	                            m.producerNameRegexFilter[i] = String(d.producerNameRegexFilter[i]);
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a DataSource message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.DataSource} m DataSource
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                DataSource.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.producerNameFilter = [];
	                        d.producerNameRegexFilter = [];
	                    }
	                    if (o.defaults) {
	                        d.config = null;
	                    }
	                    if (m.config != null && m.hasOwnProperty("config")) {
	                        d.config = $root.perfetto.protos.DataSourceConfig.toObject(m.config, o);
	                    }
	                    if (m.producerNameFilter && m.producerNameFilter.length) {
	                        d.producerNameFilter = [];
	                        for (var j = 0; j < m.producerNameFilter.length; ++j) {
	                            d.producerNameFilter[j] = m.producerNameFilter[j];
	                        }
	                    }
	                    if (m.producerNameRegexFilter && m.producerNameRegexFilter.length) {
	                        d.producerNameRegexFilter = [];
	                        for (var j = 0; j < m.producerNameRegexFilter.length; ++j) {
	                            d.producerNameRegexFilter[j] = m.producerNameRegexFilter[j];
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this DataSource to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                DataSource.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for DataSource
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.DataSource
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                DataSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.DataSource";
	                };

	                return DataSource;
	            })();

	            TraceConfig.BuiltinDataSource = (function() {

	                /**
	                 * Properties of a BuiltinDataSource.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IBuiltinDataSource
	                 * @property {boolean|null} [disableClockSnapshotting] BuiltinDataSource disableClockSnapshotting
	                 * @property {boolean|null} [disableTraceConfig] BuiltinDataSource disableTraceConfig
	                 * @property {boolean|null} [disableSystemInfo] BuiltinDataSource disableSystemInfo
	                 * @property {boolean|null} [disableServiceEvents] BuiltinDataSource disableServiceEvents
	                 * @property {perfetto.protos.BuiltinClock|null} [primaryTraceClock] BuiltinDataSource primaryTraceClock
	                 * @property {number|null} [snapshotIntervalMs] BuiltinDataSource snapshotIntervalMs
	                 * @property {boolean|null} [preferSuspendClockForSnapshot] BuiltinDataSource preferSuspendClockForSnapshot
	                 * @property {boolean|null} [disableChunkUsageHistograms] BuiltinDataSource disableChunkUsageHistograms
	                 */

	                /**
	                 * Constructs a new BuiltinDataSource.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a BuiltinDataSource.
	                 * @implements IBuiltinDataSource
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IBuiltinDataSource=} [p] Properties to set
	                 */
	                function BuiltinDataSource(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * BuiltinDataSource disableClockSnapshotting.
	                 * @member {boolean} disableClockSnapshotting
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.disableClockSnapshotting = false;

	                /**
	                 * BuiltinDataSource disableTraceConfig.
	                 * @member {boolean} disableTraceConfig
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.disableTraceConfig = false;

	                /**
	                 * BuiltinDataSource disableSystemInfo.
	                 * @member {boolean} disableSystemInfo
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.disableSystemInfo = false;

	                /**
	                 * BuiltinDataSource disableServiceEvents.
	                 * @member {boolean} disableServiceEvents
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.disableServiceEvents = false;

	                /**
	                 * BuiltinDataSource primaryTraceClock.
	                 * @member {perfetto.protos.BuiltinClock} primaryTraceClock
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.primaryTraceClock = 0;

	                /**
	                 * BuiltinDataSource snapshotIntervalMs.
	                 * @member {number} snapshotIntervalMs
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.snapshotIntervalMs = 0;

	                /**
	                 * BuiltinDataSource preferSuspendClockForSnapshot.
	                 * @member {boolean} preferSuspendClockForSnapshot
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.preferSuspendClockForSnapshot = false;

	                /**
	                 * BuiltinDataSource disableChunkUsageHistograms.
	                 * @member {boolean} disableChunkUsageHistograms
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 */
	                BuiltinDataSource.prototype.disableChunkUsageHistograms = false;

	                /**
	                 * Creates a new BuiltinDataSource instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IBuiltinDataSource=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.BuiltinDataSource} BuiltinDataSource instance
	                 */
	                BuiltinDataSource.create = function create(properties) {
	                    return new BuiltinDataSource(properties);
	                };

	                /**
	                 * Encodes the specified BuiltinDataSource message. Does not implicitly {@link perfetto.protos.TraceConfig.BuiltinDataSource.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IBuiltinDataSource} m BuiltinDataSource message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                BuiltinDataSource.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.disableClockSnapshotting != null && Object.hasOwnProperty.call(m, "disableClockSnapshotting"))
	                        w.uint32(8).bool(m.disableClockSnapshotting);
	                    if (m.disableTraceConfig != null && Object.hasOwnProperty.call(m, "disableTraceConfig"))
	                        w.uint32(16).bool(m.disableTraceConfig);
	                    if (m.disableSystemInfo != null && Object.hasOwnProperty.call(m, "disableSystemInfo"))
	                        w.uint32(24).bool(m.disableSystemInfo);
	                    if (m.disableServiceEvents != null && Object.hasOwnProperty.call(m, "disableServiceEvents"))
	                        w.uint32(32).bool(m.disableServiceEvents);
	                    if (m.primaryTraceClock != null && Object.hasOwnProperty.call(m, "primaryTraceClock"))
	                        w.uint32(40).int32(m.primaryTraceClock);
	                    if (m.snapshotIntervalMs != null && Object.hasOwnProperty.call(m, "snapshotIntervalMs"))
	                        w.uint32(48).uint32(m.snapshotIntervalMs);
	                    if (m.preferSuspendClockForSnapshot != null && Object.hasOwnProperty.call(m, "preferSuspendClockForSnapshot"))
	                        w.uint32(56).bool(m.preferSuspendClockForSnapshot);
	                    if (m.disableChunkUsageHistograms != null && Object.hasOwnProperty.call(m, "disableChunkUsageHistograms"))
	                        w.uint32(64).bool(m.disableChunkUsageHistograms);
	                    return w;
	                };

	                /**
	                 * Decodes a BuiltinDataSource message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.BuiltinDataSource} BuiltinDataSource
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                BuiltinDataSource.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.BuiltinDataSource();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.disableClockSnapshotting = r.bool();
	                                break;
	                            }
	                        case 2: {
	                                m.disableTraceConfig = r.bool();
	                                break;
	                            }
	                        case 3: {
	                                m.disableSystemInfo = r.bool();
	                                break;
	                            }
	                        case 4: {
	                                m.disableServiceEvents = r.bool();
	                                break;
	                            }
	                        case 5: {
	                                m.primaryTraceClock = r.int32();
	                                break;
	                            }
	                        case 6: {
	                                m.snapshotIntervalMs = r.uint32();
	                                break;
	                            }
	                        case 7: {
	                                m.preferSuspendClockForSnapshot = r.bool();
	                                break;
	                            }
	                        case 8: {
	                                m.disableChunkUsageHistograms = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a BuiltinDataSource message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.BuiltinDataSource} BuiltinDataSource
	                 */
	                BuiltinDataSource.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.BuiltinDataSource)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.BuiltinDataSource();
	                    if (d.disableClockSnapshotting != null) {
	                        m.disableClockSnapshotting = Boolean(d.disableClockSnapshotting);
	                    }
	                    if (d.disableTraceConfig != null) {
	                        m.disableTraceConfig = Boolean(d.disableTraceConfig);
	                    }
	                    if (d.disableSystemInfo != null) {
	                        m.disableSystemInfo = Boolean(d.disableSystemInfo);
	                    }
	                    if (d.disableServiceEvents != null) {
	                        m.disableServiceEvents = Boolean(d.disableServiceEvents);
	                    }
	                    switch (d.primaryTraceClock) {
	                    default:
	                        if (typeof d.primaryTraceClock === "number") {
	                            m.primaryTraceClock = d.primaryTraceClock;
	                            break;
	                        }
	                        break;
	                    case "BUILTIN_CLOCK_UNKNOWN":
	                    case 0:
	                        m.primaryTraceClock = 0;
	                        break;
	                    case "BUILTIN_CLOCK_REALTIME":
	                    case 1:
	                        m.primaryTraceClock = 1;
	                        break;
	                    case "BUILTIN_CLOCK_REALTIME_COARSE":
	                    case 2:
	                        m.primaryTraceClock = 2;
	                        break;
	                    case "BUILTIN_CLOCK_MONOTONIC":
	                    case 3:
	                        m.primaryTraceClock = 3;
	                        break;
	                    case "BUILTIN_CLOCK_MONOTONIC_COARSE":
	                    case 4:
	                        m.primaryTraceClock = 4;
	                        break;
	                    case "BUILTIN_CLOCK_MONOTONIC_RAW":
	                    case 5:
	                        m.primaryTraceClock = 5;
	                        break;
	                    case "BUILTIN_CLOCK_BOOTTIME":
	                    case 6:
	                        m.primaryTraceClock = 6;
	                        break;
	                    case "BUILTIN_CLOCK_TSC":
	                    case 9:
	                        m.primaryTraceClock = 9;
	                        break;
	                    case "BUILTIN_CLOCK_PERF":
	                    case 10:
	                        m.primaryTraceClock = 10;
	                        break;
	                    case "BUILTIN_CLOCK_MAX_ID":
	                    case 63:
	                        m.primaryTraceClock = 63;
	                        break;
	                    }
	                    if (d.snapshotIntervalMs != null) {
	                        m.snapshotIntervalMs = d.snapshotIntervalMs >>> 0;
	                    }
	                    if (d.preferSuspendClockForSnapshot != null) {
	                        m.preferSuspendClockForSnapshot = Boolean(d.preferSuspendClockForSnapshot);
	                    }
	                    if (d.disableChunkUsageHistograms != null) {
	                        m.disableChunkUsageHistograms = Boolean(d.disableChunkUsageHistograms);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a BuiltinDataSource message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.BuiltinDataSource} m BuiltinDataSource
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                BuiltinDataSource.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.disableClockSnapshotting = false;
	                        d.disableTraceConfig = false;
	                        d.disableSystemInfo = false;
	                        d.disableServiceEvents = false;
	                        d.primaryTraceClock = o.enums === String ? "BUILTIN_CLOCK_UNKNOWN" : 0;
	                        d.snapshotIntervalMs = 0;
	                        d.preferSuspendClockForSnapshot = false;
	                        d.disableChunkUsageHistograms = false;
	                    }
	                    if (m.disableClockSnapshotting != null && m.hasOwnProperty("disableClockSnapshotting")) {
	                        d.disableClockSnapshotting = m.disableClockSnapshotting;
	                    }
	                    if (m.disableTraceConfig != null && m.hasOwnProperty("disableTraceConfig")) {
	                        d.disableTraceConfig = m.disableTraceConfig;
	                    }
	                    if (m.disableSystemInfo != null && m.hasOwnProperty("disableSystemInfo")) {
	                        d.disableSystemInfo = m.disableSystemInfo;
	                    }
	                    if (m.disableServiceEvents != null && m.hasOwnProperty("disableServiceEvents")) {
	                        d.disableServiceEvents = m.disableServiceEvents;
	                    }
	                    if (m.primaryTraceClock != null && m.hasOwnProperty("primaryTraceClock")) {
	                        d.primaryTraceClock = o.enums === String ? $root.perfetto.protos.BuiltinClock[m.primaryTraceClock] === undefined ? m.primaryTraceClock : $root.perfetto.protos.BuiltinClock[m.primaryTraceClock] : m.primaryTraceClock;
	                    }
	                    if (m.snapshotIntervalMs != null && m.hasOwnProperty("snapshotIntervalMs")) {
	                        d.snapshotIntervalMs = m.snapshotIntervalMs;
	                    }
	                    if (m.preferSuspendClockForSnapshot != null && m.hasOwnProperty("preferSuspendClockForSnapshot")) {
	                        d.preferSuspendClockForSnapshot = m.preferSuspendClockForSnapshot;
	                    }
	                    if (m.disableChunkUsageHistograms != null && m.hasOwnProperty("disableChunkUsageHistograms")) {
	                        d.disableChunkUsageHistograms = m.disableChunkUsageHistograms;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this BuiltinDataSource to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                BuiltinDataSource.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for BuiltinDataSource
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.BuiltinDataSource
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                BuiltinDataSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.BuiltinDataSource";
	                };

	                return BuiltinDataSource;
	            })();

	            /**
	             * LockdownModeOperation enum.
	             * @name perfetto.protos.TraceConfig.LockdownModeOperation
	             * @enum {number}
	             * @property {number} LOCKDOWN_UNCHANGED=0 LOCKDOWN_UNCHANGED value
	             * @property {number} LOCKDOWN_CLEAR=1 LOCKDOWN_CLEAR value
	             * @property {number} LOCKDOWN_SET=2 LOCKDOWN_SET value
	             */
	            TraceConfig.LockdownModeOperation = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "LOCKDOWN_UNCHANGED"] = 0;
	                values[valuesById[1] = "LOCKDOWN_CLEAR"] = 1;
	                values[valuesById[2] = "LOCKDOWN_SET"] = 2;
	                return values;
	            })();

	            TraceConfig.ProducerConfig = (function() {

	                /**
	                 * Properties of a ProducerConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IProducerConfig
	                 * @property {string|null} [producerName] ProducerConfig producerName
	                 * @property {number|null} [shmSizeKb] ProducerConfig shmSizeKb
	                 * @property {number|null} [pageSizeKb] ProducerConfig pageSizeKb
	                 */

	                /**
	                 * Constructs a new ProducerConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a ProducerConfig.
	                 * @implements IProducerConfig
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IProducerConfig=} [p] Properties to set
	                 */
	                function ProducerConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * ProducerConfig producerName.
	                 * @member {string} producerName
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @instance
	                 */
	                ProducerConfig.prototype.producerName = "";

	                /**
	                 * ProducerConfig shmSizeKb.
	                 * @member {number} shmSizeKb
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @instance
	                 */
	                ProducerConfig.prototype.shmSizeKb = 0;

	                /**
	                 * ProducerConfig pageSizeKb.
	                 * @member {number} pageSizeKb
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @instance
	                 */
	                ProducerConfig.prototype.pageSizeKb = 0;

	                /**
	                 * Creates a new ProducerConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IProducerConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.ProducerConfig} ProducerConfig instance
	                 */
	                ProducerConfig.create = function create(properties) {
	                    return new ProducerConfig(properties);
	                };

	                /**
	                 * Encodes the specified ProducerConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.ProducerConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IProducerConfig} m ProducerConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                ProducerConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.producerName != null && Object.hasOwnProperty.call(m, "producerName"))
	                        w.uint32(10).string(m.producerName);
	                    if (m.shmSizeKb != null && Object.hasOwnProperty.call(m, "shmSizeKb"))
	                        w.uint32(16).uint32(m.shmSizeKb);
	                    if (m.pageSizeKb != null && Object.hasOwnProperty.call(m, "pageSizeKb"))
	                        w.uint32(24).uint32(m.pageSizeKb);
	                    return w;
	                };

	                /**
	                 * Decodes a ProducerConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.ProducerConfig} ProducerConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                ProducerConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.ProducerConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.producerName = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.shmSizeKb = r.uint32();
	                                break;
	                            }
	                        case 3: {
	                                m.pageSizeKb = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a ProducerConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.ProducerConfig} ProducerConfig
	                 */
	                ProducerConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.ProducerConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.ProducerConfig();
	                    if (d.producerName != null) {
	                        m.producerName = String(d.producerName);
	                    }
	                    if (d.shmSizeKb != null) {
	                        m.shmSizeKb = d.shmSizeKb >>> 0;
	                    }
	                    if (d.pageSizeKb != null) {
	                        m.pageSizeKb = d.pageSizeKb >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a ProducerConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ProducerConfig} m ProducerConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                ProducerConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.producerName = "";
	                        d.shmSizeKb = 0;
	                        d.pageSizeKb = 0;
	                    }
	                    if (m.producerName != null && m.hasOwnProperty("producerName")) {
	                        d.producerName = m.producerName;
	                    }
	                    if (m.shmSizeKb != null && m.hasOwnProperty("shmSizeKb")) {
	                        d.shmSizeKb = m.shmSizeKb;
	                    }
	                    if (m.pageSizeKb != null && m.hasOwnProperty("pageSizeKb")) {
	                        d.pageSizeKb = m.pageSizeKb;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this ProducerConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                ProducerConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for ProducerConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.ProducerConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                ProducerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.ProducerConfig";
	                };

	                return ProducerConfig;
	            })();

	            TraceConfig.StatsdMetadata = (function() {

	                /**
	                 * Properties of a StatsdMetadata.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IStatsdMetadata
	                 * @property {number|null} [triggeringAlertId] StatsdMetadata triggeringAlertId
	                 * @property {number|null} [triggeringConfigUid] StatsdMetadata triggeringConfigUid
	                 * @property {number|null} [triggeringConfigId] StatsdMetadata triggeringConfigId
	                 * @property {number|null} [triggeringSubscriptionId] StatsdMetadata triggeringSubscriptionId
	                 */

	                /**
	                 * Constructs a new StatsdMetadata.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a StatsdMetadata.
	                 * @implements IStatsdMetadata
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IStatsdMetadata=} [p] Properties to set
	                 */
	                function StatsdMetadata(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * StatsdMetadata triggeringAlertId.
	                 * @member {number} triggeringAlertId
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @instance
	                 */
	                StatsdMetadata.prototype.triggeringAlertId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * StatsdMetadata triggeringConfigUid.
	                 * @member {number} triggeringConfigUid
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @instance
	                 */
	                StatsdMetadata.prototype.triggeringConfigUid = 0;

	                /**
	                 * StatsdMetadata triggeringConfigId.
	                 * @member {number} triggeringConfigId
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @instance
	                 */
	                StatsdMetadata.prototype.triggeringConfigId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * StatsdMetadata triggeringSubscriptionId.
	                 * @member {number} triggeringSubscriptionId
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @instance
	                 */
	                StatsdMetadata.prototype.triggeringSubscriptionId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * Creates a new StatsdMetadata instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IStatsdMetadata=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.StatsdMetadata} StatsdMetadata instance
	                 */
	                StatsdMetadata.create = function create(properties) {
	                    return new StatsdMetadata(properties);
	                };

	                /**
	                 * Encodes the specified StatsdMetadata message. Does not implicitly {@link perfetto.protos.TraceConfig.StatsdMetadata.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IStatsdMetadata} m StatsdMetadata message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                StatsdMetadata.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.triggeringAlertId != null && Object.hasOwnProperty.call(m, "triggeringAlertId"))
	                        w.uint32(8).int64(m.triggeringAlertId);
	                    if (m.triggeringConfigUid != null && Object.hasOwnProperty.call(m, "triggeringConfigUid"))
	                        w.uint32(16).int32(m.triggeringConfigUid);
	                    if (m.triggeringConfigId != null && Object.hasOwnProperty.call(m, "triggeringConfigId"))
	                        w.uint32(24).int64(m.triggeringConfigId);
	                    if (m.triggeringSubscriptionId != null && Object.hasOwnProperty.call(m, "triggeringSubscriptionId"))
	                        w.uint32(32).int64(m.triggeringSubscriptionId);
	                    return w;
	                };

	                /**
	                 * Decodes a StatsdMetadata message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.StatsdMetadata} StatsdMetadata
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                StatsdMetadata.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.StatsdMetadata();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.triggeringAlertId = r.int64();
	                                break;
	                            }
	                        case 2: {
	                                m.triggeringConfigUid = r.int32();
	                                break;
	                            }
	                        case 3: {
	                                m.triggeringConfigId = r.int64();
	                                break;
	                            }
	                        case 4: {
	                                m.triggeringSubscriptionId = r.int64();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a StatsdMetadata message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.StatsdMetadata} StatsdMetadata
	                 */
	                StatsdMetadata.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.StatsdMetadata)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.StatsdMetadata();
	                    if (d.triggeringAlertId != null) {
	                        if ($util.Long)
	                            (m.triggeringAlertId = $util.Long.fromValue(d.triggeringAlertId)).unsigned = false;
	                        else if (typeof d.triggeringAlertId === "string")
	                            m.triggeringAlertId = parseInt(d.triggeringAlertId, 10);
	                        else if (typeof d.triggeringAlertId === "number")
	                            m.triggeringAlertId = d.triggeringAlertId;
	                        else if (typeof d.triggeringAlertId === "object")
	                            m.triggeringAlertId = new $util.LongBits(d.triggeringAlertId.low >>> 0, d.triggeringAlertId.high >>> 0).toNumber();
	                    }
	                    if (d.triggeringConfigUid != null) {
	                        m.triggeringConfigUid = d.triggeringConfigUid | 0;
	                    }
	                    if (d.triggeringConfigId != null) {
	                        if ($util.Long)
	                            (m.triggeringConfigId = $util.Long.fromValue(d.triggeringConfigId)).unsigned = false;
	                        else if (typeof d.triggeringConfigId === "string")
	                            m.triggeringConfigId = parseInt(d.triggeringConfigId, 10);
	                        else if (typeof d.triggeringConfigId === "number")
	                            m.triggeringConfigId = d.triggeringConfigId;
	                        else if (typeof d.triggeringConfigId === "object")
	                            m.triggeringConfigId = new $util.LongBits(d.triggeringConfigId.low >>> 0, d.triggeringConfigId.high >>> 0).toNumber();
	                    }
	                    if (d.triggeringSubscriptionId != null) {
	                        if ($util.Long)
	                            (m.triggeringSubscriptionId = $util.Long.fromValue(d.triggeringSubscriptionId)).unsigned = false;
	                        else if (typeof d.triggeringSubscriptionId === "string")
	                            m.triggeringSubscriptionId = parseInt(d.triggeringSubscriptionId, 10);
	                        else if (typeof d.triggeringSubscriptionId === "number")
	                            m.triggeringSubscriptionId = d.triggeringSubscriptionId;
	                        else if (typeof d.triggeringSubscriptionId === "object")
	                            m.triggeringSubscriptionId = new $util.LongBits(d.triggeringSubscriptionId.low >>> 0, d.triggeringSubscriptionId.high >>> 0).toNumber();
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a StatsdMetadata message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.StatsdMetadata} m StatsdMetadata
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                StatsdMetadata.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.triggeringAlertId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.triggeringAlertId = o.longs === String ? "0" : 0;
	                        d.triggeringConfigUid = 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.triggeringConfigId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.triggeringConfigId = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.triggeringSubscriptionId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.triggeringSubscriptionId = o.longs === String ? "0" : 0;
	                    }
	                    if (m.triggeringAlertId != null && m.hasOwnProperty("triggeringAlertId")) {
	                        if (typeof m.triggeringAlertId === "number")
	                            d.triggeringAlertId = o.longs === String ? String(m.triggeringAlertId) : m.triggeringAlertId;
	                        else
	                            d.triggeringAlertId = o.longs === String ? $util.Long.prototype.toString.call(m.triggeringAlertId) : o.longs === Number ? new $util.LongBits(m.triggeringAlertId.low >>> 0, m.triggeringAlertId.high >>> 0).toNumber() : m.triggeringAlertId;
	                    }
	                    if (m.triggeringConfigUid != null && m.hasOwnProperty("triggeringConfigUid")) {
	                        d.triggeringConfigUid = m.triggeringConfigUid;
	                    }
	                    if (m.triggeringConfigId != null && m.hasOwnProperty("triggeringConfigId")) {
	                        if (typeof m.triggeringConfigId === "number")
	                            d.triggeringConfigId = o.longs === String ? String(m.triggeringConfigId) : m.triggeringConfigId;
	                        else
	                            d.triggeringConfigId = o.longs === String ? $util.Long.prototype.toString.call(m.triggeringConfigId) : o.longs === Number ? new $util.LongBits(m.triggeringConfigId.low >>> 0, m.triggeringConfigId.high >>> 0).toNumber() : m.triggeringConfigId;
	                    }
	                    if (m.triggeringSubscriptionId != null && m.hasOwnProperty("triggeringSubscriptionId")) {
	                        if (typeof m.triggeringSubscriptionId === "number")
	                            d.triggeringSubscriptionId = o.longs === String ? String(m.triggeringSubscriptionId) : m.triggeringSubscriptionId;
	                        else
	                            d.triggeringSubscriptionId = o.longs === String ? $util.Long.prototype.toString.call(m.triggeringSubscriptionId) : o.longs === Number ? new $util.LongBits(m.triggeringSubscriptionId.low >>> 0, m.triggeringSubscriptionId.high >>> 0).toNumber() : m.triggeringSubscriptionId;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this StatsdMetadata to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                StatsdMetadata.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for StatsdMetadata
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.StatsdMetadata
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                StatsdMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.StatsdMetadata";
	                };

	                return StatsdMetadata;
	            })();

	            TraceConfig.GuardrailOverrides = (function() {

	                /**
	                 * Properties of a GuardrailOverrides.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IGuardrailOverrides
	                 * @property {number|null} [maxUploadPerDayBytes] GuardrailOverrides maxUploadPerDayBytes
	                 * @property {number|null} [maxTracingBufferSizeKb] GuardrailOverrides maxTracingBufferSizeKb
	                 */

	                /**
	                 * Constructs a new GuardrailOverrides.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a GuardrailOverrides.
	                 * @implements IGuardrailOverrides
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IGuardrailOverrides=} [p] Properties to set
	                 */
	                function GuardrailOverrides(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * GuardrailOverrides maxUploadPerDayBytes.
	                 * @member {number} maxUploadPerDayBytes
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @instance
	                 */
	                GuardrailOverrides.prototype.maxUploadPerDayBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * GuardrailOverrides maxTracingBufferSizeKb.
	                 * @member {number} maxTracingBufferSizeKb
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @instance
	                 */
	                GuardrailOverrides.prototype.maxTracingBufferSizeKb = 0;

	                /**
	                 * Creates a new GuardrailOverrides instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IGuardrailOverrides=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.GuardrailOverrides} GuardrailOverrides instance
	                 */
	                GuardrailOverrides.create = function create(properties) {
	                    return new GuardrailOverrides(properties);
	                };

	                /**
	                 * Encodes the specified GuardrailOverrides message. Does not implicitly {@link perfetto.protos.TraceConfig.GuardrailOverrides.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IGuardrailOverrides} m GuardrailOverrides message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                GuardrailOverrides.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.maxUploadPerDayBytes != null && Object.hasOwnProperty.call(m, "maxUploadPerDayBytes"))
	                        w.uint32(8).uint64(m.maxUploadPerDayBytes);
	                    if (m.maxTracingBufferSizeKb != null && Object.hasOwnProperty.call(m, "maxTracingBufferSizeKb"))
	                        w.uint32(16).uint32(m.maxTracingBufferSizeKb);
	                    return w;
	                };

	                /**
	                 * Decodes a GuardrailOverrides message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.GuardrailOverrides} GuardrailOverrides
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                GuardrailOverrides.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.GuardrailOverrides();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.maxUploadPerDayBytes = r.uint64();
	                                break;
	                            }
	                        case 2: {
	                                m.maxTracingBufferSizeKb = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a GuardrailOverrides message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.GuardrailOverrides} GuardrailOverrides
	                 */
	                GuardrailOverrides.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.GuardrailOverrides)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.GuardrailOverrides();
	                    if (d.maxUploadPerDayBytes != null) {
	                        if ($util.Long)
	                            (m.maxUploadPerDayBytes = $util.Long.fromValue(d.maxUploadPerDayBytes)).unsigned = true;
	                        else if (typeof d.maxUploadPerDayBytes === "string")
	                            m.maxUploadPerDayBytes = parseInt(d.maxUploadPerDayBytes, 10);
	                        else if (typeof d.maxUploadPerDayBytes === "number")
	                            m.maxUploadPerDayBytes = d.maxUploadPerDayBytes;
	                        else if (typeof d.maxUploadPerDayBytes === "object")
	                            m.maxUploadPerDayBytes = new $util.LongBits(d.maxUploadPerDayBytes.low >>> 0, d.maxUploadPerDayBytes.high >>> 0).toNumber(true);
	                    }
	                    if (d.maxTracingBufferSizeKb != null) {
	                        m.maxTracingBufferSizeKb = d.maxTracingBufferSizeKb >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a GuardrailOverrides message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.GuardrailOverrides} m GuardrailOverrides
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                GuardrailOverrides.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.maxUploadPerDayBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.maxUploadPerDayBytes = o.longs === String ? "0" : 0;
	                        d.maxTracingBufferSizeKb = 0;
	                    }
	                    if (m.maxUploadPerDayBytes != null && m.hasOwnProperty("maxUploadPerDayBytes")) {
	                        if (typeof m.maxUploadPerDayBytes === "number")
	                            d.maxUploadPerDayBytes = o.longs === String ? String(m.maxUploadPerDayBytes) : m.maxUploadPerDayBytes;
	                        else
	                            d.maxUploadPerDayBytes = o.longs === String ? $util.Long.prototype.toString.call(m.maxUploadPerDayBytes) : o.longs === Number ? new $util.LongBits(m.maxUploadPerDayBytes.low >>> 0, m.maxUploadPerDayBytes.high >>> 0).toNumber(true) : m.maxUploadPerDayBytes;
	                    }
	                    if (m.maxTracingBufferSizeKb != null && m.hasOwnProperty("maxTracingBufferSizeKb")) {
	                        d.maxTracingBufferSizeKb = m.maxTracingBufferSizeKb;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this GuardrailOverrides to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                GuardrailOverrides.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for GuardrailOverrides
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.GuardrailOverrides
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                GuardrailOverrides.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.GuardrailOverrides";
	                };

	                return GuardrailOverrides;
	            })();

	            TraceConfig.TriggerConfig = (function() {

	                /**
	                 * Properties of a TriggerConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface ITriggerConfig
	                 * @property {perfetto.protos.TraceConfig.TriggerConfig.TriggerMode|null} [triggerMode] TriggerConfig triggerMode
	                 * @property {boolean|null} [useCloneSnapshotIfAvailable] TriggerConfig useCloneSnapshotIfAvailable
	                 * @property {Array.<perfetto.protos.TraceConfig.TriggerConfig.ITrigger>|null} [triggers] TriggerConfig triggers
	                 * @property {number|null} [triggerTimeoutMs] TriggerConfig triggerTimeoutMs
	                 */

	                /**
	                 * Constructs a new TriggerConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a TriggerConfig.
	                 * @implements ITriggerConfig
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.ITriggerConfig=} [p] Properties to set
	                 */
	                function TriggerConfig(p) {
	                    this.triggers = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * TriggerConfig triggerMode.
	                 * @member {perfetto.protos.TraceConfig.TriggerConfig.TriggerMode} triggerMode
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @instance
	                 */
	                TriggerConfig.prototype.triggerMode = 0;

	                /**
	                 * TriggerConfig useCloneSnapshotIfAvailable.
	                 * @member {boolean} useCloneSnapshotIfAvailable
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @instance
	                 */
	                TriggerConfig.prototype.useCloneSnapshotIfAvailable = false;

	                /**
	                 * TriggerConfig triggers.
	                 * @member {Array.<perfetto.protos.TraceConfig.TriggerConfig.ITrigger>} triggers
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @instance
	                 */
	                TriggerConfig.prototype.triggers = $util.emptyArray;

	                /**
	                 * TriggerConfig triggerTimeoutMs.
	                 * @member {number} triggerTimeoutMs
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @instance
	                 */
	                TriggerConfig.prototype.triggerTimeoutMs = 0;

	                /**
	                 * Creates a new TriggerConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ITriggerConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.TriggerConfig} TriggerConfig instance
	                 */
	                TriggerConfig.create = function create(properties) {
	                    return new TriggerConfig(properties);
	                };

	                /**
	                 * Encodes the specified TriggerConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.TriggerConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ITriggerConfig} m TriggerConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                TriggerConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.triggerMode != null && Object.hasOwnProperty.call(m, "triggerMode"))
	                        w.uint32(8).int32(m.triggerMode);
	                    if (m.triggers != null && m.triggers.length) {
	                        for (var i = 0; i < m.triggers.length; ++i)
	                            $root.perfetto.protos.TraceConfig.TriggerConfig.Trigger.encode(m.triggers[i], w.uint32(18).fork()).ldelim();
	                    }
	                    if (m.triggerTimeoutMs != null && Object.hasOwnProperty.call(m, "triggerTimeoutMs"))
	                        w.uint32(24).uint32(m.triggerTimeoutMs);
	                    if (m.useCloneSnapshotIfAvailable != null && Object.hasOwnProperty.call(m, "useCloneSnapshotIfAvailable"))
	                        w.uint32(40).bool(m.useCloneSnapshotIfAvailable);
	                    return w;
	                };

	                /**
	                 * Decodes a TriggerConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.TriggerConfig} TriggerConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                TriggerConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.TriggerConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.triggerMode = r.int32();
	                                break;
	                            }
	                        case 5: {
	                                m.useCloneSnapshotIfAvailable = r.bool();
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.triggers && m.triggers.length))
	                                    m.triggers = [];
	                                m.triggers.push($root.perfetto.protos.TraceConfig.TriggerConfig.Trigger.decode(r, r.uint32()));
	                                break;
	                            }
	                        case 3: {
	                                m.triggerTimeoutMs = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a TriggerConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.TriggerConfig} TriggerConfig
	                 */
	                TriggerConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.TriggerConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.TriggerConfig();
	                    switch (d.triggerMode) {
	                    default:
	                        if (typeof d.triggerMode === "number") {
	                            m.triggerMode = d.triggerMode;
	                            break;
	                        }
	                        break;
	                    case "UNSPECIFIED":
	                    case 0:
	                        m.triggerMode = 0;
	                        break;
	                    case "START_TRACING":
	                    case 1:
	                        m.triggerMode = 1;
	                        break;
	                    case "STOP_TRACING":
	                    case 2:
	                        m.triggerMode = 2;
	                        break;
	                    case "CLONE_SNAPSHOT":
	                    case 4:
	                        m.triggerMode = 4;
	                        break;
	                    }
	                    if (d.useCloneSnapshotIfAvailable != null) {
	                        m.useCloneSnapshotIfAvailable = Boolean(d.useCloneSnapshotIfAvailable);
	                    }
	                    if (d.triggers) {
	                        if (!Array.isArray(d.triggers))
	                            throw TypeError(".perfetto.protos.TraceConfig.TriggerConfig.triggers: array expected");
	                        m.triggers = [];
	                        for (var i = 0; i < d.triggers.length; ++i) {
	                            if (typeof d.triggers[i] !== "object")
	                                throw TypeError(".perfetto.protos.TraceConfig.TriggerConfig.triggers: object expected");
	                            m.triggers[i] = $root.perfetto.protos.TraceConfig.TriggerConfig.Trigger.fromObject(d.triggers[i]);
	                        }
	                    }
	                    if (d.triggerTimeoutMs != null) {
	                        m.triggerTimeoutMs = d.triggerTimeoutMs >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a TriggerConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.TriggerConfig} m TriggerConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                TriggerConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.triggers = [];
	                    }
	                    if (o.defaults) {
	                        d.triggerMode = o.enums === String ? "UNSPECIFIED" : 0;
	                        d.triggerTimeoutMs = 0;
	                        d.useCloneSnapshotIfAvailable = false;
	                    }
	                    if (m.triggerMode != null && m.hasOwnProperty("triggerMode")) {
	                        d.triggerMode = o.enums === String ? $root.perfetto.protos.TraceConfig.TriggerConfig.TriggerMode[m.triggerMode] === undefined ? m.triggerMode : $root.perfetto.protos.TraceConfig.TriggerConfig.TriggerMode[m.triggerMode] : m.triggerMode;
	                    }
	                    if (m.triggers && m.triggers.length) {
	                        d.triggers = [];
	                        for (var j = 0; j < m.triggers.length; ++j) {
	                            d.triggers[j] = $root.perfetto.protos.TraceConfig.TriggerConfig.Trigger.toObject(m.triggers[j], o);
	                        }
	                    }
	                    if (m.triggerTimeoutMs != null && m.hasOwnProperty("triggerTimeoutMs")) {
	                        d.triggerTimeoutMs = m.triggerTimeoutMs;
	                    }
	                    if (m.useCloneSnapshotIfAvailable != null && m.hasOwnProperty("useCloneSnapshotIfAvailable")) {
	                        d.useCloneSnapshotIfAvailable = m.useCloneSnapshotIfAvailable;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this TriggerConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                TriggerConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for TriggerConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                TriggerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.TriggerConfig";
	                };

	                /**
	                 * TriggerMode enum.
	                 * @name perfetto.protos.TraceConfig.TriggerConfig.TriggerMode
	                 * @enum {number}
	                 * @property {number} UNSPECIFIED=0 UNSPECIFIED value
	                 * @property {number} START_TRACING=1 START_TRACING value
	                 * @property {number} STOP_TRACING=2 STOP_TRACING value
	                 * @property {number} CLONE_SNAPSHOT=4 CLONE_SNAPSHOT value
	                 */
	                TriggerConfig.TriggerMode = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[0] = "UNSPECIFIED"] = 0;
	                    values[valuesById[1] = "START_TRACING"] = 1;
	                    values[valuesById[2] = "STOP_TRACING"] = 2;
	                    values[valuesById[4] = "CLONE_SNAPSHOT"] = 4;
	                    return values;
	                })();

	                TriggerConfig.Trigger = (function() {

	                    /**
	                     * Properties of a Trigger.
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                     * @interface ITrigger
	                     * @property {string|null} [name] Trigger name
	                     * @property {string|null} [producerNameRegex] Trigger producerNameRegex
	                     * @property {number|null} [stopDelayMs] Trigger stopDelayMs
	                     * @property {number|null} [maxPer_24H] Trigger maxPer_24H
	                     * @property {number|null} [skipProbability] Trigger skipProbability
	                     */

	                    /**
	                     * Constructs a new Trigger.
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig
	                     * @classdesc Represents a Trigger.
	                     * @implements ITrigger
	                     * @constructor
	                     * @param {perfetto.protos.TraceConfig.TriggerConfig.ITrigger=} [p] Properties to set
	                     */
	                    function Trigger(p) {
	                        if (p)
	                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                                if (p[ks[i]] != null)
	                                    this[ks[i]] = p[ks[i]];
	                    }

	                    /**
	                     * Trigger name.
	                     * @member {string} name
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @instance
	                     */
	                    Trigger.prototype.name = "";

	                    /**
	                     * Trigger producerNameRegex.
	                     * @member {string} producerNameRegex
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @instance
	                     */
	                    Trigger.prototype.producerNameRegex = "";

	                    /**
	                     * Trigger stopDelayMs.
	                     * @member {number} stopDelayMs
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @instance
	                     */
	                    Trigger.prototype.stopDelayMs = 0;

	                    /**
	                     * Trigger maxPer_24H.
	                     * @member {number} maxPer_24H
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @instance
	                     */
	                    Trigger.prototype.maxPer_24H = 0;

	                    /**
	                     * Trigger skipProbability.
	                     * @member {number} skipProbability
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @instance
	                     */
	                    Trigger.prototype.skipProbability = 0;

	                    /**
	                     * Creates a new Trigger instance using the specified properties.
	                     * @function create
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TriggerConfig.ITrigger=} [properties] Properties to set
	                     * @returns {perfetto.protos.TraceConfig.TriggerConfig.Trigger} Trigger instance
	                     */
	                    Trigger.create = function create(properties) {
	                        return new Trigger(properties);
	                    };

	                    /**
	                     * Encodes the specified Trigger message. Does not implicitly {@link perfetto.protos.TraceConfig.TriggerConfig.Trigger.verify|verify} messages.
	                     * @function encode
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TriggerConfig.ITrigger} m Trigger message or plain object to encode
	                     * @param {$protobuf.Writer} [w] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Trigger.encode = function encode(m, w) {
	                        if (!w)
	                            w = $Writer.create();
	                        if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                            w.uint32(10).string(m.name);
	                        if (m.producerNameRegex != null && Object.hasOwnProperty.call(m, "producerNameRegex"))
	                            w.uint32(18).string(m.producerNameRegex);
	                        if (m.stopDelayMs != null && Object.hasOwnProperty.call(m, "stopDelayMs"))
	                            w.uint32(24).uint32(m.stopDelayMs);
	                        if (m.maxPer_24H != null && Object.hasOwnProperty.call(m, "maxPer_24H"))
	                            w.uint32(32).uint32(m.maxPer_24H);
	                        if (m.skipProbability != null && Object.hasOwnProperty.call(m, "skipProbability"))
	                            w.uint32(41).double(m.skipProbability);
	                        return w;
	                    };

	                    /**
	                     * Decodes a Trigger message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                     * @param {number} [l] Message length if known beforehand
	                     * @returns {perfetto.protos.TraceConfig.TriggerConfig.Trigger} Trigger
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Trigger.decode = function decode(r, l) {
	                        if (!(r instanceof $Reader))
	                            r = $Reader.create(r);
	                        var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.TriggerConfig.Trigger();
	                        while (r.pos < c) {
	                            var t = r.uint32();
	                            switch (t >>> 3) {
	                            case 1: {
	                                    m.name = r.string();
	                                    break;
	                                }
	                            case 2: {
	                                    m.producerNameRegex = r.string();
	                                    break;
	                                }
	                            case 3: {
	                                    m.stopDelayMs = r.uint32();
	                                    break;
	                                }
	                            case 4: {
	                                    m.maxPer_24H = r.uint32();
	                                    break;
	                                }
	                            case 5: {
	                                    m.skipProbability = r.double();
	                                    break;
	                                }
	                            default:
	                                r.skipType(t & 7);
	                                break;
	                            }
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a Trigger message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @static
	                     * @param {Object.<string,*>} d Plain object
	                     * @returns {perfetto.protos.TraceConfig.TriggerConfig.Trigger} Trigger
	                     */
	                    Trigger.fromObject = function fromObject(d) {
	                        if (d instanceof $root.perfetto.protos.TraceConfig.TriggerConfig.Trigger)
	                            return d;
	                        var m = new $root.perfetto.protos.TraceConfig.TriggerConfig.Trigger();
	                        if (d.name != null) {
	                            m.name = String(d.name);
	                        }
	                        if (d.producerNameRegex != null) {
	                            m.producerNameRegex = String(d.producerNameRegex);
	                        }
	                        if (d.stopDelayMs != null) {
	                            m.stopDelayMs = d.stopDelayMs >>> 0;
	                        }
	                        if (d.maxPer_24H != null) {
	                            m.maxPer_24H = d.maxPer_24H >>> 0;
	                        }
	                        if (d.skipProbability != null) {
	                            m.skipProbability = Number(d.skipProbability);
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a plain object from a Trigger message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TriggerConfig.Trigger} m Trigger
	                     * @param {$protobuf.IConversionOptions} [o] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    Trigger.toObject = function toObject(m, o) {
	                        if (!o)
	                            o = {};
	                        var d = {};
	                        if (o.defaults) {
	                            d.name = "";
	                            d.producerNameRegex = "";
	                            d.stopDelayMs = 0;
	                            d.maxPer_24H = 0;
	                            d.skipProbability = 0;
	                        }
	                        if (m.name != null && m.hasOwnProperty("name")) {
	                            d.name = m.name;
	                        }
	                        if (m.producerNameRegex != null && m.hasOwnProperty("producerNameRegex")) {
	                            d.producerNameRegex = m.producerNameRegex;
	                        }
	                        if (m.stopDelayMs != null && m.hasOwnProperty("stopDelayMs")) {
	                            d.stopDelayMs = m.stopDelayMs;
	                        }
	                        if (m.maxPer_24H != null && m.hasOwnProperty("maxPer_24H")) {
	                            d.maxPer_24H = m.maxPer_24H;
	                        }
	                        if (m.skipProbability != null && m.hasOwnProperty("skipProbability")) {
	                            d.skipProbability = o.json && !isFinite(m.skipProbability) ? String(m.skipProbability) : m.skipProbability;
	                        }
	                        return d;
	                    };

	                    /**
	                     * Converts this Trigger to JSON.
	                     * @function toJSON
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    Trigger.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                    };

	                    /**
	                     * Gets the default type url for Trigger
	                     * @function getTypeUrl
	                     * @memberof perfetto.protos.TraceConfig.TriggerConfig.Trigger
	                     * @static
	                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                     * @returns {string} The default type url
	                     */
	                    Trigger.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                        if (typeUrlPrefix === undefined) {
	                            typeUrlPrefix = "type.googleapis.com";
	                        }
	                        return typeUrlPrefix + "/perfetto.protos.TraceConfig.TriggerConfig.Trigger";
	                    };

	                    return Trigger;
	                })();

	                return TriggerConfig;
	            })();

	            TraceConfig.IncrementalStateConfig = (function() {

	                /**
	                 * Properties of an IncrementalStateConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IIncrementalStateConfig
	                 * @property {number|null} [clearPeriodMs] IncrementalStateConfig clearPeriodMs
	                 */

	                /**
	                 * Constructs a new IncrementalStateConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents an IncrementalStateConfig.
	                 * @implements IIncrementalStateConfig
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IIncrementalStateConfig=} [p] Properties to set
	                 */
	                function IncrementalStateConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * IncrementalStateConfig clearPeriodMs.
	                 * @member {number} clearPeriodMs
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @instance
	                 */
	                IncrementalStateConfig.prototype.clearPeriodMs = 0;

	                /**
	                 * Creates a new IncrementalStateConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IIncrementalStateConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.IncrementalStateConfig} IncrementalStateConfig instance
	                 */
	                IncrementalStateConfig.create = function create(properties) {
	                    return new IncrementalStateConfig(properties);
	                };

	                /**
	                 * Encodes the specified IncrementalStateConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.IncrementalStateConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IIncrementalStateConfig} m IncrementalStateConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                IncrementalStateConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.clearPeriodMs != null && Object.hasOwnProperty.call(m, "clearPeriodMs"))
	                        w.uint32(8).uint32(m.clearPeriodMs);
	                    return w;
	                };

	                /**
	                 * Decodes an IncrementalStateConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.IncrementalStateConfig} IncrementalStateConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                IncrementalStateConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.IncrementalStateConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.clearPeriodMs = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an IncrementalStateConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.IncrementalStateConfig} IncrementalStateConfig
	                 */
	                IncrementalStateConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.IncrementalStateConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.IncrementalStateConfig();
	                    if (d.clearPeriodMs != null) {
	                        m.clearPeriodMs = d.clearPeriodMs >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an IncrementalStateConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IncrementalStateConfig} m IncrementalStateConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                IncrementalStateConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.clearPeriodMs = 0;
	                    }
	                    if (m.clearPeriodMs != null && m.hasOwnProperty("clearPeriodMs")) {
	                        d.clearPeriodMs = m.clearPeriodMs;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this IncrementalStateConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                IncrementalStateConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for IncrementalStateConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.IncrementalStateConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                IncrementalStateConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.IncrementalStateConfig";
	                };

	                return IncrementalStateConfig;
	            })();

	            /**
	             * CompressionType enum.
	             * @name perfetto.protos.TraceConfig.CompressionType
	             * @enum {number}
	             * @property {number} COMPRESSION_TYPE_UNSPECIFIED=0 COMPRESSION_TYPE_UNSPECIFIED value
	             * @property {number} COMPRESSION_TYPE_DEFLATE=1 COMPRESSION_TYPE_DEFLATE value
	             */
	            TraceConfig.CompressionType = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "COMPRESSION_TYPE_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "COMPRESSION_TYPE_DEFLATE"] = 1;
	                return values;
	            })();

	            TraceConfig.IncidentReportConfig = (function() {

	                /**
	                 * Properties of an IncidentReportConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IIncidentReportConfig
	                 * @property {string|null} [destinationPackage] IncidentReportConfig destinationPackage
	                 * @property {string|null} [destinationClass] IncidentReportConfig destinationClass
	                 * @property {number|null} [privacyLevel] IncidentReportConfig privacyLevel
	                 * @property {boolean|null} [skipIncidentd] IncidentReportConfig skipIncidentd
	                 * @property {boolean|null} [skipDropbox] IncidentReportConfig skipDropbox
	                 */

	                /**
	                 * Constructs a new IncidentReportConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents an IncidentReportConfig.
	                 * @implements IIncidentReportConfig
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IIncidentReportConfig=} [p] Properties to set
	                 */
	                function IncidentReportConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * IncidentReportConfig destinationPackage.
	                 * @member {string} destinationPackage
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @instance
	                 */
	                IncidentReportConfig.prototype.destinationPackage = "";

	                /**
	                 * IncidentReportConfig destinationClass.
	                 * @member {string} destinationClass
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @instance
	                 */
	                IncidentReportConfig.prototype.destinationClass = "";

	                /**
	                 * IncidentReportConfig privacyLevel.
	                 * @member {number} privacyLevel
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @instance
	                 */
	                IncidentReportConfig.prototype.privacyLevel = 0;

	                /**
	                 * IncidentReportConfig skipIncidentd.
	                 * @member {boolean} skipIncidentd
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @instance
	                 */
	                IncidentReportConfig.prototype.skipIncidentd = false;

	                /**
	                 * IncidentReportConfig skipDropbox.
	                 * @member {boolean} skipDropbox
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @instance
	                 */
	                IncidentReportConfig.prototype.skipDropbox = false;

	                /**
	                 * Creates a new IncidentReportConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IIncidentReportConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.IncidentReportConfig} IncidentReportConfig instance
	                 */
	                IncidentReportConfig.create = function create(properties) {
	                    return new IncidentReportConfig(properties);
	                };

	                /**
	                 * Encodes the specified IncidentReportConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.IncidentReportConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IIncidentReportConfig} m IncidentReportConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                IncidentReportConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.destinationPackage != null && Object.hasOwnProperty.call(m, "destinationPackage"))
	                        w.uint32(10).string(m.destinationPackage);
	                    if (m.destinationClass != null && Object.hasOwnProperty.call(m, "destinationClass"))
	                        w.uint32(18).string(m.destinationClass);
	                    if (m.privacyLevel != null && Object.hasOwnProperty.call(m, "privacyLevel"))
	                        w.uint32(24).int32(m.privacyLevel);
	                    if (m.skipDropbox != null && Object.hasOwnProperty.call(m, "skipDropbox"))
	                        w.uint32(32).bool(m.skipDropbox);
	                    if (m.skipIncidentd != null && Object.hasOwnProperty.call(m, "skipIncidentd"))
	                        w.uint32(40).bool(m.skipIncidentd);
	                    return w;
	                };

	                /**
	                 * Decodes an IncidentReportConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.IncidentReportConfig} IncidentReportConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                IncidentReportConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.IncidentReportConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.destinationPackage = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.destinationClass = r.string();
	                                break;
	                            }
	                        case 3: {
	                                m.privacyLevel = r.int32();
	                                break;
	                            }
	                        case 5: {
	                                m.skipIncidentd = r.bool();
	                                break;
	                            }
	                        case 4: {
	                                m.skipDropbox = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an IncidentReportConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.IncidentReportConfig} IncidentReportConfig
	                 */
	                IncidentReportConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.IncidentReportConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.IncidentReportConfig();
	                    if (d.destinationPackage != null) {
	                        m.destinationPackage = String(d.destinationPackage);
	                    }
	                    if (d.destinationClass != null) {
	                        m.destinationClass = String(d.destinationClass);
	                    }
	                    if (d.privacyLevel != null) {
	                        m.privacyLevel = d.privacyLevel | 0;
	                    }
	                    if (d.skipIncidentd != null) {
	                        m.skipIncidentd = Boolean(d.skipIncidentd);
	                    }
	                    if (d.skipDropbox != null) {
	                        m.skipDropbox = Boolean(d.skipDropbox);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an IncidentReportConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IncidentReportConfig} m IncidentReportConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                IncidentReportConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.destinationPackage = "";
	                        d.destinationClass = "";
	                        d.privacyLevel = 0;
	                        d.skipDropbox = false;
	                        d.skipIncidentd = false;
	                    }
	                    if (m.destinationPackage != null && m.hasOwnProperty("destinationPackage")) {
	                        d.destinationPackage = m.destinationPackage;
	                    }
	                    if (m.destinationClass != null && m.hasOwnProperty("destinationClass")) {
	                        d.destinationClass = m.destinationClass;
	                    }
	                    if (m.privacyLevel != null && m.hasOwnProperty("privacyLevel")) {
	                        d.privacyLevel = m.privacyLevel;
	                    }
	                    if (m.skipDropbox != null && m.hasOwnProperty("skipDropbox")) {
	                        d.skipDropbox = m.skipDropbox;
	                    }
	                    if (m.skipIncidentd != null && m.hasOwnProperty("skipIncidentd")) {
	                        d.skipIncidentd = m.skipIncidentd;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this IncidentReportConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                IncidentReportConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for IncidentReportConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.IncidentReportConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                IncidentReportConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.IncidentReportConfig";
	                };

	                return IncidentReportConfig;
	            })();

	            /**
	             * StatsdLogging enum.
	             * @name perfetto.protos.TraceConfig.StatsdLogging
	             * @enum {number}
	             * @property {number} STATSD_LOGGING_UNSPECIFIED=0 STATSD_LOGGING_UNSPECIFIED value
	             * @property {number} STATSD_LOGGING_ENABLED=1 STATSD_LOGGING_ENABLED value
	             * @property {number} STATSD_LOGGING_DISABLED=2 STATSD_LOGGING_DISABLED value
	             */
	            TraceConfig.StatsdLogging = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "STATSD_LOGGING_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "STATSD_LOGGING_ENABLED"] = 1;
	                values[valuesById[2] = "STATSD_LOGGING_DISABLED"] = 2;
	                return values;
	            })();

	            TraceConfig.TraceFilter = (function() {

	                /**
	                 * Properties of a TraceFilter.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface ITraceFilter
	                 * @property {Uint8Array|null} [bytecode] TraceFilter bytecode
	                 * @property {Uint8Array|null} [bytecodeV2] TraceFilter bytecodeV2
	                 * @property {perfetto.protos.TraceConfig.TraceFilter.IStringFilterChain|null} [stringFilterChain] TraceFilter stringFilterChain
	                 */

	                /**
	                 * Constructs a new TraceFilter.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a TraceFilter.
	                 * @implements ITraceFilter
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.ITraceFilter=} [p] Properties to set
	                 */
	                function TraceFilter(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * TraceFilter bytecode.
	                 * @member {Uint8Array} bytecode
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @instance
	                 */
	                TraceFilter.prototype.bytecode = $util.newBuffer([]);

	                /**
	                 * TraceFilter bytecodeV2.
	                 * @member {Uint8Array} bytecodeV2
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @instance
	                 */
	                TraceFilter.prototype.bytecodeV2 = $util.newBuffer([]);

	                /**
	                 * TraceFilter stringFilterChain.
	                 * @member {perfetto.protos.TraceConfig.TraceFilter.IStringFilterChain|null|undefined} stringFilterChain
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @instance
	                 */
	                TraceFilter.prototype.stringFilterChain = null;

	                /**
	                 * Creates a new TraceFilter instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ITraceFilter=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.TraceFilter} TraceFilter instance
	                 */
	                TraceFilter.create = function create(properties) {
	                    return new TraceFilter(properties);
	                };

	                /**
	                 * Encodes the specified TraceFilter message. Does not implicitly {@link perfetto.protos.TraceConfig.TraceFilter.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ITraceFilter} m TraceFilter message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                TraceFilter.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.bytecode != null && Object.hasOwnProperty.call(m, "bytecode"))
	                        w.uint32(10).bytes(m.bytecode);
	                    if (m.bytecodeV2 != null && Object.hasOwnProperty.call(m, "bytecodeV2"))
	                        w.uint32(18).bytes(m.bytecodeV2);
	                    if (m.stringFilterChain != null && Object.hasOwnProperty.call(m, "stringFilterChain"))
	                        $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.encode(m.stringFilterChain, w.uint32(26).fork()).ldelim();
	                    return w;
	                };

	                /**
	                 * Decodes a TraceFilter message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.TraceFilter} TraceFilter
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                TraceFilter.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.TraceFilter();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.bytecode = r.bytes();
	                                break;
	                            }
	                        case 2: {
	                                m.bytecodeV2 = r.bytes();
	                                break;
	                            }
	                        case 3: {
	                                m.stringFilterChain = $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.decode(r, r.uint32());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a TraceFilter message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.TraceFilter} TraceFilter
	                 */
	                TraceFilter.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.TraceFilter)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.TraceFilter();
	                    if (d.bytecode != null) {
	                        if (typeof d.bytecode === "string")
	                            $util.base64.decode(d.bytecode, m.bytecode = $util.newBuffer($util.base64.length(d.bytecode)), 0);
	                        else if (d.bytecode.length >= 0)
	                            m.bytecode = d.bytecode;
	                    }
	                    if (d.bytecodeV2 != null) {
	                        if (typeof d.bytecodeV2 === "string")
	                            $util.base64.decode(d.bytecodeV2, m.bytecodeV2 = $util.newBuffer($util.base64.length(d.bytecodeV2)), 0);
	                        else if (d.bytecodeV2.length >= 0)
	                            m.bytecodeV2 = d.bytecodeV2;
	                    }
	                    if (d.stringFilterChain != null) {
	                        if (typeof d.stringFilterChain !== "object")
	                            throw TypeError(".perfetto.protos.TraceConfig.TraceFilter.stringFilterChain: object expected");
	                        m.stringFilterChain = $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.fromObject(d.stringFilterChain);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a TraceFilter message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.TraceFilter} m TraceFilter
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                TraceFilter.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if (o.bytes === String)
	                            d.bytecode = "";
	                        else {
	                            d.bytecode = [];
	                            if (o.bytes !== Array)
	                                d.bytecode = $util.newBuffer(d.bytecode);
	                        }
	                        if (o.bytes === String)
	                            d.bytecodeV2 = "";
	                        else {
	                            d.bytecodeV2 = [];
	                            if (o.bytes !== Array)
	                                d.bytecodeV2 = $util.newBuffer(d.bytecodeV2);
	                        }
	                        d.stringFilterChain = null;
	                    }
	                    if (m.bytecode != null && m.hasOwnProperty("bytecode")) {
	                        d.bytecode = o.bytes === String ? $util.base64.encode(m.bytecode, 0, m.bytecode.length) : o.bytes === Array ? Array.prototype.slice.call(m.bytecode) : m.bytecode;
	                    }
	                    if (m.bytecodeV2 != null && m.hasOwnProperty("bytecodeV2")) {
	                        d.bytecodeV2 = o.bytes === String ? $util.base64.encode(m.bytecodeV2, 0, m.bytecodeV2.length) : o.bytes === Array ? Array.prototype.slice.call(m.bytecodeV2) : m.bytecodeV2;
	                    }
	                    if (m.stringFilterChain != null && m.hasOwnProperty("stringFilterChain")) {
	                        d.stringFilterChain = $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.toObject(m.stringFilterChain, o);
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this TraceFilter to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                TraceFilter.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for TraceFilter
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.TraceFilter
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                TraceFilter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.TraceFilter";
	                };

	                /**
	                 * StringFilterPolicy enum.
	                 * @name perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy
	                 * @enum {number}
	                 * @property {number} SFP_UNSPECIFIED=0 SFP_UNSPECIFIED value
	                 * @property {number} SFP_MATCH_REDACT_GROUPS=1 SFP_MATCH_REDACT_GROUPS value
	                 * @property {number} SFP_ATRACE_MATCH_REDACT_GROUPS=2 SFP_ATRACE_MATCH_REDACT_GROUPS value
	                 * @property {number} SFP_MATCH_BREAK=3 SFP_MATCH_BREAK value
	                 * @property {number} SFP_ATRACE_MATCH_BREAK=4 SFP_ATRACE_MATCH_BREAK value
	                 * @property {number} SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS=5 SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS value
	                 */
	                TraceFilter.StringFilterPolicy = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[0] = "SFP_UNSPECIFIED"] = 0;
	                    values[valuesById[1] = "SFP_MATCH_REDACT_GROUPS"] = 1;
	                    values[valuesById[2] = "SFP_ATRACE_MATCH_REDACT_GROUPS"] = 2;
	                    values[valuesById[3] = "SFP_MATCH_BREAK"] = 3;
	                    values[valuesById[4] = "SFP_ATRACE_MATCH_BREAK"] = 4;
	                    values[valuesById[5] = "SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS"] = 5;
	                    return values;
	                })();

	                TraceFilter.StringFilterRule = (function() {

	                    /**
	                     * Properties of a StringFilterRule.
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter
	                     * @interface IStringFilterRule
	                     * @property {perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy|null} [policy] StringFilterRule policy
	                     * @property {string|null} [regexPattern] StringFilterRule regexPattern
	                     * @property {string|null} [atracePayloadStartsWith] StringFilterRule atracePayloadStartsWith
	                     */

	                    /**
	                     * Constructs a new StringFilterRule.
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter
	                     * @classdesc Represents a StringFilterRule.
	                     * @implements IStringFilterRule
	                     * @constructor
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.IStringFilterRule=} [p] Properties to set
	                     */
	                    function StringFilterRule(p) {
	                        if (p)
	                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                                if (p[ks[i]] != null)
	                                    this[ks[i]] = p[ks[i]];
	                    }

	                    /**
	                     * StringFilterRule policy.
	                     * @member {perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy} policy
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @instance
	                     */
	                    StringFilterRule.prototype.policy = 0;

	                    /**
	                     * StringFilterRule regexPattern.
	                     * @member {string} regexPattern
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @instance
	                     */
	                    StringFilterRule.prototype.regexPattern = "";

	                    /**
	                     * StringFilterRule atracePayloadStartsWith.
	                     * @member {string} atracePayloadStartsWith
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @instance
	                     */
	                    StringFilterRule.prototype.atracePayloadStartsWith = "";

	                    /**
	                     * Creates a new StringFilterRule instance using the specified properties.
	                     * @function create
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.IStringFilterRule=} [properties] Properties to set
	                     * @returns {perfetto.protos.TraceConfig.TraceFilter.StringFilterRule} StringFilterRule instance
	                     */
	                    StringFilterRule.create = function create(properties) {
	                        return new StringFilterRule(properties);
	                    };

	                    /**
	                     * Encodes the specified StringFilterRule message. Does not implicitly {@link perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.verify|verify} messages.
	                     * @function encode
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.IStringFilterRule} m StringFilterRule message or plain object to encode
	                     * @param {$protobuf.Writer} [w] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    StringFilterRule.encode = function encode(m, w) {
	                        if (!w)
	                            w = $Writer.create();
	                        if (m.policy != null && Object.hasOwnProperty.call(m, "policy"))
	                            w.uint32(8).int32(m.policy);
	                        if (m.regexPattern != null && Object.hasOwnProperty.call(m, "regexPattern"))
	                            w.uint32(18).string(m.regexPattern);
	                        if (m.atracePayloadStartsWith != null && Object.hasOwnProperty.call(m, "atracePayloadStartsWith"))
	                            w.uint32(26).string(m.atracePayloadStartsWith);
	                        return w;
	                    };

	                    /**
	                     * Decodes a StringFilterRule message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                     * @param {number} [l] Message length if known beforehand
	                     * @returns {perfetto.protos.TraceConfig.TraceFilter.StringFilterRule} StringFilterRule
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    StringFilterRule.decode = function decode(r, l) {
	                        if (!(r instanceof $Reader))
	                            r = $Reader.create(r);
	                        var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule();
	                        while (r.pos < c) {
	                            var t = r.uint32();
	                            switch (t >>> 3) {
	                            case 1: {
	                                    m.policy = r.int32();
	                                    break;
	                                }
	                            case 2: {
	                                    m.regexPattern = r.string();
	                                    break;
	                                }
	                            case 3: {
	                                    m.atracePayloadStartsWith = r.string();
	                                    break;
	                                }
	                            default:
	                                r.skipType(t & 7);
	                                break;
	                            }
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a StringFilterRule message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @static
	                     * @param {Object.<string,*>} d Plain object
	                     * @returns {perfetto.protos.TraceConfig.TraceFilter.StringFilterRule} StringFilterRule
	                     */
	                    StringFilterRule.fromObject = function fromObject(d) {
	                        if (d instanceof $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule)
	                            return d;
	                        var m = new $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule();
	                        switch (d.policy) {
	                        default:
	                            if (typeof d.policy === "number") {
	                                m.policy = d.policy;
	                                break;
	                            }
	                            break;
	                        case "SFP_UNSPECIFIED":
	                        case 0:
	                            m.policy = 0;
	                            break;
	                        case "SFP_MATCH_REDACT_GROUPS":
	                        case 1:
	                            m.policy = 1;
	                            break;
	                        case "SFP_ATRACE_MATCH_REDACT_GROUPS":
	                        case 2:
	                            m.policy = 2;
	                            break;
	                        case "SFP_MATCH_BREAK":
	                        case 3:
	                            m.policy = 3;
	                            break;
	                        case "SFP_ATRACE_MATCH_BREAK":
	                        case 4:
	                            m.policy = 4;
	                            break;
	                        case "SFP_ATRACE_REPEATED_SEARCH_REDACT_GROUPS":
	                        case 5:
	                            m.policy = 5;
	                            break;
	                        }
	                        if (d.regexPattern != null) {
	                            m.regexPattern = String(d.regexPattern);
	                        }
	                        if (d.atracePayloadStartsWith != null) {
	                            m.atracePayloadStartsWith = String(d.atracePayloadStartsWith);
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a plain object from a StringFilterRule message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.StringFilterRule} m StringFilterRule
	                     * @param {$protobuf.IConversionOptions} [o] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    StringFilterRule.toObject = function toObject(m, o) {
	                        if (!o)
	                            o = {};
	                        var d = {};
	                        if (o.defaults) {
	                            d.policy = o.enums === String ? "SFP_UNSPECIFIED" : 0;
	                            d.regexPattern = "";
	                            d.atracePayloadStartsWith = "";
	                        }
	                        if (m.policy != null && m.hasOwnProperty("policy")) {
	                            d.policy = o.enums === String ? $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy[m.policy] === undefined ? m.policy : $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterPolicy[m.policy] : m.policy;
	                        }
	                        if (m.regexPattern != null && m.hasOwnProperty("regexPattern")) {
	                            d.regexPattern = m.regexPattern;
	                        }
	                        if (m.atracePayloadStartsWith != null && m.hasOwnProperty("atracePayloadStartsWith")) {
	                            d.atracePayloadStartsWith = m.atracePayloadStartsWith;
	                        }
	                        return d;
	                    };

	                    /**
	                     * Converts this StringFilterRule to JSON.
	                     * @function toJSON
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    StringFilterRule.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                    };

	                    /**
	                     * Gets the default type url for StringFilterRule
	                     * @function getTypeUrl
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterRule
	                     * @static
	                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                     * @returns {string} The default type url
	                     */
	                    StringFilterRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                        if (typeUrlPrefix === undefined) {
	                            typeUrlPrefix = "type.googleapis.com";
	                        }
	                        return typeUrlPrefix + "/perfetto.protos.TraceConfig.TraceFilter.StringFilterRule";
	                    };

	                    return StringFilterRule;
	                })();

	                TraceFilter.StringFilterChain = (function() {

	                    /**
	                     * Properties of a StringFilterChain.
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter
	                     * @interface IStringFilterChain
	                     * @property {Array.<perfetto.protos.TraceConfig.TraceFilter.IStringFilterRule>|null} [rules] StringFilterChain rules
	                     */

	                    /**
	                     * Constructs a new StringFilterChain.
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter
	                     * @classdesc Represents a StringFilterChain.
	                     * @implements IStringFilterChain
	                     * @constructor
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.IStringFilterChain=} [p] Properties to set
	                     */
	                    function StringFilterChain(p) {
	                        this.rules = [];
	                        if (p)
	                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                                if (p[ks[i]] != null)
	                                    this[ks[i]] = p[ks[i]];
	                    }

	                    /**
	                     * StringFilterChain rules.
	                     * @member {Array.<perfetto.protos.TraceConfig.TraceFilter.IStringFilterRule>} rules
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @instance
	                     */
	                    StringFilterChain.prototype.rules = $util.emptyArray;

	                    /**
	                     * Creates a new StringFilterChain instance using the specified properties.
	                     * @function create
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.IStringFilterChain=} [properties] Properties to set
	                     * @returns {perfetto.protos.TraceConfig.TraceFilter.StringFilterChain} StringFilterChain instance
	                     */
	                    StringFilterChain.create = function create(properties) {
	                        return new StringFilterChain(properties);
	                    };

	                    /**
	                     * Encodes the specified StringFilterChain message. Does not implicitly {@link perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.verify|verify} messages.
	                     * @function encode
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.IStringFilterChain} m StringFilterChain message or plain object to encode
	                     * @param {$protobuf.Writer} [w] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    StringFilterChain.encode = function encode(m, w) {
	                        if (!w)
	                            w = $Writer.create();
	                        if (m.rules != null && m.rules.length) {
	                            for (var i = 0; i < m.rules.length; ++i)
	                                $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.encode(m.rules[i], w.uint32(10).fork()).ldelim();
	                        }
	                        return w;
	                    };

	                    /**
	                     * Decodes a StringFilterChain message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                     * @param {number} [l] Message length if known beforehand
	                     * @returns {perfetto.protos.TraceConfig.TraceFilter.StringFilterChain} StringFilterChain
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    StringFilterChain.decode = function decode(r, l) {
	                        if (!(r instanceof $Reader))
	                            r = $Reader.create(r);
	                        var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain();
	                        while (r.pos < c) {
	                            var t = r.uint32();
	                            switch (t >>> 3) {
	                            case 1: {
	                                    if (!(m.rules && m.rules.length))
	                                        m.rules = [];
	                                    m.rules.push($root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.decode(r, r.uint32()));
	                                    break;
	                                }
	                            default:
	                                r.skipType(t & 7);
	                                break;
	                            }
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a StringFilterChain message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @static
	                     * @param {Object.<string,*>} d Plain object
	                     * @returns {perfetto.protos.TraceConfig.TraceFilter.StringFilterChain} StringFilterChain
	                     */
	                    StringFilterChain.fromObject = function fromObject(d) {
	                        if (d instanceof $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain)
	                            return d;
	                        var m = new $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterChain();
	                        if (d.rules) {
	                            if (!Array.isArray(d.rules))
	                                throw TypeError(".perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules: array expected");
	                            m.rules = [];
	                            for (var i = 0; i < d.rules.length; ++i) {
	                                if (typeof d.rules[i] !== "object")
	                                    throw TypeError(".perfetto.protos.TraceConfig.TraceFilter.StringFilterChain.rules: object expected");
	                                m.rules[i] = $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.fromObject(d.rules[i]);
	                            }
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a plain object from a StringFilterChain message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @static
	                     * @param {perfetto.protos.TraceConfig.TraceFilter.StringFilterChain} m StringFilterChain
	                     * @param {$protobuf.IConversionOptions} [o] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    StringFilterChain.toObject = function toObject(m, o) {
	                        if (!o)
	                            o = {};
	                        var d = {};
	                        if (o.arrays || o.defaults) {
	                            d.rules = [];
	                        }
	                        if (m.rules && m.rules.length) {
	                            d.rules = [];
	                            for (var j = 0; j < m.rules.length; ++j) {
	                                d.rules[j] = $root.perfetto.protos.TraceConfig.TraceFilter.StringFilterRule.toObject(m.rules[j], o);
	                            }
	                        }
	                        return d;
	                    };

	                    /**
	                     * Converts this StringFilterChain to JSON.
	                     * @function toJSON
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    StringFilterChain.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                    };

	                    /**
	                     * Gets the default type url for StringFilterChain
	                     * @function getTypeUrl
	                     * @memberof perfetto.protos.TraceConfig.TraceFilter.StringFilterChain
	                     * @static
	                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                     * @returns {string} The default type url
	                     */
	                    StringFilterChain.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                        if (typeUrlPrefix === undefined) {
	                            typeUrlPrefix = "type.googleapis.com";
	                        }
	                        return typeUrlPrefix + "/perfetto.protos.TraceConfig.TraceFilter.StringFilterChain";
	                    };

	                    return StringFilterChain;
	                })();

	                return TraceFilter;
	            })();

	            TraceConfig.AndroidReportConfig = (function() {

	                /**
	                 * Properties of an AndroidReportConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface IAndroidReportConfig
	                 * @property {string|null} [reporterServicePackage] AndroidReportConfig reporterServicePackage
	                 * @property {string|null} [reporterServiceClass] AndroidReportConfig reporterServiceClass
	                 * @property {boolean|null} [skipReport] AndroidReportConfig skipReport
	                 * @property {boolean|null} [usePipeInFrameworkForTesting] AndroidReportConfig usePipeInFrameworkForTesting
	                 */

	                /**
	                 * Constructs a new AndroidReportConfig.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents an AndroidReportConfig.
	                 * @implements IAndroidReportConfig
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.IAndroidReportConfig=} [p] Properties to set
	                 */
	                function AndroidReportConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * AndroidReportConfig reporterServicePackage.
	                 * @member {string} reporterServicePackage
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @instance
	                 */
	                AndroidReportConfig.prototype.reporterServicePackage = "";

	                /**
	                 * AndroidReportConfig reporterServiceClass.
	                 * @member {string} reporterServiceClass
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @instance
	                 */
	                AndroidReportConfig.prototype.reporterServiceClass = "";

	                /**
	                 * AndroidReportConfig skipReport.
	                 * @member {boolean} skipReport
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @instance
	                 */
	                AndroidReportConfig.prototype.skipReport = false;

	                /**
	                 * AndroidReportConfig usePipeInFrameworkForTesting.
	                 * @member {boolean} usePipeInFrameworkForTesting
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @instance
	                 */
	                AndroidReportConfig.prototype.usePipeInFrameworkForTesting = false;

	                /**
	                 * Creates a new AndroidReportConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IAndroidReportConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.AndroidReportConfig} AndroidReportConfig instance
	                 */
	                AndroidReportConfig.create = function create(properties) {
	                    return new AndroidReportConfig(properties);
	                };

	                /**
	                 * Encodes the specified AndroidReportConfig message. Does not implicitly {@link perfetto.protos.TraceConfig.AndroidReportConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.IAndroidReportConfig} m AndroidReportConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                AndroidReportConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.reporterServicePackage != null && Object.hasOwnProperty.call(m, "reporterServicePackage"))
	                        w.uint32(10).string(m.reporterServicePackage);
	                    if (m.reporterServiceClass != null && Object.hasOwnProperty.call(m, "reporterServiceClass"))
	                        w.uint32(18).string(m.reporterServiceClass);
	                    if (m.skipReport != null && Object.hasOwnProperty.call(m, "skipReport"))
	                        w.uint32(24).bool(m.skipReport);
	                    if (m.usePipeInFrameworkForTesting != null && Object.hasOwnProperty.call(m, "usePipeInFrameworkForTesting"))
	                        w.uint32(32).bool(m.usePipeInFrameworkForTesting);
	                    return w;
	                };

	                /**
	                 * Decodes an AndroidReportConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.AndroidReportConfig} AndroidReportConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                AndroidReportConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.AndroidReportConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.reporterServicePackage = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.reporterServiceClass = r.string();
	                                break;
	                            }
	                        case 3: {
	                                m.skipReport = r.bool();
	                                break;
	                            }
	                        case 4: {
	                                m.usePipeInFrameworkForTesting = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an AndroidReportConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.AndroidReportConfig} AndroidReportConfig
	                 */
	                AndroidReportConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.AndroidReportConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.AndroidReportConfig();
	                    if (d.reporterServicePackage != null) {
	                        m.reporterServicePackage = String(d.reporterServicePackage);
	                    }
	                    if (d.reporterServiceClass != null) {
	                        m.reporterServiceClass = String(d.reporterServiceClass);
	                    }
	                    if (d.skipReport != null) {
	                        m.skipReport = Boolean(d.skipReport);
	                    }
	                    if (d.usePipeInFrameworkForTesting != null) {
	                        m.usePipeInFrameworkForTesting = Boolean(d.usePipeInFrameworkForTesting);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an AndroidReportConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.AndroidReportConfig} m AndroidReportConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                AndroidReportConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.reporterServicePackage = "";
	                        d.reporterServiceClass = "";
	                        d.skipReport = false;
	                        d.usePipeInFrameworkForTesting = false;
	                    }
	                    if (m.reporterServicePackage != null && m.hasOwnProperty("reporterServicePackage")) {
	                        d.reporterServicePackage = m.reporterServicePackage;
	                    }
	                    if (m.reporterServiceClass != null && m.hasOwnProperty("reporterServiceClass")) {
	                        d.reporterServiceClass = m.reporterServiceClass;
	                    }
	                    if (m.skipReport != null && m.hasOwnProperty("skipReport")) {
	                        d.skipReport = m.skipReport;
	                    }
	                    if (m.usePipeInFrameworkForTesting != null && m.hasOwnProperty("usePipeInFrameworkForTesting")) {
	                        d.usePipeInFrameworkForTesting = m.usePipeInFrameworkForTesting;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this AndroidReportConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                AndroidReportConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for AndroidReportConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.AndroidReportConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                AndroidReportConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.AndroidReportConfig";
	                };

	                return AndroidReportConfig;
	            })();

	            TraceConfig.CmdTraceStartDelay = (function() {

	                /**
	                 * Properties of a CmdTraceStartDelay.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface ICmdTraceStartDelay
	                 * @property {number|null} [minDelayMs] CmdTraceStartDelay minDelayMs
	                 * @property {number|null} [maxDelayMs] CmdTraceStartDelay maxDelayMs
	                 */

	                /**
	                 * Constructs a new CmdTraceStartDelay.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a CmdTraceStartDelay.
	                 * @implements ICmdTraceStartDelay
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.ICmdTraceStartDelay=} [p] Properties to set
	                 */
	                function CmdTraceStartDelay(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * CmdTraceStartDelay minDelayMs.
	                 * @member {number} minDelayMs
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @instance
	                 */
	                CmdTraceStartDelay.prototype.minDelayMs = 0;

	                /**
	                 * CmdTraceStartDelay maxDelayMs.
	                 * @member {number} maxDelayMs
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @instance
	                 */
	                CmdTraceStartDelay.prototype.maxDelayMs = 0;

	                /**
	                 * Creates a new CmdTraceStartDelay instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ICmdTraceStartDelay=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.CmdTraceStartDelay} CmdTraceStartDelay instance
	                 */
	                CmdTraceStartDelay.create = function create(properties) {
	                    return new CmdTraceStartDelay(properties);
	                };

	                /**
	                 * Encodes the specified CmdTraceStartDelay message. Does not implicitly {@link perfetto.protos.TraceConfig.CmdTraceStartDelay.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ICmdTraceStartDelay} m CmdTraceStartDelay message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                CmdTraceStartDelay.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.minDelayMs != null && Object.hasOwnProperty.call(m, "minDelayMs"))
	                        w.uint32(8).uint32(m.minDelayMs);
	                    if (m.maxDelayMs != null && Object.hasOwnProperty.call(m, "maxDelayMs"))
	                        w.uint32(16).uint32(m.maxDelayMs);
	                    return w;
	                };

	                /**
	                 * Decodes a CmdTraceStartDelay message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.CmdTraceStartDelay} CmdTraceStartDelay
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                CmdTraceStartDelay.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.CmdTraceStartDelay();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.minDelayMs = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.maxDelayMs = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a CmdTraceStartDelay message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.CmdTraceStartDelay} CmdTraceStartDelay
	                 */
	                CmdTraceStartDelay.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.CmdTraceStartDelay)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.CmdTraceStartDelay();
	                    if (d.minDelayMs != null) {
	                        m.minDelayMs = d.minDelayMs >>> 0;
	                    }
	                    if (d.maxDelayMs != null) {
	                        m.maxDelayMs = d.maxDelayMs >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a CmdTraceStartDelay message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.CmdTraceStartDelay} m CmdTraceStartDelay
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                CmdTraceStartDelay.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.minDelayMs = 0;
	                        d.maxDelayMs = 0;
	                    }
	                    if (m.minDelayMs != null && m.hasOwnProperty("minDelayMs")) {
	                        d.minDelayMs = m.minDelayMs;
	                    }
	                    if (m.maxDelayMs != null && m.hasOwnProperty("maxDelayMs")) {
	                        d.maxDelayMs = m.maxDelayMs;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this CmdTraceStartDelay to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                CmdTraceStartDelay.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for CmdTraceStartDelay
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.CmdTraceStartDelay
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                CmdTraceStartDelay.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.CmdTraceStartDelay";
	                };

	                return CmdTraceStartDelay;
	            })();

	            TraceConfig.SessionSemaphore = (function() {

	                /**
	                 * Properties of a SessionSemaphore.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @interface ISessionSemaphore
	                 * @property {string|null} [name] SessionSemaphore name
	                 * @property {number|null} [maxOtherSessionCount] SessionSemaphore maxOtherSessionCount
	                 */

	                /**
	                 * Constructs a new SessionSemaphore.
	                 * @memberof perfetto.protos.TraceConfig
	                 * @classdesc Represents a SessionSemaphore.
	                 * @implements ISessionSemaphore
	                 * @constructor
	                 * @param {perfetto.protos.TraceConfig.ISessionSemaphore=} [p] Properties to set
	                 */
	                function SessionSemaphore(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * SessionSemaphore name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @instance
	                 */
	                SessionSemaphore.prototype.name = "";

	                /**
	                 * SessionSemaphore maxOtherSessionCount.
	                 * @member {number} maxOtherSessionCount
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @instance
	                 */
	                SessionSemaphore.prototype.maxOtherSessionCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * Creates a new SessionSemaphore instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ISessionSemaphore=} [properties] Properties to set
	                 * @returns {perfetto.protos.TraceConfig.SessionSemaphore} SessionSemaphore instance
	                 */
	                SessionSemaphore.create = function create(properties) {
	                    return new SessionSemaphore(properties);
	                };

	                /**
	                 * Encodes the specified SessionSemaphore message. Does not implicitly {@link perfetto.protos.TraceConfig.SessionSemaphore.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.ISessionSemaphore} m SessionSemaphore message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                SessionSemaphore.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(10).string(m.name);
	                    if (m.maxOtherSessionCount != null && Object.hasOwnProperty.call(m, "maxOtherSessionCount"))
	                        w.uint32(16).uint64(m.maxOtherSessionCount);
	                    return w;
	                };

	                /**
	                 * Decodes a SessionSemaphore message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TraceConfig.SessionSemaphore} SessionSemaphore
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                SessionSemaphore.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceConfig.SessionSemaphore();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.maxOtherSessionCount = r.uint64();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a SessionSemaphore message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TraceConfig.SessionSemaphore} SessionSemaphore
	                 */
	                SessionSemaphore.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TraceConfig.SessionSemaphore)
	                        return d;
	                    var m = new $root.perfetto.protos.TraceConfig.SessionSemaphore();
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.maxOtherSessionCount != null) {
	                        if ($util.Long)
	                            (m.maxOtherSessionCount = $util.Long.fromValue(d.maxOtherSessionCount)).unsigned = true;
	                        else if (typeof d.maxOtherSessionCount === "string")
	                            m.maxOtherSessionCount = parseInt(d.maxOtherSessionCount, 10);
	                        else if (typeof d.maxOtherSessionCount === "number")
	                            m.maxOtherSessionCount = d.maxOtherSessionCount;
	                        else if (typeof d.maxOtherSessionCount === "object")
	                            m.maxOtherSessionCount = new $util.LongBits(d.maxOtherSessionCount.low >>> 0, d.maxOtherSessionCount.high >>> 0).toNumber(true);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a SessionSemaphore message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @static
	                 * @param {perfetto.protos.TraceConfig.SessionSemaphore} m SessionSemaphore
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                SessionSemaphore.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.name = "";
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.maxOtherSessionCount = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.maxOtherSessionCount = o.longs === String ? "0" : 0;
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.maxOtherSessionCount != null && m.hasOwnProperty("maxOtherSessionCount")) {
	                        if (typeof m.maxOtherSessionCount === "number")
	                            d.maxOtherSessionCount = o.longs === String ? String(m.maxOtherSessionCount) : m.maxOtherSessionCount;
	                        else
	                            d.maxOtherSessionCount = o.longs === String ? $util.Long.prototype.toString.call(m.maxOtherSessionCount) : o.longs === Number ? new $util.LongBits(m.maxOtherSessionCount.low >>> 0, m.maxOtherSessionCount.high >>> 0).toNumber(true) : m.maxOtherSessionCount;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this SessionSemaphore to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                SessionSemaphore.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for SessionSemaphore
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TraceConfig.SessionSemaphore
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                SessionSemaphore.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TraceConfig.SessionSemaphore";
	                };

	                return SessionSemaphore;
	            })();

	            return TraceConfig;
	        })();

	        /**
	         * BuiltinClock enum.
	         * @name perfetto.protos.BuiltinClock
	         * @enum {number}
	         * @property {number} BUILTIN_CLOCK_UNKNOWN=0 BUILTIN_CLOCK_UNKNOWN value
	         * @property {number} BUILTIN_CLOCK_REALTIME=1 BUILTIN_CLOCK_REALTIME value
	         * @property {number} BUILTIN_CLOCK_REALTIME_COARSE=2 BUILTIN_CLOCK_REALTIME_COARSE value
	         * @property {number} BUILTIN_CLOCK_MONOTONIC=3 BUILTIN_CLOCK_MONOTONIC value
	         * @property {number} BUILTIN_CLOCK_MONOTONIC_COARSE=4 BUILTIN_CLOCK_MONOTONIC_COARSE value
	         * @property {number} BUILTIN_CLOCK_MONOTONIC_RAW=5 BUILTIN_CLOCK_MONOTONIC_RAW value
	         * @property {number} BUILTIN_CLOCK_BOOTTIME=6 BUILTIN_CLOCK_BOOTTIME value
	         * @property {number} BUILTIN_CLOCK_TSC=9 BUILTIN_CLOCK_TSC value
	         * @property {number} BUILTIN_CLOCK_PERF=10 BUILTIN_CLOCK_PERF value
	         * @property {number} BUILTIN_CLOCK_MAX_ID=63 BUILTIN_CLOCK_MAX_ID value
	         */
	        protos.BuiltinClock = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "BUILTIN_CLOCK_UNKNOWN"] = 0;
	            values[valuesById[1] = "BUILTIN_CLOCK_REALTIME"] = 1;
	            values[valuesById[2] = "BUILTIN_CLOCK_REALTIME_COARSE"] = 2;
	            values[valuesById[3] = "BUILTIN_CLOCK_MONOTONIC"] = 3;
	            values[valuesById[4] = "BUILTIN_CLOCK_MONOTONIC_COARSE"] = 4;
	            values[valuesById[5] = "BUILTIN_CLOCK_MONOTONIC_RAW"] = 5;
	            values[valuesById[6] = "BUILTIN_CLOCK_BOOTTIME"] = 6;
	            values[valuesById[9] = "BUILTIN_CLOCK_TSC"] = 9;
	            values[valuesById[10] = "BUILTIN_CLOCK_PERF"] = 10;
	            values[valuesById[63] = "BUILTIN_CLOCK_MAX_ID"] = 63;
	            return values;
	        })();

	        protos.DataSourceConfig = (function() {

	            /**
	             * Properties of a DataSourceConfig.
	             * @memberof perfetto.protos
	             * @interface IDataSourceConfig
	             * @property {string|null} [name] DataSourceConfig name
	             * @property {number|null} [targetBuffer] DataSourceConfig targetBuffer
	             * @property {number|null} [traceDurationMs] DataSourceConfig traceDurationMs
	             * @property {boolean|null} [preferSuspendClockForDuration] DataSourceConfig preferSuspendClockForDuration
	             * @property {number|null} [stopTimeoutMs] DataSourceConfig stopTimeoutMs
	             * @property {boolean|null} [enableExtraGuardrails] DataSourceConfig enableExtraGuardrails
	             * @property {perfetto.protos.DataSourceConfig.SessionInitiator|null} [sessionInitiator] DataSourceConfig sessionInitiator
	             * @property {number|null} [tracingSessionId] DataSourceConfig tracingSessionId
	             * @property {perfetto.protos.IFtraceConfig|null} [ftraceConfig] DataSourceConfig ftraceConfig
	             * @property {perfetto.protos.IInodeFileConfig|null} [inodeFileConfig] DataSourceConfig inodeFileConfig
	             * @property {perfetto.protos.IProcessStatsConfig|null} [processStatsConfig] DataSourceConfig processStatsConfig
	             * @property {perfetto.protos.ISysStatsConfig|null} [sysStatsConfig] DataSourceConfig sysStatsConfig
	             * @property {perfetto.protos.IHeapprofdConfig|null} [heapprofdConfig] DataSourceConfig heapprofdConfig
	             * @property {perfetto.protos.IJavaHprofConfig|null} [javaHprofConfig] DataSourceConfig javaHprofConfig
	             * @property {perfetto.protos.IAndroidPowerConfig|null} [androidPowerConfig] DataSourceConfig androidPowerConfig
	             * @property {perfetto.protos.IAndroidLogConfig|null} [androidLogConfig] DataSourceConfig androidLogConfig
	             * @property {perfetto.protos.IGpuCounterConfig|null} [gpuCounterConfig] DataSourceConfig gpuCounterConfig
	             * @property {perfetto.protos.IAndroidGameInterventionListConfig|null} [androidGameInterventionListConfig] DataSourceConfig androidGameInterventionListConfig
	             * @property {perfetto.protos.IPackagesListConfig|null} [packagesListConfig] DataSourceConfig packagesListConfig
	             * @property {perfetto.protos.IPerfEventConfig|null} [perfEventConfig] DataSourceConfig perfEventConfig
	             * @property {perfetto.protos.IVulkanMemoryConfig|null} [vulkanMemoryConfig] DataSourceConfig vulkanMemoryConfig
	             * @property {perfetto.protos.ITrackEventConfig|null} [trackEventConfig] DataSourceConfig trackEventConfig
	             * @property {perfetto.protos.IAndroidPolledStateConfig|null} [androidPolledStateConfig] DataSourceConfig androidPolledStateConfig
	             * @property {perfetto.protos.IAndroidSystemPropertyConfig|null} [androidSystemPropertyConfig] DataSourceConfig androidSystemPropertyConfig
	             * @property {perfetto.protos.IStatsdTracingConfig|null} [statsdTracingConfig] DataSourceConfig statsdTracingConfig
	             * @property {perfetto.protos.ISystemInfoConfig|null} [systemInfoConfig] DataSourceConfig systemInfoConfig
	             * @property {perfetto.protos.IChromeConfig|null} [chromeConfig] DataSourceConfig chromeConfig
	             * @property {perfetto.protos.IV8Config|null} [v8Config] DataSourceConfig v8Config
	             * @property {perfetto.protos.IInterceptorConfig|null} [interceptorConfig] DataSourceConfig interceptorConfig
	             * @property {perfetto.protos.INetworkPacketTraceConfig|null} [networkPacketTraceConfig] DataSourceConfig networkPacketTraceConfig
	             * @property {perfetto.protos.ISurfaceFlingerLayersConfig|null} [surfaceflingerLayersConfig] DataSourceConfig surfaceflingerLayersConfig
	             * @property {perfetto.protos.ISurfaceFlingerTransactionsConfig|null} [surfaceflingerTransactionsConfig] DataSourceConfig surfaceflingerTransactionsConfig
	             * @property {perfetto.protos.IAndroidSdkSyspropGuardConfig|null} [androidSdkSyspropGuardConfig] DataSourceConfig androidSdkSyspropGuardConfig
	             * @property {perfetto.protos.IEtwConfig|null} [etwConfig] DataSourceConfig etwConfig
	             * @property {perfetto.protos.IProtoLogConfig|null} [protologConfig] DataSourceConfig protologConfig
	             * @property {perfetto.protos.IAndroidInputEventConfig|null} [androidInputEventConfig] DataSourceConfig androidInputEventConfig
	             * @property {perfetto.protos.IPixelModemConfig|null} [pixelModemConfig] DataSourceConfig pixelModemConfig
	             * @property {perfetto.protos.IWindowManagerConfig|null} [windowmanagerConfig] DataSourceConfig windowmanagerConfig
	             * @property {perfetto.protos.IChromiumSystemMetricsConfig|null} [chromiumSystemMetrics] DataSourceConfig chromiumSystemMetrics
	             * @property {string|null} [legacyConfig] DataSourceConfig legacyConfig
	             * @property {perfetto.protos.ITestConfig|null} [forTesting] DataSourceConfig forTesting
	             */

	            /**
	             * Constructs a new DataSourceConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DataSourceConfig.
	             * @implements IDataSourceConfig
	             * @constructor
	             * @param {perfetto.protos.IDataSourceConfig=} [p] Properties to set
	             */
	            function DataSourceConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * DataSourceConfig name.
	             * @member {string} name
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.name = "";

	            /**
	             * DataSourceConfig targetBuffer.
	             * @member {number} targetBuffer
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.targetBuffer = 0;

	            /**
	             * DataSourceConfig traceDurationMs.
	             * @member {number} traceDurationMs
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.traceDurationMs = 0;

	            /**
	             * DataSourceConfig preferSuspendClockForDuration.
	             * @member {boolean} preferSuspendClockForDuration
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.preferSuspendClockForDuration = false;

	            /**
	             * DataSourceConfig stopTimeoutMs.
	             * @member {number} stopTimeoutMs
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.stopTimeoutMs = 0;

	            /**
	             * DataSourceConfig enableExtraGuardrails.
	             * @member {boolean} enableExtraGuardrails
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.enableExtraGuardrails = false;

	            /**
	             * DataSourceConfig sessionInitiator.
	             * @member {perfetto.protos.DataSourceConfig.SessionInitiator} sessionInitiator
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.sessionInitiator = 0;

	            /**
	             * DataSourceConfig tracingSessionId.
	             * @member {number} tracingSessionId
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.tracingSessionId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * DataSourceConfig ftraceConfig.
	             * @member {perfetto.protos.IFtraceConfig|null|undefined} ftraceConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.ftraceConfig = null;

	            /**
	             * DataSourceConfig inodeFileConfig.
	             * @member {perfetto.protos.IInodeFileConfig|null|undefined} inodeFileConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.inodeFileConfig = null;

	            /**
	             * DataSourceConfig processStatsConfig.
	             * @member {perfetto.protos.IProcessStatsConfig|null|undefined} processStatsConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.processStatsConfig = null;

	            /**
	             * DataSourceConfig sysStatsConfig.
	             * @member {perfetto.protos.ISysStatsConfig|null|undefined} sysStatsConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.sysStatsConfig = null;

	            /**
	             * DataSourceConfig heapprofdConfig.
	             * @member {perfetto.protos.IHeapprofdConfig|null|undefined} heapprofdConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.heapprofdConfig = null;

	            /**
	             * DataSourceConfig javaHprofConfig.
	             * @member {perfetto.protos.IJavaHprofConfig|null|undefined} javaHprofConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.javaHprofConfig = null;

	            /**
	             * DataSourceConfig androidPowerConfig.
	             * @member {perfetto.protos.IAndroidPowerConfig|null|undefined} androidPowerConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidPowerConfig = null;

	            /**
	             * DataSourceConfig androidLogConfig.
	             * @member {perfetto.protos.IAndroidLogConfig|null|undefined} androidLogConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidLogConfig = null;

	            /**
	             * DataSourceConfig gpuCounterConfig.
	             * @member {perfetto.protos.IGpuCounterConfig|null|undefined} gpuCounterConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.gpuCounterConfig = null;

	            /**
	             * DataSourceConfig androidGameInterventionListConfig.
	             * @member {perfetto.protos.IAndroidGameInterventionListConfig|null|undefined} androidGameInterventionListConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidGameInterventionListConfig = null;

	            /**
	             * DataSourceConfig packagesListConfig.
	             * @member {perfetto.protos.IPackagesListConfig|null|undefined} packagesListConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.packagesListConfig = null;

	            /**
	             * DataSourceConfig perfEventConfig.
	             * @member {perfetto.protos.IPerfEventConfig|null|undefined} perfEventConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.perfEventConfig = null;

	            /**
	             * DataSourceConfig vulkanMemoryConfig.
	             * @member {perfetto.protos.IVulkanMemoryConfig|null|undefined} vulkanMemoryConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.vulkanMemoryConfig = null;

	            /**
	             * DataSourceConfig trackEventConfig.
	             * @member {perfetto.protos.ITrackEventConfig|null|undefined} trackEventConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.trackEventConfig = null;

	            /**
	             * DataSourceConfig androidPolledStateConfig.
	             * @member {perfetto.protos.IAndroidPolledStateConfig|null|undefined} androidPolledStateConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidPolledStateConfig = null;

	            /**
	             * DataSourceConfig androidSystemPropertyConfig.
	             * @member {perfetto.protos.IAndroidSystemPropertyConfig|null|undefined} androidSystemPropertyConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidSystemPropertyConfig = null;

	            /**
	             * DataSourceConfig statsdTracingConfig.
	             * @member {perfetto.protos.IStatsdTracingConfig|null|undefined} statsdTracingConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.statsdTracingConfig = null;

	            /**
	             * DataSourceConfig systemInfoConfig.
	             * @member {perfetto.protos.ISystemInfoConfig|null|undefined} systemInfoConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.systemInfoConfig = null;

	            /**
	             * DataSourceConfig chromeConfig.
	             * @member {perfetto.protos.IChromeConfig|null|undefined} chromeConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.chromeConfig = null;

	            /**
	             * DataSourceConfig v8Config.
	             * @member {perfetto.protos.IV8Config|null|undefined} v8Config
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.v8Config = null;

	            /**
	             * DataSourceConfig interceptorConfig.
	             * @member {perfetto.protos.IInterceptorConfig|null|undefined} interceptorConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.interceptorConfig = null;

	            /**
	             * DataSourceConfig networkPacketTraceConfig.
	             * @member {perfetto.protos.INetworkPacketTraceConfig|null|undefined} networkPacketTraceConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.networkPacketTraceConfig = null;

	            /**
	             * DataSourceConfig surfaceflingerLayersConfig.
	             * @member {perfetto.protos.ISurfaceFlingerLayersConfig|null|undefined} surfaceflingerLayersConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.surfaceflingerLayersConfig = null;

	            /**
	             * DataSourceConfig surfaceflingerTransactionsConfig.
	             * @member {perfetto.protos.ISurfaceFlingerTransactionsConfig|null|undefined} surfaceflingerTransactionsConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.surfaceflingerTransactionsConfig = null;

	            /**
	             * DataSourceConfig androidSdkSyspropGuardConfig.
	             * @member {perfetto.protos.IAndroidSdkSyspropGuardConfig|null|undefined} androidSdkSyspropGuardConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidSdkSyspropGuardConfig = null;

	            /**
	             * DataSourceConfig etwConfig.
	             * @member {perfetto.protos.IEtwConfig|null|undefined} etwConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.etwConfig = null;

	            /**
	             * DataSourceConfig protologConfig.
	             * @member {perfetto.protos.IProtoLogConfig|null|undefined} protologConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.protologConfig = null;

	            /**
	             * DataSourceConfig androidInputEventConfig.
	             * @member {perfetto.protos.IAndroidInputEventConfig|null|undefined} androidInputEventConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.androidInputEventConfig = null;

	            /**
	             * DataSourceConfig pixelModemConfig.
	             * @member {perfetto.protos.IPixelModemConfig|null|undefined} pixelModemConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.pixelModemConfig = null;

	            /**
	             * DataSourceConfig windowmanagerConfig.
	             * @member {perfetto.protos.IWindowManagerConfig|null|undefined} windowmanagerConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.windowmanagerConfig = null;

	            /**
	             * DataSourceConfig chromiumSystemMetrics.
	             * @member {perfetto.protos.IChromiumSystemMetricsConfig|null|undefined} chromiumSystemMetrics
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.chromiumSystemMetrics = null;

	            /**
	             * DataSourceConfig legacyConfig.
	             * @member {string} legacyConfig
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.legacyConfig = "";

	            /**
	             * DataSourceConfig forTesting.
	             * @member {perfetto.protos.ITestConfig|null|undefined} forTesting
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             */
	            DataSourceConfig.prototype.forTesting = null;

	            /**
	             * Creates a new DataSourceConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DataSourceConfig
	             * @static
	             * @param {perfetto.protos.IDataSourceConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.DataSourceConfig} DataSourceConfig instance
	             */
	            DataSourceConfig.create = function create(properties) {
	                return new DataSourceConfig(properties);
	            };

	            /**
	             * Encodes the specified DataSourceConfig message. Does not implicitly {@link perfetto.protos.DataSourceConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DataSourceConfig
	             * @static
	             * @param {perfetto.protos.IDataSourceConfig} m DataSourceConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DataSourceConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.targetBuffer != null && Object.hasOwnProperty.call(m, "targetBuffer"))
	                    w.uint32(16).uint32(m.targetBuffer);
	                if (m.traceDurationMs != null && Object.hasOwnProperty.call(m, "traceDurationMs"))
	                    w.uint32(24).uint32(m.traceDurationMs);
	                if (m.tracingSessionId != null && Object.hasOwnProperty.call(m, "tracingSessionId"))
	                    w.uint32(32).uint64(m.tracingSessionId);
	                if (m.enableExtraGuardrails != null && Object.hasOwnProperty.call(m, "enableExtraGuardrails"))
	                    w.uint32(48).bool(m.enableExtraGuardrails);
	                if (m.stopTimeoutMs != null && Object.hasOwnProperty.call(m, "stopTimeoutMs"))
	                    w.uint32(56).uint32(m.stopTimeoutMs);
	                if (m.sessionInitiator != null && Object.hasOwnProperty.call(m, "sessionInitiator"))
	                    w.uint32(64).int32(m.sessionInitiator);
	                if (m.ftraceConfig != null && Object.hasOwnProperty.call(m, "ftraceConfig"))
	                    $root.perfetto.protos.FtraceConfig.encode(m.ftraceConfig, w.uint32(802).fork()).ldelim();
	                if (m.chromeConfig != null && Object.hasOwnProperty.call(m, "chromeConfig"))
	                    $root.perfetto.protos.ChromeConfig.encode(m.chromeConfig, w.uint32(810).fork()).ldelim();
	                if (m.inodeFileConfig != null && Object.hasOwnProperty.call(m, "inodeFileConfig"))
	                    $root.perfetto.protos.InodeFileConfig.encode(m.inodeFileConfig, w.uint32(818).fork()).ldelim();
	                if (m.processStatsConfig != null && Object.hasOwnProperty.call(m, "processStatsConfig"))
	                    $root.perfetto.protos.ProcessStatsConfig.encode(m.processStatsConfig, w.uint32(826).fork()).ldelim();
	                if (m.sysStatsConfig != null && Object.hasOwnProperty.call(m, "sysStatsConfig"))
	                    $root.perfetto.protos.SysStatsConfig.encode(m.sysStatsConfig, w.uint32(834).fork()).ldelim();
	                if (m.heapprofdConfig != null && Object.hasOwnProperty.call(m, "heapprofdConfig"))
	                    $root.perfetto.protos.HeapprofdConfig.encode(m.heapprofdConfig, w.uint32(842).fork()).ldelim();
	                if (m.androidPowerConfig != null && Object.hasOwnProperty.call(m, "androidPowerConfig"))
	                    $root.perfetto.protos.AndroidPowerConfig.encode(m.androidPowerConfig, w.uint32(850).fork()).ldelim();
	                if (m.androidLogConfig != null && Object.hasOwnProperty.call(m, "androidLogConfig"))
	                    $root.perfetto.protos.AndroidLogConfig.encode(m.androidLogConfig, w.uint32(858).fork()).ldelim();
	                if (m.gpuCounterConfig != null && Object.hasOwnProperty.call(m, "gpuCounterConfig"))
	                    $root.perfetto.protos.GpuCounterConfig.encode(m.gpuCounterConfig, w.uint32(866).fork()).ldelim();
	                if (m.packagesListConfig != null && Object.hasOwnProperty.call(m, "packagesListConfig"))
	                    $root.perfetto.protos.PackagesListConfig.encode(m.packagesListConfig, w.uint32(874).fork()).ldelim();
	                if (m.javaHprofConfig != null && Object.hasOwnProperty.call(m, "javaHprofConfig"))
	                    $root.perfetto.protos.JavaHprofConfig.encode(m.javaHprofConfig, w.uint32(882).fork()).ldelim();
	                if (m.perfEventConfig != null && Object.hasOwnProperty.call(m, "perfEventConfig"))
	                    $root.perfetto.protos.PerfEventConfig.encode(m.perfEventConfig, w.uint32(890).fork()).ldelim();
	                if (m.vulkanMemoryConfig != null && Object.hasOwnProperty.call(m, "vulkanMemoryConfig"))
	                    $root.perfetto.protos.VulkanMemoryConfig.encode(m.vulkanMemoryConfig, w.uint32(898).fork()).ldelim();
	                if (m.trackEventConfig != null && Object.hasOwnProperty.call(m, "trackEventConfig"))
	                    $root.perfetto.protos.TrackEventConfig.encode(m.trackEventConfig, w.uint32(906).fork()).ldelim();
	                if (m.androidPolledStateConfig != null && Object.hasOwnProperty.call(m, "androidPolledStateConfig"))
	                    $root.perfetto.protos.AndroidPolledStateConfig.encode(m.androidPolledStateConfig, w.uint32(914).fork()).ldelim();
	                if (m.interceptorConfig != null && Object.hasOwnProperty.call(m, "interceptorConfig"))
	                    $root.perfetto.protos.InterceptorConfig.encode(m.interceptorConfig, w.uint32(922).fork()).ldelim();
	                if (m.androidGameInterventionListConfig != null && Object.hasOwnProperty.call(m, "androidGameInterventionListConfig"))
	                    $root.perfetto.protos.AndroidGameInterventionListConfig.encode(m.androidGameInterventionListConfig, w.uint32(930).fork()).ldelim();
	                if (m.statsdTracingConfig != null && Object.hasOwnProperty.call(m, "statsdTracingConfig"))
	                    $root.perfetto.protos.StatsdTracingConfig.encode(m.statsdTracingConfig, w.uint32(938).fork()).ldelim();
	                if (m.androidSystemPropertyConfig != null && Object.hasOwnProperty.call(m, "androidSystemPropertyConfig"))
	                    $root.perfetto.protos.AndroidSystemPropertyConfig.encode(m.androidSystemPropertyConfig, w.uint32(946).fork()).ldelim();
	                if (m.systemInfoConfig != null && Object.hasOwnProperty.call(m, "systemInfoConfig"))
	                    $root.perfetto.protos.SystemInfoConfig.encode(m.systemInfoConfig, w.uint32(954).fork()).ldelim();
	                if (m.networkPacketTraceConfig != null && Object.hasOwnProperty.call(m, "networkPacketTraceConfig"))
	                    $root.perfetto.protos.NetworkPacketTraceConfig.encode(m.networkPacketTraceConfig, w.uint32(962).fork()).ldelim();
	                if (m.surfaceflingerLayersConfig != null && Object.hasOwnProperty.call(m, "surfaceflingerLayersConfig"))
	                    $root.perfetto.protos.SurfaceFlingerLayersConfig.encode(m.surfaceflingerLayersConfig, w.uint32(970).fork()).ldelim();
	                if (m.preferSuspendClockForDuration != null && Object.hasOwnProperty.call(m, "preferSuspendClockForDuration"))
	                    w.uint32(976).bool(m.preferSuspendClockForDuration);
	                if (m.surfaceflingerTransactionsConfig != null && Object.hasOwnProperty.call(m, "surfaceflingerTransactionsConfig"))
	                    $root.perfetto.protos.SurfaceFlingerTransactionsConfig.encode(m.surfaceflingerTransactionsConfig, w.uint32(986).fork()).ldelim();
	                if (m.androidSdkSyspropGuardConfig != null && Object.hasOwnProperty.call(m, "androidSdkSyspropGuardConfig"))
	                    $root.perfetto.protos.AndroidSdkSyspropGuardConfig.encode(m.androidSdkSyspropGuardConfig, w.uint32(994).fork()).ldelim();
	                if (m.etwConfig != null && Object.hasOwnProperty.call(m, "etwConfig"))
	                    $root.perfetto.protos.EtwConfig.encode(m.etwConfig, w.uint32(1002).fork()).ldelim();
	                if (m.protologConfig != null && Object.hasOwnProperty.call(m, "protologConfig"))
	                    $root.perfetto.protos.ProtoLogConfig.encode(m.protologConfig, w.uint32(1010).fork()).ldelim();
	                if (m.v8Config != null && Object.hasOwnProperty.call(m, "v8Config"))
	                    $root.perfetto.protos.V8Config.encode(m.v8Config, w.uint32(1018).fork()).ldelim();
	                if (m.androidInputEventConfig != null && Object.hasOwnProperty.call(m, "androidInputEventConfig"))
	                    $root.perfetto.protos.AndroidInputEventConfig.encode(m.androidInputEventConfig, w.uint32(1026).fork()).ldelim();
	                if (m.pixelModemConfig != null && Object.hasOwnProperty.call(m, "pixelModemConfig"))
	                    $root.perfetto.protos.PixelModemConfig.encode(m.pixelModemConfig, w.uint32(1034).fork()).ldelim();
	                if (m.windowmanagerConfig != null && Object.hasOwnProperty.call(m, "windowmanagerConfig"))
	                    $root.perfetto.protos.WindowManagerConfig.encode(m.windowmanagerConfig, w.uint32(1042).fork()).ldelim();
	                if (m.chromiumSystemMetrics != null && Object.hasOwnProperty.call(m, "chromiumSystemMetrics"))
	                    $root.perfetto.protos.ChromiumSystemMetricsConfig.encode(m.chromiumSystemMetrics, w.uint32(1050).fork()).ldelim();
	                if (m.legacyConfig != null && Object.hasOwnProperty.call(m, "legacyConfig"))
	                    w.uint32(8002).string(m.legacyConfig);
	                if (m.forTesting != null && Object.hasOwnProperty.call(m, "forTesting"))
	                    $root.perfetto.protos.TestConfig.encode(m.forTesting, w.uint32(8010).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a DataSourceConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DataSourceConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DataSourceConfig} DataSourceConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DataSourceConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DataSourceConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.targetBuffer = r.uint32();
	                            break;
	                        }
	                    case 3: {
	                            m.traceDurationMs = r.uint32();
	                            break;
	                        }
	                    case 122: {
	                            m.preferSuspendClockForDuration = r.bool();
	                            break;
	                        }
	                    case 7: {
	                            m.stopTimeoutMs = r.uint32();
	                            break;
	                        }
	                    case 6: {
	                            m.enableExtraGuardrails = r.bool();
	                            break;
	                        }
	                    case 8: {
	                            m.sessionInitiator = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            m.tracingSessionId = r.uint64();
	                            break;
	                        }
	                    case 100: {
	                            m.ftraceConfig = $root.perfetto.protos.FtraceConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 102: {
	                            m.inodeFileConfig = $root.perfetto.protos.InodeFileConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 103: {
	                            m.processStatsConfig = $root.perfetto.protos.ProcessStatsConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 104: {
	                            m.sysStatsConfig = $root.perfetto.protos.SysStatsConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 105: {
	                            m.heapprofdConfig = $root.perfetto.protos.HeapprofdConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 110: {
	                            m.javaHprofConfig = $root.perfetto.protos.JavaHprofConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 106: {
	                            m.androidPowerConfig = $root.perfetto.protos.AndroidPowerConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 107: {
	                            m.androidLogConfig = $root.perfetto.protos.AndroidLogConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 108: {
	                            m.gpuCounterConfig = $root.perfetto.protos.GpuCounterConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 116: {
	                            m.androidGameInterventionListConfig = $root.perfetto.protos.AndroidGameInterventionListConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 109: {
	                            m.packagesListConfig = $root.perfetto.protos.PackagesListConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 111: {
	                            m.perfEventConfig = $root.perfetto.protos.PerfEventConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 112: {
	                            m.vulkanMemoryConfig = $root.perfetto.protos.VulkanMemoryConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 113: {
	                            m.trackEventConfig = $root.perfetto.protos.TrackEventConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 114: {
	                            m.androidPolledStateConfig = $root.perfetto.protos.AndroidPolledStateConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 118: {
	                            m.androidSystemPropertyConfig = $root.perfetto.protos.AndroidSystemPropertyConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 117: {
	                            m.statsdTracingConfig = $root.perfetto.protos.StatsdTracingConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 119: {
	                            m.systemInfoConfig = $root.perfetto.protos.SystemInfoConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 101: {
	                            m.chromeConfig = $root.perfetto.protos.ChromeConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 127: {
	                            m.v8Config = $root.perfetto.protos.V8Config.decode(r, r.uint32());
	                            break;
	                        }
	                    case 115: {
	                            m.interceptorConfig = $root.perfetto.protos.InterceptorConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 120: {
	                            m.networkPacketTraceConfig = $root.perfetto.protos.NetworkPacketTraceConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 121: {
	                            m.surfaceflingerLayersConfig = $root.perfetto.protos.SurfaceFlingerLayersConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 123: {
	                            m.surfaceflingerTransactionsConfig = $root.perfetto.protos.SurfaceFlingerTransactionsConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 124: {
	                            m.androidSdkSyspropGuardConfig = $root.perfetto.protos.AndroidSdkSyspropGuardConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 125: {
	                            m.etwConfig = $root.perfetto.protos.EtwConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 126: {
	                            m.protologConfig = $root.perfetto.protos.ProtoLogConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 128: {
	                            m.androidInputEventConfig = $root.perfetto.protos.AndroidInputEventConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 129: {
	                            m.pixelModemConfig = $root.perfetto.protos.PixelModemConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 130: {
	                            m.windowmanagerConfig = $root.perfetto.protos.WindowManagerConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 131: {
	                            m.chromiumSystemMetrics = $root.perfetto.protos.ChromiumSystemMetricsConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 1000: {
	                            m.legacyConfig = r.string();
	                            break;
	                        }
	                    case 1001: {
	                            m.forTesting = $root.perfetto.protos.TestConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DataSourceConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DataSourceConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DataSourceConfig} DataSourceConfig
	             */
	            DataSourceConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DataSourceConfig)
	                    return d;
	                var m = new $root.perfetto.protos.DataSourceConfig();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.targetBuffer != null) {
	                    m.targetBuffer = d.targetBuffer >>> 0;
	                }
	                if (d.traceDurationMs != null) {
	                    m.traceDurationMs = d.traceDurationMs >>> 0;
	                }
	                if (d.preferSuspendClockForDuration != null) {
	                    m.preferSuspendClockForDuration = Boolean(d.preferSuspendClockForDuration);
	                }
	                if (d.stopTimeoutMs != null) {
	                    m.stopTimeoutMs = d.stopTimeoutMs >>> 0;
	                }
	                if (d.enableExtraGuardrails != null) {
	                    m.enableExtraGuardrails = Boolean(d.enableExtraGuardrails);
	                }
	                switch (d.sessionInitiator) {
	                default:
	                    if (typeof d.sessionInitiator === "number") {
	                        m.sessionInitiator = d.sessionInitiator;
	                        break;
	                    }
	                    break;
	                case "SESSION_INITIATOR_UNSPECIFIED":
	                case 0:
	                    m.sessionInitiator = 0;
	                    break;
	                case "SESSION_INITIATOR_TRUSTED_SYSTEM":
	                case 1:
	                    m.sessionInitiator = 1;
	                    break;
	                }
	                if (d.tracingSessionId != null) {
	                    if ($util.Long)
	                        (m.tracingSessionId = $util.Long.fromValue(d.tracingSessionId)).unsigned = true;
	                    else if (typeof d.tracingSessionId === "string")
	                        m.tracingSessionId = parseInt(d.tracingSessionId, 10);
	                    else if (typeof d.tracingSessionId === "number")
	                        m.tracingSessionId = d.tracingSessionId;
	                    else if (typeof d.tracingSessionId === "object")
	                        m.tracingSessionId = new $util.LongBits(d.tracingSessionId.low >>> 0, d.tracingSessionId.high >>> 0).toNumber(true);
	                }
	                if (d.ftraceConfig != null) {
	                    if (typeof d.ftraceConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.ftraceConfig: object expected");
	                    m.ftraceConfig = $root.perfetto.protos.FtraceConfig.fromObject(d.ftraceConfig);
	                }
	                if (d.inodeFileConfig != null) {
	                    if (typeof d.inodeFileConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.inodeFileConfig: object expected");
	                    m.inodeFileConfig = $root.perfetto.protos.InodeFileConfig.fromObject(d.inodeFileConfig);
	                }
	                if (d.processStatsConfig != null) {
	                    if (typeof d.processStatsConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.processStatsConfig: object expected");
	                    m.processStatsConfig = $root.perfetto.protos.ProcessStatsConfig.fromObject(d.processStatsConfig);
	                }
	                if (d.sysStatsConfig != null) {
	                    if (typeof d.sysStatsConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.sysStatsConfig: object expected");
	                    m.sysStatsConfig = $root.perfetto.protos.SysStatsConfig.fromObject(d.sysStatsConfig);
	                }
	                if (d.heapprofdConfig != null) {
	                    if (typeof d.heapprofdConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.heapprofdConfig: object expected");
	                    m.heapprofdConfig = $root.perfetto.protos.HeapprofdConfig.fromObject(d.heapprofdConfig);
	                }
	                if (d.javaHprofConfig != null) {
	                    if (typeof d.javaHprofConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.javaHprofConfig: object expected");
	                    m.javaHprofConfig = $root.perfetto.protos.JavaHprofConfig.fromObject(d.javaHprofConfig);
	                }
	                if (d.androidPowerConfig != null) {
	                    if (typeof d.androidPowerConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidPowerConfig: object expected");
	                    m.androidPowerConfig = $root.perfetto.protos.AndroidPowerConfig.fromObject(d.androidPowerConfig);
	                }
	                if (d.androidLogConfig != null) {
	                    if (typeof d.androidLogConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidLogConfig: object expected");
	                    m.androidLogConfig = $root.perfetto.protos.AndroidLogConfig.fromObject(d.androidLogConfig);
	                }
	                if (d.gpuCounterConfig != null) {
	                    if (typeof d.gpuCounterConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.gpuCounterConfig: object expected");
	                    m.gpuCounterConfig = $root.perfetto.protos.GpuCounterConfig.fromObject(d.gpuCounterConfig);
	                }
	                if (d.androidGameInterventionListConfig != null) {
	                    if (typeof d.androidGameInterventionListConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidGameInterventionListConfig: object expected");
	                    m.androidGameInterventionListConfig = $root.perfetto.protos.AndroidGameInterventionListConfig.fromObject(d.androidGameInterventionListConfig);
	                }
	                if (d.packagesListConfig != null) {
	                    if (typeof d.packagesListConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.packagesListConfig: object expected");
	                    m.packagesListConfig = $root.perfetto.protos.PackagesListConfig.fromObject(d.packagesListConfig);
	                }
	                if (d.perfEventConfig != null) {
	                    if (typeof d.perfEventConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.perfEventConfig: object expected");
	                    m.perfEventConfig = $root.perfetto.protos.PerfEventConfig.fromObject(d.perfEventConfig);
	                }
	                if (d.vulkanMemoryConfig != null) {
	                    if (typeof d.vulkanMemoryConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.vulkanMemoryConfig: object expected");
	                    m.vulkanMemoryConfig = $root.perfetto.protos.VulkanMemoryConfig.fromObject(d.vulkanMemoryConfig);
	                }
	                if (d.trackEventConfig != null) {
	                    if (typeof d.trackEventConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.trackEventConfig: object expected");
	                    m.trackEventConfig = $root.perfetto.protos.TrackEventConfig.fromObject(d.trackEventConfig);
	                }
	                if (d.androidPolledStateConfig != null) {
	                    if (typeof d.androidPolledStateConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidPolledStateConfig: object expected");
	                    m.androidPolledStateConfig = $root.perfetto.protos.AndroidPolledStateConfig.fromObject(d.androidPolledStateConfig);
	                }
	                if (d.androidSystemPropertyConfig != null) {
	                    if (typeof d.androidSystemPropertyConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidSystemPropertyConfig: object expected");
	                    m.androidSystemPropertyConfig = $root.perfetto.protos.AndroidSystemPropertyConfig.fromObject(d.androidSystemPropertyConfig);
	                }
	                if (d.statsdTracingConfig != null) {
	                    if (typeof d.statsdTracingConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.statsdTracingConfig: object expected");
	                    m.statsdTracingConfig = $root.perfetto.protos.StatsdTracingConfig.fromObject(d.statsdTracingConfig);
	                }
	                if (d.systemInfoConfig != null) {
	                    if (typeof d.systemInfoConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.systemInfoConfig: object expected");
	                    m.systemInfoConfig = $root.perfetto.protos.SystemInfoConfig.fromObject(d.systemInfoConfig);
	                }
	                if (d.chromeConfig != null) {
	                    if (typeof d.chromeConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.chromeConfig: object expected");
	                    m.chromeConfig = $root.perfetto.protos.ChromeConfig.fromObject(d.chromeConfig);
	                }
	                if (d.v8Config != null) {
	                    if (typeof d.v8Config !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.v8Config: object expected");
	                    m.v8Config = $root.perfetto.protos.V8Config.fromObject(d.v8Config);
	                }
	                if (d.interceptorConfig != null) {
	                    if (typeof d.interceptorConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.interceptorConfig: object expected");
	                    m.interceptorConfig = $root.perfetto.protos.InterceptorConfig.fromObject(d.interceptorConfig);
	                }
	                if (d.networkPacketTraceConfig != null) {
	                    if (typeof d.networkPacketTraceConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.networkPacketTraceConfig: object expected");
	                    m.networkPacketTraceConfig = $root.perfetto.protos.NetworkPacketTraceConfig.fromObject(d.networkPacketTraceConfig);
	                }
	                if (d.surfaceflingerLayersConfig != null) {
	                    if (typeof d.surfaceflingerLayersConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.surfaceflingerLayersConfig: object expected");
	                    m.surfaceflingerLayersConfig = $root.perfetto.protos.SurfaceFlingerLayersConfig.fromObject(d.surfaceflingerLayersConfig);
	                }
	                if (d.surfaceflingerTransactionsConfig != null) {
	                    if (typeof d.surfaceflingerTransactionsConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.surfaceflingerTransactionsConfig: object expected");
	                    m.surfaceflingerTransactionsConfig = $root.perfetto.protos.SurfaceFlingerTransactionsConfig.fromObject(d.surfaceflingerTransactionsConfig);
	                }
	                if (d.androidSdkSyspropGuardConfig != null) {
	                    if (typeof d.androidSdkSyspropGuardConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidSdkSyspropGuardConfig: object expected");
	                    m.androidSdkSyspropGuardConfig = $root.perfetto.protos.AndroidSdkSyspropGuardConfig.fromObject(d.androidSdkSyspropGuardConfig);
	                }
	                if (d.etwConfig != null) {
	                    if (typeof d.etwConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.etwConfig: object expected");
	                    m.etwConfig = $root.perfetto.protos.EtwConfig.fromObject(d.etwConfig);
	                }
	                if (d.protologConfig != null) {
	                    if (typeof d.protologConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.protologConfig: object expected");
	                    m.protologConfig = $root.perfetto.protos.ProtoLogConfig.fromObject(d.protologConfig);
	                }
	                if (d.androidInputEventConfig != null) {
	                    if (typeof d.androidInputEventConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.androidInputEventConfig: object expected");
	                    m.androidInputEventConfig = $root.perfetto.protos.AndroidInputEventConfig.fromObject(d.androidInputEventConfig);
	                }
	                if (d.pixelModemConfig != null) {
	                    if (typeof d.pixelModemConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.pixelModemConfig: object expected");
	                    m.pixelModemConfig = $root.perfetto.protos.PixelModemConfig.fromObject(d.pixelModemConfig);
	                }
	                if (d.windowmanagerConfig != null) {
	                    if (typeof d.windowmanagerConfig !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.windowmanagerConfig: object expected");
	                    m.windowmanagerConfig = $root.perfetto.protos.WindowManagerConfig.fromObject(d.windowmanagerConfig);
	                }
	                if (d.chromiumSystemMetrics != null) {
	                    if (typeof d.chromiumSystemMetrics !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.chromiumSystemMetrics: object expected");
	                    m.chromiumSystemMetrics = $root.perfetto.protos.ChromiumSystemMetricsConfig.fromObject(d.chromiumSystemMetrics);
	                }
	                if (d.legacyConfig != null) {
	                    m.legacyConfig = String(d.legacyConfig);
	                }
	                if (d.forTesting != null) {
	                    if (typeof d.forTesting !== "object")
	                        throw TypeError(".perfetto.protos.DataSourceConfig.forTesting: object expected");
	                    m.forTesting = $root.perfetto.protos.TestConfig.fromObject(d.forTesting);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a DataSourceConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DataSourceConfig
	             * @static
	             * @param {perfetto.protos.DataSourceConfig} m DataSourceConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DataSourceConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                    d.targetBuffer = 0;
	                    d.traceDurationMs = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.tracingSessionId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.tracingSessionId = o.longs === String ? "0" : 0;
	                    d.enableExtraGuardrails = false;
	                    d.stopTimeoutMs = 0;
	                    d.sessionInitiator = o.enums === String ? "SESSION_INITIATOR_UNSPECIFIED" : 0;
	                    d.ftraceConfig = null;
	                    d.chromeConfig = null;
	                    d.inodeFileConfig = null;
	                    d.processStatsConfig = null;
	                    d.sysStatsConfig = null;
	                    d.heapprofdConfig = null;
	                    d.androidPowerConfig = null;
	                    d.androidLogConfig = null;
	                    d.gpuCounterConfig = null;
	                    d.packagesListConfig = null;
	                    d.javaHprofConfig = null;
	                    d.perfEventConfig = null;
	                    d.vulkanMemoryConfig = null;
	                    d.trackEventConfig = null;
	                    d.androidPolledStateConfig = null;
	                    d.interceptorConfig = null;
	                    d.androidGameInterventionListConfig = null;
	                    d.statsdTracingConfig = null;
	                    d.androidSystemPropertyConfig = null;
	                    d.systemInfoConfig = null;
	                    d.networkPacketTraceConfig = null;
	                    d.surfaceflingerLayersConfig = null;
	                    d.preferSuspendClockForDuration = false;
	                    d.surfaceflingerTransactionsConfig = null;
	                    d.androidSdkSyspropGuardConfig = null;
	                    d.etwConfig = null;
	                    d.protologConfig = null;
	                    d.v8Config = null;
	                    d.androidInputEventConfig = null;
	                    d.pixelModemConfig = null;
	                    d.windowmanagerConfig = null;
	                    d.chromiumSystemMetrics = null;
	                    d.legacyConfig = "";
	                    d.forTesting = null;
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.targetBuffer != null && m.hasOwnProperty("targetBuffer")) {
	                    d.targetBuffer = m.targetBuffer;
	                }
	                if (m.traceDurationMs != null && m.hasOwnProperty("traceDurationMs")) {
	                    d.traceDurationMs = m.traceDurationMs;
	                }
	                if (m.tracingSessionId != null && m.hasOwnProperty("tracingSessionId")) {
	                    if (typeof m.tracingSessionId === "number")
	                        d.tracingSessionId = o.longs === String ? String(m.tracingSessionId) : m.tracingSessionId;
	                    else
	                        d.tracingSessionId = o.longs === String ? $util.Long.prototype.toString.call(m.tracingSessionId) : o.longs === Number ? new $util.LongBits(m.tracingSessionId.low >>> 0, m.tracingSessionId.high >>> 0).toNumber(true) : m.tracingSessionId;
	                }
	                if (m.enableExtraGuardrails != null && m.hasOwnProperty("enableExtraGuardrails")) {
	                    d.enableExtraGuardrails = m.enableExtraGuardrails;
	                }
	                if (m.stopTimeoutMs != null && m.hasOwnProperty("stopTimeoutMs")) {
	                    d.stopTimeoutMs = m.stopTimeoutMs;
	                }
	                if (m.sessionInitiator != null && m.hasOwnProperty("sessionInitiator")) {
	                    d.sessionInitiator = o.enums === String ? $root.perfetto.protos.DataSourceConfig.SessionInitiator[m.sessionInitiator] === undefined ? m.sessionInitiator : $root.perfetto.protos.DataSourceConfig.SessionInitiator[m.sessionInitiator] : m.sessionInitiator;
	                }
	                if (m.ftraceConfig != null && m.hasOwnProperty("ftraceConfig")) {
	                    d.ftraceConfig = $root.perfetto.protos.FtraceConfig.toObject(m.ftraceConfig, o);
	                }
	                if (m.chromeConfig != null && m.hasOwnProperty("chromeConfig")) {
	                    d.chromeConfig = $root.perfetto.protos.ChromeConfig.toObject(m.chromeConfig, o);
	                }
	                if (m.inodeFileConfig != null && m.hasOwnProperty("inodeFileConfig")) {
	                    d.inodeFileConfig = $root.perfetto.protos.InodeFileConfig.toObject(m.inodeFileConfig, o);
	                }
	                if (m.processStatsConfig != null && m.hasOwnProperty("processStatsConfig")) {
	                    d.processStatsConfig = $root.perfetto.protos.ProcessStatsConfig.toObject(m.processStatsConfig, o);
	                }
	                if (m.sysStatsConfig != null && m.hasOwnProperty("sysStatsConfig")) {
	                    d.sysStatsConfig = $root.perfetto.protos.SysStatsConfig.toObject(m.sysStatsConfig, o);
	                }
	                if (m.heapprofdConfig != null && m.hasOwnProperty("heapprofdConfig")) {
	                    d.heapprofdConfig = $root.perfetto.protos.HeapprofdConfig.toObject(m.heapprofdConfig, o);
	                }
	                if (m.androidPowerConfig != null && m.hasOwnProperty("androidPowerConfig")) {
	                    d.androidPowerConfig = $root.perfetto.protos.AndroidPowerConfig.toObject(m.androidPowerConfig, o);
	                }
	                if (m.androidLogConfig != null && m.hasOwnProperty("androidLogConfig")) {
	                    d.androidLogConfig = $root.perfetto.protos.AndroidLogConfig.toObject(m.androidLogConfig, o);
	                }
	                if (m.gpuCounterConfig != null && m.hasOwnProperty("gpuCounterConfig")) {
	                    d.gpuCounterConfig = $root.perfetto.protos.GpuCounterConfig.toObject(m.gpuCounterConfig, o);
	                }
	                if (m.packagesListConfig != null && m.hasOwnProperty("packagesListConfig")) {
	                    d.packagesListConfig = $root.perfetto.protos.PackagesListConfig.toObject(m.packagesListConfig, o);
	                }
	                if (m.javaHprofConfig != null && m.hasOwnProperty("javaHprofConfig")) {
	                    d.javaHprofConfig = $root.perfetto.protos.JavaHprofConfig.toObject(m.javaHprofConfig, o);
	                }
	                if (m.perfEventConfig != null && m.hasOwnProperty("perfEventConfig")) {
	                    d.perfEventConfig = $root.perfetto.protos.PerfEventConfig.toObject(m.perfEventConfig, o);
	                }
	                if (m.vulkanMemoryConfig != null && m.hasOwnProperty("vulkanMemoryConfig")) {
	                    d.vulkanMemoryConfig = $root.perfetto.protos.VulkanMemoryConfig.toObject(m.vulkanMemoryConfig, o);
	                }
	                if (m.trackEventConfig != null && m.hasOwnProperty("trackEventConfig")) {
	                    d.trackEventConfig = $root.perfetto.protos.TrackEventConfig.toObject(m.trackEventConfig, o);
	                }
	                if (m.androidPolledStateConfig != null && m.hasOwnProperty("androidPolledStateConfig")) {
	                    d.androidPolledStateConfig = $root.perfetto.protos.AndroidPolledStateConfig.toObject(m.androidPolledStateConfig, o);
	                }
	                if (m.interceptorConfig != null && m.hasOwnProperty("interceptorConfig")) {
	                    d.interceptorConfig = $root.perfetto.protos.InterceptorConfig.toObject(m.interceptorConfig, o);
	                }
	                if (m.androidGameInterventionListConfig != null && m.hasOwnProperty("androidGameInterventionListConfig")) {
	                    d.androidGameInterventionListConfig = $root.perfetto.protos.AndroidGameInterventionListConfig.toObject(m.androidGameInterventionListConfig, o);
	                }
	                if (m.statsdTracingConfig != null && m.hasOwnProperty("statsdTracingConfig")) {
	                    d.statsdTracingConfig = $root.perfetto.protos.StatsdTracingConfig.toObject(m.statsdTracingConfig, o);
	                }
	                if (m.androidSystemPropertyConfig != null && m.hasOwnProperty("androidSystemPropertyConfig")) {
	                    d.androidSystemPropertyConfig = $root.perfetto.protos.AndroidSystemPropertyConfig.toObject(m.androidSystemPropertyConfig, o);
	                }
	                if (m.systemInfoConfig != null && m.hasOwnProperty("systemInfoConfig")) {
	                    d.systemInfoConfig = $root.perfetto.protos.SystemInfoConfig.toObject(m.systemInfoConfig, o);
	                }
	                if (m.networkPacketTraceConfig != null && m.hasOwnProperty("networkPacketTraceConfig")) {
	                    d.networkPacketTraceConfig = $root.perfetto.protos.NetworkPacketTraceConfig.toObject(m.networkPacketTraceConfig, o);
	                }
	                if (m.surfaceflingerLayersConfig != null && m.hasOwnProperty("surfaceflingerLayersConfig")) {
	                    d.surfaceflingerLayersConfig = $root.perfetto.protos.SurfaceFlingerLayersConfig.toObject(m.surfaceflingerLayersConfig, o);
	                }
	                if (m.preferSuspendClockForDuration != null && m.hasOwnProperty("preferSuspendClockForDuration")) {
	                    d.preferSuspendClockForDuration = m.preferSuspendClockForDuration;
	                }
	                if (m.surfaceflingerTransactionsConfig != null && m.hasOwnProperty("surfaceflingerTransactionsConfig")) {
	                    d.surfaceflingerTransactionsConfig = $root.perfetto.protos.SurfaceFlingerTransactionsConfig.toObject(m.surfaceflingerTransactionsConfig, o);
	                }
	                if (m.androidSdkSyspropGuardConfig != null && m.hasOwnProperty("androidSdkSyspropGuardConfig")) {
	                    d.androidSdkSyspropGuardConfig = $root.perfetto.protos.AndroidSdkSyspropGuardConfig.toObject(m.androidSdkSyspropGuardConfig, o);
	                }
	                if (m.etwConfig != null && m.hasOwnProperty("etwConfig")) {
	                    d.etwConfig = $root.perfetto.protos.EtwConfig.toObject(m.etwConfig, o);
	                }
	                if (m.protologConfig != null && m.hasOwnProperty("protologConfig")) {
	                    d.protologConfig = $root.perfetto.protos.ProtoLogConfig.toObject(m.protologConfig, o);
	                }
	                if (m.v8Config != null && m.hasOwnProperty("v8Config")) {
	                    d.v8Config = $root.perfetto.protos.V8Config.toObject(m.v8Config, o);
	                }
	                if (m.androidInputEventConfig != null && m.hasOwnProperty("androidInputEventConfig")) {
	                    d.androidInputEventConfig = $root.perfetto.protos.AndroidInputEventConfig.toObject(m.androidInputEventConfig, o);
	                }
	                if (m.pixelModemConfig != null && m.hasOwnProperty("pixelModemConfig")) {
	                    d.pixelModemConfig = $root.perfetto.protos.PixelModemConfig.toObject(m.pixelModemConfig, o);
	                }
	                if (m.windowmanagerConfig != null && m.hasOwnProperty("windowmanagerConfig")) {
	                    d.windowmanagerConfig = $root.perfetto.protos.WindowManagerConfig.toObject(m.windowmanagerConfig, o);
	                }
	                if (m.chromiumSystemMetrics != null && m.hasOwnProperty("chromiumSystemMetrics")) {
	                    d.chromiumSystemMetrics = $root.perfetto.protos.ChromiumSystemMetricsConfig.toObject(m.chromiumSystemMetrics, o);
	                }
	                if (m.legacyConfig != null && m.hasOwnProperty("legacyConfig")) {
	                    d.legacyConfig = m.legacyConfig;
	                }
	                if (m.forTesting != null && m.hasOwnProperty("forTesting")) {
	                    d.forTesting = $root.perfetto.protos.TestConfig.toObject(m.forTesting, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this DataSourceConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DataSourceConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DataSourceConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DataSourceConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DataSourceConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DataSourceConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DataSourceConfig";
	            };

	            /**
	             * SessionInitiator enum.
	             * @name perfetto.protos.DataSourceConfig.SessionInitiator
	             * @enum {number}
	             * @property {number} SESSION_INITIATOR_UNSPECIFIED=0 SESSION_INITIATOR_UNSPECIFIED value
	             * @property {number} SESSION_INITIATOR_TRUSTED_SYSTEM=1 SESSION_INITIATOR_TRUSTED_SYSTEM value
	             */
	            DataSourceConfig.SessionInitiator = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "SESSION_INITIATOR_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "SESSION_INITIATOR_TRUSTED_SYSTEM"] = 1;
	                return values;
	            })();

	            return DataSourceConfig;
	        })();

	        protos.AndroidGameInterventionListConfig = (function() {

	            /**
	             * Properties of an AndroidGameInterventionListConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidGameInterventionListConfig
	             * @property {Array.<string>|null} [packageNameFilter] AndroidGameInterventionListConfig packageNameFilter
	             */

	            /**
	             * Constructs a new AndroidGameInterventionListConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidGameInterventionListConfig.
	             * @implements IAndroidGameInterventionListConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidGameInterventionListConfig=} [p] Properties to set
	             */
	            function AndroidGameInterventionListConfig(p) {
	                this.packageNameFilter = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidGameInterventionListConfig packageNameFilter.
	             * @member {Array.<string>} packageNameFilter
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @instance
	             */
	            AndroidGameInterventionListConfig.prototype.packageNameFilter = $util.emptyArray;

	            /**
	             * Creates a new AndroidGameInterventionListConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @static
	             * @param {perfetto.protos.IAndroidGameInterventionListConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidGameInterventionListConfig} AndroidGameInterventionListConfig instance
	             */
	            AndroidGameInterventionListConfig.create = function create(properties) {
	                return new AndroidGameInterventionListConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidGameInterventionListConfig message. Does not implicitly {@link perfetto.protos.AndroidGameInterventionListConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @static
	             * @param {perfetto.protos.IAndroidGameInterventionListConfig} m AndroidGameInterventionListConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidGameInterventionListConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.packageNameFilter != null && m.packageNameFilter.length) {
	                    for (var i = 0; i < m.packageNameFilter.length; ++i)
	                        w.uint32(10).string(m.packageNameFilter[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an AndroidGameInterventionListConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidGameInterventionListConfig} AndroidGameInterventionListConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidGameInterventionListConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidGameInterventionListConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.packageNameFilter && m.packageNameFilter.length))
	                                m.packageNameFilter = [];
	                            m.packageNameFilter.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidGameInterventionListConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidGameInterventionListConfig} AndroidGameInterventionListConfig
	             */
	            AndroidGameInterventionListConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidGameInterventionListConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidGameInterventionListConfig();
	                if (d.packageNameFilter) {
	                    if (!Array.isArray(d.packageNameFilter))
	                        throw TypeError(".perfetto.protos.AndroidGameInterventionListConfig.packageNameFilter: array expected");
	                    m.packageNameFilter = [];
	                    for (var i = 0; i < d.packageNameFilter.length; ++i) {
	                        m.packageNameFilter[i] = String(d.packageNameFilter[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidGameInterventionListConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @static
	             * @param {perfetto.protos.AndroidGameInterventionListConfig} m AndroidGameInterventionListConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidGameInterventionListConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.packageNameFilter = [];
	                }
	                if (m.packageNameFilter && m.packageNameFilter.length) {
	                    d.packageNameFilter = [];
	                    for (var j = 0; j < m.packageNameFilter.length; ++j) {
	                        d.packageNameFilter[j] = m.packageNameFilter[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidGameInterventionListConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidGameInterventionListConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidGameInterventionListConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidGameInterventionListConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidGameInterventionListConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidGameInterventionListConfig";
	            };

	            return AndroidGameInterventionListConfig;
	        })();

	        protos.AndroidInputEventConfig = (function() {

	            /**
	             * Properties of an AndroidInputEventConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidInputEventConfig
	             * @property {perfetto.protos.AndroidInputEventConfig.TraceMode|null} [mode] AndroidInputEventConfig mode
	             * @property {Array.<perfetto.protos.AndroidInputEventConfig.ITraceRule>|null} [rules] AndroidInputEventConfig rules
	             * @property {boolean|null} [traceDispatcherInputEvents] AndroidInputEventConfig traceDispatcherInputEvents
	             * @property {boolean|null} [traceDispatcherWindowDispatch] AndroidInputEventConfig traceDispatcherWindowDispatch
	             */

	            /**
	             * Constructs a new AndroidInputEventConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidInputEventConfig.
	             * @implements IAndroidInputEventConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidInputEventConfig=} [p] Properties to set
	             */
	            function AndroidInputEventConfig(p) {
	                this.rules = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidInputEventConfig mode.
	             * @member {perfetto.protos.AndroidInputEventConfig.TraceMode} mode
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @instance
	             */
	            AndroidInputEventConfig.prototype.mode = 0;

	            /**
	             * AndroidInputEventConfig rules.
	             * @member {Array.<perfetto.protos.AndroidInputEventConfig.ITraceRule>} rules
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @instance
	             */
	            AndroidInputEventConfig.prototype.rules = $util.emptyArray;

	            /**
	             * AndroidInputEventConfig traceDispatcherInputEvents.
	             * @member {boolean} traceDispatcherInputEvents
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @instance
	             */
	            AndroidInputEventConfig.prototype.traceDispatcherInputEvents = false;

	            /**
	             * AndroidInputEventConfig traceDispatcherWindowDispatch.
	             * @member {boolean} traceDispatcherWindowDispatch
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @instance
	             */
	            AndroidInputEventConfig.prototype.traceDispatcherWindowDispatch = false;

	            /**
	             * Creates a new AndroidInputEventConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @static
	             * @param {perfetto.protos.IAndroidInputEventConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidInputEventConfig} AndroidInputEventConfig instance
	             */
	            AndroidInputEventConfig.create = function create(properties) {
	                return new AndroidInputEventConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidInputEventConfig message. Does not implicitly {@link perfetto.protos.AndroidInputEventConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @static
	             * @param {perfetto.protos.IAndroidInputEventConfig} m AndroidInputEventConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidInputEventConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.mode != null && Object.hasOwnProperty.call(m, "mode"))
	                    w.uint32(8).int32(m.mode);
	                if (m.rules != null && m.rules.length) {
	                    for (var i = 0; i < m.rules.length; ++i)
	                        $root.perfetto.protos.AndroidInputEventConfig.TraceRule.encode(m.rules[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.traceDispatcherInputEvents != null && Object.hasOwnProperty.call(m, "traceDispatcherInputEvents"))
	                    w.uint32(24).bool(m.traceDispatcherInputEvents);
	                if (m.traceDispatcherWindowDispatch != null && Object.hasOwnProperty.call(m, "traceDispatcherWindowDispatch"))
	                    w.uint32(32).bool(m.traceDispatcherWindowDispatch);
	                return w;
	            };

	            /**
	             * Decodes an AndroidInputEventConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidInputEventConfig} AndroidInputEventConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidInputEventConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidInputEventConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.mode = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.rules && m.rules.length))
	                                m.rules = [];
	                            m.rules.push($root.perfetto.protos.AndroidInputEventConfig.TraceRule.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 3: {
	                            m.traceDispatcherInputEvents = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.traceDispatcherWindowDispatch = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidInputEventConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidInputEventConfig} AndroidInputEventConfig
	             */
	            AndroidInputEventConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidInputEventConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidInputEventConfig();
	                switch (d.mode) {
	                default:
	                    if (typeof d.mode === "number") {
	                        m.mode = d.mode;
	                        break;
	                    }
	                    break;
	                case "TRACE_MODE_TRACE_ALL":
	                case 0:
	                    m.mode = 0;
	                    break;
	                case "TRACE_MODE_USE_RULES":
	                case 1:
	                    m.mode = 1;
	                    break;
	                }
	                if (d.rules) {
	                    if (!Array.isArray(d.rules))
	                        throw TypeError(".perfetto.protos.AndroidInputEventConfig.rules: array expected");
	                    m.rules = [];
	                    for (var i = 0; i < d.rules.length; ++i) {
	                        if (typeof d.rules[i] !== "object")
	                            throw TypeError(".perfetto.protos.AndroidInputEventConfig.rules: object expected");
	                        m.rules[i] = $root.perfetto.protos.AndroidInputEventConfig.TraceRule.fromObject(d.rules[i]);
	                    }
	                }
	                if (d.traceDispatcherInputEvents != null) {
	                    m.traceDispatcherInputEvents = Boolean(d.traceDispatcherInputEvents);
	                }
	                if (d.traceDispatcherWindowDispatch != null) {
	                    m.traceDispatcherWindowDispatch = Boolean(d.traceDispatcherWindowDispatch);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidInputEventConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @static
	             * @param {perfetto.protos.AndroidInputEventConfig} m AndroidInputEventConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidInputEventConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.rules = [];
	                }
	                if (o.defaults) {
	                    d.mode = o.enums === String ? "TRACE_MODE_TRACE_ALL" : 0;
	                    d.traceDispatcherInputEvents = false;
	                    d.traceDispatcherWindowDispatch = false;
	                }
	                if (m.mode != null && m.hasOwnProperty("mode")) {
	                    d.mode = o.enums === String ? $root.perfetto.protos.AndroidInputEventConfig.TraceMode[m.mode] === undefined ? m.mode : $root.perfetto.protos.AndroidInputEventConfig.TraceMode[m.mode] : m.mode;
	                }
	                if (m.rules && m.rules.length) {
	                    d.rules = [];
	                    for (var j = 0; j < m.rules.length; ++j) {
	                        d.rules[j] = $root.perfetto.protos.AndroidInputEventConfig.TraceRule.toObject(m.rules[j], o);
	                    }
	                }
	                if (m.traceDispatcherInputEvents != null && m.hasOwnProperty("traceDispatcherInputEvents")) {
	                    d.traceDispatcherInputEvents = m.traceDispatcherInputEvents;
	                }
	                if (m.traceDispatcherWindowDispatch != null && m.hasOwnProperty("traceDispatcherWindowDispatch")) {
	                    d.traceDispatcherWindowDispatch = m.traceDispatcherWindowDispatch;
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidInputEventConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidInputEventConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidInputEventConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidInputEventConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidInputEventConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidInputEventConfig";
	            };

	            /**
	             * TraceMode enum.
	             * @name perfetto.protos.AndroidInputEventConfig.TraceMode
	             * @enum {number}
	             * @property {number} TRACE_MODE_TRACE_ALL=0 TRACE_MODE_TRACE_ALL value
	             * @property {number} TRACE_MODE_USE_RULES=1 TRACE_MODE_USE_RULES value
	             */
	            AndroidInputEventConfig.TraceMode = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "TRACE_MODE_TRACE_ALL"] = 0;
	                values[valuesById[1] = "TRACE_MODE_USE_RULES"] = 1;
	                return values;
	            })();

	            /**
	             * TraceLevel enum.
	             * @name perfetto.protos.AndroidInputEventConfig.TraceLevel
	             * @enum {number}
	             * @property {number} TRACE_LEVEL_NONE=0 TRACE_LEVEL_NONE value
	             * @property {number} TRACE_LEVEL_REDACTED=1 TRACE_LEVEL_REDACTED value
	             * @property {number} TRACE_LEVEL_COMPLETE=2 TRACE_LEVEL_COMPLETE value
	             */
	            AndroidInputEventConfig.TraceLevel = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "TRACE_LEVEL_NONE"] = 0;
	                values[valuesById[1] = "TRACE_LEVEL_REDACTED"] = 1;
	                values[valuesById[2] = "TRACE_LEVEL_COMPLETE"] = 2;
	                return values;
	            })();

	            AndroidInputEventConfig.TraceRule = (function() {

	                /**
	                 * Properties of a TraceRule.
	                 * @memberof perfetto.protos.AndroidInputEventConfig
	                 * @interface ITraceRule
	                 * @property {perfetto.protos.AndroidInputEventConfig.TraceLevel|null} [traceLevel] TraceRule traceLevel
	                 * @property {Array.<string>|null} [matchAllPackages] TraceRule matchAllPackages
	                 * @property {Array.<string>|null} [matchAnyPackages] TraceRule matchAnyPackages
	                 * @property {boolean|null} [matchSecure] TraceRule matchSecure
	                 * @property {boolean|null} [matchImeConnectionActive] TraceRule matchImeConnectionActive
	                 */

	                /**
	                 * Constructs a new TraceRule.
	                 * @memberof perfetto.protos.AndroidInputEventConfig
	                 * @classdesc Represents a TraceRule.
	                 * @implements ITraceRule
	                 * @constructor
	                 * @param {perfetto.protos.AndroidInputEventConfig.ITraceRule=} [p] Properties to set
	                 */
	                function TraceRule(p) {
	                    this.matchAllPackages = [];
	                    this.matchAnyPackages = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * TraceRule traceLevel.
	                 * @member {perfetto.protos.AndroidInputEventConfig.TraceLevel} traceLevel
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @instance
	                 */
	                TraceRule.prototype.traceLevel = 0;

	                /**
	                 * TraceRule matchAllPackages.
	                 * @member {Array.<string>} matchAllPackages
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @instance
	                 */
	                TraceRule.prototype.matchAllPackages = $util.emptyArray;

	                /**
	                 * TraceRule matchAnyPackages.
	                 * @member {Array.<string>} matchAnyPackages
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @instance
	                 */
	                TraceRule.prototype.matchAnyPackages = $util.emptyArray;

	                /**
	                 * TraceRule matchSecure.
	                 * @member {boolean} matchSecure
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @instance
	                 */
	                TraceRule.prototype.matchSecure = false;

	                /**
	                 * TraceRule matchImeConnectionActive.
	                 * @member {boolean} matchImeConnectionActive
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @instance
	                 */
	                TraceRule.prototype.matchImeConnectionActive = false;

	                /**
	                 * Creates a new TraceRule instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @static
	                 * @param {perfetto.protos.AndroidInputEventConfig.ITraceRule=} [properties] Properties to set
	                 * @returns {perfetto.protos.AndroidInputEventConfig.TraceRule} TraceRule instance
	                 */
	                TraceRule.create = function create(properties) {
	                    return new TraceRule(properties);
	                };

	                /**
	                 * Encodes the specified TraceRule message. Does not implicitly {@link perfetto.protos.AndroidInputEventConfig.TraceRule.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @static
	                 * @param {perfetto.protos.AndroidInputEventConfig.ITraceRule} m TraceRule message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                TraceRule.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.traceLevel != null && Object.hasOwnProperty.call(m, "traceLevel"))
	                        w.uint32(8).int32(m.traceLevel);
	                    if (m.matchAllPackages != null && m.matchAllPackages.length) {
	                        for (var i = 0; i < m.matchAllPackages.length; ++i)
	                            w.uint32(18).string(m.matchAllPackages[i]);
	                    }
	                    if (m.matchAnyPackages != null && m.matchAnyPackages.length) {
	                        for (var i = 0; i < m.matchAnyPackages.length; ++i)
	                            w.uint32(26).string(m.matchAnyPackages[i]);
	                    }
	                    if (m.matchSecure != null && Object.hasOwnProperty.call(m, "matchSecure"))
	                        w.uint32(32).bool(m.matchSecure);
	                    if (m.matchImeConnectionActive != null && Object.hasOwnProperty.call(m, "matchImeConnectionActive"))
	                        w.uint32(40).bool(m.matchImeConnectionActive);
	                    return w;
	                };

	                /**
	                 * Decodes a TraceRule message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.AndroidInputEventConfig.TraceRule} TraceRule
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                TraceRule.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidInputEventConfig.TraceRule();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.traceLevel = r.int32();
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.matchAllPackages && m.matchAllPackages.length))
	                                    m.matchAllPackages = [];
	                                m.matchAllPackages.push(r.string());
	                                break;
	                            }
	                        case 3: {
	                                if (!(m.matchAnyPackages && m.matchAnyPackages.length))
	                                    m.matchAnyPackages = [];
	                                m.matchAnyPackages.push(r.string());
	                                break;
	                            }
	                        case 4: {
	                                m.matchSecure = r.bool();
	                                break;
	                            }
	                        case 5: {
	                                m.matchImeConnectionActive = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a TraceRule message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.AndroidInputEventConfig.TraceRule} TraceRule
	                 */
	                TraceRule.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.AndroidInputEventConfig.TraceRule)
	                        return d;
	                    var m = new $root.perfetto.protos.AndroidInputEventConfig.TraceRule();
	                    switch (d.traceLevel) {
	                    default:
	                        if (typeof d.traceLevel === "number") {
	                            m.traceLevel = d.traceLevel;
	                            break;
	                        }
	                        break;
	                    case "TRACE_LEVEL_NONE":
	                    case 0:
	                        m.traceLevel = 0;
	                        break;
	                    case "TRACE_LEVEL_REDACTED":
	                    case 1:
	                        m.traceLevel = 1;
	                        break;
	                    case "TRACE_LEVEL_COMPLETE":
	                    case 2:
	                        m.traceLevel = 2;
	                        break;
	                    }
	                    if (d.matchAllPackages) {
	                        if (!Array.isArray(d.matchAllPackages))
	                            throw TypeError(".perfetto.protos.AndroidInputEventConfig.TraceRule.matchAllPackages: array expected");
	                        m.matchAllPackages = [];
	                        for (var i = 0; i < d.matchAllPackages.length; ++i) {
	                            m.matchAllPackages[i] = String(d.matchAllPackages[i]);
	                        }
	                    }
	                    if (d.matchAnyPackages) {
	                        if (!Array.isArray(d.matchAnyPackages))
	                            throw TypeError(".perfetto.protos.AndroidInputEventConfig.TraceRule.matchAnyPackages: array expected");
	                        m.matchAnyPackages = [];
	                        for (var i = 0; i < d.matchAnyPackages.length; ++i) {
	                            m.matchAnyPackages[i] = String(d.matchAnyPackages[i]);
	                        }
	                    }
	                    if (d.matchSecure != null) {
	                        m.matchSecure = Boolean(d.matchSecure);
	                    }
	                    if (d.matchImeConnectionActive != null) {
	                        m.matchImeConnectionActive = Boolean(d.matchImeConnectionActive);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a TraceRule message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @static
	                 * @param {perfetto.protos.AndroidInputEventConfig.TraceRule} m TraceRule
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                TraceRule.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.matchAllPackages = [];
	                        d.matchAnyPackages = [];
	                    }
	                    if (o.defaults) {
	                        d.traceLevel = o.enums === String ? "TRACE_LEVEL_NONE" : 0;
	                        d.matchSecure = false;
	                        d.matchImeConnectionActive = false;
	                    }
	                    if (m.traceLevel != null && m.hasOwnProperty("traceLevel")) {
	                        d.traceLevel = o.enums === String ? $root.perfetto.protos.AndroidInputEventConfig.TraceLevel[m.traceLevel] === undefined ? m.traceLevel : $root.perfetto.protos.AndroidInputEventConfig.TraceLevel[m.traceLevel] : m.traceLevel;
	                    }
	                    if (m.matchAllPackages && m.matchAllPackages.length) {
	                        d.matchAllPackages = [];
	                        for (var j = 0; j < m.matchAllPackages.length; ++j) {
	                            d.matchAllPackages[j] = m.matchAllPackages[j];
	                        }
	                    }
	                    if (m.matchAnyPackages && m.matchAnyPackages.length) {
	                        d.matchAnyPackages = [];
	                        for (var j = 0; j < m.matchAnyPackages.length; ++j) {
	                            d.matchAnyPackages[j] = m.matchAnyPackages[j];
	                        }
	                    }
	                    if (m.matchSecure != null && m.hasOwnProperty("matchSecure")) {
	                        d.matchSecure = m.matchSecure;
	                    }
	                    if (m.matchImeConnectionActive != null && m.hasOwnProperty("matchImeConnectionActive")) {
	                        d.matchImeConnectionActive = m.matchImeConnectionActive;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this TraceRule to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                TraceRule.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for TraceRule
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.AndroidInputEventConfig.TraceRule
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                TraceRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.AndroidInputEventConfig.TraceRule";
	                };

	                return TraceRule;
	            })();

	            return AndroidInputEventConfig;
	        })();

	        protos.AndroidLogConfig = (function() {

	            /**
	             * Properties of an AndroidLogConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidLogConfig
	             * @property {Array.<perfetto.protos.AndroidLogId>|null} [logIds] AndroidLogConfig logIds
	             * @property {perfetto.protos.AndroidLogPriority|null} [minPrio] AndroidLogConfig minPrio
	             * @property {Array.<string>|null} [filterTags] AndroidLogConfig filterTags
	             */

	            /**
	             * Constructs a new AndroidLogConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidLogConfig.
	             * @implements IAndroidLogConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidLogConfig=} [p] Properties to set
	             */
	            function AndroidLogConfig(p) {
	                this.logIds = [];
	                this.filterTags = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidLogConfig logIds.
	             * @member {Array.<perfetto.protos.AndroidLogId>} logIds
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @instance
	             */
	            AndroidLogConfig.prototype.logIds = $util.emptyArray;

	            /**
	             * AndroidLogConfig minPrio.
	             * @member {perfetto.protos.AndroidLogPriority} minPrio
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @instance
	             */
	            AndroidLogConfig.prototype.minPrio = 0;

	            /**
	             * AndroidLogConfig filterTags.
	             * @member {Array.<string>} filterTags
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @instance
	             */
	            AndroidLogConfig.prototype.filterTags = $util.emptyArray;

	            /**
	             * Creates a new AndroidLogConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @static
	             * @param {perfetto.protos.IAndroidLogConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidLogConfig} AndroidLogConfig instance
	             */
	            AndroidLogConfig.create = function create(properties) {
	                return new AndroidLogConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidLogConfig message. Does not implicitly {@link perfetto.protos.AndroidLogConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @static
	             * @param {perfetto.protos.IAndroidLogConfig} m AndroidLogConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidLogConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.logIds != null && m.logIds.length) {
	                    for (var i = 0; i < m.logIds.length; ++i)
	                        w.uint32(8).int32(m.logIds[i]);
	                }
	                if (m.minPrio != null && Object.hasOwnProperty.call(m, "minPrio"))
	                    w.uint32(24).int32(m.minPrio);
	                if (m.filterTags != null && m.filterTags.length) {
	                    for (var i = 0; i < m.filterTags.length; ++i)
	                        w.uint32(34).string(m.filterTags[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an AndroidLogConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidLogConfig} AndroidLogConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidLogConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidLogConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.logIds && m.logIds.length))
	                                m.logIds = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.logIds.push(r.int32());
	                            } else
	                                m.logIds.push(r.int32());
	                            break;
	                        }
	                    case 3: {
	                            m.minPrio = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.filterTags && m.filterTags.length))
	                                m.filterTags = [];
	                            m.filterTags.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidLogConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidLogConfig} AndroidLogConfig
	             */
	            AndroidLogConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidLogConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidLogConfig();
	                if (d.logIds) {
	                    if (!Array.isArray(d.logIds))
	                        throw TypeError(".perfetto.protos.AndroidLogConfig.logIds: array expected");
	                    m.logIds = [];
	                    for (var i = 0; i < d.logIds.length; ++i) {
	                        switch (d.logIds[i]) {
	                        default:
	                            if (typeof d.logIds[i] === "number") {
	                                m.logIds[i] = d.logIds[i];
	                                break;
	                            }
	                        case "LID_DEFAULT":
	                        case 0:
	                            m.logIds[i] = 0;
	                            break;
	                        case "LID_RADIO":
	                        case 1:
	                            m.logIds[i] = 1;
	                            break;
	                        case "LID_EVENTS":
	                        case 2:
	                            m.logIds[i] = 2;
	                            break;
	                        case "LID_SYSTEM":
	                        case 3:
	                            m.logIds[i] = 3;
	                            break;
	                        case "LID_CRASH":
	                        case 4:
	                            m.logIds[i] = 4;
	                            break;
	                        case "LID_STATS":
	                        case 5:
	                            m.logIds[i] = 5;
	                            break;
	                        case "LID_SECURITY":
	                        case 6:
	                            m.logIds[i] = 6;
	                            break;
	                        case "LID_KERNEL":
	                        case 7:
	                            m.logIds[i] = 7;
	                            break;
	                        }
	                    }
	                }
	                switch (d.minPrio) {
	                default:
	                    if (typeof d.minPrio === "number") {
	                        m.minPrio = d.minPrio;
	                        break;
	                    }
	                    break;
	                case "PRIO_UNSPECIFIED":
	                case 0:
	                    m.minPrio = 0;
	                    break;
	                case "PRIO_UNUSED":
	                case 1:
	                    m.minPrio = 1;
	                    break;
	                case "PRIO_VERBOSE":
	                case 2:
	                    m.minPrio = 2;
	                    break;
	                case "PRIO_DEBUG":
	                case 3:
	                    m.minPrio = 3;
	                    break;
	                case "PRIO_INFO":
	                case 4:
	                    m.minPrio = 4;
	                    break;
	                case "PRIO_WARN":
	                case 5:
	                    m.minPrio = 5;
	                    break;
	                case "PRIO_ERROR":
	                case 6:
	                    m.minPrio = 6;
	                    break;
	                case "PRIO_FATAL":
	                case 7:
	                    m.minPrio = 7;
	                    break;
	                }
	                if (d.filterTags) {
	                    if (!Array.isArray(d.filterTags))
	                        throw TypeError(".perfetto.protos.AndroidLogConfig.filterTags: array expected");
	                    m.filterTags = [];
	                    for (var i = 0; i < d.filterTags.length; ++i) {
	                        m.filterTags[i] = String(d.filterTags[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidLogConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @static
	             * @param {perfetto.protos.AndroidLogConfig} m AndroidLogConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidLogConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.logIds = [];
	                    d.filterTags = [];
	                }
	                if (o.defaults) {
	                    d.minPrio = o.enums === String ? "PRIO_UNSPECIFIED" : 0;
	                }
	                if (m.logIds && m.logIds.length) {
	                    d.logIds = [];
	                    for (var j = 0; j < m.logIds.length; ++j) {
	                        d.logIds[j] = o.enums === String ? $root.perfetto.protos.AndroidLogId[m.logIds[j]] === undefined ? m.logIds[j] : $root.perfetto.protos.AndroidLogId[m.logIds[j]] : m.logIds[j];
	                    }
	                }
	                if (m.minPrio != null && m.hasOwnProperty("minPrio")) {
	                    d.minPrio = o.enums === String ? $root.perfetto.protos.AndroidLogPriority[m.minPrio] === undefined ? m.minPrio : $root.perfetto.protos.AndroidLogPriority[m.minPrio] : m.minPrio;
	                }
	                if (m.filterTags && m.filterTags.length) {
	                    d.filterTags = [];
	                    for (var j = 0; j < m.filterTags.length; ++j) {
	                        d.filterTags[j] = m.filterTags[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidLogConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidLogConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidLogConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidLogConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidLogConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidLogConfig";
	            };

	            return AndroidLogConfig;
	        })();

	        /**
	         * AndroidLogId enum.
	         * @name perfetto.protos.AndroidLogId
	         * @enum {number}
	         * @property {number} LID_DEFAULT=0 LID_DEFAULT value
	         * @property {number} LID_RADIO=1 LID_RADIO value
	         * @property {number} LID_EVENTS=2 LID_EVENTS value
	         * @property {number} LID_SYSTEM=3 LID_SYSTEM value
	         * @property {number} LID_CRASH=4 LID_CRASH value
	         * @property {number} LID_STATS=5 LID_STATS value
	         * @property {number} LID_SECURITY=6 LID_SECURITY value
	         * @property {number} LID_KERNEL=7 LID_KERNEL value
	         */
	        protos.AndroidLogId = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "LID_DEFAULT"] = 0;
	            values[valuesById[1] = "LID_RADIO"] = 1;
	            values[valuesById[2] = "LID_EVENTS"] = 2;
	            values[valuesById[3] = "LID_SYSTEM"] = 3;
	            values[valuesById[4] = "LID_CRASH"] = 4;
	            values[valuesById[5] = "LID_STATS"] = 5;
	            values[valuesById[6] = "LID_SECURITY"] = 6;
	            values[valuesById[7] = "LID_KERNEL"] = 7;
	            return values;
	        })();

	        /**
	         * AndroidLogPriority enum.
	         * @name perfetto.protos.AndroidLogPriority
	         * @enum {number}
	         * @property {number} PRIO_UNSPECIFIED=0 PRIO_UNSPECIFIED value
	         * @property {number} PRIO_UNUSED=1 PRIO_UNUSED value
	         * @property {number} PRIO_VERBOSE=2 PRIO_VERBOSE value
	         * @property {number} PRIO_DEBUG=3 PRIO_DEBUG value
	         * @property {number} PRIO_INFO=4 PRIO_INFO value
	         * @property {number} PRIO_WARN=5 PRIO_WARN value
	         * @property {number} PRIO_ERROR=6 PRIO_ERROR value
	         * @property {number} PRIO_FATAL=7 PRIO_FATAL value
	         */
	        protos.AndroidLogPriority = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "PRIO_UNSPECIFIED"] = 0;
	            values[valuesById[1] = "PRIO_UNUSED"] = 1;
	            values[valuesById[2] = "PRIO_VERBOSE"] = 2;
	            values[valuesById[3] = "PRIO_DEBUG"] = 3;
	            values[valuesById[4] = "PRIO_INFO"] = 4;
	            values[valuesById[5] = "PRIO_WARN"] = 5;
	            values[valuesById[6] = "PRIO_ERROR"] = 6;
	            values[valuesById[7] = "PRIO_FATAL"] = 7;
	            return values;
	        })();

	        protos.AndroidPolledStateConfig = (function() {

	            /**
	             * Properties of an AndroidPolledStateConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidPolledStateConfig
	             * @property {number|null} [pollMs] AndroidPolledStateConfig pollMs
	             */

	            /**
	             * Constructs a new AndroidPolledStateConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidPolledStateConfig.
	             * @implements IAndroidPolledStateConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidPolledStateConfig=} [p] Properties to set
	             */
	            function AndroidPolledStateConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidPolledStateConfig pollMs.
	             * @member {number} pollMs
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @instance
	             */
	            AndroidPolledStateConfig.prototype.pollMs = 0;

	            /**
	             * Creates a new AndroidPolledStateConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @static
	             * @param {perfetto.protos.IAndroidPolledStateConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidPolledStateConfig} AndroidPolledStateConfig instance
	             */
	            AndroidPolledStateConfig.create = function create(properties) {
	                return new AndroidPolledStateConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidPolledStateConfig message. Does not implicitly {@link perfetto.protos.AndroidPolledStateConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @static
	             * @param {perfetto.protos.IAndroidPolledStateConfig} m AndroidPolledStateConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidPolledStateConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.pollMs != null && Object.hasOwnProperty.call(m, "pollMs"))
	                    w.uint32(8).uint32(m.pollMs);
	                return w;
	            };

	            /**
	             * Decodes an AndroidPolledStateConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidPolledStateConfig} AndroidPolledStateConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidPolledStateConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidPolledStateConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.pollMs = r.uint32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidPolledStateConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidPolledStateConfig} AndroidPolledStateConfig
	             */
	            AndroidPolledStateConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidPolledStateConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidPolledStateConfig();
	                if (d.pollMs != null) {
	                    m.pollMs = d.pollMs >>> 0;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidPolledStateConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @static
	             * @param {perfetto.protos.AndroidPolledStateConfig} m AndroidPolledStateConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidPolledStateConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.pollMs = 0;
	                }
	                if (m.pollMs != null && m.hasOwnProperty("pollMs")) {
	                    d.pollMs = m.pollMs;
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidPolledStateConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidPolledStateConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidPolledStateConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidPolledStateConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidPolledStateConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidPolledStateConfig";
	            };

	            return AndroidPolledStateConfig;
	        })();

	        protos.AndroidSystemPropertyConfig = (function() {

	            /**
	             * Properties of an AndroidSystemPropertyConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidSystemPropertyConfig
	             * @property {number|null} [pollMs] AndroidSystemPropertyConfig pollMs
	             * @property {Array.<string>|null} [propertyName] AndroidSystemPropertyConfig propertyName
	             */

	            /**
	             * Constructs a new AndroidSystemPropertyConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidSystemPropertyConfig.
	             * @implements IAndroidSystemPropertyConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidSystemPropertyConfig=} [p] Properties to set
	             */
	            function AndroidSystemPropertyConfig(p) {
	                this.propertyName = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidSystemPropertyConfig pollMs.
	             * @member {number} pollMs
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @instance
	             */
	            AndroidSystemPropertyConfig.prototype.pollMs = 0;

	            /**
	             * AndroidSystemPropertyConfig propertyName.
	             * @member {Array.<string>} propertyName
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @instance
	             */
	            AndroidSystemPropertyConfig.prototype.propertyName = $util.emptyArray;

	            /**
	             * Creates a new AndroidSystemPropertyConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @static
	             * @param {perfetto.protos.IAndroidSystemPropertyConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidSystemPropertyConfig} AndroidSystemPropertyConfig instance
	             */
	            AndroidSystemPropertyConfig.create = function create(properties) {
	                return new AndroidSystemPropertyConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidSystemPropertyConfig message. Does not implicitly {@link perfetto.protos.AndroidSystemPropertyConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @static
	             * @param {perfetto.protos.IAndroidSystemPropertyConfig} m AndroidSystemPropertyConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidSystemPropertyConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.pollMs != null && Object.hasOwnProperty.call(m, "pollMs"))
	                    w.uint32(8).uint32(m.pollMs);
	                if (m.propertyName != null && m.propertyName.length) {
	                    for (var i = 0; i < m.propertyName.length; ++i)
	                        w.uint32(18).string(m.propertyName[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an AndroidSystemPropertyConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidSystemPropertyConfig} AndroidSystemPropertyConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidSystemPropertyConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidSystemPropertyConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.pollMs = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.propertyName && m.propertyName.length))
	                                m.propertyName = [];
	                            m.propertyName.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidSystemPropertyConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidSystemPropertyConfig} AndroidSystemPropertyConfig
	             */
	            AndroidSystemPropertyConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidSystemPropertyConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidSystemPropertyConfig();
	                if (d.pollMs != null) {
	                    m.pollMs = d.pollMs >>> 0;
	                }
	                if (d.propertyName) {
	                    if (!Array.isArray(d.propertyName))
	                        throw TypeError(".perfetto.protos.AndroidSystemPropertyConfig.propertyName: array expected");
	                    m.propertyName = [];
	                    for (var i = 0; i < d.propertyName.length; ++i) {
	                        m.propertyName[i] = String(d.propertyName[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidSystemPropertyConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @static
	             * @param {perfetto.protos.AndroidSystemPropertyConfig} m AndroidSystemPropertyConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidSystemPropertyConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.propertyName = [];
	                }
	                if (o.defaults) {
	                    d.pollMs = 0;
	                }
	                if (m.pollMs != null && m.hasOwnProperty("pollMs")) {
	                    d.pollMs = m.pollMs;
	                }
	                if (m.propertyName && m.propertyName.length) {
	                    d.propertyName = [];
	                    for (var j = 0; j < m.propertyName.length; ++j) {
	                        d.propertyName[j] = m.propertyName[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidSystemPropertyConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidSystemPropertyConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidSystemPropertyConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidSystemPropertyConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidSystemPropertyConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidSystemPropertyConfig";
	            };

	            return AndroidSystemPropertyConfig;
	        })();

	        protos.AndroidSdkSyspropGuardConfig = (function() {

	            /**
	             * Properties of an AndroidSdkSyspropGuardConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidSdkSyspropGuardConfig
	             * @property {boolean|null} [surfaceflingerSkiaTrackEvents] AndroidSdkSyspropGuardConfig surfaceflingerSkiaTrackEvents
	             * @property {boolean|null} [hwuiSkiaTrackEvents] AndroidSdkSyspropGuardConfig hwuiSkiaTrackEvents
	             * @property {Array.<string>|null} [hwuiPackageNameFilter] AndroidSdkSyspropGuardConfig hwuiPackageNameFilter
	             */

	            /**
	             * Constructs a new AndroidSdkSyspropGuardConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidSdkSyspropGuardConfig.
	             * @implements IAndroidSdkSyspropGuardConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidSdkSyspropGuardConfig=} [p] Properties to set
	             */
	            function AndroidSdkSyspropGuardConfig(p) {
	                this.hwuiPackageNameFilter = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidSdkSyspropGuardConfig surfaceflingerSkiaTrackEvents.
	             * @member {boolean} surfaceflingerSkiaTrackEvents
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @instance
	             */
	            AndroidSdkSyspropGuardConfig.prototype.surfaceflingerSkiaTrackEvents = false;

	            /**
	             * AndroidSdkSyspropGuardConfig hwuiSkiaTrackEvents.
	             * @member {boolean} hwuiSkiaTrackEvents
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @instance
	             */
	            AndroidSdkSyspropGuardConfig.prototype.hwuiSkiaTrackEvents = false;

	            /**
	             * AndroidSdkSyspropGuardConfig hwuiPackageNameFilter.
	             * @member {Array.<string>} hwuiPackageNameFilter
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @instance
	             */
	            AndroidSdkSyspropGuardConfig.prototype.hwuiPackageNameFilter = $util.emptyArray;

	            /**
	             * Creates a new AndroidSdkSyspropGuardConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @static
	             * @param {perfetto.protos.IAndroidSdkSyspropGuardConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidSdkSyspropGuardConfig} AndroidSdkSyspropGuardConfig instance
	             */
	            AndroidSdkSyspropGuardConfig.create = function create(properties) {
	                return new AndroidSdkSyspropGuardConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidSdkSyspropGuardConfig message. Does not implicitly {@link perfetto.protos.AndroidSdkSyspropGuardConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @static
	             * @param {perfetto.protos.IAndroidSdkSyspropGuardConfig} m AndroidSdkSyspropGuardConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidSdkSyspropGuardConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.surfaceflingerSkiaTrackEvents != null && Object.hasOwnProperty.call(m, "surfaceflingerSkiaTrackEvents"))
	                    w.uint32(8).bool(m.surfaceflingerSkiaTrackEvents);
	                if (m.hwuiSkiaTrackEvents != null && Object.hasOwnProperty.call(m, "hwuiSkiaTrackEvents"))
	                    w.uint32(16).bool(m.hwuiSkiaTrackEvents);
	                if (m.hwuiPackageNameFilter != null && m.hwuiPackageNameFilter.length) {
	                    for (var i = 0; i < m.hwuiPackageNameFilter.length; ++i)
	                        w.uint32(26).string(m.hwuiPackageNameFilter[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an AndroidSdkSyspropGuardConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidSdkSyspropGuardConfig} AndroidSdkSyspropGuardConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidSdkSyspropGuardConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidSdkSyspropGuardConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.surfaceflingerSkiaTrackEvents = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            m.hwuiSkiaTrackEvents = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.hwuiPackageNameFilter && m.hwuiPackageNameFilter.length))
	                                m.hwuiPackageNameFilter = [];
	                            m.hwuiPackageNameFilter.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidSdkSyspropGuardConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidSdkSyspropGuardConfig} AndroidSdkSyspropGuardConfig
	             */
	            AndroidSdkSyspropGuardConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidSdkSyspropGuardConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidSdkSyspropGuardConfig();
	                if (d.surfaceflingerSkiaTrackEvents != null) {
	                    m.surfaceflingerSkiaTrackEvents = Boolean(d.surfaceflingerSkiaTrackEvents);
	                }
	                if (d.hwuiSkiaTrackEvents != null) {
	                    m.hwuiSkiaTrackEvents = Boolean(d.hwuiSkiaTrackEvents);
	                }
	                if (d.hwuiPackageNameFilter) {
	                    if (!Array.isArray(d.hwuiPackageNameFilter))
	                        throw TypeError(".perfetto.protos.AndroidSdkSyspropGuardConfig.hwuiPackageNameFilter: array expected");
	                    m.hwuiPackageNameFilter = [];
	                    for (var i = 0; i < d.hwuiPackageNameFilter.length; ++i) {
	                        m.hwuiPackageNameFilter[i] = String(d.hwuiPackageNameFilter[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidSdkSyspropGuardConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @static
	             * @param {perfetto.protos.AndroidSdkSyspropGuardConfig} m AndroidSdkSyspropGuardConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidSdkSyspropGuardConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.hwuiPackageNameFilter = [];
	                }
	                if (o.defaults) {
	                    d.surfaceflingerSkiaTrackEvents = false;
	                    d.hwuiSkiaTrackEvents = false;
	                }
	                if (m.surfaceflingerSkiaTrackEvents != null && m.hasOwnProperty("surfaceflingerSkiaTrackEvents")) {
	                    d.surfaceflingerSkiaTrackEvents = m.surfaceflingerSkiaTrackEvents;
	                }
	                if (m.hwuiSkiaTrackEvents != null && m.hasOwnProperty("hwuiSkiaTrackEvents")) {
	                    d.hwuiSkiaTrackEvents = m.hwuiSkiaTrackEvents;
	                }
	                if (m.hwuiPackageNameFilter && m.hwuiPackageNameFilter.length) {
	                    d.hwuiPackageNameFilter = [];
	                    for (var j = 0; j < m.hwuiPackageNameFilter.length; ++j) {
	                        d.hwuiPackageNameFilter[j] = m.hwuiPackageNameFilter[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidSdkSyspropGuardConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidSdkSyspropGuardConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidSdkSyspropGuardConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidSdkSyspropGuardConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidSdkSyspropGuardConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidSdkSyspropGuardConfig";
	            };

	            return AndroidSdkSyspropGuardConfig;
	        })();

	        protos.NetworkPacketTraceConfig = (function() {

	            /**
	             * Properties of a NetworkPacketTraceConfig.
	             * @memberof perfetto.protos
	             * @interface INetworkPacketTraceConfig
	             * @property {number|null} [pollMs] NetworkPacketTraceConfig pollMs
	             * @property {number|null} [aggregationThreshold] record per-packet details. A value of 1 always records aggregate details.
	             * @property {number|null} [internLimit] NetworkPacketTraceConfig internLimit
	             * @property {boolean|null} [dropLocalPort] NetworkPacketTraceConfig dropLocalPort
	             * @property {boolean|null} [dropRemotePort] NetworkPacketTraceConfig dropRemotePort
	             * @property {boolean|null} [dropTcpFlags] NetworkPacketTraceConfig dropTcpFlags
	             */

	            /**
	             * Constructs a new NetworkPacketTraceConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a NetworkPacketTraceConfig.
	             * @implements INetworkPacketTraceConfig
	             * @constructor
	             * @param {perfetto.protos.INetworkPacketTraceConfig=} [p] Properties to set
	             */
	            function NetworkPacketTraceConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * NetworkPacketTraceConfig pollMs.
	             * @member {number} pollMs
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             */
	            NetworkPacketTraceConfig.prototype.pollMs = 0;

	            /**
	             * record per-packet details. A value of 1 always records aggregate details.
	             * @member {number} aggregationThreshold
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             */
	            NetworkPacketTraceConfig.prototype.aggregationThreshold = 0;

	            /**
	             * NetworkPacketTraceConfig internLimit.
	             * @member {number} internLimit
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             */
	            NetworkPacketTraceConfig.prototype.internLimit = 0;

	            /**
	             * NetworkPacketTraceConfig dropLocalPort.
	             * @member {boolean} dropLocalPort
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             */
	            NetworkPacketTraceConfig.prototype.dropLocalPort = false;

	            /**
	             * NetworkPacketTraceConfig dropRemotePort.
	             * @member {boolean} dropRemotePort
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             */
	            NetworkPacketTraceConfig.prototype.dropRemotePort = false;

	            /**
	             * NetworkPacketTraceConfig dropTcpFlags.
	             * @member {boolean} dropTcpFlags
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             */
	            NetworkPacketTraceConfig.prototype.dropTcpFlags = false;

	            /**
	             * Creates a new NetworkPacketTraceConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @static
	             * @param {perfetto.protos.INetworkPacketTraceConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.NetworkPacketTraceConfig} NetworkPacketTraceConfig instance
	             */
	            NetworkPacketTraceConfig.create = function create(properties) {
	                return new NetworkPacketTraceConfig(properties);
	            };

	            /**
	             * Encodes the specified NetworkPacketTraceConfig message. Does not implicitly {@link perfetto.protos.NetworkPacketTraceConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @static
	             * @param {perfetto.protos.INetworkPacketTraceConfig} m NetworkPacketTraceConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            NetworkPacketTraceConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.pollMs != null && Object.hasOwnProperty.call(m, "pollMs"))
	                    w.uint32(8).uint32(m.pollMs);
	                if (m.aggregationThreshold != null && Object.hasOwnProperty.call(m, "aggregationThreshold"))
	                    w.uint32(16).uint32(m.aggregationThreshold);
	                if (m.internLimit != null && Object.hasOwnProperty.call(m, "internLimit"))
	                    w.uint32(24).uint32(m.internLimit);
	                if (m.dropLocalPort != null && Object.hasOwnProperty.call(m, "dropLocalPort"))
	                    w.uint32(32).bool(m.dropLocalPort);
	                if (m.dropRemotePort != null && Object.hasOwnProperty.call(m, "dropRemotePort"))
	                    w.uint32(40).bool(m.dropRemotePort);
	                if (m.dropTcpFlags != null && Object.hasOwnProperty.call(m, "dropTcpFlags"))
	                    w.uint32(48).bool(m.dropTcpFlags);
	                return w;
	            };

	            /**
	             * Decodes a NetworkPacketTraceConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.NetworkPacketTraceConfig} NetworkPacketTraceConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            NetworkPacketTraceConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.NetworkPacketTraceConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.pollMs = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            m.aggregationThreshold = r.uint32();
	                            break;
	                        }
	                    case 3: {
	                            m.internLimit = r.uint32();
	                            break;
	                        }
	                    case 4: {
	                            m.dropLocalPort = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.dropRemotePort = r.bool();
	                            break;
	                        }
	                    case 6: {
	                            m.dropTcpFlags = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a NetworkPacketTraceConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.NetworkPacketTraceConfig} NetworkPacketTraceConfig
	             */
	            NetworkPacketTraceConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.NetworkPacketTraceConfig)
	                    return d;
	                var m = new $root.perfetto.protos.NetworkPacketTraceConfig();
	                if (d.pollMs != null) {
	                    m.pollMs = d.pollMs >>> 0;
	                }
	                if (d.aggregationThreshold != null) {
	                    m.aggregationThreshold = d.aggregationThreshold >>> 0;
	                }
	                if (d.internLimit != null) {
	                    m.internLimit = d.internLimit >>> 0;
	                }
	                if (d.dropLocalPort != null) {
	                    m.dropLocalPort = Boolean(d.dropLocalPort);
	                }
	                if (d.dropRemotePort != null) {
	                    m.dropRemotePort = Boolean(d.dropRemotePort);
	                }
	                if (d.dropTcpFlags != null) {
	                    m.dropTcpFlags = Boolean(d.dropTcpFlags);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a NetworkPacketTraceConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @static
	             * @param {perfetto.protos.NetworkPacketTraceConfig} m NetworkPacketTraceConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            NetworkPacketTraceConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.pollMs = 0;
	                    d.aggregationThreshold = 0;
	                    d.internLimit = 0;
	                    d.dropLocalPort = false;
	                    d.dropRemotePort = false;
	                    d.dropTcpFlags = false;
	                }
	                if (m.pollMs != null && m.hasOwnProperty("pollMs")) {
	                    d.pollMs = m.pollMs;
	                }
	                if (m.aggregationThreshold != null && m.hasOwnProperty("aggregationThreshold")) {
	                    d.aggregationThreshold = m.aggregationThreshold;
	                }
	                if (m.internLimit != null && m.hasOwnProperty("internLimit")) {
	                    d.internLimit = m.internLimit;
	                }
	                if (m.dropLocalPort != null && m.hasOwnProperty("dropLocalPort")) {
	                    d.dropLocalPort = m.dropLocalPort;
	                }
	                if (m.dropRemotePort != null && m.hasOwnProperty("dropRemotePort")) {
	                    d.dropRemotePort = m.dropRemotePort;
	                }
	                if (m.dropTcpFlags != null && m.hasOwnProperty("dropTcpFlags")) {
	                    d.dropTcpFlags = m.dropTcpFlags;
	                }
	                return d;
	            };

	            /**
	             * Converts this NetworkPacketTraceConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            NetworkPacketTraceConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for NetworkPacketTraceConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.NetworkPacketTraceConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            NetworkPacketTraceConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.NetworkPacketTraceConfig";
	            };

	            return NetworkPacketTraceConfig;
	        })();

	        protos.PackagesListConfig = (function() {

	            /**
	             * Properties of a PackagesListConfig.
	             * @memberof perfetto.protos
	             * @interface IPackagesListConfig
	             * @property {Array.<string>|null} [packageNameFilter] PackagesListConfig packageNameFilter
	             */

	            /**
	             * Constructs a new PackagesListConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a PackagesListConfig.
	             * @implements IPackagesListConfig
	             * @constructor
	             * @param {perfetto.protos.IPackagesListConfig=} [p] Properties to set
	             */
	            function PackagesListConfig(p) {
	                this.packageNameFilter = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * PackagesListConfig packageNameFilter.
	             * @member {Array.<string>} packageNameFilter
	             * @memberof perfetto.protos.PackagesListConfig
	             * @instance
	             */
	            PackagesListConfig.prototype.packageNameFilter = $util.emptyArray;

	            /**
	             * Creates a new PackagesListConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.PackagesListConfig
	             * @static
	             * @param {perfetto.protos.IPackagesListConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.PackagesListConfig} PackagesListConfig instance
	             */
	            PackagesListConfig.create = function create(properties) {
	                return new PackagesListConfig(properties);
	            };

	            /**
	             * Encodes the specified PackagesListConfig message. Does not implicitly {@link perfetto.protos.PackagesListConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.PackagesListConfig
	             * @static
	             * @param {perfetto.protos.IPackagesListConfig} m PackagesListConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            PackagesListConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.packageNameFilter != null && m.packageNameFilter.length) {
	                    for (var i = 0; i < m.packageNameFilter.length; ++i)
	                        w.uint32(10).string(m.packageNameFilter[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a PackagesListConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.PackagesListConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.PackagesListConfig} PackagesListConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            PackagesListConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PackagesListConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.packageNameFilter && m.packageNameFilter.length))
	                                m.packageNameFilter = [];
	                            m.packageNameFilter.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a PackagesListConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.PackagesListConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.PackagesListConfig} PackagesListConfig
	             */
	            PackagesListConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.PackagesListConfig)
	                    return d;
	                var m = new $root.perfetto.protos.PackagesListConfig();
	                if (d.packageNameFilter) {
	                    if (!Array.isArray(d.packageNameFilter))
	                        throw TypeError(".perfetto.protos.PackagesListConfig.packageNameFilter: array expected");
	                    m.packageNameFilter = [];
	                    for (var i = 0; i < d.packageNameFilter.length; ++i) {
	                        m.packageNameFilter[i] = String(d.packageNameFilter[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a PackagesListConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.PackagesListConfig
	             * @static
	             * @param {perfetto.protos.PackagesListConfig} m PackagesListConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            PackagesListConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.packageNameFilter = [];
	                }
	                if (m.packageNameFilter && m.packageNameFilter.length) {
	                    d.packageNameFilter = [];
	                    for (var j = 0; j < m.packageNameFilter.length; ++j) {
	                        d.packageNameFilter[j] = m.packageNameFilter[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this PackagesListConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.PackagesListConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            PackagesListConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for PackagesListConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.PackagesListConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            PackagesListConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.PackagesListConfig";
	            };

	            return PackagesListConfig;
	        })();

	        protos.PixelModemConfig = (function() {

	            /**
	             * Properties of a PixelModemConfig.
	             * @memberof perfetto.protos
	             * @interface IPixelModemConfig
	             * @property {perfetto.protos.PixelModemConfig.EventGroup|null} [eventGroup] PixelModemConfig eventGroup
	             * @property {Array.<number>|null} [pigweedHashAllowList] PixelModemConfig pigweedHashAllowList
	             * @property {Array.<number>|null} [pigweedHashDenyList] PixelModemConfig pigweedHashDenyList
	             */

	            /**
	             * Constructs a new PixelModemConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a PixelModemConfig.
	             * @implements IPixelModemConfig
	             * @constructor
	             * @param {perfetto.protos.IPixelModemConfig=} [p] Properties to set
	             */
	            function PixelModemConfig(p) {
	                this.pigweedHashAllowList = [];
	                this.pigweedHashDenyList = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * PixelModemConfig eventGroup.
	             * @member {perfetto.protos.PixelModemConfig.EventGroup} eventGroup
	             * @memberof perfetto.protos.PixelModemConfig
	             * @instance
	             */
	            PixelModemConfig.prototype.eventGroup = 0;

	            /**
	             * PixelModemConfig pigweedHashAllowList.
	             * @member {Array.<number>} pigweedHashAllowList
	             * @memberof perfetto.protos.PixelModemConfig
	             * @instance
	             */
	            PixelModemConfig.prototype.pigweedHashAllowList = $util.emptyArray;

	            /**
	             * PixelModemConfig pigweedHashDenyList.
	             * @member {Array.<number>} pigweedHashDenyList
	             * @memberof perfetto.protos.PixelModemConfig
	             * @instance
	             */
	            PixelModemConfig.prototype.pigweedHashDenyList = $util.emptyArray;

	            /**
	             * Creates a new PixelModemConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.PixelModemConfig
	             * @static
	             * @param {perfetto.protos.IPixelModemConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.PixelModemConfig} PixelModemConfig instance
	             */
	            PixelModemConfig.create = function create(properties) {
	                return new PixelModemConfig(properties);
	            };

	            /**
	             * Encodes the specified PixelModemConfig message. Does not implicitly {@link perfetto.protos.PixelModemConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.PixelModemConfig
	             * @static
	             * @param {perfetto.protos.IPixelModemConfig} m PixelModemConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            PixelModemConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.eventGroup != null && Object.hasOwnProperty.call(m, "eventGroup"))
	                    w.uint32(8).int32(m.eventGroup);
	                if (m.pigweedHashAllowList != null && m.pigweedHashAllowList.length) {
	                    for (var i = 0; i < m.pigweedHashAllowList.length; ++i)
	                        w.uint32(16).int64(m.pigweedHashAllowList[i]);
	                }
	                if (m.pigweedHashDenyList != null && m.pigweedHashDenyList.length) {
	                    for (var i = 0; i < m.pigweedHashDenyList.length; ++i)
	                        w.uint32(24).int64(m.pigweedHashDenyList[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a PixelModemConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.PixelModemConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.PixelModemConfig} PixelModemConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            PixelModemConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PixelModemConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.eventGroup = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.pigweedHashAllowList && m.pigweedHashAllowList.length))
	                                m.pigweedHashAllowList = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.pigweedHashAllowList.push(r.int64());
	                            } else
	                                m.pigweedHashAllowList.push(r.int64());
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.pigweedHashDenyList && m.pigweedHashDenyList.length))
	                                m.pigweedHashDenyList = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.pigweedHashDenyList.push(r.int64());
	                            } else
	                                m.pigweedHashDenyList.push(r.int64());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a PixelModemConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.PixelModemConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.PixelModemConfig} PixelModemConfig
	             */
	            PixelModemConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.PixelModemConfig)
	                    return d;
	                var m = new $root.perfetto.protos.PixelModemConfig();
	                switch (d.eventGroup) {
	                default:
	                    if (typeof d.eventGroup === "number") {
	                        m.eventGroup = d.eventGroup;
	                        break;
	                    }
	                    break;
	                case "EVENT_GROUP_UNKNOWN":
	                case 0:
	                    m.eventGroup = 0;
	                    break;
	                case "EVENT_GROUP_LOW_BANDWIDTH":
	                case 1:
	                    m.eventGroup = 1;
	                    break;
	                case "EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH":
	                case 2:
	                    m.eventGroup = 2;
	                    break;
	                }
	                if (d.pigweedHashAllowList) {
	                    if (!Array.isArray(d.pigweedHashAllowList))
	                        throw TypeError(".perfetto.protos.PixelModemConfig.pigweedHashAllowList: array expected");
	                    m.pigweedHashAllowList = [];
	                    for (var i = 0; i < d.pigweedHashAllowList.length; ++i) {
	                        if ($util.Long)
	                            (m.pigweedHashAllowList[i] = $util.Long.fromValue(d.pigweedHashAllowList[i])).unsigned = false;
	                        else if (typeof d.pigweedHashAllowList[i] === "string")
	                            m.pigweedHashAllowList[i] = parseInt(d.pigweedHashAllowList[i], 10);
	                        else if (typeof d.pigweedHashAllowList[i] === "number")
	                            m.pigweedHashAllowList[i] = d.pigweedHashAllowList[i];
	                        else if (typeof d.pigweedHashAllowList[i] === "object")
	                            m.pigweedHashAllowList[i] = new $util.LongBits(d.pigweedHashAllowList[i].low >>> 0, d.pigweedHashAllowList[i].high >>> 0).toNumber();
	                    }
	                }
	                if (d.pigweedHashDenyList) {
	                    if (!Array.isArray(d.pigweedHashDenyList))
	                        throw TypeError(".perfetto.protos.PixelModemConfig.pigweedHashDenyList: array expected");
	                    m.pigweedHashDenyList = [];
	                    for (var i = 0; i < d.pigweedHashDenyList.length; ++i) {
	                        if ($util.Long)
	                            (m.pigweedHashDenyList[i] = $util.Long.fromValue(d.pigweedHashDenyList[i])).unsigned = false;
	                        else if (typeof d.pigweedHashDenyList[i] === "string")
	                            m.pigweedHashDenyList[i] = parseInt(d.pigweedHashDenyList[i], 10);
	                        else if (typeof d.pigweedHashDenyList[i] === "number")
	                            m.pigweedHashDenyList[i] = d.pigweedHashDenyList[i];
	                        else if (typeof d.pigweedHashDenyList[i] === "object")
	                            m.pigweedHashDenyList[i] = new $util.LongBits(d.pigweedHashDenyList[i].low >>> 0, d.pigweedHashDenyList[i].high >>> 0).toNumber();
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a PixelModemConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.PixelModemConfig
	             * @static
	             * @param {perfetto.protos.PixelModemConfig} m PixelModemConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            PixelModemConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.pigweedHashAllowList = [];
	                    d.pigweedHashDenyList = [];
	                }
	                if (o.defaults) {
	                    d.eventGroup = o.enums === String ? "EVENT_GROUP_UNKNOWN" : 0;
	                }
	                if (m.eventGroup != null && m.hasOwnProperty("eventGroup")) {
	                    d.eventGroup = o.enums === String ? $root.perfetto.protos.PixelModemConfig.EventGroup[m.eventGroup] === undefined ? m.eventGroup : $root.perfetto.protos.PixelModemConfig.EventGroup[m.eventGroup] : m.eventGroup;
	                }
	                if (m.pigweedHashAllowList && m.pigweedHashAllowList.length) {
	                    d.pigweedHashAllowList = [];
	                    for (var j = 0; j < m.pigweedHashAllowList.length; ++j) {
	                        if (typeof m.pigweedHashAllowList[j] === "number")
	                            d.pigweedHashAllowList[j] = o.longs === String ? String(m.pigweedHashAllowList[j]) : m.pigweedHashAllowList[j];
	                        else
	                            d.pigweedHashAllowList[j] = o.longs === String ? $util.Long.prototype.toString.call(m.pigweedHashAllowList[j]) : o.longs === Number ? new $util.LongBits(m.pigweedHashAllowList[j].low >>> 0, m.pigweedHashAllowList[j].high >>> 0).toNumber() : m.pigweedHashAllowList[j];
	                    }
	                }
	                if (m.pigweedHashDenyList && m.pigweedHashDenyList.length) {
	                    d.pigweedHashDenyList = [];
	                    for (var j = 0; j < m.pigweedHashDenyList.length; ++j) {
	                        if (typeof m.pigweedHashDenyList[j] === "number")
	                            d.pigweedHashDenyList[j] = o.longs === String ? String(m.pigweedHashDenyList[j]) : m.pigweedHashDenyList[j];
	                        else
	                            d.pigweedHashDenyList[j] = o.longs === String ? $util.Long.prototype.toString.call(m.pigweedHashDenyList[j]) : o.longs === Number ? new $util.LongBits(m.pigweedHashDenyList[j].low >>> 0, m.pigweedHashDenyList[j].high >>> 0).toNumber() : m.pigweedHashDenyList[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this PixelModemConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.PixelModemConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            PixelModemConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for PixelModemConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.PixelModemConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            PixelModemConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.PixelModemConfig";
	            };

	            /**
	             * EventGroup enum.
	             * @name perfetto.protos.PixelModemConfig.EventGroup
	             * @enum {number}
	             * @property {number} EVENT_GROUP_UNKNOWN=0 EVENT_GROUP_UNKNOWN value
	             * @property {number} EVENT_GROUP_LOW_BANDWIDTH=1 EVENT_GROUP_LOW_BANDWIDTH value
	             * @property {number} EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH=2 EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH value
	             */
	            PixelModemConfig.EventGroup = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "EVENT_GROUP_UNKNOWN"] = 0;
	                values[valuesById[1] = "EVENT_GROUP_LOW_BANDWIDTH"] = 1;
	                values[valuesById[2] = "EVENT_GROUP_HIGH_AND_LOW_BANDWIDTH"] = 2;
	                return values;
	            })();

	            return PixelModemConfig;
	        })();

	        protos.ProtoLogConfig = (function() {

	            /**
	             * Properties of a ProtoLogConfig.
	             * @memberof perfetto.protos
	             * @interface IProtoLogConfig
	             * @property {Array.<perfetto.protos.IProtoLogGroup>|null} [groupOverrides] ProtoLogConfig groupOverrides
	             * @property {perfetto.protos.ProtoLogConfig.TracingMode|null} [tracingMode] ProtoLogConfig tracingMode
	             * @property {perfetto.protos.ProtoLogLevel|null} [defaultLogFromLevel] ProtoLogConfig defaultLogFromLevel
	             */

	            /**
	             * Constructs a new ProtoLogConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ProtoLogConfig.
	             * @implements IProtoLogConfig
	             * @constructor
	             * @param {perfetto.protos.IProtoLogConfig=} [p] Properties to set
	             */
	            function ProtoLogConfig(p) {
	                this.groupOverrides = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ProtoLogConfig groupOverrides.
	             * @member {Array.<perfetto.protos.IProtoLogGroup>} groupOverrides
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @instance
	             */
	            ProtoLogConfig.prototype.groupOverrides = $util.emptyArray;

	            /**
	             * ProtoLogConfig tracingMode.
	             * @member {perfetto.protos.ProtoLogConfig.TracingMode} tracingMode
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @instance
	             */
	            ProtoLogConfig.prototype.tracingMode = 0;

	            /**
	             * ProtoLogConfig defaultLogFromLevel.
	             * @member {perfetto.protos.ProtoLogLevel} defaultLogFromLevel
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @instance
	             */
	            ProtoLogConfig.prototype.defaultLogFromLevel = 0;

	            /**
	             * Creates a new ProtoLogConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @static
	             * @param {perfetto.protos.IProtoLogConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.ProtoLogConfig} ProtoLogConfig instance
	             */
	            ProtoLogConfig.create = function create(properties) {
	                return new ProtoLogConfig(properties);
	            };

	            /**
	             * Encodes the specified ProtoLogConfig message. Does not implicitly {@link perfetto.protos.ProtoLogConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @static
	             * @param {perfetto.protos.IProtoLogConfig} m ProtoLogConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ProtoLogConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.groupOverrides != null && m.groupOverrides.length) {
	                    for (var i = 0; i < m.groupOverrides.length; ++i)
	                        $root.perfetto.protos.ProtoLogGroup.encode(m.groupOverrides[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.tracingMode != null && Object.hasOwnProperty.call(m, "tracingMode"))
	                    w.uint32(16).int32(m.tracingMode);
	                if (m.defaultLogFromLevel != null && Object.hasOwnProperty.call(m, "defaultLogFromLevel"))
	                    w.uint32(24).int32(m.defaultLogFromLevel);
	                return w;
	            };

	            /**
	             * Decodes a ProtoLogConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ProtoLogConfig} ProtoLogConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ProtoLogConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ProtoLogConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.groupOverrides && m.groupOverrides.length))
	                                m.groupOverrides = [];
	                            m.groupOverrides.push($root.perfetto.protos.ProtoLogGroup.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            m.tracingMode = r.int32();
	                            break;
	                        }
	                    case 3: {
	                            m.defaultLogFromLevel = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ProtoLogConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ProtoLogConfig} ProtoLogConfig
	             */
	            ProtoLogConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ProtoLogConfig)
	                    return d;
	                var m = new $root.perfetto.protos.ProtoLogConfig();
	                if (d.groupOverrides) {
	                    if (!Array.isArray(d.groupOverrides))
	                        throw TypeError(".perfetto.protos.ProtoLogConfig.groupOverrides: array expected");
	                    m.groupOverrides = [];
	                    for (var i = 0; i < d.groupOverrides.length; ++i) {
	                        if (typeof d.groupOverrides[i] !== "object")
	                            throw TypeError(".perfetto.protos.ProtoLogConfig.groupOverrides: object expected");
	                        m.groupOverrides[i] = $root.perfetto.protos.ProtoLogGroup.fromObject(d.groupOverrides[i]);
	                    }
	                }
	                switch (d.tracingMode) {
	                default:
	                    if (typeof d.tracingMode === "number") {
	                        m.tracingMode = d.tracingMode;
	                        break;
	                    }
	                    break;
	                case "DEFAULT":
	                case 0:
	                    m.tracingMode = 0;
	                    break;
	                case "ENABLE_ALL":
	                case 1:
	                    m.tracingMode = 1;
	                    break;
	                }
	                switch (d.defaultLogFromLevel) {
	                default:
	                    if (typeof d.defaultLogFromLevel === "number") {
	                        m.defaultLogFromLevel = d.defaultLogFromLevel;
	                        break;
	                    }
	                    break;
	                case "PROTOLOG_LEVEL_UNDEFINED":
	                case 0:
	                    m.defaultLogFromLevel = 0;
	                    break;
	                case "PROTOLOG_LEVEL_DEBUG":
	                case 1:
	                    m.defaultLogFromLevel = 1;
	                    break;
	                case "PROTOLOG_LEVEL_VERBOSE":
	                case 2:
	                    m.defaultLogFromLevel = 2;
	                    break;
	                case "PROTOLOG_LEVEL_INFO":
	                case 3:
	                    m.defaultLogFromLevel = 3;
	                    break;
	                case "PROTOLOG_LEVEL_WARN":
	                case 4:
	                    m.defaultLogFromLevel = 4;
	                    break;
	                case "PROTOLOG_LEVEL_ERROR":
	                case 5:
	                    m.defaultLogFromLevel = 5;
	                    break;
	                case "PROTOLOG_LEVEL_WTF":
	                case 6:
	                    m.defaultLogFromLevel = 6;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ProtoLogConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @static
	             * @param {perfetto.protos.ProtoLogConfig} m ProtoLogConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ProtoLogConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.groupOverrides = [];
	                }
	                if (o.defaults) {
	                    d.tracingMode = o.enums === String ? "DEFAULT" : 0;
	                    d.defaultLogFromLevel = o.enums === String ? "PROTOLOG_LEVEL_UNDEFINED" : 0;
	                }
	                if (m.groupOverrides && m.groupOverrides.length) {
	                    d.groupOverrides = [];
	                    for (var j = 0; j < m.groupOverrides.length; ++j) {
	                        d.groupOverrides[j] = $root.perfetto.protos.ProtoLogGroup.toObject(m.groupOverrides[j], o);
	                    }
	                }
	                if (m.tracingMode != null && m.hasOwnProperty("tracingMode")) {
	                    d.tracingMode = o.enums === String ? $root.perfetto.protos.ProtoLogConfig.TracingMode[m.tracingMode] === undefined ? m.tracingMode : $root.perfetto.protos.ProtoLogConfig.TracingMode[m.tracingMode] : m.tracingMode;
	                }
	                if (m.defaultLogFromLevel != null && m.hasOwnProperty("defaultLogFromLevel")) {
	                    d.defaultLogFromLevel = o.enums === String ? $root.perfetto.protos.ProtoLogLevel[m.defaultLogFromLevel] === undefined ? m.defaultLogFromLevel : $root.perfetto.protos.ProtoLogLevel[m.defaultLogFromLevel] : m.defaultLogFromLevel;
	                }
	                return d;
	            };

	            /**
	             * Converts this ProtoLogConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ProtoLogConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ProtoLogConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ProtoLogConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ProtoLogConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ProtoLogConfig";
	            };

	            /**
	             * TracingMode enum.
	             * @name perfetto.protos.ProtoLogConfig.TracingMode
	             * @enum {number}
	             * @property {number} DEFAULT=0 DEFAULT value
	             * @property {number} ENABLE_ALL=1 ENABLE_ALL value
	             */
	            ProtoLogConfig.TracingMode = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "DEFAULT"] = 0;
	                values[valuesById[1] = "ENABLE_ALL"] = 1;
	                return values;
	            })();

	            return ProtoLogConfig;
	        })();

	        protos.ProtoLogGroup = (function() {

	            /**
	             * Properties of a ProtoLogGroup.
	             * @memberof perfetto.protos
	             * @interface IProtoLogGroup
	             * @property {string|null} [groupName] ProtoLogGroup groupName
	             * @property {perfetto.protos.ProtoLogLevel|null} [logFrom] ProtoLogGroup logFrom
	             * @property {boolean|null} [collectStacktrace] ProtoLogGroup collectStacktrace
	             */

	            /**
	             * Constructs a new ProtoLogGroup.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ProtoLogGroup.
	             * @implements IProtoLogGroup
	             * @constructor
	             * @param {perfetto.protos.IProtoLogGroup=} [p] Properties to set
	             */
	            function ProtoLogGroup(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ProtoLogGroup groupName.
	             * @member {string} groupName
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @instance
	             */
	            ProtoLogGroup.prototype.groupName = "";

	            /**
	             * ProtoLogGroup logFrom.
	             * @member {perfetto.protos.ProtoLogLevel} logFrom
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @instance
	             */
	            ProtoLogGroup.prototype.logFrom = 0;

	            /**
	             * ProtoLogGroup collectStacktrace.
	             * @member {boolean} collectStacktrace
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @instance
	             */
	            ProtoLogGroup.prototype.collectStacktrace = false;

	            /**
	             * Creates a new ProtoLogGroup instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @static
	             * @param {perfetto.protos.IProtoLogGroup=} [properties] Properties to set
	             * @returns {perfetto.protos.ProtoLogGroup} ProtoLogGroup instance
	             */
	            ProtoLogGroup.create = function create(properties) {
	                return new ProtoLogGroup(properties);
	            };

	            /**
	             * Encodes the specified ProtoLogGroup message. Does not implicitly {@link perfetto.protos.ProtoLogGroup.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @static
	             * @param {perfetto.protos.IProtoLogGroup} m ProtoLogGroup message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ProtoLogGroup.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.groupName != null && Object.hasOwnProperty.call(m, "groupName"))
	                    w.uint32(10).string(m.groupName);
	                if (m.logFrom != null && Object.hasOwnProperty.call(m, "logFrom"))
	                    w.uint32(16).int32(m.logFrom);
	                if (m.collectStacktrace != null && Object.hasOwnProperty.call(m, "collectStacktrace"))
	                    w.uint32(24).bool(m.collectStacktrace);
	                return w;
	            };

	            /**
	             * Decodes a ProtoLogGroup message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ProtoLogGroup} ProtoLogGroup
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ProtoLogGroup.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ProtoLogGroup();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.groupName = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.logFrom = r.int32();
	                            break;
	                        }
	                    case 3: {
	                            m.collectStacktrace = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ProtoLogGroup message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ProtoLogGroup} ProtoLogGroup
	             */
	            ProtoLogGroup.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ProtoLogGroup)
	                    return d;
	                var m = new $root.perfetto.protos.ProtoLogGroup();
	                if (d.groupName != null) {
	                    m.groupName = String(d.groupName);
	                }
	                switch (d.logFrom) {
	                default:
	                    if (typeof d.logFrom === "number") {
	                        m.logFrom = d.logFrom;
	                        break;
	                    }
	                    break;
	                case "PROTOLOG_LEVEL_UNDEFINED":
	                case 0:
	                    m.logFrom = 0;
	                    break;
	                case "PROTOLOG_LEVEL_DEBUG":
	                case 1:
	                    m.logFrom = 1;
	                    break;
	                case "PROTOLOG_LEVEL_VERBOSE":
	                case 2:
	                    m.logFrom = 2;
	                    break;
	                case "PROTOLOG_LEVEL_INFO":
	                case 3:
	                    m.logFrom = 3;
	                    break;
	                case "PROTOLOG_LEVEL_WARN":
	                case 4:
	                    m.logFrom = 4;
	                    break;
	                case "PROTOLOG_LEVEL_ERROR":
	                case 5:
	                    m.logFrom = 5;
	                    break;
	                case "PROTOLOG_LEVEL_WTF":
	                case 6:
	                    m.logFrom = 6;
	                    break;
	                }
	                if (d.collectStacktrace != null) {
	                    m.collectStacktrace = Boolean(d.collectStacktrace);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ProtoLogGroup message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @static
	             * @param {perfetto.protos.ProtoLogGroup} m ProtoLogGroup
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ProtoLogGroup.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.groupName = "";
	                    d.logFrom = o.enums === String ? "PROTOLOG_LEVEL_UNDEFINED" : 0;
	                    d.collectStacktrace = false;
	                }
	                if (m.groupName != null && m.hasOwnProperty("groupName")) {
	                    d.groupName = m.groupName;
	                }
	                if (m.logFrom != null && m.hasOwnProperty("logFrom")) {
	                    d.logFrom = o.enums === String ? $root.perfetto.protos.ProtoLogLevel[m.logFrom] === undefined ? m.logFrom : $root.perfetto.protos.ProtoLogLevel[m.logFrom] : m.logFrom;
	                }
	                if (m.collectStacktrace != null && m.hasOwnProperty("collectStacktrace")) {
	                    d.collectStacktrace = m.collectStacktrace;
	                }
	                return d;
	            };

	            /**
	             * Converts this ProtoLogGroup to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ProtoLogGroup.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ProtoLogGroup
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ProtoLogGroup
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ProtoLogGroup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ProtoLogGroup";
	            };

	            return ProtoLogGroup;
	        })();

	        /**
	         * ProtoLogLevel enum.
	         * @name perfetto.protos.ProtoLogLevel
	         * @enum {number}
	         * @property {number} PROTOLOG_LEVEL_UNDEFINED=0 PROTOLOG_LEVEL_UNDEFINED value
	         * @property {number} PROTOLOG_LEVEL_DEBUG=1 PROTOLOG_LEVEL_DEBUG value
	         * @property {number} PROTOLOG_LEVEL_VERBOSE=2 PROTOLOG_LEVEL_VERBOSE value
	         * @property {number} PROTOLOG_LEVEL_INFO=3 PROTOLOG_LEVEL_INFO value
	         * @property {number} PROTOLOG_LEVEL_WARN=4 PROTOLOG_LEVEL_WARN value
	         * @property {number} PROTOLOG_LEVEL_ERROR=5 PROTOLOG_LEVEL_ERROR value
	         * @property {number} PROTOLOG_LEVEL_WTF=6 PROTOLOG_LEVEL_WTF value
	         */
	        protos.ProtoLogLevel = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "PROTOLOG_LEVEL_UNDEFINED"] = 0;
	            values[valuesById[1] = "PROTOLOG_LEVEL_DEBUG"] = 1;
	            values[valuesById[2] = "PROTOLOG_LEVEL_VERBOSE"] = 2;
	            values[valuesById[3] = "PROTOLOG_LEVEL_INFO"] = 3;
	            values[valuesById[4] = "PROTOLOG_LEVEL_WARN"] = 4;
	            values[valuesById[5] = "PROTOLOG_LEVEL_ERROR"] = 5;
	            values[valuesById[6] = "PROTOLOG_LEVEL_WTF"] = 6;
	            return values;
	        })();

	        protos.SurfaceFlingerLayersConfig = (function() {

	            /**
	             * Properties of a SurfaceFlingerLayersConfig.
	             * @memberof perfetto.protos
	             * @interface ISurfaceFlingerLayersConfig
	             * @property {perfetto.protos.SurfaceFlingerLayersConfig.Mode|null} [mode] SurfaceFlingerLayersConfig mode
	             * @property {Array.<perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag>|null} [traceFlags] SurfaceFlingerLayersConfig traceFlags
	             */

	            /**
	             * Constructs a new SurfaceFlingerLayersConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a SurfaceFlingerLayersConfig.
	             * @implements ISurfaceFlingerLayersConfig
	             * @constructor
	             * @param {perfetto.protos.ISurfaceFlingerLayersConfig=} [p] Properties to set
	             */
	            function SurfaceFlingerLayersConfig(p) {
	                this.traceFlags = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * SurfaceFlingerLayersConfig mode.
	             * @member {perfetto.protos.SurfaceFlingerLayersConfig.Mode} mode
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @instance
	             */
	            SurfaceFlingerLayersConfig.prototype.mode = 0;

	            /**
	             * SurfaceFlingerLayersConfig traceFlags.
	             * @member {Array.<perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag>} traceFlags
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @instance
	             */
	            SurfaceFlingerLayersConfig.prototype.traceFlags = $util.emptyArray;

	            /**
	             * Creates a new SurfaceFlingerLayersConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @static
	             * @param {perfetto.protos.ISurfaceFlingerLayersConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.SurfaceFlingerLayersConfig} SurfaceFlingerLayersConfig instance
	             */
	            SurfaceFlingerLayersConfig.create = function create(properties) {
	                return new SurfaceFlingerLayersConfig(properties);
	            };

	            /**
	             * Encodes the specified SurfaceFlingerLayersConfig message. Does not implicitly {@link perfetto.protos.SurfaceFlingerLayersConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @static
	             * @param {perfetto.protos.ISurfaceFlingerLayersConfig} m SurfaceFlingerLayersConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SurfaceFlingerLayersConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.mode != null && Object.hasOwnProperty.call(m, "mode"))
	                    w.uint32(8).int32(m.mode);
	                if (m.traceFlags != null && m.traceFlags.length) {
	                    for (var i = 0; i < m.traceFlags.length; ++i)
	                        w.uint32(16).int32(m.traceFlags[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a SurfaceFlingerLayersConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.SurfaceFlingerLayersConfig} SurfaceFlingerLayersConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SurfaceFlingerLayersConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.SurfaceFlingerLayersConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.mode = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.traceFlags && m.traceFlags.length))
	                                m.traceFlags = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.traceFlags.push(r.int32());
	                            } else
	                                m.traceFlags.push(r.int32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a SurfaceFlingerLayersConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.SurfaceFlingerLayersConfig} SurfaceFlingerLayersConfig
	             */
	            SurfaceFlingerLayersConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.SurfaceFlingerLayersConfig)
	                    return d;
	                var m = new $root.perfetto.protos.SurfaceFlingerLayersConfig();
	                switch (d.mode) {
	                default:
	                    if (typeof d.mode === "number") {
	                        m.mode = d.mode;
	                        break;
	                    }
	                    break;
	                case "MODE_UNSPECIFIED":
	                case 0:
	                    m.mode = 0;
	                    break;
	                case "MODE_ACTIVE":
	                case 1:
	                    m.mode = 1;
	                    break;
	                case "MODE_GENERATED":
	                case 2:
	                    m.mode = 2;
	                    break;
	                case "MODE_DUMP":
	                case 3:
	                    m.mode = 3;
	                    break;
	                case "MODE_GENERATED_BUGREPORT_ONLY":
	                case 4:
	                    m.mode = 4;
	                    break;
	                }
	                if (d.traceFlags) {
	                    if (!Array.isArray(d.traceFlags))
	                        throw TypeError(".perfetto.protos.SurfaceFlingerLayersConfig.traceFlags: array expected");
	                    m.traceFlags = [];
	                    for (var i = 0; i < d.traceFlags.length; ++i) {
	                        switch (d.traceFlags[i]) {
	                        default:
	                            if (typeof d.traceFlags[i] === "number") {
	                                m.traceFlags[i] = d.traceFlags[i];
	                                break;
	                            }
	                        case "TRACE_FLAG_UNSPECIFIED":
	                        case 0:
	                            m.traceFlags[i] = 0;
	                            break;
	                        case "TRACE_FLAG_INPUT":
	                        case 2:
	                            m.traceFlags[i] = 2;
	                            break;
	                        case "TRACE_FLAG_COMPOSITION":
	                        case 4:
	                            m.traceFlags[i] = 4;
	                            break;
	                        case "TRACE_FLAG_EXTRA":
	                        case 8:
	                            m.traceFlags[i] = 8;
	                            break;
	                        case "TRACE_FLAG_HWC":
	                        case 16:
	                            m.traceFlags[i] = 16;
	                            break;
	                        case "TRACE_FLAG_BUFFERS":
	                        case 32:
	                            m.traceFlags[i] = 32;
	                            break;
	                        case "TRACE_FLAG_VIRTUAL_DISPLAYS":
	                        case 64:
	                            m.traceFlags[i] = 64;
	                            break;
	                        case "TRACE_FLAG_ALL":
	                        case 14:
	                            m.traceFlags[i] = 14;
	                            break;
	                        }
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a SurfaceFlingerLayersConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @static
	             * @param {perfetto.protos.SurfaceFlingerLayersConfig} m SurfaceFlingerLayersConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SurfaceFlingerLayersConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.traceFlags = [];
	                }
	                if (o.defaults) {
	                    d.mode = o.enums === String ? "MODE_UNSPECIFIED" : 0;
	                }
	                if (m.mode != null && m.hasOwnProperty("mode")) {
	                    d.mode = o.enums === String ? $root.perfetto.protos.SurfaceFlingerLayersConfig.Mode[m.mode] === undefined ? m.mode : $root.perfetto.protos.SurfaceFlingerLayersConfig.Mode[m.mode] : m.mode;
	                }
	                if (m.traceFlags && m.traceFlags.length) {
	                    d.traceFlags = [];
	                    for (var j = 0; j < m.traceFlags.length; ++j) {
	                        d.traceFlags[j] = o.enums === String ? $root.perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag[m.traceFlags[j]] === undefined ? m.traceFlags[j] : $root.perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag[m.traceFlags[j]] : m.traceFlags[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this SurfaceFlingerLayersConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SurfaceFlingerLayersConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for SurfaceFlingerLayersConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.SurfaceFlingerLayersConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            SurfaceFlingerLayersConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.SurfaceFlingerLayersConfig";
	            };

	            /**
	             * Mode enum.
	             * @name perfetto.protos.SurfaceFlingerLayersConfig.Mode
	             * @enum {number}
	             * @property {number} MODE_UNSPECIFIED=0 MODE_UNSPECIFIED value
	             * @property {number} MODE_ACTIVE=1 MODE_ACTIVE value
	             * @property {number} MODE_GENERATED=2 MODE_GENERATED value
	             * @property {number} MODE_DUMP=3 MODE_DUMP value
	             * @property {number} MODE_GENERATED_BUGREPORT_ONLY=4 MODE_GENERATED_BUGREPORT_ONLY value
	             */
	            SurfaceFlingerLayersConfig.Mode = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "MODE_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "MODE_ACTIVE"] = 1;
	                values[valuesById[2] = "MODE_GENERATED"] = 2;
	                values[valuesById[3] = "MODE_DUMP"] = 3;
	                values[valuesById[4] = "MODE_GENERATED_BUGREPORT_ONLY"] = 4;
	                return values;
	            })();

	            /**
	             * TraceFlag enum.
	             * @name perfetto.protos.SurfaceFlingerLayersConfig.TraceFlag
	             * @enum {number}
	             * @property {number} TRACE_FLAG_UNSPECIFIED=0 TRACE_FLAG_UNSPECIFIED value
	             * @property {number} TRACE_FLAG_INPUT=2 TRACE_FLAG_INPUT value
	             * @property {number} TRACE_FLAG_COMPOSITION=4 TRACE_FLAG_COMPOSITION value
	             * @property {number} TRACE_FLAG_EXTRA=8 TRACE_FLAG_EXTRA value
	             * @property {number} TRACE_FLAG_HWC=16 TRACE_FLAG_HWC value
	             * @property {number} TRACE_FLAG_BUFFERS=32 TRACE_FLAG_BUFFERS value
	             * @property {number} TRACE_FLAG_VIRTUAL_DISPLAYS=64 TRACE_FLAG_VIRTUAL_DISPLAYS value
	             * @property {number} TRACE_FLAG_ALL=14 TRACE_FLAG_ALL value
	             */
	            SurfaceFlingerLayersConfig.TraceFlag = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "TRACE_FLAG_UNSPECIFIED"] = 0;
	                values[valuesById[2] = "TRACE_FLAG_INPUT"] = 2;
	                values[valuesById[4] = "TRACE_FLAG_COMPOSITION"] = 4;
	                values[valuesById[8] = "TRACE_FLAG_EXTRA"] = 8;
	                values[valuesById[16] = "TRACE_FLAG_HWC"] = 16;
	                values[valuesById[32] = "TRACE_FLAG_BUFFERS"] = 32;
	                values[valuesById[64] = "TRACE_FLAG_VIRTUAL_DISPLAYS"] = 64;
	                values[valuesById[14] = "TRACE_FLAG_ALL"] = 14;
	                return values;
	            })();

	            return SurfaceFlingerLayersConfig;
	        })();

	        protos.SurfaceFlingerTransactionsConfig = (function() {

	            /**
	             * Properties of a SurfaceFlingerTransactionsConfig.
	             * @memberof perfetto.protos
	             * @interface ISurfaceFlingerTransactionsConfig
	             * @property {perfetto.protos.SurfaceFlingerTransactionsConfig.Mode|null} [mode] SurfaceFlingerTransactionsConfig mode
	             */

	            /**
	             * Constructs a new SurfaceFlingerTransactionsConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a SurfaceFlingerTransactionsConfig.
	             * @implements ISurfaceFlingerTransactionsConfig
	             * @constructor
	             * @param {perfetto.protos.ISurfaceFlingerTransactionsConfig=} [p] Properties to set
	             */
	            function SurfaceFlingerTransactionsConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * SurfaceFlingerTransactionsConfig mode.
	             * @member {perfetto.protos.SurfaceFlingerTransactionsConfig.Mode} mode
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @instance
	             */
	            SurfaceFlingerTransactionsConfig.prototype.mode = 0;

	            /**
	             * Creates a new SurfaceFlingerTransactionsConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @static
	             * @param {perfetto.protos.ISurfaceFlingerTransactionsConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.SurfaceFlingerTransactionsConfig} SurfaceFlingerTransactionsConfig instance
	             */
	            SurfaceFlingerTransactionsConfig.create = function create(properties) {
	                return new SurfaceFlingerTransactionsConfig(properties);
	            };

	            /**
	             * Encodes the specified SurfaceFlingerTransactionsConfig message. Does not implicitly {@link perfetto.protos.SurfaceFlingerTransactionsConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @static
	             * @param {perfetto.protos.ISurfaceFlingerTransactionsConfig} m SurfaceFlingerTransactionsConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SurfaceFlingerTransactionsConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.mode != null && Object.hasOwnProperty.call(m, "mode"))
	                    w.uint32(8).int32(m.mode);
	                return w;
	            };

	            /**
	             * Decodes a SurfaceFlingerTransactionsConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.SurfaceFlingerTransactionsConfig} SurfaceFlingerTransactionsConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SurfaceFlingerTransactionsConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.SurfaceFlingerTransactionsConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.mode = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a SurfaceFlingerTransactionsConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.SurfaceFlingerTransactionsConfig} SurfaceFlingerTransactionsConfig
	             */
	            SurfaceFlingerTransactionsConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.SurfaceFlingerTransactionsConfig)
	                    return d;
	                var m = new $root.perfetto.protos.SurfaceFlingerTransactionsConfig();
	                switch (d.mode) {
	                default:
	                    if (typeof d.mode === "number") {
	                        m.mode = d.mode;
	                        break;
	                    }
	                    break;
	                case "MODE_UNSPECIFIED":
	                case 0:
	                    m.mode = 0;
	                    break;
	                case "MODE_CONTINUOUS":
	                case 1:
	                    m.mode = 1;
	                    break;
	                case "MODE_ACTIVE":
	                case 2:
	                    m.mode = 2;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a SurfaceFlingerTransactionsConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @static
	             * @param {perfetto.protos.SurfaceFlingerTransactionsConfig} m SurfaceFlingerTransactionsConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SurfaceFlingerTransactionsConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.mode = o.enums === String ? "MODE_UNSPECIFIED" : 0;
	                }
	                if (m.mode != null && m.hasOwnProperty("mode")) {
	                    d.mode = o.enums === String ? $root.perfetto.protos.SurfaceFlingerTransactionsConfig.Mode[m.mode] === undefined ? m.mode : $root.perfetto.protos.SurfaceFlingerTransactionsConfig.Mode[m.mode] : m.mode;
	                }
	                return d;
	            };

	            /**
	             * Converts this SurfaceFlingerTransactionsConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SurfaceFlingerTransactionsConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for SurfaceFlingerTransactionsConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.SurfaceFlingerTransactionsConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            SurfaceFlingerTransactionsConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.SurfaceFlingerTransactionsConfig";
	            };

	            /**
	             * Mode enum.
	             * @name perfetto.protos.SurfaceFlingerTransactionsConfig.Mode
	             * @enum {number}
	             * @property {number} MODE_UNSPECIFIED=0 MODE_UNSPECIFIED value
	             * @property {number} MODE_CONTINUOUS=1 MODE_CONTINUOUS value
	             * @property {number} MODE_ACTIVE=2 MODE_ACTIVE value
	             */
	            SurfaceFlingerTransactionsConfig.Mode = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "MODE_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "MODE_CONTINUOUS"] = 1;
	                values[valuesById[2] = "MODE_ACTIVE"] = 2;
	                return values;
	            })();

	            return SurfaceFlingerTransactionsConfig;
	        })();

	        protos.WindowManagerConfig = (function() {

	            /**
	             * Properties of a WindowManagerConfig.
	             * @memberof perfetto.protos
	             * @interface IWindowManagerConfig
	             * @property {perfetto.protos.WindowManagerConfig.LogFrequency|null} [logFrequency] WindowManagerConfig logFrequency
	             * @property {perfetto.protos.WindowManagerConfig.LogLevel|null} [logLevel] WindowManagerConfig logLevel
	             */

	            /**
	             * Constructs a new WindowManagerConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a WindowManagerConfig.
	             * @implements IWindowManagerConfig
	             * @constructor
	             * @param {perfetto.protos.IWindowManagerConfig=} [p] Properties to set
	             */
	            function WindowManagerConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * WindowManagerConfig logFrequency.
	             * @member {perfetto.protos.WindowManagerConfig.LogFrequency} logFrequency
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @instance
	             */
	            WindowManagerConfig.prototype.logFrequency = 0;

	            /**
	             * WindowManagerConfig logLevel.
	             * @member {perfetto.protos.WindowManagerConfig.LogLevel} logLevel
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @instance
	             */
	            WindowManagerConfig.prototype.logLevel = 0;

	            /**
	             * Creates a new WindowManagerConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @static
	             * @param {perfetto.protos.IWindowManagerConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.WindowManagerConfig} WindowManagerConfig instance
	             */
	            WindowManagerConfig.create = function create(properties) {
	                return new WindowManagerConfig(properties);
	            };

	            /**
	             * Encodes the specified WindowManagerConfig message. Does not implicitly {@link perfetto.protos.WindowManagerConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @static
	             * @param {perfetto.protos.IWindowManagerConfig} m WindowManagerConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            WindowManagerConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.logFrequency != null && Object.hasOwnProperty.call(m, "logFrequency"))
	                    w.uint32(8).int32(m.logFrequency);
	                if (m.logLevel != null && Object.hasOwnProperty.call(m, "logLevel"))
	                    w.uint32(16).int32(m.logLevel);
	                return w;
	            };

	            /**
	             * Decodes a WindowManagerConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.WindowManagerConfig} WindowManagerConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            WindowManagerConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.WindowManagerConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.logFrequency = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            m.logLevel = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a WindowManagerConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.WindowManagerConfig} WindowManagerConfig
	             */
	            WindowManagerConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.WindowManagerConfig)
	                    return d;
	                var m = new $root.perfetto.protos.WindowManagerConfig();
	                switch (d.logFrequency) {
	                default:
	                    if (typeof d.logFrequency === "number") {
	                        m.logFrequency = d.logFrequency;
	                        break;
	                    }
	                    break;
	                case "LOG_FREQUENCY_UNSPECIFIED":
	                case 0:
	                    m.logFrequency = 0;
	                    break;
	                case "LOG_FREQUENCY_FRAME":
	                case 1:
	                    m.logFrequency = 1;
	                    break;
	                case "LOG_FREQUENCY_TRANSACTION":
	                case 2:
	                    m.logFrequency = 2;
	                    break;
	                case "LOG_FREQUENCY_SINGLE_DUMP":
	                case 3:
	                    m.logFrequency = 3;
	                    break;
	                }
	                switch (d.logLevel) {
	                default:
	                    if (typeof d.logLevel === "number") {
	                        m.logLevel = d.logLevel;
	                        break;
	                    }
	                    break;
	                case "LOG_LEVEL_UNSPECIFIED":
	                case 0:
	                    m.logLevel = 0;
	                    break;
	                case "LOG_LEVEL_VERBOSE":
	                case 1:
	                    m.logLevel = 1;
	                    break;
	                case "LOG_LEVEL_DEBUG":
	                case 2:
	                    m.logLevel = 2;
	                    break;
	                case "LOG_LEVEL_CRITICAL":
	                case 3:
	                    m.logLevel = 3;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a WindowManagerConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @static
	             * @param {perfetto.protos.WindowManagerConfig} m WindowManagerConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            WindowManagerConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.logFrequency = o.enums === String ? "LOG_FREQUENCY_UNSPECIFIED" : 0;
	                    d.logLevel = o.enums === String ? "LOG_LEVEL_UNSPECIFIED" : 0;
	                }
	                if (m.logFrequency != null && m.hasOwnProperty("logFrequency")) {
	                    d.logFrequency = o.enums === String ? $root.perfetto.protos.WindowManagerConfig.LogFrequency[m.logFrequency] === undefined ? m.logFrequency : $root.perfetto.protos.WindowManagerConfig.LogFrequency[m.logFrequency] : m.logFrequency;
	                }
	                if (m.logLevel != null && m.hasOwnProperty("logLevel")) {
	                    d.logLevel = o.enums === String ? $root.perfetto.protos.WindowManagerConfig.LogLevel[m.logLevel] === undefined ? m.logLevel : $root.perfetto.protos.WindowManagerConfig.LogLevel[m.logLevel] : m.logLevel;
	                }
	                return d;
	            };

	            /**
	             * Converts this WindowManagerConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            WindowManagerConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for WindowManagerConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.WindowManagerConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            WindowManagerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.WindowManagerConfig";
	            };

	            /**
	             * LogFrequency enum.
	             * @name perfetto.protos.WindowManagerConfig.LogFrequency
	             * @enum {number}
	             * @property {number} LOG_FREQUENCY_UNSPECIFIED=0 LOG_FREQUENCY_UNSPECIFIED value
	             * @property {number} LOG_FREQUENCY_FRAME=1 LOG_FREQUENCY_FRAME value
	             * @property {number} LOG_FREQUENCY_TRANSACTION=2 LOG_FREQUENCY_TRANSACTION value
	             * @property {number} LOG_FREQUENCY_SINGLE_DUMP=3 LOG_FREQUENCY_SINGLE_DUMP value
	             */
	            WindowManagerConfig.LogFrequency = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "LOG_FREQUENCY_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "LOG_FREQUENCY_FRAME"] = 1;
	                values[valuesById[2] = "LOG_FREQUENCY_TRANSACTION"] = 2;
	                values[valuesById[3] = "LOG_FREQUENCY_SINGLE_DUMP"] = 3;
	                return values;
	            })();

	            /**
	             * LogLevel enum.
	             * @name perfetto.protos.WindowManagerConfig.LogLevel
	             * @enum {number}
	             * @property {number} LOG_LEVEL_UNSPECIFIED=0 LOG_LEVEL_UNSPECIFIED value
	             * @property {number} LOG_LEVEL_VERBOSE=1 LOG_LEVEL_VERBOSE value
	             * @property {number} LOG_LEVEL_DEBUG=2 LOG_LEVEL_DEBUG value
	             * @property {number} LOG_LEVEL_CRITICAL=3 LOG_LEVEL_CRITICAL value
	             */
	            WindowManagerConfig.LogLevel = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "LOG_LEVEL_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "LOG_LEVEL_VERBOSE"] = 1;
	                values[valuesById[2] = "LOG_LEVEL_DEBUG"] = 2;
	                values[valuesById[3] = "LOG_LEVEL_CRITICAL"] = 3;
	                return values;
	            })();

	            return WindowManagerConfig;
	        })();

	        protos.ChromeConfig = (function() {

	            /**
	             * Properties of a ChromeConfig.
	             * @memberof perfetto.protos
	             * @interface IChromeConfig
	             * @property {string|null} [traceConfig] ChromeConfig traceConfig
	             * @property {boolean|null} [privacyFilteringEnabled] ChromeConfig privacyFilteringEnabled
	             * @property {boolean|null} [convertToLegacyJson] ChromeConfig convertToLegacyJson
	             * @property {perfetto.protos.ChromeConfig.ClientPriority|null} [clientPriority] ChromeConfig clientPriority
	             * @property {string|null} [jsonAgentLabelFilter] ChromeConfig jsonAgentLabelFilter
	             */

	            /**
	             * Constructs a new ChromeConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ChromeConfig.
	             * @implements IChromeConfig
	             * @constructor
	             * @param {perfetto.protos.IChromeConfig=} [p] Properties to set
	             */
	            function ChromeConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ChromeConfig traceConfig.
	             * @member {string} traceConfig
	             * @memberof perfetto.protos.ChromeConfig
	             * @instance
	             */
	            ChromeConfig.prototype.traceConfig = "";

	            /**
	             * ChromeConfig privacyFilteringEnabled.
	             * @member {boolean} privacyFilteringEnabled
	             * @memberof perfetto.protos.ChromeConfig
	             * @instance
	             */
	            ChromeConfig.prototype.privacyFilteringEnabled = false;

	            /**
	             * ChromeConfig convertToLegacyJson.
	             * @member {boolean} convertToLegacyJson
	             * @memberof perfetto.protos.ChromeConfig
	             * @instance
	             */
	            ChromeConfig.prototype.convertToLegacyJson = false;

	            /**
	             * ChromeConfig clientPriority.
	             * @member {perfetto.protos.ChromeConfig.ClientPriority} clientPriority
	             * @memberof perfetto.protos.ChromeConfig
	             * @instance
	             */
	            ChromeConfig.prototype.clientPriority = 0;

	            /**
	             * ChromeConfig jsonAgentLabelFilter.
	             * @member {string} jsonAgentLabelFilter
	             * @memberof perfetto.protos.ChromeConfig
	             * @instance
	             */
	            ChromeConfig.prototype.jsonAgentLabelFilter = "";

	            /**
	             * Creates a new ChromeConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ChromeConfig
	             * @static
	             * @param {perfetto.protos.IChromeConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.ChromeConfig} ChromeConfig instance
	             */
	            ChromeConfig.create = function create(properties) {
	                return new ChromeConfig(properties);
	            };

	            /**
	             * Encodes the specified ChromeConfig message. Does not implicitly {@link perfetto.protos.ChromeConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ChromeConfig
	             * @static
	             * @param {perfetto.protos.IChromeConfig} m ChromeConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ChromeConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.traceConfig != null && Object.hasOwnProperty.call(m, "traceConfig"))
	                    w.uint32(10).string(m.traceConfig);
	                if (m.privacyFilteringEnabled != null && Object.hasOwnProperty.call(m, "privacyFilteringEnabled"))
	                    w.uint32(16).bool(m.privacyFilteringEnabled);
	                if (m.convertToLegacyJson != null && Object.hasOwnProperty.call(m, "convertToLegacyJson"))
	                    w.uint32(24).bool(m.convertToLegacyJson);
	                if (m.clientPriority != null && Object.hasOwnProperty.call(m, "clientPriority"))
	                    w.uint32(32).int32(m.clientPriority);
	                if (m.jsonAgentLabelFilter != null && Object.hasOwnProperty.call(m, "jsonAgentLabelFilter"))
	                    w.uint32(42).string(m.jsonAgentLabelFilter);
	                return w;
	            };

	            /**
	             * Decodes a ChromeConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ChromeConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ChromeConfig} ChromeConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ChromeConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ChromeConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.traceConfig = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.privacyFilteringEnabled = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.convertToLegacyJson = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.clientPriority = r.int32();
	                            break;
	                        }
	                    case 5: {
	                            m.jsonAgentLabelFilter = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ChromeConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ChromeConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ChromeConfig} ChromeConfig
	             */
	            ChromeConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ChromeConfig)
	                    return d;
	                var m = new $root.perfetto.protos.ChromeConfig();
	                if (d.traceConfig != null) {
	                    m.traceConfig = String(d.traceConfig);
	                }
	                if (d.privacyFilteringEnabled != null) {
	                    m.privacyFilteringEnabled = Boolean(d.privacyFilteringEnabled);
	                }
	                if (d.convertToLegacyJson != null) {
	                    m.convertToLegacyJson = Boolean(d.convertToLegacyJson);
	                }
	                switch (d.clientPriority) {
	                default:
	                    if (typeof d.clientPriority === "number") {
	                        m.clientPriority = d.clientPriority;
	                        break;
	                    }
	                    break;
	                case "UNKNOWN":
	                case 0:
	                    m.clientPriority = 0;
	                    break;
	                case "BACKGROUND":
	                case 1:
	                    m.clientPriority = 1;
	                    break;
	                case "USER_INITIATED":
	                case 2:
	                    m.clientPriority = 2;
	                    break;
	                }
	                if (d.jsonAgentLabelFilter != null) {
	                    m.jsonAgentLabelFilter = String(d.jsonAgentLabelFilter);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ChromeConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ChromeConfig
	             * @static
	             * @param {perfetto.protos.ChromeConfig} m ChromeConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ChromeConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.traceConfig = "";
	                    d.privacyFilteringEnabled = false;
	                    d.convertToLegacyJson = false;
	                    d.clientPriority = o.enums === String ? "UNKNOWN" : 0;
	                    d.jsonAgentLabelFilter = "";
	                }
	                if (m.traceConfig != null && m.hasOwnProperty("traceConfig")) {
	                    d.traceConfig = m.traceConfig;
	                }
	                if (m.privacyFilteringEnabled != null && m.hasOwnProperty("privacyFilteringEnabled")) {
	                    d.privacyFilteringEnabled = m.privacyFilteringEnabled;
	                }
	                if (m.convertToLegacyJson != null && m.hasOwnProperty("convertToLegacyJson")) {
	                    d.convertToLegacyJson = m.convertToLegacyJson;
	                }
	                if (m.clientPriority != null && m.hasOwnProperty("clientPriority")) {
	                    d.clientPriority = o.enums === String ? $root.perfetto.protos.ChromeConfig.ClientPriority[m.clientPriority] === undefined ? m.clientPriority : $root.perfetto.protos.ChromeConfig.ClientPriority[m.clientPriority] : m.clientPriority;
	                }
	                if (m.jsonAgentLabelFilter != null && m.hasOwnProperty("jsonAgentLabelFilter")) {
	                    d.jsonAgentLabelFilter = m.jsonAgentLabelFilter;
	                }
	                return d;
	            };

	            /**
	             * Converts this ChromeConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ChromeConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ChromeConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ChromeConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ChromeConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ChromeConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ChromeConfig";
	            };

	            /**
	             * ClientPriority enum.
	             * @name perfetto.protos.ChromeConfig.ClientPriority
	             * @enum {number}
	             * @property {number} UNKNOWN=0 UNKNOWN value
	             * @property {number} BACKGROUND=1 BACKGROUND value
	             * @property {number} USER_INITIATED=2 USER_INITIATED value
	             */
	            ChromeConfig.ClientPriority = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "UNKNOWN"] = 0;
	                values[valuesById[1] = "BACKGROUND"] = 1;
	                values[valuesById[2] = "USER_INITIATED"] = 2;
	                return values;
	            })();

	            return ChromeConfig;
	        })();

	        protos.V8Config = (function() {

	            /**
	             * Properties of a V8Config.
	             * @memberof perfetto.protos
	             * @interface IV8Config
	             * @property {boolean|null} [logScriptSources] V8Config logScriptSources
	             * @property {boolean|null} [logInstructions] V8Config logInstructions
	             */

	            /**
	             * Constructs a new V8Config.
	             * @memberof perfetto.protos
	             * @classdesc Represents a V8Config.
	             * @implements IV8Config
	             * @constructor
	             * @param {perfetto.protos.IV8Config=} [p] Properties to set
	             */
	            function V8Config(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * V8Config logScriptSources.
	             * @member {boolean} logScriptSources
	             * @memberof perfetto.protos.V8Config
	             * @instance
	             */
	            V8Config.prototype.logScriptSources = false;

	            /**
	             * V8Config logInstructions.
	             * @member {boolean} logInstructions
	             * @memberof perfetto.protos.V8Config
	             * @instance
	             */
	            V8Config.prototype.logInstructions = false;

	            /**
	             * Creates a new V8Config instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.V8Config
	             * @static
	             * @param {perfetto.protos.IV8Config=} [properties] Properties to set
	             * @returns {perfetto.protos.V8Config} V8Config instance
	             */
	            V8Config.create = function create(properties) {
	                return new V8Config(properties);
	            };

	            /**
	             * Encodes the specified V8Config message. Does not implicitly {@link perfetto.protos.V8Config.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.V8Config
	             * @static
	             * @param {perfetto.protos.IV8Config} m V8Config message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            V8Config.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.logScriptSources != null && Object.hasOwnProperty.call(m, "logScriptSources"))
	                    w.uint32(8).bool(m.logScriptSources);
	                if (m.logInstructions != null && Object.hasOwnProperty.call(m, "logInstructions"))
	                    w.uint32(16).bool(m.logInstructions);
	                return w;
	            };

	            /**
	             * Decodes a V8Config message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.V8Config
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.V8Config} V8Config
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            V8Config.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.V8Config();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.logScriptSources = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            m.logInstructions = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a V8Config message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.V8Config
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.V8Config} V8Config
	             */
	            V8Config.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.V8Config)
	                    return d;
	                var m = new $root.perfetto.protos.V8Config();
	                if (d.logScriptSources != null) {
	                    m.logScriptSources = Boolean(d.logScriptSources);
	                }
	                if (d.logInstructions != null) {
	                    m.logInstructions = Boolean(d.logInstructions);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a V8Config message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.V8Config
	             * @static
	             * @param {perfetto.protos.V8Config} m V8Config
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            V8Config.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.logScriptSources = false;
	                    d.logInstructions = false;
	                }
	                if (m.logScriptSources != null && m.hasOwnProperty("logScriptSources")) {
	                    d.logScriptSources = m.logScriptSources;
	                }
	                if (m.logInstructions != null && m.hasOwnProperty("logInstructions")) {
	                    d.logInstructions = m.logInstructions;
	                }
	                return d;
	            };

	            /**
	             * Converts this V8Config to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.V8Config
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            V8Config.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for V8Config
	             * @function getTypeUrl
	             * @memberof perfetto.protos.V8Config
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            V8Config.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.V8Config";
	            };

	            return V8Config;
	        })();

	        protos.EtwConfig = (function() {

	            /**
	             * Properties of an EtwConfig.
	             * @memberof perfetto.protos
	             * @interface IEtwConfig
	             * @property {Array.<perfetto.protos.EtwConfig.KernelFlag>|null} [kernelFlags] EtwConfig kernelFlags
	             */

	            /**
	             * Constructs a new EtwConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EtwConfig.
	             * @implements IEtwConfig
	             * @constructor
	             * @param {perfetto.protos.IEtwConfig=} [p] Properties to set
	             */
	            function EtwConfig(p) {
	                this.kernelFlags = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * EtwConfig kernelFlags.
	             * @member {Array.<perfetto.protos.EtwConfig.KernelFlag>} kernelFlags
	             * @memberof perfetto.protos.EtwConfig
	             * @instance
	             */
	            EtwConfig.prototype.kernelFlags = $util.emptyArray;

	            /**
	             * Creates a new EtwConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EtwConfig
	             * @static
	             * @param {perfetto.protos.IEtwConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.EtwConfig} EtwConfig instance
	             */
	            EtwConfig.create = function create(properties) {
	                return new EtwConfig(properties);
	            };

	            /**
	             * Encodes the specified EtwConfig message. Does not implicitly {@link perfetto.protos.EtwConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EtwConfig
	             * @static
	             * @param {perfetto.protos.IEtwConfig} m EtwConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EtwConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.kernelFlags != null && m.kernelFlags.length) {
	                    for (var i = 0; i < m.kernelFlags.length; ++i)
	                        w.uint32(8).int32(m.kernelFlags[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an EtwConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EtwConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EtwConfig} EtwConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EtwConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EtwConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.kernelFlags && m.kernelFlags.length))
	                                m.kernelFlags = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.kernelFlags.push(r.int32());
	                            } else
	                                m.kernelFlags.push(r.int32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EtwConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EtwConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EtwConfig} EtwConfig
	             */
	            EtwConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EtwConfig)
	                    return d;
	                var m = new $root.perfetto.protos.EtwConfig();
	                if (d.kernelFlags) {
	                    if (!Array.isArray(d.kernelFlags))
	                        throw TypeError(".perfetto.protos.EtwConfig.kernelFlags: array expected");
	                    m.kernelFlags = [];
	                    for (var i = 0; i < d.kernelFlags.length; ++i) {
	                        switch (d.kernelFlags[i]) {
	                        default:
	                            if (typeof d.kernelFlags[i] === "number") {
	                                m.kernelFlags[i] = d.kernelFlags[i];
	                                break;
	                            }
	                        case "CSWITCH":
	                        case 0:
	                            m.kernelFlags[i] = 0;
	                            break;
	                        case "DISPATCHER":
	                        case 1:
	                            m.kernelFlags[i] = 1;
	                            break;
	                        }
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an EtwConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EtwConfig
	             * @static
	             * @param {perfetto.protos.EtwConfig} m EtwConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EtwConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.kernelFlags = [];
	                }
	                if (m.kernelFlags && m.kernelFlags.length) {
	                    d.kernelFlags = [];
	                    for (var j = 0; j < m.kernelFlags.length; ++j) {
	                        d.kernelFlags[j] = o.enums === String ? $root.perfetto.protos.EtwConfig.KernelFlag[m.kernelFlags[j]] === undefined ? m.kernelFlags[j] : $root.perfetto.protos.EtwConfig.KernelFlag[m.kernelFlags[j]] : m.kernelFlags[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this EtwConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EtwConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EtwConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EtwConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EtwConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EtwConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EtwConfig";
	            };

	            /**
	             * KernelFlag enum.
	             * @name perfetto.protos.EtwConfig.KernelFlag
	             * @enum {number}
	             * @property {number} CSWITCH=0 CSWITCH value
	             * @property {number} DISPATCHER=1 DISPATCHER value
	             */
	            EtwConfig.KernelFlag = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "CSWITCH"] = 0;
	                values[valuesById[1] = "DISPATCHER"] = 1;
	                return values;
	            })();

	            return EtwConfig;
	        })();

	        protos.ChromiumSystemMetricsConfig = (function() {

	            /**
	             * Properties of a ChromiumSystemMetricsConfig.
	             * @memberof perfetto.protos
	             * @interface IChromiumSystemMetricsConfig
	             * @property {number|null} [samplingIntervalMs] ChromiumSystemMetricsConfig samplingIntervalMs
	             */

	            /**
	             * Constructs a new ChromiumSystemMetricsConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ChromiumSystemMetricsConfig.
	             * @implements IChromiumSystemMetricsConfig
	             * @constructor
	             * @param {perfetto.protos.IChromiumSystemMetricsConfig=} [p] Properties to set
	             */
	            function ChromiumSystemMetricsConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ChromiumSystemMetricsConfig samplingIntervalMs.
	             * @member {number} samplingIntervalMs
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @instance
	             */
	            ChromiumSystemMetricsConfig.prototype.samplingIntervalMs = 0;

	            /**
	             * Creates a new ChromiumSystemMetricsConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @static
	             * @param {perfetto.protos.IChromiumSystemMetricsConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.ChromiumSystemMetricsConfig} ChromiumSystemMetricsConfig instance
	             */
	            ChromiumSystemMetricsConfig.create = function create(properties) {
	                return new ChromiumSystemMetricsConfig(properties);
	            };

	            /**
	             * Encodes the specified ChromiumSystemMetricsConfig message. Does not implicitly {@link perfetto.protos.ChromiumSystemMetricsConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @static
	             * @param {perfetto.protos.IChromiumSystemMetricsConfig} m ChromiumSystemMetricsConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ChromiumSystemMetricsConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.samplingIntervalMs != null && Object.hasOwnProperty.call(m, "samplingIntervalMs"))
	                    w.uint32(8).uint32(m.samplingIntervalMs);
	                return w;
	            };

	            /**
	             * Decodes a ChromiumSystemMetricsConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ChromiumSystemMetricsConfig} ChromiumSystemMetricsConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ChromiumSystemMetricsConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ChromiumSystemMetricsConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.samplingIntervalMs = r.uint32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ChromiumSystemMetricsConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ChromiumSystemMetricsConfig} ChromiumSystemMetricsConfig
	             */
	            ChromiumSystemMetricsConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ChromiumSystemMetricsConfig)
	                    return d;
	                var m = new $root.perfetto.protos.ChromiumSystemMetricsConfig();
	                if (d.samplingIntervalMs != null) {
	                    m.samplingIntervalMs = d.samplingIntervalMs >>> 0;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ChromiumSystemMetricsConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @static
	             * @param {perfetto.protos.ChromiumSystemMetricsConfig} m ChromiumSystemMetricsConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ChromiumSystemMetricsConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.samplingIntervalMs = 0;
	                }
	                if (m.samplingIntervalMs != null && m.hasOwnProperty("samplingIntervalMs")) {
	                    d.samplingIntervalMs = m.samplingIntervalMs;
	                }
	                return d;
	            };

	            /**
	             * Converts this ChromiumSystemMetricsConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ChromiumSystemMetricsConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ChromiumSystemMetricsConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ChromiumSystemMetricsConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ChromiumSystemMetricsConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ChromiumSystemMetricsConfig";
	            };

	            return ChromiumSystemMetricsConfig;
	        })();

	        protos.FtraceConfig = (function() {

	            /**
	             * Properties of a FtraceConfig.
	             * @memberof perfetto.protos
	             * @interface IFtraceConfig
	             * @property {Array.<string>|null} [ftraceEvents] FtraceConfig ftraceEvents
	             * @property {Array.<perfetto.protos.FtraceConfig.IKprobeEvent>|null} [kprobeEvents] FtraceConfig kprobeEvents
	             * @property {Array.<string>|null} [atraceCategories] FtraceConfig atraceCategories
	             * @property {Array.<string>|null} [atraceApps] FtraceConfig atraceApps
	             * @property {Array.<string>|null} [atraceCategoriesPreferSdk] FtraceConfig atraceCategoriesPreferSdk
	             * @property {number|null} [bufferSizeKb] FtraceConfig bufferSizeKb
	             * @property {number|null} [drainPeriodMs] FtraceConfig drainPeriodMs
	             * @property {number|null} [drainBufferPercent] FtraceConfig drainBufferPercent
	             * @property {perfetto.protos.FtraceConfig.ICompactSchedConfig|null} [compactSched] FtraceConfig compactSched
	             * @property {perfetto.protos.FtraceConfig.IPrintFilter|null} [printFilter] FtraceConfig printFilter
	             * @property {boolean|null} [symbolizeKsyms] FtraceConfig symbolizeKsyms
	             * @property {perfetto.protos.FtraceConfig.KsymsMemPolicy|null} [ksymsMemPolicy] FtraceConfig ksymsMemPolicy
	             * @property {boolean|null} [initializeKsymsSynchronouslyForTesting] FtraceConfig initializeKsymsSynchronouslyForTesting
	             * @property {boolean|null} [throttleRssStat] FtraceConfig throttleRssStat
	             * @property {boolean|null} [disableGenericEvents] FtraceConfig disableGenericEvents
	             * @property {Array.<string>|null} [syscallEvents] FtraceConfig syscallEvents
	             * @property {boolean|null} [enableFunctionGraph] FtraceConfig enableFunctionGraph
	             * @property {Array.<string>|null} [functionFilters] FtraceConfig functionFilters
	             * @property {Array.<string>|null} [functionGraphRoots] FtraceConfig functionGraphRoots
	             * @property {boolean|null} [preserveFtraceBuffer] FtraceConfig preserveFtraceBuffer
	             * @property {boolean|null} [useMonotonicRawClock] FtraceConfig useMonotonicRawClock
	             * @property {string|null} [instanceName] FtraceConfig instanceName
	             * @property {boolean|null} [bufferSizeLowerBound] FtraceConfig bufferSizeLowerBound
	             */

	            /**
	             * Constructs a new FtraceConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FtraceConfig.
	             * @implements IFtraceConfig
	             * @constructor
	             * @param {perfetto.protos.IFtraceConfig=} [p] Properties to set
	             */
	            function FtraceConfig(p) {
	                this.ftraceEvents = [];
	                this.kprobeEvents = [];
	                this.atraceCategories = [];
	                this.atraceApps = [];
	                this.atraceCategoriesPreferSdk = [];
	                this.syscallEvents = [];
	                this.functionFilters = [];
	                this.functionGraphRoots = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FtraceConfig ftraceEvents.
	             * @member {Array.<string>} ftraceEvents
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.ftraceEvents = $util.emptyArray;

	            /**
	             * FtraceConfig kprobeEvents.
	             * @member {Array.<perfetto.protos.FtraceConfig.IKprobeEvent>} kprobeEvents
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.kprobeEvents = $util.emptyArray;

	            /**
	             * FtraceConfig atraceCategories.
	             * @member {Array.<string>} atraceCategories
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.atraceCategories = $util.emptyArray;

	            /**
	             * FtraceConfig atraceApps.
	             * @member {Array.<string>} atraceApps
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.atraceApps = $util.emptyArray;

	            /**
	             * FtraceConfig atraceCategoriesPreferSdk.
	             * @member {Array.<string>} atraceCategoriesPreferSdk
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.atraceCategoriesPreferSdk = $util.emptyArray;

	            /**
	             * FtraceConfig bufferSizeKb.
	             * @member {number} bufferSizeKb
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.bufferSizeKb = 0;

	            /**
	             * FtraceConfig drainPeriodMs.
	             * @member {number} drainPeriodMs
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.drainPeriodMs = 0;

	            /**
	             * FtraceConfig drainBufferPercent.
	             * @member {number} drainBufferPercent
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.drainBufferPercent = 0;

	            /**
	             * FtraceConfig compactSched.
	             * @member {perfetto.protos.FtraceConfig.ICompactSchedConfig|null|undefined} compactSched
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.compactSched = null;

	            /**
	             * FtraceConfig printFilter.
	             * @member {perfetto.protos.FtraceConfig.IPrintFilter|null|undefined} printFilter
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.printFilter = null;

	            /**
	             * FtraceConfig symbolizeKsyms.
	             * @member {boolean} symbolizeKsyms
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.symbolizeKsyms = false;

	            /**
	             * FtraceConfig ksymsMemPolicy.
	             * @member {perfetto.protos.FtraceConfig.KsymsMemPolicy} ksymsMemPolicy
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.ksymsMemPolicy = 0;

	            /**
	             * FtraceConfig initializeKsymsSynchronouslyForTesting.
	             * @member {boolean} initializeKsymsSynchronouslyForTesting
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.initializeKsymsSynchronouslyForTesting = false;

	            /**
	             * FtraceConfig throttleRssStat.
	             * @member {boolean} throttleRssStat
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.throttleRssStat = false;

	            /**
	             * FtraceConfig disableGenericEvents.
	             * @member {boolean} disableGenericEvents
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.disableGenericEvents = false;

	            /**
	             * FtraceConfig syscallEvents.
	             * @member {Array.<string>} syscallEvents
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.syscallEvents = $util.emptyArray;

	            /**
	             * FtraceConfig enableFunctionGraph.
	             * @member {boolean} enableFunctionGraph
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.enableFunctionGraph = false;

	            /**
	             * FtraceConfig functionFilters.
	             * @member {Array.<string>} functionFilters
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.functionFilters = $util.emptyArray;

	            /**
	             * FtraceConfig functionGraphRoots.
	             * @member {Array.<string>} functionGraphRoots
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.functionGraphRoots = $util.emptyArray;

	            /**
	             * FtraceConfig preserveFtraceBuffer.
	             * @member {boolean} preserveFtraceBuffer
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.preserveFtraceBuffer = false;

	            /**
	             * FtraceConfig useMonotonicRawClock.
	             * @member {boolean} useMonotonicRawClock
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.useMonotonicRawClock = false;

	            /**
	             * FtraceConfig instanceName.
	             * @member {string} instanceName
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.instanceName = "";

	            /**
	             * FtraceConfig bufferSizeLowerBound.
	             * @member {boolean} bufferSizeLowerBound
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             */
	            FtraceConfig.prototype.bufferSizeLowerBound = false;

	            /**
	             * Creates a new FtraceConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FtraceConfig
	             * @static
	             * @param {perfetto.protos.IFtraceConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.FtraceConfig} FtraceConfig instance
	             */
	            FtraceConfig.create = function create(properties) {
	                return new FtraceConfig(properties);
	            };

	            /**
	             * Encodes the specified FtraceConfig message. Does not implicitly {@link perfetto.protos.FtraceConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FtraceConfig
	             * @static
	             * @param {perfetto.protos.IFtraceConfig} m FtraceConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FtraceConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.ftraceEvents != null && m.ftraceEvents.length) {
	                    for (var i = 0; i < m.ftraceEvents.length; ++i)
	                        w.uint32(10).string(m.ftraceEvents[i]);
	                }
	                if (m.atraceCategories != null && m.atraceCategories.length) {
	                    for (var i = 0; i < m.atraceCategories.length; ++i)
	                        w.uint32(18).string(m.atraceCategories[i]);
	                }
	                if (m.atraceApps != null && m.atraceApps.length) {
	                    for (var i = 0; i < m.atraceApps.length; ++i)
	                        w.uint32(26).string(m.atraceApps[i]);
	                }
	                if (m.bufferSizeKb != null && Object.hasOwnProperty.call(m, "bufferSizeKb"))
	                    w.uint32(80).uint32(m.bufferSizeKb);
	                if (m.drainPeriodMs != null && Object.hasOwnProperty.call(m, "drainPeriodMs"))
	                    w.uint32(88).uint32(m.drainPeriodMs);
	                if (m.compactSched != null && Object.hasOwnProperty.call(m, "compactSched"))
	                    $root.perfetto.protos.FtraceConfig.CompactSchedConfig.encode(m.compactSched, w.uint32(98).fork()).ldelim();
	                if (m.symbolizeKsyms != null && Object.hasOwnProperty.call(m, "symbolizeKsyms"))
	                    w.uint32(104).bool(m.symbolizeKsyms);
	                if (m.initializeKsymsSynchronouslyForTesting != null && Object.hasOwnProperty.call(m, "initializeKsymsSynchronouslyForTesting"))
	                    w.uint32(112).bool(m.initializeKsymsSynchronouslyForTesting);
	                if (m.throttleRssStat != null && Object.hasOwnProperty.call(m, "throttleRssStat"))
	                    w.uint32(120).bool(m.throttleRssStat);
	                if (m.disableGenericEvents != null && Object.hasOwnProperty.call(m, "disableGenericEvents"))
	                    w.uint32(128).bool(m.disableGenericEvents);
	                if (m.ksymsMemPolicy != null && Object.hasOwnProperty.call(m, "ksymsMemPolicy"))
	                    w.uint32(136).int32(m.ksymsMemPolicy);
	                if (m.syscallEvents != null && m.syscallEvents.length) {
	                    for (var i = 0; i < m.syscallEvents.length; ++i)
	                        w.uint32(146).string(m.syscallEvents[i]);
	                }
	                if (m.enableFunctionGraph != null && Object.hasOwnProperty.call(m, "enableFunctionGraph"))
	                    w.uint32(152).bool(m.enableFunctionGraph);
	                if (m.functionFilters != null && m.functionFilters.length) {
	                    for (var i = 0; i < m.functionFilters.length; ++i)
	                        w.uint32(162).string(m.functionFilters[i]);
	                }
	                if (m.functionGraphRoots != null && m.functionGraphRoots.length) {
	                    for (var i = 0; i < m.functionGraphRoots.length; ++i)
	                        w.uint32(170).string(m.functionGraphRoots[i]);
	                }
	                if (m.printFilter != null && Object.hasOwnProperty.call(m, "printFilter"))
	                    $root.perfetto.protos.FtraceConfig.PrintFilter.encode(m.printFilter, w.uint32(178).fork()).ldelim();
	                if (m.preserveFtraceBuffer != null && Object.hasOwnProperty.call(m, "preserveFtraceBuffer"))
	                    w.uint32(184).bool(m.preserveFtraceBuffer);
	                if (m.useMonotonicRawClock != null && Object.hasOwnProperty.call(m, "useMonotonicRawClock"))
	                    w.uint32(192).bool(m.useMonotonicRawClock);
	                if (m.instanceName != null && Object.hasOwnProperty.call(m, "instanceName"))
	                    w.uint32(202).string(m.instanceName);
	                if (m.bufferSizeLowerBound != null && Object.hasOwnProperty.call(m, "bufferSizeLowerBound"))
	                    w.uint32(216).bool(m.bufferSizeLowerBound);
	                if (m.atraceCategoriesPreferSdk != null && m.atraceCategoriesPreferSdk.length) {
	                    for (var i = 0; i < m.atraceCategoriesPreferSdk.length; ++i)
	                        w.uint32(226).string(m.atraceCategoriesPreferSdk[i]);
	                }
	                if (m.drainBufferPercent != null && Object.hasOwnProperty.call(m, "drainBufferPercent"))
	                    w.uint32(232).uint32(m.drainBufferPercent);
	                if (m.kprobeEvents != null && m.kprobeEvents.length) {
	                    for (var i = 0; i < m.kprobeEvents.length; ++i)
	                        $root.perfetto.protos.FtraceConfig.KprobeEvent.encode(m.kprobeEvents[i], w.uint32(242).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a FtraceConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FtraceConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FtraceConfig} FtraceConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FtraceConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.ftraceEvents && m.ftraceEvents.length))
	                                m.ftraceEvents = [];
	                            m.ftraceEvents.push(r.string());
	                            break;
	                        }
	                    case 30: {
	                            if (!(m.kprobeEvents && m.kprobeEvents.length))
	                                m.kprobeEvents = [];
	                            m.kprobeEvents.push($root.perfetto.protos.FtraceConfig.KprobeEvent.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.atraceCategories && m.atraceCategories.length))
	                                m.atraceCategories = [];
	                            m.atraceCategories.push(r.string());
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.atraceApps && m.atraceApps.length))
	                                m.atraceApps = [];
	                            m.atraceApps.push(r.string());
	                            break;
	                        }
	                    case 28: {
	                            if (!(m.atraceCategoriesPreferSdk && m.atraceCategoriesPreferSdk.length))
	                                m.atraceCategoriesPreferSdk = [];
	                            m.atraceCategoriesPreferSdk.push(r.string());
	                            break;
	                        }
	                    case 10: {
	                            m.bufferSizeKb = r.uint32();
	                            break;
	                        }
	                    case 11: {
	                            m.drainPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 29: {
	                            m.drainBufferPercent = r.uint32();
	                            break;
	                        }
	                    case 12: {
	                            m.compactSched = $root.perfetto.protos.FtraceConfig.CompactSchedConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 22: {
	                            m.printFilter = $root.perfetto.protos.FtraceConfig.PrintFilter.decode(r, r.uint32());
	                            break;
	                        }
	                    case 13: {
	                            m.symbolizeKsyms = r.bool();
	                            break;
	                        }
	                    case 17: {
	                            m.ksymsMemPolicy = r.int32();
	                            break;
	                        }
	                    case 14: {
	                            m.initializeKsymsSynchronouslyForTesting = r.bool();
	                            break;
	                        }
	                    case 15: {
	                            m.throttleRssStat = r.bool();
	                            break;
	                        }
	                    case 16: {
	                            m.disableGenericEvents = r.bool();
	                            break;
	                        }
	                    case 18: {
	                            if (!(m.syscallEvents && m.syscallEvents.length))
	                                m.syscallEvents = [];
	                            m.syscallEvents.push(r.string());
	                            break;
	                        }
	                    case 19: {
	                            m.enableFunctionGraph = r.bool();
	                            break;
	                        }
	                    case 20: {
	                            if (!(m.functionFilters && m.functionFilters.length))
	                                m.functionFilters = [];
	                            m.functionFilters.push(r.string());
	                            break;
	                        }
	                    case 21: {
	                            if (!(m.functionGraphRoots && m.functionGraphRoots.length))
	                                m.functionGraphRoots = [];
	                            m.functionGraphRoots.push(r.string());
	                            break;
	                        }
	                    case 23: {
	                            m.preserveFtraceBuffer = r.bool();
	                            break;
	                        }
	                    case 24: {
	                            m.useMonotonicRawClock = r.bool();
	                            break;
	                        }
	                    case 25: {
	                            m.instanceName = r.string();
	                            break;
	                        }
	                    case 27: {
	                            m.bufferSizeLowerBound = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FtraceConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FtraceConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FtraceConfig} FtraceConfig
	             */
	            FtraceConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FtraceConfig)
	                    return d;
	                var m = new $root.perfetto.protos.FtraceConfig();
	                if (d.ftraceEvents) {
	                    if (!Array.isArray(d.ftraceEvents))
	                        throw TypeError(".perfetto.protos.FtraceConfig.ftraceEvents: array expected");
	                    m.ftraceEvents = [];
	                    for (var i = 0; i < d.ftraceEvents.length; ++i) {
	                        m.ftraceEvents[i] = String(d.ftraceEvents[i]);
	                    }
	                }
	                if (d.kprobeEvents) {
	                    if (!Array.isArray(d.kprobeEvents))
	                        throw TypeError(".perfetto.protos.FtraceConfig.kprobeEvents: array expected");
	                    m.kprobeEvents = [];
	                    for (var i = 0; i < d.kprobeEvents.length; ++i) {
	                        if (typeof d.kprobeEvents[i] !== "object")
	                            throw TypeError(".perfetto.protos.FtraceConfig.kprobeEvents: object expected");
	                        m.kprobeEvents[i] = $root.perfetto.protos.FtraceConfig.KprobeEvent.fromObject(d.kprobeEvents[i]);
	                    }
	                }
	                if (d.atraceCategories) {
	                    if (!Array.isArray(d.atraceCategories))
	                        throw TypeError(".perfetto.protos.FtraceConfig.atraceCategories: array expected");
	                    m.atraceCategories = [];
	                    for (var i = 0; i < d.atraceCategories.length; ++i) {
	                        m.atraceCategories[i] = String(d.atraceCategories[i]);
	                    }
	                }
	                if (d.atraceApps) {
	                    if (!Array.isArray(d.atraceApps))
	                        throw TypeError(".perfetto.protos.FtraceConfig.atraceApps: array expected");
	                    m.atraceApps = [];
	                    for (var i = 0; i < d.atraceApps.length; ++i) {
	                        m.atraceApps[i] = String(d.atraceApps[i]);
	                    }
	                }
	                if (d.atraceCategoriesPreferSdk) {
	                    if (!Array.isArray(d.atraceCategoriesPreferSdk))
	                        throw TypeError(".perfetto.protos.FtraceConfig.atraceCategoriesPreferSdk: array expected");
	                    m.atraceCategoriesPreferSdk = [];
	                    for (var i = 0; i < d.atraceCategoriesPreferSdk.length; ++i) {
	                        m.atraceCategoriesPreferSdk[i] = String(d.atraceCategoriesPreferSdk[i]);
	                    }
	                }
	                if (d.bufferSizeKb != null) {
	                    m.bufferSizeKb = d.bufferSizeKb >>> 0;
	                }
	                if (d.drainPeriodMs != null) {
	                    m.drainPeriodMs = d.drainPeriodMs >>> 0;
	                }
	                if (d.drainBufferPercent != null) {
	                    m.drainBufferPercent = d.drainBufferPercent >>> 0;
	                }
	                if (d.compactSched != null) {
	                    if (typeof d.compactSched !== "object")
	                        throw TypeError(".perfetto.protos.FtraceConfig.compactSched: object expected");
	                    m.compactSched = $root.perfetto.protos.FtraceConfig.CompactSchedConfig.fromObject(d.compactSched);
	                }
	                if (d.printFilter != null) {
	                    if (typeof d.printFilter !== "object")
	                        throw TypeError(".perfetto.protos.FtraceConfig.printFilter: object expected");
	                    m.printFilter = $root.perfetto.protos.FtraceConfig.PrintFilter.fromObject(d.printFilter);
	                }
	                if (d.symbolizeKsyms != null) {
	                    m.symbolizeKsyms = Boolean(d.symbolizeKsyms);
	                }
	                switch (d.ksymsMemPolicy) {
	                default:
	                    if (typeof d.ksymsMemPolicy === "number") {
	                        m.ksymsMemPolicy = d.ksymsMemPolicy;
	                        break;
	                    }
	                    break;
	                case "KSYMS_UNSPECIFIED":
	                case 0:
	                    m.ksymsMemPolicy = 0;
	                    break;
	                case "KSYMS_CLEANUP_ON_STOP":
	                case 1:
	                    m.ksymsMemPolicy = 1;
	                    break;
	                case "KSYMS_RETAIN":
	                case 2:
	                    m.ksymsMemPolicy = 2;
	                    break;
	                }
	                if (d.initializeKsymsSynchronouslyForTesting != null) {
	                    m.initializeKsymsSynchronouslyForTesting = Boolean(d.initializeKsymsSynchronouslyForTesting);
	                }
	                if (d.throttleRssStat != null) {
	                    m.throttleRssStat = Boolean(d.throttleRssStat);
	                }
	                if (d.disableGenericEvents != null) {
	                    m.disableGenericEvents = Boolean(d.disableGenericEvents);
	                }
	                if (d.syscallEvents) {
	                    if (!Array.isArray(d.syscallEvents))
	                        throw TypeError(".perfetto.protos.FtraceConfig.syscallEvents: array expected");
	                    m.syscallEvents = [];
	                    for (var i = 0; i < d.syscallEvents.length; ++i) {
	                        m.syscallEvents[i] = String(d.syscallEvents[i]);
	                    }
	                }
	                if (d.enableFunctionGraph != null) {
	                    m.enableFunctionGraph = Boolean(d.enableFunctionGraph);
	                }
	                if (d.functionFilters) {
	                    if (!Array.isArray(d.functionFilters))
	                        throw TypeError(".perfetto.protos.FtraceConfig.functionFilters: array expected");
	                    m.functionFilters = [];
	                    for (var i = 0; i < d.functionFilters.length; ++i) {
	                        m.functionFilters[i] = String(d.functionFilters[i]);
	                    }
	                }
	                if (d.functionGraphRoots) {
	                    if (!Array.isArray(d.functionGraphRoots))
	                        throw TypeError(".perfetto.protos.FtraceConfig.functionGraphRoots: array expected");
	                    m.functionGraphRoots = [];
	                    for (var i = 0; i < d.functionGraphRoots.length; ++i) {
	                        m.functionGraphRoots[i] = String(d.functionGraphRoots[i]);
	                    }
	                }
	                if (d.preserveFtraceBuffer != null) {
	                    m.preserveFtraceBuffer = Boolean(d.preserveFtraceBuffer);
	                }
	                if (d.useMonotonicRawClock != null) {
	                    m.useMonotonicRawClock = Boolean(d.useMonotonicRawClock);
	                }
	                if (d.instanceName != null) {
	                    m.instanceName = String(d.instanceName);
	                }
	                if (d.bufferSizeLowerBound != null) {
	                    m.bufferSizeLowerBound = Boolean(d.bufferSizeLowerBound);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FtraceConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FtraceConfig
	             * @static
	             * @param {perfetto.protos.FtraceConfig} m FtraceConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FtraceConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.ftraceEvents = [];
	                    d.atraceCategories = [];
	                    d.atraceApps = [];
	                    d.syscallEvents = [];
	                    d.functionFilters = [];
	                    d.functionGraphRoots = [];
	                    d.atraceCategoriesPreferSdk = [];
	                    d.kprobeEvents = [];
	                }
	                if (o.defaults) {
	                    d.bufferSizeKb = 0;
	                    d.drainPeriodMs = 0;
	                    d.compactSched = null;
	                    d.symbolizeKsyms = false;
	                    d.initializeKsymsSynchronouslyForTesting = false;
	                    d.throttleRssStat = false;
	                    d.disableGenericEvents = false;
	                    d.ksymsMemPolicy = o.enums === String ? "KSYMS_UNSPECIFIED" : 0;
	                    d.enableFunctionGraph = false;
	                    d.printFilter = null;
	                    d.preserveFtraceBuffer = false;
	                    d.useMonotonicRawClock = false;
	                    d.instanceName = "";
	                    d.bufferSizeLowerBound = false;
	                    d.drainBufferPercent = 0;
	                }
	                if (m.ftraceEvents && m.ftraceEvents.length) {
	                    d.ftraceEvents = [];
	                    for (var j = 0; j < m.ftraceEvents.length; ++j) {
	                        d.ftraceEvents[j] = m.ftraceEvents[j];
	                    }
	                }
	                if (m.atraceCategories && m.atraceCategories.length) {
	                    d.atraceCategories = [];
	                    for (var j = 0; j < m.atraceCategories.length; ++j) {
	                        d.atraceCategories[j] = m.atraceCategories[j];
	                    }
	                }
	                if (m.atraceApps && m.atraceApps.length) {
	                    d.atraceApps = [];
	                    for (var j = 0; j < m.atraceApps.length; ++j) {
	                        d.atraceApps[j] = m.atraceApps[j];
	                    }
	                }
	                if (m.bufferSizeKb != null && m.hasOwnProperty("bufferSizeKb")) {
	                    d.bufferSizeKb = m.bufferSizeKb;
	                }
	                if (m.drainPeriodMs != null && m.hasOwnProperty("drainPeriodMs")) {
	                    d.drainPeriodMs = m.drainPeriodMs;
	                }
	                if (m.compactSched != null && m.hasOwnProperty("compactSched")) {
	                    d.compactSched = $root.perfetto.protos.FtraceConfig.CompactSchedConfig.toObject(m.compactSched, o);
	                }
	                if (m.symbolizeKsyms != null && m.hasOwnProperty("symbolizeKsyms")) {
	                    d.symbolizeKsyms = m.symbolizeKsyms;
	                }
	                if (m.initializeKsymsSynchronouslyForTesting != null && m.hasOwnProperty("initializeKsymsSynchronouslyForTesting")) {
	                    d.initializeKsymsSynchronouslyForTesting = m.initializeKsymsSynchronouslyForTesting;
	                }
	                if (m.throttleRssStat != null && m.hasOwnProperty("throttleRssStat")) {
	                    d.throttleRssStat = m.throttleRssStat;
	                }
	                if (m.disableGenericEvents != null && m.hasOwnProperty("disableGenericEvents")) {
	                    d.disableGenericEvents = m.disableGenericEvents;
	                }
	                if (m.ksymsMemPolicy != null && m.hasOwnProperty("ksymsMemPolicy")) {
	                    d.ksymsMemPolicy = o.enums === String ? $root.perfetto.protos.FtraceConfig.KsymsMemPolicy[m.ksymsMemPolicy] === undefined ? m.ksymsMemPolicy : $root.perfetto.protos.FtraceConfig.KsymsMemPolicy[m.ksymsMemPolicy] : m.ksymsMemPolicy;
	                }
	                if (m.syscallEvents && m.syscallEvents.length) {
	                    d.syscallEvents = [];
	                    for (var j = 0; j < m.syscallEvents.length; ++j) {
	                        d.syscallEvents[j] = m.syscallEvents[j];
	                    }
	                }
	                if (m.enableFunctionGraph != null && m.hasOwnProperty("enableFunctionGraph")) {
	                    d.enableFunctionGraph = m.enableFunctionGraph;
	                }
	                if (m.functionFilters && m.functionFilters.length) {
	                    d.functionFilters = [];
	                    for (var j = 0; j < m.functionFilters.length; ++j) {
	                        d.functionFilters[j] = m.functionFilters[j];
	                    }
	                }
	                if (m.functionGraphRoots && m.functionGraphRoots.length) {
	                    d.functionGraphRoots = [];
	                    for (var j = 0; j < m.functionGraphRoots.length; ++j) {
	                        d.functionGraphRoots[j] = m.functionGraphRoots[j];
	                    }
	                }
	                if (m.printFilter != null && m.hasOwnProperty("printFilter")) {
	                    d.printFilter = $root.perfetto.protos.FtraceConfig.PrintFilter.toObject(m.printFilter, o);
	                }
	                if (m.preserveFtraceBuffer != null && m.hasOwnProperty("preserveFtraceBuffer")) {
	                    d.preserveFtraceBuffer = m.preserveFtraceBuffer;
	                }
	                if (m.useMonotonicRawClock != null && m.hasOwnProperty("useMonotonicRawClock")) {
	                    d.useMonotonicRawClock = m.useMonotonicRawClock;
	                }
	                if (m.instanceName != null && m.hasOwnProperty("instanceName")) {
	                    d.instanceName = m.instanceName;
	                }
	                if (m.bufferSizeLowerBound != null && m.hasOwnProperty("bufferSizeLowerBound")) {
	                    d.bufferSizeLowerBound = m.bufferSizeLowerBound;
	                }
	                if (m.atraceCategoriesPreferSdk && m.atraceCategoriesPreferSdk.length) {
	                    d.atraceCategoriesPreferSdk = [];
	                    for (var j = 0; j < m.atraceCategoriesPreferSdk.length; ++j) {
	                        d.atraceCategoriesPreferSdk[j] = m.atraceCategoriesPreferSdk[j];
	                    }
	                }
	                if (m.drainBufferPercent != null && m.hasOwnProperty("drainBufferPercent")) {
	                    d.drainBufferPercent = m.drainBufferPercent;
	                }
	                if (m.kprobeEvents && m.kprobeEvents.length) {
	                    d.kprobeEvents = [];
	                    for (var j = 0; j < m.kprobeEvents.length; ++j) {
	                        d.kprobeEvents[j] = $root.perfetto.protos.FtraceConfig.KprobeEvent.toObject(m.kprobeEvents[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this FtraceConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FtraceConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FtraceConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FtraceConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FtraceConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FtraceConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FtraceConfig";
	            };

	            FtraceConfig.KprobeEvent = (function() {

	                /**
	                 * Properties of a KprobeEvent.
	                 * @memberof perfetto.protos.FtraceConfig
	                 * @interface IKprobeEvent
	                 * @property {string|null} [probe] KprobeEvent probe
	                 * @property {perfetto.protos.FtraceConfig.KprobeEvent.KprobeType|null} [type] KprobeEvent type
	                 */

	                /**
	                 * Constructs a new KprobeEvent.
	                 * @memberof perfetto.protos.FtraceConfig
	                 * @classdesc Represents a KprobeEvent.
	                 * @implements IKprobeEvent
	                 * @constructor
	                 * @param {perfetto.protos.FtraceConfig.IKprobeEvent=} [p] Properties to set
	                 */
	                function KprobeEvent(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * KprobeEvent probe.
	                 * @member {string} probe
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @instance
	                 */
	                KprobeEvent.prototype.probe = "";

	                /**
	                 * KprobeEvent type.
	                 * @member {perfetto.protos.FtraceConfig.KprobeEvent.KprobeType} type
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @instance
	                 */
	                KprobeEvent.prototype.type = 0;

	                /**
	                 * Creates a new KprobeEvent instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.IKprobeEvent=} [properties] Properties to set
	                 * @returns {perfetto.protos.FtraceConfig.KprobeEvent} KprobeEvent instance
	                 */
	                KprobeEvent.create = function create(properties) {
	                    return new KprobeEvent(properties);
	                };

	                /**
	                 * Encodes the specified KprobeEvent message. Does not implicitly {@link perfetto.protos.FtraceConfig.KprobeEvent.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.IKprobeEvent} m KprobeEvent message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                KprobeEvent.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.probe != null && Object.hasOwnProperty.call(m, "probe"))
	                        w.uint32(10).string(m.probe);
	                    if (m.type != null && Object.hasOwnProperty.call(m, "type"))
	                        w.uint32(16).int32(m.type);
	                    return w;
	                };

	                /**
	                 * Decodes a KprobeEvent message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.FtraceConfig.KprobeEvent} KprobeEvent
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                KprobeEvent.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceConfig.KprobeEvent();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.probe = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.type = r.int32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a KprobeEvent message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.FtraceConfig.KprobeEvent} KprobeEvent
	                 */
	                KprobeEvent.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.FtraceConfig.KprobeEvent)
	                        return d;
	                    var m = new $root.perfetto.protos.FtraceConfig.KprobeEvent();
	                    if (d.probe != null) {
	                        m.probe = String(d.probe);
	                    }
	                    switch (d.type) {
	                    default:
	                        if (typeof d.type === "number") {
	                            m.type = d.type;
	                            break;
	                        }
	                        break;
	                    case "KPROBE_TYPE_UNKNOWN":
	                    case 0:
	                        m.type = 0;
	                        break;
	                    case "KPROBE_TYPE_KPROBE":
	                    case 1:
	                        m.type = 1;
	                        break;
	                    case "KPROBE_TYPE_KRETPROBE":
	                    case 2:
	                        m.type = 2;
	                        break;
	                    case "KPROBE_TYPE_BOTH":
	                    case 3:
	                        m.type = 3;
	                        break;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a KprobeEvent message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.KprobeEvent} m KprobeEvent
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                KprobeEvent.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.probe = "";
	                        d.type = o.enums === String ? "KPROBE_TYPE_UNKNOWN" : 0;
	                    }
	                    if (m.probe != null && m.hasOwnProperty("probe")) {
	                        d.probe = m.probe;
	                    }
	                    if (m.type != null && m.hasOwnProperty("type")) {
	                        d.type = o.enums === String ? $root.perfetto.protos.FtraceConfig.KprobeEvent.KprobeType[m.type] === undefined ? m.type : $root.perfetto.protos.FtraceConfig.KprobeEvent.KprobeType[m.type] : m.type;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this KprobeEvent to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                KprobeEvent.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for KprobeEvent
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.FtraceConfig.KprobeEvent
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                KprobeEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.FtraceConfig.KprobeEvent";
	                };

	                /**
	                 * KprobeType enum.
	                 * @name perfetto.protos.FtraceConfig.KprobeEvent.KprobeType
	                 * @enum {number}
	                 * @property {number} KPROBE_TYPE_UNKNOWN=0 KPROBE_TYPE_UNKNOWN value
	                 * @property {number} KPROBE_TYPE_KPROBE=1 KPROBE_TYPE_KPROBE value
	                 * @property {number} KPROBE_TYPE_KRETPROBE=2 KPROBE_TYPE_KRETPROBE value
	                 * @property {number} KPROBE_TYPE_BOTH=3 KPROBE_TYPE_BOTH value
	                 */
	                KprobeEvent.KprobeType = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[0] = "KPROBE_TYPE_UNKNOWN"] = 0;
	                    values[valuesById[1] = "KPROBE_TYPE_KPROBE"] = 1;
	                    values[valuesById[2] = "KPROBE_TYPE_KRETPROBE"] = 2;
	                    values[valuesById[3] = "KPROBE_TYPE_BOTH"] = 3;
	                    return values;
	                })();

	                return KprobeEvent;
	            })();

	            FtraceConfig.CompactSchedConfig = (function() {

	                /**
	                 * Properties of a CompactSchedConfig.
	                 * @memberof perfetto.protos.FtraceConfig
	                 * @interface ICompactSchedConfig
	                 * @property {boolean|null} [enabled] CompactSchedConfig enabled
	                 */

	                /**
	                 * Constructs a new CompactSchedConfig.
	                 * @memberof perfetto.protos.FtraceConfig
	                 * @classdesc Represents a CompactSchedConfig.
	                 * @implements ICompactSchedConfig
	                 * @constructor
	                 * @param {perfetto.protos.FtraceConfig.ICompactSchedConfig=} [p] Properties to set
	                 */
	                function CompactSchedConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * CompactSchedConfig enabled.
	                 * @member {boolean} enabled
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @instance
	                 */
	                CompactSchedConfig.prototype.enabled = false;

	                /**
	                 * Creates a new CompactSchedConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.ICompactSchedConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.FtraceConfig.CompactSchedConfig} CompactSchedConfig instance
	                 */
	                CompactSchedConfig.create = function create(properties) {
	                    return new CompactSchedConfig(properties);
	                };

	                /**
	                 * Encodes the specified CompactSchedConfig message. Does not implicitly {@link perfetto.protos.FtraceConfig.CompactSchedConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.ICompactSchedConfig} m CompactSchedConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                CompactSchedConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.enabled != null && Object.hasOwnProperty.call(m, "enabled"))
	                        w.uint32(8).bool(m.enabled);
	                    return w;
	                };

	                /**
	                 * Decodes a CompactSchedConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.FtraceConfig.CompactSchedConfig} CompactSchedConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                CompactSchedConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceConfig.CompactSchedConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.enabled = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a CompactSchedConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.FtraceConfig.CompactSchedConfig} CompactSchedConfig
	                 */
	                CompactSchedConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.FtraceConfig.CompactSchedConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.FtraceConfig.CompactSchedConfig();
	                    if (d.enabled != null) {
	                        m.enabled = Boolean(d.enabled);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a CompactSchedConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.CompactSchedConfig} m CompactSchedConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                CompactSchedConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.enabled = false;
	                    }
	                    if (m.enabled != null && m.hasOwnProperty("enabled")) {
	                        d.enabled = m.enabled;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this CompactSchedConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                CompactSchedConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for CompactSchedConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.FtraceConfig.CompactSchedConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                CompactSchedConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.FtraceConfig.CompactSchedConfig";
	                };

	                return CompactSchedConfig;
	            })();

	            FtraceConfig.PrintFilter = (function() {

	                /**
	                 * Properties of a PrintFilter.
	                 * @memberof perfetto.protos.FtraceConfig
	                 * @interface IPrintFilter
	                 * @property {Array.<perfetto.protos.FtraceConfig.PrintFilter.IRule>|null} [rules] PrintFilter rules
	                 */

	                /**
	                 * Constructs a new PrintFilter.
	                 * @memberof perfetto.protos.FtraceConfig
	                 * @classdesc Represents a PrintFilter.
	                 * @implements IPrintFilter
	                 * @constructor
	                 * @param {perfetto.protos.FtraceConfig.IPrintFilter=} [p] Properties to set
	                 */
	                function PrintFilter(p) {
	                    this.rules = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * PrintFilter rules.
	                 * @member {Array.<perfetto.protos.FtraceConfig.PrintFilter.IRule>} rules
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @instance
	                 */
	                PrintFilter.prototype.rules = $util.emptyArray;

	                /**
	                 * Creates a new PrintFilter instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.IPrintFilter=} [properties] Properties to set
	                 * @returns {perfetto.protos.FtraceConfig.PrintFilter} PrintFilter instance
	                 */
	                PrintFilter.create = function create(properties) {
	                    return new PrintFilter(properties);
	                };

	                /**
	                 * Encodes the specified PrintFilter message. Does not implicitly {@link perfetto.protos.FtraceConfig.PrintFilter.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.IPrintFilter} m PrintFilter message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                PrintFilter.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.rules != null && m.rules.length) {
	                        for (var i = 0; i < m.rules.length; ++i)
	                            $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.encode(m.rules[i], w.uint32(10).fork()).ldelim();
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a PrintFilter message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.FtraceConfig.PrintFilter} PrintFilter
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                PrintFilter.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceConfig.PrintFilter();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                if (!(m.rules && m.rules.length))
	                                    m.rules = [];
	                                m.rules.push($root.perfetto.protos.FtraceConfig.PrintFilter.Rule.decode(r, r.uint32()));
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a PrintFilter message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.FtraceConfig.PrintFilter} PrintFilter
	                 */
	                PrintFilter.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.FtraceConfig.PrintFilter)
	                        return d;
	                    var m = new $root.perfetto.protos.FtraceConfig.PrintFilter();
	                    if (d.rules) {
	                        if (!Array.isArray(d.rules))
	                            throw TypeError(".perfetto.protos.FtraceConfig.PrintFilter.rules: array expected");
	                        m.rules = [];
	                        for (var i = 0; i < d.rules.length; ++i) {
	                            if (typeof d.rules[i] !== "object")
	                                throw TypeError(".perfetto.protos.FtraceConfig.PrintFilter.rules: object expected");
	                            m.rules[i] = $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.fromObject(d.rules[i]);
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a PrintFilter message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @static
	                 * @param {perfetto.protos.FtraceConfig.PrintFilter} m PrintFilter
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                PrintFilter.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.rules = [];
	                    }
	                    if (m.rules && m.rules.length) {
	                        d.rules = [];
	                        for (var j = 0; j < m.rules.length; ++j) {
	                            d.rules[j] = $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.toObject(m.rules[j], o);
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this PrintFilter to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                PrintFilter.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for PrintFilter
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                PrintFilter.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.FtraceConfig.PrintFilter";
	                };

	                PrintFilter.Rule = (function() {

	                    /**
	                     * Properties of a Rule.
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                     * @interface IRule
	                     * @property {string|null} [prefix] Rule prefix
	                     * @property {perfetto.protos.FtraceConfig.PrintFilter.Rule.IAtraceMessage|null} [atraceMsg] Rule atraceMsg
	                     * @property {boolean|null} [allow] Rule allow
	                     */

	                    /**
	                     * Constructs a new Rule.
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter
	                     * @classdesc Represents a Rule.
	                     * @implements IRule
	                     * @constructor
	                     * @param {perfetto.protos.FtraceConfig.PrintFilter.IRule=} [p] Properties to set
	                     */
	                    function Rule(p) {
	                        if (p)
	                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                                if (p[ks[i]] != null)
	                                    this[ks[i]] = p[ks[i]];
	                    }

	                    /**
	                     * Rule prefix.
	                     * @member {string|null|undefined} prefix
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @instance
	                     */
	                    Rule.prototype.prefix = null;

	                    /**
	                     * Rule atraceMsg.
	                     * @member {perfetto.protos.FtraceConfig.PrintFilter.Rule.IAtraceMessage|null|undefined} atraceMsg
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @instance
	                     */
	                    Rule.prototype.atraceMsg = null;

	                    /**
	                     * Rule allow.
	                     * @member {boolean} allow
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @instance
	                     */
	                    Rule.prototype.allow = false;

	                    // OneOf field names bound to virtual getters and setters
	                    var $oneOfFields;

	                    /**
	                     * Rule match.
	                     * @member {"prefix"|"atraceMsg"|undefined} match
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @instance
	                     */
	                    Object.defineProperty(Rule.prototype, "match", {
	                        get: $util.oneOfGetter($oneOfFields = ["prefix", "atraceMsg"]),
	                        set: $util.oneOfSetter($oneOfFields)
	                    });

	                    /**
	                     * Creates a new Rule instance using the specified properties.
	                     * @function create
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @static
	                     * @param {perfetto.protos.FtraceConfig.PrintFilter.IRule=} [properties] Properties to set
	                     * @returns {perfetto.protos.FtraceConfig.PrintFilter.Rule} Rule instance
	                     */
	                    Rule.create = function create(properties) {
	                        return new Rule(properties);
	                    };

	                    /**
	                     * Encodes the specified Rule message. Does not implicitly {@link perfetto.protos.FtraceConfig.PrintFilter.Rule.verify|verify} messages.
	                     * @function encode
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @static
	                     * @param {perfetto.protos.FtraceConfig.PrintFilter.IRule} m Rule message or plain object to encode
	                     * @param {$protobuf.Writer} [w] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    Rule.encode = function encode(m, w) {
	                        if (!w)
	                            w = $Writer.create();
	                        if (m.prefix != null && Object.hasOwnProperty.call(m, "prefix"))
	                            w.uint32(10).string(m.prefix);
	                        if (m.allow != null && Object.hasOwnProperty.call(m, "allow"))
	                            w.uint32(16).bool(m.allow);
	                        if (m.atraceMsg != null && Object.hasOwnProperty.call(m, "atraceMsg"))
	                            $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.encode(m.atraceMsg, w.uint32(26).fork()).ldelim();
	                        return w;
	                    };

	                    /**
	                     * Decodes a Rule message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                     * @param {number} [l] Message length if known beforehand
	                     * @returns {perfetto.protos.FtraceConfig.PrintFilter.Rule} Rule
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    Rule.decode = function decode(r, l) {
	                        if (!(r instanceof $Reader))
	                            r = $Reader.create(r);
	                        var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceConfig.PrintFilter.Rule();
	                        while (r.pos < c) {
	                            var t = r.uint32();
	                            switch (t >>> 3) {
	                            case 1: {
	                                    m.prefix = r.string();
	                                    break;
	                                }
	                            case 3: {
	                                    m.atraceMsg = $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.decode(r, r.uint32());
	                                    break;
	                                }
	                            case 2: {
	                                    m.allow = r.bool();
	                                    break;
	                                }
	                            default:
	                                r.skipType(t & 7);
	                                break;
	                            }
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a Rule message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @static
	                     * @param {Object.<string,*>} d Plain object
	                     * @returns {perfetto.protos.FtraceConfig.PrintFilter.Rule} Rule
	                     */
	                    Rule.fromObject = function fromObject(d) {
	                        if (d instanceof $root.perfetto.protos.FtraceConfig.PrintFilter.Rule)
	                            return d;
	                        var m = new $root.perfetto.protos.FtraceConfig.PrintFilter.Rule();
	                        if (d.prefix != null) {
	                            m.prefix = String(d.prefix);
	                        }
	                        if (d.atraceMsg != null) {
	                            if (typeof d.atraceMsg !== "object")
	                                throw TypeError(".perfetto.protos.FtraceConfig.PrintFilter.Rule.atraceMsg: object expected");
	                            m.atraceMsg = $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.fromObject(d.atraceMsg);
	                        }
	                        if (d.allow != null) {
	                            m.allow = Boolean(d.allow);
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a plain object from a Rule message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @static
	                     * @param {perfetto.protos.FtraceConfig.PrintFilter.Rule} m Rule
	                     * @param {$protobuf.IConversionOptions} [o] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    Rule.toObject = function toObject(m, o) {
	                        if (!o)
	                            o = {};
	                        var d = {};
	                        if (o.defaults) {
	                            d.allow = false;
	                        }
	                        if (m.prefix != null && m.hasOwnProperty("prefix")) {
	                            d.prefix = m.prefix;
	                            if (o.oneofs)
	                                d.match = "prefix";
	                        }
	                        if (m.allow != null && m.hasOwnProperty("allow")) {
	                            d.allow = m.allow;
	                        }
	                        if (m.atraceMsg != null && m.hasOwnProperty("atraceMsg")) {
	                            d.atraceMsg = $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.toObject(m.atraceMsg, o);
	                            if (o.oneofs)
	                                d.match = "atraceMsg";
	                        }
	                        return d;
	                    };

	                    /**
	                     * Converts this Rule to JSON.
	                     * @function toJSON
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    Rule.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                    };

	                    /**
	                     * Gets the default type url for Rule
	                     * @function getTypeUrl
	                     * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                     * @static
	                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                     * @returns {string} The default type url
	                     */
	                    Rule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                        if (typeUrlPrefix === undefined) {
	                            typeUrlPrefix = "type.googleapis.com";
	                        }
	                        return typeUrlPrefix + "/perfetto.protos.FtraceConfig.PrintFilter.Rule";
	                    };

	                    Rule.AtraceMessage = (function() {

	                        /**
	                         * Properties of an AtraceMessage.
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                         * @interface IAtraceMessage
	                         * @property {string|null} [type] AtraceMessage type
	                         * @property {string|null} [prefix] AtraceMessage prefix
	                         */

	                        /**
	                         * Constructs a new AtraceMessage.
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule
	                         * @classdesc Represents an AtraceMessage.
	                         * @implements IAtraceMessage
	                         * @constructor
	                         * @param {perfetto.protos.FtraceConfig.PrintFilter.Rule.IAtraceMessage=} [p] Properties to set
	                         */
	                        function AtraceMessage(p) {
	                            if (p)
	                                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                                    if (p[ks[i]] != null)
	                                        this[ks[i]] = p[ks[i]];
	                        }

	                        /**
	                         * AtraceMessage type.
	                         * @member {string} type
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @instance
	                         */
	                        AtraceMessage.prototype.type = "";

	                        /**
	                         * AtraceMessage prefix.
	                         * @member {string} prefix
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @instance
	                         */
	                        AtraceMessage.prototype.prefix = "";

	                        /**
	                         * Creates a new AtraceMessage instance using the specified properties.
	                         * @function create
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @static
	                         * @param {perfetto.protos.FtraceConfig.PrintFilter.Rule.IAtraceMessage=} [properties] Properties to set
	                         * @returns {perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage} AtraceMessage instance
	                         */
	                        AtraceMessage.create = function create(properties) {
	                            return new AtraceMessage(properties);
	                        };

	                        /**
	                         * Encodes the specified AtraceMessage message. Does not implicitly {@link perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage.verify|verify} messages.
	                         * @function encode
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @static
	                         * @param {perfetto.protos.FtraceConfig.PrintFilter.Rule.IAtraceMessage} m AtraceMessage message or plain object to encode
	                         * @param {$protobuf.Writer} [w] Writer to encode to
	                         * @returns {$protobuf.Writer} Writer
	                         */
	                        AtraceMessage.encode = function encode(m, w) {
	                            if (!w)
	                                w = $Writer.create();
	                            if (m.type != null && Object.hasOwnProperty.call(m, "type"))
	                                w.uint32(10).string(m.type);
	                            if (m.prefix != null && Object.hasOwnProperty.call(m, "prefix"))
	                                w.uint32(18).string(m.prefix);
	                            return w;
	                        };

	                        /**
	                         * Decodes an AtraceMessage message from the specified reader or buffer.
	                         * @function decode
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @static
	                         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                         * @param {number} [l] Message length if known beforehand
	                         * @returns {perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage} AtraceMessage
	                         * @throws {Error} If the payload is not a reader or valid buffer
	                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                         */
	                        AtraceMessage.decode = function decode(r, l) {
	                            if (!(r instanceof $Reader))
	                                r = $Reader.create(r);
	                            var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage();
	                            while (r.pos < c) {
	                                var t = r.uint32();
	                                switch (t >>> 3) {
	                                case 1: {
	                                        m.type = r.string();
	                                        break;
	                                    }
	                                case 2: {
	                                        m.prefix = r.string();
	                                        break;
	                                    }
	                                default:
	                                    r.skipType(t & 7);
	                                    break;
	                                }
	                            }
	                            return m;
	                        };

	                        /**
	                         * Creates an AtraceMessage message from a plain object. Also converts values to their respective internal types.
	                         * @function fromObject
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @static
	                         * @param {Object.<string,*>} d Plain object
	                         * @returns {perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage} AtraceMessage
	                         */
	                        AtraceMessage.fromObject = function fromObject(d) {
	                            if (d instanceof $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage)
	                                return d;
	                            var m = new $root.perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage();
	                            if (d.type != null) {
	                                m.type = String(d.type);
	                            }
	                            if (d.prefix != null) {
	                                m.prefix = String(d.prefix);
	                            }
	                            return m;
	                        };

	                        /**
	                         * Creates a plain object from an AtraceMessage message. Also converts values to other types if specified.
	                         * @function toObject
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @static
	                         * @param {perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage} m AtraceMessage
	                         * @param {$protobuf.IConversionOptions} [o] Conversion options
	                         * @returns {Object.<string,*>} Plain object
	                         */
	                        AtraceMessage.toObject = function toObject(m, o) {
	                            if (!o)
	                                o = {};
	                            var d = {};
	                            if (o.defaults) {
	                                d.type = "";
	                                d.prefix = "";
	                            }
	                            if (m.type != null && m.hasOwnProperty("type")) {
	                                d.type = m.type;
	                            }
	                            if (m.prefix != null && m.hasOwnProperty("prefix")) {
	                                d.prefix = m.prefix;
	                            }
	                            return d;
	                        };

	                        /**
	                         * Converts this AtraceMessage to JSON.
	                         * @function toJSON
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @instance
	                         * @returns {Object.<string,*>} JSON object
	                         */
	                        AtraceMessage.prototype.toJSON = function toJSON() {
	                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                        };

	                        /**
	                         * Gets the default type url for AtraceMessage
	                         * @function getTypeUrl
	                         * @memberof perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage
	                         * @static
	                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                         * @returns {string} The default type url
	                         */
	                        AtraceMessage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                            if (typeUrlPrefix === undefined) {
	                                typeUrlPrefix = "type.googleapis.com";
	                            }
	                            return typeUrlPrefix + "/perfetto.protos.FtraceConfig.PrintFilter.Rule.AtraceMessage";
	                        };

	                        return AtraceMessage;
	                    })();

	                    return Rule;
	                })();

	                return PrintFilter;
	            })();

	            /**
	             * KsymsMemPolicy enum.
	             * @name perfetto.protos.FtraceConfig.KsymsMemPolicy
	             * @enum {number}
	             * @property {number} KSYMS_UNSPECIFIED=0 KSYMS_UNSPECIFIED value
	             * @property {number} KSYMS_CLEANUP_ON_STOP=1 KSYMS_CLEANUP_ON_STOP value
	             * @property {number} KSYMS_RETAIN=2 KSYMS_RETAIN value
	             */
	            FtraceConfig.KsymsMemPolicy = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "KSYMS_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "KSYMS_CLEANUP_ON_STOP"] = 1;
	                values[valuesById[2] = "KSYMS_RETAIN"] = 2;
	                return values;
	            })();

	            return FtraceConfig;
	        })();

	        protos.GpuCounterConfig = (function() {

	            /**
	             * Properties of a GpuCounterConfig.
	             * @memberof perfetto.protos
	             * @interface IGpuCounterConfig
	             * @property {number|null} [counterPeriodNs] GpuCounterConfig counterPeriodNs
	             * @property {Array.<number>|null} [counterIds] GpuCounterConfig counterIds
	             * @property {boolean|null} [instrumentedSampling] GpuCounterConfig instrumentedSampling
	             * @property {boolean|null} [fixGpuClock] GpuCounterConfig fixGpuClock
	             */

	            /**
	             * Constructs a new GpuCounterConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a GpuCounterConfig.
	             * @implements IGpuCounterConfig
	             * @constructor
	             * @param {perfetto.protos.IGpuCounterConfig=} [p] Properties to set
	             */
	            function GpuCounterConfig(p) {
	                this.counterIds = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * GpuCounterConfig counterPeriodNs.
	             * @member {number} counterPeriodNs
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @instance
	             */
	            GpuCounterConfig.prototype.counterPeriodNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * GpuCounterConfig counterIds.
	             * @member {Array.<number>} counterIds
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @instance
	             */
	            GpuCounterConfig.prototype.counterIds = $util.emptyArray;

	            /**
	             * GpuCounterConfig instrumentedSampling.
	             * @member {boolean} instrumentedSampling
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @instance
	             */
	            GpuCounterConfig.prototype.instrumentedSampling = false;

	            /**
	             * GpuCounterConfig fixGpuClock.
	             * @member {boolean} fixGpuClock
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @instance
	             */
	            GpuCounterConfig.prototype.fixGpuClock = false;

	            /**
	             * Creates a new GpuCounterConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @static
	             * @param {perfetto.protos.IGpuCounterConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.GpuCounterConfig} GpuCounterConfig instance
	             */
	            GpuCounterConfig.create = function create(properties) {
	                return new GpuCounterConfig(properties);
	            };

	            /**
	             * Encodes the specified GpuCounterConfig message. Does not implicitly {@link perfetto.protos.GpuCounterConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @static
	             * @param {perfetto.protos.IGpuCounterConfig} m GpuCounterConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            GpuCounterConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.counterPeriodNs != null && Object.hasOwnProperty.call(m, "counterPeriodNs"))
	                    w.uint32(8).uint64(m.counterPeriodNs);
	                if (m.counterIds != null && m.counterIds.length) {
	                    for (var i = 0; i < m.counterIds.length; ++i)
	                        w.uint32(16).uint32(m.counterIds[i]);
	                }
	                if (m.instrumentedSampling != null && Object.hasOwnProperty.call(m, "instrumentedSampling"))
	                    w.uint32(24).bool(m.instrumentedSampling);
	                if (m.fixGpuClock != null && Object.hasOwnProperty.call(m, "fixGpuClock"))
	                    w.uint32(32).bool(m.fixGpuClock);
	                return w;
	            };

	            /**
	             * Decodes a GpuCounterConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.GpuCounterConfig} GpuCounterConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            GpuCounterConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.GpuCounterConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.counterPeriodNs = r.uint64();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.counterIds && m.counterIds.length))
	                                m.counterIds = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.counterIds.push(r.uint32());
	                            } else
	                                m.counterIds.push(r.uint32());
	                            break;
	                        }
	                    case 3: {
	                            m.instrumentedSampling = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.fixGpuClock = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a GpuCounterConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.GpuCounterConfig} GpuCounterConfig
	             */
	            GpuCounterConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.GpuCounterConfig)
	                    return d;
	                var m = new $root.perfetto.protos.GpuCounterConfig();
	                if (d.counterPeriodNs != null) {
	                    if ($util.Long)
	                        (m.counterPeriodNs = $util.Long.fromValue(d.counterPeriodNs)).unsigned = true;
	                    else if (typeof d.counterPeriodNs === "string")
	                        m.counterPeriodNs = parseInt(d.counterPeriodNs, 10);
	                    else if (typeof d.counterPeriodNs === "number")
	                        m.counterPeriodNs = d.counterPeriodNs;
	                    else if (typeof d.counterPeriodNs === "object")
	                        m.counterPeriodNs = new $util.LongBits(d.counterPeriodNs.low >>> 0, d.counterPeriodNs.high >>> 0).toNumber(true);
	                }
	                if (d.counterIds) {
	                    if (!Array.isArray(d.counterIds))
	                        throw TypeError(".perfetto.protos.GpuCounterConfig.counterIds: array expected");
	                    m.counterIds = [];
	                    for (var i = 0; i < d.counterIds.length; ++i) {
	                        m.counterIds[i] = d.counterIds[i] >>> 0;
	                    }
	                }
	                if (d.instrumentedSampling != null) {
	                    m.instrumentedSampling = Boolean(d.instrumentedSampling);
	                }
	                if (d.fixGpuClock != null) {
	                    m.fixGpuClock = Boolean(d.fixGpuClock);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a GpuCounterConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @static
	             * @param {perfetto.protos.GpuCounterConfig} m GpuCounterConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            GpuCounterConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.counterIds = [];
	                }
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.counterPeriodNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.counterPeriodNs = o.longs === String ? "0" : 0;
	                    d.instrumentedSampling = false;
	                    d.fixGpuClock = false;
	                }
	                if (m.counterPeriodNs != null && m.hasOwnProperty("counterPeriodNs")) {
	                    if (typeof m.counterPeriodNs === "number")
	                        d.counterPeriodNs = o.longs === String ? String(m.counterPeriodNs) : m.counterPeriodNs;
	                    else
	                        d.counterPeriodNs = o.longs === String ? $util.Long.prototype.toString.call(m.counterPeriodNs) : o.longs === Number ? new $util.LongBits(m.counterPeriodNs.low >>> 0, m.counterPeriodNs.high >>> 0).toNumber(true) : m.counterPeriodNs;
	                }
	                if (m.counterIds && m.counterIds.length) {
	                    d.counterIds = [];
	                    for (var j = 0; j < m.counterIds.length; ++j) {
	                        d.counterIds[j] = m.counterIds[j];
	                    }
	                }
	                if (m.instrumentedSampling != null && m.hasOwnProperty("instrumentedSampling")) {
	                    d.instrumentedSampling = m.instrumentedSampling;
	                }
	                if (m.fixGpuClock != null && m.hasOwnProperty("fixGpuClock")) {
	                    d.fixGpuClock = m.fixGpuClock;
	                }
	                return d;
	            };

	            /**
	             * Converts this GpuCounterConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            GpuCounterConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for GpuCounterConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.GpuCounterConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            GpuCounterConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.GpuCounterConfig";
	            };

	            return GpuCounterConfig;
	        })();

	        protos.VulkanMemoryConfig = (function() {

	            /**
	             * Properties of a VulkanMemoryConfig.
	             * @memberof perfetto.protos
	             * @interface IVulkanMemoryConfig
	             * @property {boolean|null} [trackDriverMemoryUsage] VulkanMemoryConfig trackDriverMemoryUsage
	             * @property {boolean|null} [trackDeviceMemoryUsage] VulkanMemoryConfig trackDeviceMemoryUsage
	             */

	            /**
	             * Constructs a new VulkanMemoryConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a VulkanMemoryConfig.
	             * @implements IVulkanMemoryConfig
	             * @constructor
	             * @param {perfetto.protos.IVulkanMemoryConfig=} [p] Properties to set
	             */
	            function VulkanMemoryConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * VulkanMemoryConfig trackDriverMemoryUsage.
	             * @member {boolean} trackDriverMemoryUsage
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @instance
	             */
	            VulkanMemoryConfig.prototype.trackDriverMemoryUsage = false;

	            /**
	             * VulkanMemoryConfig trackDeviceMemoryUsage.
	             * @member {boolean} trackDeviceMemoryUsage
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @instance
	             */
	            VulkanMemoryConfig.prototype.trackDeviceMemoryUsage = false;

	            /**
	             * Creates a new VulkanMemoryConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @static
	             * @param {perfetto.protos.IVulkanMemoryConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.VulkanMemoryConfig} VulkanMemoryConfig instance
	             */
	            VulkanMemoryConfig.create = function create(properties) {
	                return new VulkanMemoryConfig(properties);
	            };

	            /**
	             * Encodes the specified VulkanMemoryConfig message. Does not implicitly {@link perfetto.protos.VulkanMemoryConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @static
	             * @param {perfetto.protos.IVulkanMemoryConfig} m VulkanMemoryConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            VulkanMemoryConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.trackDriverMemoryUsage != null && Object.hasOwnProperty.call(m, "trackDriverMemoryUsage"))
	                    w.uint32(8).bool(m.trackDriverMemoryUsage);
	                if (m.trackDeviceMemoryUsage != null && Object.hasOwnProperty.call(m, "trackDeviceMemoryUsage"))
	                    w.uint32(16).bool(m.trackDeviceMemoryUsage);
	                return w;
	            };

	            /**
	             * Decodes a VulkanMemoryConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.VulkanMemoryConfig} VulkanMemoryConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            VulkanMemoryConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.VulkanMemoryConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.trackDriverMemoryUsage = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            m.trackDeviceMemoryUsage = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a VulkanMemoryConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.VulkanMemoryConfig} VulkanMemoryConfig
	             */
	            VulkanMemoryConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.VulkanMemoryConfig)
	                    return d;
	                var m = new $root.perfetto.protos.VulkanMemoryConfig();
	                if (d.trackDriverMemoryUsage != null) {
	                    m.trackDriverMemoryUsage = Boolean(d.trackDriverMemoryUsage);
	                }
	                if (d.trackDeviceMemoryUsage != null) {
	                    m.trackDeviceMemoryUsage = Boolean(d.trackDeviceMemoryUsage);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a VulkanMemoryConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @static
	             * @param {perfetto.protos.VulkanMemoryConfig} m VulkanMemoryConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            VulkanMemoryConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.trackDriverMemoryUsage = false;
	                    d.trackDeviceMemoryUsage = false;
	                }
	                if (m.trackDriverMemoryUsage != null && m.hasOwnProperty("trackDriverMemoryUsage")) {
	                    d.trackDriverMemoryUsage = m.trackDriverMemoryUsage;
	                }
	                if (m.trackDeviceMemoryUsage != null && m.hasOwnProperty("trackDeviceMemoryUsage")) {
	                    d.trackDeviceMemoryUsage = m.trackDeviceMemoryUsage;
	                }
	                return d;
	            };

	            /**
	             * Converts this VulkanMemoryConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            VulkanMemoryConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for VulkanMemoryConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.VulkanMemoryConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            VulkanMemoryConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.VulkanMemoryConfig";
	            };

	            return VulkanMemoryConfig;
	        })();

	        protos.InodeFileConfig = (function() {

	            /**
	             * Properties of an InodeFileConfig.
	             * @memberof perfetto.protos
	             * @interface IInodeFileConfig
	             * @property {number|null} [scanIntervalMs] InodeFileConfig scanIntervalMs
	             * @property {number|null} [scanDelayMs] InodeFileConfig scanDelayMs
	             * @property {number|null} [scanBatchSize] InodeFileConfig scanBatchSize
	             * @property {boolean|null} [doNotScan] InodeFileConfig doNotScan
	             * @property {Array.<string>|null} [scanMountPoints] InodeFileConfig scanMountPoints
	             * @property {Array.<perfetto.protos.InodeFileConfig.IMountPointMappingEntry>|null} [mountPointMapping] InodeFileConfig mountPointMapping
	             */

	            /**
	             * Constructs a new InodeFileConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an InodeFileConfig.
	             * @implements IInodeFileConfig
	             * @constructor
	             * @param {perfetto.protos.IInodeFileConfig=} [p] Properties to set
	             */
	            function InodeFileConfig(p) {
	                this.scanMountPoints = [];
	                this.mountPointMapping = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * InodeFileConfig scanIntervalMs.
	             * @member {number} scanIntervalMs
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             */
	            InodeFileConfig.prototype.scanIntervalMs = 0;

	            /**
	             * InodeFileConfig scanDelayMs.
	             * @member {number} scanDelayMs
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             */
	            InodeFileConfig.prototype.scanDelayMs = 0;

	            /**
	             * InodeFileConfig scanBatchSize.
	             * @member {number} scanBatchSize
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             */
	            InodeFileConfig.prototype.scanBatchSize = 0;

	            /**
	             * InodeFileConfig doNotScan.
	             * @member {boolean} doNotScan
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             */
	            InodeFileConfig.prototype.doNotScan = false;

	            /**
	             * InodeFileConfig scanMountPoints.
	             * @member {Array.<string>} scanMountPoints
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             */
	            InodeFileConfig.prototype.scanMountPoints = $util.emptyArray;

	            /**
	             * InodeFileConfig mountPointMapping.
	             * @member {Array.<perfetto.protos.InodeFileConfig.IMountPointMappingEntry>} mountPointMapping
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             */
	            InodeFileConfig.prototype.mountPointMapping = $util.emptyArray;

	            /**
	             * Creates a new InodeFileConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.InodeFileConfig
	             * @static
	             * @param {perfetto.protos.IInodeFileConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.InodeFileConfig} InodeFileConfig instance
	             */
	            InodeFileConfig.create = function create(properties) {
	                return new InodeFileConfig(properties);
	            };

	            /**
	             * Encodes the specified InodeFileConfig message. Does not implicitly {@link perfetto.protos.InodeFileConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.InodeFileConfig
	             * @static
	             * @param {perfetto.protos.IInodeFileConfig} m InodeFileConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            InodeFileConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.scanIntervalMs != null && Object.hasOwnProperty.call(m, "scanIntervalMs"))
	                    w.uint32(8).uint32(m.scanIntervalMs);
	                if (m.scanDelayMs != null && Object.hasOwnProperty.call(m, "scanDelayMs"))
	                    w.uint32(16).uint32(m.scanDelayMs);
	                if (m.scanBatchSize != null && Object.hasOwnProperty.call(m, "scanBatchSize"))
	                    w.uint32(24).uint32(m.scanBatchSize);
	                if (m.doNotScan != null && Object.hasOwnProperty.call(m, "doNotScan"))
	                    w.uint32(32).bool(m.doNotScan);
	                if (m.scanMountPoints != null && m.scanMountPoints.length) {
	                    for (var i = 0; i < m.scanMountPoints.length; ++i)
	                        w.uint32(42).string(m.scanMountPoints[i]);
	                }
	                if (m.mountPointMapping != null && m.mountPointMapping.length) {
	                    for (var i = 0; i < m.mountPointMapping.length; ++i)
	                        $root.perfetto.protos.InodeFileConfig.MountPointMappingEntry.encode(m.mountPointMapping[i], w.uint32(50).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes an InodeFileConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.InodeFileConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.InodeFileConfig} InodeFileConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            InodeFileConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.InodeFileConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.scanIntervalMs = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            m.scanDelayMs = r.uint32();
	                            break;
	                        }
	                    case 3: {
	                            m.scanBatchSize = r.uint32();
	                            break;
	                        }
	                    case 4: {
	                            m.doNotScan = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            if (!(m.scanMountPoints && m.scanMountPoints.length))
	                                m.scanMountPoints = [];
	                            m.scanMountPoints.push(r.string());
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.mountPointMapping && m.mountPointMapping.length))
	                                m.mountPointMapping = [];
	                            m.mountPointMapping.push($root.perfetto.protos.InodeFileConfig.MountPointMappingEntry.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an InodeFileConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.InodeFileConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.InodeFileConfig} InodeFileConfig
	             */
	            InodeFileConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.InodeFileConfig)
	                    return d;
	                var m = new $root.perfetto.protos.InodeFileConfig();
	                if (d.scanIntervalMs != null) {
	                    m.scanIntervalMs = d.scanIntervalMs >>> 0;
	                }
	                if (d.scanDelayMs != null) {
	                    m.scanDelayMs = d.scanDelayMs >>> 0;
	                }
	                if (d.scanBatchSize != null) {
	                    m.scanBatchSize = d.scanBatchSize >>> 0;
	                }
	                if (d.doNotScan != null) {
	                    m.doNotScan = Boolean(d.doNotScan);
	                }
	                if (d.scanMountPoints) {
	                    if (!Array.isArray(d.scanMountPoints))
	                        throw TypeError(".perfetto.protos.InodeFileConfig.scanMountPoints: array expected");
	                    m.scanMountPoints = [];
	                    for (var i = 0; i < d.scanMountPoints.length; ++i) {
	                        m.scanMountPoints[i] = String(d.scanMountPoints[i]);
	                    }
	                }
	                if (d.mountPointMapping) {
	                    if (!Array.isArray(d.mountPointMapping))
	                        throw TypeError(".perfetto.protos.InodeFileConfig.mountPointMapping: array expected");
	                    m.mountPointMapping = [];
	                    for (var i = 0; i < d.mountPointMapping.length; ++i) {
	                        if (typeof d.mountPointMapping[i] !== "object")
	                            throw TypeError(".perfetto.protos.InodeFileConfig.mountPointMapping: object expected");
	                        m.mountPointMapping[i] = $root.perfetto.protos.InodeFileConfig.MountPointMappingEntry.fromObject(d.mountPointMapping[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an InodeFileConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.InodeFileConfig
	             * @static
	             * @param {perfetto.protos.InodeFileConfig} m InodeFileConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            InodeFileConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.scanMountPoints = [];
	                    d.mountPointMapping = [];
	                }
	                if (o.defaults) {
	                    d.scanIntervalMs = 0;
	                    d.scanDelayMs = 0;
	                    d.scanBatchSize = 0;
	                    d.doNotScan = false;
	                }
	                if (m.scanIntervalMs != null && m.hasOwnProperty("scanIntervalMs")) {
	                    d.scanIntervalMs = m.scanIntervalMs;
	                }
	                if (m.scanDelayMs != null && m.hasOwnProperty("scanDelayMs")) {
	                    d.scanDelayMs = m.scanDelayMs;
	                }
	                if (m.scanBatchSize != null && m.hasOwnProperty("scanBatchSize")) {
	                    d.scanBatchSize = m.scanBatchSize;
	                }
	                if (m.doNotScan != null && m.hasOwnProperty("doNotScan")) {
	                    d.doNotScan = m.doNotScan;
	                }
	                if (m.scanMountPoints && m.scanMountPoints.length) {
	                    d.scanMountPoints = [];
	                    for (var j = 0; j < m.scanMountPoints.length; ++j) {
	                        d.scanMountPoints[j] = m.scanMountPoints[j];
	                    }
	                }
	                if (m.mountPointMapping && m.mountPointMapping.length) {
	                    d.mountPointMapping = [];
	                    for (var j = 0; j < m.mountPointMapping.length; ++j) {
	                        d.mountPointMapping[j] = $root.perfetto.protos.InodeFileConfig.MountPointMappingEntry.toObject(m.mountPointMapping[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this InodeFileConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.InodeFileConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            InodeFileConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for InodeFileConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.InodeFileConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            InodeFileConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.InodeFileConfig";
	            };

	            InodeFileConfig.MountPointMappingEntry = (function() {

	                /**
	                 * Properties of a MountPointMappingEntry.
	                 * @memberof perfetto.protos.InodeFileConfig
	                 * @interface IMountPointMappingEntry
	                 * @property {string|null} [mountpoint] MountPointMappingEntry mountpoint
	                 * @property {Array.<string>|null} [scanRoots] MountPointMappingEntry scanRoots
	                 */

	                /**
	                 * Constructs a new MountPointMappingEntry.
	                 * @memberof perfetto.protos.InodeFileConfig
	                 * @classdesc Represents a MountPointMappingEntry.
	                 * @implements IMountPointMappingEntry
	                 * @constructor
	                 * @param {perfetto.protos.InodeFileConfig.IMountPointMappingEntry=} [p] Properties to set
	                 */
	                function MountPointMappingEntry(p) {
	                    this.scanRoots = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * MountPointMappingEntry mountpoint.
	                 * @member {string} mountpoint
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @instance
	                 */
	                MountPointMappingEntry.prototype.mountpoint = "";

	                /**
	                 * MountPointMappingEntry scanRoots.
	                 * @member {Array.<string>} scanRoots
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @instance
	                 */
	                MountPointMappingEntry.prototype.scanRoots = $util.emptyArray;

	                /**
	                 * Creates a new MountPointMappingEntry instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @static
	                 * @param {perfetto.protos.InodeFileConfig.IMountPointMappingEntry=} [properties] Properties to set
	                 * @returns {perfetto.protos.InodeFileConfig.MountPointMappingEntry} MountPointMappingEntry instance
	                 */
	                MountPointMappingEntry.create = function create(properties) {
	                    return new MountPointMappingEntry(properties);
	                };

	                /**
	                 * Encodes the specified MountPointMappingEntry message. Does not implicitly {@link perfetto.protos.InodeFileConfig.MountPointMappingEntry.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @static
	                 * @param {perfetto.protos.InodeFileConfig.IMountPointMappingEntry} m MountPointMappingEntry message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                MountPointMappingEntry.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.mountpoint != null && Object.hasOwnProperty.call(m, "mountpoint"))
	                        w.uint32(10).string(m.mountpoint);
	                    if (m.scanRoots != null && m.scanRoots.length) {
	                        for (var i = 0; i < m.scanRoots.length; ++i)
	                            w.uint32(18).string(m.scanRoots[i]);
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a MountPointMappingEntry message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.InodeFileConfig.MountPointMappingEntry} MountPointMappingEntry
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                MountPointMappingEntry.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.InodeFileConfig.MountPointMappingEntry();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.mountpoint = r.string();
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.scanRoots && m.scanRoots.length))
	                                    m.scanRoots = [];
	                                m.scanRoots.push(r.string());
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a MountPointMappingEntry message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.InodeFileConfig.MountPointMappingEntry} MountPointMappingEntry
	                 */
	                MountPointMappingEntry.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.InodeFileConfig.MountPointMappingEntry)
	                        return d;
	                    var m = new $root.perfetto.protos.InodeFileConfig.MountPointMappingEntry();
	                    if (d.mountpoint != null) {
	                        m.mountpoint = String(d.mountpoint);
	                    }
	                    if (d.scanRoots) {
	                        if (!Array.isArray(d.scanRoots))
	                            throw TypeError(".perfetto.protos.InodeFileConfig.MountPointMappingEntry.scanRoots: array expected");
	                        m.scanRoots = [];
	                        for (var i = 0; i < d.scanRoots.length; ++i) {
	                            m.scanRoots[i] = String(d.scanRoots[i]);
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a MountPointMappingEntry message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @static
	                 * @param {perfetto.protos.InodeFileConfig.MountPointMappingEntry} m MountPointMappingEntry
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                MountPointMappingEntry.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.scanRoots = [];
	                    }
	                    if (o.defaults) {
	                        d.mountpoint = "";
	                    }
	                    if (m.mountpoint != null && m.hasOwnProperty("mountpoint")) {
	                        d.mountpoint = m.mountpoint;
	                    }
	                    if (m.scanRoots && m.scanRoots.length) {
	                        d.scanRoots = [];
	                        for (var j = 0; j < m.scanRoots.length; ++j) {
	                            d.scanRoots[j] = m.scanRoots[j];
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this MountPointMappingEntry to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                MountPointMappingEntry.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for MountPointMappingEntry
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.InodeFileConfig.MountPointMappingEntry
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                MountPointMappingEntry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.InodeFileConfig.MountPointMappingEntry";
	                };

	                return MountPointMappingEntry;
	            })();

	            return InodeFileConfig;
	        })();

	        protos.InterceptorConfig = (function() {

	            /**
	             * Properties of an InterceptorConfig.
	             * @memberof perfetto.protos
	             * @interface IInterceptorConfig
	             * @property {string|null} [name] InterceptorConfig name
	             * @property {perfetto.protos.IConsoleConfig|null} [consoleConfig] InterceptorConfig consoleConfig
	             */

	            /**
	             * Constructs a new InterceptorConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an InterceptorConfig.
	             * @implements IInterceptorConfig
	             * @constructor
	             * @param {perfetto.protos.IInterceptorConfig=} [p] Properties to set
	             */
	            function InterceptorConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * InterceptorConfig name.
	             * @member {string} name
	             * @memberof perfetto.protos.InterceptorConfig
	             * @instance
	             */
	            InterceptorConfig.prototype.name = "";

	            /**
	             * InterceptorConfig consoleConfig.
	             * @member {perfetto.protos.IConsoleConfig|null|undefined} consoleConfig
	             * @memberof perfetto.protos.InterceptorConfig
	             * @instance
	             */
	            InterceptorConfig.prototype.consoleConfig = null;

	            /**
	             * Creates a new InterceptorConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.InterceptorConfig
	             * @static
	             * @param {perfetto.protos.IInterceptorConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.InterceptorConfig} InterceptorConfig instance
	             */
	            InterceptorConfig.create = function create(properties) {
	                return new InterceptorConfig(properties);
	            };

	            /**
	             * Encodes the specified InterceptorConfig message. Does not implicitly {@link perfetto.protos.InterceptorConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.InterceptorConfig
	             * @static
	             * @param {perfetto.protos.IInterceptorConfig} m InterceptorConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            InterceptorConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.consoleConfig != null && Object.hasOwnProperty.call(m, "consoleConfig"))
	                    $root.perfetto.protos.ConsoleConfig.encode(m.consoleConfig, w.uint32(802).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes an InterceptorConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.InterceptorConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.InterceptorConfig} InterceptorConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            InterceptorConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.InterceptorConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 100: {
	                            m.consoleConfig = $root.perfetto.protos.ConsoleConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an InterceptorConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.InterceptorConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.InterceptorConfig} InterceptorConfig
	             */
	            InterceptorConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.InterceptorConfig)
	                    return d;
	                var m = new $root.perfetto.protos.InterceptorConfig();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.consoleConfig != null) {
	                    if (typeof d.consoleConfig !== "object")
	                        throw TypeError(".perfetto.protos.InterceptorConfig.consoleConfig: object expected");
	                    m.consoleConfig = $root.perfetto.protos.ConsoleConfig.fromObject(d.consoleConfig);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an InterceptorConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.InterceptorConfig
	             * @static
	             * @param {perfetto.protos.InterceptorConfig} m InterceptorConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            InterceptorConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                    d.consoleConfig = null;
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.consoleConfig != null && m.hasOwnProperty("consoleConfig")) {
	                    d.consoleConfig = $root.perfetto.protos.ConsoleConfig.toObject(m.consoleConfig, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this InterceptorConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.InterceptorConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            InterceptorConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for InterceptorConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.InterceptorConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            InterceptorConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.InterceptorConfig";
	            };

	            return InterceptorConfig;
	        })();

	        protos.ConsoleConfig = (function() {

	            /**
	             * Properties of a ConsoleConfig.
	             * @memberof perfetto.protos
	             * @interface IConsoleConfig
	             * @property {perfetto.protos.ConsoleConfig.Output|null} [output] ConsoleConfig output
	             * @property {boolean|null} [enableColors] ConsoleConfig enableColors
	             */

	            /**
	             * Constructs a new ConsoleConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ConsoleConfig.
	             * @implements IConsoleConfig
	             * @constructor
	             * @param {perfetto.protos.IConsoleConfig=} [p] Properties to set
	             */
	            function ConsoleConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ConsoleConfig output.
	             * @member {perfetto.protos.ConsoleConfig.Output} output
	             * @memberof perfetto.protos.ConsoleConfig
	             * @instance
	             */
	            ConsoleConfig.prototype.output = 0;

	            /**
	             * ConsoleConfig enableColors.
	             * @member {boolean} enableColors
	             * @memberof perfetto.protos.ConsoleConfig
	             * @instance
	             */
	            ConsoleConfig.prototype.enableColors = false;

	            /**
	             * Creates a new ConsoleConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ConsoleConfig
	             * @static
	             * @param {perfetto.protos.IConsoleConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.ConsoleConfig} ConsoleConfig instance
	             */
	            ConsoleConfig.create = function create(properties) {
	                return new ConsoleConfig(properties);
	            };

	            /**
	             * Encodes the specified ConsoleConfig message. Does not implicitly {@link perfetto.protos.ConsoleConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ConsoleConfig
	             * @static
	             * @param {perfetto.protos.IConsoleConfig} m ConsoleConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ConsoleConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.output != null && Object.hasOwnProperty.call(m, "output"))
	                    w.uint32(8).int32(m.output);
	                if (m.enableColors != null && Object.hasOwnProperty.call(m, "enableColors"))
	                    w.uint32(16).bool(m.enableColors);
	                return w;
	            };

	            /**
	             * Decodes a ConsoleConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ConsoleConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ConsoleConfig} ConsoleConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ConsoleConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ConsoleConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.output = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            m.enableColors = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ConsoleConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ConsoleConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ConsoleConfig} ConsoleConfig
	             */
	            ConsoleConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ConsoleConfig)
	                    return d;
	                var m = new $root.perfetto.protos.ConsoleConfig();
	                switch (d.output) {
	                default:
	                    if (typeof d.output === "number") {
	                        m.output = d.output;
	                        break;
	                    }
	                    break;
	                case "OUTPUT_UNSPECIFIED":
	                case 0:
	                    m.output = 0;
	                    break;
	                case "OUTPUT_STDOUT":
	                case 1:
	                    m.output = 1;
	                    break;
	                case "OUTPUT_STDERR":
	                case 2:
	                    m.output = 2;
	                    break;
	                }
	                if (d.enableColors != null) {
	                    m.enableColors = Boolean(d.enableColors);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ConsoleConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ConsoleConfig
	             * @static
	             * @param {perfetto.protos.ConsoleConfig} m ConsoleConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ConsoleConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.output = o.enums === String ? "OUTPUT_UNSPECIFIED" : 0;
	                    d.enableColors = false;
	                }
	                if (m.output != null && m.hasOwnProperty("output")) {
	                    d.output = o.enums === String ? $root.perfetto.protos.ConsoleConfig.Output[m.output] === undefined ? m.output : $root.perfetto.protos.ConsoleConfig.Output[m.output] : m.output;
	                }
	                if (m.enableColors != null && m.hasOwnProperty("enableColors")) {
	                    d.enableColors = m.enableColors;
	                }
	                return d;
	            };

	            /**
	             * Converts this ConsoleConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ConsoleConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ConsoleConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ConsoleConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ConsoleConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ConsoleConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ConsoleConfig";
	            };

	            /**
	             * Output enum.
	             * @name perfetto.protos.ConsoleConfig.Output
	             * @enum {number}
	             * @property {number} OUTPUT_UNSPECIFIED=0 OUTPUT_UNSPECIFIED value
	             * @property {number} OUTPUT_STDOUT=1 OUTPUT_STDOUT value
	             * @property {number} OUTPUT_STDERR=2 OUTPUT_STDERR value
	             */
	            ConsoleConfig.Output = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "OUTPUT_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "OUTPUT_STDOUT"] = 1;
	                values[valuesById[2] = "OUTPUT_STDERR"] = 2;
	                return values;
	            })();

	            return ConsoleConfig;
	        })();

	        protos.AndroidPowerConfig = (function() {

	            /**
	             * Properties of an AndroidPowerConfig.
	             * @memberof perfetto.protos
	             * @interface IAndroidPowerConfig
	             * @property {number|null} [batteryPollMs] AndroidPowerConfig batteryPollMs
	             * @property {Array.<perfetto.protos.AndroidPowerConfig.BatteryCounters>|null} [batteryCounters] AndroidPowerConfig batteryCounters
	             * @property {boolean|null} [collectPowerRails] AndroidPowerConfig collectPowerRails
	             * @property {boolean|null} [collectEnergyEstimationBreakdown] AndroidPowerConfig collectEnergyEstimationBreakdown
	             * @property {boolean|null} [collectEntityStateResidency] AndroidPowerConfig collectEntityStateResidency
	             */

	            /**
	             * Constructs a new AndroidPowerConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AndroidPowerConfig.
	             * @implements IAndroidPowerConfig
	             * @constructor
	             * @param {perfetto.protos.IAndroidPowerConfig=} [p] Properties to set
	             */
	            function AndroidPowerConfig(p) {
	                this.batteryCounters = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AndroidPowerConfig batteryPollMs.
	             * @member {number} batteryPollMs
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @instance
	             */
	            AndroidPowerConfig.prototype.batteryPollMs = 0;

	            /**
	             * AndroidPowerConfig batteryCounters.
	             * @member {Array.<perfetto.protos.AndroidPowerConfig.BatteryCounters>} batteryCounters
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @instance
	             */
	            AndroidPowerConfig.prototype.batteryCounters = $util.emptyArray;

	            /**
	             * AndroidPowerConfig collectPowerRails.
	             * @member {boolean} collectPowerRails
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @instance
	             */
	            AndroidPowerConfig.prototype.collectPowerRails = false;

	            /**
	             * AndroidPowerConfig collectEnergyEstimationBreakdown.
	             * @member {boolean} collectEnergyEstimationBreakdown
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @instance
	             */
	            AndroidPowerConfig.prototype.collectEnergyEstimationBreakdown = false;

	            /**
	             * AndroidPowerConfig collectEntityStateResidency.
	             * @member {boolean} collectEntityStateResidency
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @instance
	             */
	            AndroidPowerConfig.prototype.collectEntityStateResidency = false;

	            /**
	             * Creates a new AndroidPowerConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @static
	             * @param {perfetto.protos.IAndroidPowerConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.AndroidPowerConfig} AndroidPowerConfig instance
	             */
	            AndroidPowerConfig.create = function create(properties) {
	                return new AndroidPowerConfig(properties);
	            };

	            /**
	             * Encodes the specified AndroidPowerConfig message. Does not implicitly {@link perfetto.protos.AndroidPowerConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @static
	             * @param {perfetto.protos.IAndroidPowerConfig} m AndroidPowerConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AndroidPowerConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.batteryPollMs != null && Object.hasOwnProperty.call(m, "batteryPollMs"))
	                    w.uint32(8).uint32(m.batteryPollMs);
	                if (m.batteryCounters != null && m.batteryCounters.length) {
	                    for (var i = 0; i < m.batteryCounters.length; ++i)
	                        w.uint32(16).int32(m.batteryCounters[i]);
	                }
	                if (m.collectPowerRails != null && Object.hasOwnProperty.call(m, "collectPowerRails"))
	                    w.uint32(24).bool(m.collectPowerRails);
	                if (m.collectEnergyEstimationBreakdown != null && Object.hasOwnProperty.call(m, "collectEnergyEstimationBreakdown"))
	                    w.uint32(32).bool(m.collectEnergyEstimationBreakdown);
	                if (m.collectEntityStateResidency != null && Object.hasOwnProperty.call(m, "collectEntityStateResidency"))
	                    w.uint32(40).bool(m.collectEntityStateResidency);
	                return w;
	            };

	            /**
	             * Decodes an AndroidPowerConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AndroidPowerConfig} AndroidPowerConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AndroidPowerConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AndroidPowerConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.batteryPollMs = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.batteryCounters && m.batteryCounters.length))
	                                m.batteryCounters = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.batteryCounters.push(r.int32());
	                            } else
	                                m.batteryCounters.push(r.int32());
	                            break;
	                        }
	                    case 3: {
	                            m.collectPowerRails = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.collectEnergyEstimationBreakdown = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.collectEntityStateResidency = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AndroidPowerConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AndroidPowerConfig} AndroidPowerConfig
	             */
	            AndroidPowerConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AndroidPowerConfig)
	                    return d;
	                var m = new $root.perfetto.protos.AndroidPowerConfig();
	                if (d.batteryPollMs != null) {
	                    m.batteryPollMs = d.batteryPollMs >>> 0;
	                }
	                if (d.batteryCounters) {
	                    if (!Array.isArray(d.batteryCounters))
	                        throw TypeError(".perfetto.protos.AndroidPowerConfig.batteryCounters: array expected");
	                    m.batteryCounters = [];
	                    for (var i = 0; i < d.batteryCounters.length; ++i) {
	                        switch (d.batteryCounters[i]) {
	                        default:
	                            if (typeof d.batteryCounters[i] === "number") {
	                                m.batteryCounters[i] = d.batteryCounters[i];
	                                break;
	                            }
	                        case "BATTERY_COUNTER_UNSPECIFIED":
	                        case 0:
	                            m.batteryCounters[i] = 0;
	                            break;
	                        case "BATTERY_COUNTER_CHARGE":
	                        case 1:
	                            m.batteryCounters[i] = 1;
	                            break;
	                        case "BATTERY_COUNTER_CAPACITY_PERCENT":
	                        case 2:
	                            m.batteryCounters[i] = 2;
	                            break;
	                        case "BATTERY_COUNTER_CURRENT":
	                        case 3:
	                            m.batteryCounters[i] = 3;
	                            break;
	                        case "BATTERY_COUNTER_CURRENT_AVG":
	                        case 4:
	                            m.batteryCounters[i] = 4;
	                            break;
	                        case "BATTERY_COUNTER_VOLTAGE":
	                        case 5:
	                            m.batteryCounters[i] = 5;
	                            break;
	                        }
	                    }
	                }
	                if (d.collectPowerRails != null) {
	                    m.collectPowerRails = Boolean(d.collectPowerRails);
	                }
	                if (d.collectEnergyEstimationBreakdown != null) {
	                    m.collectEnergyEstimationBreakdown = Boolean(d.collectEnergyEstimationBreakdown);
	                }
	                if (d.collectEntityStateResidency != null) {
	                    m.collectEntityStateResidency = Boolean(d.collectEntityStateResidency);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AndroidPowerConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @static
	             * @param {perfetto.protos.AndroidPowerConfig} m AndroidPowerConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AndroidPowerConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.batteryCounters = [];
	                }
	                if (o.defaults) {
	                    d.batteryPollMs = 0;
	                    d.collectPowerRails = false;
	                    d.collectEnergyEstimationBreakdown = false;
	                    d.collectEntityStateResidency = false;
	                }
	                if (m.batteryPollMs != null && m.hasOwnProperty("batteryPollMs")) {
	                    d.batteryPollMs = m.batteryPollMs;
	                }
	                if (m.batteryCounters && m.batteryCounters.length) {
	                    d.batteryCounters = [];
	                    for (var j = 0; j < m.batteryCounters.length; ++j) {
	                        d.batteryCounters[j] = o.enums === String ? $root.perfetto.protos.AndroidPowerConfig.BatteryCounters[m.batteryCounters[j]] === undefined ? m.batteryCounters[j] : $root.perfetto.protos.AndroidPowerConfig.BatteryCounters[m.batteryCounters[j]] : m.batteryCounters[j];
	                    }
	                }
	                if (m.collectPowerRails != null && m.hasOwnProperty("collectPowerRails")) {
	                    d.collectPowerRails = m.collectPowerRails;
	                }
	                if (m.collectEnergyEstimationBreakdown != null && m.hasOwnProperty("collectEnergyEstimationBreakdown")) {
	                    d.collectEnergyEstimationBreakdown = m.collectEnergyEstimationBreakdown;
	                }
	                if (m.collectEntityStateResidency != null && m.hasOwnProperty("collectEntityStateResidency")) {
	                    d.collectEntityStateResidency = m.collectEntityStateResidency;
	                }
	                return d;
	            };

	            /**
	             * Converts this AndroidPowerConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AndroidPowerConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AndroidPowerConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AndroidPowerConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AndroidPowerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AndroidPowerConfig";
	            };

	            /**
	             * BatteryCounters enum.
	             * @name perfetto.protos.AndroidPowerConfig.BatteryCounters
	             * @enum {number}
	             * @property {number} BATTERY_COUNTER_UNSPECIFIED=0 BATTERY_COUNTER_UNSPECIFIED value
	             * @property {number} BATTERY_COUNTER_CHARGE=1 BATTERY_COUNTER_CHARGE value
	             * @property {number} BATTERY_COUNTER_CAPACITY_PERCENT=2 BATTERY_COUNTER_CAPACITY_PERCENT value
	             * @property {number} BATTERY_COUNTER_CURRENT=3 BATTERY_COUNTER_CURRENT value
	             * @property {number} BATTERY_COUNTER_CURRENT_AVG=4 BATTERY_COUNTER_CURRENT_AVG value
	             * @property {number} BATTERY_COUNTER_VOLTAGE=5 BATTERY_COUNTER_VOLTAGE value
	             */
	            AndroidPowerConfig.BatteryCounters = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "BATTERY_COUNTER_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "BATTERY_COUNTER_CHARGE"] = 1;
	                values[valuesById[2] = "BATTERY_COUNTER_CAPACITY_PERCENT"] = 2;
	                values[valuesById[3] = "BATTERY_COUNTER_CURRENT"] = 3;
	                values[valuesById[4] = "BATTERY_COUNTER_CURRENT_AVG"] = 4;
	                values[valuesById[5] = "BATTERY_COUNTER_VOLTAGE"] = 5;
	                return values;
	            })();

	            return AndroidPowerConfig;
	        })();

	        protos.StatsdTracingConfig = (function() {

	            /**
	             * Properties of a StatsdTracingConfig.
	             * @memberof perfetto.protos
	             * @interface IStatsdTracingConfig
	             * @property {Array.<perfetto.protos.AtomId>|null} [pushAtomId] StatsdTracingConfig pushAtomId
	             * @property {Array.<number>|null} [rawPushAtomId] StatsdTracingConfig rawPushAtomId
	             * @property {Array.<perfetto.protos.IStatsdPullAtomConfig>|null} [pullConfig] StatsdTracingConfig pullConfig
	             */

	            /**
	             * Constructs a new StatsdTracingConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a StatsdTracingConfig.
	             * @implements IStatsdTracingConfig
	             * @constructor
	             * @param {perfetto.protos.IStatsdTracingConfig=} [p] Properties to set
	             */
	            function StatsdTracingConfig(p) {
	                this.pushAtomId = [];
	                this.rawPushAtomId = [];
	                this.pullConfig = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * StatsdTracingConfig pushAtomId.
	             * @member {Array.<perfetto.protos.AtomId>} pushAtomId
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @instance
	             */
	            StatsdTracingConfig.prototype.pushAtomId = $util.emptyArray;

	            /**
	             * StatsdTracingConfig rawPushAtomId.
	             * @member {Array.<number>} rawPushAtomId
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @instance
	             */
	            StatsdTracingConfig.prototype.rawPushAtomId = $util.emptyArray;

	            /**
	             * StatsdTracingConfig pullConfig.
	             * @member {Array.<perfetto.protos.IStatsdPullAtomConfig>} pullConfig
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @instance
	             */
	            StatsdTracingConfig.prototype.pullConfig = $util.emptyArray;

	            /**
	             * Creates a new StatsdTracingConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @static
	             * @param {perfetto.protos.IStatsdTracingConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.StatsdTracingConfig} StatsdTracingConfig instance
	             */
	            StatsdTracingConfig.create = function create(properties) {
	                return new StatsdTracingConfig(properties);
	            };

	            /**
	             * Encodes the specified StatsdTracingConfig message. Does not implicitly {@link perfetto.protos.StatsdTracingConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @static
	             * @param {perfetto.protos.IStatsdTracingConfig} m StatsdTracingConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            StatsdTracingConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.pushAtomId != null && m.pushAtomId.length) {
	                    for (var i = 0; i < m.pushAtomId.length; ++i)
	                        w.uint32(8).int32(m.pushAtomId[i]);
	                }
	                if (m.rawPushAtomId != null && m.rawPushAtomId.length) {
	                    for (var i = 0; i < m.rawPushAtomId.length; ++i)
	                        w.uint32(16).int32(m.rawPushAtomId[i]);
	                }
	                if (m.pullConfig != null && m.pullConfig.length) {
	                    for (var i = 0; i < m.pullConfig.length; ++i)
	                        $root.perfetto.protos.StatsdPullAtomConfig.encode(m.pullConfig[i], w.uint32(26).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a StatsdTracingConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.StatsdTracingConfig} StatsdTracingConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            StatsdTracingConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.StatsdTracingConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.pushAtomId && m.pushAtomId.length))
	                                m.pushAtomId = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.pushAtomId.push(r.int32());
	                            } else
	                                m.pushAtomId.push(r.int32());
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.rawPushAtomId && m.rawPushAtomId.length))
	                                m.rawPushAtomId = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.rawPushAtomId.push(r.int32());
	                            } else
	                                m.rawPushAtomId.push(r.int32());
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.pullConfig && m.pullConfig.length))
	                                m.pullConfig = [];
	                            m.pullConfig.push($root.perfetto.protos.StatsdPullAtomConfig.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a StatsdTracingConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.StatsdTracingConfig} StatsdTracingConfig
	             */
	            StatsdTracingConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.StatsdTracingConfig)
	                    return d;
	                var m = new $root.perfetto.protos.StatsdTracingConfig();
	                if (d.pushAtomId) {
	                    if (!Array.isArray(d.pushAtomId))
	                        throw TypeError(".perfetto.protos.StatsdTracingConfig.pushAtomId: array expected");
	                    m.pushAtomId = [];
	                    for (var i = 0; i < d.pushAtomId.length; ++i) {
	                        switch (d.pushAtomId[i]) {
	                        default:
	                            if (typeof d.pushAtomId[i] === "number") {
	                                m.pushAtomId[i] = d.pushAtomId[i];
	                                break;
	                            }
	                        case "ATOM_UNSPECIFIED":
	                        case 0:
	                            m.pushAtomId[i] = 0;
	                            break;
	                        case "ATOM_BLE_SCAN_STATE_CHANGED":
	                        case 2:
	                            m.pushAtomId[i] = 2;
	                            break;
	                        case "ATOM_PROCESS_STATE_CHANGED":
	                        case 3:
	                            m.pushAtomId[i] = 3;
	                            break;
	                        case "ATOM_BLE_SCAN_RESULT_RECEIVED":
	                        case 4:
	                            m.pushAtomId[i] = 4;
	                            break;
	                        case "ATOM_SENSOR_STATE_CHANGED":
	                        case 5:
	                            m.pushAtomId[i] = 5;
	                            break;
	                        case "ATOM_GPS_SCAN_STATE_CHANGED":
	                        case 6:
	                            m.pushAtomId[i] = 6;
	                            break;
	                        case "ATOM_SYNC_STATE_CHANGED":
	                        case 7:
	                            m.pushAtomId[i] = 7;
	                            break;
	                        case "ATOM_SCHEDULED_JOB_STATE_CHANGED":
	                        case 8:
	                            m.pushAtomId[i] = 8;
	                            break;
	                        case "ATOM_SCREEN_BRIGHTNESS_CHANGED":
	                        case 9:
	                            m.pushAtomId[i] = 9;
	                            break;
	                        case "ATOM_WAKELOCK_STATE_CHANGED":
	                        case 10:
	                            m.pushAtomId[i] = 10;
	                            break;
	                        case "ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED":
	                        case 11:
	                            m.pushAtomId[i] = 11;
	                            break;
	                        case "ATOM_MOBILE_RADIO_POWER_STATE_CHANGED":
	                        case 12:
	                            m.pushAtomId[i] = 12;
	                            break;
	                        case "ATOM_WIFI_RADIO_POWER_STATE_CHANGED":
	                        case 13:
	                            m.pushAtomId[i] = 13;
	                            break;
	                        case "ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED":
	                        case 14:
	                            m.pushAtomId[i] = 14;
	                            break;
	                        case "ATOM_MEMORY_FACTOR_STATE_CHANGED":
	                        case 15:
	                            m.pushAtomId[i] = 15;
	                            break;
	                        case "ATOM_EXCESSIVE_CPU_USAGE_REPORTED":
	                        case 16:
	                            m.pushAtomId[i] = 16;
	                            break;
	                        case "ATOM_CACHED_KILL_REPORTED":
	                        case 17:
	                            m.pushAtomId[i] = 17;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_STAT_REPORTED":
	                        case 18:
	                            m.pushAtomId[i] = 18;
	                            break;
	                        case "ATOM_LAUNCHER_EVENT":
	                        case 19:
	                            m.pushAtomId[i] = 19;
	                            break;
	                        case "ATOM_BATTERY_SAVER_MODE_STATE_CHANGED":
	                        case 20:
	                            m.pushAtomId[i] = 20;
	                            break;
	                        case "ATOM_DEVICE_IDLE_MODE_STATE_CHANGED":
	                        case 21:
	                            m.pushAtomId[i] = 21;
	                            break;
	                        case "ATOM_DEVICE_IDLING_MODE_STATE_CHANGED":
	                        case 22:
	                            m.pushAtomId[i] = 22;
	                            break;
	                        case "ATOM_AUDIO_STATE_CHANGED":
	                        case 23:
	                            m.pushAtomId[i] = 23;
	                            break;
	                        case "ATOM_MEDIA_CODEC_STATE_CHANGED":
	                        case 24:
	                            m.pushAtomId[i] = 24;
	                            break;
	                        case "ATOM_CAMERA_STATE_CHANGED":
	                        case 25:
	                            m.pushAtomId[i] = 25;
	                            break;
	                        case "ATOM_FLASHLIGHT_STATE_CHANGED":
	                        case 26:
	                            m.pushAtomId[i] = 26;
	                            break;
	                        case "ATOM_UID_PROCESS_STATE_CHANGED":
	                        case 27:
	                            m.pushAtomId[i] = 27;
	                            break;
	                        case "ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED":
	                        case 28:
	                            m.pushAtomId[i] = 28;
	                            break;
	                        case "ATOM_SCREEN_STATE_CHANGED":
	                        case 29:
	                            m.pushAtomId[i] = 29;
	                            break;
	                        case "ATOM_BATTERY_LEVEL_CHANGED":
	                        case 30:
	                            m.pushAtomId[i] = 30;
	                            break;
	                        case "ATOM_CHARGING_STATE_CHANGED":
	                        case 31:
	                            m.pushAtomId[i] = 31;
	                            break;
	                        case "ATOM_PLUGGED_STATE_CHANGED":
	                        case 32:
	                            m.pushAtomId[i] = 32;
	                            break;
	                        case "ATOM_INTERACTIVE_STATE_CHANGED":
	                        case 33:
	                            m.pushAtomId[i] = 33;
	                            break;
	                        case "ATOM_TOUCH_EVENT_REPORTED":
	                        case 34:
	                            m.pushAtomId[i] = 34;
	                            break;
	                        case "ATOM_WAKEUP_ALARM_OCCURRED":
	                        case 35:
	                            m.pushAtomId[i] = 35;
	                            break;
	                        case "ATOM_KERNEL_WAKEUP_REPORTED":
	                        case 36:
	                            m.pushAtomId[i] = 36;
	                            break;
	                        case "ATOM_WIFI_LOCK_STATE_CHANGED":
	                        case 37:
	                            m.pushAtomId[i] = 37;
	                            break;
	                        case "ATOM_WIFI_SIGNAL_STRENGTH_CHANGED":
	                        case 38:
	                            m.pushAtomId[i] = 38;
	                            break;
	                        case "ATOM_WIFI_SCAN_STATE_CHANGED":
	                        case 39:
	                            m.pushAtomId[i] = 39;
	                            break;
	                        case "ATOM_PHONE_SIGNAL_STRENGTH_CHANGED":
	                        case 40:
	                            m.pushAtomId[i] = 40;
	                            break;
	                        case "ATOM_SETTING_CHANGED":
	                        case 41:
	                            m.pushAtomId[i] = 41;
	                            break;
	                        case "ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED":
	                        case 42:
	                            m.pushAtomId[i] = 42;
	                            break;
	                        case "ATOM_ISOLATED_UID_CHANGED":
	                        case 43:
	                            m.pushAtomId[i] = 43;
	                            break;
	                        case "ATOM_PACKET_WAKEUP_OCCURRED":
	                        case 44:
	                            m.pushAtomId[i] = 44;
	                            break;
	                        case "ATOM_WALL_CLOCK_TIME_SHIFTED":
	                        case 45:
	                            m.pushAtomId[i] = 45;
	                            break;
	                        case "ATOM_ANOMALY_DETECTED":
	                        case 46:
	                            m.pushAtomId[i] = 46;
	                            break;
	                        case "ATOM_APP_BREADCRUMB_REPORTED":
	                        case 47:
	                            m.pushAtomId[i] = 47;
	                            break;
	                        case "ATOM_APP_START_OCCURRED":
	                        case 48:
	                            m.pushAtomId[i] = 48;
	                            break;
	                        case "ATOM_APP_START_CANCELED":
	                        case 49:
	                            m.pushAtomId[i] = 49;
	                            break;
	                        case "ATOM_APP_START_FULLY_DRAWN":
	                        case 50:
	                            m.pushAtomId[i] = 50;
	                            break;
	                        case "ATOM_LMK_KILL_OCCURRED":
	                        case 51:
	                            m.pushAtomId[i] = 51;
	                            break;
	                        case "ATOM_PICTURE_IN_PICTURE_STATE_CHANGED":
	                        case 52:
	                            m.pushAtomId[i] = 52;
	                            break;
	                        case "ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED":
	                        case 53:
	                            m.pushAtomId[i] = 53;
	                            break;
	                        case "ATOM_APP_START_MEMORY_STATE_CAPTURED":
	                        case 55:
	                            m.pushAtomId[i] = 55;
	                            break;
	                        case "ATOM_SHUTDOWN_SEQUENCE_REPORTED":
	                        case 56:
	                            m.pushAtomId[i] = 56;
	                            break;
	                        case "ATOM_BOOT_SEQUENCE_REPORTED":
	                        case 57:
	                            m.pushAtomId[i] = 57;
	                            break;
	                        case "ATOM_OVERLAY_STATE_CHANGED":
	                        case 59:
	                            m.pushAtomId[i] = 59;
	                            break;
	                        case "ATOM_FOREGROUND_SERVICE_STATE_CHANGED":
	                        case 60:
	                            m.pushAtomId[i] = 60;
	                            break;
	                        case "ATOM_CALL_STATE_CHANGED":
	                        case 61:
	                            m.pushAtomId[i] = 61;
	                            break;
	                        case "ATOM_KEYGUARD_STATE_CHANGED":
	                        case 62:
	                            m.pushAtomId[i] = 62;
	                            break;
	                        case "ATOM_KEYGUARD_BOUNCER_STATE_CHANGED":
	                        case 63:
	                            m.pushAtomId[i] = 63;
	                            break;
	                        case "ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED":
	                        case 64:
	                            m.pushAtomId[i] = 64;
	                            break;
	                        case "ATOM_APP_DIED":
	                        case 65:
	                            m.pushAtomId[i] = 65;
	                            break;
	                        case "ATOM_RESOURCE_CONFIGURATION_CHANGED":
	                        case 66:
	                            m.pushAtomId[i] = 66;
	                            break;
	                        case "ATOM_BLUETOOTH_ENABLED_STATE_CHANGED":
	                        case 67:
	                            m.pushAtomId[i] = 67;
	                            break;
	                        case "ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED":
	                        case 68:
	                            m.pushAtomId[i] = 68;
	                            break;
	                        case "ATOM_GPS_SIGNAL_QUALITY_CHANGED":
	                        case 69:
	                            m.pushAtomId[i] = 69;
	                            break;
	                        case "ATOM_USB_CONNECTOR_STATE_CHANGED":
	                        case 70:
	                            m.pushAtomId[i] = 70;
	                            break;
	                        case "ATOM_SPEAKER_IMPEDANCE_REPORTED":
	                        case 71:
	                            m.pushAtomId[i] = 71;
	                            break;
	                        case "ATOM_HARDWARE_FAILED":
	                        case 72:
	                            m.pushAtomId[i] = 72;
	                            break;
	                        case "ATOM_PHYSICAL_DROP_DETECTED":
	                        case 73:
	                            m.pushAtomId[i] = 73;
	                            break;
	                        case "ATOM_CHARGE_CYCLES_REPORTED":
	                        case 74:
	                            m.pushAtomId[i] = 74;
	                            break;
	                        case "ATOM_MOBILE_CONNECTION_STATE_CHANGED":
	                        case 75:
	                            m.pushAtomId[i] = 75;
	                            break;
	                        case "ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED":
	                        case 76:
	                            m.pushAtomId[i] = 76;
	                            break;
	                        case "ATOM_USB_DEVICE_ATTACHED":
	                        case 77:
	                            m.pushAtomId[i] = 77;
	                            break;
	                        case "ATOM_APP_CRASH_OCCURRED":
	                        case 78:
	                            m.pushAtomId[i] = 78;
	                            break;
	                        case "ATOM_ANR_OCCURRED":
	                        case 79:
	                            m.pushAtomId[i] = 79;
	                            break;
	                        case "ATOM_WTF_OCCURRED":
	                        case 80:
	                            m.pushAtomId[i] = 80;
	                            break;
	                        case "ATOM_LOW_MEM_REPORTED":
	                        case 81:
	                            m.pushAtomId[i] = 81;
	                            break;
	                        case "ATOM_GENERIC_ATOM":
	                        case 82:
	                            m.pushAtomId[i] = 82;
	                            break;
	                        case "ATOM_VIBRATOR_STATE_CHANGED":
	                        case 84:
	                            m.pushAtomId[i] = 84;
	                            break;
	                        case "ATOM_DEFERRED_JOB_STATS_REPORTED":
	                        case 85:
	                            m.pushAtomId[i] = 85;
	                            break;
	                        case "ATOM_THERMAL_THROTTLING":
	                        case 86:
	                            m.pushAtomId[i] = 86;
	                            break;
	                        case "ATOM_BIOMETRIC_ACQUIRED":
	                        case 87:
	                            m.pushAtomId[i] = 87;
	                            break;
	                        case "ATOM_BIOMETRIC_AUTHENTICATED":
	                        case 88:
	                            m.pushAtomId[i] = 88;
	                            break;
	                        case "ATOM_BIOMETRIC_ERROR_OCCURRED":
	                        case 89:
	                            m.pushAtomId[i] = 89;
	                            break;
	                        case "ATOM_UI_EVENT_REPORTED":
	                        case 90:
	                            m.pushAtomId[i] = 90;
	                            break;
	                        case "ATOM_BATTERY_HEALTH_SNAPSHOT":
	                        case 91:
	                            m.pushAtomId[i] = 91;
	                            break;
	                        case "ATOM_SLOW_IO":
	                        case 92:
	                            m.pushAtomId[i] = 92;
	                            break;
	                        case "ATOM_BATTERY_CAUSED_SHUTDOWN":
	                        case 93:
	                            m.pushAtomId[i] = 93;
	                            break;
	                        case "ATOM_PHONE_SERVICE_STATE_CHANGED":
	                        case 94:
	                            m.pushAtomId[i] = 94;
	                            break;
	                        case "ATOM_PHONE_STATE_CHANGED":
	                        case 95:
	                            m.pushAtomId[i] = 95;
	                            break;
	                        case "ATOM_USER_RESTRICTION_CHANGED":
	                        case 96:
	                            m.pushAtomId[i] = 96;
	                            break;
	                        case "ATOM_SETTINGS_UI_CHANGED":
	                        case 97:
	                            m.pushAtomId[i] = 97;
	                            break;
	                        case "ATOM_CONNECTIVITY_STATE_CHANGED":
	                        case 98:
	                            m.pushAtomId[i] = 98;
	                            break;
	                        case "ATOM_SERVICE_STATE_CHANGED":
	                        case 99:
	                            m.pushAtomId[i] = 99;
	                            break;
	                        case "ATOM_SERVICE_LAUNCH_REPORTED":
	                        case 100:
	                            m.pushAtomId[i] = 100;
	                            break;
	                        case "ATOM_FLAG_FLIP_UPDATE_OCCURRED":
	                        case 101:
	                            m.pushAtomId[i] = 101;
	                            break;
	                        case "ATOM_BINARY_PUSH_STATE_CHANGED":
	                        case 102:
	                            m.pushAtomId[i] = 102;
	                            break;
	                        case "ATOM_DEVICE_POLICY_EVENT":
	                        case 103:
	                            m.pushAtomId[i] = 103;
	                            break;
	                        case "ATOM_DOCS_UI_FILE_OP_CANCELED":
	                        case 104:
	                            m.pushAtomId[i] = 104;
	                            break;
	                        case "ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED":
	                        case 105:
	                            m.pushAtomId[i] = 105;
	                            break;
	                        case "ATOM_DOCS_UI_FILE_OP_FAILURE":
	                        case 106:
	                            m.pushAtomId[i] = 106;
	                            break;
	                        case "ATOM_DOCS_UI_PROVIDER_FILE_OP":
	                        case 107:
	                            m.pushAtomId[i] = 107;
	                            break;
	                        case "ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST":
	                        case 108:
	                            m.pushAtomId[i] = 108;
	                            break;
	                        case "ATOM_DOCS_UI_LAUNCH_REPORTED":
	                        case 109:
	                            m.pushAtomId[i] = 109;
	                            break;
	                        case "ATOM_DOCS_UI_ROOT_VISITED":
	                        case 110:
	                            m.pushAtomId[i] = 110;
	                            break;
	                        case "ATOM_DOCS_UI_STARTUP_MS":
	                        case 111:
	                            m.pushAtomId[i] = 111;
	                            break;
	                        case "ATOM_DOCS_UI_USER_ACTION_REPORTED":
	                        case 112:
	                            m.pushAtomId[i] = 112;
	                            break;
	                        case "ATOM_WIFI_ENABLED_STATE_CHANGED":
	                        case 113:
	                            m.pushAtomId[i] = 113;
	                            break;
	                        case "ATOM_WIFI_RUNNING_STATE_CHANGED":
	                        case 114:
	                            m.pushAtomId[i] = 114;
	                            break;
	                        case "ATOM_APP_COMPACTED":
	                        case 115:
	                            m.pushAtomId[i] = 115;
	                            break;
	                        case "ATOM_NETWORK_DNS_EVENT_REPORTED":
	                        case 116:
	                            m.pushAtomId[i] = 116;
	                            break;
	                        case "ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED":
	                        case 117:
	                            m.pushAtomId[i] = 117;
	                            break;
	                        case "ATOM_DOCS_UI_PICK_RESULT_REPORTED":
	                        case 118:
	                            m.pushAtomId[i] = 118;
	                            break;
	                        case "ATOM_DOCS_UI_SEARCH_MODE_REPORTED":
	                        case 119:
	                            m.pushAtomId[i] = 119;
	                            break;
	                        case "ATOM_DOCS_UI_SEARCH_TYPE_REPORTED":
	                        case 120:
	                            m.pushAtomId[i] = 120;
	                            break;
	                        case "ATOM_DATA_STALL_EVENT":
	                        case 121:
	                            m.pushAtomId[i] = 121;
	                            break;
	                        case "ATOM_RESCUE_PARTY_RESET_REPORTED":
	                        case 122:
	                            m.pushAtomId[i] = 122;
	                            break;
	                        case "ATOM_SIGNED_CONFIG_REPORTED":
	                        case 123:
	                            m.pushAtomId[i] = 123;
	                            break;
	                        case "ATOM_GNSS_NI_EVENT_REPORTED":
	                        case 124:
	                            m.pushAtomId[i] = 124;
	                            break;
	                        case "ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT":
	                        case 125:
	                            m.pushAtomId[i] = 125;
	                            break;
	                        case "ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED":
	                        case 126:
	                            m.pushAtomId[i] = 126;
	                            break;
	                        case "ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED":
	                        case 127:
	                            m.pushAtomId[i] = 127;
	                            break;
	                        case "ATOM_APP_DOWNGRADED":
	                        case 128:
	                            m.pushAtomId[i] = 128;
	                            break;
	                        case "ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED":
	                        case 129:
	                            m.pushAtomId[i] = 129;
	                            break;
	                        case "ATOM_LOW_STORAGE_STATE_CHANGED":
	                        case 130:
	                            m.pushAtomId[i] = 130;
	                            break;
	                        case "ATOM_GNSS_NFW_NOTIFICATION_REPORTED":
	                        case 131:
	                            m.pushAtomId[i] = 131;
	                            break;
	                        case "ATOM_GNSS_CONFIGURATION_REPORTED":
	                        case 132:
	                            m.pushAtomId[i] = 132;
	                            break;
	                        case "ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED":
	                        case 133:
	                            m.pushAtomId[i] = 133;
	                            break;
	                        case "ATOM_NFC_ERROR_OCCURRED":
	                        case 134:
	                            m.pushAtomId[i] = 134;
	                            break;
	                        case "ATOM_NFC_STATE_CHANGED":
	                        case 135:
	                            m.pushAtomId[i] = 135;
	                            break;
	                        case "ATOM_NFC_BEAM_OCCURRED":
	                        case 136:
	                            m.pushAtomId[i] = 136;
	                            break;
	                        case "ATOM_NFC_CARDEMULATION_OCCURRED":
	                        case 137:
	                            m.pushAtomId[i] = 137;
	                            break;
	                        case "ATOM_NFC_TAG_OCCURRED":
	                        case 138:
	                            m.pushAtomId[i] = 138;
	                            break;
	                        case "ATOM_NFC_HCE_TRANSACTION_OCCURRED":
	                        case 139:
	                            m.pushAtomId[i] = 139;
	                            break;
	                        case "ATOM_SE_STATE_CHANGED":
	                        case 140:
	                            m.pushAtomId[i] = 140;
	                            break;
	                        case "ATOM_SE_OMAPI_REPORTED":
	                        case 141:
	                            m.pushAtomId[i] = 141;
	                            break;
	                        case "ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED":
	                        case 142:
	                            m.pushAtomId[i] = 142;
	                            break;
	                        case "ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED":
	                        case 143:
	                            m.pushAtomId[i] = 143;
	                            break;
	                        case "ATOM_ADB_CONNECTION_CHANGED":
	                        case 144:
	                            m.pushAtomId[i] = 144;
	                            break;
	                        case "ATOM_SPEECH_DSP_STAT_REPORTED":
	                        case 145:
	                            m.pushAtomId[i] = 145;
	                            break;
	                        case "ATOM_USB_CONTAMINANT_REPORTED":
	                        case 146:
	                            m.pushAtomId[i] = 146;
	                            break;
	                        case "ATOM_WATCHDOG_ROLLBACK_OCCURRED":
	                        case 147:
	                            m.pushAtomId[i] = 147;
	                            break;
	                        case "ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED":
	                        case 148:
	                            m.pushAtomId[i] = 148;
	                            break;
	                        case "ATOM_BUBBLE_UI_CHANGED":
	                        case 149:
	                            m.pushAtomId[i] = 149;
	                            break;
	                        case "ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED":
	                        case 150:
	                            m.pushAtomId[i] = 150;
	                            break;
	                        case "ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED":
	                        case 151:
	                            m.pushAtomId[i] = 151;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED":
	                        case 152:
	                            m.pushAtomId[i] = 152;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED":
	                        case 153:
	                            m.pushAtomId[i] = 153;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED":
	                        case 154:
	                            m.pushAtomId[i] = 154;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED":
	                        case 155:
	                            m.pushAtomId[i] = 155;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED":
	                        case 156:
	                            m.pushAtomId[i] = 156;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED":
	                        case 157:
	                            m.pushAtomId[i] = 157;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED":
	                        case 158:
	                            m.pushAtomId[i] = 158;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED":
	                        case 159:
	                            m.pushAtomId[i] = 159;
	                            break;
	                        case "ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED":
	                        case 160:
	                            m.pushAtomId[i] = 160;
	                            break;
	                        case "ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED":
	                        case 161:
	                            m.pushAtomId[i] = 161;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_INFO_REPORTED":
	                        case 162:
	                            m.pushAtomId[i] = 162;
	                            break;
	                        case "ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED":
	                        case 163:
	                            m.pushAtomId[i] = 163;
	                            break;
	                        case "ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED":
	                        case 164:
	                            m.pushAtomId[i] = 164;
	                            break;
	                        case "ATOM_BLUETOOTH_BOND_STATE_CHANGED":
	                        case 165:
	                            m.pushAtomId[i] = 165;
	                            break;
	                        case "ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED":
	                        case 166:
	                            m.pushAtomId[i] = 166;
	                            break;
	                        case "ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED":
	                        case 167:
	                            m.pushAtomId[i] = 167;
	                            break;
	                        case "ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED":
	                        case 168:
	                            m.pushAtomId[i] = 168;
	                            break;
	                        case "ATOM_PROCESS_START_TIME":
	                        case 169:
	                            m.pushAtomId[i] = 169;
	                            break;
	                        case "ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED":
	                        case 170:
	                            m.pushAtomId[i] = 170;
	                            break;
	                        case "ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED":
	                        case 171:
	                            m.pushAtomId[i] = 171;
	                            break;
	                        case "ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED":
	                        case 172:
	                            m.pushAtomId[i] = 172;
	                            break;
	                        case "ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED":
	                        case 173:
	                            m.pushAtomId[i] = 173;
	                            break;
	                        case "ATOM_ASSIST_GESTURE_STAGE_REPORTED":
	                        case 174:
	                            m.pushAtomId[i] = 174;
	                            break;
	                        case "ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED":
	                        case 175:
	                            m.pushAtomId[i] = 175;
	                            break;
	                        case "ATOM_ASSIST_GESTURE_PROGRESS_REPORTED":
	                        case 176:
	                            m.pushAtomId[i] = 176;
	                            break;
	                        case "ATOM_TOUCH_GESTURE_CLASSIFIED":
	                        case 177:
	                            m.pushAtomId[i] = 177;
	                            break;
	                        case "ATOM_HIDDEN_API_USED":
	                        case 178:
	                            m.pushAtomId[i] = 178;
	                            break;
	                        case "ATOM_STYLE_UI_CHANGED":
	                        case 179:
	                            m.pushAtomId[i] = 179;
	                            break;
	                        case "ATOM_PRIVACY_INDICATORS_INTERACTED":
	                        case 180:
	                            m.pushAtomId[i] = 180;
	                            break;
	                        case "ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED":
	                        case 181:
	                            m.pushAtomId[i] = 181;
	                            break;
	                        case "ATOM_NETWORK_STACK_REPORTED":
	                        case 182:
	                            m.pushAtomId[i] = 182;
	                            break;
	                        case "ATOM_APP_MOVED_STORAGE_REPORTED":
	                        case 183:
	                            m.pushAtomId[i] = 183;
	                            break;
	                        case "ATOM_BIOMETRIC_ENROLLED":
	                        case 184:
	                            m.pushAtomId[i] = 184;
	                            break;
	                        case "ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED":
	                        case 185:
	                            m.pushAtomId[i] = 185;
	                            break;
	                        case "ATOM_TOMB_STONE_OCCURRED":
	                        case 186:
	                            m.pushAtomId[i] = 186;
	                            break;
	                        case "ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED":
	                        case 187:
	                            m.pushAtomId[i] = 187;
	                            break;
	                        case "ATOM_INTELLIGENCE_EVENT_REPORTED":
	                        case 188:
	                            m.pushAtomId[i] = 188;
	                            break;
	                        case "ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED":
	                        case 189:
	                            m.pushAtomId[i] = 189;
	                            break;
	                        case "ATOM_ROLE_REQUEST_RESULT_REPORTED":
	                        case 190:
	                            m.pushAtomId[i] = 190;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED":
	                        case 191:
	                            m.pushAtomId[i] = 191;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED":
	                        case 192:
	                            m.pushAtomId[i] = 192;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED":
	                        case 193:
	                            m.pushAtomId[i] = 193;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED":
	                        case 194:
	                            m.pushAtomId[i] = 194;
	                            break;
	                        case "ATOM_MEDIAMETRICS_CODEC_REPORTED":
	                        case 195:
	                            m.pushAtomId[i] = 195;
	                            break;
	                        case "ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED":
	                        case 196:
	                            m.pushAtomId[i] = 196;
	                            break;
	                        case "ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED":
	                        case 197:
	                            m.pushAtomId[i] = 197;
	                            break;
	                        case "ATOM_MEDIAMETRICS_MEDIADRM_REPORTED":
	                        case 198:
	                            m.pushAtomId[i] = 198;
	                            break;
	                        case "ATOM_MEDIAMETRICS_NUPLAYER_REPORTED":
	                        case 199:
	                            m.pushAtomId[i] = 199;
	                            break;
	                        case "ATOM_MEDIAMETRICS_RECORDER_REPORTED":
	                        case 200:
	                            m.pushAtomId[i] = 200;
	                            break;
	                        case "ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED":
	                        case 201:
	                            m.pushAtomId[i] = 201;
	                            break;
	                        case "ATOM_CAR_POWER_STATE_CHANGED":
	                        case 203:
	                            m.pushAtomId[i] = 203;
	                            break;
	                        case "ATOM_GARAGE_MODE_INFO":
	                        case 204:
	                            m.pushAtomId[i] = 204;
	                            break;
	                        case "ATOM_TEST_ATOM_REPORTED":
	                        case 205:
	                            m.pushAtomId[i] = 205;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED":
	                        case 206:
	                            m.pushAtomId[i] = 206;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_SERVICE_EVENTS":
	                        case 207:
	                            m.pushAtomId[i] = 207;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_SESSION_EVENTS":
	                        case 208:
	                            m.pushAtomId[i] = 208;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_FLUSHED":
	                        case 209:
	                            m.pushAtomId[i] = 209;
	                            break;
	                        case "ATOM_LOCATION_MANAGER_API_USAGE_REPORTED":
	                        case 210:
	                            m.pushAtomId[i] = 210;
	                            break;
	                        case "ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED":
	                        case 211:
	                            m.pushAtomId[i] = 211;
	                            break;
	                        case "ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT":
	                        case 212:
	                            m.pushAtomId[i] = 212;
	                            break;
	                        case "ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS":
	                        case 213:
	                            m.pushAtomId[i] = 213;
	                            break;
	                        case "ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION":
	                        case 214:
	                            m.pushAtomId[i] = 214;
	                            break;
	                        case "ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED":
	                        case 215:
	                            m.pushAtomId[i] = 215;
	                            break;
	                        case "ATOM_APP_PERMISSION_FRAGMENT_VIEWED":
	                        case 216:
	                            m.pushAtomId[i] = 216;
	                            break;
	                        case "ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED":
	                        case 217:
	                            m.pushAtomId[i] = 217;
	                            break;
	                        case "ATOM_PERMISSION_APPS_FRAGMENT_VIEWED":
	                        case 218:
	                            m.pushAtomId[i] = 218;
	                            break;
	                        case "ATOM_TEXT_SELECTION_EVENT":
	                        case 219:
	                            m.pushAtomId[i] = 219;
	                            break;
	                        case "ATOM_TEXT_LINKIFY_EVENT":
	                        case 220:
	                            m.pushAtomId[i] = 220;
	                            break;
	                        case "ATOM_CONVERSATION_ACTIONS_EVENT":
	                        case 221:
	                            m.pushAtomId[i] = 221;
	                            break;
	                        case "ATOM_LANGUAGE_DETECTION_EVENT":
	                        case 222:
	                            m.pushAtomId[i] = 222;
	                            break;
	                        case "ATOM_EXCLUSION_RECT_STATE_CHANGED":
	                        case 223:
	                            m.pushAtomId[i] = 223;
	                            break;
	                        case "ATOM_BACK_GESTURE_REPORTED_REPORTED":
	                        case 224:
	                            m.pushAtomId[i] = 224;
	                            break;
	                        case "ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED":
	                        case 225:
	                            m.pushAtomId[i] = 225;
	                            break;
	                        case "ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED":
	                        case 226:
	                            m.pushAtomId[i] = 226;
	                            break;
	                        case "ATOM_CAMERA_ACTION_EVENT":
	                        case 227:
	                            m.pushAtomId[i] = 227;
	                            break;
	                        case "ATOM_APP_COMPATIBILITY_CHANGE_REPORTED":
	                        case 228:
	                            m.pushAtomId[i] = 228;
	                            break;
	                        case "ATOM_PERFETTO_UPLOADED":
	                        case 229:
	                            m.pushAtomId[i] = 229;
	                            break;
	                        case "ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED":
	                        case 230:
	                            m.pushAtomId[i] = 230;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_SCAN_OCCURRED":
	                        case 233:
	                            m.pushAtomId[i] = 233;
	                            break;
	                        case "ATOM_MEDIA_CONTENT_DELETED":
	                        case 234:
	                            m.pushAtomId[i] = 234;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED":
	                        case 235:
	                            m.pushAtomId[i] = 235;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED":
	                        case 236:
	                            m.pushAtomId[i] = 236;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED":
	                        case 237:
	                            m.pushAtomId[i] = 237;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_RECOVERY_REPORTED":
	                        case 238:
	                            m.pushAtomId[i] = 238;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_DURATION_REPORTED":
	                        case 239:
	                            m.pushAtomId[i] = 239;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED":
	                        case 240:
	                            m.pushAtomId[i] = 240;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED":
	                        case 241:
	                            m.pushAtomId[i] = 241;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED":
	                        case 242:
	                            m.pushAtomId[i] = 242;
	                            break;
	                        case "ATOM_USERSPACE_REBOOT_REPORTED":
	                        case 243:
	                            m.pushAtomId[i] = 243;
	                            break;
	                        case "ATOM_NOTIFICATION_REPORTED":
	                        case 244:
	                            m.pushAtomId[i] = 244;
	                            break;
	                        case "ATOM_NOTIFICATION_PANEL_REPORTED":
	                        case 245:
	                            m.pushAtomId[i] = 245;
	                            break;
	                        case "ATOM_NOTIFICATION_CHANNEL_MODIFIED":
	                        case 246:
	                            m.pushAtomId[i] = 246;
	                            break;
	                        case "ATOM_INTEGRITY_CHECK_RESULT_REPORTED":
	                        case 247:
	                            m.pushAtomId[i] = 247;
	                            break;
	                        case "ATOM_INTEGRITY_RULES_PUSHED":
	                        case 248:
	                            m.pushAtomId[i] = 248;
	                            break;
	                        case "ATOM_CB_MESSAGE_REPORTED":
	                        case 249:
	                            m.pushAtomId[i] = 249;
	                            break;
	                        case "ATOM_CB_MESSAGE_ERROR":
	                        case 250:
	                            m.pushAtomId[i] = 250;
	                            break;
	                        case "ATOM_WIFI_HEALTH_STAT_REPORTED":
	                        case 251:
	                            m.pushAtomId[i] = 251;
	                            break;
	                        case "ATOM_WIFI_FAILURE_STAT_REPORTED":
	                        case 252:
	                            m.pushAtomId[i] = 252;
	                            break;
	                        case "ATOM_WIFI_CONNECTION_RESULT_REPORTED":
	                        case 253:
	                            m.pushAtomId[i] = 253;
	                            break;
	                        case "ATOM_APP_FREEZE_CHANGED":
	                        case 254:
	                            m.pushAtomId[i] = 254;
	                            break;
	                        case "ATOM_SNAPSHOT_MERGE_REPORTED":
	                        case 255:
	                            m.pushAtomId[i] = 255;
	                            break;
	                        case "ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED":
	                        case 256:
	                            m.pushAtomId[i] = 256;
	                            break;
	                        case "ATOM_DISPLAY_JANK_REPORTED":
	                        case 257:
	                            m.pushAtomId[i] = 257;
	                            break;
	                        case "ATOM_APP_STANDBY_BUCKET_CHANGED":
	                        case 258:
	                            m.pushAtomId[i] = 258;
	                            break;
	                        case "ATOM_SHARESHEET_STARTED":
	                        case 259:
	                            m.pushAtomId[i] = 259;
	                            break;
	                        case "ATOM_RANKING_SELECTED":
	                        case 260:
	                            m.pushAtomId[i] = 260;
	                            break;
	                        case "ATOM_TVSETTINGS_UI_INTERACTED":
	                        case 261:
	                            m.pushAtomId[i] = 261;
	                            break;
	                        case "ATOM_LAUNCHER_SNAPSHOT":
	                        case 262:
	                            m.pushAtomId[i] = 262;
	                            break;
	                        case "ATOM_PACKAGE_INSTALLER_V2_REPORTED":
	                        case 263:
	                            m.pushAtomId[i] = 263;
	                            break;
	                        case "ATOM_USER_LIFECYCLE_JOURNEY_REPORTED":
	                        case 264:
	                            m.pushAtomId[i] = 264;
	                            break;
	                        case "ATOM_USER_LIFECYCLE_EVENT_OCCURRED":
	                        case 265:
	                            m.pushAtomId[i] = 265;
	                            break;
	                        case "ATOM_ACCESSIBILITY_SHORTCUT_REPORTED":
	                        case 266:
	                            m.pushAtomId[i] = 266;
	                            break;
	                        case "ATOM_ACCESSIBILITY_SERVICE_REPORTED":
	                        case 267:
	                            m.pushAtomId[i] = 267;
	                            break;
	                        case "ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED":
	                        case 268:
	                            m.pushAtomId[i] = 268;
	                            break;
	                        case "ATOM_APP_USAGE_EVENT_OCCURRED":
	                        case 269:
	                            m.pushAtomId[i] = 269;
	                            break;
	                        case "ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED":
	                        case 270:
	                            m.pushAtomId[i] = 270;
	                            break;
	                        case "ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED":
	                        case 271:
	                            m.pushAtomId[i] = 271;
	                            break;
	                        case "ATOM_AUTO_REVOKED_APP_INTERACTION":
	                        case 272:
	                            m.pushAtomId[i] = 272;
	                            break;
	                        case "ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION":
	                        case 273:
	                            m.pushAtomId[i] = 273;
	                            break;
	                        case "ATOM_EVS_USAGE_STATS_REPORTED":
	                        case 274:
	                            m.pushAtomId[i] = 274;
	                            break;
	                        case "ATOM_AUDIO_POWER_USAGE_DATA_REPORTED":
	                        case 275:
	                            m.pushAtomId[i] = 275;
	                            break;
	                        case "ATOM_TV_TUNER_STATE_CHANGED":
	                        case 276:
	                            m.pushAtomId[i] = 276;
	                            break;
	                        case "ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED":
	                        case 277:
	                            m.pushAtomId[i] = 277;
	                            break;
	                        case "ATOM_CB_MESSAGE_FILTERED":
	                        case 278:
	                            m.pushAtomId[i] = 278;
	                            break;
	                        case "ATOM_TV_TUNER_DVR_STATUS":
	                        case 279:
	                            m.pushAtomId[i] = 279;
	                            break;
	                        case "ATOM_TV_CAS_SESSION_OPEN_STATUS":
	                        case 280:
	                            m.pushAtomId[i] = 280;
	                            break;
	                        case "ATOM_ASSISTANT_INVOCATION_REPORTED":
	                        case 281:
	                            m.pushAtomId[i] = 281;
	                            break;
	                        case "ATOM_DISPLAY_WAKE_REPORTED":
	                        case 282:
	                            m.pushAtomId[i] = 282;
	                            break;
	                        case "ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED":
	                        case 283:
	                            m.pushAtomId[i] = 283;
	                            break;
	                        case "ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED":
	                        case 284:
	                            m.pushAtomId[i] = 284;
	                            break;
	                        case "ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED":
	                        case 285:
	                            m.pushAtomId[i] = 285;
	                            break;
	                        case "ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED":
	                        case 286:
	                            m.pushAtomId[i] = 286;
	                            break;
	                        case "ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED":
	                        case 287:
	                            m.pushAtomId[i] = 287;
	                            break;
	                        case "ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED":
	                        case 288:
	                            m.pushAtomId[i] = 288;
	                            break;
	                        case "ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED":
	                        case 289:
	                            m.pushAtomId[i] = 289;
	                            break;
	                        case "ATOM_NETWORK_IP_PROVISIONING_REPORTED":
	                        case 290:
	                            m.pushAtomId[i] = 290;
	                            break;
	                        case "ATOM_NETWORK_DHCP_RENEW_REPORTED":
	                        case 291:
	                            m.pushAtomId[i] = 291;
	                            break;
	                        case "ATOM_NETWORK_VALIDATION_REPORTED":
	                        case 292:
	                            m.pushAtomId[i] = 292;
	                            break;
	                        case "ATOM_NETWORK_STACK_QUIRK_REPORTED":
	                        case 293:
	                            m.pushAtomId[i] = 293;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED":
	                        case 294:
	                            m.pushAtomId[i] = 294;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED":
	                        case 295:
	                            m.pushAtomId[i] = 295;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED":
	                        case 296:
	                            m.pushAtomId[i] = 296;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED":
	                        case 297:
	                            m.pushAtomId[i] = 297;
	                            break;
	                        case "ATOM_BLOB_COMMITTED":
	                        case 298:
	                            m.pushAtomId[i] = 298;
	                            break;
	                        case "ATOM_BLOB_LEASED":
	                        case 299:
	                            m.pushAtomId[i] = 299;
	                            break;
	                        case "ATOM_BLOB_OPENED":
	                        case 300:
	                            m.pushAtomId[i] = 300;
	                            break;
	                        case "ATOM_CONTACTS_PROVIDER_STATUS_REPORTED":
	                        case 301:
	                            m.pushAtomId[i] = 301;
	                            break;
	                        case "ATOM_KEYSTORE_KEY_EVENT_REPORTED":
	                        case 302:
	                            m.pushAtomId[i] = 302;
	                            break;
	                        case "ATOM_NETWORK_TETHERING_REPORTED":
	                        case 303:
	                            m.pushAtomId[i] = 303;
	                            break;
	                        case "ATOM_IME_TOUCH_REPORTED":
	                        case 304:
	                            m.pushAtomId[i] = 304;
	                            break;
	                        case "ATOM_UI_INTERACTION_FRAME_INFO_REPORTED":
	                        case 305:
	                            m.pushAtomId[i] = 305;
	                            break;
	                        case "ATOM_UI_ACTION_LATENCY_REPORTED":
	                        case 306:
	                            m.pushAtomId[i] = 306;
	                            break;
	                        case "ATOM_WIFI_DISCONNECT_REPORTED":
	                        case 307:
	                            m.pushAtomId[i] = 307;
	                            break;
	                        case "ATOM_WIFI_CONNECTION_STATE_CHANGED":
	                        case 308:
	                            m.pushAtomId[i] = 308;
	                            break;
	                        case "ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED":
	                        case 309:
	                            m.pushAtomId[i] = 309;
	                            break;
	                        case "ATOM_HDMI_CEC_MESSAGE_REPORTED":
	                        case 310:
	                            m.pushAtomId[i] = 310;
	                            break;
	                        case "ATOM_AIRPLANE_MODE":
	                        case 311:
	                            m.pushAtomId[i] = 311;
	                            break;
	                        case "ATOM_MODEM_RESTART":
	                        case 312:
	                            m.pushAtomId[i] = 312;
	                            break;
	                        case "ATOM_CARRIER_ID_MISMATCH_REPORTED":
	                        case 313:
	                            m.pushAtomId[i] = 313;
	                            break;
	                        case "ATOM_CARRIER_ID_TABLE_UPDATED":
	                        case 314:
	                            m.pushAtomId[i] = 314;
	                            break;
	                        case "ATOM_DATA_STALL_RECOVERY_REPORTED":
	                        case 315:
	                            m.pushAtomId[i] = 315;
	                            break;
	                        case "ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED":
	                        case 316:
	                            m.pushAtomId[i] = 316;
	                            break;
	                        case "ATOM_TLS_HANDSHAKE_REPORTED":
	                        case 317:
	                            m.pushAtomId[i] = 317;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED":
	                        case 318:
	                            m.pushAtomId[i] = 318;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED":
	                        case 319:
	                            m.pushAtomId[i] = 319;
	                            break;
	                        case "ATOM_MEDIAMETRICS_PLAYBACK_REPORTED":
	                        case 320:
	                            m.pushAtomId[i] = 320;
	                            break;
	                        case "ATOM_MEDIA_NETWORK_INFO_CHANGED":
	                        case 321:
	                            m.pushAtomId[i] = 321;
	                            break;
	                        case "ATOM_MEDIA_PLAYBACK_STATE_CHANGED":
	                        case 322:
	                            m.pushAtomId[i] = 322;
	                            break;
	                        case "ATOM_MEDIA_PLAYBACK_ERROR_REPORTED":
	                        case 323:
	                            m.pushAtomId[i] = 323;
	                            break;
	                        case "ATOM_MEDIA_PLAYBACK_TRACK_CHANGED":
	                        case 324:
	                            m.pushAtomId[i] = 324;
	                            break;
	                        case "ATOM_WIFI_SCAN_REPORTED":
	                        case 325:
	                            m.pushAtomId[i] = 325;
	                            break;
	                        case "ATOM_WIFI_PNO_SCAN_REPORTED":
	                        case 326:
	                            m.pushAtomId[i] = 326;
	                            break;
	                        case "ATOM_TIF_TUNE_CHANGED":
	                        case 327:
	                            m.pushAtomId[i] = 327;
	                            break;
	                        case "ATOM_AUTO_ROTATE_REPORTED":
	                        case 328:
	                            m.pushAtomId[i] = 328;
	                            break;
	                        case "ATOM_PERFETTO_TRIGGER":
	                        case 329:
	                            m.pushAtomId[i] = 329;
	                            break;
	                        case "ATOM_TRANSCODING_DATA":
	                        case 330:
	                            m.pushAtomId[i] = 330;
	                            break;
	                        case "ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED":
	                        case 331:
	                            m.pushAtomId[i] = 331;
	                            break;
	                        case "ATOM_DEVICE_ROTATED":
	                        case 333:
	                            m.pushAtomId[i] = 333;
	                            break;
	                        case "ATOM_SIM_SPECIFIC_SETTINGS_RESTORED":
	                        case 334:
	                            m.pushAtomId[i] = 334;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED":
	                        case 335:
	                            m.pushAtomId[i] = 335;
	                            break;
	                        case "ATOM_PIN_STORAGE_EVENT":
	                        case 336:
	                            m.pushAtomId[i] = 336;
	                            break;
	                        case "ATOM_FACE_DOWN_REPORTED":
	                        case 337:
	                            m.pushAtomId[i] = 337;
	                            break;
	                        case "ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED":
	                        case 338:
	                            m.pushAtomId[i] = 338;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_PREPARATION_REPORTED":
	                        case 339:
	                            m.pushAtomId[i] = 339;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED":
	                        case 340:
	                            m.pushAtomId[i] = 340;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_REBOOT_REPORTED":
	                        case 341:
	                            m.pushAtomId[i] = 341;
	                            break;
	                        case "ATOM_BINDER_LATENCY_REPORTED":
	                        case 342:
	                            m.pushAtomId[i] = 342;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED":
	                        case 343:
	                            m.pushAtomId[i] = 343;
	                            break;
	                        case "ATOM_MEDIA_TRANSCODING_SESSION_ENDED":
	                        case 344:
	                            m.pushAtomId[i] = 344;
	                            break;
	                        case "ATOM_MAGNIFICATION_USAGE_REPORTED":
	                        case 345:
	                            m.pushAtomId[i] = 345;
	                            break;
	                        case "ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED":
	                        case 346:
	                            m.pushAtomId[i] = 346;
	                            break;
	                        case "ATOM_APP_SEARCH_CALL_STATS_REPORTED":
	                        case 347:
	                            m.pushAtomId[i] = 347;
	                            break;
	                        case "ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED":
	                        case 348:
	                            m.pushAtomId[i] = 348;
	                            break;
	                        case "ATOM_DEVICE_CONTROL_CHANGED":
	                        case 349:
	                            m.pushAtomId[i] = 349;
	                            break;
	                        case "ATOM_DEVICE_STATE_CHANGED":
	                        case 350:
	                            m.pushAtomId[i] = 350;
	                            break;
	                        case "ATOM_INPUTDEVICE_REGISTERED":
	                        case 351:
	                            m.pushAtomId[i] = 351;
	                            break;
	                        case "ATOM_SMARTSPACE_CARD_REPORTED":
	                        case 352:
	                            m.pushAtomId[i] = 352;
	                            break;
	                        case "ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED":
	                        case 353:
	                            m.pushAtomId[i] = 353;
	                            break;
	                        case "ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED":
	                        case 354:
	                            m.pushAtomId[i] = 354;
	                            break;
	                        case "ATOM_AUTH_ENROLL_ACTION_INVOKED":
	                        case 355:
	                            m.pushAtomId[i] = 355;
	                            break;
	                        case "ATOM_AUTH_DEPRECATED_API_USED":
	                        case 356:
	                            m.pushAtomId[i] = 356;
	                            break;
	                        case "ATOM_UNATTENDED_REBOOT_OCCURRED":
	                        case 357:
	                            m.pushAtomId[i] = 357;
	                            break;
	                        case "ATOM_LONG_REBOOT_BLOCKING_REPORTED":
	                        case 358:
	                            m.pushAtomId[i] = 358;
	                            break;
	                        case "ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED":
	                        case 359:
	                            m.pushAtomId[i] = 359;
	                            break;
	                        case "ATOM_FDTRACK_EVENT_OCCURRED":
	                        case 364:
	                            m.pushAtomId[i] = 364;
	                            break;
	                        case "ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED":
	                        case 365:
	                            m.pushAtomId[i] = 365;
	                            break;
	                        case "ATOM_ALARM_BATCH_DELIVERED":
	                        case 367:
	                            m.pushAtomId[i] = 367;
	                            break;
	                        case "ATOM_ALARM_SCHEDULED":
	                        case 368:
	                            m.pushAtomId[i] = 368;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED":
	                        case 369:
	                            m.pushAtomId[i] = 369;
	                            break;
	                        case "ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED":
	                        case 370:
	                            m.pushAtomId[i] = 370;
	                            break;
	                        case "ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED":
	                        case 371:
	                            m.pushAtomId[i] = 371;
	                            break;
	                        case "ATOM_APP_SEARCH_QUERY_STATS_REPORTED":
	                        case 372:
	                            m.pushAtomId[i] = 372;
	                            break;
	                        case "ATOM_APP_PROCESS_DIED":
	                        case 373:
	                            m.pushAtomId[i] = 373;
	                            break;
	                        case "ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED":
	                        case 374:
	                            m.pushAtomId[i] = 374;
	                            break;
	                        case "ATOM_SLOW_INPUT_EVENT_REPORTED":
	                        case 375:
	                            m.pushAtomId[i] = 375;
	                            break;
	                        case "ATOM_ANR_OCCURRED_PROCESSING_STARTED":
	                        case 376:
	                            m.pushAtomId[i] = 376;
	                            break;
	                        case "ATOM_APP_SEARCH_REMOVE_STATS_REPORTED":
	                        case 377:
	                            m.pushAtomId[i] = 377;
	                            break;
	                        case "ATOM_MEDIA_CODEC_REPORTED":
	                        case 378:
	                            m.pushAtomId[i] = 378;
	                            break;
	                        case "ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION":
	                        case 379:
	                            m.pushAtomId[i] = 379;
	                            break;
	                        case "ATOM_PERMISSION_DETAILS_INTERACTION":
	                        case 380:
	                            m.pushAtomId[i] = 380;
	                            break;
	                        case "ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION":
	                        case 381:
	                            m.pushAtomId[i] = 381;
	                            break;
	                        case "ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION":
	                        case 382:
	                            m.pushAtomId[i] = 382;
	                            break;
	                        case "ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED":
	                        case 383:
	                            m.pushAtomId[i] = 383;
	                            break;
	                        case "ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT":
	                        case 384:
	                            m.pushAtomId[i] = 384;
	                            break;
	                        case "ATOM_APP_COMPAT_STATE_CHANGED":
	                        case 386:
	                            m.pushAtomId[i] = 386;
	                            break;
	                        case "ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED":
	                        case 387:
	                            m.pushAtomId[i] = 387;
	                            break;
	                        case "ATOM_SPLITSCREEN_UI_CHANGED":
	                        case 388:
	                            m.pushAtomId[i] = 388;
	                            break;
	                        case "ATOM_NETWORK_DNS_HANDSHAKE_REPORTED":
	                        case 389:
	                            m.pushAtomId[i] = 389;
	                            break;
	                        case "ATOM_BLUETOOTH_CODE_PATH_COUNTER":
	                        case 390:
	                            m.pushAtomId[i] = 390;
	                            break;
	                        case "ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY":
	                        case 392:
	                            m.pushAtomId[i] = 392;
	                            break;
	                        case "ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED":
	                        case 393:
	                            m.pushAtomId[i] = 393;
	                            break;
	                        case "ATOM_NEURALNETWORKS_COMPILATION_COMPLETED":
	                        case 394:
	                            m.pushAtomId[i] = 394;
	                            break;
	                        case "ATOM_NEURALNETWORKS_EXECUTION_COMPLETED":
	                        case 395:
	                            m.pushAtomId[i] = 395;
	                            break;
	                        case "ATOM_NEURALNETWORKS_COMPILATION_FAILED":
	                        case 396:
	                            m.pushAtomId[i] = 396;
	                            break;
	                        case "ATOM_NEURALNETWORKS_EXECUTION_FAILED":
	                        case 397:
	                            m.pushAtomId[i] = 397;
	                            break;
	                        case "ATOM_CONTEXT_HUB_BOOTED":
	                        case 398:
	                            m.pushAtomId[i] = 398;
	                            break;
	                        case "ATOM_CONTEXT_HUB_RESTARTED":
	                        case 399:
	                            m.pushAtomId[i] = 399;
	                            break;
	                        case "ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED":
	                        case 400:
	                            m.pushAtomId[i] = 400;
	                            break;
	                        case "ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED":
	                        case 401:
	                            m.pushAtomId[i] = 401;
	                            break;
	                        case "ATOM_UWB_SESSION_INITED":
	                        case 402:
	                            m.pushAtomId[i] = 402;
	                            break;
	                        case "ATOM_UWB_SESSION_CLOSED":
	                        case 403:
	                            m.pushAtomId[i] = 403;
	                            break;
	                        case "ATOM_UWB_FIRST_RANGING_RECEIVED":
	                        case 404:
	                            m.pushAtomId[i] = 404;
	                            break;
	                        case "ATOM_UWB_RANGING_MEASUREMENT_RECEIVED":
	                        case 405:
	                            m.pushAtomId[i] = 405;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED":
	                        case 406:
	                            m.pushAtomId[i] = 406;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED":
	                        case 407:
	                            m.pushAtomId[i] = 407;
	                            break;
	                        case "ATOM_CLIPBOARD_CLEARED":
	                        case 408:
	                            m.pushAtomId[i] = 408;
	                            break;
	                        case "ATOM_VM_CREATION_REQUESTED":
	                        case 409:
	                            m.pushAtomId[i] = 409;
	                            break;
	                        case "ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED":
	                        case 410:
	                            m.pushAtomId[i] = 410;
	                            break;
	                        case "ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED":
	                        case 411:
	                            m.pushAtomId[i] = 411;
	                            break;
	                        case "ATOM_APPLICATION_LOCALES_CHANGED":
	                        case 412:
	                            m.pushAtomId[i] = 412;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED":
	                        case 413:
	                            m.pushAtomId[i] = 413;
	                            break;
	                        case "ATOM_FOLD_STATE_DURATION_REPORTED":
	                        case 414:
	                            m.pushAtomId[i] = 414;
	                            break;
	                        case "ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED":
	                        case 415:
	                            m.pushAtomId[i] = 415;
	                            break;
	                        case "ATOM_DISPLAY_HBM_STATE_CHANGED":
	                        case 416:
	                            m.pushAtomId[i] = 416;
	                            break;
	                        case "ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED":
	                        case 417:
	                            m.pushAtomId[i] = 417;
	                            break;
	                        case "ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED":
	                        case 418:
	                            m.pushAtomId[i] = 418;
	                            break;
	                        case "ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED":
	                        case 419:
	                            m.pushAtomId[i] = 419;
	                            break;
	                        case "ATOM_VBMETA_DIGEST_REPORTED":
	                        case 420:
	                            m.pushAtomId[i] = 420;
	                            break;
	                        case "ATOM_APEX_INFO_GATHERED":
	                        case 421:
	                            m.pushAtomId[i] = 421;
	                            break;
	                        case "ATOM_PVM_INFO_GATHERED":
	                        case 422:
	                            m.pushAtomId[i] = 422;
	                            break;
	                        case "ATOM_WEAR_SETTINGS_UI_INTERACTED":
	                        case 423:
	                            m.pushAtomId[i] = 423;
	                            break;
	                        case "ATOM_TRACING_SERVICE_REPORT_EVENT":
	                        case 424:
	                            m.pushAtomId[i] = 424;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED":
	                        case 425:
	                            m.pushAtomId[i] = 425;
	                            break;
	                        case "ATOM_LAUNCHER_LATENCY":
	                        case 426:
	                            m.pushAtomId[i] = 426;
	                            break;
	                        case "ATOM_DROPBOX_ENTRY_DROPPED":
	                        case 427:
	                            m.pushAtomId[i] = 427;
	                            break;
	                        case "ATOM_WIFI_P2P_CONNECTION_REPORTED":
	                        case 428:
	                            m.pushAtomId[i] = 428;
	                            break;
	                        case "ATOM_GAME_STATE_CHANGED":
	                        case 429:
	                            m.pushAtomId[i] = 429;
	                            break;
	                        case "ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED":
	                        case 430:
	                            m.pushAtomId[i] = 430;
	                            break;
	                        case "ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED":
	                        case 431:
	                            m.pushAtomId[i] = 431;
	                            break;
	                        case "ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED":
	                        case 432:
	                            m.pushAtomId[i] = 432;
	                            break;
	                        case "ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED":
	                        case 433:
	                            m.pushAtomId[i] = 433;
	                            break;
	                        case "ATOM_HOTWORD_DETECTOR_EVENTS":
	                        case 434:
	                            m.pushAtomId[i] = 434;
	                            break;
	                        case "ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED":
	                        case 437:
	                            m.pushAtomId[i] = 437;
	                            break;
	                        case "ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED":
	                        case 440:
	                            m.pushAtomId[i] = 440;
	                            break;
	                        case "ATOM_APP_BACKGROUND_RESTRICTIONS_INFO":
	                        case 441:
	                            m.pushAtomId[i] = 441;
	                            break;
	                        case "ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED":
	                        case 442:
	                            m.pushAtomId[i] = 442;
	                            break;
	                        case "ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED":
	                        case 443:
	                            m.pushAtomId[i] = 443;
	                            break;
	                        case "ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED":
	                        case 444:
	                            m.pushAtomId[i] = 444;
	                            break;
	                        case "ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED":
	                        case 445:
	                            m.pushAtomId[i] = 445;
	                            break;
	                        case "ATOM_GNSS_PSDS_DOWNLOAD_REPORTED":
	                        case 446:
	                            m.pushAtomId[i] = 446;
	                            break;
	                        case "ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED":
	                        case 447:
	                            m.pushAtomId[i] = 447;
	                            break;
	                        case "ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED":
	                        case 448:
	                            m.pushAtomId[i] = 448;
	                            break;
	                        case "ATOM_DREAM_UI_EVENT_REPORTED":
	                        case 449:
	                            m.pushAtomId[i] = 449;
	                            break;
	                        case "ATOM_TASK_MANAGER_EVENT_REPORTED":
	                        case 450:
	                            m.pushAtomId[i] = 450;
	                            break;
	                        case "ATOM_CDM_ASSOCIATION_ACTION":
	                        case 451:
	                            m.pushAtomId[i] = 451;
	                            break;
	                        case "ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED":
	                        case 452:
	                            m.pushAtomId[i] = 452;
	                            break;
	                        case "ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED":
	                        case 453:
	                            m.pushAtomId[i] = 453;
	                            break;
	                        case "ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED":
	                        case 454:
	                            m.pushAtomId[i] = 454;
	                            break;
	                        case "ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED":
	                        case 455:
	                            m.pushAtomId[i] = 455;
	                            break;
	                        case "ATOM_UWB_DEVICE_ERROR_REPORTED":
	                        case 456:
	                            m.pushAtomId[i] = 456;
	                            break;
	                        case "ATOM_ISOLATED_COMPILATION_SCHEDULED":
	                        case 457:
	                            m.pushAtomId[i] = 457;
	                            break;
	                        case "ATOM_ISOLATED_COMPILATION_ENDED":
	                        case 458:
	                            m.pushAtomId[i] = 458;
	                            break;
	                        case "ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE":
	                        case 459:
	                            m.pushAtomId[i] = 459;
	                            break;
	                        case "ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED":
	                        case 460:
	                            m.pushAtomId[i] = 460;
	                            break;
	                        case "ATOM_TELEPHONY_ANOMALY_DETECTED":
	                        case 461:
	                            m.pushAtomId[i] = 461;
	                            break;
	                        case "ATOM_LETTERBOX_POSITION_CHANGED":
	                        case 462:
	                            m.pushAtomId[i] = 462;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT":
	                        case 463:
	                            m.pushAtomId[i] = 463;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO":
	                        case 464:
	                            m.pushAtomId[i] = 464;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_TIMING":
	                        case 465:
	                            m.pushAtomId[i] = 465;
	                            break;
	                        case "ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT":
	                        case 466:
	                            m.pushAtomId[i] = 466;
	                            break;
	                        case "ATOM_SYNC_EXEMPTION_OCCURRED":
	                        case 468:
	                            m.pushAtomId[i] = 468;
	                            break;
	                        case "ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED":
	                        case 469:
	                            m.pushAtomId[i] = 469;
	                            break;
	                        case "ATOM_DOCK_STATE_CHANGED":
	                        case 470:
	                            m.pushAtomId[i] = 470;
	                            break;
	                        case "ATOM_SAFETY_SOURCE_STATE_COLLECTED":
	                        case 471:
	                            m.pushAtomId[i] = 471;
	                            break;
	                        case "ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED":
	                        case 472:
	                            m.pushAtomId[i] = 472;
	                            break;
	                        case "ATOM_SAFETY_CENTER_INTERACTION_REPORTED":
	                        case 473:
	                            m.pushAtomId[i] = 473;
	                            break;
	                        case "ATOM_SETTINGS_PROVIDER_SETTING_CHANGED":
	                        case 474:
	                            m.pushAtomId[i] = 474;
	                            break;
	                        case "ATOM_BROADCAST_DELIVERY_EVENT_REPORTED":
	                        case 475:
	                            m.pushAtomId[i] = 475;
	                            break;
	                        case "ATOM_SERVICE_REQUEST_EVENT_REPORTED":
	                        case 476:
	                            m.pushAtomId[i] = 476;
	                            break;
	                        case "ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED":
	                        case 477:
	                            m.pushAtomId[i] = 477;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_NAME_REPORTED":
	                        case 478:
	                            m.pushAtomId[i] = 478;
	                            break;
	                        case "ATOM_CB_CONFIG_UPDATED":
	                        case 479:
	                            m.pushAtomId[i] = 479;
	                            break;
	                        case "ATOM_CB_MODULE_ERROR_REPORTED":
	                        case 480:
	                            m.pushAtomId[i] = 480;
	                            break;
	                        case "ATOM_CB_SERVICE_FEATURE_CHANGED":
	                        case 481:
	                            m.pushAtomId[i] = 481;
	                            break;
	                        case "ATOM_CB_RECEIVER_FEATURE_CHANGED":
	                        case 482:
	                            m.pushAtomId[i] = 482;
	                            break;
	                        case "ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION":
	                        case 484:
	                            m.pushAtomId[i] = 484;
	                            break;
	                        case "ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION":
	                        case 485:
	                            m.pushAtomId[i] = 485;
	                            break;
	                        case "ATOM_PRIVACY_SIGNALS_JOB_FAILURE":
	                        case 486:
	                            m.pushAtomId[i] = 486;
	                            break;
	                        case "ATOM_VIBRATION_REPORTED":
	                        case 487:
	                            m.pushAtomId[i] = 487;
	                            break;
	                        case "ATOM_UWB_RANGING_START":
	                        case 489:
	                            m.pushAtomId[i] = 489;
	                            break;
	                        case "ATOM_APP_COMPACTED_V2":
	                        case 491:
	                            m.pushAtomId[i] = 491;
	                            break;
	                        case "ATOM_DISPLAY_BRIGHTNESS_CHANGED":
	                        case 494:
	                            m.pushAtomId[i] = 494;
	                            break;
	                        case "ATOM_ACTIVITY_ACTION_BLOCKED":
	                        case 495:
	                            m.pushAtomId[i] = 495;
	                            break;
	                        case "ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED":
	                        case 504:
	                            m.pushAtomId[i] = 504;
	                            break;
	                        case "ATOM_VM_BOOTED":
	                        case 505:
	                            m.pushAtomId[i] = 505;
	                            break;
	                        case "ATOM_VM_EXITED":
	                        case 506:
	                            m.pushAtomId[i] = 506;
	                            break;
	                        case "ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED":
	                        case 507:
	                            m.pushAtomId[i] = 507;
	                            break;
	                        case "ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED":
	                        case 508:
	                            m.pushAtomId[i] = 508;
	                            break;
	                        case "ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED":
	                        case 509:
	                            m.pushAtomId[i] = 509;
	                            break;
	                        case "ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED":
	                        case 510:
	                            m.pushAtomId[i] = 510;
	                            break;
	                        case "ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED":
	                        case 511:
	                            m.pushAtomId[i] = 511;
	                            break;
	                        case "ATOM_HEARING_AID_INFO_REPORTED":
	                        case 513:
	                            m.pushAtomId[i] = 513;
	                            break;
	                        case "ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED":
	                        case 514:
	                            m.pushAtomId[i] = 514;
	                            break;
	                        case "ATOM_AMBIENT_MODE_CHANGED":
	                        case 515:
	                            m.pushAtomId[i] = 515;
	                            break;
	                        case "ATOM_ANR_LATENCY_REPORTED":
	                        case 516:
	                            m.pushAtomId[i] = 516;
	                            break;
	                        case "ATOM_RESOURCE_API_INFO":
	                        case 517:
	                            m.pushAtomId[i] = 517;
	                            break;
	                        case "ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED":
	                        case 518:
	                            m.pushAtomId[i] = 518;
	                            break;
	                        case "ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED":
	                        case 519:
	                            m.pushAtomId[i] = 519;
	                            break;
	                        case "ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED":
	                        case 520:
	                            m.pushAtomId[i] = 520;
	                            break;
	                        case "ATOM_AIRPLANE_MODE_SESSION_REPORTED":
	                        case 521:
	                            m.pushAtomId[i] = 521;
	                            break;
	                        case "ATOM_VM_CPU_STATUS_REPORTED":
	                        case 522:
	                            m.pushAtomId[i] = 522;
	                            break;
	                        case "ATOM_VM_MEM_STATUS_REPORTED":
	                        case 523:
	                            m.pushAtomId[i] = 523;
	                            break;
	                        case "ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED":
	                        case 524:
	                            m.pushAtomId[i] = 524;
	                            break;
	                        case "ATOM_DEFAULT_NETWORK_REMATCH_INFO":
	                        case 525:
	                            m.pushAtomId[i] = 525;
	                            break;
	                        case "ATOM_NETWORK_SELECTION_PERFORMANCE":
	                        case 526:
	                            m.pushAtomId[i] = 526;
	                            break;
	                        case "ATOM_NETWORK_NSD_REPORTED":
	                        case 527:
	                            m.pushAtomId[i] = 527;
	                            break;
	                        case "ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED":
	                        case 529:
	                            m.pushAtomId[i] = 529;
	                            break;
	                        case "ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED":
	                        case 530:
	                            m.pushAtomId[i] = 530;
	                            break;
	                        case "ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED":
	                        case 531:
	                            m.pushAtomId[i] = 531;
	                            break;
	                        case "ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED":
	                        case 532:
	                            m.pushAtomId[i] = 532;
	                            break;
	                        case "ATOM_BLUETOOTH_GATT_APP_INFO":
	                        case 533:
	                            m.pushAtomId[i] = 533;
	                            break;
	                        case "ATOM_BRIGHTNESS_CONFIGURATION_UPDATED":
	                        case 534:
	                            m.pushAtomId[i] = 534;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED":
	                        case 538:
	                            m.pushAtomId[i] = 538;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED":
	                        case 539:
	                            m.pushAtomId[i] = 539;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED":
	                        case 540:
	                            m.pushAtomId[i] = 540;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED":
	                        case 541:
	                            m.pushAtomId[i] = 541;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY":
	                        case 542:
	                            m.pushAtomId[i] = 542;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY":
	                        case 543:
	                            m.pushAtomId[i] = 543;
	                            break;
	                        case "ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED":
	                        case 544:
	                            m.pushAtomId[i] = 544;
	                            break;
	                        case "ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED":
	                        case 545:
	                            m.pushAtomId[i] = 545;
	                            break;
	                        case "ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED":
	                        case 546:
	                            m.pushAtomId[i] = 546;
	                            break;
	                        case "ATOM_LAUNCHER_IMPRESSION_EVENT":
	                        case 547:
	                            m.pushAtomId[i] = 547;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY":
	                        case 549:
	                            m.pushAtomId[i] = 549;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_EDITED":
	                        case 551:
	                            m.pushAtomId[i] = 551;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED":
	                        case 552:
	                            m.pushAtomId[i] = 552;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED":
	                        case 553:
	                            m.pushAtomId[i] = 553;
	                            break;
	                        case "ATOM_PACKAGE_UNINSTALLATION_REPORTED":
	                        case 554:
	                            m.pushAtomId[i] = 554;
	                            break;
	                        case "ATOM_GAME_MODE_CHANGED":
	                        case 555:
	                            m.pushAtomId[i] = 555;
	                            break;
	                        case "ATOM_GAME_MODE_CONFIGURATION_CHANGED":
	                        case 556:
	                            m.pushAtomId[i] = 556;
	                            break;
	                        case "ATOM_BEDTIME_MODE_STATE_CHANGED":
	                        case 557:
	                            m.pushAtomId[i] = 557;
	                            break;
	                        case "ATOM_NETWORK_SLICE_SESSION_ENDED":
	                        case 558:
	                            m.pushAtomId[i] = 558;
	                            break;
	                        case "ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED":
	                        case 559:
	                            m.pushAtomId[i] = 559;
	                            break;
	                        case "ATOM_NFC_TAG_TYPE_OCCURRED":
	                        case 560:
	                            m.pushAtomId[i] = 560;
	                            break;
	                        case "ATOM_NFC_AID_CONFLICT_OCCURRED":
	                        case 561:
	                            m.pushAtomId[i] = 561;
	                            break;
	                        case "ATOM_NFC_READER_CONFLICT_OCCURRED":
	                        case 562:
	                            m.pushAtomId[i] = 562;
	                            break;
	                        case "ATOM_WS_TILE_LIST_CHANGED":
	                        case 563:
	                            m.pushAtomId[i] = 563;
	                            break;
	                        case "ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION":
	                        case 564:
	                            m.pushAtomId[i] = 564;
	                            break;
	                        case "ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED":
	                        case 566:
	                            m.pushAtomId[i] = 566;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED":
	                        case 567:
	                            m.pushAtomId[i] = 567;
	                            break;
	                        case "ATOM_MEDIA_DRM_CREATED":
	                        case 568:
	                            m.pushAtomId[i] = 568;
	                            break;
	                        case "ATOM_MEDIA_DRM_ERRORED":
	                        case 569:
	                            m.pushAtomId[i] = 569;
	                            break;
	                        case "ATOM_MEDIA_DRM_SESSION_OPENED":
	                        case 570:
	                            m.pushAtomId[i] = 570;
	                            break;
	                        case "ATOM_MEDIA_DRM_SESSION_CLOSED":
	                        case 571:
	                            m.pushAtomId[i] = 571;
	                            break;
	                        case "ATOM_USER_SELECTED_RESOLUTION":
	                        case 572:
	                            m.pushAtomId[i] = 572;
	                            break;
	                        case "ATOM_UNSAFE_INTENT_EVENT_REPORTED":
	                        case 573:
	                            m.pushAtomId[i] = 573;
	                            break;
	                        case "ATOM_PERFORMANCE_HINT_SESSION_REPORTED":
	                        case 574:
	                            m.pushAtomId[i] = 574;
	                            break;
	                        case "ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED":
	                        case 576:
	                            m.pushAtomId[i] = 576;
	                            break;
	                        case "ATOM_BIOMETRIC_TOUCH_REPORTED":
	                        case 577:
	                            m.pushAtomId[i] = 577;
	                            break;
	                        case "ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED":
	                        case 578:
	                            m.pushAtomId[i] = 578;
	                            break;
	                        case "ATOM_LOCATION_ENABLED_STATE_CHANGED":
	                        case 580:
	                            m.pushAtomId[i] = 580;
	                            break;
	                        case "ATOM_IME_REQUEST_FINISHED":
	                        case 581:
	                            m.pushAtomId[i] = 581;
	                            break;
	                        case "ATOM_USB_COMPLIANCE_WARNINGS_REPORTED":
	                        case 582:
	                            m.pushAtomId[i] = 582;
	                            break;
	                        case "ATOM_APP_SUPPORTED_LOCALES_CHANGED":
	                        case 583:
	                            m.pushAtomId[i] = 583;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED":
	                        case 586:
	                            m.pushAtomId[i] = 586;
	                            break;
	                        case "ATOM_BIOMETRIC_PROPERTIES_COLLECTED":
	                        case 587:
	                            m.pushAtomId[i] = 587;
	                            break;
	                        case "ATOM_KERNEL_WAKEUP_ATTRIBUTED":
	                        case 588:
	                            m.pushAtomId[i] = 588;
	                            break;
	                        case "ATOM_SCREEN_STATE_CHANGED_V2":
	                        case 589:
	                            m.pushAtomId[i] = 589;
	                            break;
	                        case "ATOM_WS_BACKUP_ACTION_REPORTED":
	                        case 590:
	                            m.pushAtomId[i] = 590;
	                            break;
	                        case "ATOM_WS_RESTORE_ACTION_REPORTED":
	                        case 591:
	                            m.pushAtomId[i] = 591;
	                            break;
	                        case "ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED":
	                        case 592:
	                            m.pushAtomId[i] = 592;
	                            break;
	                        case "ATOM_MEDIA_SESSION_UPDATED":
	                        case 594:
	                            m.pushAtomId[i] = 594;
	                            break;
	                        case "ATOM_WEAR_OOBE_STATE_CHANGED":
	                        case 595:
	                            m.pushAtomId[i] = 595;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_UPDATED":
	                        case 596:
	                            m.pushAtomId[i] = 596;
	                            break;
	                        case "ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED":
	                        case 601:
	                            m.pushAtomId[i] = 601;
	                            break;
	                        case "ATOM_WS_COMPLICATION_TAPPED":
	                        case 602:
	                            m.pushAtomId[i] = 602;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_BLOCKING":
	                        case 780:
	                            m.pushAtomId[i] = 780;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_BRIDGEMODE_UPDATED":
	                        case 822:
	                            m.pushAtomId[i] = 822;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_DISMISSAL_ACTIONED":
	                        case 823:
	                            m.pushAtomId[i] = 823;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_ACTIONED":
	                        case 824:
	                            m.pushAtomId[i] = 824;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_LATENCY":
	                        case 880:
	                            m.pushAtomId[i] = 880;
	                            break;
	                        case "ATOM_WIFI_BYTES_TRANSFER":
	                        case 10000:
	                            m.pushAtomId[i] = 10000;
	                            break;
	                        case "ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG":
	                        case 10001:
	                            m.pushAtomId[i] = 10001;
	                            break;
	                        case "ATOM_MOBILE_BYTES_TRANSFER":
	                        case 10002:
	                            m.pushAtomId[i] = 10002;
	                            break;
	                        case "ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG":
	                        case 10003:
	                            m.pushAtomId[i] = 10003;
	                            break;
	                        case "ATOM_BLUETOOTH_BYTES_TRANSFER":
	                        case 10006:
	                            m.pushAtomId[i] = 10006;
	                            break;
	                        case "ATOM_KERNEL_WAKELOCK":
	                        case 10004:
	                            m.pushAtomId[i] = 10004;
	                            break;
	                        case "ATOM_SUBSYSTEM_SLEEP_STATE":
	                        case 10005:
	                            m.pushAtomId[i] = 10005;
	                            break;
	                        case "ATOM_CPU_TIME_PER_UID":
	                        case 10009:
	                            m.pushAtomId[i] = 10009;
	                            break;
	                        case "ATOM_CPU_TIME_PER_UID_FREQ":
	                        case 10010:
	                            m.pushAtomId[i] = 10010;
	                            break;
	                        case "ATOM_WIFI_ACTIVITY_INFO":
	                        case 10011:
	                            m.pushAtomId[i] = 10011;
	                            break;
	                        case "ATOM_MODEM_ACTIVITY_INFO":
	                        case 10012:
	                            m.pushAtomId[i] = 10012;
	                            break;
	                        case "ATOM_BLUETOOTH_ACTIVITY_INFO":
	                        case 10007:
	                            m.pushAtomId[i] = 10007;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_STATE":
	                        case 10013:
	                            m.pushAtomId[i] = 10013;
	                            break;
	                        case "ATOM_SYSTEM_ELAPSED_REALTIME":
	                        case 10014:
	                            m.pushAtomId[i] = 10014;
	                            break;
	                        case "ATOM_SYSTEM_UPTIME":
	                        case 10015:
	                            m.pushAtomId[i] = 10015;
	                            break;
	                        case "ATOM_CPU_ACTIVE_TIME":
	                        case 10016:
	                            m.pushAtomId[i] = 10016;
	                            break;
	                        case "ATOM_CPU_CLUSTER_TIME":
	                        case 10017:
	                            m.pushAtomId[i] = 10017;
	                            break;
	                        case "ATOM_DISK_SPACE":
	                        case 10018:
	                            m.pushAtomId[i] = 10018;
	                            break;
	                        case "ATOM_REMAINING_BATTERY_CAPACITY":
	                        case 10019:
	                            m.pushAtomId[i] = 10019;
	                            break;
	                        case "ATOM_FULL_BATTERY_CAPACITY":
	                        case 10020:
	                            m.pushAtomId[i] = 10020;
	                            break;
	                        case "ATOM_TEMPERATURE":
	                        case 10021:
	                            m.pushAtomId[i] = 10021;
	                            break;
	                        case "ATOM_BINDER_CALLS":
	                        case 10022:
	                            m.pushAtomId[i] = 10022;
	                            break;
	                        case "ATOM_BINDER_CALLS_EXCEPTIONS":
	                        case 10023:
	                            m.pushAtomId[i] = 10023;
	                            break;
	                        case "ATOM_LOOPER_STATS":
	                        case 10024:
	                            m.pushAtomId[i] = 10024;
	                            break;
	                        case "ATOM_DISK_STATS":
	                        case 10025:
	                            m.pushAtomId[i] = 10025;
	                            break;
	                        case "ATOM_DIRECTORY_USAGE":
	                        case 10026:
	                            m.pushAtomId[i] = 10026;
	                            break;
	                        case "ATOM_APP_SIZE":
	                        case 10027:
	                            m.pushAtomId[i] = 10027;
	                            break;
	                        case "ATOM_CATEGORY_SIZE":
	                        case 10028:
	                            m.pushAtomId[i] = 10028;
	                            break;
	                        case "ATOM_PROC_STATS":
	                        case 10029:
	                            m.pushAtomId[i] = 10029;
	                            break;
	                        case "ATOM_BATTERY_VOLTAGE":
	                        case 10030:
	                            m.pushAtomId[i] = 10030;
	                            break;
	                        case "ATOM_NUM_FINGERPRINTS_ENROLLED":
	                        case 10031:
	                            m.pushAtomId[i] = 10031;
	                            break;
	                        case "ATOM_DISK_IO":
	                        case 10032:
	                            m.pushAtomId[i] = 10032;
	                            break;
	                        case "ATOM_POWER_PROFILE":
	                        case 10033:
	                            m.pushAtomId[i] = 10033;
	                            break;
	                        case "ATOM_PROC_STATS_PKG_PROC":
	                        case 10034:
	                            m.pushAtomId[i] = 10034;
	                            break;
	                        case "ATOM_PROCESS_CPU_TIME":
	                        case 10035:
	                            m.pushAtomId[i] = 10035;
	                            break;
	                        case "ATOM_CPU_TIME_PER_THREAD_FREQ":
	                        case 10037:
	                            m.pushAtomId[i] = 10037;
	                            break;
	                        case "ATOM_ON_DEVICE_POWER_MEASUREMENT":
	                        case 10038:
	                            m.pushAtomId[i] = 10038;
	                            break;
	                        case "ATOM_DEVICE_CALCULATED_POWER_USE":
	                        case 10039:
	                            m.pushAtomId[i] = 10039;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_HIGH_WATER_MARK":
	                        case 10042:
	                            m.pushAtomId[i] = 10042;
	                            break;
	                        case "ATOM_BATTERY_LEVEL":
	                        case 10043:
	                            m.pushAtomId[i] = 10043;
	                            break;
	                        case "ATOM_BUILD_INFORMATION":
	                        case 10044:
	                            m.pushAtomId[i] = 10044;
	                            break;
	                        case "ATOM_BATTERY_CYCLE_COUNT":
	                        case 10045:
	                            m.pushAtomId[i] = 10045;
	                            break;
	                        case "ATOM_DEBUG_ELAPSED_CLOCK":
	                        case 10046:
	                            m.pushAtomId[i] = 10046;
	                            break;
	                        case "ATOM_DEBUG_FAILING_ELAPSED_CLOCK":
	                        case 10047:
	                            m.pushAtomId[i] = 10047;
	                            break;
	                        case "ATOM_NUM_FACES_ENROLLED":
	                        case 10048:
	                            m.pushAtomId[i] = 10048;
	                            break;
	                        case "ATOM_ROLE_HOLDER":
	                        case 10049:
	                            m.pushAtomId[i] = 10049;
	                            break;
	                        case "ATOM_DANGEROUS_PERMISSION_STATE":
	                        case 10050:
	                            m.pushAtomId[i] = 10050;
	                            break;
	                        case "ATOM_TRAIN_INFO":
	                        case 10051:
	                            m.pushAtomId[i] = 10051;
	                            break;
	                        case "ATOM_TIME_ZONE_DATA_INFO":
	                        case 10052:
	                            m.pushAtomId[i] = 10052;
	                            break;
	                        case "ATOM_EXTERNAL_STORAGE_INFO":
	                        case 10053:
	                            m.pushAtomId[i] = 10053;
	                            break;
	                        case "ATOM_GPU_STATS_GLOBAL_INFO":
	                        case 10054:
	                            m.pushAtomId[i] = 10054;
	                            break;
	                        case "ATOM_GPU_STATS_APP_INFO":
	                        case 10055:
	                            m.pushAtomId[i] = 10055;
	                            break;
	                        case "ATOM_SYSTEM_ION_HEAP_SIZE":
	                        case 10056:
	                            m.pushAtomId[i] = 10056;
	                            break;
	                        case "ATOM_APPS_ON_EXTERNAL_STORAGE_INFO":
	                        case 10057:
	                            m.pushAtomId[i] = 10057;
	                            break;
	                        case "ATOM_FACE_SETTINGS":
	                        case 10058:
	                            m.pushAtomId[i] = 10058;
	                            break;
	                        case "ATOM_COOLING_DEVICE":
	                        case 10059:
	                            m.pushAtomId[i] = 10059;
	                            break;
	                        case "ATOM_APP_OPS":
	                        case 10060:
	                            m.pushAtomId[i] = 10060;
	                            break;
	                        case "ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE":
	                        case 10061:
	                            m.pushAtomId[i] = 10061;
	                            break;
	                        case "ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO":
	                        case 10062:
	                            m.pushAtomId[i] = 10062;
	                            break;
	                        case "ATOM_SURFACEFLINGER_STATS_LAYER_INFO":
	                        case 10063:
	                            m.pushAtomId[i] = 10063;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_SNAPSHOT":
	                        case 10064:
	                            m.pushAtomId[i] = 10064;
	                            break;
	                        case "ATOM_VMS_CLIENT_STATS":
	                        case 10065:
	                            m.pushAtomId[i] = 10065;
	                            break;
	                        case "ATOM_NOTIFICATION_REMOTE_VIEWS":
	                        case 10066:
	                            m.pushAtomId[i] = 10066;
	                            break;
	                        case "ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED":
	                        case 10067:
	                            m.pushAtomId[i] = 10067;
	                            break;
	                        case "ATOM_GRAPHICS_STATS":
	                        case 10068:
	                            m.pushAtomId[i] = 10068;
	                            break;
	                        case "ATOM_RUNTIME_APP_OP_ACCESS":
	                        case 10069:
	                            m.pushAtomId[i] = 10069;
	                            break;
	                        case "ATOM_ION_HEAP_SIZE":
	                        case 10070:
	                            m.pushAtomId[i] = 10070;
	                            break;
	                        case "ATOM_PACKAGE_NOTIFICATION_PREFERENCES":
	                        case 10071:
	                            m.pushAtomId[i] = 10071;
	                            break;
	                        case "ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES":
	                        case 10072:
	                            m.pushAtomId[i] = 10072;
	                            break;
	                        case "ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES":
	                        case 10073:
	                            m.pushAtomId[i] = 10073;
	                            break;
	                        case "ATOM_GNSS_STATS":
	                        case 10074:
	                            m.pushAtomId[i] = 10074;
	                            break;
	                        case "ATOM_ATTRIBUTED_APP_OPS":
	                        case 10075:
	                            m.pushAtomId[i] = 10075;
	                            break;
	                        case "ATOM_VOICE_CALL_SESSION":
	                        case 10076:
	                            m.pushAtomId[i] = 10076;
	                            break;
	                        case "ATOM_VOICE_CALL_RAT_USAGE":
	                        case 10077:
	                            m.pushAtomId[i] = 10077;
	                            break;
	                        case "ATOM_SIM_SLOT_STATE":
	                        case 10078:
	                            m.pushAtomId[i] = 10078;
	                            break;
	                        case "ATOM_SUPPORTED_RADIO_ACCESS_FAMILY":
	                        case 10079:
	                            m.pushAtomId[i] = 10079;
	                            break;
	                        case "ATOM_SETTING_SNAPSHOT":
	                        case 10080:
	                            m.pushAtomId[i] = 10080;
	                            break;
	                        case "ATOM_BLOB_INFO":
	                        case 10081:
	                            m.pushAtomId[i] = 10081;
	                            break;
	                        case "ATOM_DATA_USAGE_BYTES_TRANSFER":
	                        case 10082:
	                            m.pushAtomId[i] = 10082;
	                            break;
	                        case "ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED":
	                        case 10083:
	                            m.pushAtomId[i] = 10083;
	                            break;
	                        case "ATOM_DND_MODE_RULE":
	                        case 10084:
	                            m.pushAtomId[i] = 10084;
	                            break;
	                        case "ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS":
	                        case 10085:
	                            m.pushAtomId[i] = 10085;
	                            break;
	                        case "ATOM_INCOMING_SMS":
	                        case 10086:
	                            m.pushAtomId[i] = 10086;
	                            break;
	                        case "ATOM_OUTGOING_SMS":
	                        case 10087:
	                            m.pushAtomId[i] = 10087;
	                            break;
	                        case "ATOM_CARRIER_ID_TABLE_VERSION":
	                        case 10088:
	                            m.pushAtomId[i] = 10088;
	                            break;
	                        case "ATOM_DATA_CALL_SESSION":
	                        case 10089:
	                            m.pushAtomId[i] = 10089;
	                            break;
	                        case "ATOM_CELLULAR_SERVICE_STATE":
	                        case 10090:
	                            m.pushAtomId[i] = 10090;
	                            break;
	                        case "ATOM_CELLULAR_DATA_SERVICE_SWITCH":
	                        case 10091:
	                            m.pushAtomId[i] = 10091;
	                            break;
	                        case "ATOM_SYSTEM_MEMORY":
	                        case 10092:
	                            m.pushAtomId[i] = 10092;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_TERMINATION":
	                        case 10093:
	                            m.pushAtomId[i] = 10093;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_STATS":
	                        case 10094:
	                            m.pushAtomId[i] = 10094;
	                            break;
	                        case "ATOM_CPU_TIME_PER_CLUSTER_FREQ":
	                        case 10095:
	                            m.pushAtomId[i] = 10095;
	                            break;
	                        case "ATOM_CPU_CYCLES_PER_UID_CLUSTER":
	                        case 10096:
	                            m.pushAtomId[i] = 10096;
	                            break;
	                        case "ATOM_DEVICE_ROTATED_DATA":
	                        case 10097:
	                            m.pushAtomId[i] = 10097;
	                            break;
	                        case "ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER":
	                        case 10098:
	                            m.pushAtomId[i] = 10098;
	                            break;
	                        case "ATOM_MEDIA_DRM_ACTIVITY_INFO":
	                        case 10099:
	                            m.pushAtomId[i] = 10099;
	                            break;
	                        case "ATOM_OEM_MANAGED_BYTES_TRANSFER":
	                        case 10100:
	                            m.pushAtomId[i] = 10100;
	                            break;
	                        case "ATOM_GNSS_POWER_STATS":
	                        case 10101:
	                            m.pushAtomId[i] = 10101;
	                            break;
	                        case "ATOM_TIME_ZONE_DETECTOR_STATE":
	                        case 10102:
	                            m.pushAtomId[i] = 10102;
	                            break;
	                        case "ATOM_KEYSTORE2_STORAGE_STATS":
	                        case 10103:
	                            m.pushAtomId[i] = 10103;
	                            break;
	                        case "ATOM_RKP_POOL_STATS":
	                        case 10104:
	                            m.pushAtomId[i] = 10104;
	                            break;
	                        case "ATOM_PROCESS_DMABUF_MEMORY":
	                        case 10105:
	                            m.pushAtomId[i] = 10105;
	                            break;
	                        case "ATOM_PENDING_ALARM_INFO":
	                        case 10106:
	                            m.pushAtomId[i] = 10106;
	                            break;
	                        case "ATOM_USER_LEVEL_HIBERNATED_APPS":
	                        case 10107:
	                            m.pushAtomId[i] = 10107;
	                            break;
	                        case "ATOM_LAUNCHER_LAYOUT_SNAPSHOT":
	                        case 10108:
	                            m.pushAtomId[i] = 10108;
	                            break;
	                        case "ATOM_GLOBAL_HIBERNATED_APPS":
	                        case 10109:
	                            m.pushAtomId[i] = 10109;
	                            break;
	                        case "ATOM_INPUT_EVENT_LATENCY_SKETCH":
	                        case 10110:
	                            m.pushAtomId[i] = 10110;
	                            break;
	                        case "ATOM_BATTERY_USAGE_STATS_BEFORE_RESET":
	                        case 10111:
	                            m.pushAtomId[i] = 10111;
	                            break;
	                        case "ATOM_BATTERY_USAGE_STATS_SINCE_RESET":
	                        case 10112:
	                            m.pushAtomId[i] = 10112;
	                            break;
	                        case "ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL":
	                        case 10113:
	                            m.pushAtomId[i] = 10113;
	                            break;
	                        case "ATOM_INSTALLED_INCREMENTAL_PACKAGE":
	                        case 10114:
	                            m.pushAtomId[i] = 10114;
	                            break;
	                        case "ATOM_TELEPHONY_NETWORK_REQUESTS":
	                        case 10115:
	                            m.pushAtomId[i] = 10115;
	                            break;
	                        case "ATOM_APP_SEARCH_STORAGE_INFO":
	                        case 10116:
	                            m.pushAtomId[i] = 10116;
	                            break;
	                        case "ATOM_VMSTAT":
	                        case 10117:
	                            m.pushAtomId[i] = 10117;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO":
	                        case 10118:
	                            m.pushAtomId[i] = 10118;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO":
	                        case 10119:
	                            m.pushAtomId[i] = 10119;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO":
	                        case 10120:
	                            m.pushAtomId[i] = 10120;
	                            break;
	                        case "ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW":
	                        case 10121:
	                            m.pushAtomId[i] = 10121;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO":
	                        case 10122:
	                            m.pushAtomId[i] = 10122;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO":
	                        case 10123:
	                            m.pushAtomId[i] = 10123;
	                            break;
	                        case "ATOM_RKP_ERROR_STATS":
	                        case 10124:
	                            m.pushAtomId[i] = 10124;
	                            break;
	                        case "ATOM_KEYSTORE2_CRASH_STATS":
	                        case 10125:
	                            m.pushAtomId[i] = 10125;
	                            break;
	                        case "ATOM_VENDOR_APEX_INFO":
	                        case 10126:
	                            m.pushAtomId[i] = 10126;
	                            break;
	                        case "ATOM_ACCESSIBILITY_SHORTCUT_STATS":
	                        case 10127:
	                            m.pushAtomId[i] = 10127;
	                            break;
	                        case "ATOM_ACCESSIBILITY_FLOATING_MENU_STATS":
	                        case 10128:
	                            m.pushAtomId[i] = 10128;
	                            break;
	                        case "ATOM_DATA_USAGE_BYTES_TRANSFER_V2":
	                        case 10129:
	                            m.pushAtomId[i] = 10129;
	                            break;
	                        case "ATOM_MEDIA_CAPABILITIES":
	                        case 10130:
	                            m.pushAtomId[i] = 10130;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY":
	                        case 10131:
	                            m.pushAtomId[i] = 10131;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY":
	                        case 10132:
	                            m.pushAtomId[i] = 10132;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS":
	                        case 10133:
	                            m.pushAtomId[i] = 10133;
	                            break;
	                        case "ATOM_RCS_CLIENT_PROVISIONING_STATS":
	                        case 10134:
	                            m.pushAtomId[i] = 10134;
	                            break;
	                        case "ATOM_RCS_ACS_PROVISIONING_STATS":
	                        case 10135:
	                            m.pushAtomId[i] = 10135;
	                            break;
	                        case "ATOM_SIP_DELEGATE_STATS":
	                        case 10136:
	                            m.pushAtomId[i] = 10136;
	                            break;
	                        case "ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS":
	                        case 10137:
	                            m.pushAtomId[i] = 10137;
	                            break;
	                        case "ATOM_SIP_MESSAGE_RESPONSE":
	                        case 10138:
	                            m.pushAtomId[i] = 10138;
	                            break;
	                        case "ATOM_SIP_TRANSPORT_SESSION":
	                        case 10139:
	                            m.pushAtomId[i] = 10139;
	                            break;
	                        case "ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT":
	                        case 10140:
	                            m.pushAtomId[i] = 10140;
	                            break;
	                        case "ATOM_IMS_DEDICATED_BEARER_EVENT":
	                        case 10141:
	                            m.pushAtomId[i] = 10141;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS":
	                        case 10142:
	                            m.pushAtomId[i] = 10142;
	                            break;
	                        case "ATOM_UCE_EVENT_STATS":
	                        case 10143:
	                            m.pushAtomId[i] = 10143;
	                            break;
	                        case "ATOM_PRESENCE_NOTIFY_EVENT":
	                        case 10144:
	                            m.pushAtomId[i] = 10144;
	                            break;
	                        case "ATOM_GBA_EVENT":
	                        case 10145:
	                            m.pushAtomId[i] = 10145;
	                            break;
	                        case "ATOM_PER_SIM_STATUS":
	                        case 10146:
	                            m.pushAtomId[i] = 10146;
	                            break;
	                        case "ATOM_GPU_WORK_PER_UID":
	                        case 10147:
	                            m.pushAtomId[i] = 10147;
	                            break;
	                        case "ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE":
	                        case 10148:
	                            m.pushAtomId[i] = 10148;
	                            break;
	                        case "ATOM_SIGNED_PARTITION_INFO":
	                        case 10149:
	                            m.pushAtomId[i] = 10149;
	                            break;
	                        case "ATOM_PINNED_FILE_SIZES_PER_PACKAGE":
	                        case 10150:
	                            m.pushAtomId[i] = 10150;
	                            break;
	                        case "ATOM_PENDING_INTENTS_PER_PACKAGE":
	                        case 10151:
	                            m.pushAtomId[i] = 10151;
	                            break;
	                        case "ATOM_USER_INFO":
	                        case 10152:
	                            m.pushAtomId[i] = 10152;
	                            break;
	                        case "ATOM_TELEPHONY_NETWORK_REQUESTS_V2":
	                        case 10153:
	                            m.pushAtomId[i] = 10153;
	                            break;
	                        case "ATOM_DEVICE_TELEPHONY_PROPERTIES":
	                        case 10154:
	                            m.pushAtomId[i] = 10154;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS":
	                        case 10155:
	                            m.pushAtomId[i] = 10155;
	                            break;
	                        case "ATOM_SAFETY_STATE":
	                        case 10156:
	                            m.pushAtomId[i] = 10156;
	                            break;
	                        case "ATOM_INCOMING_MMS":
	                        case 10157:
	                            m.pushAtomId[i] = 10157;
	                            break;
	                        case "ATOM_OUTGOING_MMS":
	                        case 10158:
	                            m.pushAtomId[i] = 10158;
	                            break;
	                        case "ATOM_MULTI_USER_INFO":
	                        case 10160:
	                            m.pushAtomId[i] = 10160;
	                            break;
	                        case "ATOM_NETWORK_BPF_MAP_INFO":
	                        case 10161:
	                            m.pushAtomId[i] = 10161;
	                            break;
	                        case "ATOM_OUTGOING_SHORT_CODE_SMS":
	                        case 10162:
	                            m.pushAtomId[i] = 10162;
	                            break;
	                        case "ATOM_CONNECTIVITY_STATE_SAMPLE":
	                        case 10163:
	                            m.pushAtomId[i] = 10163;
	                            break;
	                        case "ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO":
	                        case 10164:
	                            m.pushAtomId[i] = 10164;
	                            break;
	                        case "ATOM_GAME_MODE_INFO":
	                        case 10165:
	                            m.pushAtomId[i] = 10165;
	                            break;
	                        case "ATOM_GAME_MODE_CONFIGURATION":
	                        case 10166:
	                            m.pushAtomId[i] = 10166;
	                            break;
	                        case "ATOM_GAME_MODE_LISTENER":
	                        case 10167:
	                            m.pushAtomId[i] = 10167;
	                            break;
	                        case "ATOM_NETWORK_SLICE_REQUEST_COUNT":
	                        case 10168:
	                            m.pushAtomId[i] = 10168;
	                            break;
	                        case "ATOM_WS_TILE_SNAPSHOT":
	                        case 10169:
	                            m.pushAtomId[i] = 10169;
	                            break;
	                        case "ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT":
	                        case 10170:
	                            m.pushAtomId[i] = 10170;
	                            break;
	                        case "ATOM_PROCESS_STATE":
	                        case 10171:
	                            m.pushAtomId[i] = 10171;
	                            break;
	                        case "ATOM_PROCESS_ASSOCIATION":
	                        case 10172:
	                            m.pushAtomId[i] = 10172;
	                            break;
	                        case "ATOM_ADPF_SYSTEM_COMPONENT_INFO":
	                        case 10173:
	                            m.pushAtomId[i] = 10173;
	                            break;
	                        case "ATOM_NOTIFICATION_MEMORY_USE":
	                        case 10174:
	                            m.pushAtomId[i] = 10174;
	                            break;
	                        case "ATOM_HDR_CAPABILITIES":
	                        case 10175:
	                            m.pushAtomId[i] = 10175;
	                            break;
	                        case "ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT":
	                        case 10176:
	                            m.pushAtomId[i] = 10176;
	                            break;
	                        case "ATOM_ADAPTIVE_AUTH_UNLOCK_AFTER_LOCK_REPORTED":
	                        case 820:
	                            m.pushAtomId[i] = 820;
	                            break;
	                        case "ATOM_THERMAL_STATUS_CALLED":
	                        case 772:
	                            m.pushAtomId[i] = 772;
	                            break;
	                        case "ATOM_THERMAL_HEADROOM_CALLED":
	                        case 773:
	                            m.pushAtomId[i] = 773;
	                            break;
	                        case "ATOM_THERMAL_HEADROOM_THRESHOLDS_CALLED":
	                        case 774:
	                            m.pushAtomId[i] = 774;
	                            break;
	                        case "ATOM_ADPF_HINT_SESSION_TID_CLEANUP":
	                        case 839:
	                            m.pushAtomId[i] = 839;
	                            break;
	                        case "ATOM_THERMAL_HEADROOM_THRESHOLDS":
	                        case 10201:
	                            m.pushAtomId[i] = 10201;
	                            break;
	                        case "ATOM_ADPF_SESSION_SNAPSHOT":
	                        case 10218:
	                            m.pushAtomId[i] = 10218;
	                            break;
	                        case "ATOM_JSSCRIPTENGINE_LATENCY_REPORTED":
	                        case 483:
	                            m.pushAtomId[i] = 483;
	                            break;
	                        case "ATOM_AD_SERVICES_API_CALLED":
	                        case 435:
	                            m.pushAtomId[i] = 435;
	                            break;
	                        case "ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED":
	                        case 436:
	                            m.pushAtomId[i] = 436;
	                            break;
	                        case "ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED":
	                        case 490:
	                            m.pushAtomId[i] = 490;
	                            break;
	                        case "ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED":
	                        case 502:
	                            m.pushAtomId[i] = 502;
	                            break;
	                        case "ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED":
	                        case 493:
	                            m.pushAtomId[i] = 493;
	                            break;
	                        case "ATOM_BACKGROUND_FETCH_PROCESS_REPORTED":
	                        case 496:
	                            m.pushAtomId[i] = 496;
	                            break;
	                        case "ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED":
	                        case 497:
	                            m.pushAtomId[i] = 497;
	                            break;
	                        case "ATOM_RUN_AD_BIDDING_PROCESS_REPORTED":
	                        case 498:
	                            m.pushAtomId[i] = 498;
	                            break;
	                        case "ATOM_RUN_AD_SCORING_PROCESS_REPORTED":
	                        case 499:
	                            m.pushAtomId[i] = 499;
	                            break;
	                        case "ATOM_RUN_AD_SELECTION_PROCESS_REPORTED":
	                        case 500:
	                            m.pushAtomId[i] = 500;
	                            break;
	                        case "ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED":
	                        case 501:
	                            m.pushAtomId[i] = 501;
	                            break;
	                        case "ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED":
	                        case 503:
	                            m.pushAtomId[i] = 503;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS":
	                        case 512:
	                            m.pushAtomId[i] = 512;
	                            break;
	                        case "ATOM_AD_SERVICES_GET_TOPICS_REPORTED":
	                        case 535:
	                            m.pushAtomId[i] = 535;
	                            break;
	                        case "ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED":
	                        case 536:
	                            m.pushAtomId[i] = 536;
	                            break;
	                        case "ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED":
	                        case 537:
	                            m.pushAtomId[i] = 537;
	                            break;
	                        case "ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED":
	                        case 598:
	                            m.pushAtomId[i] = 598;
	                            break;
	                        case "ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED":
	                        case 599:
	                            m.pushAtomId[i] = 599;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS":
	                        case 640:
	                            m.pushAtomId[i] = 640;
	                            break;
	                        case "ATOM_AD_SERVICES_ERROR_REPORTED":
	                        case 662:
	                            m.pushAtomId[i] = 662;
	                            break;
	                        case "ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED":
	                        case 663:
	                            m.pushAtomId[i] = 663;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION":
	                        case 673:
	                            m.pushAtomId[i] = 673;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION":
	                        case 674:
	                            m.pushAtomId[i] = 674;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_JOBS":
	                        case 675:
	                            m.pushAtomId[i] = 675;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT":
	                        case 676:
	                            m.pushAtomId[i] = 676;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_AD_ID_MATCH_FOR_DEBUG_KEYS":
	                        case 695:
	                            m.pushAtomId[i] = 695;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_DATA_STORED":
	                        case 697:
	                            m.pushAtomId[i] = 697;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_FILE_DOWNLOADED":
	                        case 698:
	                            m.pushAtomId[i] = 698;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_MATCHED":
	                        case 699:
	                            m.pushAtomId[i] = 699;
	                            break;
	                        case "ATOM_AD_SERVICES_CONSENT_MIGRATED":
	                        case 702:
	                            m.pushAtomId[i] = 702;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_FAILED":
	                        case 714:
	                            m.pushAtomId[i] = 714;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_CLICK_VERIFICATION":
	                        case 756:
	                            m.pushAtomId[i] = 756;
	                            break;
	                        case "ATOM_AD_SERVICES_ENCRYPTION_KEY_FETCHED":
	                        case 765:
	                            m.pushAtomId[i] = 765;
	                            break;
	                        case "ATOM_AD_SERVICES_ENCRYPTION_KEY_DB_TRANSACTION_ENDED":
	                        case 766:
	                            m.pushAtomId[i] = 766;
	                            break;
	                        case "ATOM_DESTINATION_REGISTERED_BEACONS":
	                        case 767:
	                            m.pushAtomId[i] = 767;
	                            break;
	                        case "ATOM_REPORT_INTERACTION_API_CALLED":
	                        case 768:
	                            m.pushAtomId[i] = 768;
	                            break;
	                        case "ATOM_INTERACTION_REPORTING_TABLE_CLEARED":
	                        case 769:
	                            m.pushAtomId[i] = 769;
	                            break;
	                        case "ATOM_APP_MANIFEST_CONFIG_HELPER_CALLED":
	                        case 788:
	                            m.pushAtomId[i] = 788;
	                            break;
	                        case "ATOM_AD_FILTERING_PROCESS_JOIN_CA_REPORTED":
	                        case 793:
	                            m.pushAtomId[i] = 793;
	                            break;
	                        case "ATOM_AD_FILTERING_PROCESS_AD_SELECTION_REPORTED":
	                        case 794:
	                            m.pushAtomId[i] = 794;
	                            break;
	                        case "ATOM_AD_COUNTER_HISTOGRAM_UPDATER_REPORTED":
	                        case 795:
	                            m.pushAtomId[i] = 795;
	                            break;
	                        case "ATOM_SIGNATURE_VERIFICATION":
	                        case 807:
	                            m.pushAtomId[i] = 807;
	                            break;
	                        case "ATOM_K_ANON_IMMEDIATE_SIGN_JOIN_STATUS_REPORTED":
	                        case 808:
	                            m.pushAtomId[i] = 808;
	                            break;
	                        case "ATOM_K_ANON_BACKGROUND_JOB_STATUS_REPORTED":
	                        case 809:
	                            m.pushAtomId[i] = 809;
	                            break;
	                        case "ATOM_K_ANON_INITIALIZE_STATUS_REPORTED":
	                        case 810:
	                            m.pushAtomId[i] = 810;
	                            break;
	                        case "ATOM_K_ANON_SIGN_STATUS_REPORTED":
	                        case 811:
	                            m.pushAtomId[i] = 811;
	                            break;
	                        case "ATOM_K_ANON_JOIN_STATUS_REPORTED":
	                        case 812:
	                            m.pushAtomId[i] = 812;
	                            break;
	                        case "ATOM_K_ANON_KEY_ATTESTATION_STATUS_REPORTED":
	                        case 813:
	                            m.pushAtomId[i] = 813;
	                            break;
	                        case "ATOM_GET_AD_SELECTION_DATA_API_CALLED":
	                        case 814:
	                            m.pushAtomId[i] = 814;
	                            break;
	                        case "ATOM_GET_AD_SELECTION_DATA_BUYER_INPUT_GENERATED":
	                        case 815:
	                            m.pushAtomId[i] = 815;
	                            break;
	                        case "ATOM_BACKGROUND_JOB_SCHEDULING_REPORTED":
	                        case 834:
	                            m.pushAtomId[i] = 834;
	                            break;
	                        case "ATOM_TOPICS_ENCRYPTION_EPOCH_COMPUTATION_REPORTED":
	                        case 840:
	                            m.pushAtomId[i] = 840;
	                            break;
	                        case "ATOM_TOPICS_ENCRYPTION_GET_TOPICS_REPORTED":
	                        case 841:
	                            m.pushAtomId[i] = 841;
	                            break;
	                        case "ATOM_ADSERVICES_SHELL_COMMAND_CALLED":
	                        case 842:
	                            m.pushAtomId[i] = 842;
	                            break;
	                        case "ATOM_UPDATE_SIGNALS_API_CALLED":
	                        case 843:
	                            m.pushAtomId[i] = 843;
	                            break;
	                        case "ATOM_ENCODING_JOB_RUN":
	                        case 844:
	                            m.pushAtomId[i] = 844;
	                            break;
	                        case "ATOM_ENCODING_JS_FETCH":
	                        case 845:
	                            m.pushAtomId[i] = 845;
	                            break;
	                        case "ATOM_ENCODING_JS_EXECUTION":
	                        case 846:
	                            m.pushAtomId[i] = 846;
	                            break;
	                        case "ATOM_PERSIST_AD_SELECTION_RESULT_CALLED":
	                        case 847:
	                            m.pushAtomId[i] = 847;
	                            break;
	                        case "ATOM_SERVER_AUCTION_KEY_FETCH_CALLED":
	                        case 848:
	                            m.pushAtomId[i] = 848;
	                            break;
	                        case "ATOM_SERVER_AUCTION_BACKGROUND_KEY_FETCH_ENABLED":
	                        case 849:
	                            m.pushAtomId[i] = 849;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_PROCESS_ODP_REGISTRATION":
	                        case 864:
	                            m.pushAtomId[i] = 864;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_NOTIFY_REGISTRATION_TO_ODP":
	                        case 865:
	                            m.pushAtomId[i] = 865;
	                            break;
	                        case "ATOM_SELECT_ADS_FROM_OUTCOMES_API_CALLED":
	                        case 876:
	                            m.pushAtomId[i] = 876;
	                            break;
	                        case "ATOM_REPORT_IMPRESSION_API_CALLED":
	                        case 877:
	                            m.pushAtomId[i] = 877;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_TRANSACTION_STATS":
	                        case 885:
	                            m.pushAtomId[i] = 885;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_BUTTON_PRESSED":
	                        case 706:
	                            m.pushAtomId[i] = 706;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_TEMPLATE_SELECTED":
	                        case 707:
	                            m.pushAtomId[i] = 707;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_TERM_SELECTED":
	                        case 708:
	                            m.pushAtomId[i] = 708;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_WALLPAPER_SET":
	                        case 709:
	                            m.pushAtomId[i] = 709;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_SESSION_SUMMARY":
	                        case 710:
	                            m.pushAtomId[i] = 710;
	                            break;
	                        case "ATOM_APEX_INSTALLATION_REQUESTED":
	                        case 732:
	                            m.pushAtomId[i] = 732;
	                            break;
	                        case "ATOM_APEX_INSTALLATION_STAGED":
	                        case 733:
	                            m.pushAtomId[i] = 733;
	                            break;
	                        case "ATOM_APEX_INSTALLATION_ENDED":
	                        case 734:
	                            m.pushAtomId[i] = 734;
	                            break;
	                        case "ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED":
	                        case 385:
	                            m.pushAtomId[i] = 385;
	                            break;
	                        case "ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED":
	                        case 579:
	                            m.pushAtomId[i] = 579;
	                            break;
	                        case "ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_STATS_REPORTED":
	                        case 825:
	                            m.pushAtomId[i] = 825;
	                            break;
	                        case "ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_RAW_QUERY_STATS_REPORTED":
	                        case 826:
	                            m.pushAtomId[i] = 826;
	                            break;
	                        case "ATOM_ART_DATUM_REPORTED":
	                        case 332:
	                            m.pushAtomId[i] = 332;
	                            break;
	                        case "ATOM_ART_DEVICE_DATUM_REPORTED":
	                        case 550:
	                            m.pushAtomId[i] = 550;
	                            break;
	                        case "ATOM_ART_DATUM_DELTA_REPORTED":
	                        case 565:
	                            m.pushAtomId[i] = 565;
	                            break;
	                        case "ATOM_ART_DEX2OAT_REPORTED":
	                        case 929:
	                            m.pushAtomId[i] = 929;
	                            break;
	                        case "ATOM_ART_DEVICE_STATUS":
	                        case 10205:
	                            m.pushAtomId[i] = 10205;
	                            break;
	                        case "ATOM_BACKGROUND_DEXOPT_JOB_ENDED":
	                        case 467:
	                            m.pushAtomId[i] = 467;
	                            break;
	                        case "ATOM_PREREBOOT_DEXOPT_JOB_ENDED":
	                        case 883:
	                            m.pushAtomId[i] = 883;
	                            break;
	                        case "ATOM_ODREFRESH_REPORTED":
	                        case 366:
	                            m.pushAtomId[i] = 366;
	                            break;
	                        case "ATOM_ODSIGN_REPORTED":
	                        case 548:
	                            m.pushAtomId[i] = 548;
	                            break;
	                        case "ATOM_AUTOFILL_UI_EVENT_REPORTED":
	                        case 603:
	                            m.pushAtomId[i] = 603;
	                            break;
	                        case "ATOM_AUTOFILL_FILL_REQUEST_REPORTED":
	                        case 604:
	                            m.pushAtomId[i] = 604;
	                            break;
	                        case "ATOM_AUTOFILL_FILL_RESPONSE_REPORTED":
	                        case 605:
	                            m.pushAtomId[i] = 605;
	                            break;
	                        case "ATOM_AUTOFILL_SAVE_EVENT_REPORTED":
	                        case 606:
	                            m.pushAtomId[i] = 606;
	                            break;
	                        case "ATOM_AUTOFILL_SESSION_COMMITTED":
	                        case 607:
	                            m.pushAtomId[i] = 607;
	                            break;
	                        case "ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED":
	                        case 659:
	                            m.pushAtomId[i] = 659;
	                            break;
	                        case "ATOM_CAR_RECENTS_EVENT_REPORTED":
	                        case 770:
	                            m.pushAtomId[i] = 770;
	                            break;
	                        case "ATOM_CAR_CALM_MODE_EVENT_REPORTED":
	                        case 797:
	                            m.pushAtomId[i] = 797;
	                            break;
	                        case "ATOM_CAR_WAKEUP_FROM_SUSPEND_REPORTED":
	                        case 852:
	                            m.pushAtomId[i] = 852;
	                            break;
	                        case "ATOM_PLUGIN_INITIALIZED":
	                        case 655:
	                            m.pushAtomId[i] = 655;
	                            break;
	                        case "ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED":
	                        case 613:
	                            m.pushAtomId[i] = 613;
	                            break;
	                        case "ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION":
	                        case 614:
	                            m.pushAtomId[i] = 614;
	                            break;
	                        case "ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION":
	                        case 615:
	                            m.pushAtomId[i] = 615;
	                            break;
	                        case "ATOM_BLUETOOTH_LE_SESSION_CONNECTED":
	                        case 656:
	                            m.pushAtomId[i] = 656;
	                            break;
	                        case "ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED":
	                        case 666:
	                            m.pushAtomId[i] = 666;
	                            break;
	                        case "ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED":
	                        case 696:
	                            m.pushAtomId[i] = 696;
	                            break;
	                        case "ATOM_BLUETOOTH_CONTENT_PROFILE_ERROR_REPORTED":
	                        case 781:
	                            m.pushAtomId[i] = 781;
	                            break;
	                        case "ATOM_BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED":
	                        case 782:
	                            m.pushAtomId[i] = 782;
	                            break;
	                        case "ATOM_REMOTE_DEVICE_INFORMATION_WITH_METRIC_ID":
	                        case 862:
	                            m.pushAtomId[i] = 862;
	                            break;
	                        case "ATOM_LE_APP_SCAN_STATE_CHANGED":
	                        case 870:
	                            m.pushAtomId[i] = 870;
	                            break;
	                        case "ATOM_LE_RADIO_SCAN_STOPPED":
	                        case 871:
	                            m.pushAtomId[i] = 871;
	                            break;
	                        case "ATOM_LE_SCAN_RESULT_RECEIVED":
	                        case 872:
	                            m.pushAtomId[i] = 872;
	                            break;
	                        case "ATOM_LE_SCAN_ABUSED":
	                        case 873:
	                            m.pushAtomId[i] = 873;
	                            break;
	                        case "ATOM_LE_ADV_STATE_CHANGED":
	                        case 874:
	                            m.pushAtomId[i] = 874;
	                            break;
	                        case "ATOM_LE_ADV_ERROR_REPORTED":
	                        case 875:
	                            m.pushAtomId[i] = 875;
	                            break;
	                        case "ATOM_A2DP_SESSION_REPORTED":
	                        case 904:
	                            m.pushAtomId[i] = 904;
	                            break;
	                        case "ATOM_BLUETOOTH_CROSS_LAYER_EVENT_REPORTED":
	                        case 916:
	                            m.pushAtomId[i] = 916;
	                            break;
	                        case "ATOM_BROADCAST_AUDIO_SESSION_REPORTED":
	                        case 927:
	                            m.pushAtomId[i] = 927;
	                            break;
	                        case "ATOM_BROADCAST_AUDIO_SYNC_REPORTED":
	                        case 928:
	                            m.pushAtomId[i] = 928;
	                            break;
	                        case "ATOM_BLUETOOTH_RFCOMM_CONNECTION_REPORTED_AT_CLOSE":
	                        case 982:
	                            m.pushAtomId[i] = 982;
	                            break;
	                        case "ATOM_CAMERA_FEATURE_COMBINATION_QUERY_EVENT":
	                        case 900:
	                            m.pushAtomId[i] = 900;
	                            break;
	                        case "ATOM_DAILY_KEEPALIVE_INFO_REPORTED":
	                        case 650:
	                            m.pushAtomId[i] = 650;
	                            break;
	                        case "ATOM_NETWORK_REQUEST_STATE_CHANGED":
	                        case 779:
	                            m.pushAtomId[i] = 779;
	                            break;
	                        case "ATOM_TETHERING_ACTIVE_SESSIONS_REPORTED":
	                        case 925:
	                            m.pushAtomId[i] = 925;
	                            break;
	                        case "ATOM_NETWORK_STATS_RECORDER_FILE_OPERATED":
	                        case 783:
	                            m.pushAtomId[i] = 783;
	                            break;
	                        case "ATOM_CORE_NETWORKING_TERRIBLE_ERROR_OCCURRED":
	                        case 979:
	                            m.pushAtomId[i] = 979;
	                            break;
	                        case "ATOM_APF_SESSION_INFO_REPORTED":
	                        case 777:
	                            m.pushAtomId[i] = 777;
	                            break;
	                        case "ATOM_IP_CLIENT_RA_INFO_REPORTED":
	                        case 778:
	                            m.pushAtomId[i] = 778;
	                            break;
	                        case "ATOM_VPN_CONNECTION_STATE_CHANGED":
	                        case 850:
	                            m.pushAtomId[i] = 850;
	                            break;
	                        case "ATOM_VPN_CONNECTION_REPORTED":
	                        case 851:
	                            m.pushAtomId[i] = 851;
	                            break;
	                        case "ATOM_CPU_POLICY":
	                        case 10199:
	                            m.pushAtomId[i] = 10199;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_API_CALLED":
	                        case 585:
	                            m.pushAtomId[i] = 585;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED":
	                        case 651:
	                            m.pushAtomId[i] = 651;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED":
	                        case 652:
	                            m.pushAtomId[i] = 652;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED":
	                        case 653:
	                            m.pushAtomId[i] = 653;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED":
	                        case 667:
	                            m.pushAtomId[i] = 667;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED":
	                        case 668:
	                            m.pushAtomId[i] = 668;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_GET_REPORTED":
	                        case 669:
	                            m.pushAtomId[i] = 669;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED":
	                        case 670:
	                            m.pushAtomId[i] = 670;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_APIV2_CALLED":
	                        case 671:
	                            m.pushAtomId[i] = 671;
	                            break;
	                        case "ATOM_CRONET_ENGINE_CREATED":
	                        case 703:
	                            m.pushAtomId[i] = 703;
	                            break;
	                        case "ATOM_CRONET_TRAFFIC_REPORTED":
	                        case 704:
	                            m.pushAtomId[i] = 704;
	                            break;
	                        case "ATOM_CRONET_ENGINE_BUILDER_INITIALIZED":
	                        case 762:
	                            m.pushAtomId[i] = 762;
	                            break;
	                        case "ATOM_CRONET_HTTP_FLAGS_INITIALIZED":
	                        case 763:
	                            m.pushAtomId[i] = 763;
	                            break;
	                        case "ATOM_CRONET_INITIALIZED":
	                        case 764:
	                            m.pushAtomId[i] = 764;
	                            break;
	                        case "ATOM_DESKTOP_MODE_UI_CHANGED":
	                        case 818:
	                            m.pushAtomId[i] = 818;
	                            break;
	                        case "ATOM_DESKTOP_MODE_SESSION_TASK_UPDATE":
	                        case 819:
	                            m.pushAtomId[i] = 819;
	                            break;
	                        case "ATOM_DEVICE_LOCK_CHECK_IN_REQUEST_REPORTED":
	                        case 726:
	                            m.pushAtomId[i] = 726;
	                            break;
	                        case "ATOM_DEVICE_LOCK_PROVISIONING_COMPLETE_REPORTED":
	                        case 727:
	                            m.pushAtomId[i] = 727;
	                            break;
	                        case "ATOM_DEVICE_LOCK_KIOSK_APP_REQUEST_REPORTED":
	                        case 728:
	                            m.pushAtomId[i] = 728;
	                            break;
	                        case "ATOM_DEVICE_LOCK_CHECK_IN_RETRY_REPORTED":
	                        case 789:
	                            m.pushAtomId[i] = 789;
	                            break;
	                        case "ATOM_DEVICE_LOCK_PROVISION_FAILURE_REPORTED":
	                        case 790:
	                            m.pushAtomId[i] = 790;
	                            break;
	                        case "ATOM_DEVICE_LOCK_LOCK_UNLOCK_DEVICE_FAILURE_REPORTED":
	                        case 791:
	                            m.pushAtomId[i] = 791;
	                            break;
	                        case "ATOM_DEVICE_POLICY_MANAGEMENT_MODE":
	                        case 10216:
	                            m.pushAtomId[i] = 10216;
	                            break;
	                        case "ATOM_DEVICE_POLICY_STATE":
	                        case 10217:
	                            m.pushAtomId[i] = 10217;
	                            break;
	                        case "ATOM_DISPLAY_MODE_DIRECTOR_VOTE_CHANGED":
	                        case 792:
	                            m.pushAtomId[i] = 792;
	                            break;
	                        case "ATOM_EXTERNAL_DISPLAY_STATE_CHANGED":
	                        case 806:
	                            m.pushAtomId[i] = 806;
	                            break;
	                        case "ATOM_DND_STATE_CHANGED":
	                        case 657:
	                            m.pushAtomId[i] = 657;
	                            break;
	                        case "ATOM_DREAM_SETTING_CHANGED":
	                        case 705:
	                            m.pushAtomId[i] = 705;
	                            break;
	                        case "ATOM_DREAM_SETTING_SNAPSHOT":
	                        case 10192:
	                            m.pushAtomId[i] = 10192;
	                            break;
	                        case "ATOM_EXPRESS_EVENT_REPORTED":
	                        case 528:
	                            m.pushAtomId[i] = 528;
	                            break;
	                        case "ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED":
	                        case 593:
	                            m.pushAtomId[i] = 593;
	                            break;
	                        case "ATOM_EXPRESS_UID_EVENT_REPORTED":
	                        case 644:
	                            m.pushAtomId[i] = 644;
	                            break;
	                        case "ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED":
	                        case 658:
	                            m.pushAtomId[i] = 658;
	                            break;
	                        case "ATOM_FEDERATED_COMPUTE_API_CALLED":
	                        case 712:
	                            m.pushAtomId[i] = 712;
	                            break;
	                        case "ATOM_FEDERATED_COMPUTE_TRAINING_EVENT_REPORTED":
	                        case 771:
	                            m.pushAtomId[i] = 771;
	                            break;
	                        case "ATOM_EXAMPLE_ITERATOR_NEXT_LATENCY_REPORTED":
	                        case 838:
	                            m.pushAtomId[i] = 838;
	                            break;
	                        case "ATOM_FULL_SCREEN_INTENT_LAUNCHED":
	                        case 631:
	                            m.pushAtomId[i] = 631;
	                            break;
	                        case "ATOM_BAL_ALLOWED":
	                        case 632:
	                            m.pushAtomId[i] = 632;
	                            break;
	                        case "ATOM_IN_TASK_ACTIVITY_STARTED":
	                        case 685:
	                            m.pushAtomId[i] = 685;
	                            break;
	                        case "ATOM_CACHED_APPS_HIGH_WATERMARK":
	                        case 10189:
	                            m.pushAtomId[i] = 10189;
	                            break;
	                        case "ATOM_STYLUS_PREDICTION_METRICS_REPORTED":
	                        case 718:
	                            m.pushAtomId[i] = 718;
	                            break;
	                        case "ATOM_USER_RISK_EVENT_REPORTED":
	                        case 725:
	                            m.pushAtomId[i] = 725;
	                            break;
	                        case "ATOM_MEDIA_PROJECTION_STATE_CHANGED":
	                        case 729:
	                            m.pushAtomId[i] = 729;
	                            break;
	                        case "ATOM_MEDIA_PROJECTION_TARGET_CHANGED":
	                        case 730:
	                            m.pushAtomId[i] = 730;
	                            break;
	                        case "ATOM_EXCESSIVE_BINDER_PROXY_COUNT_REPORTED":
	                        case 853:
	                            m.pushAtomId[i] = 853;
	                            break;
	                        case "ATOM_PROXY_BYTES_TRANSFER_BY_FG_BG":
	                        case 10200:
	                            m.pushAtomId[i] = 10200;
	                            break;
	                        case "ATOM_MOBILE_BYTES_TRANSFER_BY_PROC_STATE":
	                        case 10204:
	                            m.pushAtomId[i] = 10204;
	                            break;
	                        case "ATOM_BIOMETRIC_FRR_NOTIFICATION":
	                        case 817:
	                            m.pushAtomId[i] = 817;
	                            break;
	                        case "ATOM_SENSITIVE_CONTENT_MEDIA_PROJECTION_SESSION":
	                        case 830:
	                            m.pushAtomId[i] = 830;
	                            break;
	                        case "ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_SESSION":
	                        case 831:
	                            m.pushAtomId[i] = 831;
	                            break;
	                        case "ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_APPLIED":
	                        case 832:
	                            m.pushAtomId[i] = 832;
	                            break;
	                        case "ATOM_SENSITIVE_NOTIFICATION_REDACTION":
	                        case 833:
	                            m.pushAtomId[i] = 833;
	                            break;
	                        case "ATOM_SENSITIVE_CONTENT_APP_PROTECTION":
	                        case 835:
	                            m.pushAtomId[i] = 835;
	                            break;
	                        case "ATOM_APP_RESTRICTION_STATE_CHANGED":
	                        case 866:
	                            m.pushAtomId[i] = 866;
	                            break;
	                        case "ATOM_APPLICATION_GRAMMATICAL_INFLECTION_CHANGED":
	                        case 584:
	                            m.pushAtomId[i] = 584;
	                            break;
	                        case "ATOM_SYSTEM_GRAMMATICAL_INFLECTION_CHANGED":
	                        case 816:
	                            m.pushAtomId[i] = 816;
	                            break;
	                        case "ATOM_HDMI_EARC_STATUS_REPORTED":
	                        case 701:
	                            m.pushAtomId[i] = 701;
	                            break;
	                        case "ATOM_HDMI_SOUNDBAR_MODE_STATUS_REPORTED":
	                        case 724:
	                            m.pushAtomId[i] = 724;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_API_CALLED":
	                        case 616:
	                            m.pushAtomId[i] = 616;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_USAGE_STATS":
	                        case 617:
	                            m.pushAtomId[i] = 617;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_STORAGE_STATS":
	                        case 618:
	                            m.pushAtomId[i] = 618;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_API_INVOKED":
	                        case 643:
	                            m.pushAtomId[i] = 643;
	                            break;
	                        case "ATOM_EXERCISE_ROUTE_API_CALLED":
	                        case 654:
	                            m.pushAtomId[i] = 654;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_UI_IMPRESSION":
	                        case 623:
	                            m.pushAtomId[i] = 623;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_UI_INTERACTION":
	                        case 624:
	                            m.pushAtomId[i] = 624;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED":
	                        case 625:
	                            m.pushAtomId[i] = 625;
	                            break;
	                        case "ATOM_HOTWORD_EGRESS_SIZE_ATOM_REPORTED":
	                        case 761:
	                            m.pushAtomId[i] = 761;
	                            break;
	                        case "ATOM_IKE_SESSION_TERMINATED":
	                        case 678:
	                            m.pushAtomId[i] = 678;
	                            break;
	                        case "ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED":
	                        case 760:
	                            m.pushAtomId[i] = 760;
	                            break;
	                        case "ATOM_NEGOTIATED_SECURITY_ASSOCIATION":
	                        case 821:
	                            m.pushAtomId[i] = 821;
	                            break;
	                        case "ATOM_KEYBOARD_CONFIGURED":
	                        case 682:
	                            m.pushAtomId[i] = 682;
	                            break;
	                        case "ATOM_KEYBOARD_SYSTEMS_EVENT_REPORTED":
	                        case 683:
	                            m.pushAtomId[i] = 683;
	                            break;
	                        case "ATOM_INPUTDEVICE_USAGE_REPORTED":
	                        case 686:
	                            m.pushAtomId[i] = 686;
	                            break;
	                        case "ATOM_TOUCHPAD_USAGE":
	                        case 10191:
	                            m.pushAtomId[i] = 10191;
	                            break;
	                        case "ATOM_KERNEL_OOM_KILL_OCCURRED":
	                        case 754:
	                            m.pushAtomId[i] = 754;
	                            break;
	                        case "ATOM_EMERGENCY_STATE_CHANGED":
	                        case 633:
	                            m.pushAtomId[i] = 633;
	                            break;
	                        case "ATOM_CHRE_SIGNIFICANT_MOTION_STATE_CHANGED":
	                        case 868:
	                            m.pushAtomId[i] = 868;
	                            break;
	                        case "ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED":
	                        case 600:
	                            m.pushAtomId[i] = 600;
	                            break;
	                        case "ATOM_MEDIA_CODEC_STARTED":
	                        case 641:
	                            m.pushAtomId[i] = 641;
	                            break;
	                        case "ATOM_MEDIA_CODEC_STOPPED":
	                        case 642:
	                            m.pushAtomId[i] = 642;
	                            break;
	                        case "ATOM_MEDIA_CODEC_RENDERED":
	                        case 684:
	                            m.pushAtomId[i] = 684;
	                            break;
	                        case "ATOM_MEDIA_EDITING_ENDED_REPORTED":
	                        case 798:
	                            m.pushAtomId[i] = 798;
	                            break;
	                        case "ATOM_MTE_STATE":
	                        case 10181:
	                            m.pushAtomId[i] = 10181;
	                            break;
	                        case "ATOM_NFC_OBSERVE_MODE_STATE_CHANGED":
	                        case 855:
	                            m.pushAtomId[i] = 855;
	                            break;
	                        case "ATOM_NFC_FIELD_CHANGED":
	                        case 856:
	                            m.pushAtomId[i] = 856;
	                            break;
	                        case "ATOM_NFC_POLLING_LOOP_NOTIFICATION_REPORTED":
	                        case 857:
	                            m.pushAtomId[i] = 857;
	                            break;
	                        case "ATOM_NFC_PROPRIETARY_CAPABILITIES_REPORTED":
	                        case 858:
	                            m.pushAtomId[i] = 858;
	                            break;
	                        case "ATOM_ONDEVICEPERSONALIZATION_API_CALLED":
	                        case 711:
	                            m.pushAtomId[i] = 711;
	                            break;
	                        case "ATOM_COMPONENT_STATE_CHANGED_REPORTED":
	                        case 863:
	                            m.pushAtomId[i] = 863;
	                            break;
	                        case "ATOM_PDF_LOAD_REPORTED":
	                        case 859:
	                            m.pushAtomId[i] = 859;
	                            break;
	                        case "ATOM_PDF_API_USAGE_REPORTED":
	                        case 860:
	                            m.pushAtomId[i] = 860;
	                            break;
	                        case "ATOM_PDF_SEARCH_REPORTED":
	                        case 861:
	                            m.pushAtomId[i] = 861;
	                            break;
	                        case "ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED":
	                        case 645:
	                            m.pushAtomId[i] = 645;
	                            break;
	                        case "ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED":
	                        case 646:
	                            m.pushAtomId[i] = 646;
	                            break;
	                        case "ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION":
	                        case 647:
	                            m.pushAtomId[i] = 647;
	                            break;
	                        case "ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED":
	                        case 648:
	                            m.pushAtomId[i] = 648;
	                            break;
	                        case "ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED":
	                        case 649:
	                            m.pushAtomId[i] = 649;
	                            break;
	                        case "ATOM_ENHANCED_CONFIRMATION_DIALOG_RESULT_REPORTED":
	                        case 827:
	                            m.pushAtomId[i] = 827;
	                            break;
	                        case "ATOM_ENHANCED_CONFIRMATION_RESTRICTION_CLEARED":
	                        case 828:
	                            m.pushAtomId[i] = 828;
	                            break;
	                        case "ATOM_PHOTOPICKER_SESSION_INFO_REPORTED":
	                        case 886:
	                            m.pushAtomId[i] = 886;
	                            break;
	                        case "ATOM_PHOTOPICKER_API_INFO_REPORTED":
	                        case 887:
	                            m.pushAtomId[i] = 887;
	                            break;
	                        case "ATOM_PHOTOPICKER_UI_EVENT_LOGGED":
	                        case 888:
	                            m.pushAtomId[i] = 888;
	                            break;
	                        case "ATOM_PHOTOPICKER_MEDIA_ITEM_STATUS_REPORTED":
	                        case 889:
	                            m.pushAtomId[i] = 889;
	                            break;
	                        case "ATOM_PHOTOPICKER_PREVIEW_INFO_LOGGED":
	                        case 890:
	                            m.pushAtomId[i] = 890;
	                            break;
	                        case "ATOM_PHOTOPICKER_MENU_INTERACTION_LOGGED":
	                        case 891:
	                            m.pushAtomId[i] = 891;
	                            break;
	                        case "ATOM_PHOTOPICKER_BANNER_INTERACTION_LOGGED":
	                        case 892:
	                            m.pushAtomId[i] = 892;
	                            break;
	                        case "ATOM_PHOTOPICKER_MEDIA_LIBRARY_INFO_LOGGED":
	                        case 893:
	                            m.pushAtomId[i] = 893;
	                            break;
	                        case "ATOM_PHOTOPICKER_PAGE_INFO_LOGGED":
	                        case 894:
	                            m.pushAtomId[i] = 894;
	                            break;
	                        case "ATOM_PHOTOPICKER_MEDIA_GRID_SYNC_INFO_REPORTED":
	                        case 895:
	                            m.pushAtomId[i] = 895;
	                            break;
	                        case "ATOM_PHOTOPICKER_ALBUM_SYNC_INFO_REPORTED":
	                        case 896:
	                            m.pushAtomId[i] = 896;
	                            break;
	                        case "ATOM_PHOTOPICKER_SEARCH_INFO_REPORTED":
	                        case 897:
	                            m.pushAtomId[i] = 897;
	                            break;
	                        case "ATOM_SEARCH_DATA_EXTRACTION_DETAILS_REPORTED":
	                        case 898:
	                            m.pushAtomId[i] = 898;
	                            break;
	                        case "ATOM_EMBEDDED_PHOTOPICKER_INFO_REPORTED":
	                        case 899:
	                            m.pushAtomId[i] = 899;
	                            break;
	                        case "ATOM_ATOM_9999":
	                        case 9999:
	                            m.pushAtomId[i] = 9999;
	                            break;
	                        case "ATOM_ATOM_99999":
	                        case 99999:
	                            m.pushAtomId[i] = 99999;
	                            break;
	                        case "ATOM_SCREEN_OFF_REPORTED":
	                        case 776:
	                            m.pushAtomId[i] = 776;
	                            break;
	                        case "ATOM_SCREEN_TIMEOUT_OVERRIDE_REPORTED":
	                        case 836:
	                            m.pushAtomId[i] = 836;
	                            break;
	                        case "ATOM_SCREEN_INTERACTIVE_SESSION_REPORTED":
	                        case 837:
	                            m.pushAtomId[i] = 837;
	                            break;
	                        case "ATOM_SCREEN_DIM_REPORTED":
	                        case 867:
	                            m.pushAtomId[i] = 867;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_DATABASE_ROLLBACK_REPORTED":
	                        case 784:
	                            m.pushAtomId[i] = 784;
	                            break;
	                        case "ATOM_BACKUP_SETUP_STATUS_REPORTED":
	                        case 785:
	                            m.pushAtomId[i] = 785;
	                            break;
	                        case "ATOM_RKPD_POOL_STATS":
	                        case 664:
	                            m.pushAtomId[i] = 664;
	                            break;
	                        case "ATOM_RKPD_CLIENT_OPERATION":
	                        case 665:
	                            m.pushAtomId[i] = 665;
	                            break;
	                        case "ATOM_SANDBOX_API_CALLED":
	                        case 488:
	                            m.pushAtomId[i] = 488;
	                            break;
	                        case "ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED":
	                        case 735:
	                            m.pushAtomId[i] = 735;
	                            break;
	                        case "ATOM_SDK_SANDBOX_RESTRICTED_ACCESS_IN_SESSION":
	                        case 796:
	                            m.pushAtomId[i] = 796;
	                            break;
	                        case "ATOM_SANDBOX_SDK_STORAGE":
	                        case 10159:
	                            m.pushAtomId[i] = 10159;
	                            break;
	                        case "ATOM_SELINUX_AUDIT_LOG":
	                        case 799:
	                            m.pushAtomId[i] = 799;
	                            break;
	                        case "ATOM_SETTINGS_SPA_REPORTED":
	                        case 622:
	                            m.pushAtomId[i] = 622;
	                            break;
	                        case "ATOM_TEST_EXTENSION_ATOM_REPORTED":
	                        case 660:
	                            m.pushAtomId[i] = 660;
	                            break;
	                        case "ATOM_TEST_RESTRICTED_ATOM_REPORTED":
	                        case 672:
	                            m.pushAtomId[i] = 672;
	                            break;
	                        case "ATOM_STATS_SOCKET_LOSS_REPORTED":
	                        case 752:
	                            m.pushAtomId[i] = 752;
	                            break;
	                        case "ATOM_LOCKSCREEN_SHORTCUT_SELECTED":
	                        case 611:
	                            m.pushAtomId[i] = 611;
	                            break;
	                        case "ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED":
	                        case 612:
	                            m.pushAtomId[i] = 612;
	                            break;
	                        case "ATOM_LAUNCHER_IMPRESSION_EVENT_V2":
	                        case 716:
	                            m.pushAtomId[i] = 716;
	                            break;
	                        case "ATOM_DISPLAY_SWITCH_LATENCY_TRACKED":
	                        case 753:
	                            m.pushAtomId[i] = 753;
	                            break;
	                        case "ATOM_NOTIFICATION_LISTENER_SERVICE":
	                        case 829:
	                            m.pushAtomId[i] = 829;
	                            break;
	                        case "ATOM_NAV_HANDLE_TOUCH_POINTS":
	                        case 869:
	                            m.pushAtomId[i] = 869;
	                            break;
	                        case "ATOM_EMERGENCY_NUMBER_DIALED":
	                        case 637:
	                            m.pushAtomId[i] = 637;
	                            break;
	                        case "ATOM_CELLULAR_RADIO_POWER_STATE_CHANGED":
	                        case 713:
	                            m.pushAtomId[i] = 713;
	                            break;
	                        case "ATOM_EMERGENCY_NUMBERS_INFO":
	                        case 10180:
	                            m.pushAtomId[i] = 10180;
	                            break;
	                        case "ATOM_DATA_NETWORK_VALIDATION":
	                        case 10207:
	                            m.pushAtomId[i] = 10207;
	                            break;
	                        case "ATOM_DATA_RAT_STATE_CHANGED":
	                        case 854:
	                            m.pushAtomId[i] = 854;
	                            break;
	                        case "ATOM_CONNECTED_CHANNEL_CHANGED":
	                        case 882:
	                            m.pushAtomId[i] = 882;
	                            break;
	                        case "ATOM_QUALIFIED_RAT_LIST_CHANGED":
	                        case 634:
	                            m.pushAtomId[i] = 634;
	                            break;
	                        case "ATOM_QNS_IMS_CALL_DROP_STATS":
	                        case 635:
	                            m.pushAtomId[i] = 635;
	                            break;
	                        case "ATOM_QNS_FALLBACK_RESTRICTION_CHANGED":
	                        case 636:
	                            m.pushAtomId[i] = 636;
	                            break;
	                        case "ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO":
	                        case 10177:
	                            m.pushAtomId[i] = 10177;
	                            break;
	                        case "ATOM_QNS_HANDOVER_TIME_MILLIS":
	                        case 10178:
	                            m.pushAtomId[i] = 10178;
	                            break;
	                        case "ATOM_QNS_HANDOVER_PINGPONG":
	                        case 10179:
	                            m.pushAtomId[i] = 10179;
	                            break;
	                        case "ATOM_SATELLITE_CONTROLLER":
	                        case 10182:
	                            m.pushAtomId[i] = 10182;
	                            break;
	                        case "ATOM_SATELLITE_SESSION":
	                        case 10183:
	                            m.pushAtomId[i] = 10183;
	                            break;
	                        case "ATOM_SATELLITE_INCOMING_DATAGRAM":
	                        case 10184:
	                            m.pushAtomId[i] = 10184;
	                            break;
	                        case "ATOM_SATELLITE_OUTGOING_DATAGRAM":
	                        case 10185:
	                            m.pushAtomId[i] = 10185;
	                            break;
	                        case "ATOM_SATELLITE_PROVISION":
	                        case 10186:
	                            m.pushAtomId[i] = 10186;
	                            break;
	                        case "ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER":
	                        case 10187:
	                            m.pushAtomId[i] = 10187;
	                            break;
	                        case "ATOM_CARRIER_ROAMING_SATELLITE_SESSION":
	                        case 10211:
	                            m.pushAtomId[i] = 10211;
	                            break;
	                        case "ATOM_CARRIER_ROAMING_SATELLITE_CONTROLLER_STATS":
	                        case 10212:
	                            m.pushAtomId[i] = 10212;
	                            break;
	                        case "ATOM_CONTROLLER_STATS_PER_PACKAGE":
	                        case 10213:
	                            m.pushAtomId[i] = 10213;
	                            break;
	                        case "ATOM_SATELLITE_ENTITLEMENT":
	                        case 10214:
	                            m.pushAtomId[i] = 10214;
	                            break;
	                        case "ATOM_SATELLITE_CONFIG_UPDATER":
	                        case 10215:
	                            m.pushAtomId[i] = 10215;
	                            break;
	                        case "ATOM_SATELLITE_ACCESS_CONTROLLER":
	                        case 10219:
	                            m.pushAtomId[i] = 10219;
	                            break;
	                        case "ATOM_CELLULAR_IDENTIFIER_DISCLOSED":
	                        case 800:
	                            m.pushAtomId[i] = 800;
	                            break;
	                        case "ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED":
	                        case 738:
	                            m.pushAtomId[i] = 738;
	                            break;
	                        case "ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED":
	                        case 739:
	                            m.pushAtomId[i] = 739;
	                            break;
	                        case "ATOM_THREADNETWORK_DEVICE_INFO_REPORTED":
	                        case 740:
	                            m.pushAtomId[i] = 740;
	                            break;
	                        case "ATOM_BOOT_INTEGRITY_INFO_REPORTED":
	                        case 775:
	                            m.pushAtomId[i] = 775;
	                            break;
	                        case "ATOM_TV_LOW_POWER_STANDBY_POLICY":
	                        case 679:
	                            m.pushAtomId[i] = 679;
	                            break;
	                        case "ATOM_EXTERNAL_TV_INPUT_EVENT":
	                        case 717:
	                            m.pushAtomId[i] = 717;
	                            break;
	                        case "ATOM_UWB_ACTIVITY_INFO":
	                        case 10188:
	                            m.pushAtomId[i] = 10188;
	                            break;
	                        case "ATOM_MEDIATOR_UPDATED":
	                        case 721:
	                            m.pushAtomId[i] = 721;
	                            break;
	                        case "ATOM_SYSPROXY_BLUETOOTH_BYTES_TRANSFER":
	                        case 10196:
	                            m.pushAtomId[i] = 10196;
	                            break;
	                        case "ATOM_SYSPROXY_CONNECTION_UPDATED":
	                        case 786:
	                            m.pushAtomId[i] = 786;
	                            break;
	                        case "ATOM_MEDIA_ACTION_REPORTED":
	                        case 608:
	                            m.pushAtomId[i] = 608;
	                            break;
	                        case "ATOM_MEDIA_CONTROLS_LAUNCHED":
	                        case 609:
	                            m.pushAtomId[i] = 609;
	                            break;
	                        case "ATOM_MEDIA_SESSION_STATE_CHANGED":
	                        case 677:
	                            m.pushAtomId[i] = 677;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_API_LATENCY":
	                        case 757:
	                            m.pushAtomId[i] = 757;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_SASS_DEVICE_UNAVAILABLE":
	                        case 758:
	                            m.pushAtomId[i] = 758;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FASTPAIR_API_TIMEOUT":
	                        case 759:
	                            m.pushAtomId[i] = 759;
	                            break;
	                        case "ATOM_WEAR_MODE_STATE_CHANGED":
	                        case 715:
	                            m.pushAtomId[i] = 715;
	                            break;
	                        case "ATOM_RENDERER_INITIALIZED":
	                        case 736:
	                            m.pushAtomId[i] = 736;
	                            break;
	                        case "ATOM_SCHEMA_VERSION_RECEIVED":
	                        case 737:
	                            m.pushAtomId[i] = 737;
	                            break;
	                        case "ATOM_LAYOUT_INSPECTED":
	                        case 741:
	                            m.pushAtomId[i] = 741;
	                            break;
	                        case "ATOM_LAYOUT_EXPRESSION_INSPECTED":
	                        case 742:
	                            m.pushAtomId[i] = 742;
	                            break;
	                        case "ATOM_LAYOUT_ANIMATIONS_INSPECTED":
	                        case 743:
	                            m.pushAtomId[i] = 743;
	                            break;
	                        case "ATOM_MATERIAL_COMPONENTS_INSPECTED":
	                        case 744:
	                            m.pushAtomId[i] = 744;
	                            break;
	                        case "ATOM_TILE_REQUESTED":
	                        case 745:
	                            m.pushAtomId[i] = 745;
	                            break;
	                        case "ATOM_STATE_RESPONSE_RECEIVED":
	                        case 746:
	                            m.pushAtomId[i] = 746;
	                            break;
	                        case "ATOM_TILE_RESPONSE_RECEIVED":
	                        case 747:
	                            m.pushAtomId[i] = 747;
	                            break;
	                        case "ATOM_INFLATION_FINISHED":
	                        case 748:
	                            m.pushAtomId[i] = 748;
	                            break;
	                        case "ATOM_INFLATION_FAILED":
	                        case 749:
	                            m.pushAtomId[i] = 749;
	                            break;
	                        case "ATOM_IGNORED_INFLATION_FAILURES_REPORTED":
	                        case 750:
	                            m.pushAtomId[i] = 750;
	                            break;
	                        case "ATOM_DRAWABLE_RENDERED":
	                        case 751:
	                            m.pushAtomId[i] = 751;
	                            break;
	                        case "ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED":
	                        case 619:
	                            m.pushAtomId[i] = 619;
	                            break;
	                        case "ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED":
	                        case 620:
	                            m.pushAtomId[i] = 620;
	                            break;
	                        case "ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED":
	                        case 621:
	                            m.pushAtomId[i] = 621;
	                            break;
	                        case "ATOM_WS_WEAR_TIME_SESSION":
	                        case 610:
	                            m.pushAtomId[i] = 610;
	                            break;
	                        case "ATOM_WS_INCOMING_CALL_ACTION_REPORTED":
	                        case 626:
	                            m.pushAtomId[i] = 626;
	                            break;
	                        case "ATOM_WS_CALL_DISCONNECTION_REPORTED":
	                        case 627:
	                            m.pushAtomId[i] = 627;
	                            break;
	                        case "ATOM_WS_CALL_DURATION_REPORTED":
	                        case 628:
	                            m.pushAtomId[i] = 628;
	                            break;
	                        case "ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED":
	                        case 629:
	                            m.pushAtomId[i] = 629;
	                            break;
	                        case "ATOM_WS_CALL_INTERACTION_REPORTED":
	                        case 630:
	                            m.pushAtomId[i] = 630;
	                            break;
	                        case "ATOM_WS_ON_BODY_STATE_CHANGED":
	                        case 787:
	                            m.pushAtomId[i] = 787;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_RESTRICTED_COMPLICATIONS_IMPACTED":
	                        case 802:
	                            m.pushAtomId[i] = 802;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_DEFAULT_RESTRICTED_COMPLICATIONS_REMOVED":
	                        case 803:
	                            m.pushAtomId[i] = 803;
	                            break;
	                        case "ATOM_WS_COMPLICATIONS_IMPACTED_NOTIFICATION_EVENT_REPORTED":
	                        case 804:
	                            m.pushAtomId[i] = 804;
	                            break;
	                        case "ATOM_WS_STANDALONE_MODE_SNAPSHOT":
	                        case 10197:
	                            m.pushAtomId[i] = 10197;
	                            break;
	                        case "ATOM_WS_FAVORITE_WATCH_FACE_SNAPSHOT":
	                        case 10206:
	                            m.pushAtomId[i] = 10206;
	                            break;
	                        case "ATOM_WEAR_POWER_MENU_OPENED":
	                        case 731:
	                            m.pushAtomId[i] = 731;
	                            break;
	                        case "ATOM_WEAR_ASSISTANT_OPENED":
	                        case 755:
	                            m.pushAtomId[i] = 755;
	                            break;
	                        case "ATOM_WIFI_AWARE_NDP_REPORTED":
	                        case 638:
	                            m.pushAtomId[i] = 638;
	                            break;
	                        case "ATOM_WIFI_AWARE_ATTACH_REPORTED":
	                        case 639:
	                            m.pushAtomId[i] = 639;
	                            break;
	                        case "ATOM_WIFI_SELF_RECOVERY_TRIGGERED":
	                        case 661:
	                            m.pushAtomId[i] = 661;
	                            break;
	                        case "ATOM_SOFT_AP_STARTED":
	                        case 680:
	                            m.pushAtomId[i] = 680;
	                            break;
	                        case "ATOM_SOFT_AP_STOPPED":
	                        case 681:
	                            m.pushAtomId[i] = 681;
	                            break;
	                        case "ATOM_WIFI_LOCK_RELEASED":
	                        case 687:
	                            m.pushAtomId[i] = 687;
	                            break;
	                        case "ATOM_WIFI_LOCK_DEACTIVATED":
	                        case 688:
	                            m.pushAtomId[i] = 688;
	                            break;
	                        case "ATOM_WIFI_CONFIG_SAVED":
	                        case 689:
	                            m.pushAtomId[i] = 689;
	                            break;
	                        case "ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED":
	                        case 690:
	                            m.pushAtomId[i] = 690;
	                            break;
	                        case "ATOM_WIFI_AWARE_HAL_API_CALLED":
	                        case 691:
	                            m.pushAtomId[i] = 691;
	                            break;
	                        case "ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED":
	                        case 692:
	                            m.pushAtomId[i] = 692;
	                            break;
	                        case "ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED":
	                        case 693:
	                            m.pushAtomId[i] = 693;
	                            break;
	                        case "ATOM_WIFI_THREAD_TASK_EXECUTED":
	                        case 694:
	                            m.pushAtomId[i] = 694;
	                            break;
	                        case "ATOM_WIFI_STATE_CHANGED":
	                        case 700:
	                            m.pushAtomId[i] = 700;
	                            break;
	                        case "ATOM_PNO_SCAN_STARTED":
	                        case 719:
	                            m.pushAtomId[i] = 719;
	                            break;
	                        case "ATOM_PNO_SCAN_STOPPED":
	                        case 720:
	                            m.pushAtomId[i] = 720;
	                            break;
	                        case "ATOM_WIFI_IS_UNUSABLE_REPORTED":
	                        case 722:
	                            m.pushAtomId[i] = 722;
	                            break;
	                        case "ATOM_WIFI_AP_CAPABILITIES_REPORTED":
	                        case 723:
	                            m.pushAtomId[i] = 723;
	                            break;
	                        case "ATOM_SOFT_AP_STATE_CHANGED":
	                        case 805:
	                            m.pushAtomId[i] = 805;
	                            break;
	                        case "ATOM_SCORER_PREDICTION_RESULT_REPORTED":
	                        case 884:
	                            m.pushAtomId[i] = 884;
	                            break;
	                        case "ATOM_WIFI_AWARE_CAPABILITIES":
	                        case 10190:
	                            m.pushAtomId[i] = 10190;
	                            break;
	                        case "ATOM_WIFI_MODULE_INFO":
	                        case 10193:
	                            m.pushAtomId[i] = 10193;
	                            break;
	                        case "ATOM_WIFI_SETTING_INFO":
	                        case 10194:
	                            m.pushAtomId[i] = 10194;
	                            break;
	                        case "ATOM_WIFI_COMPLEX_SETTING_INFO":
	                        case 10195:
	                            m.pushAtomId[i] = 10195;
	                            break;
	                        case "ATOM_WIFI_CONFIGURED_NETWORK_INFO":
	                        case 10198:
	                            m.pushAtomId[i] = 10198;
	                            break;
	                        }
	                    }
	                }
	                if (d.rawPushAtomId) {
	                    if (!Array.isArray(d.rawPushAtomId))
	                        throw TypeError(".perfetto.protos.StatsdTracingConfig.rawPushAtomId: array expected");
	                    m.rawPushAtomId = [];
	                    for (var i = 0; i < d.rawPushAtomId.length; ++i) {
	                        m.rawPushAtomId[i] = d.rawPushAtomId[i] | 0;
	                    }
	                }
	                if (d.pullConfig) {
	                    if (!Array.isArray(d.pullConfig))
	                        throw TypeError(".perfetto.protos.StatsdTracingConfig.pullConfig: array expected");
	                    m.pullConfig = [];
	                    for (var i = 0; i < d.pullConfig.length; ++i) {
	                        if (typeof d.pullConfig[i] !== "object")
	                            throw TypeError(".perfetto.protos.StatsdTracingConfig.pullConfig: object expected");
	                        m.pullConfig[i] = $root.perfetto.protos.StatsdPullAtomConfig.fromObject(d.pullConfig[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a StatsdTracingConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @static
	             * @param {perfetto.protos.StatsdTracingConfig} m StatsdTracingConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            StatsdTracingConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.pushAtomId = [];
	                    d.rawPushAtomId = [];
	                    d.pullConfig = [];
	                }
	                if (m.pushAtomId && m.pushAtomId.length) {
	                    d.pushAtomId = [];
	                    for (var j = 0; j < m.pushAtomId.length; ++j) {
	                        d.pushAtomId[j] = o.enums === String ? $root.perfetto.protos.AtomId[m.pushAtomId[j]] === undefined ? m.pushAtomId[j] : $root.perfetto.protos.AtomId[m.pushAtomId[j]] : m.pushAtomId[j];
	                    }
	                }
	                if (m.rawPushAtomId && m.rawPushAtomId.length) {
	                    d.rawPushAtomId = [];
	                    for (var j = 0; j < m.rawPushAtomId.length; ++j) {
	                        d.rawPushAtomId[j] = m.rawPushAtomId[j];
	                    }
	                }
	                if (m.pullConfig && m.pullConfig.length) {
	                    d.pullConfig = [];
	                    for (var j = 0; j < m.pullConfig.length; ++j) {
	                        d.pullConfig[j] = $root.perfetto.protos.StatsdPullAtomConfig.toObject(m.pullConfig[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this StatsdTracingConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            StatsdTracingConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for StatsdTracingConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.StatsdTracingConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            StatsdTracingConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.StatsdTracingConfig";
	            };

	            return StatsdTracingConfig;
	        })();

	        protos.StatsdPullAtomConfig = (function() {

	            /**
	             * Properties of a StatsdPullAtomConfig.
	             * @memberof perfetto.protos
	             * @interface IStatsdPullAtomConfig
	             * @property {Array.<perfetto.protos.AtomId>|null} [pullAtomId] StatsdPullAtomConfig pullAtomId
	             * @property {Array.<number>|null} [rawPullAtomId] StatsdPullAtomConfig rawPullAtomId
	             * @property {number|null} [pullFrequencyMs] StatsdPullAtomConfig pullFrequencyMs
	             * @property {Array.<string>|null} [packages] StatsdPullAtomConfig packages
	             */

	            /**
	             * Constructs a new StatsdPullAtomConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a StatsdPullAtomConfig.
	             * @implements IStatsdPullAtomConfig
	             * @constructor
	             * @param {perfetto.protos.IStatsdPullAtomConfig=} [p] Properties to set
	             */
	            function StatsdPullAtomConfig(p) {
	                this.pullAtomId = [];
	                this.rawPullAtomId = [];
	                this.packages = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * StatsdPullAtomConfig pullAtomId.
	             * @member {Array.<perfetto.protos.AtomId>} pullAtomId
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @instance
	             */
	            StatsdPullAtomConfig.prototype.pullAtomId = $util.emptyArray;

	            /**
	             * StatsdPullAtomConfig rawPullAtomId.
	             * @member {Array.<number>} rawPullAtomId
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @instance
	             */
	            StatsdPullAtomConfig.prototype.rawPullAtomId = $util.emptyArray;

	            /**
	             * StatsdPullAtomConfig pullFrequencyMs.
	             * @member {number} pullFrequencyMs
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @instance
	             */
	            StatsdPullAtomConfig.prototype.pullFrequencyMs = 0;

	            /**
	             * StatsdPullAtomConfig packages.
	             * @member {Array.<string>} packages
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @instance
	             */
	            StatsdPullAtomConfig.prototype.packages = $util.emptyArray;

	            /**
	             * Creates a new StatsdPullAtomConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @static
	             * @param {perfetto.protos.IStatsdPullAtomConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.StatsdPullAtomConfig} StatsdPullAtomConfig instance
	             */
	            StatsdPullAtomConfig.create = function create(properties) {
	                return new StatsdPullAtomConfig(properties);
	            };

	            /**
	             * Encodes the specified StatsdPullAtomConfig message. Does not implicitly {@link perfetto.protos.StatsdPullAtomConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @static
	             * @param {perfetto.protos.IStatsdPullAtomConfig} m StatsdPullAtomConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            StatsdPullAtomConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.pullAtomId != null && m.pullAtomId.length) {
	                    for (var i = 0; i < m.pullAtomId.length; ++i)
	                        w.uint32(8).int32(m.pullAtomId[i]);
	                }
	                if (m.rawPullAtomId != null && m.rawPullAtomId.length) {
	                    for (var i = 0; i < m.rawPullAtomId.length; ++i)
	                        w.uint32(16).int32(m.rawPullAtomId[i]);
	                }
	                if (m.pullFrequencyMs != null && Object.hasOwnProperty.call(m, "pullFrequencyMs"))
	                    w.uint32(24).int32(m.pullFrequencyMs);
	                if (m.packages != null && m.packages.length) {
	                    for (var i = 0; i < m.packages.length; ++i)
	                        w.uint32(34).string(m.packages[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a StatsdPullAtomConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.StatsdPullAtomConfig} StatsdPullAtomConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            StatsdPullAtomConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.StatsdPullAtomConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.pullAtomId && m.pullAtomId.length))
	                                m.pullAtomId = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.pullAtomId.push(r.int32());
	                            } else
	                                m.pullAtomId.push(r.int32());
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.rawPullAtomId && m.rawPullAtomId.length))
	                                m.rawPullAtomId = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.rawPullAtomId.push(r.int32());
	                            } else
	                                m.rawPullAtomId.push(r.int32());
	                            break;
	                        }
	                    case 3: {
	                            m.pullFrequencyMs = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.packages && m.packages.length))
	                                m.packages = [];
	                            m.packages.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a StatsdPullAtomConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.StatsdPullAtomConfig} StatsdPullAtomConfig
	             */
	            StatsdPullAtomConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.StatsdPullAtomConfig)
	                    return d;
	                var m = new $root.perfetto.protos.StatsdPullAtomConfig();
	                if (d.pullAtomId) {
	                    if (!Array.isArray(d.pullAtomId))
	                        throw TypeError(".perfetto.protos.StatsdPullAtomConfig.pullAtomId: array expected");
	                    m.pullAtomId = [];
	                    for (var i = 0; i < d.pullAtomId.length; ++i) {
	                        switch (d.pullAtomId[i]) {
	                        default:
	                            if (typeof d.pullAtomId[i] === "number") {
	                                m.pullAtomId[i] = d.pullAtomId[i];
	                                break;
	                            }
	                        case "ATOM_UNSPECIFIED":
	                        case 0:
	                            m.pullAtomId[i] = 0;
	                            break;
	                        case "ATOM_BLE_SCAN_STATE_CHANGED":
	                        case 2:
	                            m.pullAtomId[i] = 2;
	                            break;
	                        case "ATOM_PROCESS_STATE_CHANGED":
	                        case 3:
	                            m.pullAtomId[i] = 3;
	                            break;
	                        case "ATOM_BLE_SCAN_RESULT_RECEIVED":
	                        case 4:
	                            m.pullAtomId[i] = 4;
	                            break;
	                        case "ATOM_SENSOR_STATE_CHANGED":
	                        case 5:
	                            m.pullAtomId[i] = 5;
	                            break;
	                        case "ATOM_GPS_SCAN_STATE_CHANGED":
	                        case 6:
	                            m.pullAtomId[i] = 6;
	                            break;
	                        case "ATOM_SYNC_STATE_CHANGED":
	                        case 7:
	                            m.pullAtomId[i] = 7;
	                            break;
	                        case "ATOM_SCHEDULED_JOB_STATE_CHANGED":
	                        case 8:
	                            m.pullAtomId[i] = 8;
	                            break;
	                        case "ATOM_SCREEN_BRIGHTNESS_CHANGED":
	                        case 9:
	                            m.pullAtomId[i] = 9;
	                            break;
	                        case "ATOM_WAKELOCK_STATE_CHANGED":
	                        case 10:
	                            m.pullAtomId[i] = 10;
	                            break;
	                        case "ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED":
	                        case 11:
	                            m.pullAtomId[i] = 11;
	                            break;
	                        case "ATOM_MOBILE_RADIO_POWER_STATE_CHANGED":
	                        case 12:
	                            m.pullAtomId[i] = 12;
	                            break;
	                        case "ATOM_WIFI_RADIO_POWER_STATE_CHANGED":
	                        case 13:
	                            m.pullAtomId[i] = 13;
	                            break;
	                        case "ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED":
	                        case 14:
	                            m.pullAtomId[i] = 14;
	                            break;
	                        case "ATOM_MEMORY_FACTOR_STATE_CHANGED":
	                        case 15:
	                            m.pullAtomId[i] = 15;
	                            break;
	                        case "ATOM_EXCESSIVE_CPU_USAGE_REPORTED":
	                        case 16:
	                            m.pullAtomId[i] = 16;
	                            break;
	                        case "ATOM_CACHED_KILL_REPORTED":
	                        case 17:
	                            m.pullAtomId[i] = 17;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_STAT_REPORTED":
	                        case 18:
	                            m.pullAtomId[i] = 18;
	                            break;
	                        case "ATOM_LAUNCHER_EVENT":
	                        case 19:
	                            m.pullAtomId[i] = 19;
	                            break;
	                        case "ATOM_BATTERY_SAVER_MODE_STATE_CHANGED":
	                        case 20:
	                            m.pullAtomId[i] = 20;
	                            break;
	                        case "ATOM_DEVICE_IDLE_MODE_STATE_CHANGED":
	                        case 21:
	                            m.pullAtomId[i] = 21;
	                            break;
	                        case "ATOM_DEVICE_IDLING_MODE_STATE_CHANGED":
	                        case 22:
	                            m.pullAtomId[i] = 22;
	                            break;
	                        case "ATOM_AUDIO_STATE_CHANGED":
	                        case 23:
	                            m.pullAtomId[i] = 23;
	                            break;
	                        case "ATOM_MEDIA_CODEC_STATE_CHANGED":
	                        case 24:
	                            m.pullAtomId[i] = 24;
	                            break;
	                        case "ATOM_CAMERA_STATE_CHANGED":
	                        case 25:
	                            m.pullAtomId[i] = 25;
	                            break;
	                        case "ATOM_FLASHLIGHT_STATE_CHANGED":
	                        case 26:
	                            m.pullAtomId[i] = 26;
	                            break;
	                        case "ATOM_UID_PROCESS_STATE_CHANGED":
	                        case 27:
	                            m.pullAtomId[i] = 27;
	                            break;
	                        case "ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED":
	                        case 28:
	                            m.pullAtomId[i] = 28;
	                            break;
	                        case "ATOM_SCREEN_STATE_CHANGED":
	                        case 29:
	                            m.pullAtomId[i] = 29;
	                            break;
	                        case "ATOM_BATTERY_LEVEL_CHANGED":
	                        case 30:
	                            m.pullAtomId[i] = 30;
	                            break;
	                        case "ATOM_CHARGING_STATE_CHANGED":
	                        case 31:
	                            m.pullAtomId[i] = 31;
	                            break;
	                        case "ATOM_PLUGGED_STATE_CHANGED":
	                        case 32:
	                            m.pullAtomId[i] = 32;
	                            break;
	                        case "ATOM_INTERACTIVE_STATE_CHANGED":
	                        case 33:
	                            m.pullAtomId[i] = 33;
	                            break;
	                        case "ATOM_TOUCH_EVENT_REPORTED":
	                        case 34:
	                            m.pullAtomId[i] = 34;
	                            break;
	                        case "ATOM_WAKEUP_ALARM_OCCURRED":
	                        case 35:
	                            m.pullAtomId[i] = 35;
	                            break;
	                        case "ATOM_KERNEL_WAKEUP_REPORTED":
	                        case 36:
	                            m.pullAtomId[i] = 36;
	                            break;
	                        case "ATOM_WIFI_LOCK_STATE_CHANGED":
	                        case 37:
	                            m.pullAtomId[i] = 37;
	                            break;
	                        case "ATOM_WIFI_SIGNAL_STRENGTH_CHANGED":
	                        case 38:
	                            m.pullAtomId[i] = 38;
	                            break;
	                        case "ATOM_WIFI_SCAN_STATE_CHANGED":
	                        case 39:
	                            m.pullAtomId[i] = 39;
	                            break;
	                        case "ATOM_PHONE_SIGNAL_STRENGTH_CHANGED":
	                        case 40:
	                            m.pullAtomId[i] = 40;
	                            break;
	                        case "ATOM_SETTING_CHANGED":
	                        case 41:
	                            m.pullAtomId[i] = 41;
	                            break;
	                        case "ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED":
	                        case 42:
	                            m.pullAtomId[i] = 42;
	                            break;
	                        case "ATOM_ISOLATED_UID_CHANGED":
	                        case 43:
	                            m.pullAtomId[i] = 43;
	                            break;
	                        case "ATOM_PACKET_WAKEUP_OCCURRED":
	                        case 44:
	                            m.pullAtomId[i] = 44;
	                            break;
	                        case "ATOM_WALL_CLOCK_TIME_SHIFTED":
	                        case 45:
	                            m.pullAtomId[i] = 45;
	                            break;
	                        case "ATOM_ANOMALY_DETECTED":
	                        case 46:
	                            m.pullAtomId[i] = 46;
	                            break;
	                        case "ATOM_APP_BREADCRUMB_REPORTED":
	                        case 47:
	                            m.pullAtomId[i] = 47;
	                            break;
	                        case "ATOM_APP_START_OCCURRED":
	                        case 48:
	                            m.pullAtomId[i] = 48;
	                            break;
	                        case "ATOM_APP_START_CANCELED":
	                        case 49:
	                            m.pullAtomId[i] = 49;
	                            break;
	                        case "ATOM_APP_START_FULLY_DRAWN":
	                        case 50:
	                            m.pullAtomId[i] = 50;
	                            break;
	                        case "ATOM_LMK_KILL_OCCURRED":
	                        case 51:
	                            m.pullAtomId[i] = 51;
	                            break;
	                        case "ATOM_PICTURE_IN_PICTURE_STATE_CHANGED":
	                        case 52:
	                            m.pullAtomId[i] = 52;
	                            break;
	                        case "ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED":
	                        case 53:
	                            m.pullAtomId[i] = 53;
	                            break;
	                        case "ATOM_APP_START_MEMORY_STATE_CAPTURED":
	                        case 55:
	                            m.pullAtomId[i] = 55;
	                            break;
	                        case "ATOM_SHUTDOWN_SEQUENCE_REPORTED":
	                        case 56:
	                            m.pullAtomId[i] = 56;
	                            break;
	                        case "ATOM_BOOT_SEQUENCE_REPORTED":
	                        case 57:
	                            m.pullAtomId[i] = 57;
	                            break;
	                        case "ATOM_OVERLAY_STATE_CHANGED":
	                        case 59:
	                            m.pullAtomId[i] = 59;
	                            break;
	                        case "ATOM_FOREGROUND_SERVICE_STATE_CHANGED":
	                        case 60:
	                            m.pullAtomId[i] = 60;
	                            break;
	                        case "ATOM_CALL_STATE_CHANGED":
	                        case 61:
	                            m.pullAtomId[i] = 61;
	                            break;
	                        case "ATOM_KEYGUARD_STATE_CHANGED":
	                        case 62:
	                            m.pullAtomId[i] = 62;
	                            break;
	                        case "ATOM_KEYGUARD_BOUNCER_STATE_CHANGED":
	                        case 63:
	                            m.pullAtomId[i] = 63;
	                            break;
	                        case "ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED":
	                        case 64:
	                            m.pullAtomId[i] = 64;
	                            break;
	                        case "ATOM_APP_DIED":
	                        case 65:
	                            m.pullAtomId[i] = 65;
	                            break;
	                        case "ATOM_RESOURCE_CONFIGURATION_CHANGED":
	                        case 66:
	                            m.pullAtomId[i] = 66;
	                            break;
	                        case "ATOM_BLUETOOTH_ENABLED_STATE_CHANGED":
	                        case 67:
	                            m.pullAtomId[i] = 67;
	                            break;
	                        case "ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED":
	                        case 68:
	                            m.pullAtomId[i] = 68;
	                            break;
	                        case "ATOM_GPS_SIGNAL_QUALITY_CHANGED":
	                        case 69:
	                            m.pullAtomId[i] = 69;
	                            break;
	                        case "ATOM_USB_CONNECTOR_STATE_CHANGED":
	                        case 70:
	                            m.pullAtomId[i] = 70;
	                            break;
	                        case "ATOM_SPEAKER_IMPEDANCE_REPORTED":
	                        case 71:
	                            m.pullAtomId[i] = 71;
	                            break;
	                        case "ATOM_HARDWARE_FAILED":
	                        case 72:
	                            m.pullAtomId[i] = 72;
	                            break;
	                        case "ATOM_PHYSICAL_DROP_DETECTED":
	                        case 73:
	                            m.pullAtomId[i] = 73;
	                            break;
	                        case "ATOM_CHARGE_CYCLES_REPORTED":
	                        case 74:
	                            m.pullAtomId[i] = 74;
	                            break;
	                        case "ATOM_MOBILE_CONNECTION_STATE_CHANGED":
	                        case 75:
	                            m.pullAtomId[i] = 75;
	                            break;
	                        case "ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED":
	                        case 76:
	                            m.pullAtomId[i] = 76;
	                            break;
	                        case "ATOM_USB_DEVICE_ATTACHED":
	                        case 77:
	                            m.pullAtomId[i] = 77;
	                            break;
	                        case "ATOM_APP_CRASH_OCCURRED":
	                        case 78:
	                            m.pullAtomId[i] = 78;
	                            break;
	                        case "ATOM_ANR_OCCURRED":
	                        case 79:
	                            m.pullAtomId[i] = 79;
	                            break;
	                        case "ATOM_WTF_OCCURRED":
	                        case 80:
	                            m.pullAtomId[i] = 80;
	                            break;
	                        case "ATOM_LOW_MEM_REPORTED":
	                        case 81:
	                            m.pullAtomId[i] = 81;
	                            break;
	                        case "ATOM_GENERIC_ATOM":
	                        case 82:
	                            m.pullAtomId[i] = 82;
	                            break;
	                        case "ATOM_VIBRATOR_STATE_CHANGED":
	                        case 84:
	                            m.pullAtomId[i] = 84;
	                            break;
	                        case "ATOM_DEFERRED_JOB_STATS_REPORTED":
	                        case 85:
	                            m.pullAtomId[i] = 85;
	                            break;
	                        case "ATOM_THERMAL_THROTTLING":
	                        case 86:
	                            m.pullAtomId[i] = 86;
	                            break;
	                        case "ATOM_BIOMETRIC_ACQUIRED":
	                        case 87:
	                            m.pullAtomId[i] = 87;
	                            break;
	                        case "ATOM_BIOMETRIC_AUTHENTICATED":
	                        case 88:
	                            m.pullAtomId[i] = 88;
	                            break;
	                        case "ATOM_BIOMETRIC_ERROR_OCCURRED":
	                        case 89:
	                            m.pullAtomId[i] = 89;
	                            break;
	                        case "ATOM_UI_EVENT_REPORTED":
	                        case 90:
	                            m.pullAtomId[i] = 90;
	                            break;
	                        case "ATOM_BATTERY_HEALTH_SNAPSHOT":
	                        case 91:
	                            m.pullAtomId[i] = 91;
	                            break;
	                        case "ATOM_SLOW_IO":
	                        case 92:
	                            m.pullAtomId[i] = 92;
	                            break;
	                        case "ATOM_BATTERY_CAUSED_SHUTDOWN":
	                        case 93:
	                            m.pullAtomId[i] = 93;
	                            break;
	                        case "ATOM_PHONE_SERVICE_STATE_CHANGED":
	                        case 94:
	                            m.pullAtomId[i] = 94;
	                            break;
	                        case "ATOM_PHONE_STATE_CHANGED":
	                        case 95:
	                            m.pullAtomId[i] = 95;
	                            break;
	                        case "ATOM_USER_RESTRICTION_CHANGED":
	                        case 96:
	                            m.pullAtomId[i] = 96;
	                            break;
	                        case "ATOM_SETTINGS_UI_CHANGED":
	                        case 97:
	                            m.pullAtomId[i] = 97;
	                            break;
	                        case "ATOM_CONNECTIVITY_STATE_CHANGED":
	                        case 98:
	                            m.pullAtomId[i] = 98;
	                            break;
	                        case "ATOM_SERVICE_STATE_CHANGED":
	                        case 99:
	                            m.pullAtomId[i] = 99;
	                            break;
	                        case "ATOM_SERVICE_LAUNCH_REPORTED":
	                        case 100:
	                            m.pullAtomId[i] = 100;
	                            break;
	                        case "ATOM_FLAG_FLIP_UPDATE_OCCURRED":
	                        case 101:
	                            m.pullAtomId[i] = 101;
	                            break;
	                        case "ATOM_BINARY_PUSH_STATE_CHANGED":
	                        case 102:
	                            m.pullAtomId[i] = 102;
	                            break;
	                        case "ATOM_DEVICE_POLICY_EVENT":
	                        case 103:
	                            m.pullAtomId[i] = 103;
	                            break;
	                        case "ATOM_DOCS_UI_FILE_OP_CANCELED":
	                        case 104:
	                            m.pullAtomId[i] = 104;
	                            break;
	                        case "ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED":
	                        case 105:
	                            m.pullAtomId[i] = 105;
	                            break;
	                        case "ATOM_DOCS_UI_FILE_OP_FAILURE":
	                        case 106:
	                            m.pullAtomId[i] = 106;
	                            break;
	                        case "ATOM_DOCS_UI_PROVIDER_FILE_OP":
	                        case 107:
	                            m.pullAtomId[i] = 107;
	                            break;
	                        case "ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST":
	                        case 108:
	                            m.pullAtomId[i] = 108;
	                            break;
	                        case "ATOM_DOCS_UI_LAUNCH_REPORTED":
	                        case 109:
	                            m.pullAtomId[i] = 109;
	                            break;
	                        case "ATOM_DOCS_UI_ROOT_VISITED":
	                        case 110:
	                            m.pullAtomId[i] = 110;
	                            break;
	                        case "ATOM_DOCS_UI_STARTUP_MS":
	                        case 111:
	                            m.pullAtomId[i] = 111;
	                            break;
	                        case "ATOM_DOCS_UI_USER_ACTION_REPORTED":
	                        case 112:
	                            m.pullAtomId[i] = 112;
	                            break;
	                        case "ATOM_WIFI_ENABLED_STATE_CHANGED":
	                        case 113:
	                            m.pullAtomId[i] = 113;
	                            break;
	                        case "ATOM_WIFI_RUNNING_STATE_CHANGED":
	                        case 114:
	                            m.pullAtomId[i] = 114;
	                            break;
	                        case "ATOM_APP_COMPACTED":
	                        case 115:
	                            m.pullAtomId[i] = 115;
	                            break;
	                        case "ATOM_NETWORK_DNS_EVENT_REPORTED":
	                        case 116:
	                            m.pullAtomId[i] = 116;
	                            break;
	                        case "ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED":
	                        case 117:
	                            m.pullAtomId[i] = 117;
	                            break;
	                        case "ATOM_DOCS_UI_PICK_RESULT_REPORTED":
	                        case 118:
	                            m.pullAtomId[i] = 118;
	                            break;
	                        case "ATOM_DOCS_UI_SEARCH_MODE_REPORTED":
	                        case 119:
	                            m.pullAtomId[i] = 119;
	                            break;
	                        case "ATOM_DOCS_UI_SEARCH_TYPE_REPORTED":
	                        case 120:
	                            m.pullAtomId[i] = 120;
	                            break;
	                        case "ATOM_DATA_STALL_EVENT":
	                        case 121:
	                            m.pullAtomId[i] = 121;
	                            break;
	                        case "ATOM_RESCUE_PARTY_RESET_REPORTED":
	                        case 122:
	                            m.pullAtomId[i] = 122;
	                            break;
	                        case "ATOM_SIGNED_CONFIG_REPORTED":
	                        case 123:
	                            m.pullAtomId[i] = 123;
	                            break;
	                        case "ATOM_GNSS_NI_EVENT_REPORTED":
	                        case 124:
	                            m.pullAtomId[i] = 124;
	                            break;
	                        case "ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT":
	                        case 125:
	                            m.pullAtomId[i] = 125;
	                            break;
	                        case "ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED":
	                        case 126:
	                            m.pullAtomId[i] = 126;
	                            break;
	                        case "ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED":
	                        case 127:
	                            m.pullAtomId[i] = 127;
	                            break;
	                        case "ATOM_APP_DOWNGRADED":
	                        case 128:
	                            m.pullAtomId[i] = 128;
	                            break;
	                        case "ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED":
	                        case 129:
	                            m.pullAtomId[i] = 129;
	                            break;
	                        case "ATOM_LOW_STORAGE_STATE_CHANGED":
	                        case 130:
	                            m.pullAtomId[i] = 130;
	                            break;
	                        case "ATOM_GNSS_NFW_NOTIFICATION_REPORTED":
	                        case 131:
	                            m.pullAtomId[i] = 131;
	                            break;
	                        case "ATOM_GNSS_CONFIGURATION_REPORTED":
	                        case 132:
	                            m.pullAtomId[i] = 132;
	                            break;
	                        case "ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED":
	                        case 133:
	                            m.pullAtomId[i] = 133;
	                            break;
	                        case "ATOM_NFC_ERROR_OCCURRED":
	                        case 134:
	                            m.pullAtomId[i] = 134;
	                            break;
	                        case "ATOM_NFC_STATE_CHANGED":
	                        case 135:
	                            m.pullAtomId[i] = 135;
	                            break;
	                        case "ATOM_NFC_BEAM_OCCURRED":
	                        case 136:
	                            m.pullAtomId[i] = 136;
	                            break;
	                        case "ATOM_NFC_CARDEMULATION_OCCURRED":
	                        case 137:
	                            m.pullAtomId[i] = 137;
	                            break;
	                        case "ATOM_NFC_TAG_OCCURRED":
	                        case 138:
	                            m.pullAtomId[i] = 138;
	                            break;
	                        case "ATOM_NFC_HCE_TRANSACTION_OCCURRED":
	                        case 139:
	                            m.pullAtomId[i] = 139;
	                            break;
	                        case "ATOM_SE_STATE_CHANGED":
	                        case 140:
	                            m.pullAtomId[i] = 140;
	                            break;
	                        case "ATOM_SE_OMAPI_REPORTED":
	                        case 141:
	                            m.pullAtomId[i] = 141;
	                            break;
	                        case "ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED":
	                        case 142:
	                            m.pullAtomId[i] = 142;
	                            break;
	                        case "ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED":
	                        case 143:
	                            m.pullAtomId[i] = 143;
	                            break;
	                        case "ATOM_ADB_CONNECTION_CHANGED":
	                        case 144:
	                            m.pullAtomId[i] = 144;
	                            break;
	                        case "ATOM_SPEECH_DSP_STAT_REPORTED":
	                        case 145:
	                            m.pullAtomId[i] = 145;
	                            break;
	                        case "ATOM_USB_CONTAMINANT_REPORTED":
	                        case 146:
	                            m.pullAtomId[i] = 146;
	                            break;
	                        case "ATOM_WATCHDOG_ROLLBACK_OCCURRED":
	                        case 147:
	                            m.pullAtomId[i] = 147;
	                            break;
	                        case "ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED":
	                        case 148:
	                            m.pullAtomId[i] = 148;
	                            break;
	                        case "ATOM_BUBBLE_UI_CHANGED":
	                        case 149:
	                            m.pullAtomId[i] = 149;
	                            break;
	                        case "ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED":
	                        case 150:
	                            m.pullAtomId[i] = 150;
	                            break;
	                        case "ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED":
	                        case 151:
	                            m.pullAtomId[i] = 151;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED":
	                        case 152:
	                            m.pullAtomId[i] = 152;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED":
	                        case 153:
	                            m.pullAtomId[i] = 153;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED":
	                        case 154:
	                            m.pullAtomId[i] = 154;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED":
	                        case 155:
	                            m.pullAtomId[i] = 155;
	                            break;
	                        case "ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED":
	                        case 156:
	                            m.pullAtomId[i] = 156;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED":
	                        case 157:
	                            m.pullAtomId[i] = 157;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED":
	                        case 158:
	                            m.pullAtomId[i] = 158;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED":
	                        case 159:
	                            m.pullAtomId[i] = 159;
	                            break;
	                        case "ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED":
	                        case 160:
	                            m.pullAtomId[i] = 160;
	                            break;
	                        case "ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED":
	                        case 161:
	                            m.pullAtomId[i] = 161;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_INFO_REPORTED":
	                        case 162:
	                            m.pullAtomId[i] = 162;
	                            break;
	                        case "ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED":
	                        case 163:
	                            m.pullAtomId[i] = 163;
	                            break;
	                        case "ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED":
	                        case 164:
	                            m.pullAtomId[i] = 164;
	                            break;
	                        case "ATOM_BLUETOOTH_BOND_STATE_CHANGED":
	                        case 165:
	                            m.pullAtomId[i] = 165;
	                            break;
	                        case "ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED":
	                        case 166:
	                            m.pullAtomId[i] = 166;
	                            break;
	                        case "ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED":
	                        case 167:
	                            m.pullAtomId[i] = 167;
	                            break;
	                        case "ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED":
	                        case 168:
	                            m.pullAtomId[i] = 168;
	                            break;
	                        case "ATOM_PROCESS_START_TIME":
	                        case 169:
	                            m.pullAtomId[i] = 169;
	                            break;
	                        case "ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED":
	                        case 170:
	                            m.pullAtomId[i] = 170;
	                            break;
	                        case "ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED":
	                        case 171:
	                            m.pullAtomId[i] = 171;
	                            break;
	                        case "ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED":
	                        case 172:
	                            m.pullAtomId[i] = 172;
	                            break;
	                        case "ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED":
	                        case 173:
	                            m.pullAtomId[i] = 173;
	                            break;
	                        case "ATOM_ASSIST_GESTURE_STAGE_REPORTED":
	                        case 174:
	                            m.pullAtomId[i] = 174;
	                            break;
	                        case "ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED":
	                        case 175:
	                            m.pullAtomId[i] = 175;
	                            break;
	                        case "ATOM_ASSIST_GESTURE_PROGRESS_REPORTED":
	                        case 176:
	                            m.pullAtomId[i] = 176;
	                            break;
	                        case "ATOM_TOUCH_GESTURE_CLASSIFIED":
	                        case 177:
	                            m.pullAtomId[i] = 177;
	                            break;
	                        case "ATOM_HIDDEN_API_USED":
	                        case 178:
	                            m.pullAtomId[i] = 178;
	                            break;
	                        case "ATOM_STYLE_UI_CHANGED":
	                        case 179:
	                            m.pullAtomId[i] = 179;
	                            break;
	                        case "ATOM_PRIVACY_INDICATORS_INTERACTED":
	                        case 180:
	                            m.pullAtomId[i] = 180;
	                            break;
	                        case "ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED":
	                        case 181:
	                            m.pullAtomId[i] = 181;
	                            break;
	                        case "ATOM_NETWORK_STACK_REPORTED":
	                        case 182:
	                            m.pullAtomId[i] = 182;
	                            break;
	                        case "ATOM_APP_MOVED_STORAGE_REPORTED":
	                        case 183:
	                            m.pullAtomId[i] = 183;
	                            break;
	                        case "ATOM_BIOMETRIC_ENROLLED":
	                        case 184:
	                            m.pullAtomId[i] = 184;
	                            break;
	                        case "ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED":
	                        case 185:
	                            m.pullAtomId[i] = 185;
	                            break;
	                        case "ATOM_TOMB_STONE_OCCURRED":
	                        case 186:
	                            m.pullAtomId[i] = 186;
	                            break;
	                        case "ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED":
	                        case 187:
	                            m.pullAtomId[i] = 187;
	                            break;
	                        case "ATOM_INTELLIGENCE_EVENT_REPORTED":
	                        case 188:
	                            m.pullAtomId[i] = 188;
	                            break;
	                        case "ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED":
	                        case 189:
	                            m.pullAtomId[i] = 189;
	                            break;
	                        case "ATOM_ROLE_REQUEST_RESULT_REPORTED":
	                        case 190:
	                            m.pullAtomId[i] = 190;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED":
	                        case 191:
	                            m.pullAtomId[i] = 191;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED":
	                        case 192:
	                            m.pullAtomId[i] = 192;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED":
	                        case 193:
	                            m.pullAtomId[i] = 193;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED":
	                        case 194:
	                            m.pullAtomId[i] = 194;
	                            break;
	                        case "ATOM_MEDIAMETRICS_CODEC_REPORTED":
	                        case 195:
	                            m.pullAtomId[i] = 195;
	                            break;
	                        case "ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED":
	                        case 196:
	                            m.pullAtomId[i] = 196;
	                            break;
	                        case "ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED":
	                        case 197:
	                            m.pullAtomId[i] = 197;
	                            break;
	                        case "ATOM_MEDIAMETRICS_MEDIADRM_REPORTED":
	                        case 198:
	                            m.pullAtomId[i] = 198;
	                            break;
	                        case "ATOM_MEDIAMETRICS_NUPLAYER_REPORTED":
	                        case 199:
	                            m.pullAtomId[i] = 199;
	                            break;
	                        case "ATOM_MEDIAMETRICS_RECORDER_REPORTED":
	                        case 200:
	                            m.pullAtomId[i] = 200;
	                            break;
	                        case "ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED":
	                        case 201:
	                            m.pullAtomId[i] = 201;
	                            break;
	                        case "ATOM_CAR_POWER_STATE_CHANGED":
	                        case 203:
	                            m.pullAtomId[i] = 203;
	                            break;
	                        case "ATOM_GARAGE_MODE_INFO":
	                        case 204:
	                            m.pullAtomId[i] = 204;
	                            break;
	                        case "ATOM_TEST_ATOM_REPORTED":
	                        case 205:
	                            m.pullAtomId[i] = 205;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED":
	                        case 206:
	                            m.pullAtomId[i] = 206;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_SERVICE_EVENTS":
	                        case 207:
	                            m.pullAtomId[i] = 207;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_SESSION_EVENTS":
	                        case 208:
	                            m.pullAtomId[i] = 208;
	                            break;
	                        case "ATOM_CONTENT_CAPTURE_FLUSHED":
	                        case 209:
	                            m.pullAtomId[i] = 209;
	                            break;
	                        case "ATOM_LOCATION_MANAGER_API_USAGE_REPORTED":
	                        case 210:
	                            m.pullAtomId[i] = 210;
	                            break;
	                        case "ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED":
	                        case 211:
	                            m.pullAtomId[i] = 211;
	                            break;
	                        case "ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT":
	                        case 212:
	                            m.pullAtomId[i] = 212;
	                            break;
	                        case "ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS":
	                        case 213:
	                            m.pullAtomId[i] = 213;
	                            break;
	                        case "ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION":
	                        case 214:
	                            m.pullAtomId[i] = 214;
	                            break;
	                        case "ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED":
	                        case 215:
	                            m.pullAtomId[i] = 215;
	                            break;
	                        case "ATOM_APP_PERMISSION_FRAGMENT_VIEWED":
	                        case 216:
	                            m.pullAtomId[i] = 216;
	                            break;
	                        case "ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED":
	                        case 217:
	                            m.pullAtomId[i] = 217;
	                            break;
	                        case "ATOM_PERMISSION_APPS_FRAGMENT_VIEWED":
	                        case 218:
	                            m.pullAtomId[i] = 218;
	                            break;
	                        case "ATOM_TEXT_SELECTION_EVENT":
	                        case 219:
	                            m.pullAtomId[i] = 219;
	                            break;
	                        case "ATOM_TEXT_LINKIFY_EVENT":
	                        case 220:
	                            m.pullAtomId[i] = 220;
	                            break;
	                        case "ATOM_CONVERSATION_ACTIONS_EVENT":
	                        case 221:
	                            m.pullAtomId[i] = 221;
	                            break;
	                        case "ATOM_LANGUAGE_DETECTION_EVENT":
	                        case 222:
	                            m.pullAtomId[i] = 222;
	                            break;
	                        case "ATOM_EXCLUSION_RECT_STATE_CHANGED":
	                        case 223:
	                            m.pullAtomId[i] = 223;
	                            break;
	                        case "ATOM_BACK_GESTURE_REPORTED_REPORTED":
	                        case 224:
	                            m.pullAtomId[i] = 224;
	                            break;
	                        case "ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED":
	                        case 225:
	                            m.pullAtomId[i] = 225;
	                            break;
	                        case "ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED":
	                        case 226:
	                            m.pullAtomId[i] = 226;
	                            break;
	                        case "ATOM_CAMERA_ACTION_EVENT":
	                        case 227:
	                            m.pullAtomId[i] = 227;
	                            break;
	                        case "ATOM_APP_COMPATIBILITY_CHANGE_REPORTED":
	                        case 228:
	                            m.pullAtomId[i] = 228;
	                            break;
	                        case "ATOM_PERFETTO_UPLOADED":
	                        case 229:
	                            m.pullAtomId[i] = 229;
	                            break;
	                        case "ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED":
	                        case 230:
	                            m.pullAtomId[i] = 230;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_SCAN_OCCURRED":
	                        case 233:
	                            m.pullAtomId[i] = 233;
	                            break;
	                        case "ATOM_MEDIA_CONTENT_DELETED":
	                        case 234:
	                            m.pullAtomId[i] = 234;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED":
	                        case 235:
	                            m.pullAtomId[i] = 235;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED":
	                        case 236:
	                            m.pullAtomId[i] = 236;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED":
	                        case 237:
	                            m.pullAtomId[i] = 237;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_RECOVERY_REPORTED":
	                        case 238:
	                            m.pullAtomId[i] = 238;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_DURATION_REPORTED":
	                        case 239:
	                            m.pullAtomId[i] = 239;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED":
	                        case 240:
	                            m.pullAtomId[i] = 240;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED":
	                        case 241:
	                            m.pullAtomId[i] = 241;
	                            break;
	                        case "ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED":
	                        case 242:
	                            m.pullAtomId[i] = 242;
	                            break;
	                        case "ATOM_USERSPACE_REBOOT_REPORTED":
	                        case 243:
	                            m.pullAtomId[i] = 243;
	                            break;
	                        case "ATOM_NOTIFICATION_REPORTED":
	                        case 244:
	                            m.pullAtomId[i] = 244;
	                            break;
	                        case "ATOM_NOTIFICATION_PANEL_REPORTED":
	                        case 245:
	                            m.pullAtomId[i] = 245;
	                            break;
	                        case "ATOM_NOTIFICATION_CHANNEL_MODIFIED":
	                        case 246:
	                            m.pullAtomId[i] = 246;
	                            break;
	                        case "ATOM_INTEGRITY_CHECK_RESULT_REPORTED":
	                        case 247:
	                            m.pullAtomId[i] = 247;
	                            break;
	                        case "ATOM_INTEGRITY_RULES_PUSHED":
	                        case 248:
	                            m.pullAtomId[i] = 248;
	                            break;
	                        case "ATOM_CB_MESSAGE_REPORTED":
	                        case 249:
	                            m.pullAtomId[i] = 249;
	                            break;
	                        case "ATOM_CB_MESSAGE_ERROR":
	                        case 250:
	                            m.pullAtomId[i] = 250;
	                            break;
	                        case "ATOM_WIFI_HEALTH_STAT_REPORTED":
	                        case 251:
	                            m.pullAtomId[i] = 251;
	                            break;
	                        case "ATOM_WIFI_FAILURE_STAT_REPORTED":
	                        case 252:
	                            m.pullAtomId[i] = 252;
	                            break;
	                        case "ATOM_WIFI_CONNECTION_RESULT_REPORTED":
	                        case 253:
	                            m.pullAtomId[i] = 253;
	                            break;
	                        case "ATOM_APP_FREEZE_CHANGED":
	                        case 254:
	                            m.pullAtomId[i] = 254;
	                            break;
	                        case "ATOM_SNAPSHOT_MERGE_REPORTED":
	                        case 255:
	                            m.pullAtomId[i] = 255;
	                            break;
	                        case "ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED":
	                        case 256:
	                            m.pullAtomId[i] = 256;
	                            break;
	                        case "ATOM_DISPLAY_JANK_REPORTED":
	                        case 257:
	                            m.pullAtomId[i] = 257;
	                            break;
	                        case "ATOM_APP_STANDBY_BUCKET_CHANGED":
	                        case 258:
	                            m.pullAtomId[i] = 258;
	                            break;
	                        case "ATOM_SHARESHEET_STARTED":
	                        case 259:
	                            m.pullAtomId[i] = 259;
	                            break;
	                        case "ATOM_RANKING_SELECTED":
	                        case 260:
	                            m.pullAtomId[i] = 260;
	                            break;
	                        case "ATOM_TVSETTINGS_UI_INTERACTED":
	                        case 261:
	                            m.pullAtomId[i] = 261;
	                            break;
	                        case "ATOM_LAUNCHER_SNAPSHOT":
	                        case 262:
	                            m.pullAtomId[i] = 262;
	                            break;
	                        case "ATOM_PACKAGE_INSTALLER_V2_REPORTED":
	                        case 263:
	                            m.pullAtomId[i] = 263;
	                            break;
	                        case "ATOM_USER_LIFECYCLE_JOURNEY_REPORTED":
	                        case 264:
	                            m.pullAtomId[i] = 264;
	                            break;
	                        case "ATOM_USER_LIFECYCLE_EVENT_OCCURRED":
	                        case 265:
	                            m.pullAtomId[i] = 265;
	                            break;
	                        case "ATOM_ACCESSIBILITY_SHORTCUT_REPORTED":
	                        case 266:
	                            m.pullAtomId[i] = 266;
	                            break;
	                        case "ATOM_ACCESSIBILITY_SERVICE_REPORTED":
	                        case 267:
	                            m.pullAtomId[i] = 267;
	                            break;
	                        case "ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED":
	                        case 268:
	                            m.pullAtomId[i] = 268;
	                            break;
	                        case "ATOM_APP_USAGE_EVENT_OCCURRED":
	                        case 269:
	                            m.pullAtomId[i] = 269;
	                            break;
	                        case "ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED":
	                        case 270:
	                            m.pullAtomId[i] = 270;
	                            break;
	                        case "ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED":
	                        case 271:
	                            m.pullAtomId[i] = 271;
	                            break;
	                        case "ATOM_AUTO_REVOKED_APP_INTERACTION":
	                        case 272:
	                            m.pullAtomId[i] = 272;
	                            break;
	                        case "ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION":
	                        case 273:
	                            m.pullAtomId[i] = 273;
	                            break;
	                        case "ATOM_EVS_USAGE_STATS_REPORTED":
	                        case 274:
	                            m.pullAtomId[i] = 274;
	                            break;
	                        case "ATOM_AUDIO_POWER_USAGE_DATA_REPORTED":
	                        case 275:
	                            m.pullAtomId[i] = 275;
	                            break;
	                        case "ATOM_TV_TUNER_STATE_CHANGED":
	                        case 276:
	                            m.pullAtomId[i] = 276;
	                            break;
	                        case "ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED":
	                        case 277:
	                            m.pullAtomId[i] = 277;
	                            break;
	                        case "ATOM_CB_MESSAGE_FILTERED":
	                        case 278:
	                            m.pullAtomId[i] = 278;
	                            break;
	                        case "ATOM_TV_TUNER_DVR_STATUS":
	                        case 279:
	                            m.pullAtomId[i] = 279;
	                            break;
	                        case "ATOM_TV_CAS_SESSION_OPEN_STATUS":
	                        case 280:
	                            m.pullAtomId[i] = 280;
	                            break;
	                        case "ATOM_ASSISTANT_INVOCATION_REPORTED":
	                        case 281:
	                            m.pullAtomId[i] = 281;
	                            break;
	                        case "ATOM_DISPLAY_WAKE_REPORTED":
	                        case 282:
	                            m.pullAtomId[i] = 282;
	                            break;
	                        case "ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED":
	                        case 283:
	                            m.pullAtomId[i] = 283;
	                            break;
	                        case "ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED":
	                        case 284:
	                            m.pullAtomId[i] = 284;
	                            break;
	                        case "ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED":
	                        case 285:
	                            m.pullAtomId[i] = 285;
	                            break;
	                        case "ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED":
	                        case 286:
	                            m.pullAtomId[i] = 286;
	                            break;
	                        case "ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED":
	                        case 287:
	                            m.pullAtomId[i] = 287;
	                            break;
	                        case "ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED":
	                        case 288:
	                            m.pullAtomId[i] = 288;
	                            break;
	                        case "ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED":
	                        case 289:
	                            m.pullAtomId[i] = 289;
	                            break;
	                        case "ATOM_NETWORK_IP_PROVISIONING_REPORTED":
	                        case 290:
	                            m.pullAtomId[i] = 290;
	                            break;
	                        case "ATOM_NETWORK_DHCP_RENEW_REPORTED":
	                        case 291:
	                            m.pullAtomId[i] = 291;
	                            break;
	                        case "ATOM_NETWORK_VALIDATION_REPORTED":
	                        case 292:
	                            m.pullAtomId[i] = 292;
	                            break;
	                        case "ATOM_NETWORK_STACK_QUIRK_REPORTED":
	                        case 293:
	                            m.pullAtomId[i] = 293;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED":
	                        case 294:
	                            m.pullAtomId[i] = 294;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED":
	                        case 295:
	                            m.pullAtomId[i] = 295;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED":
	                        case 296:
	                            m.pullAtomId[i] = 296;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED":
	                        case 297:
	                            m.pullAtomId[i] = 297;
	                            break;
	                        case "ATOM_BLOB_COMMITTED":
	                        case 298:
	                            m.pullAtomId[i] = 298;
	                            break;
	                        case "ATOM_BLOB_LEASED":
	                        case 299:
	                            m.pullAtomId[i] = 299;
	                            break;
	                        case "ATOM_BLOB_OPENED":
	                        case 300:
	                            m.pullAtomId[i] = 300;
	                            break;
	                        case "ATOM_CONTACTS_PROVIDER_STATUS_REPORTED":
	                        case 301:
	                            m.pullAtomId[i] = 301;
	                            break;
	                        case "ATOM_KEYSTORE_KEY_EVENT_REPORTED":
	                        case 302:
	                            m.pullAtomId[i] = 302;
	                            break;
	                        case "ATOM_NETWORK_TETHERING_REPORTED":
	                        case 303:
	                            m.pullAtomId[i] = 303;
	                            break;
	                        case "ATOM_IME_TOUCH_REPORTED":
	                        case 304:
	                            m.pullAtomId[i] = 304;
	                            break;
	                        case "ATOM_UI_INTERACTION_FRAME_INFO_REPORTED":
	                        case 305:
	                            m.pullAtomId[i] = 305;
	                            break;
	                        case "ATOM_UI_ACTION_LATENCY_REPORTED":
	                        case 306:
	                            m.pullAtomId[i] = 306;
	                            break;
	                        case "ATOM_WIFI_DISCONNECT_REPORTED":
	                        case 307:
	                            m.pullAtomId[i] = 307;
	                            break;
	                        case "ATOM_WIFI_CONNECTION_STATE_CHANGED":
	                        case 308:
	                            m.pullAtomId[i] = 308;
	                            break;
	                        case "ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED":
	                        case 309:
	                            m.pullAtomId[i] = 309;
	                            break;
	                        case "ATOM_HDMI_CEC_MESSAGE_REPORTED":
	                        case 310:
	                            m.pullAtomId[i] = 310;
	                            break;
	                        case "ATOM_AIRPLANE_MODE":
	                        case 311:
	                            m.pullAtomId[i] = 311;
	                            break;
	                        case "ATOM_MODEM_RESTART":
	                        case 312:
	                            m.pullAtomId[i] = 312;
	                            break;
	                        case "ATOM_CARRIER_ID_MISMATCH_REPORTED":
	                        case 313:
	                            m.pullAtomId[i] = 313;
	                            break;
	                        case "ATOM_CARRIER_ID_TABLE_UPDATED":
	                        case 314:
	                            m.pullAtomId[i] = 314;
	                            break;
	                        case "ATOM_DATA_STALL_RECOVERY_REPORTED":
	                        case 315:
	                            m.pullAtomId[i] = 315;
	                            break;
	                        case "ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED":
	                        case 316:
	                            m.pullAtomId[i] = 316;
	                            break;
	                        case "ATOM_TLS_HANDSHAKE_REPORTED":
	                        case 317:
	                            m.pullAtomId[i] = 317;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED":
	                        case 318:
	                            m.pullAtomId[i] = 318;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED":
	                        case 319:
	                            m.pullAtomId[i] = 319;
	                            break;
	                        case "ATOM_MEDIAMETRICS_PLAYBACK_REPORTED":
	                        case 320:
	                            m.pullAtomId[i] = 320;
	                            break;
	                        case "ATOM_MEDIA_NETWORK_INFO_CHANGED":
	                        case 321:
	                            m.pullAtomId[i] = 321;
	                            break;
	                        case "ATOM_MEDIA_PLAYBACK_STATE_CHANGED":
	                        case 322:
	                            m.pullAtomId[i] = 322;
	                            break;
	                        case "ATOM_MEDIA_PLAYBACK_ERROR_REPORTED":
	                        case 323:
	                            m.pullAtomId[i] = 323;
	                            break;
	                        case "ATOM_MEDIA_PLAYBACK_TRACK_CHANGED":
	                        case 324:
	                            m.pullAtomId[i] = 324;
	                            break;
	                        case "ATOM_WIFI_SCAN_REPORTED":
	                        case 325:
	                            m.pullAtomId[i] = 325;
	                            break;
	                        case "ATOM_WIFI_PNO_SCAN_REPORTED":
	                        case 326:
	                            m.pullAtomId[i] = 326;
	                            break;
	                        case "ATOM_TIF_TUNE_CHANGED":
	                        case 327:
	                            m.pullAtomId[i] = 327;
	                            break;
	                        case "ATOM_AUTO_ROTATE_REPORTED":
	                        case 328:
	                            m.pullAtomId[i] = 328;
	                            break;
	                        case "ATOM_PERFETTO_TRIGGER":
	                        case 329:
	                            m.pullAtomId[i] = 329;
	                            break;
	                        case "ATOM_TRANSCODING_DATA":
	                        case 330:
	                            m.pullAtomId[i] = 330;
	                            break;
	                        case "ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED":
	                        case 331:
	                            m.pullAtomId[i] = 331;
	                            break;
	                        case "ATOM_DEVICE_ROTATED":
	                        case 333:
	                            m.pullAtomId[i] = 333;
	                            break;
	                        case "ATOM_SIM_SPECIFIC_SETTINGS_RESTORED":
	                        case 334:
	                            m.pullAtomId[i] = 334;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED":
	                        case 335:
	                            m.pullAtomId[i] = 335;
	                            break;
	                        case "ATOM_PIN_STORAGE_EVENT":
	                        case 336:
	                            m.pullAtomId[i] = 336;
	                            break;
	                        case "ATOM_FACE_DOWN_REPORTED":
	                        case 337:
	                            m.pullAtomId[i] = 337;
	                            break;
	                        case "ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED":
	                        case 338:
	                            m.pullAtomId[i] = 338;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_PREPARATION_REPORTED":
	                        case 339:
	                            m.pullAtomId[i] = 339;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED":
	                        case 340:
	                            m.pullAtomId[i] = 340;
	                            break;
	                        case "ATOM_REBOOT_ESCROW_REBOOT_REPORTED":
	                        case 341:
	                            m.pullAtomId[i] = 341;
	                            break;
	                        case "ATOM_BINDER_LATENCY_REPORTED":
	                        case 342:
	                            m.pullAtomId[i] = 342;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED":
	                        case 343:
	                            m.pullAtomId[i] = 343;
	                            break;
	                        case "ATOM_MEDIA_TRANSCODING_SESSION_ENDED":
	                        case 344:
	                            m.pullAtomId[i] = 344;
	                            break;
	                        case "ATOM_MAGNIFICATION_USAGE_REPORTED":
	                        case 345:
	                            m.pullAtomId[i] = 345;
	                            break;
	                        case "ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED":
	                        case 346:
	                            m.pullAtomId[i] = 346;
	                            break;
	                        case "ATOM_APP_SEARCH_CALL_STATS_REPORTED":
	                        case 347:
	                            m.pullAtomId[i] = 347;
	                            break;
	                        case "ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED":
	                        case 348:
	                            m.pullAtomId[i] = 348;
	                            break;
	                        case "ATOM_DEVICE_CONTROL_CHANGED":
	                        case 349:
	                            m.pullAtomId[i] = 349;
	                            break;
	                        case "ATOM_DEVICE_STATE_CHANGED":
	                        case 350:
	                            m.pullAtomId[i] = 350;
	                            break;
	                        case "ATOM_INPUTDEVICE_REGISTERED":
	                        case 351:
	                            m.pullAtomId[i] = 351;
	                            break;
	                        case "ATOM_SMARTSPACE_CARD_REPORTED":
	                        case 352:
	                            m.pullAtomId[i] = 352;
	                            break;
	                        case "ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED":
	                        case 353:
	                            m.pullAtomId[i] = 353;
	                            break;
	                        case "ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED":
	                        case 354:
	                            m.pullAtomId[i] = 354;
	                            break;
	                        case "ATOM_AUTH_ENROLL_ACTION_INVOKED":
	                        case 355:
	                            m.pullAtomId[i] = 355;
	                            break;
	                        case "ATOM_AUTH_DEPRECATED_API_USED":
	                        case 356:
	                            m.pullAtomId[i] = 356;
	                            break;
	                        case "ATOM_UNATTENDED_REBOOT_OCCURRED":
	                        case 357:
	                            m.pullAtomId[i] = 357;
	                            break;
	                        case "ATOM_LONG_REBOOT_BLOCKING_REPORTED":
	                        case 358:
	                            m.pullAtomId[i] = 358;
	                            break;
	                        case "ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED":
	                        case 359:
	                            m.pullAtomId[i] = 359;
	                            break;
	                        case "ATOM_FDTRACK_EVENT_OCCURRED":
	                        case 364:
	                            m.pullAtomId[i] = 364;
	                            break;
	                        case "ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED":
	                        case 365:
	                            m.pullAtomId[i] = 365;
	                            break;
	                        case "ATOM_ALARM_BATCH_DELIVERED":
	                        case 367:
	                            m.pullAtomId[i] = 367;
	                            break;
	                        case "ATOM_ALARM_SCHEDULED":
	                        case 368:
	                            m.pullAtomId[i] = 368;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED":
	                        case 369:
	                            m.pullAtomId[i] = 369;
	                            break;
	                        case "ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED":
	                        case 370:
	                            m.pullAtomId[i] = 370;
	                            break;
	                        case "ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED":
	                        case 371:
	                            m.pullAtomId[i] = 371;
	                            break;
	                        case "ATOM_APP_SEARCH_QUERY_STATS_REPORTED":
	                        case 372:
	                            m.pullAtomId[i] = 372;
	                            break;
	                        case "ATOM_APP_PROCESS_DIED":
	                        case 373:
	                            m.pullAtomId[i] = 373;
	                            break;
	                        case "ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED":
	                        case 374:
	                            m.pullAtomId[i] = 374;
	                            break;
	                        case "ATOM_SLOW_INPUT_EVENT_REPORTED":
	                        case 375:
	                            m.pullAtomId[i] = 375;
	                            break;
	                        case "ATOM_ANR_OCCURRED_PROCESSING_STARTED":
	                        case 376:
	                            m.pullAtomId[i] = 376;
	                            break;
	                        case "ATOM_APP_SEARCH_REMOVE_STATS_REPORTED":
	                        case 377:
	                            m.pullAtomId[i] = 377;
	                            break;
	                        case "ATOM_MEDIA_CODEC_REPORTED":
	                        case 378:
	                            m.pullAtomId[i] = 378;
	                            break;
	                        case "ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION":
	                        case 379:
	                            m.pullAtomId[i] = 379;
	                            break;
	                        case "ATOM_PERMISSION_DETAILS_INTERACTION":
	                        case 380:
	                            m.pullAtomId[i] = 380;
	                            break;
	                        case "ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION":
	                        case 381:
	                            m.pullAtomId[i] = 381;
	                            break;
	                        case "ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION":
	                        case 382:
	                            m.pullAtomId[i] = 382;
	                            break;
	                        case "ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED":
	                        case 383:
	                            m.pullAtomId[i] = 383;
	                            break;
	                        case "ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT":
	                        case 384:
	                            m.pullAtomId[i] = 384;
	                            break;
	                        case "ATOM_APP_COMPAT_STATE_CHANGED":
	                        case 386:
	                            m.pullAtomId[i] = 386;
	                            break;
	                        case "ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED":
	                        case 387:
	                            m.pullAtomId[i] = 387;
	                            break;
	                        case "ATOM_SPLITSCREEN_UI_CHANGED":
	                        case 388:
	                            m.pullAtomId[i] = 388;
	                            break;
	                        case "ATOM_NETWORK_DNS_HANDSHAKE_REPORTED":
	                        case 389:
	                            m.pullAtomId[i] = 389;
	                            break;
	                        case "ATOM_BLUETOOTH_CODE_PATH_COUNTER":
	                        case 390:
	                            m.pullAtomId[i] = 390;
	                            break;
	                        case "ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY":
	                        case 392:
	                            m.pullAtomId[i] = 392;
	                            break;
	                        case "ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED":
	                        case 393:
	                            m.pullAtomId[i] = 393;
	                            break;
	                        case "ATOM_NEURALNETWORKS_COMPILATION_COMPLETED":
	                        case 394:
	                            m.pullAtomId[i] = 394;
	                            break;
	                        case "ATOM_NEURALNETWORKS_EXECUTION_COMPLETED":
	                        case 395:
	                            m.pullAtomId[i] = 395;
	                            break;
	                        case "ATOM_NEURALNETWORKS_COMPILATION_FAILED":
	                        case 396:
	                            m.pullAtomId[i] = 396;
	                            break;
	                        case "ATOM_NEURALNETWORKS_EXECUTION_FAILED":
	                        case 397:
	                            m.pullAtomId[i] = 397;
	                            break;
	                        case "ATOM_CONTEXT_HUB_BOOTED":
	                        case 398:
	                            m.pullAtomId[i] = 398;
	                            break;
	                        case "ATOM_CONTEXT_HUB_RESTARTED":
	                        case 399:
	                            m.pullAtomId[i] = 399;
	                            break;
	                        case "ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED":
	                        case 400:
	                            m.pullAtomId[i] = 400;
	                            break;
	                        case "ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED":
	                        case 401:
	                            m.pullAtomId[i] = 401;
	                            break;
	                        case "ATOM_UWB_SESSION_INITED":
	                        case 402:
	                            m.pullAtomId[i] = 402;
	                            break;
	                        case "ATOM_UWB_SESSION_CLOSED":
	                        case 403:
	                            m.pullAtomId[i] = 403;
	                            break;
	                        case "ATOM_UWB_FIRST_RANGING_RECEIVED":
	                        case 404:
	                            m.pullAtomId[i] = 404;
	                            break;
	                        case "ATOM_UWB_RANGING_MEASUREMENT_RECEIVED":
	                        case 405:
	                            m.pullAtomId[i] = 405;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED":
	                        case 406:
	                            m.pullAtomId[i] = 406;
	                            break;
	                        case "ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED":
	                        case 407:
	                            m.pullAtomId[i] = 407;
	                            break;
	                        case "ATOM_CLIPBOARD_CLEARED":
	                        case 408:
	                            m.pullAtomId[i] = 408;
	                            break;
	                        case "ATOM_VM_CREATION_REQUESTED":
	                        case 409:
	                            m.pullAtomId[i] = 409;
	                            break;
	                        case "ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED":
	                        case 410:
	                            m.pullAtomId[i] = 410;
	                            break;
	                        case "ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED":
	                        case 411:
	                            m.pullAtomId[i] = 411;
	                            break;
	                        case "ATOM_APPLICATION_LOCALES_CHANGED":
	                        case 412:
	                            m.pullAtomId[i] = 412;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED":
	                        case 413:
	                            m.pullAtomId[i] = 413;
	                            break;
	                        case "ATOM_FOLD_STATE_DURATION_REPORTED":
	                        case 414:
	                            m.pullAtomId[i] = 414;
	                            break;
	                        case "ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED":
	                        case 415:
	                            m.pullAtomId[i] = 415;
	                            break;
	                        case "ATOM_DISPLAY_HBM_STATE_CHANGED":
	                        case 416:
	                            m.pullAtomId[i] = 416;
	                            break;
	                        case "ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED":
	                        case 417:
	                            m.pullAtomId[i] = 417;
	                            break;
	                        case "ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED":
	                        case 418:
	                            m.pullAtomId[i] = 418;
	                            break;
	                        case "ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED":
	                        case 419:
	                            m.pullAtomId[i] = 419;
	                            break;
	                        case "ATOM_VBMETA_DIGEST_REPORTED":
	                        case 420:
	                            m.pullAtomId[i] = 420;
	                            break;
	                        case "ATOM_APEX_INFO_GATHERED":
	                        case 421:
	                            m.pullAtomId[i] = 421;
	                            break;
	                        case "ATOM_PVM_INFO_GATHERED":
	                        case 422:
	                            m.pullAtomId[i] = 422;
	                            break;
	                        case "ATOM_WEAR_SETTINGS_UI_INTERACTED":
	                        case 423:
	                            m.pullAtomId[i] = 423;
	                            break;
	                        case "ATOM_TRACING_SERVICE_REPORT_EVENT":
	                        case 424:
	                            m.pullAtomId[i] = 424;
	                            break;
	                        case "ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED":
	                        case 425:
	                            m.pullAtomId[i] = 425;
	                            break;
	                        case "ATOM_LAUNCHER_LATENCY":
	                        case 426:
	                            m.pullAtomId[i] = 426;
	                            break;
	                        case "ATOM_DROPBOX_ENTRY_DROPPED":
	                        case 427:
	                            m.pullAtomId[i] = 427;
	                            break;
	                        case "ATOM_WIFI_P2P_CONNECTION_REPORTED":
	                        case 428:
	                            m.pullAtomId[i] = 428;
	                            break;
	                        case "ATOM_GAME_STATE_CHANGED":
	                        case 429:
	                            m.pullAtomId[i] = 429;
	                            break;
	                        case "ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED":
	                        case 430:
	                            m.pullAtomId[i] = 430;
	                            break;
	                        case "ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED":
	                        case 431:
	                            m.pullAtomId[i] = 431;
	                            break;
	                        case "ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED":
	                        case 432:
	                            m.pullAtomId[i] = 432;
	                            break;
	                        case "ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED":
	                        case 433:
	                            m.pullAtomId[i] = 433;
	                            break;
	                        case "ATOM_HOTWORD_DETECTOR_EVENTS":
	                        case 434:
	                            m.pullAtomId[i] = 434;
	                            break;
	                        case "ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED":
	                        case 437:
	                            m.pullAtomId[i] = 437;
	                            break;
	                        case "ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED":
	                        case 440:
	                            m.pullAtomId[i] = 440;
	                            break;
	                        case "ATOM_APP_BACKGROUND_RESTRICTIONS_INFO":
	                        case 441:
	                            m.pullAtomId[i] = 441;
	                            break;
	                        case "ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED":
	                        case 442:
	                            m.pullAtomId[i] = 442;
	                            break;
	                        case "ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED":
	                        case 443:
	                            m.pullAtomId[i] = 443;
	                            break;
	                        case "ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED":
	                        case 444:
	                            m.pullAtomId[i] = 444;
	                            break;
	                        case "ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED":
	                        case 445:
	                            m.pullAtomId[i] = 445;
	                            break;
	                        case "ATOM_GNSS_PSDS_DOWNLOAD_REPORTED":
	                        case 446:
	                            m.pullAtomId[i] = 446;
	                            break;
	                        case "ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED":
	                        case 447:
	                            m.pullAtomId[i] = 447;
	                            break;
	                        case "ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED":
	                        case 448:
	                            m.pullAtomId[i] = 448;
	                            break;
	                        case "ATOM_DREAM_UI_EVENT_REPORTED":
	                        case 449:
	                            m.pullAtomId[i] = 449;
	                            break;
	                        case "ATOM_TASK_MANAGER_EVENT_REPORTED":
	                        case 450:
	                            m.pullAtomId[i] = 450;
	                            break;
	                        case "ATOM_CDM_ASSOCIATION_ACTION":
	                        case 451:
	                            m.pullAtomId[i] = 451;
	                            break;
	                        case "ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED":
	                        case 452:
	                            m.pullAtomId[i] = 452;
	                            break;
	                        case "ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED":
	                        case 453:
	                            m.pullAtomId[i] = 453;
	                            break;
	                        case "ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED":
	                        case 454:
	                            m.pullAtomId[i] = 454;
	                            break;
	                        case "ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED":
	                        case 455:
	                            m.pullAtomId[i] = 455;
	                            break;
	                        case "ATOM_UWB_DEVICE_ERROR_REPORTED":
	                        case 456:
	                            m.pullAtomId[i] = 456;
	                            break;
	                        case "ATOM_ISOLATED_COMPILATION_SCHEDULED":
	                        case 457:
	                            m.pullAtomId[i] = 457;
	                            break;
	                        case "ATOM_ISOLATED_COMPILATION_ENDED":
	                        case 458:
	                            m.pullAtomId[i] = 458;
	                            break;
	                        case "ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE":
	                        case 459:
	                            m.pullAtomId[i] = 459;
	                            break;
	                        case "ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED":
	                        case 460:
	                            m.pullAtomId[i] = 460;
	                            break;
	                        case "ATOM_TELEPHONY_ANOMALY_DETECTED":
	                        case 461:
	                            m.pullAtomId[i] = 461;
	                            break;
	                        case "ATOM_LETTERBOX_POSITION_CHANGED":
	                        case 462:
	                            m.pullAtomId[i] = 462;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT":
	                        case 463:
	                            m.pullAtomId[i] = 463;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO":
	                        case 464:
	                            m.pullAtomId[i] = 464;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_TIMING":
	                        case 465:
	                            m.pullAtomId[i] = 465;
	                            break;
	                        case "ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT":
	                        case 466:
	                            m.pullAtomId[i] = 466;
	                            break;
	                        case "ATOM_SYNC_EXEMPTION_OCCURRED":
	                        case 468:
	                            m.pullAtomId[i] = 468;
	                            break;
	                        case "ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED":
	                        case 469:
	                            m.pullAtomId[i] = 469;
	                            break;
	                        case "ATOM_DOCK_STATE_CHANGED":
	                        case 470:
	                            m.pullAtomId[i] = 470;
	                            break;
	                        case "ATOM_SAFETY_SOURCE_STATE_COLLECTED":
	                        case 471:
	                            m.pullAtomId[i] = 471;
	                            break;
	                        case "ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED":
	                        case 472:
	                            m.pullAtomId[i] = 472;
	                            break;
	                        case "ATOM_SAFETY_CENTER_INTERACTION_REPORTED":
	                        case 473:
	                            m.pullAtomId[i] = 473;
	                            break;
	                        case "ATOM_SETTINGS_PROVIDER_SETTING_CHANGED":
	                        case 474:
	                            m.pullAtomId[i] = 474;
	                            break;
	                        case "ATOM_BROADCAST_DELIVERY_EVENT_REPORTED":
	                        case 475:
	                            m.pullAtomId[i] = 475;
	                            break;
	                        case "ATOM_SERVICE_REQUEST_EVENT_REPORTED":
	                        case 476:
	                            m.pullAtomId[i] = 476;
	                            break;
	                        case "ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED":
	                        case 477:
	                            m.pullAtomId[i] = 477;
	                            break;
	                        case "ATOM_BLUETOOTH_DEVICE_NAME_REPORTED":
	                        case 478:
	                            m.pullAtomId[i] = 478;
	                            break;
	                        case "ATOM_CB_CONFIG_UPDATED":
	                        case 479:
	                            m.pullAtomId[i] = 479;
	                            break;
	                        case "ATOM_CB_MODULE_ERROR_REPORTED":
	                        case 480:
	                            m.pullAtomId[i] = 480;
	                            break;
	                        case "ATOM_CB_SERVICE_FEATURE_CHANGED":
	                        case 481:
	                            m.pullAtomId[i] = 481;
	                            break;
	                        case "ATOM_CB_RECEIVER_FEATURE_CHANGED":
	                        case 482:
	                            m.pullAtomId[i] = 482;
	                            break;
	                        case "ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION":
	                        case 484:
	                            m.pullAtomId[i] = 484;
	                            break;
	                        case "ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION":
	                        case 485:
	                            m.pullAtomId[i] = 485;
	                            break;
	                        case "ATOM_PRIVACY_SIGNALS_JOB_FAILURE":
	                        case 486:
	                            m.pullAtomId[i] = 486;
	                            break;
	                        case "ATOM_VIBRATION_REPORTED":
	                        case 487:
	                            m.pullAtomId[i] = 487;
	                            break;
	                        case "ATOM_UWB_RANGING_START":
	                        case 489:
	                            m.pullAtomId[i] = 489;
	                            break;
	                        case "ATOM_APP_COMPACTED_V2":
	                        case 491:
	                            m.pullAtomId[i] = 491;
	                            break;
	                        case "ATOM_DISPLAY_BRIGHTNESS_CHANGED":
	                        case 494:
	                            m.pullAtomId[i] = 494;
	                            break;
	                        case "ATOM_ACTIVITY_ACTION_BLOCKED":
	                        case 495:
	                            m.pullAtomId[i] = 495;
	                            break;
	                        case "ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED":
	                        case 504:
	                            m.pullAtomId[i] = 504;
	                            break;
	                        case "ATOM_VM_BOOTED":
	                        case 505:
	                            m.pullAtomId[i] = 505;
	                            break;
	                        case "ATOM_VM_EXITED":
	                        case 506:
	                            m.pullAtomId[i] = 506;
	                            break;
	                        case "ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED":
	                        case 507:
	                            m.pullAtomId[i] = 507;
	                            break;
	                        case "ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED":
	                        case 508:
	                            m.pullAtomId[i] = 508;
	                            break;
	                        case "ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED":
	                        case 509:
	                            m.pullAtomId[i] = 509;
	                            break;
	                        case "ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED":
	                        case 510:
	                            m.pullAtomId[i] = 510;
	                            break;
	                        case "ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED":
	                        case 511:
	                            m.pullAtomId[i] = 511;
	                            break;
	                        case "ATOM_HEARING_AID_INFO_REPORTED":
	                        case 513:
	                            m.pullAtomId[i] = 513;
	                            break;
	                        case "ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED":
	                        case 514:
	                            m.pullAtomId[i] = 514;
	                            break;
	                        case "ATOM_AMBIENT_MODE_CHANGED":
	                        case 515:
	                            m.pullAtomId[i] = 515;
	                            break;
	                        case "ATOM_ANR_LATENCY_REPORTED":
	                        case 516:
	                            m.pullAtomId[i] = 516;
	                            break;
	                        case "ATOM_RESOURCE_API_INFO":
	                        case 517:
	                            m.pullAtomId[i] = 517;
	                            break;
	                        case "ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED":
	                        case 518:
	                            m.pullAtomId[i] = 518;
	                            break;
	                        case "ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED":
	                        case 519:
	                            m.pullAtomId[i] = 519;
	                            break;
	                        case "ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED":
	                        case 520:
	                            m.pullAtomId[i] = 520;
	                            break;
	                        case "ATOM_AIRPLANE_MODE_SESSION_REPORTED":
	                        case 521:
	                            m.pullAtomId[i] = 521;
	                            break;
	                        case "ATOM_VM_CPU_STATUS_REPORTED":
	                        case 522:
	                            m.pullAtomId[i] = 522;
	                            break;
	                        case "ATOM_VM_MEM_STATUS_REPORTED":
	                        case 523:
	                            m.pullAtomId[i] = 523;
	                            break;
	                        case "ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED":
	                        case 524:
	                            m.pullAtomId[i] = 524;
	                            break;
	                        case "ATOM_DEFAULT_NETWORK_REMATCH_INFO":
	                        case 525:
	                            m.pullAtomId[i] = 525;
	                            break;
	                        case "ATOM_NETWORK_SELECTION_PERFORMANCE":
	                        case 526:
	                            m.pullAtomId[i] = 526;
	                            break;
	                        case "ATOM_NETWORK_NSD_REPORTED":
	                        case 527:
	                            m.pullAtomId[i] = 527;
	                            break;
	                        case "ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED":
	                        case 529:
	                            m.pullAtomId[i] = 529;
	                            break;
	                        case "ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED":
	                        case 530:
	                            m.pullAtomId[i] = 530;
	                            break;
	                        case "ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED":
	                        case 531:
	                            m.pullAtomId[i] = 531;
	                            break;
	                        case "ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED":
	                        case 532:
	                            m.pullAtomId[i] = 532;
	                            break;
	                        case "ATOM_BLUETOOTH_GATT_APP_INFO":
	                        case 533:
	                            m.pullAtomId[i] = 533;
	                            break;
	                        case "ATOM_BRIGHTNESS_CONFIGURATION_UPDATED":
	                        case 534:
	                            m.pullAtomId[i] = 534;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED":
	                        case 538:
	                            m.pullAtomId[i] = 538;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED":
	                        case 539:
	                            m.pullAtomId[i] = 539;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED":
	                        case 540:
	                            m.pullAtomId[i] = 540;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED":
	                        case 541:
	                            m.pullAtomId[i] = 541;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY":
	                        case 542:
	                            m.pullAtomId[i] = 542;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY":
	                        case 543:
	                            m.pullAtomId[i] = 543;
	                            break;
	                        case "ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED":
	                        case 544:
	                            m.pullAtomId[i] = 544;
	                            break;
	                        case "ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED":
	                        case 545:
	                            m.pullAtomId[i] = 545;
	                            break;
	                        case "ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED":
	                        case 546:
	                            m.pullAtomId[i] = 546;
	                            break;
	                        case "ATOM_LAUNCHER_IMPRESSION_EVENT":
	                        case 547:
	                            m.pullAtomId[i] = 547;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY":
	                        case 549:
	                            m.pullAtomId[i] = 549;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_EDITED":
	                        case 551:
	                            m.pullAtomId[i] = 551;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED":
	                        case 552:
	                            m.pullAtomId[i] = 552;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED":
	                        case 553:
	                            m.pullAtomId[i] = 553;
	                            break;
	                        case "ATOM_PACKAGE_UNINSTALLATION_REPORTED":
	                        case 554:
	                            m.pullAtomId[i] = 554;
	                            break;
	                        case "ATOM_GAME_MODE_CHANGED":
	                        case 555:
	                            m.pullAtomId[i] = 555;
	                            break;
	                        case "ATOM_GAME_MODE_CONFIGURATION_CHANGED":
	                        case 556:
	                            m.pullAtomId[i] = 556;
	                            break;
	                        case "ATOM_BEDTIME_MODE_STATE_CHANGED":
	                        case 557:
	                            m.pullAtomId[i] = 557;
	                            break;
	                        case "ATOM_NETWORK_SLICE_SESSION_ENDED":
	                        case 558:
	                            m.pullAtomId[i] = 558;
	                            break;
	                        case "ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED":
	                        case 559:
	                            m.pullAtomId[i] = 559;
	                            break;
	                        case "ATOM_NFC_TAG_TYPE_OCCURRED":
	                        case 560:
	                            m.pullAtomId[i] = 560;
	                            break;
	                        case "ATOM_NFC_AID_CONFLICT_OCCURRED":
	                        case 561:
	                            m.pullAtomId[i] = 561;
	                            break;
	                        case "ATOM_NFC_READER_CONFLICT_OCCURRED":
	                        case 562:
	                            m.pullAtomId[i] = 562;
	                            break;
	                        case "ATOM_WS_TILE_LIST_CHANGED":
	                        case 563:
	                            m.pullAtomId[i] = 563;
	                            break;
	                        case "ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION":
	                        case 564:
	                            m.pullAtomId[i] = 564;
	                            break;
	                        case "ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED":
	                        case 566:
	                            m.pullAtomId[i] = 566;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED":
	                        case 567:
	                            m.pullAtomId[i] = 567;
	                            break;
	                        case "ATOM_MEDIA_DRM_CREATED":
	                        case 568:
	                            m.pullAtomId[i] = 568;
	                            break;
	                        case "ATOM_MEDIA_DRM_ERRORED":
	                        case 569:
	                            m.pullAtomId[i] = 569;
	                            break;
	                        case "ATOM_MEDIA_DRM_SESSION_OPENED":
	                        case 570:
	                            m.pullAtomId[i] = 570;
	                            break;
	                        case "ATOM_MEDIA_DRM_SESSION_CLOSED":
	                        case 571:
	                            m.pullAtomId[i] = 571;
	                            break;
	                        case "ATOM_USER_SELECTED_RESOLUTION":
	                        case 572:
	                            m.pullAtomId[i] = 572;
	                            break;
	                        case "ATOM_UNSAFE_INTENT_EVENT_REPORTED":
	                        case 573:
	                            m.pullAtomId[i] = 573;
	                            break;
	                        case "ATOM_PERFORMANCE_HINT_SESSION_REPORTED":
	                        case 574:
	                            m.pullAtomId[i] = 574;
	                            break;
	                        case "ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED":
	                        case 576:
	                            m.pullAtomId[i] = 576;
	                            break;
	                        case "ATOM_BIOMETRIC_TOUCH_REPORTED":
	                        case 577:
	                            m.pullAtomId[i] = 577;
	                            break;
	                        case "ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED":
	                        case 578:
	                            m.pullAtomId[i] = 578;
	                            break;
	                        case "ATOM_LOCATION_ENABLED_STATE_CHANGED":
	                        case 580:
	                            m.pullAtomId[i] = 580;
	                            break;
	                        case "ATOM_IME_REQUEST_FINISHED":
	                        case 581:
	                            m.pullAtomId[i] = 581;
	                            break;
	                        case "ATOM_USB_COMPLIANCE_WARNINGS_REPORTED":
	                        case 582:
	                            m.pullAtomId[i] = 582;
	                            break;
	                        case "ATOM_APP_SUPPORTED_LOCALES_CHANGED":
	                        case 583:
	                            m.pullAtomId[i] = 583;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED":
	                        case 586:
	                            m.pullAtomId[i] = 586;
	                            break;
	                        case "ATOM_BIOMETRIC_PROPERTIES_COLLECTED":
	                        case 587:
	                            m.pullAtomId[i] = 587;
	                            break;
	                        case "ATOM_KERNEL_WAKEUP_ATTRIBUTED":
	                        case 588:
	                            m.pullAtomId[i] = 588;
	                            break;
	                        case "ATOM_SCREEN_STATE_CHANGED_V2":
	                        case 589:
	                            m.pullAtomId[i] = 589;
	                            break;
	                        case "ATOM_WS_BACKUP_ACTION_REPORTED":
	                        case 590:
	                            m.pullAtomId[i] = 590;
	                            break;
	                        case "ATOM_WS_RESTORE_ACTION_REPORTED":
	                        case 591:
	                            m.pullAtomId[i] = 591;
	                            break;
	                        case "ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED":
	                        case 592:
	                            m.pullAtomId[i] = 592;
	                            break;
	                        case "ATOM_MEDIA_SESSION_UPDATED":
	                        case 594:
	                            m.pullAtomId[i] = 594;
	                            break;
	                        case "ATOM_WEAR_OOBE_STATE_CHANGED":
	                        case 595:
	                            m.pullAtomId[i] = 595;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_UPDATED":
	                        case 596:
	                            m.pullAtomId[i] = 596;
	                            break;
	                        case "ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED":
	                        case 601:
	                            m.pullAtomId[i] = 601;
	                            break;
	                        case "ATOM_WS_COMPLICATION_TAPPED":
	                        case 602:
	                            m.pullAtomId[i] = 602;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_BLOCKING":
	                        case 780:
	                            m.pullAtomId[i] = 780;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_BRIDGEMODE_UPDATED":
	                        case 822:
	                            m.pullAtomId[i] = 822;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_DISMISSAL_ACTIONED":
	                        case 823:
	                            m.pullAtomId[i] = 823;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_ACTIONED":
	                        case 824:
	                            m.pullAtomId[i] = 824;
	                            break;
	                        case "ATOM_WS_NOTIFICATION_LATENCY":
	                        case 880:
	                            m.pullAtomId[i] = 880;
	                            break;
	                        case "ATOM_WIFI_BYTES_TRANSFER":
	                        case 10000:
	                            m.pullAtomId[i] = 10000;
	                            break;
	                        case "ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG":
	                        case 10001:
	                            m.pullAtomId[i] = 10001;
	                            break;
	                        case "ATOM_MOBILE_BYTES_TRANSFER":
	                        case 10002:
	                            m.pullAtomId[i] = 10002;
	                            break;
	                        case "ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG":
	                        case 10003:
	                            m.pullAtomId[i] = 10003;
	                            break;
	                        case "ATOM_BLUETOOTH_BYTES_TRANSFER":
	                        case 10006:
	                            m.pullAtomId[i] = 10006;
	                            break;
	                        case "ATOM_KERNEL_WAKELOCK":
	                        case 10004:
	                            m.pullAtomId[i] = 10004;
	                            break;
	                        case "ATOM_SUBSYSTEM_SLEEP_STATE":
	                        case 10005:
	                            m.pullAtomId[i] = 10005;
	                            break;
	                        case "ATOM_CPU_TIME_PER_UID":
	                        case 10009:
	                            m.pullAtomId[i] = 10009;
	                            break;
	                        case "ATOM_CPU_TIME_PER_UID_FREQ":
	                        case 10010:
	                            m.pullAtomId[i] = 10010;
	                            break;
	                        case "ATOM_WIFI_ACTIVITY_INFO":
	                        case 10011:
	                            m.pullAtomId[i] = 10011;
	                            break;
	                        case "ATOM_MODEM_ACTIVITY_INFO":
	                        case 10012:
	                            m.pullAtomId[i] = 10012;
	                            break;
	                        case "ATOM_BLUETOOTH_ACTIVITY_INFO":
	                        case 10007:
	                            m.pullAtomId[i] = 10007;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_STATE":
	                        case 10013:
	                            m.pullAtomId[i] = 10013;
	                            break;
	                        case "ATOM_SYSTEM_ELAPSED_REALTIME":
	                        case 10014:
	                            m.pullAtomId[i] = 10014;
	                            break;
	                        case "ATOM_SYSTEM_UPTIME":
	                        case 10015:
	                            m.pullAtomId[i] = 10015;
	                            break;
	                        case "ATOM_CPU_ACTIVE_TIME":
	                        case 10016:
	                            m.pullAtomId[i] = 10016;
	                            break;
	                        case "ATOM_CPU_CLUSTER_TIME":
	                        case 10017:
	                            m.pullAtomId[i] = 10017;
	                            break;
	                        case "ATOM_DISK_SPACE":
	                        case 10018:
	                            m.pullAtomId[i] = 10018;
	                            break;
	                        case "ATOM_REMAINING_BATTERY_CAPACITY":
	                        case 10019:
	                            m.pullAtomId[i] = 10019;
	                            break;
	                        case "ATOM_FULL_BATTERY_CAPACITY":
	                        case 10020:
	                            m.pullAtomId[i] = 10020;
	                            break;
	                        case "ATOM_TEMPERATURE":
	                        case 10021:
	                            m.pullAtomId[i] = 10021;
	                            break;
	                        case "ATOM_BINDER_CALLS":
	                        case 10022:
	                            m.pullAtomId[i] = 10022;
	                            break;
	                        case "ATOM_BINDER_CALLS_EXCEPTIONS":
	                        case 10023:
	                            m.pullAtomId[i] = 10023;
	                            break;
	                        case "ATOM_LOOPER_STATS":
	                        case 10024:
	                            m.pullAtomId[i] = 10024;
	                            break;
	                        case "ATOM_DISK_STATS":
	                        case 10025:
	                            m.pullAtomId[i] = 10025;
	                            break;
	                        case "ATOM_DIRECTORY_USAGE":
	                        case 10026:
	                            m.pullAtomId[i] = 10026;
	                            break;
	                        case "ATOM_APP_SIZE":
	                        case 10027:
	                            m.pullAtomId[i] = 10027;
	                            break;
	                        case "ATOM_CATEGORY_SIZE":
	                        case 10028:
	                            m.pullAtomId[i] = 10028;
	                            break;
	                        case "ATOM_PROC_STATS":
	                        case 10029:
	                            m.pullAtomId[i] = 10029;
	                            break;
	                        case "ATOM_BATTERY_VOLTAGE":
	                        case 10030:
	                            m.pullAtomId[i] = 10030;
	                            break;
	                        case "ATOM_NUM_FINGERPRINTS_ENROLLED":
	                        case 10031:
	                            m.pullAtomId[i] = 10031;
	                            break;
	                        case "ATOM_DISK_IO":
	                        case 10032:
	                            m.pullAtomId[i] = 10032;
	                            break;
	                        case "ATOM_POWER_PROFILE":
	                        case 10033:
	                            m.pullAtomId[i] = 10033;
	                            break;
	                        case "ATOM_PROC_STATS_PKG_PROC":
	                        case 10034:
	                            m.pullAtomId[i] = 10034;
	                            break;
	                        case "ATOM_PROCESS_CPU_TIME":
	                        case 10035:
	                            m.pullAtomId[i] = 10035;
	                            break;
	                        case "ATOM_CPU_TIME_PER_THREAD_FREQ":
	                        case 10037:
	                            m.pullAtomId[i] = 10037;
	                            break;
	                        case "ATOM_ON_DEVICE_POWER_MEASUREMENT":
	                        case 10038:
	                            m.pullAtomId[i] = 10038;
	                            break;
	                        case "ATOM_DEVICE_CALCULATED_POWER_USE":
	                        case 10039:
	                            m.pullAtomId[i] = 10039;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_HIGH_WATER_MARK":
	                        case 10042:
	                            m.pullAtomId[i] = 10042;
	                            break;
	                        case "ATOM_BATTERY_LEVEL":
	                        case 10043:
	                            m.pullAtomId[i] = 10043;
	                            break;
	                        case "ATOM_BUILD_INFORMATION":
	                        case 10044:
	                            m.pullAtomId[i] = 10044;
	                            break;
	                        case "ATOM_BATTERY_CYCLE_COUNT":
	                        case 10045:
	                            m.pullAtomId[i] = 10045;
	                            break;
	                        case "ATOM_DEBUG_ELAPSED_CLOCK":
	                        case 10046:
	                            m.pullAtomId[i] = 10046;
	                            break;
	                        case "ATOM_DEBUG_FAILING_ELAPSED_CLOCK":
	                        case 10047:
	                            m.pullAtomId[i] = 10047;
	                            break;
	                        case "ATOM_NUM_FACES_ENROLLED":
	                        case 10048:
	                            m.pullAtomId[i] = 10048;
	                            break;
	                        case "ATOM_ROLE_HOLDER":
	                        case 10049:
	                            m.pullAtomId[i] = 10049;
	                            break;
	                        case "ATOM_DANGEROUS_PERMISSION_STATE":
	                        case 10050:
	                            m.pullAtomId[i] = 10050;
	                            break;
	                        case "ATOM_TRAIN_INFO":
	                        case 10051:
	                            m.pullAtomId[i] = 10051;
	                            break;
	                        case "ATOM_TIME_ZONE_DATA_INFO":
	                        case 10052:
	                            m.pullAtomId[i] = 10052;
	                            break;
	                        case "ATOM_EXTERNAL_STORAGE_INFO":
	                        case 10053:
	                            m.pullAtomId[i] = 10053;
	                            break;
	                        case "ATOM_GPU_STATS_GLOBAL_INFO":
	                        case 10054:
	                            m.pullAtomId[i] = 10054;
	                            break;
	                        case "ATOM_GPU_STATS_APP_INFO":
	                        case 10055:
	                            m.pullAtomId[i] = 10055;
	                            break;
	                        case "ATOM_SYSTEM_ION_HEAP_SIZE":
	                        case 10056:
	                            m.pullAtomId[i] = 10056;
	                            break;
	                        case "ATOM_APPS_ON_EXTERNAL_STORAGE_INFO":
	                        case 10057:
	                            m.pullAtomId[i] = 10057;
	                            break;
	                        case "ATOM_FACE_SETTINGS":
	                        case 10058:
	                            m.pullAtomId[i] = 10058;
	                            break;
	                        case "ATOM_COOLING_DEVICE":
	                        case 10059:
	                            m.pullAtomId[i] = 10059;
	                            break;
	                        case "ATOM_APP_OPS":
	                        case 10060:
	                            m.pullAtomId[i] = 10060;
	                            break;
	                        case "ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE":
	                        case 10061:
	                            m.pullAtomId[i] = 10061;
	                            break;
	                        case "ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO":
	                        case 10062:
	                            m.pullAtomId[i] = 10062;
	                            break;
	                        case "ATOM_SURFACEFLINGER_STATS_LAYER_INFO":
	                        case 10063:
	                            m.pullAtomId[i] = 10063;
	                            break;
	                        case "ATOM_PROCESS_MEMORY_SNAPSHOT":
	                        case 10064:
	                            m.pullAtomId[i] = 10064;
	                            break;
	                        case "ATOM_VMS_CLIENT_STATS":
	                        case 10065:
	                            m.pullAtomId[i] = 10065;
	                            break;
	                        case "ATOM_NOTIFICATION_REMOTE_VIEWS":
	                        case 10066:
	                            m.pullAtomId[i] = 10066;
	                            break;
	                        case "ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED":
	                        case 10067:
	                            m.pullAtomId[i] = 10067;
	                            break;
	                        case "ATOM_GRAPHICS_STATS":
	                        case 10068:
	                            m.pullAtomId[i] = 10068;
	                            break;
	                        case "ATOM_RUNTIME_APP_OP_ACCESS":
	                        case 10069:
	                            m.pullAtomId[i] = 10069;
	                            break;
	                        case "ATOM_ION_HEAP_SIZE":
	                        case 10070:
	                            m.pullAtomId[i] = 10070;
	                            break;
	                        case "ATOM_PACKAGE_NOTIFICATION_PREFERENCES":
	                        case 10071:
	                            m.pullAtomId[i] = 10071;
	                            break;
	                        case "ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES":
	                        case 10072:
	                            m.pullAtomId[i] = 10072;
	                            break;
	                        case "ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES":
	                        case 10073:
	                            m.pullAtomId[i] = 10073;
	                            break;
	                        case "ATOM_GNSS_STATS":
	                        case 10074:
	                            m.pullAtomId[i] = 10074;
	                            break;
	                        case "ATOM_ATTRIBUTED_APP_OPS":
	                        case 10075:
	                            m.pullAtomId[i] = 10075;
	                            break;
	                        case "ATOM_VOICE_CALL_SESSION":
	                        case 10076:
	                            m.pullAtomId[i] = 10076;
	                            break;
	                        case "ATOM_VOICE_CALL_RAT_USAGE":
	                        case 10077:
	                            m.pullAtomId[i] = 10077;
	                            break;
	                        case "ATOM_SIM_SLOT_STATE":
	                        case 10078:
	                            m.pullAtomId[i] = 10078;
	                            break;
	                        case "ATOM_SUPPORTED_RADIO_ACCESS_FAMILY":
	                        case 10079:
	                            m.pullAtomId[i] = 10079;
	                            break;
	                        case "ATOM_SETTING_SNAPSHOT":
	                        case 10080:
	                            m.pullAtomId[i] = 10080;
	                            break;
	                        case "ATOM_BLOB_INFO":
	                        case 10081:
	                            m.pullAtomId[i] = 10081;
	                            break;
	                        case "ATOM_DATA_USAGE_BYTES_TRANSFER":
	                        case 10082:
	                            m.pullAtomId[i] = 10082;
	                            break;
	                        case "ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED":
	                        case 10083:
	                            m.pullAtomId[i] = 10083;
	                            break;
	                        case "ATOM_DND_MODE_RULE":
	                        case 10084:
	                            m.pullAtomId[i] = 10084;
	                            break;
	                        case "ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS":
	                        case 10085:
	                            m.pullAtomId[i] = 10085;
	                            break;
	                        case "ATOM_INCOMING_SMS":
	                        case 10086:
	                            m.pullAtomId[i] = 10086;
	                            break;
	                        case "ATOM_OUTGOING_SMS":
	                        case 10087:
	                            m.pullAtomId[i] = 10087;
	                            break;
	                        case "ATOM_CARRIER_ID_TABLE_VERSION":
	                        case 10088:
	                            m.pullAtomId[i] = 10088;
	                            break;
	                        case "ATOM_DATA_CALL_SESSION":
	                        case 10089:
	                            m.pullAtomId[i] = 10089;
	                            break;
	                        case "ATOM_CELLULAR_SERVICE_STATE":
	                        case 10090:
	                            m.pullAtomId[i] = 10090;
	                            break;
	                        case "ATOM_CELLULAR_DATA_SERVICE_SWITCH":
	                        case 10091:
	                            m.pullAtomId[i] = 10091;
	                            break;
	                        case "ATOM_SYSTEM_MEMORY":
	                        case 10092:
	                            m.pullAtomId[i] = 10092;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_TERMINATION":
	                        case 10093:
	                            m.pullAtomId[i] = 10093;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_STATS":
	                        case 10094:
	                            m.pullAtomId[i] = 10094;
	                            break;
	                        case "ATOM_CPU_TIME_PER_CLUSTER_FREQ":
	                        case 10095:
	                            m.pullAtomId[i] = 10095;
	                            break;
	                        case "ATOM_CPU_CYCLES_PER_UID_CLUSTER":
	                        case 10096:
	                            m.pullAtomId[i] = 10096;
	                            break;
	                        case "ATOM_DEVICE_ROTATED_DATA":
	                        case 10097:
	                            m.pullAtomId[i] = 10097;
	                            break;
	                        case "ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER":
	                        case 10098:
	                            m.pullAtomId[i] = 10098;
	                            break;
	                        case "ATOM_MEDIA_DRM_ACTIVITY_INFO":
	                        case 10099:
	                            m.pullAtomId[i] = 10099;
	                            break;
	                        case "ATOM_OEM_MANAGED_BYTES_TRANSFER":
	                        case 10100:
	                            m.pullAtomId[i] = 10100;
	                            break;
	                        case "ATOM_GNSS_POWER_STATS":
	                        case 10101:
	                            m.pullAtomId[i] = 10101;
	                            break;
	                        case "ATOM_TIME_ZONE_DETECTOR_STATE":
	                        case 10102:
	                            m.pullAtomId[i] = 10102;
	                            break;
	                        case "ATOM_KEYSTORE2_STORAGE_STATS":
	                        case 10103:
	                            m.pullAtomId[i] = 10103;
	                            break;
	                        case "ATOM_RKP_POOL_STATS":
	                        case 10104:
	                            m.pullAtomId[i] = 10104;
	                            break;
	                        case "ATOM_PROCESS_DMABUF_MEMORY":
	                        case 10105:
	                            m.pullAtomId[i] = 10105;
	                            break;
	                        case "ATOM_PENDING_ALARM_INFO":
	                        case 10106:
	                            m.pullAtomId[i] = 10106;
	                            break;
	                        case "ATOM_USER_LEVEL_HIBERNATED_APPS":
	                        case 10107:
	                            m.pullAtomId[i] = 10107;
	                            break;
	                        case "ATOM_LAUNCHER_LAYOUT_SNAPSHOT":
	                        case 10108:
	                            m.pullAtomId[i] = 10108;
	                            break;
	                        case "ATOM_GLOBAL_HIBERNATED_APPS":
	                        case 10109:
	                            m.pullAtomId[i] = 10109;
	                            break;
	                        case "ATOM_INPUT_EVENT_LATENCY_SKETCH":
	                        case 10110:
	                            m.pullAtomId[i] = 10110;
	                            break;
	                        case "ATOM_BATTERY_USAGE_STATS_BEFORE_RESET":
	                        case 10111:
	                            m.pullAtomId[i] = 10111;
	                            break;
	                        case "ATOM_BATTERY_USAGE_STATS_SINCE_RESET":
	                        case 10112:
	                            m.pullAtomId[i] = 10112;
	                            break;
	                        case "ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL":
	                        case 10113:
	                            m.pullAtomId[i] = 10113;
	                            break;
	                        case "ATOM_INSTALLED_INCREMENTAL_PACKAGE":
	                        case 10114:
	                            m.pullAtomId[i] = 10114;
	                            break;
	                        case "ATOM_TELEPHONY_NETWORK_REQUESTS":
	                        case 10115:
	                            m.pullAtomId[i] = 10115;
	                            break;
	                        case "ATOM_APP_SEARCH_STORAGE_INFO":
	                        case 10116:
	                            m.pullAtomId[i] = 10116;
	                            break;
	                        case "ATOM_VMSTAT":
	                        case 10117:
	                            m.pullAtomId[i] = 10117;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO":
	                        case 10118:
	                            m.pullAtomId[i] = 10118;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO":
	                        case 10119:
	                            m.pullAtomId[i] = 10119;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO":
	                        case 10120:
	                            m.pullAtomId[i] = 10120;
	                            break;
	                        case "ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW":
	                        case 10121:
	                            m.pullAtomId[i] = 10121;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO":
	                        case 10122:
	                            m.pullAtomId[i] = 10122;
	                            break;
	                        case "ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO":
	                        case 10123:
	                            m.pullAtomId[i] = 10123;
	                            break;
	                        case "ATOM_RKP_ERROR_STATS":
	                        case 10124:
	                            m.pullAtomId[i] = 10124;
	                            break;
	                        case "ATOM_KEYSTORE2_CRASH_STATS":
	                        case 10125:
	                            m.pullAtomId[i] = 10125;
	                            break;
	                        case "ATOM_VENDOR_APEX_INFO":
	                        case 10126:
	                            m.pullAtomId[i] = 10126;
	                            break;
	                        case "ATOM_ACCESSIBILITY_SHORTCUT_STATS":
	                        case 10127:
	                            m.pullAtomId[i] = 10127;
	                            break;
	                        case "ATOM_ACCESSIBILITY_FLOATING_MENU_STATS":
	                        case 10128:
	                            m.pullAtomId[i] = 10128;
	                            break;
	                        case "ATOM_DATA_USAGE_BYTES_TRANSFER_V2":
	                        case 10129:
	                            m.pullAtomId[i] = 10129;
	                            break;
	                        case "ATOM_MEDIA_CAPABILITIES":
	                        case 10130:
	                            m.pullAtomId[i] = 10130;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY":
	                        case 10131:
	                            m.pullAtomId[i] = 10131;
	                            break;
	                        case "ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY":
	                        case 10132:
	                            m.pullAtomId[i] = 10132;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS":
	                        case 10133:
	                            m.pullAtomId[i] = 10133;
	                            break;
	                        case "ATOM_RCS_CLIENT_PROVISIONING_STATS":
	                        case 10134:
	                            m.pullAtomId[i] = 10134;
	                            break;
	                        case "ATOM_RCS_ACS_PROVISIONING_STATS":
	                        case 10135:
	                            m.pullAtomId[i] = 10135;
	                            break;
	                        case "ATOM_SIP_DELEGATE_STATS":
	                        case 10136:
	                            m.pullAtomId[i] = 10136;
	                            break;
	                        case "ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS":
	                        case 10137:
	                            m.pullAtomId[i] = 10137;
	                            break;
	                        case "ATOM_SIP_MESSAGE_RESPONSE":
	                        case 10138:
	                            m.pullAtomId[i] = 10138;
	                            break;
	                        case "ATOM_SIP_TRANSPORT_SESSION":
	                        case 10139:
	                            m.pullAtomId[i] = 10139;
	                            break;
	                        case "ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT":
	                        case 10140:
	                            m.pullAtomId[i] = 10140;
	                            break;
	                        case "ATOM_IMS_DEDICATED_BEARER_EVENT":
	                        case 10141:
	                            m.pullAtomId[i] = 10141;
	                            break;
	                        case "ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS":
	                        case 10142:
	                            m.pullAtomId[i] = 10142;
	                            break;
	                        case "ATOM_UCE_EVENT_STATS":
	                        case 10143:
	                            m.pullAtomId[i] = 10143;
	                            break;
	                        case "ATOM_PRESENCE_NOTIFY_EVENT":
	                        case 10144:
	                            m.pullAtomId[i] = 10144;
	                            break;
	                        case "ATOM_GBA_EVENT":
	                        case 10145:
	                            m.pullAtomId[i] = 10145;
	                            break;
	                        case "ATOM_PER_SIM_STATUS":
	                        case 10146:
	                            m.pullAtomId[i] = 10146;
	                            break;
	                        case "ATOM_GPU_WORK_PER_UID":
	                        case 10147:
	                            m.pullAtomId[i] = 10147;
	                            break;
	                        case "ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE":
	                        case 10148:
	                            m.pullAtomId[i] = 10148;
	                            break;
	                        case "ATOM_SIGNED_PARTITION_INFO":
	                        case 10149:
	                            m.pullAtomId[i] = 10149;
	                            break;
	                        case "ATOM_PINNED_FILE_SIZES_PER_PACKAGE":
	                        case 10150:
	                            m.pullAtomId[i] = 10150;
	                            break;
	                        case "ATOM_PENDING_INTENTS_PER_PACKAGE":
	                        case 10151:
	                            m.pullAtomId[i] = 10151;
	                            break;
	                        case "ATOM_USER_INFO":
	                        case 10152:
	                            m.pullAtomId[i] = 10152;
	                            break;
	                        case "ATOM_TELEPHONY_NETWORK_REQUESTS_V2":
	                        case 10153:
	                            m.pullAtomId[i] = 10153;
	                            break;
	                        case "ATOM_DEVICE_TELEPHONY_PROPERTIES":
	                        case 10154:
	                            m.pullAtomId[i] = 10154;
	                            break;
	                        case "ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS":
	                        case 10155:
	                            m.pullAtomId[i] = 10155;
	                            break;
	                        case "ATOM_SAFETY_STATE":
	                        case 10156:
	                            m.pullAtomId[i] = 10156;
	                            break;
	                        case "ATOM_INCOMING_MMS":
	                        case 10157:
	                            m.pullAtomId[i] = 10157;
	                            break;
	                        case "ATOM_OUTGOING_MMS":
	                        case 10158:
	                            m.pullAtomId[i] = 10158;
	                            break;
	                        case "ATOM_MULTI_USER_INFO":
	                        case 10160:
	                            m.pullAtomId[i] = 10160;
	                            break;
	                        case "ATOM_NETWORK_BPF_MAP_INFO":
	                        case 10161:
	                            m.pullAtomId[i] = 10161;
	                            break;
	                        case "ATOM_OUTGOING_SHORT_CODE_SMS":
	                        case 10162:
	                            m.pullAtomId[i] = 10162;
	                            break;
	                        case "ATOM_CONNECTIVITY_STATE_SAMPLE":
	                        case 10163:
	                            m.pullAtomId[i] = 10163;
	                            break;
	                        case "ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO":
	                        case 10164:
	                            m.pullAtomId[i] = 10164;
	                            break;
	                        case "ATOM_GAME_MODE_INFO":
	                        case 10165:
	                            m.pullAtomId[i] = 10165;
	                            break;
	                        case "ATOM_GAME_MODE_CONFIGURATION":
	                        case 10166:
	                            m.pullAtomId[i] = 10166;
	                            break;
	                        case "ATOM_GAME_MODE_LISTENER":
	                        case 10167:
	                            m.pullAtomId[i] = 10167;
	                            break;
	                        case "ATOM_NETWORK_SLICE_REQUEST_COUNT":
	                        case 10168:
	                            m.pullAtomId[i] = 10168;
	                            break;
	                        case "ATOM_WS_TILE_SNAPSHOT":
	                        case 10169:
	                            m.pullAtomId[i] = 10169;
	                            break;
	                        case "ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT":
	                        case 10170:
	                            m.pullAtomId[i] = 10170;
	                            break;
	                        case "ATOM_PROCESS_STATE":
	                        case 10171:
	                            m.pullAtomId[i] = 10171;
	                            break;
	                        case "ATOM_PROCESS_ASSOCIATION":
	                        case 10172:
	                            m.pullAtomId[i] = 10172;
	                            break;
	                        case "ATOM_ADPF_SYSTEM_COMPONENT_INFO":
	                        case 10173:
	                            m.pullAtomId[i] = 10173;
	                            break;
	                        case "ATOM_NOTIFICATION_MEMORY_USE":
	                        case 10174:
	                            m.pullAtomId[i] = 10174;
	                            break;
	                        case "ATOM_HDR_CAPABILITIES":
	                        case 10175:
	                            m.pullAtomId[i] = 10175;
	                            break;
	                        case "ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT":
	                        case 10176:
	                            m.pullAtomId[i] = 10176;
	                            break;
	                        case "ATOM_ADAPTIVE_AUTH_UNLOCK_AFTER_LOCK_REPORTED":
	                        case 820:
	                            m.pullAtomId[i] = 820;
	                            break;
	                        case "ATOM_THERMAL_STATUS_CALLED":
	                        case 772:
	                            m.pullAtomId[i] = 772;
	                            break;
	                        case "ATOM_THERMAL_HEADROOM_CALLED":
	                        case 773:
	                            m.pullAtomId[i] = 773;
	                            break;
	                        case "ATOM_THERMAL_HEADROOM_THRESHOLDS_CALLED":
	                        case 774:
	                            m.pullAtomId[i] = 774;
	                            break;
	                        case "ATOM_ADPF_HINT_SESSION_TID_CLEANUP":
	                        case 839:
	                            m.pullAtomId[i] = 839;
	                            break;
	                        case "ATOM_THERMAL_HEADROOM_THRESHOLDS":
	                        case 10201:
	                            m.pullAtomId[i] = 10201;
	                            break;
	                        case "ATOM_ADPF_SESSION_SNAPSHOT":
	                        case 10218:
	                            m.pullAtomId[i] = 10218;
	                            break;
	                        case "ATOM_JSSCRIPTENGINE_LATENCY_REPORTED":
	                        case 483:
	                            m.pullAtomId[i] = 483;
	                            break;
	                        case "ATOM_AD_SERVICES_API_CALLED":
	                        case 435:
	                            m.pullAtomId[i] = 435;
	                            break;
	                        case "ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED":
	                        case 436:
	                            m.pullAtomId[i] = 436;
	                            break;
	                        case "ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED":
	                        case 490:
	                            m.pullAtomId[i] = 490;
	                            break;
	                        case "ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED":
	                        case 502:
	                            m.pullAtomId[i] = 502;
	                            break;
	                        case "ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED":
	                        case 493:
	                            m.pullAtomId[i] = 493;
	                            break;
	                        case "ATOM_BACKGROUND_FETCH_PROCESS_REPORTED":
	                        case 496:
	                            m.pullAtomId[i] = 496;
	                            break;
	                        case "ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED":
	                        case 497:
	                            m.pullAtomId[i] = 497;
	                            break;
	                        case "ATOM_RUN_AD_BIDDING_PROCESS_REPORTED":
	                        case 498:
	                            m.pullAtomId[i] = 498;
	                            break;
	                        case "ATOM_RUN_AD_SCORING_PROCESS_REPORTED":
	                        case 499:
	                            m.pullAtomId[i] = 499;
	                            break;
	                        case "ATOM_RUN_AD_SELECTION_PROCESS_REPORTED":
	                        case 500:
	                            m.pullAtomId[i] = 500;
	                            break;
	                        case "ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED":
	                        case 501:
	                            m.pullAtomId[i] = 501;
	                            break;
	                        case "ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED":
	                        case 503:
	                            m.pullAtomId[i] = 503;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS":
	                        case 512:
	                            m.pullAtomId[i] = 512;
	                            break;
	                        case "ATOM_AD_SERVICES_GET_TOPICS_REPORTED":
	                        case 535:
	                            m.pullAtomId[i] = 535;
	                            break;
	                        case "ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED":
	                        case 536:
	                            m.pullAtomId[i] = 536;
	                            break;
	                        case "ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED":
	                        case 537:
	                            m.pullAtomId[i] = 537;
	                            break;
	                        case "ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED":
	                        case 598:
	                            m.pullAtomId[i] = 598;
	                            break;
	                        case "ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED":
	                        case 599:
	                            m.pullAtomId[i] = 599;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS":
	                        case 640:
	                            m.pullAtomId[i] = 640;
	                            break;
	                        case "ATOM_AD_SERVICES_ERROR_REPORTED":
	                        case 662:
	                            m.pullAtomId[i] = 662;
	                            break;
	                        case "ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED":
	                        case 663:
	                            m.pullAtomId[i] = 663;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION":
	                        case 673:
	                            m.pullAtomId[i] = 673;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION":
	                        case 674:
	                            m.pullAtomId[i] = 674;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_JOBS":
	                        case 675:
	                            m.pullAtomId[i] = 675;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT":
	                        case 676:
	                            m.pullAtomId[i] = 676;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_AD_ID_MATCH_FOR_DEBUG_KEYS":
	                        case 695:
	                            m.pullAtomId[i] = 695;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_DATA_STORED":
	                        case 697:
	                            m.pullAtomId[i] = 697;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_FILE_DOWNLOADED":
	                        case 698:
	                            m.pullAtomId[i] = 698;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_MATCHED":
	                        case 699:
	                            m.pullAtomId[i] = 699;
	                            break;
	                        case "ATOM_AD_SERVICES_CONSENT_MIGRATED":
	                        case 702:
	                            m.pullAtomId[i] = 702;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_FAILED":
	                        case 714:
	                            m.pullAtomId[i] = 714;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_CLICK_VERIFICATION":
	                        case 756:
	                            m.pullAtomId[i] = 756;
	                            break;
	                        case "ATOM_AD_SERVICES_ENCRYPTION_KEY_FETCHED":
	                        case 765:
	                            m.pullAtomId[i] = 765;
	                            break;
	                        case "ATOM_AD_SERVICES_ENCRYPTION_KEY_DB_TRANSACTION_ENDED":
	                        case 766:
	                            m.pullAtomId[i] = 766;
	                            break;
	                        case "ATOM_DESTINATION_REGISTERED_BEACONS":
	                        case 767:
	                            m.pullAtomId[i] = 767;
	                            break;
	                        case "ATOM_REPORT_INTERACTION_API_CALLED":
	                        case 768:
	                            m.pullAtomId[i] = 768;
	                            break;
	                        case "ATOM_INTERACTION_REPORTING_TABLE_CLEARED":
	                        case 769:
	                            m.pullAtomId[i] = 769;
	                            break;
	                        case "ATOM_APP_MANIFEST_CONFIG_HELPER_CALLED":
	                        case 788:
	                            m.pullAtomId[i] = 788;
	                            break;
	                        case "ATOM_AD_FILTERING_PROCESS_JOIN_CA_REPORTED":
	                        case 793:
	                            m.pullAtomId[i] = 793;
	                            break;
	                        case "ATOM_AD_FILTERING_PROCESS_AD_SELECTION_REPORTED":
	                        case 794:
	                            m.pullAtomId[i] = 794;
	                            break;
	                        case "ATOM_AD_COUNTER_HISTOGRAM_UPDATER_REPORTED":
	                        case 795:
	                            m.pullAtomId[i] = 795;
	                            break;
	                        case "ATOM_SIGNATURE_VERIFICATION":
	                        case 807:
	                            m.pullAtomId[i] = 807;
	                            break;
	                        case "ATOM_K_ANON_IMMEDIATE_SIGN_JOIN_STATUS_REPORTED":
	                        case 808:
	                            m.pullAtomId[i] = 808;
	                            break;
	                        case "ATOM_K_ANON_BACKGROUND_JOB_STATUS_REPORTED":
	                        case 809:
	                            m.pullAtomId[i] = 809;
	                            break;
	                        case "ATOM_K_ANON_INITIALIZE_STATUS_REPORTED":
	                        case 810:
	                            m.pullAtomId[i] = 810;
	                            break;
	                        case "ATOM_K_ANON_SIGN_STATUS_REPORTED":
	                        case 811:
	                            m.pullAtomId[i] = 811;
	                            break;
	                        case "ATOM_K_ANON_JOIN_STATUS_REPORTED":
	                        case 812:
	                            m.pullAtomId[i] = 812;
	                            break;
	                        case "ATOM_K_ANON_KEY_ATTESTATION_STATUS_REPORTED":
	                        case 813:
	                            m.pullAtomId[i] = 813;
	                            break;
	                        case "ATOM_GET_AD_SELECTION_DATA_API_CALLED":
	                        case 814:
	                            m.pullAtomId[i] = 814;
	                            break;
	                        case "ATOM_GET_AD_SELECTION_DATA_BUYER_INPUT_GENERATED":
	                        case 815:
	                            m.pullAtomId[i] = 815;
	                            break;
	                        case "ATOM_BACKGROUND_JOB_SCHEDULING_REPORTED":
	                        case 834:
	                            m.pullAtomId[i] = 834;
	                            break;
	                        case "ATOM_TOPICS_ENCRYPTION_EPOCH_COMPUTATION_REPORTED":
	                        case 840:
	                            m.pullAtomId[i] = 840;
	                            break;
	                        case "ATOM_TOPICS_ENCRYPTION_GET_TOPICS_REPORTED":
	                        case 841:
	                            m.pullAtomId[i] = 841;
	                            break;
	                        case "ATOM_ADSERVICES_SHELL_COMMAND_CALLED":
	                        case 842:
	                            m.pullAtomId[i] = 842;
	                            break;
	                        case "ATOM_UPDATE_SIGNALS_API_CALLED":
	                        case 843:
	                            m.pullAtomId[i] = 843;
	                            break;
	                        case "ATOM_ENCODING_JOB_RUN":
	                        case 844:
	                            m.pullAtomId[i] = 844;
	                            break;
	                        case "ATOM_ENCODING_JS_FETCH":
	                        case 845:
	                            m.pullAtomId[i] = 845;
	                            break;
	                        case "ATOM_ENCODING_JS_EXECUTION":
	                        case 846:
	                            m.pullAtomId[i] = 846;
	                            break;
	                        case "ATOM_PERSIST_AD_SELECTION_RESULT_CALLED":
	                        case 847:
	                            m.pullAtomId[i] = 847;
	                            break;
	                        case "ATOM_SERVER_AUCTION_KEY_FETCH_CALLED":
	                        case 848:
	                            m.pullAtomId[i] = 848;
	                            break;
	                        case "ATOM_SERVER_AUCTION_BACKGROUND_KEY_FETCH_ENABLED":
	                        case 849:
	                            m.pullAtomId[i] = 849;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_PROCESS_ODP_REGISTRATION":
	                        case 864:
	                            m.pullAtomId[i] = 864;
	                            break;
	                        case "ATOM_AD_SERVICES_MEASUREMENT_NOTIFY_REGISTRATION_TO_ODP":
	                        case 865:
	                            m.pullAtomId[i] = 865;
	                            break;
	                        case "ATOM_SELECT_ADS_FROM_OUTCOMES_API_CALLED":
	                        case 876:
	                            m.pullAtomId[i] = 876;
	                            break;
	                        case "ATOM_REPORT_IMPRESSION_API_CALLED":
	                        case 877:
	                            m.pullAtomId[i] = 877;
	                            break;
	                        case "ATOM_AD_SERVICES_ENROLLMENT_TRANSACTION_STATS":
	                        case 885:
	                            m.pullAtomId[i] = 885;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_BUTTON_PRESSED":
	                        case 706:
	                            m.pullAtomId[i] = 706;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_TEMPLATE_SELECTED":
	                        case 707:
	                            m.pullAtomId[i] = 707;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_TERM_SELECTED":
	                        case 708:
	                            m.pullAtomId[i] = 708;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_WALLPAPER_SET":
	                        case 709:
	                            m.pullAtomId[i] = 709;
	                            break;
	                        case "ATOM_AI_WALLPAPERS_SESSION_SUMMARY":
	                        case 710:
	                            m.pullAtomId[i] = 710;
	                            break;
	                        case "ATOM_APEX_INSTALLATION_REQUESTED":
	                        case 732:
	                            m.pullAtomId[i] = 732;
	                            break;
	                        case "ATOM_APEX_INSTALLATION_STAGED":
	                        case 733:
	                            m.pullAtomId[i] = 733;
	                            break;
	                        case "ATOM_APEX_INSTALLATION_ENDED":
	                        case 734:
	                            m.pullAtomId[i] = 734;
	                            break;
	                        case "ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED":
	                        case 385:
	                            m.pullAtomId[i] = 385;
	                            break;
	                        case "ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED":
	                        case 579:
	                            m.pullAtomId[i] = 579;
	                            break;
	                        case "ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_STATS_REPORTED":
	                        case 825:
	                            m.pullAtomId[i] = 825;
	                            break;
	                        case "ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_RAW_QUERY_STATS_REPORTED":
	                        case 826:
	                            m.pullAtomId[i] = 826;
	                            break;
	                        case "ATOM_ART_DATUM_REPORTED":
	                        case 332:
	                            m.pullAtomId[i] = 332;
	                            break;
	                        case "ATOM_ART_DEVICE_DATUM_REPORTED":
	                        case 550:
	                            m.pullAtomId[i] = 550;
	                            break;
	                        case "ATOM_ART_DATUM_DELTA_REPORTED":
	                        case 565:
	                            m.pullAtomId[i] = 565;
	                            break;
	                        case "ATOM_ART_DEX2OAT_REPORTED":
	                        case 929:
	                            m.pullAtomId[i] = 929;
	                            break;
	                        case "ATOM_ART_DEVICE_STATUS":
	                        case 10205:
	                            m.pullAtomId[i] = 10205;
	                            break;
	                        case "ATOM_BACKGROUND_DEXOPT_JOB_ENDED":
	                        case 467:
	                            m.pullAtomId[i] = 467;
	                            break;
	                        case "ATOM_PREREBOOT_DEXOPT_JOB_ENDED":
	                        case 883:
	                            m.pullAtomId[i] = 883;
	                            break;
	                        case "ATOM_ODREFRESH_REPORTED":
	                        case 366:
	                            m.pullAtomId[i] = 366;
	                            break;
	                        case "ATOM_ODSIGN_REPORTED":
	                        case 548:
	                            m.pullAtomId[i] = 548;
	                            break;
	                        case "ATOM_AUTOFILL_UI_EVENT_REPORTED":
	                        case 603:
	                            m.pullAtomId[i] = 603;
	                            break;
	                        case "ATOM_AUTOFILL_FILL_REQUEST_REPORTED":
	                        case 604:
	                            m.pullAtomId[i] = 604;
	                            break;
	                        case "ATOM_AUTOFILL_FILL_RESPONSE_REPORTED":
	                        case 605:
	                            m.pullAtomId[i] = 605;
	                            break;
	                        case "ATOM_AUTOFILL_SAVE_EVENT_REPORTED":
	                        case 606:
	                            m.pullAtomId[i] = 606;
	                            break;
	                        case "ATOM_AUTOFILL_SESSION_COMMITTED":
	                        case 607:
	                            m.pullAtomId[i] = 607;
	                            break;
	                        case "ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED":
	                        case 659:
	                            m.pullAtomId[i] = 659;
	                            break;
	                        case "ATOM_CAR_RECENTS_EVENT_REPORTED":
	                        case 770:
	                            m.pullAtomId[i] = 770;
	                            break;
	                        case "ATOM_CAR_CALM_MODE_EVENT_REPORTED":
	                        case 797:
	                            m.pullAtomId[i] = 797;
	                            break;
	                        case "ATOM_CAR_WAKEUP_FROM_SUSPEND_REPORTED":
	                        case 852:
	                            m.pullAtomId[i] = 852;
	                            break;
	                        case "ATOM_PLUGIN_INITIALIZED":
	                        case 655:
	                            m.pullAtomId[i] = 655;
	                            break;
	                        case "ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED":
	                        case 613:
	                            m.pullAtomId[i] = 613;
	                            break;
	                        case "ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION":
	                        case 614:
	                            m.pullAtomId[i] = 614;
	                            break;
	                        case "ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION":
	                        case 615:
	                            m.pullAtomId[i] = 615;
	                            break;
	                        case "ATOM_BLUETOOTH_LE_SESSION_CONNECTED":
	                        case 656:
	                            m.pullAtomId[i] = 656;
	                            break;
	                        case "ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED":
	                        case 666:
	                            m.pullAtomId[i] = 666;
	                            break;
	                        case "ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED":
	                        case 696:
	                            m.pullAtomId[i] = 696;
	                            break;
	                        case "ATOM_BLUETOOTH_CONTENT_PROFILE_ERROR_REPORTED":
	                        case 781:
	                            m.pullAtomId[i] = 781;
	                            break;
	                        case "ATOM_BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED":
	                        case 782:
	                            m.pullAtomId[i] = 782;
	                            break;
	                        case "ATOM_REMOTE_DEVICE_INFORMATION_WITH_METRIC_ID":
	                        case 862:
	                            m.pullAtomId[i] = 862;
	                            break;
	                        case "ATOM_LE_APP_SCAN_STATE_CHANGED":
	                        case 870:
	                            m.pullAtomId[i] = 870;
	                            break;
	                        case "ATOM_LE_RADIO_SCAN_STOPPED":
	                        case 871:
	                            m.pullAtomId[i] = 871;
	                            break;
	                        case "ATOM_LE_SCAN_RESULT_RECEIVED":
	                        case 872:
	                            m.pullAtomId[i] = 872;
	                            break;
	                        case "ATOM_LE_SCAN_ABUSED":
	                        case 873:
	                            m.pullAtomId[i] = 873;
	                            break;
	                        case "ATOM_LE_ADV_STATE_CHANGED":
	                        case 874:
	                            m.pullAtomId[i] = 874;
	                            break;
	                        case "ATOM_LE_ADV_ERROR_REPORTED":
	                        case 875:
	                            m.pullAtomId[i] = 875;
	                            break;
	                        case "ATOM_A2DP_SESSION_REPORTED":
	                        case 904:
	                            m.pullAtomId[i] = 904;
	                            break;
	                        case "ATOM_BLUETOOTH_CROSS_LAYER_EVENT_REPORTED":
	                        case 916:
	                            m.pullAtomId[i] = 916;
	                            break;
	                        case "ATOM_BROADCAST_AUDIO_SESSION_REPORTED":
	                        case 927:
	                            m.pullAtomId[i] = 927;
	                            break;
	                        case "ATOM_BROADCAST_AUDIO_SYNC_REPORTED":
	                        case 928:
	                            m.pullAtomId[i] = 928;
	                            break;
	                        case "ATOM_BLUETOOTH_RFCOMM_CONNECTION_REPORTED_AT_CLOSE":
	                        case 982:
	                            m.pullAtomId[i] = 982;
	                            break;
	                        case "ATOM_CAMERA_FEATURE_COMBINATION_QUERY_EVENT":
	                        case 900:
	                            m.pullAtomId[i] = 900;
	                            break;
	                        case "ATOM_DAILY_KEEPALIVE_INFO_REPORTED":
	                        case 650:
	                            m.pullAtomId[i] = 650;
	                            break;
	                        case "ATOM_NETWORK_REQUEST_STATE_CHANGED":
	                        case 779:
	                            m.pullAtomId[i] = 779;
	                            break;
	                        case "ATOM_TETHERING_ACTIVE_SESSIONS_REPORTED":
	                        case 925:
	                            m.pullAtomId[i] = 925;
	                            break;
	                        case "ATOM_NETWORK_STATS_RECORDER_FILE_OPERATED":
	                        case 783:
	                            m.pullAtomId[i] = 783;
	                            break;
	                        case "ATOM_CORE_NETWORKING_TERRIBLE_ERROR_OCCURRED":
	                        case 979:
	                            m.pullAtomId[i] = 979;
	                            break;
	                        case "ATOM_APF_SESSION_INFO_REPORTED":
	                        case 777:
	                            m.pullAtomId[i] = 777;
	                            break;
	                        case "ATOM_IP_CLIENT_RA_INFO_REPORTED":
	                        case 778:
	                            m.pullAtomId[i] = 778;
	                            break;
	                        case "ATOM_VPN_CONNECTION_STATE_CHANGED":
	                        case 850:
	                            m.pullAtomId[i] = 850;
	                            break;
	                        case "ATOM_VPN_CONNECTION_REPORTED":
	                        case 851:
	                            m.pullAtomId[i] = 851;
	                            break;
	                        case "ATOM_CPU_POLICY":
	                        case 10199:
	                            m.pullAtomId[i] = 10199;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_API_CALLED":
	                        case 585:
	                            m.pullAtomId[i] = 585;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED":
	                        case 651:
	                            m.pullAtomId[i] = 651;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED":
	                        case 652:
	                            m.pullAtomId[i] = 652;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED":
	                        case 653:
	                            m.pullAtomId[i] = 653;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED":
	                        case 667:
	                            m.pullAtomId[i] = 667;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED":
	                        case 668:
	                            m.pullAtomId[i] = 668;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_GET_REPORTED":
	                        case 669:
	                            m.pullAtomId[i] = 669;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED":
	                        case 670:
	                            m.pullAtomId[i] = 670;
	                            break;
	                        case "ATOM_CREDENTIAL_MANAGER_APIV2_CALLED":
	                        case 671:
	                            m.pullAtomId[i] = 671;
	                            break;
	                        case "ATOM_CRONET_ENGINE_CREATED":
	                        case 703:
	                            m.pullAtomId[i] = 703;
	                            break;
	                        case "ATOM_CRONET_TRAFFIC_REPORTED":
	                        case 704:
	                            m.pullAtomId[i] = 704;
	                            break;
	                        case "ATOM_CRONET_ENGINE_BUILDER_INITIALIZED":
	                        case 762:
	                            m.pullAtomId[i] = 762;
	                            break;
	                        case "ATOM_CRONET_HTTP_FLAGS_INITIALIZED":
	                        case 763:
	                            m.pullAtomId[i] = 763;
	                            break;
	                        case "ATOM_CRONET_INITIALIZED":
	                        case 764:
	                            m.pullAtomId[i] = 764;
	                            break;
	                        case "ATOM_DESKTOP_MODE_UI_CHANGED":
	                        case 818:
	                            m.pullAtomId[i] = 818;
	                            break;
	                        case "ATOM_DESKTOP_MODE_SESSION_TASK_UPDATE":
	                        case 819:
	                            m.pullAtomId[i] = 819;
	                            break;
	                        case "ATOM_DEVICE_LOCK_CHECK_IN_REQUEST_REPORTED":
	                        case 726:
	                            m.pullAtomId[i] = 726;
	                            break;
	                        case "ATOM_DEVICE_LOCK_PROVISIONING_COMPLETE_REPORTED":
	                        case 727:
	                            m.pullAtomId[i] = 727;
	                            break;
	                        case "ATOM_DEVICE_LOCK_KIOSK_APP_REQUEST_REPORTED":
	                        case 728:
	                            m.pullAtomId[i] = 728;
	                            break;
	                        case "ATOM_DEVICE_LOCK_CHECK_IN_RETRY_REPORTED":
	                        case 789:
	                            m.pullAtomId[i] = 789;
	                            break;
	                        case "ATOM_DEVICE_LOCK_PROVISION_FAILURE_REPORTED":
	                        case 790:
	                            m.pullAtomId[i] = 790;
	                            break;
	                        case "ATOM_DEVICE_LOCK_LOCK_UNLOCK_DEVICE_FAILURE_REPORTED":
	                        case 791:
	                            m.pullAtomId[i] = 791;
	                            break;
	                        case "ATOM_DEVICE_POLICY_MANAGEMENT_MODE":
	                        case 10216:
	                            m.pullAtomId[i] = 10216;
	                            break;
	                        case "ATOM_DEVICE_POLICY_STATE":
	                        case 10217:
	                            m.pullAtomId[i] = 10217;
	                            break;
	                        case "ATOM_DISPLAY_MODE_DIRECTOR_VOTE_CHANGED":
	                        case 792:
	                            m.pullAtomId[i] = 792;
	                            break;
	                        case "ATOM_EXTERNAL_DISPLAY_STATE_CHANGED":
	                        case 806:
	                            m.pullAtomId[i] = 806;
	                            break;
	                        case "ATOM_DND_STATE_CHANGED":
	                        case 657:
	                            m.pullAtomId[i] = 657;
	                            break;
	                        case "ATOM_DREAM_SETTING_CHANGED":
	                        case 705:
	                            m.pullAtomId[i] = 705;
	                            break;
	                        case "ATOM_DREAM_SETTING_SNAPSHOT":
	                        case 10192:
	                            m.pullAtomId[i] = 10192;
	                            break;
	                        case "ATOM_EXPRESS_EVENT_REPORTED":
	                        case 528:
	                            m.pullAtomId[i] = 528;
	                            break;
	                        case "ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED":
	                        case 593:
	                            m.pullAtomId[i] = 593;
	                            break;
	                        case "ATOM_EXPRESS_UID_EVENT_REPORTED":
	                        case 644:
	                            m.pullAtomId[i] = 644;
	                            break;
	                        case "ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED":
	                        case 658:
	                            m.pullAtomId[i] = 658;
	                            break;
	                        case "ATOM_FEDERATED_COMPUTE_API_CALLED":
	                        case 712:
	                            m.pullAtomId[i] = 712;
	                            break;
	                        case "ATOM_FEDERATED_COMPUTE_TRAINING_EVENT_REPORTED":
	                        case 771:
	                            m.pullAtomId[i] = 771;
	                            break;
	                        case "ATOM_EXAMPLE_ITERATOR_NEXT_LATENCY_REPORTED":
	                        case 838:
	                            m.pullAtomId[i] = 838;
	                            break;
	                        case "ATOM_FULL_SCREEN_INTENT_LAUNCHED":
	                        case 631:
	                            m.pullAtomId[i] = 631;
	                            break;
	                        case "ATOM_BAL_ALLOWED":
	                        case 632:
	                            m.pullAtomId[i] = 632;
	                            break;
	                        case "ATOM_IN_TASK_ACTIVITY_STARTED":
	                        case 685:
	                            m.pullAtomId[i] = 685;
	                            break;
	                        case "ATOM_CACHED_APPS_HIGH_WATERMARK":
	                        case 10189:
	                            m.pullAtomId[i] = 10189;
	                            break;
	                        case "ATOM_STYLUS_PREDICTION_METRICS_REPORTED":
	                        case 718:
	                            m.pullAtomId[i] = 718;
	                            break;
	                        case "ATOM_USER_RISK_EVENT_REPORTED":
	                        case 725:
	                            m.pullAtomId[i] = 725;
	                            break;
	                        case "ATOM_MEDIA_PROJECTION_STATE_CHANGED":
	                        case 729:
	                            m.pullAtomId[i] = 729;
	                            break;
	                        case "ATOM_MEDIA_PROJECTION_TARGET_CHANGED":
	                        case 730:
	                            m.pullAtomId[i] = 730;
	                            break;
	                        case "ATOM_EXCESSIVE_BINDER_PROXY_COUNT_REPORTED":
	                        case 853:
	                            m.pullAtomId[i] = 853;
	                            break;
	                        case "ATOM_PROXY_BYTES_TRANSFER_BY_FG_BG":
	                        case 10200:
	                            m.pullAtomId[i] = 10200;
	                            break;
	                        case "ATOM_MOBILE_BYTES_TRANSFER_BY_PROC_STATE":
	                        case 10204:
	                            m.pullAtomId[i] = 10204;
	                            break;
	                        case "ATOM_BIOMETRIC_FRR_NOTIFICATION":
	                        case 817:
	                            m.pullAtomId[i] = 817;
	                            break;
	                        case "ATOM_SENSITIVE_CONTENT_MEDIA_PROJECTION_SESSION":
	                        case 830:
	                            m.pullAtomId[i] = 830;
	                            break;
	                        case "ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_SESSION":
	                        case 831:
	                            m.pullAtomId[i] = 831;
	                            break;
	                        case "ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_APPLIED":
	                        case 832:
	                            m.pullAtomId[i] = 832;
	                            break;
	                        case "ATOM_SENSITIVE_NOTIFICATION_REDACTION":
	                        case 833:
	                            m.pullAtomId[i] = 833;
	                            break;
	                        case "ATOM_SENSITIVE_CONTENT_APP_PROTECTION":
	                        case 835:
	                            m.pullAtomId[i] = 835;
	                            break;
	                        case "ATOM_APP_RESTRICTION_STATE_CHANGED":
	                        case 866:
	                            m.pullAtomId[i] = 866;
	                            break;
	                        case "ATOM_APPLICATION_GRAMMATICAL_INFLECTION_CHANGED":
	                        case 584:
	                            m.pullAtomId[i] = 584;
	                            break;
	                        case "ATOM_SYSTEM_GRAMMATICAL_INFLECTION_CHANGED":
	                        case 816:
	                            m.pullAtomId[i] = 816;
	                            break;
	                        case "ATOM_HDMI_EARC_STATUS_REPORTED":
	                        case 701:
	                            m.pullAtomId[i] = 701;
	                            break;
	                        case "ATOM_HDMI_SOUNDBAR_MODE_STATUS_REPORTED":
	                        case 724:
	                            m.pullAtomId[i] = 724;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_API_CALLED":
	                        case 616:
	                            m.pullAtomId[i] = 616;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_USAGE_STATS":
	                        case 617:
	                            m.pullAtomId[i] = 617;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_STORAGE_STATS":
	                        case 618:
	                            m.pullAtomId[i] = 618;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_API_INVOKED":
	                        case 643:
	                            m.pullAtomId[i] = 643;
	                            break;
	                        case "ATOM_EXERCISE_ROUTE_API_CALLED":
	                        case 654:
	                            m.pullAtomId[i] = 654;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_UI_IMPRESSION":
	                        case 623:
	                            m.pullAtomId[i] = 623;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_UI_INTERACTION":
	                        case 624:
	                            m.pullAtomId[i] = 624;
	                            break;
	                        case "ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED":
	                        case 625:
	                            m.pullAtomId[i] = 625;
	                            break;
	                        case "ATOM_HOTWORD_EGRESS_SIZE_ATOM_REPORTED":
	                        case 761:
	                            m.pullAtomId[i] = 761;
	                            break;
	                        case "ATOM_IKE_SESSION_TERMINATED":
	                        case 678:
	                            m.pullAtomId[i] = 678;
	                            break;
	                        case "ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED":
	                        case 760:
	                            m.pullAtomId[i] = 760;
	                            break;
	                        case "ATOM_NEGOTIATED_SECURITY_ASSOCIATION":
	                        case 821:
	                            m.pullAtomId[i] = 821;
	                            break;
	                        case "ATOM_KEYBOARD_CONFIGURED":
	                        case 682:
	                            m.pullAtomId[i] = 682;
	                            break;
	                        case "ATOM_KEYBOARD_SYSTEMS_EVENT_REPORTED":
	                        case 683:
	                            m.pullAtomId[i] = 683;
	                            break;
	                        case "ATOM_INPUTDEVICE_USAGE_REPORTED":
	                        case 686:
	                            m.pullAtomId[i] = 686;
	                            break;
	                        case "ATOM_TOUCHPAD_USAGE":
	                        case 10191:
	                            m.pullAtomId[i] = 10191;
	                            break;
	                        case "ATOM_KERNEL_OOM_KILL_OCCURRED":
	                        case 754:
	                            m.pullAtomId[i] = 754;
	                            break;
	                        case "ATOM_EMERGENCY_STATE_CHANGED":
	                        case 633:
	                            m.pullAtomId[i] = 633;
	                            break;
	                        case "ATOM_CHRE_SIGNIFICANT_MOTION_STATE_CHANGED":
	                        case 868:
	                            m.pullAtomId[i] = 868;
	                            break;
	                        case "ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED":
	                        case 600:
	                            m.pullAtomId[i] = 600;
	                            break;
	                        case "ATOM_MEDIA_CODEC_STARTED":
	                        case 641:
	                            m.pullAtomId[i] = 641;
	                            break;
	                        case "ATOM_MEDIA_CODEC_STOPPED":
	                        case 642:
	                            m.pullAtomId[i] = 642;
	                            break;
	                        case "ATOM_MEDIA_CODEC_RENDERED":
	                        case 684:
	                            m.pullAtomId[i] = 684;
	                            break;
	                        case "ATOM_MEDIA_EDITING_ENDED_REPORTED":
	                        case 798:
	                            m.pullAtomId[i] = 798;
	                            break;
	                        case "ATOM_MTE_STATE":
	                        case 10181:
	                            m.pullAtomId[i] = 10181;
	                            break;
	                        case "ATOM_NFC_OBSERVE_MODE_STATE_CHANGED":
	                        case 855:
	                            m.pullAtomId[i] = 855;
	                            break;
	                        case "ATOM_NFC_FIELD_CHANGED":
	                        case 856:
	                            m.pullAtomId[i] = 856;
	                            break;
	                        case "ATOM_NFC_POLLING_LOOP_NOTIFICATION_REPORTED":
	                        case 857:
	                            m.pullAtomId[i] = 857;
	                            break;
	                        case "ATOM_NFC_PROPRIETARY_CAPABILITIES_REPORTED":
	                        case 858:
	                            m.pullAtomId[i] = 858;
	                            break;
	                        case "ATOM_ONDEVICEPERSONALIZATION_API_CALLED":
	                        case 711:
	                            m.pullAtomId[i] = 711;
	                            break;
	                        case "ATOM_COMPONENT_STATE_CHANGED_REPORTED":
	                        case 863:
	                            m.pullAtomId[i] = 863;
	                            break;
	                        case "ATOM_PDF_LOAD_REPORTED":
	                        case 859:
	                            m.pullAtomId[i] = 859;
	                            break;
	                        case "ATOM_PDF_API_USAGE_REPORTED":
	                        case 860:
	                            m.pullAtomId[i] = 860;
	                            break;
	                        case "ATOM_PDF_SEARCH_REPORTED":
	                        case 861:
	                            m.pullAtomId[i] = 861;
	                            break;
	                        case "ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED":
	                        case 645:
	                            m.pullAtomId[i] = 645;
	                            break;
	                        case "ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED":
	                        case 646:
	                            m.pullAtomId[i] = 646;
	                            break;
	                        case "ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION":
	                        case 647:
	                            m.pullAtomId[i] = 647;
	                            break;
	                        case "ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED":
	                        case 648:
	                            m.pullAtomId[i] = 648;
	                            break;
	                        case "ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED":
	                        case 649:
	                            m.pullAtomId[i] = 649;
	                            break;
	                        case "ATOM_ENHANCED_CONFIRMATION_DIALOG_RESULT_REPORTED":
	                        case 827:
	                            m.pullAtomId[i] = 827;
	                            break;
	                        case "ATOM_ENHANCED_CONFIRMATION_RESTRICTION_CLEARED":
	                        case 828:
	                            m.pullAtomId[i] = 828;
	                            break;
	                        case "ATOM_PHOTOPICKER_SESSION_INFO_REPORTED":
	                        case 886:
	                            m.pullAtomId[i] = 886;
	                            break;
	                        case "ATOM_PHOTOPICKER_API_INFO_REPORTED":
	                        case 887:
	                            m.pullAtomId[i] = 887;
	                            break;
	                        case "ATOM_PHOTOPICKER_UI_EVENT_LOGGED":
	                        case 888:
	                            m.pullAtomId[i] = 888;
	                            break;
	                        case "ATOM_PHOTOPICKER_MEDIA_ITEM_STATUS_REPORTED":
	                        case 889:
	                            m.pullAtomId[i] = 889;
	                            break;
	                        case "ATOM_PHOTOPICKER_PREVIEW_INFO_LOGGED":
	                        case 890:
	                            m.pullAtomId[i] = 890;
	                            break;
	                        case "ATOM_PHOTOPICKER_MENU_INTERACTION_LOGGED":
	                        case 891:
	                            m.pullAtomId[i] = 891;
	                            break;
	                        case "ATOM_PHOTOPICKER_BANNER_INTERACTION_LOGGED":
	                        case 892:
	                            m.pullAtomId[i] = 892;
	                            break;
	                        case "ATOM_PHOTOPICKER_MEDIA_LIBRARY_INFO_LOGGED":
	                        case 893:
	                            m.pullAtomId[i] = 893;
	                            break;
	                        case "ATOM_PHOTOPICKER_PAGE_INFO_LOGGED":
	                        case 894:
	                            m.pullAtomId[i] = 894;
	                            break;
	                        case "ATOM_PHOTOPICKER_MEDIA_GRID_SYNC_INFO_REPORTED":
	                        case 895:
	                            m.pullAtomId[i] = 895;
	                            break;
	                        case "ATOM_PHOTOPICKER_ALBUM_SYNC_INFO_REPORTED":
	                        case 896:
	                            m.pullAtomId[i] = 896;
	                            break;
	                        case "ATOM_PHOTOPICKER_SEARCH_INFO_REPORTED":
	                        case 897:
	                            m.pullAtomId[i] = 897;
	                            break;
	                        case "ATOM_SEARCH_DATA_EXTRACTION_DETAILS_REPORTED":
	                        case 898:
	                            m.pullAtomId[i] = 898;
	                            break;
	                        case "ATOM_EMBEDDED_PHOTOPICKER_INFO_REPORTED":
	                        case 899:
	                            m.pullAtomId[i] = 899;
	                            break;
	                        case "ATOM_ATOM_9999":
	                        case 9999:
	                            m.pullAtomId[i] = 9999;
	                            break;
	                        case "ATOM_ATOM_99999":
	                        case 99999:
	                            m.pullAtomId[i] = 99999;
	                            break;
	                        case "ATOM_SCREEN_OFF_REPORTED":
	                        case 776:
	                            m.pullAtomId[i] = 776;
	                            break;
	                        case "ATOM_SCREEN_TIMEOUT_OVERRIDE_REPORTED":
	                        case 836:
	                            m.pullAtomId[i] = 836;
	                            break;
	                        case "ATOM_SCREEN_INTERACTIVE_SESSION_REPORTED":
	                        case 837:
	                            m.pullAtomId[i] = 837;
	                            break;
	                        case "ATOM_SCREEN_DIM_REPORTED":
	                        case 867:
	                            m.pullAtomId[i] = 867;
	                            break;
	                        case "ATOM_MEDIA_PROVIDER_DATABASE_ROLLBACK_REPORTED":
	                        case 784:
	                            m.pullAtomId[i] = 784;
	                            break;
	                        case "ATOM_BACKUP_SETUP_STATUS_REPORTED":
	                        case 785:
	                            m.pullAtomId[i] = 785;
	                            break;
	                        case "ATOM_RKPD_POOL_STATS":
	                        case 664:
	                            m.pullAtomId[i] = 664;
	                            break;
	                        case "ATOM_RKPD_CLIENT_OPERATION":
	                        case 665:
	                            m.pullAtomId[i] = 665;
	                            break;
	                        case "ATOM_SANDBOX_API_CALLED":
	                        case 488:
	                            m.pullAtomId[i] = 488;
	                            break;
	                        case "ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED":
	                        case 735:
	                            m.pullAtomId[i] = 735;
	                            break;
	                        case "ATOM_SDK_SANDBOX_RESTRICTED_ACCESS_IN_SESSION":
	                        case 796:
	                            m.pullAtomId[i] = 796;
	                            break;
	                        case "ATOM_SANDBOX_SDK_STORAGE":
	                        case 10159:
	                            m.pullAtomId[i] = 10159;
	                            break;
	                        case "ATOM_SELINUX_AUDIT_LOG":
	                        case 799:
	                            m.pullAtomId[i] = 799;
	                            break;
	                        case "ATOM_SETTINGS_SPA_REPORTED":
	                        case 622:
	                            m.pullAtomId[i] = 622;
	                            break;
	                        case "ATOM_TEST_EXTENSION_ATOM_REPORTED":
	                        case 660:
	                            m.pullAtomId[i] = 660;
	                            break;
	                        case "ATOM_TEST_RESTRICTED_ATOM_REPORTED":
	                        case 672:
	                            m.pullAtomId[i] = 672;
	                            break;
	                        case "ATOM_STATS_SOCKET_LOSS_REPORTED":
	                        case 752:
	                            m.pullAtomId[i] = 752;
	                            break;
	                        case "ATOM_LOCKSCREEN_SHORTCUT_SELECTED":
	                        case 611:
	                            m.pullAtomId[i] = 611;
	                            break;
	                        case "ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED":
	                        case 612:
	                            m.pullAtomId[i] = 612;
	                            break;
	                        case "ATOM_LAUNCHER_IMPRESSION_EVENT_V2":
	                        case 716:
	                            m.pullAtomId[i] = 716;
	                            break;
	                        case "ATOM_DISPLAY_SWITCH_LATENCY_TRACKED":
	                        case 753:
	                            m.pullAtomId[i] = 753;
	                            break;
	                        case "ATOM_NOTIFICATION_LISTENER_SERVICE":
	                        case 829:
	                            m.pullAtomId[i] = 829;
	                            break;
	                        case "ATOM_NAV_HANDLE_TOUCH_POINTS":
	                        case 869:
	                            m.pullAtomId[i] = 869;
	                            break;
	                        case "ATOM_EMERGENCY_NUMBER_DIALED":
	                        case 637:
	                            m.pullAtomId[i] = 637;
	                            break;
	                        case "ATOM_CELLULAR_RADIO_POWER_STATE_CHANGED":
	                        case 713:
	                            m.pullAtomId[i] = 713;
	                            break;
	                        case "ATOM_EMERGENCY_NUMBERS_INFO":
	                        case 10180:
	                            m.pullAtomId[i] = 10180;
	                            break;
	                        case "ATOM_DATA_NETWORK_VALIDATION":
	                        case 10207:
	                            m.pullAtomId[i] = 10207;
	                            break;
	                        case "ATOM_DATA_RAT_STATE_CHANGED":
	                        case 854:
	                            m.pullAtomId[i] = 854;
	                            break;
	                        case "ATOM_CONNECTED_CHANNEL_CHANGED":
	                        case 882:
	                            m.pullAtomId[i] = 882;
	                            break;
	                        case "ATOM_QUALIFIED_RAT_LIST_CHANGED":
	                        case 634:
	                            m.pullAtomId[i] = 634;
	                            break;
	                        case "ATOM_QNS_IMS_CALL_DROP_STATS":
	                        case 635:
	                            m.pullAtomId[i] = 635;
	                            break;
	                        case "ATOM_QNS_FALLBACK_RESTRICTION_CHANGED":
	                        case 636:
	                            m.pullAtomId[i] = 636;
	                            break;
	                        case "ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO":
	                        case 10177:
	                            m.pullAtomId[i] = 10177;
	                            break;
	                        case "ATOM_QNS_HANDOVER_TIME_MILLIS":
	                        case 10178:
	                            m.pullAtomId[i] = 10178;
	                            break;
	                        case "ATOM_QNS_HANDOVER_PINGPONG":
	                        case 10179:
	                            m.pullAtomId[i] = 10179;
	                            break;
	                        case "ATOM_SATELLITE_CONTROLLER":
	                        case 10182:
	                            m.pullAtomId[i] = 10182;
	                            break;
	                        case "ATOM_SATELLITE_SESSION":
	                        case 10183:
	                            m.pullAtomId[i] = 10183;
	                            break;
	                        case "ATOM_SATELLITE_INCOMING_DATAGRAM":
	                        case 10184:
	                            m.pullAtomId[i] = 10184;
	                            break;
	                        case "ATOM_SATELLITE_OUTGOING_DATAGRAM":
	                        case 10185:
	                            m.pullAtomId[i] = 10185;
	                            break;
	                        case "ATOM_SATELLITE_PROVISION":
	                        case 10186:
	                            m.pullAtomId[i] = 10186;
	                            break;
	                        case "ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER":
	                        case 10187:
	                            m.pullAtomId[i] = 10187;
	                            break;
	                        case "ATOM_CARRIER_ROAMING_SATELLITE_SESSION":
	                        case 10211:
	                            m.pullAtomId[i] = 10211;
	                            break;
	                        case "ATOM_CARRIER_ROAMING_SATELLITE_CONTROLLER_STATS":
	                        case 10212:
	                            m.pullAtomId[i] = 10212;
	                            break;
	                        case "ATOM_CONTROLLER_STATS_PER_PACKAGE":
	                        case 10213:
	                            m.pullAtomId[i] = 10213;
	                            break;
	                        case "ATOM_SATELLITE_ENTITLEMENT":
	                        case 10214:
	                            m.pullAtomId[i] = 10214;
	                            break;
	                        case "ATOM_SATELLITE_CONFIG_UPDATER":
	                        case 10215:
	                            m.pullAtomId[i] = 10215;
	                            break;
	                        case "ATOM_SATELLITE_ACCESS_CONTROLLER":
	                        case 10219:
	                            m.pullAtomId[i] = 10219;
	                            break;
	                        case "ATOM_CELLULAR_IDENTIFIER_DISCLOSED":
	                        case 800:
	                            m.pullAtomId[i] = 800;
	                            break;
	                        case "ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED":
	                        case 738:
	                            m.pullAtomId[i] = 738;
	                            break;
	                        case "ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED":
	                        case 739:
	                            m.pullAtomId[i] = 739;
	                            break;
	                        case "ATOM_THREADNETWORK_DEVICE_INFO_REPORTED":
	                        case 740:
	                            m.pullAtomId[i] = 740;
	                            break;
	                        case "ATOM_BOOT_INTEGRITY_INFO_REPORTED":
	                        case 775:
	                            m.pullAtomId[i] = 775;
	                            break;
	                        case "ATOM_TV_LOW_POWER_STANDBY_POLICY":
	                        case 679:
	                            m.pullAtomId[i] = 679;
	                            break;
	                        case "ATOM_EXTERNAL_TV_INPUT_EVENT":
	                        case 717:
	                            m.pullAtomId[i] = 717;
	                            break;
	                        case "ATOM_UWB_ACTIVITY_INFO":
	                        case 10188:
	                            m.pullAtomId[i] = 10188;
	                            break;
	                        case "ATOM_MEDIATOR_UPDATED":
	                        case 721:
	                            m.pullAtomId[i] = 721;
	                            break;
	                        case "ATOM_SYSPROXY_BLUETOOTH_BYTES_TRANSFER":
	                        case 10196:
	                            m.pullAtomId[i] = 10196;
	                            break;
	                        case "ATOM_SYSPROXY_CONNECTION_UPDATED":
	                        case 786:
	                            m.pullAtomId[i] = 786;
	                            break;
	                        case "ATOM_MEDIA_ACTION_REPORTED":
	                        case 608:
	                            m.pullAtomId[i] = 608;
	                            break;
	                        case "ATOM_MEDIA_CONTROLS_LAUNCHED":
	                        case 609:
	                            m.pullAtomId[i] = 609;
	                            break;
	                        case "ATOM_MEDIA_SESSION_STATE_CHANGED":
	                        case 677:
	                            m.pullAtomId[i] = 677;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_API_LATENCY":
	                        case 757:
	                            m.pullAtomId[i] = 757;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_SASS_DEVICE_UNAVAILABLE":
	                        case 758:
	                            m.pullAtomId[i] = 758;
	                            break;
	                        case "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FASTPAIR_API_TIMEOUT":
	                        case 759:
	                            m.pullAtomId[i] = 759;
	                            break;
	                        case "ATOM_WEAR_MODE_STATE_CHANGED":
	                        case 715:
	                            m.pullAtomId[i] = 715;
	                            break;
	                        case "ATOM_RENDERER_INITIALIZED":
	                        case 736:
	                            m.pullAtomId[i] = 736;
	                            break;
	                        case "ATOM_SCHEMA_VERSION_RECEIVED":
	                        case 737:
	                            m.pullAtomId[i] = 737;
	                            break;
	                        case "ATOM_LAYOUT_INSPECTED":
	                        case 741:
	                            m.pullAtomId[i] = 741;
	                            break;
	                        case "ATOM_LAYOUT_EXPRESSION_INSPECTED":
	                        case 742:
	                            m.pullAtomId[i] = 742;
	                            break;
	                        case "ATOM_LAYOUT_ANIMATIONS_INSPECTED":
	                        case 743:
	                            m.pullAtomId[i] = 743;
	                            break;
	                        case "ATOM_MATERIAL_COMPONENTS_INSPECTED":
	                        case 744:
	                            m.pullAtomId[i] = 744;
	                            break;
	                        case "ATOM_TILE_REQUESTED":
	                        case 745:
	                            m.pullAtomId[i] = 745;
	                            break;
	                        case "ATOM_STATE_RESPONSE_RECEIVED":
	                        case 746:
	                            m.pullAtomId[i] = 746;
	                            break;
	                        case "ATOM_TILE_RESPONSE_RECEIVED":
	                        case 747:
	                            m.pullAtomId[i] = 747;
	                            break;
	                        case "ATOM_INFLATION_FINISHED":
	                        case 748:
	                            m.pullAtomId[i] = 748;
	                            break;
	                        case "ATOM_INFLATION_FAILED":
	                        case 749:
	                            m.pullAtomId[i] = 749;
	                            break;
	                        case "ATOM_IGNORED_INFLATION_FAILURES_REPORTED":
	                        case 750:
	                            m.pullAtomId[i] = 750;
	                            break;
	                        case "ATOM_DRAWABLE_RENDERED":
	                        case 751:
	                            m.pullAtomId[i] = 751;
	                            break;
	                        case "ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED":
	                        case 619:
	                            m.pullAtomId[i] = 619;
	                            break;
	                        case "ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED":
	                        case 620:
	                            m.pullAtomId[i] = 620;
	                            break;
	                        case "ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED":
	                        case 621:
	                            m.pullAtomId[i] = 621;
	                            break;
	                        case "ATOM_WS_WEAR_TIME_SESSION":
	                        case 610:
	                            m.pullAtomId[i] = 610;
	                            break;
	                        case "ATOM_WS_INCOMING_CALL_ACTION_REPORTED":
	                        case 626:
	                            m.pullAtomId[i] = 626;
	                            break;
	                        case "ATOM_WS_CALL_DISCONNECTION_REPORTED":
	                        case 627:
	                            m.pullAtomId[i] = 627;
	                            break;
	                        case "ATOM_WS_CALL_DURATION_REPORTED":
	                        case 628:
	                            m.pullAtomId[i] = 628;
	                            break;
	                        case "ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED":
	                        case 629:
	                            m.pullAtomId[i] = 629;
	                            break;
	                        case "ATOM_WS_CALL_INTERACTION_REPORTED":
	                        case 630:
	                            m.pullAtomId[i] = 630;
	                            break;
	                        case "ATOM_WS_ON_BODY_STATE_CHANGED":
	                        case 787:
	                            m.pullAtomId[i] = 787;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_RESTRICTED_COMPLICATIONS_IMPACTED":
	                        case 802:
	                            m.pullAtomId[i] = 802;
	                            break;
	                        case "ATOM_WS_WATCH_FACE_DEFAULT_RESTRICTED_COMPLICATIONS_REMOVED":
	                        case 803:
	                            m.pullAtomId[i] = 803;
	                            break;
	                        case "ATOM_WS_COMPLICATIONS_IMPACTED_NOTIFICATION_EVENT_REPORTED":
	                        case 804:
	                            m.pullAtomId[i] = 804;
	                            break;
	                        case "ATOM_WS_STANDALONE_MODE_SNAPSHOT":
	                        case 10197:
	                            m.pullAtomId[i] = 10197;
	                            break;
	                        case "ATOM_WS_FAVORITE_WATCH_FACE_SNAPSHOT":
	                        case 10206:
	                            m.pullAtomId[i] = 10206;
	                            break;
	                        case "ATOM_WEAR_POWER_MENU_OPENED":
	                        case 731:
	                            m.pullAtomId[i] = 731;
	                            break;
	                        case "ATOM_WEAR_ASSISTANT_OPENED":
	                        case 755:
	                            m.pullAtomId[i] = 755;
	                            break;
	                        case "ATOM_WIFI_AWARE_NDP_REPORTED":
	                        case 638:
	                            m.pullAtomId[i] = 638;
	                            break;
	                        case "ATOM_WIFI_AWARE_ATTACH_REPORTED":
	                        case 639:
	                            m.pullAtomId[i] = 639;
	                            break;
	                        case "ATOM_WIFI_SELF_RECOVERY_TRIGGERED":
	                        case 661:
	                            m.pullAtomId[i] = 661;
	                            break;
	                        case "ATOM_SOFT_AP_STARTED":
	                        case 680:
	                            m.pullAtomId[i] = 680;
	                            break;
	                        case "ATOM_SOFT_AP_STOPPED":
	                        case 681:
	                            m.pullAtomId[i] = 681;
	                            break;
	                        case "ATOM_WIFI_LOCK_RELEASED":
	                        case 687:
	                            m.pullAtomId[i] = 687;
	                            break;
	                        case "ATOM_WIFI_LOCK_DEACTIVATED":
	                        case 688:
	                            m.pullAtomId[i] = 688;
	                            break;
	                        case "ATOM_WIFI_CONFIG_SAVED":
	                        case 689:
	                            m.pullAtomId[i] = 689;
	                            break;
	                        case "ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED":
	                        case 690:
	                            m.pullAtomId[i] = 690;
	                            break;
	                        case "ATOM_WIFI_AWARE_HAL_API_CALLED":
	                        case 691:
	                            m.pullAtomId[i] = 691;
	                            break;
	                        case "ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED":
	                        case 692:
	                            m.pullAtomId[i] = 692;
	                            break;
	                        case "ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED":
	                        case 693:
	                            m.pullAtomId[i] = 693;
	                            break;
	                        case "ATOM_WIFI_THREAD_TASK_EXECUTED":
	                        case 694:
	                            m.pullAtomId[i] = 694;
	                            break;
	                        case "ATOM_WIFI_STATE_CHANGED":
	                        case 700:
	                            m.pullAtomId[i] = 700;
	                            break;
	                        case "ATOM_PNO_SCAN_STARTED":
	                        case 719:
	                            m.pullAtomId[i] = 719;
	                            break;
	                        case "ATOM_PNO_SCAN_STOPPED":
	                        case 720:
	                            m.pullAtomId[i] = 720;
	                            break;
	                        case "ATOM_WIFI_IS_UNUSABLE_REPORTED":
	                        case 722:
	                            m.pullAtomId[i] = 722;
	                            break;
	                        case "ATOM_WIFI_AP_CAPABILITIES_REPORTED":
	                        case 723:
	                            m.pullAtomId[i] = 723;
	                            break;
	                        case "ATOM_SOFT_AP_STATE_CHANGED":
	                        case 805:
	                            m.pullAtomId[i] = 805;
	                            break;
	                        case "ATOM_SCORER_PREDICTION_RESULT_REPORTED":
	                        case 884:
	                            m.pullAtomId[i] = 884;
	                            break;
	                        case "ATOM_WIFI_AWARE_CAPABILITIES":
	                        case 10190:
	                            m.pullAtomId[i] = 10190;
	                            break;
	                        case "ATOM_WIFI_MODULE_INFO":
	                        case 10193:
	                            m.pullAtomId[i] = 10193;
	                            break;
	                        case "ATOM_WIFI_SETTING_INFO":
	                        case 10194:
	                            m.pullAtomId[i] = 10194;
	                            break;
	                        case "ATOM_WIFI_COMPLEX_SETTING_INFO":
	                        case 10195:
	                            m.pullAtomId[i] = 10195;
	                            break;
	                        case "ATOM_WIFI_CONFIGURED_NETWORK_INFO":
	                        case 10198:
	                            m.pullAtomId[i] = 10198;
	                            break;
	                        }
	                    }
	                }
	                if (d.rawPullAtomId) {
	                    if (!Array.isArray(d.rawPullAtomId))
	                        throw TypeError(".perfetto.protos.StatsdPullAtomConfig.rawPullAtomId: array expected");
	                    m.rawPullAtomId = [];
	                    for (var i = 0; i < d.rawPullAtomId.length; ++i) {
	                        m.rawPullAtomId[i] = d.rawPullAtomId[i] | 0;
	                    }
	                }
	                if (d.pullFrequencyMs != null) {
	                    m.pullFrequencyMs = d.pullFrequencyMs | 0;
	                }
	                if (d.packages) {
	                    if (!Array.isArray(d.packages))
	                        throw TypeError(".perfetto.protos.StatsdPullAtomConfig.packages: array expected");
	                    m.packages = [];
	                    for (var i = 0; i < d.packages.length; ++i) {
	                        m.packages[i] = String(d.packages[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a StatsdPullAtomConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @static
	             * @param {perfetto.protos.StatsdPullAtomConfig} m StatsdPullAtomConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            StatsdPullAtomConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.pullAtomId = [];
	                    d.rawPullAtomId = [];
	                    d.packages = [];
	                }
	                if (o.defaults) {
	                    d.pullFrequencyMs = 0;
	                }
	                if (m.pullAtomId && m.pullAtomId.length) {
	                    d.pullAtomId = [];
	                    for (var j = 0; j < m.pullAtomId.length; ++j) {
	                        d.pullAtomId[j] = o.enums === String ? $root.perfetto.protos.AtomId[m.pullAtomId[j]] === undefined ? m.pullAtomId[j] : $root.perfetto.protos.AtomId[m.pullAtomId[j]] : m.pullAtomId[j];
	                    }
	                }
	                if (m.rawPullAtomId && m.rawPullAtomId.length) {
	                    d.rawPullAtomId = [];
	                    for (var j = 0; j < m.rawPullAtomId.length; ++j) {
	                        d.rawPullAtomId[j] = m.rawPullAtomId[j];
	                    }
	                }
	                if (m.pullFrequencyMs != null && m.hasOwnProperty("pullFrequencyMs")) {
	                    d.pullFrequencyMs = m.pullFrequencyMs;
	                }
	                if (m.packages && m.packages.length) {
	                    d.packages = [];
	                    for (var j = 0; j < m.packages.length; ++j) {
	                        d.packages[j] = m.packages[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this StatsdPullAtomConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            StatsdPullAtomConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for StatsdPullAtomConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.StatsdPullAtomConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            StatsdPullAtomConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.StatsdPullAtomConfig";
	            };

	            return StatsdPullAtomConfig;
	        })();

	        /**
	         * AtomId enum.
	         * @name perfetto.protos.AtomId
	         * @enum {number}
	         * @property {number} ATOM_UNSPECIFIED=0 ATOM_UNSPECIFIED value
	         * @property {number} ATOM_BLE_SCAN_STATE_CHANGED=2 ATOM_BLE_SCAN_STATE_CHANGED value
	         * @property {number} ATOM_PROCESS_STATE_CHANGED=3 ATOM_PROCESS_STATE_CHANGED value
	         * @property {number} ATOM_BLE_SCAN_RESULT_RECEIVED=4 ATOM_BLE_SCAN_RESULT_RECEIVED value
	         * @property {number} ATOM_SENSOR_STATE_CHANGED=5 ATOM_SENSOR_STATE_CHANGED value
	         * @property {number} ATOM_GPS_SCAN_STATE_CHANGED=6 ATOM_GPS_SCAN_STATE_CHANGED value
	         * @property {number} ATOM_SYNC_STATE_CHANGED=7 ATOM_SYNC_STATE_CHANGED value
	         * @property {number} ATOM_SCHEDULED_JOB_STATE_CHANGED=8 ATOM_SCHEDULED_JOB_STATE_CHANGED value
	         * @property {number} ATOM_SCREEN_BRIGHTNESS_CHANGED=9 ATOM_SCREEN_BRIGHTNESS_CHANGED value
	         * @property {number} ATOM_WAKELOCK_STATE_CHANGED=10 ATOM_WAKELOCK_STATE_CHANGED value
	         * @property {number} ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED=11 ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED value
	         * @property {number} ATOM_MOBILE_RADIO_POWER_STATE_CHANGED=12 ATOM_MOBILE_RADIO_POWER_STATE_CHANGED value
	         * @property {number} ATOM_WIFI_RADIO_POWER_STATE_CHANGED=13 ATOM_WIFI_RADIO_POWER_STATE_CHANGED value
	         * @property {number} ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED=14 ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED value
	         * @property {number} ATOM_MEMORY_FACTOR_STATE_CHANGED=15 ATOM_MEMORY_FACTOR_STATE_CHANGED value
	         * @property {number} ATOM_EXCESSIVE_CPU_USAGE_REPORTED=16 ATOM_EXCESSIVE_CPU_USAGE_REPORTED value
	         * @property {number} ATOM_CACHED_KILL_REPORTED=17 ATOM_CACHED_KILL_REPORTED value
	         * @property {number} ATOM_PROCESS_MEMORY_STAT_REPORTED=18 ATOM_PROCESS_MEMORY_STAT_REPORTED value
	         * @property {number} ATOM_LAUNCHER_EVENT=19 ATOM_LAUNCHER_EVENT value
	         * @property {number} ATOM_BATTERY_SAVER_MODE_STATE_CHANGED=20 ATOM_BATTERY_SAVER_MODE_STATE_CHANGED value
	         * @property {number} ATOM_DEVICE_IDLE_MODE_STATE_CHANGED=21 ATOM_DEVICE_IDLE_MODE_STATE_CHANGED value
	         * @property {number} ATOM_DEVICE_IDLING_MODE_STATE_CHANGED=22 ATOM_DEVICE_IDLING_MODE_STATE_CHANGED value
	         * @property {number} ATOM_AUDIO_STATE_CHANGED=23 ATOM_AUDIO_STATE_CHANGED value
	         * @property {number} ATOM_MEDIA_CODEC_STATE_CHANGED=24 ATOM_MEDIA_CODEC_STATE_CHANGED value
	         * @property {number} ATOM_CAMERA_STATE_CHANGED=25 ATOM_CAMERA_STATE_CHANGED value
	         * @property {number} ATOM_FLASHLIGHT_STATE_CHANGED=26 ATOM_FLASHLIGHT_STATE_CHANGED value
	         * @property {number} ATOM_UID_PROCESS_STATE_CHANGED=27 ATOM_UID_PROCESS_STATE_CHANGED value
	         * @property {number} ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED=28 ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED value
	         * @property {number} ATOM_SCREEN_STATE_CHANGED=29 ATOM_SCREEN_STATE_CHANGED value
	         * @property {number} ATOM_BATTERY_LEVEL_CHANGED=30 ATOM_BATTERY_LEVEL_CHANGED value
	         * @property {number} ATOM_CHARGING_STATE_CHANGED=31 ATOM_CHARGING_STATE_CHANGED value
	         * @property {number} ATOM_PLUGGED_STATE_CHANGED=32 ATOM_PLUGGED_STATE_CHANGED value
	         * @property {number} ATOM_INTERACTIVE_STATE_CHANGED=33 ATOM_INTERACTIVE_STATE_CHANGED value
	         * @property {number} ATOM_TOUCH_EVENT_REPORTED=34 ATOM_TOUCH_EVENT_REPORTED value
	         * @property {number} ATOM_WAKEUP_ALARM_OCCURRED=35 ATOM_WAKEUP_ALARM_OCCURRED value
	         * @property {number} ATOM_KERNEL_WAKEUP_REPORTED=36 ATOM_KERNEL_WAKEUP_REPORTED value
	         * @property {number} ATOM_WIFI_LOCK_STATE_CHANGED=37 ATOM_WIFI_LOCK_STATE_CHANGED value
	         * @property {number} ATOM_WIFI_SIGNAL_STRENGTH_CHANGED=38 ATOM_WIFI_SIGNAL_STRENGTH_CHANGED value
	         * @property {number} ATOM_WIFI_SCAN_STATE_CHANGED=39 ATOM_WIFI_SCAN_STATE_CHANGED value
	         * @property {number} ATOM_PHONE_SIGNAL_STRENGTH_CHANGED=40 ATOM_PHONE_SIGNAL_STRENGTH_CHANGED value
	         * @property {number} ATOM_SETTING_CHANGED=41 ATOM_SETTING_CHANGED value
	         * @property {number} ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED=42 ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED value
	         * @property {number} ATOM_ISOLATED_UID_CHANGED=43 ATOM_ISOLATED_UID_CHANGED value
	         * @property {number} ATOM_PACKET_WAKEUP_OCCURRED=44 ATOM_PACKET_WAKEUP_OCCURRED value
	         * @property {number} ATOM_WALL_CLOCK_TIME_SHIFTED=45 ATOM_WALL_CLOCK_TIME_SHIFTED value
	         * @property {number} ATOM_ANOMALY_DETECTED=46 ATOM_ANOMALY_DETECTED value
	         * @property {number} ATOM_APP_BREADCRUMB_REPORTED=47 ATOM_APP_BREADCRUMB_REPORTED value
	         * @property {number} ATOM_APP_START_OCCURRED=48 ATOM_APP_START_OCCURRED value
	         * @property {number} ATOM_APP_START_CANCELED=49 ATOM_APP_START_CANCELED value
	         * @property {number} ATOM_APP_START_FULLY_DRAWN=50 ATOM_APP_START_FULLY_DRAWN value
	         * @property {number} ATOM_LMK_KILL_OCCURRED=51 ATOM_LMK_KILL_OCCURRED value
	         * @property {number} ATOM_PICTURE_IN_PICTURE_STATE_CHANGED=52 ATOM_PICTURE_IN_PICTURE_STATE_CHANGED value
	         * @property {number} ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED=53 ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED value
	         * @property {number} ATOM_APP_START_MEMORY_STATE_CAPTURED=55 ATOM_APP_START_MEMORY_STATE_CAPTURED value
	         * @property {number} ATOM_SHUTDOWN_SEQUENCE_REPORTED=56 ATOM_SHUTDOWN_SEQUENCE_REPORTED value
	         * @property {number} ATOM_BOOT_SEQUENCE_REPORTED=57 ATOM_BOOT_SEQUENCE_REPORTED value
	         * @property {number} ATOM_OVERLAY_STATE_CHANGED=59 ATOM_OVERLAY_STATE_CHANGED value
	         * @property {number} ATOM_FOREGROUND_SERVICE_STATE_CHANGED=60 ATOM_FOREGROUND_SERVICE_STATE_CHANGED value
	         * @property {number} ATOM_CALL_STATE_CHANGED=61 ATOM_CALL_STATE_CHANGED value
	         * @property {number} ATOM_KEYGUARD_STATE_CHANGED=62 ATOM_KEYGUARD_STATE_CHANGED value
	         * @property {number} ATOM_KEYGUARD_BOUNCER_STATE_CHANGED=63 ATOM_KEYGUARD_BOUNCER_STATE_CHANGED value
	         * @property {number} ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED=64 ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED value
	         * @property {number} ATOM_APP_DIED=65 ATOM_APP_DIED value
	         * @property {number} ATOM_RESOURCE_CONFIGURATION_CHANGED=66 ATOM_RESOURCE_CONFIGURATION_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_ENABLED_STATE_CHANGED=67 ATOM_BLUETOOTH_ENABLED_STATE_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED=68 ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_GPS_SIGNAL_QUALITY_CHANGED=69 ATOM_GPS_SIGNAL_QUALITY_CHANGED value
	         * @property {number} ATOM_USB_CONNECTOR_STATE_CHANGED=70 ATOM_USB_CONNECTOR_STATE_CHANGED value
	         * @property {number} ATOM_SPEAKER_IMPEDANCE_REPORTED=71 ATOM_SPEAKER_IMPEDANCE_REPORTED value
	         * @property {number} ATOM_HARDWARE_FAILED=72 ATOM_HARDWARE_FAILED value
	         * @property {number} ATOM_PHYSICAL_DROP_DETECTED=73 ATOM_PHYSICAL_DROP_DETECTED value
	         * @property {number} ATOM_CHARGE_CYCLES_REPORTED=74 ATOM_CHARGE_CYCLES_REPORTED value
	         * @property {number} ATOM_MOBILE_CONNECTION_STATE_CHANGED=75 ATOM_MOBILE_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED=76 ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED value
	         * @property {number} ATOM_USB_DEVICE_ATTACHED=77 ATOM_USB_DEVICE_ATTACHED value
	         * @property {number} ATOM_APP_CRASH_OCCURRED=78 ATOM_APP_CRASH_OCCURRED value
	         * @property {number} ATOM_ANR_OCCURRED=79 ATOM_ANR_OCCURRED value
	         * @property {number} ATOM_WTF_OCCURRED=80 ATOM_WTF_OCCURRED value
	         * @property {number} ATOM_LOW_MEM_REPORTED=81 ATOM_LOW_MEM_REPORTED value
	         * @property {number} ATOM_GENERIC_ATOM=82 ATOM_GENERIC_ATOM value
	         * @property {number} ATOM_VIBRATOR_STATE_CHANGED=84 ATOM_VIBRATOR_STATE_CHANGED value
	         * @property {number} ATOM_DEFERRED_JOB_STATS_REPORTED=85 ATOM_DEFERRED_JOB_STATS_REPORTED value
	         * @property {number} ATOM_THERMAL_THROTTLING=86 ATOM_THERMAL_THROTTLING value
	         * @property {number} ATOM_BIOMETRIC_ACQUIRED=87 ATOM_BIOMETRIC_ACQUIRED value
	         * @property {number} ATOM_BIOMETRIC_AUTHENTICATED=88 ATOM_BIOMETRIC_AUTHENTICATED value
	         * @property {number} ATOM_BIOMETRIC_ERROR_OCCURRED=89 ATOM_BIOMETRIC_ERROR_OCCURRED value
	         * @property {number} ATOM_UI_EVENT_REPORTED=90 ATOM_UI_EVENT_REPORTED value
	         * @property {number} ATOM_BATTERY_HEALTH_SNAPSHOT=91 ATOM_BATTERY_HEALTH_SNAPSHOT value
	         * @property {number} ATOM_SLOW_IO=92 ATOM_SLOW_IO value
	         * @property {number} ATOM_BATTERY_CAUSED_SHUTDOWN=93 ATOM_BATTERY_CAUSED_SHUTDOWN value
	         * @property {number} ATOM_PHONE_SERVICE_STATE_CHANGED=94 ATOM_PHONE_SERVICE_STATE_CHANGED value
	         * @property {number} ATOM_PHONE_STATE_CHANGED=95 ATOM_PHONE_STATE_CHANGED value
	         * @property {number} ATOM_USER_RESTRICTION_CHANGED=96 ATOM_USER_RESTRICTION_CHANGED value
	         * @property {number} ATOM_SETTINGS_UI_CHANGED=97 ATOM_SETTINGS_UI_CHANGED value
	         * @property {number} ATOM_CONNECTIVITY_STATE_CHANGED=98 ATOM_CONNECTIVITY_STATE_CHANGED value
	         * @property {number} ATOM_SERVICE_STATE_CHANGED=99 ATOM_SERVICE_STATE_CHANGED value
	         * @property {number} ATOM_SERVICE_LAUNCH_REPORTED=100 ATOM_SERVICE_LAUNCH_REPORTED value
	         * @property {number} ATOM_FLAG_FLIP_UPDATE_OCCURRED=101 ATOM_FLAG_FLIP_UPDATE_OCCURRED value
	         * @property {number} ATOM_BINARY_PUSH_STATE_CHANGED=102 ATOM_BINARY_PUSH_STATE_CHANGED value
	         * @property {number} ATOM_DEVICE_POLICY_EVENT=103 ATOM_DEVICE_POLICY_EVENT value
	         * @property {number} ATOM_DOCS_UI_FILE_OP_CANCELED=104 ATOM_DOCS_UI_FILE_OP_CANCELED value
	         * @property {number} ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED=105 ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED value
	         * @property {number} ATOM_DOCS_UI_FILE_OP_FAILURE=106 ATOM_DOCS_UI_FILE_OP_FAILURE value
	         * @property {number} ATOM_DOCS_UI_PROVIDER_FILE_OP=107 ATOM_DOCS_UI_PROVIDER_FILE_OP value
	         * @property {number} ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST=108 ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST value
	         * @property {number} ATOM_DOCS_UI_LAUNCH_REPORTED=109 ATOM_DOCS_UI_LAUNCH_REPORTED value
	         * @property {number} ATOM_DOCS_UI_ROOT_VISITED=110 ATOM_DOCS_UI_ROOT_VISITED value
	         * @property {number} ATOM_DOCS_UI_STARTUP_MS=111 ATOM_DOCS_UI_STARTUP_MS value
	         * @property {number} ATOM_DOCS_UI_USER_ACTION_REPORTED=112 ATOM_DOCS_UI_USER_ACTION_REPORTED value
	         * @property {number} ATOM_WIFI_ENABLED_STATE_CHANGED=113 ATOM_WIFI_ENABLED_STATE_CHANGED value
	         * @property {number} ATOM_WIFI_RUNNING_STATE_CHANGED=114 ATOM_WIFI_RUNNING_STATE_CHANGED value
	         * @property {number} ATOM_APP_COMPACTED=115 ATOM_APP_COMPACTED value
	         * @property {number} ATOM_NETWORK_DNS_EVENT_REPORTED=116 ATOM_NETWORK_DNS_EVENT_REPORTED value
	         * @property {number} ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED=117 ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED value
	         * @property {number} ATOM_DOCS_UI_PICK_RESULT_REPORTED=118 ATOM_DOCS_UI_PICK_RESULT_REPORTED value
	         * @property {number} ATOM_DOCS_UI_SEARCH_MODE_REPORTED=119 ATOM_DOCS_UI_SEARCH_MODE_REPORTED value
	         * @property {number} ATOM_DOCS_UI_SEARCH_TYPE_REPORTED=120 ATOM_DOCS_UI_SEARCH_TYPE_REPORTED value
	         * @property {number} ATOM_DATA_STALL_EVENT=121 ATOM_DATA_STALL_EVENT value
	         * @property {number} ATOM_RESCUE_PARTY_RESET_REPORTED=122 ATOM_RESCUE_PARTY_RESET_REPORTED value
	         * @property {number} ATOM_SIGNED_CONFIG_REPORTED=123 ATOM_SIGNED_CONFIG_REPORTED value
	         * @property {number} ATOM_GNSS_NI_EVENT_REPORTED=124 ATOM_GNSS_NI_EVENT_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT=125 ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT value
	         * @property {number} ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED=126 ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED=127 ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_APP_DOWNGRADED=128 ATOM_APP_DOWNGRADED value
	         * @property {number} ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED=129 ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED value
	         * @property {number} ATOM_LOW_STORAGE_STATE_CHANGED=130 ATOM_LOW_STORAGE_STATE_CHANGED value
	         * @property {number} ATOM_GNSS_NFW_NOTIFICATION_REPORTED=131 ATOM_GNSS_NFW_NOTIFICATION_REPORTED value
	         * @property {number} ATOM_GNSS_CONFIGURATION_REPORTED=132 ATOM_GNSS_CONFIGURATION_REPORTED value
	         * @property {number} ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED=133 ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED value
	         * @property {number} ATOM_NFC_ERROR_OCCURRED=134 ATOM_NFC_ERROR_OCCURRED value
	         * @property {number} ATOM_NFC_STATE_CHANGED=135 ATOM_NFC_STATE_CHANGED value
	         * @property {number} ATOM_NFC_BEAM_OCCURRED=136 ATOM_NFC_BEAM_OCCURRED value
	         * @property {number} ATOM_NFC_CARDEMULATION_OCCURRED=137 ATOM_NFC_CARDEMULATION_OCCURRED value
	         * @property {number} ATOM_NFC_TAG_OCCURRED=138 ATOM_NFC_TAG_OCCURRED value
	         * @property {number} ATOM_NFC_HCE_TRANSACTION_OCCURRED=139 ATOM_NFC_HCE_TRANSACTION_OCCURRED value
	         * @property {number} ATOM_SE_STATE_CHANGED=140 ATOM_SE_STATE_CHANGED value
	         * @property {number} ATOM_SE_OMAPI_REPORTED=141 ATOM_SE_OMAPI_REPORTED value
	         * @property {number} ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED=142 ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED value
	         * @property {number} ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED=143 ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED value
	         * @property {number} ATOM_ADB_CONNECTION_CHANGED=144 ATOM_ADB_CONNECTION_CHANGED value
	         * @property {number} ATOM_SPEECH_DSP_STAT_REPORTED=145 ATOM_SPEECH_DSP_STAT_REPORTED value
	         * @property {number} ATOM_USB_CONTAMINANT_REPORTED=146 ATOM_USB_CONTAMINANT_REPORTED value
	         * @property {number} ATOM_WATCHDOG_ROLLBACK_OCCURRED=147 ATOM_WATCHDOG_ROLLBACK_OCCURRED value
	         * @property {number} ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED=148 ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED value
	         * @property {number} ATOM_BUBBLE_UI_CHANGED=149 ATOM_BUBBLE_UI_CHANGED value
	         * @property {number} ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED=150 ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED=151 ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED=152 ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED=153 ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED=154 ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED=155 ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED=156 ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED=157 ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED=158 ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED=159 ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED=160 ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED=161 ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_DEVICE_INFO_REPORTED=162 ATOM_BLUETOOTH_DEVICE_INFO_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED=163 ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED=164 ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_BOND_STATE_CHANGED=165 ATOM_BLUETOOTH_BOND_STATE_CHANGED value
	         * @property {number} ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED=166 ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED=167 ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED value
	         * @property {number} ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED=168 ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED value
	         * @property {number} ATOM_PROCESS_START_TIME=169 ATOM_PROCESS_START_TIME value
	         * @property {number} ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED=170 ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED=171 ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED=172 ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED value
	         * @property {number} ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED=173 ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED value
	         * @property {number} ATOM_ASSIST_GESTURE_STAGE_REPORTED=174 ATOM_ASSIST_GESTURE_STAGE_REPORTED value
	         * @property {number} ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED=175 ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED value
	         * @property {number} ATOM_ASSIST_GESTURE_PROGRESS_REPORTED=176 ATOM_ASSIST_GESTURE_PROGRESS_REPORTED value
	         * @property {number} ATOM_TOUCH_GESTURE_CLASSIFIED=177 ATOM_TOUCH_GESTURE_CLASSIFIED value
	         * @property {number} ATOM_HIDDEN_API_USED=178 ATOM_HIDDEN_API_USED value
	         * @property {number} ATOM_STYLE_UI_CHANGED=179 ATOM_STYLE_UI_CHANGED value
	         * @property {number} ATOM_PRIVACY_INDICATORS_INTERACTED=180 ATOM_PRIVACY_INDICATORS_INTERACTED value
	         * @property {number} ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED=181 ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED value
	         * @property {number} ATOM_NETWORK_STACK_REPORTED=182 ATOM_NETWORK_STACK_REPORTED value
	         * @property {number} ATOM_APP_MOVED_STORAGE_REPORTED=183 ATOM_APP_MOVED_STORAGE_REPORTED value
	         * @property {number} ATOM_BIOMETRIC_ENROLLED=184 ATOM_BIOMETRIC_ENROLLED value
	         * @property {number} ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED=185 ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED value
	         * @property {number} ATOM_TOMB_STONE_OCCURRED=186 ATOM_TOMB_STONE_OCCURRED value
	         * @property {number} ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED=187 ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED value
	         * @property {number} ATOM_INTELLIGENCE_EVENT_REPORTED=188 ATOM_INTELLIGENCE_EVENT_REPORTED value
	         * @property {number} ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED=189 ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED value
	         * @property {number} ATOM_ROLE_REQUEST_RESULT_REPORTED=190 ATOM_ROLE_REQUEST_RESULT_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED=191 ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED=192 ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED=193 ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED=194 ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_CODEC_REPORTED=195 ATOM_MEDIAMETRICS_CODEC_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED=196 ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED=197 ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_MEDIADRM_REPORTED=198 ATOM_MEDIAMETRICS_MEDIADRM_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_NUPLAYER_REPORTED=199 ATOM_MEDIAMETRICS_NUPLAYER_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_RECORDER_REPORTED=200 ATOM_MEDIAMETRICS_RECORDER_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED=201 ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED value
	         * @property {number} ATOM_CAR_POWER_STATE_CHANGED=203 ATOM_CAR_POWER_STATE_CHANGED value
	         * @property {number} ATOM_GARAGE_MODE_INFO=204 ATOM_GARAGE_MODE_INFO value
	         * @property {number} ATOM_TEST_ATOM_REPORTED=205 ATOM_TEST_ATOM_REPORTED value
	         * @property {number} ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED=206 ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED value
	         * @property {number} ATOM_CONTENT_CAPTURE_SERVICE_EVENTS=207 ATOM_CONTENT_CAPTURE_SERVICE_EVENTS value
	         * @property {number} ATOM_CONTENT_CAPTURE_SESSION_EVENTS=208 ATOM_CONTENT_CAPTURE_SESSION_EVENTS value
	         * @property {number} ATOM_CONTENT_CAPTURE_FLUSHED=209 ATOM_CONTENT_CAPTURE_FLUSHED value
	         * @property {number} ATOM_LOCATION_MANAGER_API_USAGE_REPORTED=210 ATOM_LOCATION_MANAGER_API_USAGE_REPORTED value
	         * @property {number} ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED=211 ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED value
	         * @property {number} ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT=212 ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT value
	         * @property {number} ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS=213 ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS value
	         * @property {number} ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION=214 ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION value
	         * @property {number} ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED=215 ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED value
	         * @property {number} ATOM_APP_PERMISSION_FRAGMENT_VIEWED=216 ATOM_APP_PERMISSION_FRAGMENT_VIEWED value
	         * @property {number} ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED=217 ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED value
	         * @property {number} ATOM_PERMISSION_APPS_FRAGMENT_VIEWED=218 ATOM_PERMISSION_APPS_FRAGMENT_VIEWED value
	         * @property {number} ATOM_TEXT_SELECTION_EVENT=219 ATOM_TEXT_SELECTION_EVENT value
	         * @property {number} ATOM_TEXT_LINKIFY_EVENT=220 ATOM_TEXT_LINKIFY_EVENT value
	         * @property {number} ATOM_CONVERSATION_ACTIONS_EVENT=221 ATOM_CONVERSATION_ACTIONS_EVENT value
	         * @property {number} ATOM_LANGUAGE_DETECTION_EVENT=222 ATOM_LANGUAGE_DETECTION_EVENT value
	         * @property {number} ATOM_EXCLUSION_RECT_STATE_CHANGED=223 ATOM_EXCLUSION_RECT_STATE_CHANGED value
	         * @property {number} ATOM_BACK_GESTURE_REPORTED_REPORTED=224 ATOM_BACK_GESTURE_REPORTED_REPORTED value
	         * @property {number} ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED=225 ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED value
	         * @property {number} ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED=226 ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED value
	         * @property {number} ATOM_CAMERA_ACTION_EVENT=227 ATOM_CAMERA_ACTION_EVENT value
	         * @property {number} ATOM_APP_COMPATIBILITY_CHANGE_REPORTED=228 ATOM_APP_COMPATIBILITY_CHANGE_REPORTED value
	         * @property {number} ATOM_PERFETTO_UPLOADED=229 ATOM_PERFETTO_UPLOADED value
	         * @property {number} ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED=230 ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_MEDIA_PROVIDER_SCAN_OCCURRED=233 ATOM_MEDIA_PROVIDER_SCAN_OCCURRED value
	         * @property {number} ATOM_MEDIA_CONTENT_DELETED=234 ATOM_MEDIA_CONTENT_DELETED value
	         * @property {number} ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED=235 ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED value
	         * @property {number} ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED=236 ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED value
	         * @property {number} ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED=237 ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED value
	         * @property {number} ATOM_REBOOT_ESCROW_RECOVERY_REPORTED=238 ATOM_REBOOT_ESCROW_RECOVERY_REPORTED value
	         * @property {number} ATOM_BOOT_TIME_EVENT_DURATION_REPORTED=239 ATOM_BOOT_TIME_EVENT_DURATION_REPORTED value
	         * @property {number} ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED=240 ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED value
	         * @property {number} ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED=241 ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED value
	         * @property {number} ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED=242 ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED value
	         * @property {number} ATOM_USERSPACE_REBOOT_REPORTED=243 ATOM_USERSPACE_REBOOT_REPORTED value
	         * @property {number} ATOM_NOTIFICATION_REPORTED=244 ATOM_NOTIFICATION_REPORTED value
	         * @property {number} ATOM_NOTIFICATION_PANEL_REPORTED=245 ATOM_NOTIFICATION_PANEL_REPORTED value
	         * @property {number} ATOM_NOTIFICATION_CHANNEL_MODIFIED=246 ATOM_NOTIFICATION_CHANNEL_MODIFIED value
	         * @property {number} ATOM_INTEGRITY_CHECK_RESULT_REPORTED=247 ATOM_INTEGRITY_CHECK_RESULT_REPORTED value
	         * @property {number} ATOM_INTEGRITY_RULES_PUSHED=248 ATOM_INTEGRITY_RULES_PUSHED value
	         * @property {number} ATOM_CB_MESSAGE_REPORTED=249 ATOM_CB_MESSAGE_REPORTED value
	         * @property {number} ATOM_CB_MESSAGE_ERROR=250 ATOM_CB_MESSAGE_ERROR value
	         * @property {number} ATOM_WIFI_HEALTH_STAT_REPORTED=251 ATOM_WIFI_HEALTH_STAT_REPORTED value
	         * @property {number} ATOM_WIFI_FAILURE_STAT_REPORTED=252 ATOM_WIFI_FAILURE_STAT_REPORTED value
	         * @property {number} ATOM_WIFI_CONNECTION_RESULT_REPORTED=253 ATOM_WIFI_CONNECTION_RESULT_REPORTED value
	         * @property {number} ATOM_APP_FREEZE_CHANGED=254 ATOM_APP_FREEZE_CHANGED value
	         * @property {number} ATOM_SNAPSHOT_MERGE_REPORTED=255 ATOM_SNAPSHOT_MERGE_REPORTED value
	         * @property {number} ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED=256 ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED value
	         * @property {number} ATOM_DISPLAY_JANK_REPORTED=257 ATOM_DISPLAY_JANK_REPORTED value
	         * @property {number} ATOM_APP_STANDBY_BUCKET_CHANGED=258 ATOM_APP_STANDBY_BUCKET_CHANGED value
	         * @property {number} ATOM_SHARESHEET_STARTED=259 ATOM_SHARESHEET_STARTED value
	         * @property {number} ATOM_RANKING_SELECTED=260 ATOM_RANKING_SELECTED value
	         * @property {number} ATOM_TVSETTINGS_UI_INTERACTED=261 ATOM_TVSETTINGS_UI_INTERACTED value
	         * @property {number} ATOM_LAUNCHER_SNAPSHOT=262 ATOM_LAUNCHER_SNAPSHOT value
	         * @property {number} ATOM_PACKAGE_INSTALLER_V2_REPORTED=263 ATOM_PACKAGE_INSTALLER_V2_REPORTED value
	         * @property {number} ATOM_USER_LIFECYCLE_JOURNEY_REPORTED=264 ATOM_USER_LIFECYCLE_JOURNEY_REPORTED value
	         * @property {number} ATOM_USER_LIFECYCLE_EVENT_OCCURRED=265 ATOM_USER_LIFECYCLE_EVENT_OCCURRED value
	         * @property {number} ATOM_ACCESSIBILITY_SHORTCUT_REPORTED=266 ATOM_ACCESSIBILITY_SHORTCUT_REPORTED value
	         * @property {number} ATOM_ACCESSIBILITY_SERVICE_REPORTED=267 ATOM_ACCESSIBILITY_SERVICE_REPORTED value
	         * @property {number} ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED=268 ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED value
	         * @property {number} ATOM_APP_USAGE_EVENT_OCCURRED=269 ATOM_APP_USAGE_EVENT_OCCURRED value
	         * @property {number} ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED=270 ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED value
	         * @property {number} ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED=271 ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED value
	         * @property {number} ATOM_AUTO_REVOKED_APP_INTERACTION=272 ATOM_AUTO_REVOKED_APP_INTERACTION value
	         * @property {number} ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION=273 ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION value
	         * @property {number} ATOM_EVS_USAGE_STATS_REPORTED=274 ATOM_EVS_USAGE_STATS_REPORTED value
	         * @property {number} ATOM_AUDIO_POWER_USAGE_DATA_REPORTED=275 ATOM_AUDIO_POWER_USAGE_DATA_REPORTED value
	         * @property {number} ATOM_TV_TUNER_STATE_CHANGED=276 ATOM_TV_TUNER_STATE_CHANGED value
	         * @property {number} ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED=277 ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED value
	         * @property {number} ATOM_CB_MESSAGE_FILTERED=278 ATOM_CB_MESSAGE_FILTERED value
	         * @property {number} ATOM_TV_TUNER_DVR_STATUS=279 ATOM_TV_TUNER_DVR_STATUS value
	         * @property {number} ATOM_TV_CAS_SESSION_OPEN_STATUS=280 ATOM_TV_CAS_SESSION_OPEN_STATUS value
	         * @property {number} ATOM_ASSISTANT_INVOCATION_REPORTED=281 ATOM_ASSISTANT_INVOCATION_REPORTED value
	         * @property {number} ATOM_DISPLAY_WAKE_REPORTED=282 ATOM_DISPLAY_WAKE_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED=283 ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED=284 ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED=285 ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED=286 ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED=287 ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED=288 ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED value
	         * @property {number} ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED=289 ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED value
	         * @property {number} ATOM_NETWORK_IP_PROVISIONING_REPORTED=290 ATOM_NETWORK_IP_PROVISIONING_REPORTED value
	         * @property {number} ATOM_NETWORK_DHCP_RENEW_REPORTED=291 ATOM_NETWORK_DHCP_RENEW_REPORTED value
	         * @property {number} ATOM_NETWORK_VALIDATION_REPORTED=292 ATOM_NETWORK_VALIDATION_REPORTED value
	         * @property {number} ATOM_NETWORK_STACK_QUIRK_REPORTED=293 ATOM_NETWORK_STACK_QUIRK_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED=294 ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED=295 ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED=296 ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED=297 ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED value
	         * @property {number} ATOM_BLOB_COMMITTED=298 ATOM_BLOB_COMMITTED value
	         * @property {number} ATOM_BLOB_LEASED=299 ATOM_BLOB_LEASED value
	         * @property {number} ATOM_BLOB_OPENED=300 ATOM_BLOB_OPENED value
	         * @property {number} ATOM_CONTACTS_PROVIDER_STATUS_REPORTED=301 ATOM_CONTACTS_PROVIDER_STATUS_REPORTED value
	         * @property {number} ATOM_KEYSTORE_KEY_EVENT_REPORTED=302 ATOM_KEYSTORE_KEY_EVENT_REPORTED value
	         * @property {number} ATOM_NETWORK_TETHERING_REPORTED=303 ATOM_NETWORK_TETHERING_REPORTED value
	         * @property {number} ATOM_IME_TOUCH_REPORTED=304 ATOM_IME_TOUCH_REPORTED value
	         * @property {number} ATOM_UI_INTERACTION_FRAME_INFO_REPORTED=305 ATOM_UI_INTERACTION_FRAME_INFO_REPORTED value
	         * @property {number} ATOM_UI_ACTION_LATENCY_REPORTED=306 ATOM_UI_ACTION_LATENCY_REPORTED value
	         * @property {number} ATOM_WIFI_DISCONNECT_REPORTED=307 ATOM_WIFI_DISCONNECT_REPORTED value
	         * @property {number} ATOM_WIFI_CONNECTION_STATE_CHANGED=308 ATOM_WIFI_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED=309 ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED value
	         * @property {number} ATOM_HDMI_CEC_MESSAGE_REPORTED=310 ATOM_HDMI_CEC_MESSAGE_REPORTED value
	         * @property {number} ATOM_AIRPLANE_MODE=311 ATOM_AIRPLANE_MODE value
	         * @property {number} ATOM_MODEM_RESTART=312 ATOM_MODEM_RESTART value
	         * @property {number} ATOM_CARRIER_ID_MISMATCH_REPORTED=313 ATOM_CARRIER_ID_MISMATCH_REPORTED value
	         * @property {number} ATOM_CARRIER_ID_TABLE_UPDATED=314 ATOM_CARRIER_ID_TABLE_UPDATED value
	         * @property {number} ATOM_DATA_STALL_RECOVERY_REPORTED=315 ATOM_DATA_STALL_RECOVERY_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED=316 ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED value
	         * @property {number} ATOM_TLS_HANDSHAKE_REPORTED=317 ATOM_TLS_HANDSHAKE_REPORTED value
	         * @property {number} ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED=318 ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED value
	         * @property {number} ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED=319 ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_PLAYBACK_REPORTED=320 ATOM_MEDIAMETRICS_PLAYBACK_REPORTED value
	         * @property {number} ATOM_MEDIA_NETWORK_INFO_CHANGED=321 ATOM_MEDIA_NETWORK_INFO_CHANGED value
	         * @property {number} ATOM_MEDIA_PLAYBACK_STATE_CHANGED=322 ATOM_MEDIA_PLAYBACK_STATE_CHANGED value
	         * @property {number} ATOM_MEDIA_PLAYBACK_ERROR_REPORTED=323 ATOM_MEDIA_PLAYBACK_ERROR_REPORTED value
	         * @property {number} ATOM_MEDIA_PLAYBACK_TRACK_CHANGED=324 ATOM_MEDIA_PLAYBACK_TRACK_CHANGED value
	         * @property {number} ATOM_WIFI_SCAN_REPORTED=325 ATOM_WIFI_SCAN_REPORTED value
	         * @property {number} ATOM_WIFI_PNO_SCAN_REPORTED=326 ATOM_WIFI_PNO_SCAN_REPORTED value
	         * @property {number} ATOM_TIF_TUNE_CHANGED=327 ATOM_TIF_TUNE_CHANGED value
	         * @property {number} ATOM_AUTO_ROTATE_REPORTED=328 ATOM_AUTO_ROTATE_REPORTED value
	         * @property {number} ATOM_PERFETTO_TRIGGER=329 ATOM_PERFETTO_TRIGGER value
	         * @property {number} ATOM_TRANSCODING_DATA=330 ATOM_TRANSCODING_DATA value
	         * @property {number} ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED=331 ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED value
	         * @property {number} ATOM_DEVICE_ROTATED=333 ATOM_DEVICE_ROTATED value
	         * @property {number} ATOM_SIM_SPECIFIC_SETTINGS_RESTORED=334 ATOM_SIM_SPECIFIC_SETTINGS_RESTORED value
	         * @property {number} ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED=335 ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED value
	         * @property {number} ATOM_PIN_STORAGE_EVENT=336 ATOM_PIN_STORAGE_EVENT value
	         * @property {number} ATOM_FACE_DOWN_REPORTED=337 ATOM_FACE_DOWN_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED=338 ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED value
	         * @property {number} ATOM_REBOOT_ESCROW_PREPARATION_REPORTED=339 ATOM_REBOOT_ESCROW_PREPARATION_REPORTED value
	         * @property {number} ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED=340 ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED value
	         * @property {number} ATOM_REBOOT_ESCROW_REBOOT_REPORTED=341 ATOM_REBOOT_ESCROW_REBOOT_REPORTED value
	         * @property {number} ATOM_BINDER_LATENCY_REPORTED=342 ATOM_BINDER_LATENCY_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED=343 ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED value
	         * @property {number} ATOM_MEDIA_TRANSCODING_SESSION_ENDED=344 ATOM_MEDIA_TRANSCODING_SESSION_ENDED value
	         * @property {number} ATOM_MAGNIFICATION_USAGE_REPORTED=345 ATOM_MAGNIFICATION_USAGE_REPORTED value
	         * @property {number} ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED=346 ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED value
	         * @property {number} ATOM_APP_SEARCH_CALL_STATS_REPORTED=347 ATOM_APP_SEARCH_CALL_STATS_REPORTED value
	         * @property {number} ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED=348 ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED value
	         * @property {number} ATOM_DEVICE_CONTROL_CHANGED=349 ATOM_DEVICE_CONTROL_CHANGED value
	         * @property {number} ATOM_DEVICE_STATE_CHANGED=350 ATOM_DEVICE_STATE_CHANGED value
	         * @property {number} ATOM_INPUTDEVICE_REGISTERED=351 ATOM_INPUTDEVICE_REGISTERED value
	         * @property {number} ATOM_SMARTSPACE_CARD_REPORTED=352 ATOM_SMARTSPACE_CARD_REPORTED value
	         * @property {number} ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED=353 ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED value
	         * @property {number} ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED=354 ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED value
	         * @property {number} ATOM_AUTH_ENROLL_ACTION_INVOKED=355 ATOM_AUTH_ENROLL_ACTION_INVOKED value
	         * @property {number} ATOM_AUTH_DEPRECATED_API_USED=356 ATOM_AUTH_DEPRECATED_API_USED value
	         * @property {number} ATOM_UNATTENDED_REBOOT_OCCURRED=357 ATOM_UNATTENDED_REBOOT_OCCURRED value
	         * @property {number} ATOM_LONG_REBOOT_BLOCKING_REPORTED=358 ATOM_LONG_REBOOT_BLOCKING_REPORTED value
	         * @property {number} ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED=359 ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED value
	         * @property {number} ATOM_FDTRACK_EVENT_OCCURRED=364 ATOM_FDTRACK_EVENT_OCCURRED value
	         * @property {number} ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED=365 ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED value
	         * @property {number} ATOM_ALARM_BATCH_DELIVERED=367 ATOM_ALARM_BATCH_DELIVERED value
	         * @property {number} ATOM_ALARM_SCHEDULED=368 ATOM_ALARM_SCHEDULED value
	         * @property {number} ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED=369 ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED value
	         * @property {number} ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED=370 ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED value
	         * @property {number} ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED=371 ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED value
	         * @property {number} ATOM_APP_SEARCH_QUERY_STATS_REPORTED=372 ATOM_APP_SEARCH_QUERY_STATS_REPORTED value
	         * @property {number} ATOM_APP_PROCESS_DIED=373 ATOM_APP_PROCESS_DIED value
	         * @property {number} ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED=374 ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED value
	         * @property {number} ATOM_SLOW_INPUT_EVENT_REPORTED=375 ATOM_SLOW_INPUT_EVENT_REPORTED value
	         * @property {number} ATOM_ANR_OCCURRED_PROCESSING_STARTED=376 ATOM_ANR_OCCURRED_PROCESSING_STARTED value
	         * @property {number} ATOM_APP_SEARCH_REMOVE_STATS_REPORTED=377 ATOM_APP_SEARCH_REMOVE_STATS_REPORTED value
	         * @property {number} ATOM_MEDIA_CODEC_REPORTED=378 ATOM_MEDIA_CODEC_REPORTED value
	         * @property {number} ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION=379 ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION value
	         * @property {number} ATOM_PERMISSION_DETAILS_INTERACTION=380 ATOM_PERMISSION_DETAILS_INTERACTION value
	         * @property {number} ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION=381 ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION value
	         * @property {number} ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION=382 ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION value
	         * @property {number} ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED=383 ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED value
	         * @property {number} ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT=384 ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT value
	         * @property {number} ATOM_APP_COMPAT_STATE_CHANGED=386 ATOM_APP_COMPAT_STATE_CHANGED value
	         * @property {number} ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED=387 ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED value
	         * @property {number} ATOM_SPLITSCREEN_UI_CHANGED=388 ATOM_SPLITSCREEN_UI_CHANGED value
	         * @property {number} ATOM_NETWORK_DNS_HANDSHAKE_REPORTED=389 ATOM_NETWORK_DNS_HANDSHAKE_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_CODE_PATH_COUNTER=390 ATOM_BLUETOOTH_CODE_PATH_COUNTER value
	         * @property {number} ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY=392 ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY value
	         * @property {number} ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED=393 ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED value
	         * @property {number} ATOM_NEURALNETWORKS_COMPILATION_COMPLETED=394 ATOM_NEURALNETWORKS_COMPILATION_COMPLETED value
	         * @property {number} ATOM_NEURALNETWORKS_EXECUTION_COMPLETED=395 ATOM_NEURALNETWORKS_EXECUTION_COMPLETED value
	         * @property {number} ATOM_NEURALNETWORKS_COMPILATION_FAILED=396 ATOM_NEURALNETWORKS_COMPILATION_FAILED value
	         * @property {number} ATOM_NEURALNETWORKS_EXECUTION_FAILED=397 ATOM_NEURALNETWORKS_EXECUTION_FAILED value
	         * @property {number} ATOM_CONTEXT_HUB_BOOTED=398 ATOM_CONTEXT_HUB_BOOTED value
	         * @property {number} ATOM_CONTEXT_HUB_RESTARTED=399 ATOM_CONTEXT_HUB_RESTARTED value
	         * @property {number} ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED=400 ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED value
	         * @property {number} ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED=401 ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED value
	         * @property {number} ATOM_UWB_SESSION_INITED=402 ATOM_UWB_SESSION_INITED value
	         * @property {number} ATOM_UWB_SESSION_CLOSED=403 ATOM_UWB_SESSION_CLOSED value
	         * @property {number} ATOM_UWB_FIRST_RANGING_RECEIVED=404 ATOM_UWB_FIRST_RANGING_RECEIVED value
	         * @property {number} ATOM_UWB_RANGING_MEASUREMENT_RECEIVED=405 ATOM_UWB_RANGING_MEASUREMENT_RECEIVED value
	         * @property {number} ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED=406 ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED value
	         * @property {number} ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED=407 ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED value
	         * @property {number} ATOM_CLIPBOARD_CLEARED=408 ATOM_CLIPBOARD_CLEARED value
	         * @property {number} ATOM_VM_CREATION_REQUESTED=409 ATOM_VM_CREATION_REQUESTED value
	         * @property {number} ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED=410 ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED value
	         * @property {number} ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED=411 ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED value
	         * @property {number} ATOM_APPLICATION_LOCALES_CHANGED=412 ATOM_APPLICATION_LOCALES_CHANGED value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED=413 ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED value
	         * @property {number} ATOM_FOLD_STATE_DURATION_REPORTED=414 ATOM_FOLD_STATE_DURATION_REPORTED value
	         * @property {number} ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED=415 ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED value
	         * @property {number} ATOM_DISPLAY_HBM_STATE_CHANGED=416 ATOM_DISPLAY_HBM_STATE_CHANGED value
	         * @property {number} ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED=417 ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED value
	         * @property {number} ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED=418 ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED value
	         * @property {number} ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED=419 ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED value
	         * @property {number} ATOM_VBMETA_DIGEST_REPORTED=420 ATOM_VBMETA_DIGEST_REPORTED value
	         * @property {number} ATOM_APEX_INFO_GATHERED=421 ATOM_APEX_INFO_GATHERED value
	         * @property {number} ATOM_PVM_INFO_GATHERED=422 ATOM_PVM_INFO_GATHERED value
	         * @property {number} ATOM_WEAR_SETTINGS_UI_INTERACTED=423 ATOM_WEAR_SETTINGS_UI_INTERACTED value
	         * @property {number} ATOM_TRACING_SERVICE_REPORT_EVENT=424 ATOM_TRACING_SERVICE_REPORT_EVENT value
	         * @property {number} ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED=425 ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED value
	         * @property {number} ATOM_LAUNCHER_LATENCY=426 ATOM_LAUNCHER_LATENCY value
	         * @property {number} ATOM_DROPBOX_ENTRY_DROPPED=427 ATOM_DROPBOX_ENTRY_DROPPED value
	         * @property {number} ATOM_WIFI_P2P_CONNECTION_REPORTED=428 ATOM_WIFI_P2P_CONNECTION_REPORTED value
	         * @property {number} ATOM_GAME_STATE_CHANGED=429 ATOM_GAME_STATE_CHANGED value
	         * @property {number} ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED=430 ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED value
	         * @property {number} ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED=431 ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED value
	         * @property {number} ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED=432 ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED value
	         * @property {number} ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED=433 ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED value
	         * @property {number} ATOM_HOTWORD_DETECTOR_EVENTS=434 ATOM_HOTWORD_DETECTOR_EVENTS value
	         * @property {number} ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED=437 ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED value
	         * @property {number} ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED=440 ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED value
	         * @property {number} ATOM_APP_BACKGROUND_RESTRICTIONS_INFO=441 ATOM_APP_BACKGROUND_RESTRICTIONS_INFO value
	         * @property {number} ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED=442 ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED value
	         * @property {number} ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED=443 ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED value
	         * @property {number} ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED=444 ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED value
	         * @property {number} ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED=445 ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED value
	         * @property {number} ATOM_GNSS_PSDS_DOWNLOAD_REPORTED=446 ATOM_GNSS_PSDS_DOWNLOAD_REPORTED value
	         * @property {number} ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED=447 ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED value
	         * @property {number} ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED=448 ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED value
	         * @property {number} ATOM_DREAM_UI_EVENT_REPORTED=449 ATOM_DREAM_UI_EVENT_REPORTED value
	         * @property {number} ATOM_TASK_MANAGER_EVENT_REPORTED=450 ATOM_TASK_MANAGER_EVENT_REPORTED value
	         * @property {number} ATOM_CDM_ASSOCIATION_ACTION=451 ATOM_CDM_ASSOCIATION_ACTION value
	         * @property {number} ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED=452 ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED value
	         * @property {number} ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED=453 ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED value
	         * @property {number} ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED=454 ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED value
	         * @property {number} ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED=455 ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED value
	         * @property {number} ATOM_UWB_DEVICE_ERROR_REPORTED=456 ATOM_UWB_DEVICE_ERROR_REPORTED value
	         * @property {number} ATOM_ISOLATED_COMPILATION_SCHEDULED=457 ATOM_ISOLATED_COMPILATION_SCHEDULED value
	         * @property {number} ATOM_ISOLATED_COMPILATION_ENDED=458 ATOM_ISOLATED_COMPILATION_ENDED value
	         * @property {number} ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE=459 ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE value
	         * @property {number} ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED=460 ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED value
	         * @property {number} ATOM_TELEPHONY_ANOMALY_DETECTED=461 ATOM_TELEPHONY_ANOMALY_DETECTED value
	         * @property {number} ATOM_LETTERBOX_POSITION_CHANGED=462 ATOM_LETTERBOX_POSITION_CHANGED value
	         * @property {number} ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT=463 ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT value
	         * @property {number} ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO=464 ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO value
	         * @property {number} ATOM_REMOTE_KEY_PROVISIONING_TIMING=465 ATOM_REMOTE_KEY_PROVISIONING_TIMING value
	         * @property {number} ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT=466 ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT value
	         * @property {number} ATOM_SYNC_EXEMPTION_OCCURRED=468 ATOM_SYNC_EXEMPTION_OCCURRED value
	         * @property {number} ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED=469 ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED value
	         * @property {number} ATOM_DOCK_STATE_CHANGED=470 ATOM_DOCK_STATE_CHANGED value
	         * @property {number} ATOM_SAFETY_SOURCE_STATE_COLLECTED=471 ATOM_SAFETY_SOURCE_STATE_COLLECTED value
	         * @property {number} ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED=472 ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED value
	         * @property {number} ATOM_SAFETY_CENTER_INTERACTION_REPORTED=473 ATOM_SAFETY_CENTER_INTERACTION_REPORTED value
	         * @property {number} ATOM_SETTINGS_PROVIDER_SETTING_CHANGED=474 ATOM_SETTINGS_PROVIDER_SETTING_CHANGED value
	         * @property {number} ATOM_BROADCAST_DELIVERY_EVENT_REPORTED=475 ATOM_BROADCAST_DELIVERY_EVENT_REPORTED value
	         * @property {number} ATOM_SERVICE_REQUEST_EVENT_REPORTED=476 ATOM_SERVICE_REQUEST_EVENT_REPORTED value
	         * @property {number} ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED=477 ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_DEVICE_NAME_REPORTED=478 ATOM_BLUETOOTH_DEVICE_NAME_REPORTED value
	         * @property {number} ATOM_CB_CONFIG_UPDATED=479 ATOM_CB_CONFIG_UPDATED value
	         * @property {number} ATOM_CB_MODULE_ERROR_REPORTED=480 ATOM_CB_MODULE_ERROR_REPORTED value
	         * @property {number} ATOM_CB_SERVICE_FEATURE_CHANGED=481 ATOM_CB_SERVICE_FEATURE_CHANGED value
	         * @property {number} ATOM_CB_RECEIVER_FEATURE_CHANGED=482 ATOM_CB_RECEIVER_FEATURE_CHANGED value
	         * @property {number} ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION=484 ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION value
	         * @property {number} ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION=485 ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION value
	         * @property {number} ATOM_PRIVACY_SIGNALS_JOB_FAILURE=486 ATOM_PRIVACY_SIGNALS_JOB_FAILURE value
	         * @property {number} ATOM_VIBRATION_REPORTED=487 ATOM_VIBRATION_REPORTED value
	         * @property {number} ATOM_UWB_RANGING_START=489 ATOM_UWB_RANGING_START value
	         * @property {number} ATOM_APP_COMPACTED_V2=491 ATOM_APP_COMPACTED_V2 value
	         * @property {number} ATOM_DISPLAY_BRIGHTNESS_CHANGED=494 ATOM_DISPLAY_BRIGHTNESS_CHANGED value
	         * @property {number} ATOM_ACTIVITY_ACTION_BLOCKED=495 ATOM_ACTIVITY_ACTION_BLOCKED value
	         * @property {number} ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED=504 ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED value
	         * @property {number} ATOM_VM_BOOTED=505 ATOM_VM_BOOTED value
	         * @property {number} ATOM_VM_EXITED=506 ATOM_VM_EXITED value
	         * @property {number} ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED=507 ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED=508 ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED=509 ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED=510 ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED=511 ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED value
	         * @property {number} ATOM_HEARING_AID_INFO_REPORTED=513 ATOM_HEARING_AID_INFO_REPORTED value
	         * @property {number} ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED=514 ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED value
	         * @property {number} ATOM_AMBIENT_MODE_CHANGED=515 ATOM_AMBIENT_MODE_CHANGED value
	         * @property {number} ATOM_ANR_LATENCY_REPORTED=516 ATOM_ANR_LATENCY_REPORTED value
	         * @property {number} ATOM_RESOURCE_API_INFO=517 ATOM_RESOURCE_API_INFO value
	         * @property {number} ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED=518 ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED value
	         * @property {number} ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED=519 ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED value
	         * @property {number} ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED=520 ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED value
	         * @property {number} ATOM_AIRPLANE_MODE_SESSION_REPORTED=521 ATOM_AIRPLANE_MODE_SESSION_REPORTED value
	         * @property {number} ATOM_VM_CPU_STATUS_REPORTED=522 ATOM_VM_CPU_STATUS_REPORTED value
	         * @property {number} ATOM_VM_MEM_STATUS_REPORTED=523 ATOM_VM_MEM_STATUS_REPORTED value
	         * @property {number} ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED=524 ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED value
	         * @property {number} ATOM_DEFAULT_NETWORK_REMATCH_INFO=525 ATOM_DEFAULT_NETWORK_REMATCH_INFO value
	         * @property {number} ATOM_NETWORK_SELECTION_PERFORMANCE=526 ATOM_NETWORK_SELECTION_PERFORMANCE value
	         * @property {number} ATOM_NETWORK_NSD_REPORTED=527 ATOM_NETWORK_NSD_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED=529 ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED=530 ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED=531 ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED=532 ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_GATT_APP_INFO=533 ATOM_BLUETOOTH_GATT_APP_INFO value
	         * @property {number} ATOM_BRIGHTNESS_CONFIGURATION_UPDATED=534 ATOM_BRIGHTNESS_CONFIGURATION_UPDATED value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED=538 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED=539 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED=540 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED=541 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY=542 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY=543 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY value
	         * @property {number} ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED=544 ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED value
	         * @property {number} ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED=545 ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED value
	         * @property {number} ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED=546 ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED value
	         * @property {number} ATOM_LAUNCHER_IMPRESSION_EVENT=547 ATOM_LAUNCHER_IMPRESSION_EVENT value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY=549 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY value
	         * @property {number} ATOM_WS_WATCH_FACE_EDITED=551 ATOM_WS_WATCH_FACE_EDITED value
	         * @property {number} ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED=552 ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED value
	         * @property {number} ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED=553 ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED value
	         * @property {number} ATOM_PACKAGE_UNINSTALLATION_REPORTED=554 ATOM_PACKAGE_UNINSTALLATION_REPORTED value
	         * @property {number} ATOM_GAME_MODE_CHANGED=555 ATOM_GAME_MODE_CHANGED value
	         * @property {number} ATOM_GAME_MODE_CONFIGURATION_CHANGED=556 ATOM_GAME_MODE_CONFIGURATION_CHANGED value
	         * @property {number} ATOM_BEDTIME_MODE_STATE_CHANGED=557 ATOM_BEDTIME_MODE_STATE_CHANGED value
	         * @property {number} ATOM_NETWORK_SLICE_SESSION_ENDED=558 ATOM_NETWORK_SLICE_SESSION_ENDED value
	         * @property {number} ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED=559 ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED value
	         * @property {number} ATOM_NFC_TAG_TYPE_OCCURRED=560 ATOM_NFC_TAG_TYPE_OCCURRED value
	         * @property {number} ATOM_NFC_AID_CONFLICT_OCCURRED=561 ATOM_NFC_AID_CONFLICT_OCCURRED value
	         * @property {number} ATOM_NFC_READER_CONFLICT_OCCURRED=562 ATOM_NFC_READER_CONFLICT_OCCURRED value
	         * @property {number} ATOM_WS_TILE_LIST_CHANGED=563 ATOM_WS_TILE_LIST_CHANGED value
	         * @property {number} ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION=564 ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION value
	         * @property {number} ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED=566 ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED value
	         * @property {number} ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED=567 ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED value
	         * @property {number} ATOM_MEDIA_DRM_CREATED=568 ATOM_MEDIA_DRM_CREATED value
	         * @property {number} ATOM_MEDIA_DRM_ERRORED=569 ATOM_MEDIA_DRM_ERRORED value
	         * @property {number} ATOM_MEDIA_DRM_SESSION_OPENED=570 ATOM_MEDIA_DRM_SESSION_OPENED value
	         * @property {number} ATOM_MEDIA_DRM_SESSION_CLOSED=571 ATOM_MEDIA_DRM_SESSION_CLOSED value
	         * @property {number} ATOM_USER_SELECTED_RESOLUTION=572 ATOM_USER_SELECTED_RESOLUTION value
	         * @property {number} ATOM_UNSAFE_INTENT_EVENT_REPORTED=573 ATOM_UNSAFE_INTENT_EVENT_REPORTED value
	         * @property {number} ATOM_PERFORMANCE_HINT_SESSION_REPORTED=574 ATOM_PERFORMANCE_HINT_SESSION_REPORTED value
	         * @property {number} ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED=576 ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED value
	         * @property {number} ATOM_BIOMETRIC_TOUCH_REPORTED=577 ATOM_BIOMETRIC_TOUCH_REPORTED value
	         * @property {number} ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED=578 ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED value
	         * @property {number} ATOM_LOCATION_ENABLED_STATE_CHANGED=580 ATOM_LOCATION_ENABLED_STATE_CHANGED value
	         * @property {number} ATOM_IME_REQUEST_FINISHED=581 ATOM_IME_REQUEST_FINISHED value
	         * @property {number} ATOM_USB_COMPLIANCE_WARNINGS_REPORTED=582 ATOM_USB_COMPLIANCE_WARNINGS_REPORTED value
	         * @property {number} ATOM_APP_SUPPORTED_LOCALES_CHANGED=583 ATOM_APP_SUPPORTED_LOCALES_CHANGED value
	         * @property {number} ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED=586 ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED value
	         * @property {number} ATOM_BIOMETRIC_PROPERTIES_COLLECTED=587 ATOM_BIOMETRIC_PROPERTIES_COLLECTED value
	         * @property {number} ATOM_KERNEL_WAKEUP_ATTRIBUTED=588 ATOM_KERNEL_WAKEUP_ATTRIBUTED value
	         * @property {number} ATOM_SCREEN_STATE_CHANGED_V2=589 ATOM_SCREEN_STATE_CHANGED_V2 value
	         * @property {number} ATOM_WS_BACKUP_ACTION_REPORTED=590 ATOM_WS_BACKUP_ACTION_REPORTED value
	         * @property {number} ATOM_WS_RESTORE_ACTION_REPORTED=591 ATOM_WS_RESTORE_ACTION_REPORTED value
	         * @property {number} ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED=592 ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED value
	         * @property {number} ATOM_MEDIA_SESSION_UPDATED=594 ATOM_MEDIA_SESSION_UPDATED value
	         * @property {number} ATOM_WEAR_OOBE_STATE_CHANGED=595 ATOM_WEAR_OOBE_STATE_CHANGED value
	         * @property {number} ATOM_WS_NOTIFICATION_UPDATED=596 ATOM_WS_NOTIFICATION_UPDATED value
	         * @property {number} ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED=601 ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED value
	         * @property {number} ATOM_WS_COMPLICATION_TAPPED=602 ATOM_WS_COMPLICATION_TAPPED value
	         * @property {number} ATOM_WS_NOTIFICATION_BLOCKING=780 ATOM_WS_NOTIFICATION_BLOCKING value
	         * @property {number} ATOM_WS_NOTIFICATION_BRIDGEMODE_UPDATED=822 ATOM_WS_NOTIFICATION_BRIDGEMODE_UPDATED value
	         * @property {number} ATOM_WS_NOTIFICATION_DISMISSAL_ACTIONED=823 ATOM_WS_NOTIFICATION_DISMISSAL_ACTIONED value
	         * @property {number} ATOM_WS_NOTIFICATION_ACTIONED=824 ATOM_WS_NOTIFICATION_ACTIONED value
	         * @property {number} ATOM_WS_NOTIFICATION_LATENCY=880 ATOM_WS_NOTIFICATION_LATENCY value
	         * @property {number} ATOM_WIFI_BYTES_TRANSFER=10000 ATOM_WIFI_BYTES_TRANSFER value
	         * @property {number} ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG=10001 ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG value
	         * @property {number} ATOM_MOBILE_BYTES_TRANSFER=10002 ATOM_MOBILE_BYTES_TRANSFER value
	         * @property {number} ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG=10003 ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG value
	         * @property {number} ATOM_BLUETOOTH_BYTES_TRANSFER=10006 ATOM_BLUETOOTH_BYTES_TRANSFER value
	         * @property {number} ATOM_KERNEL_WAKELOCK=10004 ATOM_KERNEL_WAKELOCK value
	         * @property {number} ATOM_SUBSYSTEM_SLEEP_STATE=10005 ATOM_SUBSYSTEM_SLEEP_STATE value
	         * @property {number} ATOM_CPU_TIME_PER_UID=10009 ATOM_CPU_TIME_PER_UID value
	         * @property {number} ATOM_CPU_TIME_PER_UID_FREQ=10010 ATOM_CPU_TIME_PER_UID_FREQ value
	         * @property {number} ATOM_WIFI_ACTIVITY_INFO=10011 ATOM_WIFI_ACTIVITY_INFO value
	         * @property {number} ATOM_MODEM_ACTIVITY_INFO=10012 ATOM_MODEM_ACTIVITY_INFO value
	         * @property {number} ATOM_BLUETOOTH_ACTIVITY_INFO=10007 ATOM_BLUETOOTH_ACTIVITY_INFO value
	         * @property {number} ATOM_PROCESS_MEMORY_STATE=10013 ATOM_PROCESS_MEMORY_STATE value
	         * @property {number} ATOM_SYSTEM_ELAPSED_REALTIME=10014 ATOM_SYSTEM_ELAPSED_REALTIME value
	         * @property {number} ATOM_SYSTEM_UPTIME=10015 ATOM_SYSTEM_UPTIME value
	         * @property {number} ATOM_CPU_ACTIVE_TIME=10016 ATOM_CPU_ACTIVE_TIME value
	         * @property {number} ATOM_CPU_CLUSTER_TIME=10017 ATOM_CPU_CLUSTER_TIME value
	         * @property {number} ATOM_DISK_SPACE=10018 ATOM_DISK_SPACE value
	         * @property {number} ATOM_REMAINING_BATTERY_CAPACITY=10019 ATOM_REMAINING_BATTERY_CAPACITY value
	         * @property {number} ATOM_FULL_BATTERY_CAPACITY=10020 ATOM_FULL_BATTERY_CAPACITY value
	         * @property {number} ATOM_TEMPERATURE=10021 ATOM_TEMPERATURE value
	         * @property {number} ATOM_BINDER_CALLS=10022 ATOM_BINDER_CALLS value
	         * @property {number} ATOM_BINDER_CALLS_EXCEPTIONS=10023 ATOM_BINDER_CALLS_EXCEPTIONS value
	         * @property {number} ATOM_LOOPER_STATS=10024 ATOM_LOOPER_STATS value
	         * @property {number} ATOM_DISK_STATS=10025 ATOM_DISK_STATS value
	         * @property {number} ATOM_DIRECTORY_USAGE=10026 ATOM_DIRECTORY_USAGE value
	         * @property {number} ATOM_APP_SIZE=10027 ATOM_APP_SIZE value
	         * @property {number} ATOM_CATEGORY_SIZE=10028 ATOM_CATEGORY_SIZE value
	         * @property {number} ATOM_PROC_STATS=10029 ATOM_PROC_STATS value
	         * @property {number} ATOM_BATTERY_VOLTAGE=10030 ATOM_BATTERY_VOLTAGE value
	         * @property {number} ATOM_NUM_FINGERPRINTS_ENROLLED=10031 ATOM_NUM_FINGERPRINTS_ENROLLED value
	         * @property {number} ATOM_DISK_IO=10032 ATOM_DISK_IO value
	         * @property {number} ATOM_POWER_PROFILE=10033 ATOM_POWER_PROFILE value
	         * @property {number} ATOM_PROC_STATS_PKG_PROC=10034 ATOM_PROC_STATS_PKG_PROC value
	         * @property {number} ATOM_PROCESS_CPU_TIME=10035 ATOM_PROCESS_CPU_TIME value
	         * @property {number} ATOM_CPU_TIME_PER_THREAD_FREQ=10037 ATOM_CPU_TIME_PER_THREAD_FREQ value
	         * @property {number} ATOM_ON_DEVICE_POWER_MEASUREMENT=10038 ATOM_ON_DEVICE_POWER_MEASUREMENT value
	         * @property {number} ATOM_DEVICE_CALCULATED_POWER_USE=10039 ATOM_DEVICE_CALCULATED_POWER_USE value
	         * @property {number} ATOM_PROCESS_MEMORY_HIGH_WATER_MARK=10042 ATOM_PROCESS_MEMORY_HIGH_WATER_MARK value
	         * @property {number} ATOM_BATTERY_LEVEL=10043 ATOM_BATTERY_LEVEL value
	         * @property {number} ATOM_BUILD_INFORMATION=10044 ATOM_BUILD_INFORMATION value
	         * @property {number} ATOM_BATTERY_CYCLE_COUNT=10045 ATOM_BATTERY_CYCLE_COUNT value
	         * @property {number} ATOM_DEBUG_ELAPSED_CLOCK=10046 ATOM_DEBUG_ELAPSED_CLOCK value
	         * @property {number} ATOM_DEBUG_FAILING_ELAPSED_CLOCK=10047 ATOM_DEBUG_FAILING_ELAPSED_CLOCK value
	         * @property {number} ATOM_NUM_FACES_ENROLLED=10048 ATOM_NUM_FACES_ENROLLED value
	         * @property {number} ATOM_ROLE_HOLDER=10049 ATOM_ROLE_HOLDER value
	         * @property {number} ATOM_DANGEROUS_PERMISSION_STATE=10050 ATOM_DANGEROUS_PERMISSION_STATE value
	         * @property {number} ATOM_TRAIN_INFO=10051 ATOM_TRAIN_INFO value
	         * @property {number} ATOM_TIME_ZONE_DATA_INFO=10052 ATOM_TIME_ZONE_DATA_INFO value
	         * @property {number} ATOM_EXTERNAL_STORAGE_INFO=10053 ATOM_EXTERNAL_STORAGE_INFO value
	         * @property {number} ATOM_GPU_STATS_GLOBAL_INFO=10054 ATOM_GPU_STATS_GLOBAL_INFO value
	         * @property {number} ATOM_GPU_STATS_APP_INFO=10055 ATOM_GPU_STATS_APP_INFO value
	         * @property {number} ATOM_SYSTEM_ION_HEAP_SIZE=10056 ATOM_SYSTEM_ION_HEAP_SIZE value
	         * @property {number} ATOM_APPS_ON_EXTERNAL_STORAGE_INFO=10057 ATOM_APPS_ON_EXTERNAL_STORAGE_INFO value
	         * @property {number} ATOM_FACE_SETTINGS=10058 ATOM_FACE_SETTINGS value
	         * @property {number} ATOM_COOLING_DEVICE=10059 ATOM_COOLING_DEVICE value
	         * @property {number} ATOM_APP_OPS=10060 ATOM_APP_OPS value
	         * @property {number} ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE=10061 ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE value
	         * @property {number} ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO=10062 ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO value
	         * @property {number} ATOM_SURFACEFLINGER_STATS_LAYER_INFO=10063 ATOM_SURFACEFLINGER_STATS_LAYER_INFO value
	         * @property {number} ATOM_PROCESS_MEMORY_SNAPSHOT=10064 ATOM_PROCESS_MEMORY_SNAPSHOT value
	         * @property {number} ATOM_VMS_CLIENT_STATS=10065 ATOM_VMS_CLIENT_STATS value
	         * @property {number} ATOM_NOTIFICATION_REMOTE_VIEWS=10066 ATOM_NOTIFICATION_REMOTE_VIEWS value
	         * @property {number} ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED=10067 ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED value
	         * @property {number} ATOM_GRAPHICS_STATS=10068 ATOM_GRAPHICS_STATS value
	         * @property {number} ATOM_RUNTIME_APP_OP_ACCESS=10069 ATOM_RUNTIME_APP_OP_ACCESS value
	         * @property {number} ATOM_ION_HEAP_SIZE=10070 ATOM_ION_HEAP_SIZE value
	         * @property {number} ATOM_PACKAGE_NOTIFICATION_PREFERENCES=10071 ATOM_PACKAGE_NOTIFICATION_PREFERENCES value
	         * @property {number} ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES=10072 ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES value
	         * @property {number} ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES=10073 ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES value
	         * @property {number} ATOM_GNSS_STATS=10074 ATOM_GNSS_STATS value
	         * @property {number} ATOM_ATTRIBUTED_APP_OPS=10075 ATOM_ATTRIBUTED_APP_OPS value
	         * @property {number} ATOM_VOICE_CALL_SESSION=10076 ATOM_VOICE_CALL_SESSION value
	         * @property {number} ATOM_VOICE_CALL_RAT_USAGE=10077 ATOM_VOICE_CALL_RAT_USAGE value
	         * @property {number} ATOM_SIM_SLOT_STATE=10078 ATOM_SIM_SLOT_STATE value
	         * @property {number} ATOM_SUPPORTED_RADIO_ACCESS_FAMILY=10079 ATOM_SUPPORTED_RADIO_ACCESS_FAMILY value
	         * @property {number} ATOM_SETTING_SNAPSHOT=10080 ATOM_SETTING_SNAPSHOT value
	         * @property {number} ATOM_BLOB_INFO=10081 ATOM_BLOB_INFO value
	         * @property {number} ATOM_DATA_USAGE_BYTES_TRANSFER=10082 ATOM_DATA_USAGE_BYTES_TRANSFER value
	         * @property {number} ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED=10083 ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED value
	         * @property {number} ATOM_DND_MODE_RULE=10084 ATOM_DND_MODE_RULE value
	         * @property {number} ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS=10085 ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS value
	         * @property {number} ATOM_INCOMING_SMS=10086 ATOM_INCOMING_SMS value
	         * @property {number} ATOM_OUTGOING_SMS=10087 ATOM_OUTGOING_SMS value
	         * @property {number} ATOM_CARRIER_ID_TABLE_VERSION=10088 ATOM_CARRIER_ID_TABLE_VERSION value
	         * @property {number} ATOM_DATA_CALL_SESSION=10089 ATOM_DATA_CALL_SESSION value
	         * @property {number} ATOM_CELLULAR_SERVICE_STATE=10090 ATOM_CELLULAR_SERVICE_STATE value
	         * @property {number} ATOM_CELLULAR_DATA_SERVICE_SWITCH=10091 ATOM_CELLULAR_DATA_SERVICE_SWITCH value
	         * @property {number} ATOM_SYSTEM_MEMORY=10092 ATOM_SYSTEM_MEMORY value
	         * @property {number} ATOM_IMS_REGISTRATION_TERMINATION=10093 ATOM_IMS_REGISTRATION_TERMINATION value
	         * @property {number} ATOM_IMS_REGISTRATION_STATS=10094 ATOM_IMS_REGISTRATION_STATS value
	         * @property {number} ATOM_CPU_TIME_PER_CLUSTER_FREQ=10095 ATOM_CPU_TIME_PER_CLUSTER_FREQ value
	         * @property {number} ATOM_CPU_CYCLES_PER_UID_CLUSTER=10096 ATOM_CPU_CYCLES_PER_UID_CLUSTER value
	         * @property {number} ATOM_DEVICE_ROTATED_DATA=10097 ATOM_DEVICE_ROTATED_DATA value
	         * @property {number} ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER=10098 ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER value
	         * @property {number} ATOM_MEDIA_DRM_ACTIVITY_INFO=10099 ATOM_MEDIA_DRM_ACTIVITY_INFO value
	         * @property {number} ATOM_OEM_MANAGED_BYTES_TRANSFER=10100 ATOM_OEM_MANAGED_BYTES_TRANSFER value
	         * @property {number} ATOM_GNSS_POWER_STATS=10101 ATOM_GNSS_POWER_STATS value
	         * @property {number} ATOM_TIME_ZONE_DETECTOR_STATE=10102 ATOM_TIME_ZONE_DETECTOR_STATE value
	         * @property {number} ATOM_KEYSTORE2_STORAGE_STATS=10103 ATOM_KEYSTORE2_STORAGE_STATS value
	         * @property {number} ATOM_RKP_POOL_STATS=10104 ATOM_RKP_POOL_STATS value
	         * @property {number} ATOM_PROCESS_DMABUF_MEMORY=10105 ATOM_PROCESS_DMABUF_MEMORY value
	         * @property {number} ATOM_PENDING_ALARM_INFO=10106 ATOM_PENDING_ALARM_INFO value
	         * @property {number} ATOM_USER_LEVEL_HIBERNATED_APPS=10107 ATOM_USER_LEVEL_HIBERNATED_APPS value
	         * @property {number} ATOM_LAUNCHER_LAYOUT_SNAPSHOT=10108 ATOM_LAUNCHER_LAYOUT_SNAPSHOT value
	         * @property {number} ATOM_GLOBAL_HIBERNATED_APPS=10109 ATOM_GLOBAL_HIBERNATED_APPS value
	         * @property {number} ATOM_INPUT_EVENT_LATENCY_SKETCH=10110 ATOM_INPUT_EVENT_LATENCY_SKETCH value
	         * @property {number} ATOM_BATTERY_USAGE_STATS_BEFORE_RESET=10111 ATOM_BATTERY_USAGE_STATS_BEFORE_RESET value
	         * @property {number} ATOM_BATTERY_USAGE_STATS_SINCE_RESET=10112 ATOM_BATTERY_USAGE_STATS_SINCE_RESET value
	         * @property {number} ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL=10113 ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL value
	         * @property {number} ATOM_INSTALLED_INCREMENTAL_PACKAGE=10114 ATOM_INSTALLED_INCREMENTAL_PACKAGE value
	         * @property {number} ATOM_TELEPHONY_NETWORK_REQUESTS=10115 ATOM_TELEPHONY_NETWORK_REQUESTS value
	         * @property {number} ATOM_APP_SEARCH_STORAGE_INFO=10116 ATOM_APP_SEARCH_STORAGE_INFO value
	         * @property {number} ATOM_VMSTAT=10117 ATOM_VMSTAT value
	         * @property {number} ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO=10118 ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO value
	         * @property {number} ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO=10119 ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO value
	         * @property {number} ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO=10120 ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO value
	         * @property {number} ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW=10121 ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW value
	         * @property {number} ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO=10122 ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO value
	         * @property {number} ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO=10123 ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO value
	         * @property {number} ATOM_RKP_ERROR_STATS=10124 ATOM_RKP_ERROR_STATS value
	         * @property {number} ATOM_KEYSTORE2_CRASH_STATS=10125 ATOM_KEYSTORE2_CRASH_STATS value
	         * @property {number} ATOM_VENDOR_APEX_INFO=10126 ATOM_VENDOR_APEX_INFO value
	         * @property {number} ATOM_ACCESSIBILITY_SHORTCUT_STATS=10127 ATOM_ACCESSIBILITY_SHORTCUT_STATS value
	         * @property {number} ATOM_ACCESSIBILITY_FLOATING_MENU_STATS=10128 ATOM_ACCESSIBILITY_FLOATING_MENU_STATS value
	         * @property {number} ATOM_DATA_USAGE_BYTES_TRANSFER_V2=10129 ATOM_DATA_USAGE_BYTES_TRANSFER_V2 value
	         * @property {number} ATOM_MEDIA_CAPABILITIES=10130 ATOM_MEDIA_CAPABILITIES value
	         * @property {number} ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY=10131 ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY value
	         * @property {number} ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY=10132 ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY value
	         * @property {number} ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS=10133 ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS value
	         * @property {number} ATOM_RCS_CLIENT_PROVISIONING_STATS=10134 ATOM_RCS_CLIENT_PROVISIONING_STATS value
	         * @property {number} ATOM_RCS_ACS_PROVISIONING_STATS=10135 ATOM_RCS_ACS_PROVISIONING_STATS value
	         * @property {number} ATOM_SIP_DELEGATE_STATS=10136 ATOM_SIP_DELEGATE_STATS value
	         * @property {number} ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS=10137 ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS value
	         * @property {number} ATOM_SIP_MESSAGE_RESPONSE=10138 ATOM_SIP_MESSAGE_RESPONSE value
	         * @property {number} ATOM_SIP_TRANSPORT_SESSION=10139 ATOM_SIP_TRANSPORT_SESSION value
	         * @property {number} ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT=10140 ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT value
	         * @property {number} ATOM_IMS_DEDICATED_BEARER_EVENT=10141 ATOM_IMS_DEDICATED_BEARER_EVENT value
	         * @property {number} ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS=10142 ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS value
	         * @property {number} ATOM_UCE_EVENT_STATS=10143 ATOM_UCE_EVENT_STATS value
	         * @property {number} ATOM_PRESENCE_NOTIFY_EVENT=10144 ATOM_PRESENCE_NOTIFY_EVENT value
	         * @property {number} ATOM_GBA_EVENT=10145 ATOM_GBA_EVENT value
	         * @property {number} ATOM_PER_SIM_STATUS=10146 ATOM_PER_SIM_STATUS value
	         * @property {number} ATOM_GPU_WORK_PER_UID=10147 ATOM_GPU_WORK_PER_UID value
	         * @property {number} ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE=10148 ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE value
	         * @property {number} ATOM_SIGNED_PARTITION_INFO=10149 ATOM_SIGNED_PARTITION_INFO value
	         * @property {number} ATOM_PINNED_FILE_SIZES_PER_PACKAGE=10150 ATOM_PINNED_FILE_SIZES_PER_PACKAGE value
	         * @property {number} ATOM_PENDING_INTENTS_PER_PACKAGE=10151 ATOM_PENDING_INTENTS_PER_PACKAGE value
	         * @property {number} ATOM_USER_INFO=10152 ATOM_USER_INFO value
	         * @property {number} ATOM_TELEPHONY_NETWORK_REQUESTS_V2=10153 ATOM_TELEPHONY_NETWORK_REQUESTS_V2 value
	         * @property {number} ATOM_DEVICE_TELEPHONY_PROPERTIES=10154 ATOM_DEVICE_TELEPHONY_PROPERTIES value
	         * @property {number} ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS=10155 ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS value
	         * @property {number} ATOM_SAFETY_STATE=10156 ATOM_SAFETY_STATE value
	         * @property {number} ATOM_INCOMING_MMS=10157 ATOM_INCOMING_MMS value
	         * @property {number} ATOM_OUTGOING_MMS=10158 ATOM_OUTGOING_MMS value
	         * @property {number} ATOM_MULTI_USER_INFO=10160 ATOM_MULTI_USER_INFO value
	         * @property {number} ATOM_NETWORK_BPF_MAP_INFO=10161 ATOM_NETWORK_BPF_MAP_INFO value
	         * @property {number} ATOM_OUTGOING_SHORT_CODE_SMS=10162 ATOM_OUTGOING_SHORT_CODE_SMS value
	         * @property {number} ATOM_CONNECTIVITY_STATE_SAMPLE=10163 ATOM_CONNECTIVITY_STATE_SAMPLE value
	         * @property {number} ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO=10164 ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO value
	         * @property {number} ATOM_GAME_MODE_INFO=10165 ATOM_GAME_MODE_INFO value
	         * @property {number} ATOM_GAME_MODE_CONFIGURATION=10166 ATOM_GAME_MODE_CONFIGURATION value
	         * @property {number} ATOM_GAME_MODE_LISTENER=10167 ATOM_GAME_MODE_LISTENER value
	         * @property {number} ATOM_NETWORK_SLICE_REQUEST_COUNT=10168 ATOM_NETWORK_SLICE_REQUEST_COUNT value
	         * @property {number} ATOM_WS_TILE_SNAPSHOT=10169 ATOM_WS_TILE_SNAPSHOT value
	         * @property {number} ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT=10170 ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT value
	         * @property {number} ATOM_PROCESS_STATE=10171 ATOM_PROCESS_STATE value
	         * @property {number} ATOM_PROCESS_ASSOCIATION=10172 ATOM_PROCESS_ASSOCIATION value
	         * @property {number} ATOM_ADPF_SYSTEM_COMPONENT_INFO=10173 ATOM_ADPF_SYSTEM_COMPONENT_INFO value
	         * @property {number} ATOM_NOTIFICATION_MEMORY_USE=10174 ATOM_NOTIFICATION_MEMORY_USE value
	         * @property {number} ATOM_HDR_CAPABILITIES=10175 ATOM_HDR_CAPABILITIES value
	         * @property {number} ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT=10176 ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT value
	         * @property {number} ATOM_ADAPTIVE_AUTH_UNLOCK_AFTER_LOCK_REPORTED=820 ATOM_ADAPTIVE_AUTH_UNLOCK_AFTER_LOCK_REPORTED value
	         * @property {number} ATOM_THERMAL_STATUS_CALLED=772 ATOM_THERMAL_STATUS_CALLED value
	         * @property {number} ATOM_THERMAL_HEADROOM_CALLED=773 ATOM_THERMAL_HEADROOM_CALLED value
	         * @property {number} ATOM_THERMAL_HEADROOM_THRESHOLDS_CALLED=774 ATOM_THERMAL_HEADROOM_THRESHOLDS_CALLED value
	         * @property {number} ATOM_ADPF_HINT_SESSION_TID_CLEANUP=839 ATOM_ADPF_HINT_SESSION_TID_CLEANUP value
	         * @property {number} ATOM_THERMAL_HEADROOM_THRESHOLDS=10201 ATOM_THERMAL_HEADROOM_THRESHOLDS value
	         * @property {number} ATOM_ADPF_SESSION_SNAPSHOT=10218 ATOM_ADPF_SESSION_SNAPSHOT value
	         * @property {number} ATOM_JSSCRIPTENGINE_LATENCY_REPORTED=483 ATOM_JSSCRIPTENGINE_LATENCY_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_API_CALLED=435 ATOM_AD_SERVICES_API_CALLED value
	         * @property {number} ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED=436 ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED value
	         * @property {number} ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED=490 ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED value
	         * @property {number} ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED=502 ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED=493 ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED value
	         * @property {number} ATOM_BACKGROUND_FETCH_PROCESS_REPORTED=496 ATOM_BACKGROUND_FETCH_PROCESS_REPORTED value
	         * @property {number} ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED=497 ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED value
	         * @property {number} ATOM_RUN_AD_BIDDING_PROCESS_REPORTED=498 ATOM_RUN_AD_BIDDING_PROCESS_REPORTED value
	         * @property {number} ATOM_RUN_AD_SCORING_PROCESS_REPORTED=499 ATOM_RUN_AD_SCORING_PROCESS_REPORTED value
	         * @property {number} ATOM_RUN_AD_SELECTION_PROCESS_REPORTED=500 ATOM_RUN_AD_SELECTION_PROCESS_REPORTED value
	         * @property {number} ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED=501 ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED value
	         * @property {number} ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED=503 ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS=512 ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS value
	         * @property {number} ATOM_AD_SERVICES_GET_TOPICS_REPORTED=535 ATOM_AD_SERVICES_GET_TOPICS_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED=536 ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED=537 ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED=598 ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED=599 ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS=640 ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS value
	         * @property {number} ATOM_AD_SERVICES_ERROR_REPORTED=662 ATOM_AD_SERVICES_ERROR_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED=663 ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION=673 ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION=674 ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_JOBS=675 ATOM_AD_SERVICES_MEASUREMENT_JOBS value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT=676 ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_AD_ID_MATCH_FOR_DEBUG_KEYS=695 ATOM_AD_SERVICES_MEASUREMENT_AD_ID_MATCH_FOR_DEBUG_KEYS value
	         * @property {number} ATOM_AD_SERVICES_ENROLLMENT_DATA_STORED=697 ATOM_AD_SERVICES_ENROLLMENT_DATA_STORED value
	         * @property {number} ATOM_AD_SERVICES_ENROLLMENT_FILE_DOWNLOADED=698 ATOM_AD_SERVICES_ENROLLMENT_FILE_DOWNLOADED value
	         * @property {number} ATOM_AD_SERVICES_ENROLLMENT_MATCHED=699 ATOM_AD_SERVICES_ENROLLMENT_MATCHED value
	         * @property {number} ATOM_AD_SERVICES_CONSENT_MIGRATED=702 ATOM_AD_SERVICES_CONSENT_MIGRATED value
	         * @property {number} ATOM_AD_SERVICES_ENROLLMENT_FAILED=714 ATOM_AD_SERVICES_ENROLLMENT_FAILED value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_CLICK_VERIFICATION=756 ATOM_AD_SERVICES_MEASUREMENT_CLICK_VERIFICATION value
	         * @property {number} ATOM_AD_SERVICES_ENCRYPTION_KEY_FETCHED=765 ATOM_AD_SERVICES_ENCRYPTION_KEY_FETCHED value
	         * @property {number} ATOM_AD_SERVICES_ENCRYPTION_KEY_DB_TRANSACTION_ENDED=766 ATOM_AD_SERVICES_ENCRYPTION_KEY_DB_TRANSACTION_ENDED value
	         * @property {number} ATOM_DESTINATION_REGISTERED_BEACONS=767 ATOM_DESTINATION_REGISTERED_BEACONS value
	         * @property {number} ATOM_REPORT_INTERACTION_API_CALLED=768 ATOM_REPORT_INTERACTION_API_CALLED value
	         * @property {number} ATOM_INTERACTION_REPORTING_TABLE_CLEARED=769 ATOM_INTERACTION_REPORTING_TABLE_CLEARED value
	         * @property {number} ATOM_APP_MANIFEST_CONFIG_HELPER_CALLED=788 ATOM_APP_MANIFEST_CONFIG_HELPER_CALLED value
	         * @property {number} ATOM_AD_FILTERING_PROCESS_JOIN_CA_REPORTED=793 ATOM_AD_FILTERING_PROCESS_JOIN_CA_REPORTED value
	         * @property {number} ATOM_AD_FILTERING_PROCESS_AD_SELECTION_REPORTED=794 ATOM_AD_FILTERING_PROCESS_AD_SELECTION_REPORTED value
	         * @property {number} ATOM_AD_COUNTER_HISTOGRAM_UPDATER_REPORTED=795 ATOM_AD_COUNTER_HISTOGRAM_UPDATER_REPORTED value
	         * @property {number} ATOM_SIGNATURE_VERIFICATION=807 ATOM_SIGNATURE_VERIFICATION value
	         * @property {number} ATOM_K_ANON_IMMEDIATE_SIGN_JOIN_STATUS_REPORTED=808 ATOM_K_ANON_IMMEDIATE_SIGN_JOIN_STATUS_REPORTED value
	         * @property {number} ATOM_K_ANON_BACKGROUND_JOB_STATUS_REPORTED=809 ATOM_K_ANON_BACKGROUND_JOB_STATUS_REPORTED value
	         * @property {number} ATOM_K_ANON_INITIALIZE_STATUS_REPORTED=810 ATOM_K_ANON_INITIALIZE_STATUS_REPORTED value
	         * @property {number} ATOM_K_ANON_SIGN_STATUS_REPORTED=811 ATOM_K_ANON_SIGN_STATUS_REPORTED value
	         * @property {number} ATOM_K_ANON_JOIN_STATUS_REPORTED=812 ATOM_K_ANON_JOIN_STATUS_REPORTED value
	         * @property {number} ATOM_K_ANON_KEY_ATTESTATION_STATUS_REPORTED=813 ATOM_K_ANON_KEY_ATTESTATION_STATUS_REPORTED value
	         * @property {number} ATOM_GET_AD_SELECTION_DATA_API_CALLED=814 ATOM_GET_AD_SELECTION_DATA_API_CALLED value
	         * @property {number} ATOM_GET_AD_SELECTION_DATA_BUYER_INPUT_GENERATED=815 ATOM_GET_AD_SELECTION_DATA_BUYER_INPUT_GENERATED value
	         * @property {number} ATOM_BACKGROUND_JOB_SCHEDULING_REPORTED=834 ATOM_BACKGROUND_JOB_SCHEDULING_REPORTED value
	         * @property {number} ATOM_TOPICS_ENCRYPTION_EPOCH_COMPUTATION_REPORTED=840 ATOM_TOPICS_ENCRYPTION_EPOCH_COMPUTATION_REPORTED value
	         * @property {number} ATOM_TOPICS_ENCRYPTION_GET_TOPICS_REPORTED=841 ATOM_TOPICS_ENCRYPTION_GET_TOPICS_REPORTED value
	         * @property {number} ATOM_ADSERVICES_SHELL_COMMAND_CALLED=842 ATOM_ADSERVICES_SHELL_COMMAND_CALLED value
	         * @property {number} ATOM_UPDATE_SIGNALS_API_CALLED=843 ATOM_UPDATE_SIGNALS_API_CALLED value
	         * @property {number} ATOM_ENCODING_JOB_RUN=844 ATOM_ENCODING_JOB_RUN value
	         * @property {number} ATOM_ENCODING_JS_FETCH=845 ATOM_ENCODING_JS_FETCH value
	         * @property {number} ATOM_ENCODING_JS_EXECUTION=846 ATOM_ENCODING_JS_EXECUTION value
	         * @property {number} ATOM_PERSIST_AD_SELECTION_RESULT_CALLED=847 ATOM_PERSIST_AD_SELECTION_RESULT_CALLED value
	         * @property {number} ATOM_SERVER_AUCTION_KEY_FETCH_CALLED=848 ATOM_SERVER_AUCTION_KEY_FETCH_CALLED value
	         * @property {number} ATOM_SERVER_AUCTION_BACKGROUND_KEY_FETCH_ENABLED=849 ATOM_SERVER_AUCTION_BACKGROUND_KEY_FETCH_ENABLED value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_PROCESS_ODP_REGISTRATION=864 ATOM_AD_SERVICES_MEASUREMENT_PROCESS_ODP_REGISTRATION value
	         * @property {number} ATOM_AD_SERVICES_MEASUREMENT_NOTIFY_REGISTRATION_TO_ODP=865 ATOM_AD_SERVICES_MEASUREMENT_NOTIFY_REGISTRATION_TO_ODP value
	         * @property {number} ATOM_SELECT_ADS_FROM_OUTCOMES_API_CALLED=876 ATOM_SELECT_ADS_FROM_OUTCOMES_API_CALLED value
	         * @property {number} ATOM_REPORT_IMPRESSION_API_CALLED=877 ATOM_REPORT_IMPRESSION_API_CALLED value
	         * @property {number} ATOM_AD_SERVICES_ENROLLMENT_TRANSACTION_STATS=885 ATOM_AD_SERVICES_ENROLLMENT_TRANSACTION_STATS value
	         * @property {number} ATOM_AI_WALLPAPERS_BUTTON_PRESSED=706 ATOM_AI_WALLPAPERS_BUTTON_PRESSED value
	         * @property {number} ATOM_AI_WALLPAPERS_TEMPLATE_SELECTED=707 ATOM_AI_WALLPAPERS_TEMPLATE_SELECTED value
	         * @property {number} ATOM_AI_WALLPAPERS_TERM_SELECTED=708 ATOM_AI_WALLPAPERS_TERM_SELECTED value
	         * @property {number} ATOM_AI_WALLPAPERS_WALLPAPER_SET=709 ATOM_AI_WALLPAPERS_WALLPAPER_SET value
	         * @property {number} ATOM_AI_WALLPAPERS_SESSION_SUMMARY=710 ATOM_AI_WALLPAPERS_SESSION_SUMMARY value
	         * @property {number} ATOM_APEX_INSTALLATION_REQUESTED=732 ATOM_APEX_INSTALLATION_REQUESTED value
	         * @property {number} ATOM_APEX_INSTALLATION_STAGED=733 ATOM_APEX_INSTALLATION_STAGED value
	         * @property {number} ATOM_APEX_INSTALLATION_ENDED=734 ATOM_APEX_INSTALLATION_ENDED value
	         * @property {number} ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED=385 ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED value
	         * @property {number} ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED=579 ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED value
	         * @property {number} ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_STATS_REPORTED=825 ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_STATS_REPORTED value
	         * @property {number} ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_RAW_QUERY_STATS_REPORTED=826 ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_RAW_QUERY_STATS_REPORTED value
	         * @property {number} ATOM_ART_DATUM_REPORTED=332 ATOM_ART_DATUM_REPORTED value
	         * @property {number} ATOM_ART_DEVICE_DATUM_REPORTED=550 ATOM_ART_DEVICE_DATUM_REPORTED value
	         * @property {number} ATOM_ART_DATUM_DELTA_REPORTED=565 ATOM_ART_DATUM_DELTA_REPORTED value
	         * @property {number} ATOM_ART_DEX2OAT_REPORTED=929 ATOM_ART_DEX2OAT_REPORTED value
	         * @property {number} ATOM_ART_DEVICE_STATUS=10205 ATOM_ART_DEVICE_STATUS value
	         * @property {number} ATOM_BACKGROUND_DEXOPT_JOB_ENDED=467 ATOM_BACKGROUND_DEXOPT_JOB_ENDED value
	         * @property {number} ATOM_PREREBOOT_DEXOPT_JOB_ENDED=883 ATOM_PREREBOOT_DEXOPT_JOB_ENDED value
	         * @property {number} ATOM_ODREFRESH_REPORTED=366 ATOM_ODREFRESH_REPORTED value
	         * @property {number} ATOM_ODSIGN_REPORTED=548 ATOM_ODSIGN_REPORTED value
	         * @property {number} ATOM_AUTOFILL_UI_EVENT_REPORTED=603 ATOM_AUTOFILL_UI_EVENT_REPORTED value
	         * @property {number} ATOM_AUTOFILL_FILL_REQUEST_REPORTED=604 ATOM_AUTOFILL_FILL_REQUEST_REPORTED value
	         * @property {number} ATOM_AUTOFILL_FILL_RESPONSE_REPORTED=605 ATOM_AUTOFILL_FILL_RESPONSE_REPORTED value
	         * @property {number} ATOM_AUTOFILL_SAVE_EVENT_REPORTED=606 ATOM_AUTOFILL_SAVE_EVENT_REPORTED value
	         * @property {number} ATOM_AUTOFILL_SESSION_COMMITTED=607 ATOM_AUTOFILL_SESSION_COMMITTED value
	         * @property {number} ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED=659 ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED value
	         * @property {number} ATOM_CAR_RECENTS_EVENT_REPORTED=770 ATOM_CAR_RECENTS_EVENT_REPORTED value
	         * @property {number} ATOM_CAR_CALM_MODE_EVENT_REPORTED=797 ATOM_CAR_CALM_MODE_EVENT_REPORTED value
	         * @property {number} ATOM_CAR_WAKEUP_FROM_SUSPEND_REPORTED=852 ATOM_CAR_WAKEUP_FROM_SUSPEND_REPORTED value
	         * @property {number} ATOM_PLUGIN_INITIALIZED=655 ATOM_PLUGIN_INITIALIZED value
	         * @property {number} ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED=613 ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION=614 ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION value
	         * @property {number} ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION=615 ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION value
	         * @property {number} ATOM_BLUETOOTH_LE_SESSION_CONNECTED=656 ATOM_BLUETOOTH_LE_SESSION_CONNECTED value
	         * @property {number} ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED=666 ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED=696 ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED value
	         * @property {number} ATOM_BLUETOOTH_CONTENT_PROFILE_ERROR_REPORTED=781 ATOM_BLUETOOTH_CONTENT_PROFILE_ERROR_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED=782 ATOM_BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED value
	         * @property {number} ATOM_REMOTE_DEVICE_INFORMATION_WITH_METRIC_ID=862 ATOM_REMOTE_DEVICE_INFORMATION_WITH_METRIC_ID value
	         * @property {number} ATOM_LE_APP_SCAN_STATE_CHANGED=870 ATOM_LE_APP_SCAN_STATE_CHANGED value
	         * @property {number} ATOM_LE_RADIO_SCAN_STOPPED=871 ATOM_LE_RADIO_SCAN_STOPPED value
	         * @property {number} ATOM_LE_SCAN_RESULT_RECEIVED=872 ATOM_LE_SCAN_RESULT_RECEIVED value
	         * @property {number} ATOM_LE_SCAN_ABUSED=873 ATOM_LE_SCAN_ABUSED value
	         * @property {number} ATOM_LE_ADV_STATE_CHANGED=874 ATOM_LE_ADV_STATE_CHANGED value
	         * @property {number} ATOM_LE_ADV_ERROR_REPORTED=875 ATOM_LE_ADV_ERROR_REPORTED value
	         * @property {number} ATOM_A2DP_SESSION_REPORTED=904 ATOM_A2DP_SESSION_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_CROSS_LAYER_EVENT_REPORTED=916 ATOM_BLUETOOTH_CROSS_LAYER_EVENT_REPORTED value
	         * @property {number} ATOM_BROADCAST_AUDIO_SESSION_REPORTED=927 ATOM_BROADCAST_AUDIO_SESSION_REPORTED value
	         * @property {number} ATOM_BROADCAST_AUDIO_SYNC_REPORTED=928 ATOM_BROADCAST_AUDIO_SYNC_REPORTED value
	         * @property {number} ATOM_BLUETOOTH_RFCOMM_CONNECTION_REPORTED_AT_CLOSE=982 ATOM_BLUETOOTH_RFCOMM_CONNECTION_REPORTED_AT_CLOSE value
	         * @property {number} ATOM_CAMERA_FEATURE_COMBINATION_QUERY_EVENT=900 ATOM_CAMERA_FEATURE_COMBINATION_QUERY_EVENT value
	         * @property {number} ATOM_DAILY_KEEPALIVE_INFO_REPORTED=650 ATOM_DAILY_KEEPALIVE_INFO_REPORTED value
	         * @property {number} ATOM_NETWORK_REQUEST_STATE_CHANGED=779 ATOM_NETWORK_REQUEST_STATE_CHANGED value
	         * @property {number} ATOM_TETHERING_ACTIVE_SESSIONS_REPORTED=925 ATOM_TETHERING_ACTIVE_SESSIONS_REPORTED value
	         * @property {number} ATOM_NETWORK_STATS_RECORDER_FILE_OPERATED=783 ATOM_NETWORK_STATS_RECORDER_FILE_OPERATED value
	         * @property {number} ATOM_CORE_NETWORKING_TERRIBLE_ERROR_OCCURRED=979 ATOM_CORE_NETWORKING_TERRIBLE_ERROR_OCCURRED value
	         * @property {number} ATOM_APF_SESSION_INFO_REPORTED=777 ATOM_APF_SESSION_INFO_REPORTED value
	         * @property {number} ATOM_IP_CLIENT_RA_INFO_REPORTED=778 ATOM_IP_CLIENT_RA_INFO_REPORTED value
	         * @property {number} ATOM_VPN_CONNECTION_STATE_CHANGED=850 ATOM_VPN_CONNECTION_STATE_CHANGED value
	         * @property {number} ATOM_VPN_CONNECTION_REPORTED=851 ATOM_VPN_CONNECTION_REPORTED value
	         * @property {number} ATOM_CPU_POLICY=10199 ATOM_CPU_POLICY value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_API_CALLED=585 ATOM_CREDENTIAL_MANAGER_API_CALLED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED=651 ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED=652 ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED=653 ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED=667 ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED=668 ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_GET_REPORTED=669 ATOM_CREDENTIAL_MANAGER_GET_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED=670 ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED value
	         * @property {number} ATOM_CREDENTIAL_MANAGER_APIV2_CALLED=671 ATOM_CREDENTIAL_MANAGER_APIV2_CALLED value
	         * @property {number} ATOM_CRONET_ENGINE_CREATED=703 ATOM_CRONET_ENGINE_CREATED value
	         * @property {number} ATOM_CRONET_TRAFFIC_REPORTED=704 ATOM_CRONET_TRAFFIC_REPORTED value
	         * @property {number} ATOM_CRONET_ENGINE_BUILDER_INITIALIZED=762 ATOM_CRONET_ENGINE_BUILDER_INITIALIZED value
	         * @property {number} ATOM_CRONET_HTTP_FLAGS_INITIALIZED=763 ATOM_CRONET_HTTP_FLAGS_INITIALIZED value
	         * @property {number} ATOM_CRONET_INITIALIZED=764 ATOM_CRONET_INITIALIZED value
	         * @property {number} ATOM_DESKTOP_MODE_UI_CHANGED=818 ATOM_DESKTOP_MODE_UI_CHANGED value
	         * @property {number} ATOM_DESKTOP_MODE_SESSION_TASK_UPDATE=819 ATOM_DESKTOP_MODE_SESSION_TASK_UPDATE value
	         * @property {number} ATOM_DEVICE_LOCK_CHECK_IN_REQUEST_REPORTED=726 ATOM_DEVICE_LOCK_CHECK_IN_REQUEST_REPORTED value
	         * @property {number} ATOM_DEVICE_LOCK_PROVISIONING_COMPLETE_REPORTED=727 ATOM_DEVICE_LOCK_PROVISIONING_COMPLETE_REPORTED value
	         * @property {number} ATOM_DEVICE_LOCK_KIOSK_APP_REQUEST_REPORTED=728 ATOM_DEVICE_LOCK_KIOSK_APP_REQUEST_REPORTED value
	         * @property {number} ATOM_DEVICE_LOCK_CHECK_IN_RETRY_REPORTED=789 ATOM_DEVICE_LOCK_CHECK_IN_RETRY_REPORTED value
	         * @property {number} ATOM_DEVICE_LOCK_PROVISION_FAILURE_REPORTED=790 ATOM_DEVICE_LOCK_PROVISION_FAILURE_REPORTED value
	         * @property {number} ATOM_DEVICE_LOCK_LOCK_UNLOCK_DEVICE_FAILURE_REPORTED=791 ATOM_DEVICE_LOCK_LOCK_UNLOCK_DEVICE_FAILURE_REPORTED value
	         * @property {number} ATOM_DEVICE_POLICY_MANAGEMENT_MODE=10216 ATOM_DEVICE_POLICY_MANAGEMENT_MODE value
	         * @property {number} ATOM_DEVICE_POLICY_STATE=10217 ATOM_DEVICE_POLICY_STATE value
	         * @property {number} ATOM_DISPLAY_MODE_DIRECTOR_VOTE_CHANGED=792 ATOM_DISPLAY_MODE_DIRECTOR_VOTE_CHANGED value
	         * @property {number} ATOM_EXTERNAL_DISPLAY_STATE_CHANGED=806 ATOM_EXTERNAL_DISPLAY_STATE_CHANGED value
	         * @property {number} ATOM_DND_STATE_CHANGED=657 ATOM_DND_STATE_CHANGED value
	         * @property {number} ATOM_DREAM_SETTING_CHANGED=705 ATOM_DREAM_SETTING_CHANGED value
	         * @property {number} ATOM_DREAM_SETTING_SNAPSHOT=10192 ATOM_DREAM_SETTING_SNAPSHOT value
	         * @property {number} ATOM_EXPRESS_EVENT_REPORTED=528 ATOM_EXPRESS_EVENT_REPORTED value
	         * @property {number} ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED=593 ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED value
	         * @property {number} ATOM_EXPRESS_UID_EVENT_REPORTED=644 ATOM_EXPRESS_UID_EVENT_REPORTED value
	         * @property {number} ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED=658 ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED value
	         * @property {number} ATOM_FEDERATED_COMPUTE_API_CALLED=712 ATOM_FEDERATED_COMPUTE_API_CALLED value
	         * @property {number} ATOM_FEDERATED_COMPUTE_TRAINING_EVENT_REPORTED=771 ATOM_FEDERATED_COMPUTE_TRAINING_EVENT_REPORTED value
	         * @property {number} ATOM_EXAMPLE_ITERATOR_NEXT_LATENCY_REPORTED=838 ATOM_EXAMPLE_ITERATOR_NEXT_LATENCY_REPORTED value
	         * @property {number} ATOM_FULL_SCREEN_INTENT_LAUNCHED=631 ATOM_FULL_SCREEN_INTENT_LAUNCHED value
	         * @property {number} ATOM_BAL_ALLOWED=632 ATOM_BAL_ALLOWED value
	         * @property {number} ATOM_IN_TASK_ACTIVITY_STARTED=685 ATOM_IN_TASK_ACTIVITY_STARTED value
	         * @property {number} ATOM_CACHED_APPS_HIGH_WATERMARK=10189 ATOM_CACHED_APPS_HIGH_WATERMARK value
	         * @property {number} ATOM_STYLUS_PREDICTION_METRICS_REPORTED=718 ATOM_STYLUS_PREDICTION_METRICS_REPORTED value
	         * @property {number} ATOM_USER_RISK_EVENT_REPORTED=725 ATOM_USER_RISK_EVENT_REPORTED value
	         * @property {number} ATOM_MEDIA_PROJECTION_STATE_CHANGED=729 ATOM_MEDIA_PROJECTION_STATE_CHANGED value
	         * @property {number} ATOM_MEDIA_PROJECTION_TARGET_CHANGED=730 ATOM_MEDIA_PROJECTION_TARGET_CHANGED value
	         * @property {number} ATOM_EXCESSIVE_BINDER_PROXY_COUNT_REPORTED=853 ATOM_EXCESSIVE_BINDER_PROXY_COUNT_REPORTED value
	         * @property {number} ATOM_PROXY_BYTES_TRANSFER_BY_FG_BG=10200 ATOM_PROXY_BYTES_TRANSFER_BY_FG_BG value
	         * @property {number} ATOM_MOBILE_BYTES_TRANSFER_BY_PROC_STATE=10204 ATOM_MOBILE_BYTES_TRANSFER_BY_PROC_STATE value
	         * @property {number} ATOM_BIOMETRIC_FRR_NOTIFICATION=817 ATOM_BIOMETRIC_FRR_NOTIFICATION value
	         * @property {number} ATOM_SENSITIVE_CONTENT_MEDIA_PROJECTION_SESSION=830 ATOM_SENSITIVE_CONTENT_MEDIA_PROJECTION_SESSION value
	         * @property {number} ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_SESSION=831 ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_SESSION value
	         * @property {number} ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_APPLIED=832 ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_APPLIED value
	         * @property {number} ATOM_SENSITIVE_NOTIFICATION_REDACTION=833 ATOM_SENSITIVE_NOTIFICATION_REDACTION value
	         * @property {number} ATOM_SENSITIVE_CONTENT_APP_PROTECTION=835 ATOM_SENSITIVE_CONTENT_APP_PROTECTION value
	         * @property {number} ATOM_APP_RESTRICTION_STATE_CHANGED=866 ATOM_APP_RESTRICTION_STATE_CHANGED value
	         * @property {number} ATOM_APPLICATION_GRAMMATICAL_INFLECTION_CHANGED=584 ATOM_APPLICATION_GRAMMATICAL_INFLECTION_CHANGED value
	         * @property {number} ATOM_SYSTEM_GRAMMATICAL_INFLECTION_CHANGED=816 ATOM_SYSTEM_GRAMMATICAL_INFLECTION_CHANGED value
	         * @property {number} ATOM_HDMI_EARC_STATUS_REPORTED=701 ATOM_HDMI_EARC_STATUS_REPORTED value
	         * @property {number} ATOM_HDMI_SOUNDBAR_MODE_STATUS_REPORTED=724 ATOM_HDMI_SOUNDBAR_MODE_STATUS_REPORTED value
	         * @property {number} ATOM_HEALTH_CONNECT_API_CALLED=616 ATOM_HEALTH_CONNECT_API_CALLED value
	         * @property {number} ATOM_HEALTH_CONNECT_USAGE_STATS=617 ATOM_HEALTH_CONNECT_USAGE_STATS value
	         * @property {number} ATOM_HEALTH_CONNECT_STORAGE_STATS=618 ATOM_HEALTH_CONNECT_STORAGE_STATS value
	         * @property {number} ATOM_HEALTH_CONNECT_API_INVOKED=643 ATOM_HEALTH_CONNECT_API_INVOKED value
	         * @property {number} ATOM_EXERCISE_ROUTE_API_CALLED=654 ATOM_EXERCISE_ROUTE_API_CALLED value
	         * @property {number} ATOM_HEALTH_CONNECT_UI_IMPRESSION=623 ATOM_HEALTH_CONNECT_UI_IMPRESSION value
	         * @property {number} ATOM_HEALTH_CONNECT_UI_INTERACTION=624 ATOM_HEALTH_CONNECT_UI_INTERACTION value
	         * @property {number} ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED=625 ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED value
	         * @property {number} ATOM_HOTWORD_EGRESS_SIZE_ATOM_REPORTED=761 ATOM_HOTWORD_EGRESS_SIZE_ATOM_REPORTED value
	         * @property {number} ATOM_IKE_SESSION_TERMINATED=678 ATOM_IKE_SESSION_TERMINATED value
	         * @property {number} ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED=760 ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED value
	         * @property {number} ATOM_NEGOTIATED_SECURITY_ASSOCIATION=821 ATOM_NEGOTIATED_SECURITY_ASSOCIATION value
	         * @property {number} ATOM_KEYBOARD_CONFIGURED=682 ATOM_KEYBOARD_CONFIGURED value
	         * @property {number} ATOM_KEYBOARD_SYSTEMS_EVENT_REPORTED=683 ATOM_KEYBOARD_SYSTEMS_EVENT_REPORTED value
	         * @property {number} ATOM_INPUTDEVICE_USAGE_REPORTED=686 ATOM_INPUTDEVICE_USAGE_REPORTED value
	         * @property {number} ATOM_TOUCHPAD_USAGE=10191 ATOM_TOUCHPAD_USAGE value
	         * @property {number} ATOM_KERNEL_OOM_KILL_OCCURRED=754 ATOM_KERNEL_OOM_KILL_OCCURRED value
	         * @property {number} ATOM_EMERGENCY_STATE_CHANGED=633 ATOM_EMERGENCY_STATE_CHANGED value
	         * @property {number} ATOM_CHRE_SIGNIFICANT_MOTION_STATE_CHANGED=868 ATOM_CHRE_SIGNIFICANT_MOTION_STATE_CHANGED value
	         * @property {number} ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED=600 ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED value
	         * @property {number} ATOM_MEDIA_CODEC_STARTED=641 ATOM_MEDIA_CODEC_STARTED value
	         * @property {number} ATOM_MEDIA_CODEC_STOPPED=642 ATOM_MEDIA_CODEC_STOPPED value
	         * @property {number} ATOM_MEDIA_CODEC_RENDERED=684 ATOM_MEDIA_CODEC_RENDERED value
	         * @property {number} ATOM_MEDIA_EDITING_ENDED_REPORTED=798 ATOM_MEDIA_EDITING_ENDED_REPORTED value
	         * @property {number} ATOM_MTE_STATE=10181 ATOM_MTE_STATE value
	         * @property {number} ATOM_NFC_OBSERVE_MODE_STATE_CHANGED=855 ATOM_NFC_OBSERVE_MODE_STATE_CHANGED value
	         * @property {number} ATOM_NFC_FIELD_CHANGED=856 ATOM_NFC_FIELD_CHANGED value
	         * @property {number} ATOM_NFC_POLLING_LOOP_NOTIFICATION_REPORTED=857 ATOM_NFC_POLLING_LOOP_NOTIFICATION_REPORTED value
	         * @property {number} ATOM_NFC_PROPRIETARY_CAPABILITIES_REPORTED=858 ATOM_NFC_PROPRIETARY_CAPABILITIES_REPORTED value
	         * @property {number} ATOM_ONDEVICEPERSONALIZATION_API_CALLED=711 ATOM_ONDEVICEPERSONALIZATION_API_CALLED value
	         * @property {number} ATOM_COMPONENT_STATE_CHANGED_REPORTED=863 ATOM_COMPONENT_STATE_CHANGED_REPORTED value
	         * @property {number} ATOM_PDF_LOAD_REPORTED=859 ATOM_PDF_LOAD_REPORTED value
	         * @property {number} ATOM_PDF_API_USAGE_REPORTED=860 ATOM_PDF_API_USAGE_REPORTED value
	         * @property {number} ATOM_PDF_SEARCH_REPORTED=861 ATOM_PDF_SEARCH_REPORTED value
	         * @property {number} ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED=645 ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED value
	         * @property {number} ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED=646 ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED value
	         * @property {number} ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION=647 ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION value
	         * @property {number} ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED=648 ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED value
	         * @property {number} ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED=649 ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED value
	         * @property {number} ATOM_ENHANCED_CONFIRMATION_DIALOG_RESULT_REPORTED=827 ATOM_ENHANCED_CONFIRMATION_DIALOG_RESULT_REPORTED value
	         * @property {number} ATOM_ENHANCED_CONFIRMATION_RESTRICTION_CLEARED=828 ATOM_ENHANCED_CONFIRMATION_RESTRICTION_CLEARED value
	         * @property {number} ATOM_PHOTOPICKER_SESSION_INFO_REPORTED=886 ATOM_PHOTOPICKER_SESSION_INFO_REPORTED value
	         * @property {number} ATOM_PHOTOPICKER_API_INFO_REPORTED=887 ATOM_PHOTOPICKER_API_INFO_REPORTED value
	         * @property {number} ATOM_PHOTOPICKER_UI_EVENT_LOGGED=888 ATOM_PHOTOPICKER_UI_EVENT_LOGGED value
	         * @property {number} ATOM_PHOTOPICKER_MEDIA_ITEM_STATUS_REPORTED=889 ATOM_PHOTOPICKER_MEDIA_ITEM_STATUS_REPORTED value
	         * @property {number} ATOM_PHOTOPICKER_PREVIEW_INFO_LOGGED=890 ATOM_PHOTOPICKER_PREVIEW_INFO_LOGGED value
	         * @property {number} ATOM_PHOTOPICKER_MENU_INTERACTION_LOGGED=891 ATOM_PHOTOPICKER_MENU_INTERACTION_LOGGED value
	         * @property {number} ATOM_PHOTOPICKER_BANNER_INTERACTION_LOGGED=892 ATOM_PHOTOPICKER_BANNER_INTERACTION_LOGGED value
	         * @property {number} ATOM_PHOTOPICKER_MEDIA_LIBRARY_INFO_LOGGED=893 ATOM_PHOTOPICKER_MEDIA_LIBRARY_INFO_LOGGED value
	         * @property {number} ATOM_PHOTOPICKER_PAGE_INFO_LOGGED=894 ATOM_PHOTOPICKER_PAGE_INFO_LOGGED value
	         * @property {number} ATOM_PHOTOPICKER_MEDIA_GRID_SYNC_INFO_REPORTED=895 ATOM_PHOTOPICKER_MEDIA_GRID_SYNC_INFO_REPORTED value
	         * @property {number} ATOM_PHOTOPICKER_ALBUM_SYNC_INFO_REPORTED=896 ATOM_PHOTOPICKER_ALBUM_SYNC_INFO_REPORTED value
	         * @property {number} ATOM_PHOTOPICKER_SEARCH_INFO_REPORTED=897 ATOM_PHOTOPICKER_SEARCH_INFO_REPORTED value
	         * @property {number} ATOM_SEARCH_DATA_EXTRACTION_DETAILS_REPORTED=898 ATOM_SEARCH_DATA_EXTRACTION_DETAILS_REPORTED value
	         * @property {number} ATOM_EMBEDDED_PHOTOPICKER_INFO_REPORTED=899 ATOM_EMBEDDED_PHOTOPICKER_INFO_REPORTED value
	         * @property {number} ATOM_ATOM_9999=9999 ATOM_ATOM_9999 value
	         * @property {number} ATOM_ATOM_99999=99999 ATOM_ATOM_99999 value
	         * @property {number} ATOM_SCREEN_OFF_REPORTED=776 ATOM_SCREEN_OFF_REPORTED value
	         * @property {number} ATOM_SCREEN_TIMEOUT_OVERRIDE_REPORTED=836 ATOM_SCREEN_TIMEOUT_OVERRIDE_REPORTED value
	         * @property {number} ATOM_SCREEN_INTERACTIVE_SESSION_REPORTED=837 ATOM_SCREEN_INTERACTIVE_SESSION_REPORTED value
	         * @property {number} ATOM_SCREEN_DIM_REPORTED=867 ATOM_SCREEN_DIM_REPORTED value
	         * @property {number} ATOM_MEDIA_PROVIDER_DATABASE_ROLLBACK_REPORTED=784 ATOM_MEDIA_PROVIDER_DATABASE_ROLLBACK_REPORTED value
	         * @property {number} ATOM_BACKUP_SETUP_STATUS_REPORTED=785 ATOM_BACKUP_SETUP_STATUS_REPORTED value
	         * @property {number} ATOM_RKPD_POOL_STATS=664 ATOM_RKPD_POOL_STATS value
	         * @property {number} ATOM_RKPD_CLIENT_OPERATION=665 ATOM_RKPD_CLIENT_OPERATION value
	         * @property {number} ATOM_SANDBOX_API_CALLED=488 ATOM_SANDBOX_API_CALLED value
	         * @property {number} ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED=735 ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED value
	         * @property {number} ATOM_SDK_SANDBOX_RESTRICTED_ACCESS_IN_SESSION=796 ATOM_SDK_SANDBOX_RESTRICTED_ACCESS_IN_SESSION value
	         * @property {number} ATOM_SANDBOX_SDK_STORAGE=10159 ATOM_SANDBOX_SDK_STORAGE value
	         * @property {number} ATOM_SELINUX_AUDIT_LOG=799 ATOM_SELINUX_AUDIT_LOG value
	         * @property {number} ATOM_SETTINGS_SPA_REPORTED=622 ATOM_SETTINGS_SPA_REPORTED value
	         * @property {number} ATOM_TEST_EXTENSION_ATOM_REPORTED=660 ATOM_TEST_EXTENSION_ATOM_REPORTED value
	         * @property {number} ATOM_TEST_RESTRICTED_ATOM_REPORTED=672 ATOM_TEST_RESTRICTED_ATOM_REPORTED value
	         * @property {number} ATOM_STATS_SOCKET_LOSS_REPORTED=752 ATOM_STATS_SOCKET_LOSS_REPORTED value
	         * @property {number} ATOM_LOCKSCREEN_SHORTCUT_SELECTED=611 ATOM_LOCKSCREEN_SHORTCUT_SELECTED value
	         * @property {number} ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED=612 ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED value
	         * @property {number} ATOM_LAUNCHER_IMPRESSION_EVENT_V2=716 ATOM_LAUNCHER_IMPRESSION_EVENT_V2 value
	         * @property {number} ATOM_DISPLAY_SWITCH_LATENCY_TRACKED=753 ATOM_DISPLAY_SWITCH_LATENCY_TRACKED value
	         * @property {number} ATOM_NOTIFICATION_LISTENER_SERVICE=829 ATOM_NOTIFICATION_LISTENER_SERVICE value
	         * @property {number} ATOM_NAV_HANDLE_TOUCH_POINTS=869 ATOM_NAV_HANDLE_TOUCH_POINTS value
	         * @property {number} ATOM_EMERGENCY_NUMBER_DIALED=637 ATOM_EMERGENCY_NUMBER_DIALED value
	         * @property {number} ATOM_CELLULAR_RADIO_POWER_STATE_CHANGED=713 ATOM_CELLULAR_RADIO_POWER_STATE_CHANGED value
	         * @property {number} ATOM_EMERGENCY_NUMBERS_INFO=10180 ATOM_EMERGENCY_NUMBERS_INFO value
	         * @property {number} ATOM_DATA_NETWORK_VALIDATION=10207 ATOM_DATA_NETWORK_VALIDATION value
	         * @property {number} ATOM_DATA_RAT_STATE_CHANGED=854 ATOM_DATA_RAT_STATE_CHANGED value
	         * @property {number} ATOM_CONNECTED_CHANNEL_CHANGED=882 ATOM_CONNECTED_CHANNEL_CHANGED value
	         * @property {number} ATOM_QUALIFIED_RAT_LIST_CHANGED=634 ATOM_QUALIFIED_RAT_LIST_CHANGED value
	         * @property {number} ATOM_QNS_IMS_CALL_DROP_STATS=635 ATOM_QNS_IMS_CALL_DROP_STATS value
	         * @property {number} ATOM_QNS_FALLBACK_RESTRICTION_CHANGED=636 ATOM_QNS_FALLBACK_RESTRICTION_CHANGED value
	         * @property {number} ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO=10177 ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO value
	         * @property {number} ATOM_QNS_HANDOVER_TIME_MILLIS=10178 ATOM_QNS_HANDOVER_TIME_MILLIS value
	         * @property {number} ATOM_QNS_HANDOVER_PINGPONG=10179 ATOM_QNS_HANDOVER_PINGPONG value
	         * @property {number} ATOM_SATELLITE_CONTROLLER=10182 ATOM_SATELLITE_CONTROLLER value
	         * @property {number} ATOM_SATELLITE_SESSION=10183 ATOM_SATELLITE_SESSION value
	         * @property {number} ATOM_SATELLITE_INCOMING_DATAGRAM=10184 ATOM_SATELLITE_INCOMING_DATAGRAM value
	         * @property {number} ATOM_SATELLITE_OUTGOING_DATAGRAM=10185 ATOM_SATELLITE_OUTGOING_DATAGRAM value
	         * @property {number} ATOM_SATELLITE_PROVISION=10186 ATOM_SATELLITE_PROVISION value
	         * @property {number} ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER=10187 ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER value
	         * @property {number} ATOM_CARRIER_ROAMING_SATELLITE_SESSION=10211 ATOM_CARRIER_ROAMING_SATELLITE_SESSION value
	         * @property {number} ATOM_CARRIER_ROAMING_SATELLITE_CONTROLLER_STATS=10212 ATOM_CARRIER_ROAMING_SATELLITE_CONTROLLER_STATS value
	         * @property {number} ATOM_CONTROLLER_STATS_PER_PACKAGE=10213 ATOM_CONTROLLER_STATS_PER_PACKAGE value
	         * @property {number} ATOM_SATELLITE_ENTITLEMENT=10214 ATOM_SATELLITE_ENTITLEMENT value
	         * @property {number} ATOM_SATELLITE_CONFIG_UPDATER=10215 ATOM_SATELLITE_CONFIG_UPDATER value
	         * @property {number} ATOM_SATELLITE_ACCESS_CONTROLLER=10219 ATOM_SATELLITE_ACCESS_CONTROLLER value
	         * @property {number} ATOM_CELLULAR_IDENTIFIER_DISCLOSED=800 ATOM_CELLULAR_IDENTIFIER_DISCLOSED value
	         * @property {number} ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED=738 ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED value
	         * @property {number} ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED=739 ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED value
	         * @property {number} ATOM_THREADNETWORK_DEVICE_INFO_REPORTED=740 ATOM_THREADNETWORK_DEVICE_INFO_REPORTED value
	         * @property {number} ATOM_BOOT_INTEGRITY_INFO_REPORTED=775 ATOM_BOOT_INTEGRITY_INFO_REPORTED value
	         * @property {number} ATOM_TV_LOW_POWER_STANDBY_POLICY=679 ATOM_TV_LOW_POWER_STANDBY_POLICY value
	         * @property {number} ATOM_EXTERNAL_TV_INPUT_EVENT=717 ATOM_EXTERNAL_TV_INPUT_EVENT value
	         * @property {number} ATOM_UWB_ACTIVITY_INFO=10188 ATOM_UWB_ACTIVITY_INFO value
	         * @property {number} ATOM_MEDIATOR_UPDATED=721 ATOM_MEDIATOR_UPDATED value
	         * @property {number} ATOM_SYSPROXY_BLUETOOTH_BYTES_TRANSFER=10196 ATOM_SYSPROXY_BLUETOOTH_BYTES_TRANSFER value
	         * @property {number} ATOM_SYSPROXY_CONNECTION_UPDATED=786 ATOM_SYSPROXY_CONNECTION_UPDATED value
	         * @property {number} ATOM_MEDIA_ACTION_REPORTED=608 ATOM_MEDIA_ACTION_REPORTED value
	         * @property {number} ATOM_MEDIA_CONTROLS_LAUNCHED=609 ATOM_MEDIA_CONTROLS_LAUNCHED value
	         * @property {number} ATOM_MEDIA_SESSION_STATE_CHANGED=677 ATOM_MEDIA_SESSION_STATE_CHANGED value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_API_LATENCY=757 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_API_LATENCY value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_SASS_DEVICE_UNAVAILABLE=758 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_SASS_DEVICE_UNAVAILABLE value
	         * @property {number} ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FASTPAIR_API_TIMEOUT=759 ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FASTPAIR_API_TIMEOUT value
	         * @property {number} ATOM_WEAR_MODE_STATE_CHANGED=715 ATOM_WEAR_MODE_STATE_CHANGED value
	         * @property {number} ATOM_RENDERER_INITIALIZED=736 ATOM_RENDERER_INITIALIZED value
	         * @property {number} ATOM_SCHEMA_VERSION_RECEIVED=737 ATOM_SCHEMA_VERSION_RECEIVED value
	         * @property {number} ATOM_LAYOUT_INSPECTED=741 ATOM_LAYOUT_INSPECTED value
	         * @property {number} ATOM_LAYOUT_EXPRESSION_INSPECTED=742 ATOM_LAYOUT_EXPRESSION_INSPECTED value
	         * @property {number} ATOM_LAYOUT_ANIMATIONS_INSPECTED=743 ATOM_LAYOUT_ANIMATIONS_INSPECTED value
	         * @property {number} ATOM_MATERIAL_COMPONENTS_INSPECTED=744 ATOM_MATERIAL_COMPONENTS_INSPECTED value
	         * @property {number} ATOM_TILE_REQUESTED=745 ATOM_TILE_REQUESTED value
	         * @property {number} ATOM_STATE_RESPONSE_RECEIVED=746 ATOM_STATE_RESPONSE_RECEIVED value
	         * @property {number} ATOM_TILE_RESPONSE_RECEIVED=747 ATOM_TILE_RESPONSE_RECEIVED value
	         * @property {number} ATOM_INFLATION_FINISHED=748 ATOM_INFLATION_FINISHED value
	         * @property {number} ATOM_INFLATION_FAILED=749 ATOM_INFLATION_FAILED value
	         * @property {number} ATOM_IGNORED_INFLATION_FAILURES_REPORTED=750 ATOM_IGNORED_INFLATION_FAILURES_REPORTED value
	         * @property {number} ATOM_DRAWABLE_RENDERED=751 ATOM_DRAWABLE_RENDERED value
	         * @property {number} ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED=619 ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED value
	         * @property {number} ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED=620 ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED value
	         * @property {number} ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED=621 ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED value
	         * @property {number} ATOM_WS_WEAR_TIME_SESSION=610 ATOM_WS_WEAR_TIME_SESSION value
	         * @property {number} ATOM_WS_INCOMING_CALL_ACTION_REPORTED=626 ATOM_WS_INCOMING_CALL_ACTION_REPORTED value
	         * @property {number} ATOM_WS_CALL_DISCONNECTION_REPORTED=627 ATOM_WS_CALL_DISCONNECTION_REPORTED value
	         * @property {number} ATOM_WS_CALL_DURATION_REPORTED=628 ATOM_WS_CALL_DURATION_REPORTED value
	         * @property {number} ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED=629 ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED value
	         * @property {number} ATOM_WS_CALL_INTERACTION_REPORTED=630 ATOM_WS_CALL_INTERACTION_REPORTED value
	         * @property {number} ATOM_WS_ON_BODY_STATE_CHANGED=787 ATOM_WS_ON_BODY_STATE_CHANGED value
	         * @property {number} ATOM_WS_WATCH_FACE_RESTRICTED_COMPLICATIONS_IMPACTED=802 ATOM_WS_WATCH_FACE_RESTRICTED_COMPLICATIONS_IMPACTED value
	         * @property {number} ATOM_WS_WATCH_FACE_DEFAULT_RESTRICTED_COMPLICATIONS_REMOVED=803 ATOM_WS_WATCH_FACE_DEFAULT_RESTRICTED_COMPLICATIONS_REMOVED value
	         * @property {number} ATOM_WS_COMPLICATIONS_IMPACTED_NOTIFICATION_EVENT_REPORTED=804 ATOM_WS_COMPLICATIONS_IMPACTED_NOTIFICATION_EVENT_REPORTED value
	         * @property {number} ATOM_WS_STANDALONE_MODE_SNAPSHOT=10197 ATOM_WS_STANDALONE_MODE_SNAPSHOT value
	         * @property {number} ATOM_WS_FAVORITE_WATCH_FACE_SNAPSHOT=10206 ATOM_WS_FAVORITE_WATCH_FACE_SNAPSHOT value
	         * @property {number} ATOM_WEAR_POWER_MENU_OPENED=731 ATOM_WEAR_POWER_MENU_OPENED value
	         * @property {number} ATOM_WEAR_ASSISTANT_OPENED=755 ATOM_WEAR_ASSISTANT_OPENED value
	         * @property {number} ATOM_WIFI_AWARE_NDP_REPORTED=638 ATOM_WIFI_AWARE_NDP_REPORTED value
	         * @property {number} ATOM_WIFI_AWARE_ATTACH_REPORTED=639 ATOM_WIFI_AWARE_ATTACH_REPORTED value
	         * @property {number} ATOM_WIFI_SELF_RECOVERY_TRIGGERED=661 ATOM_WIFI_SELF_RECOVERY_TRIGGERED value
	         * @property {number} ATOM_SOFT_AP_STARTED=680 ATOM_SOFT_AP_STARTED value
	         * @property {number} ATOM_SOFT_AP_STOPPED=681 ATOM_SOFT_AP_STOPPED value
	         * @property {number} ATOM_WIFI_LOCK_RELEASED=687 ATOM_WIFI_LOCK_RELEASED value
	         * @property {number} ATOM_WIFI_LOCK_DEACTIVATED=688 ATOM_WIFI_LOCK_DEACTIVATED value
	         * @property {number} ATOM_WIFI_CONFIG_SAVED=689 ATOM_WIFI_CONFIG_SAVED value
	         * @property {number} ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED=690 ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED value
	         * @property {number} ATOM_WIFI_AWARE_HAL_API_CALLED=691 ATOM_WIFI_AWARE_HAL_API_CALLED value
	         * @property {number} ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED=692 ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED value
	         * @property {number} ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED=693 ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED value
	         * @property {number} ATOM_WIFI_THREAD_TASK_EXECUTED=694 ATOM_WIFI_THREAD_TASK_EXECUTED value
	         * @property {number} ATOM_WIFI_STATE_CHANGED=700 ATOM_WIFI_STATE_CHANGED value
	         * @property {number} ATOM_PNO_SCAN_STARTED=719 ATOM_PNO_SCAN_STARTED value
	         * @property {number} ATOM_PNO_SCAN_STOPPED=720 ATOM_PNO_SCAN_STOPPED value
	         * @property {number} ATOM_WIFI_IS_UNUSABLE_REPORTED=722 ATOM_WIFI_IS_UNUSABLE_REPORTED value
	         * @property {number} ATOM_WIFI_AP_CAPABILITIES_REPORTED=723 ATOM_WIFI_AP_CAPABILITIES_REPORTED value
	         * @property {number} ATOM_SOFT_AP_STATE_CHANGED=805 ATOM_SOFT_AP_STATE_CHANGED value
	         * @property {number} ATOM_SCORER_PREDICTION_RESULT_REPORTED=884 ATOM_SCORER_PREDICTION_RESULT_REPORTED value
	         * @property {number} ATOM_WIFI_AWARE_CAPABILITIES=10190 ATOM_WIFI_AWARE_CAPABILITIES value
	         * @property {number} ATOM_WIFI_MODULE_INFO=10193 ATOM_WIFI_MODULE_INFO value
	         * @property {number} ATOM_WIFI_SETTING_INFO=10194 ATOM_WIFI_SETTING_INFO value
	         * @property {number} ATOM_WIFI_COMPLEX_SETTING_INFO=10195 ATOM_WIFI_COMPLEX_SETTING_INFO value
	         * @property {number} ATOM_WIFI_CONFIGURED_NETWORK_INFO=10198 ATOM_WIFI_CONFIGURED_NETWORK_INFO value
	         */
	        protos.AtomId = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "ATOM_UNSPECIFIED"] = 0;
	            values[valuesById[2] = "ATOM_BLE_SCAN_STATE_CHANGED"] = 2;
	            values[valuesById[3] = "ATOM_PROCESS_STATE_CHANGED"] = 3;
	            values[valuesById[4] = "ATOM_BLE_SCAN_RESULT_RECEIVED"] = 4;
	            values[valuesById[5] = "ATOM_SENSOR_STATE_CHANGED"] = 5;
	            values[valuesById[6] = "ATOM_GPS_SCAN_STATE_CHANGED"] = 6;
	            values[valuesById[7] = "ATOM_SYNC_STATE_CHANGED"] = 7;
	            values[valuesById[8] = "ATOM_SCHEDULED_JOB_STATE_CHANGED"] = 8;
	            values[valuesById[9] = "ATOM_SCREEN_BRIGHTNESS_CHANGED"] = 9;
	            values[valuesById[10] = "ATOM_WAKELOCK_STATE_CHANGED"] = 10;
	            values[valuesById[11] = "ATOM_LONG_PARTIAL_WAKELOCK_STATE_CHANGED"] = 11;
	            values[valuesById[12] = "ATOM_MOBILE_RADIO_POWER_STATE_CHANGED"] = 12;
	            values[valuesById[13] = "ATOM_WIFI_RADIO_POWER_STATE_CHANGED"] = 13;
	            values[valuesById[14] = "ATOM_ACTIVITY_MANAGER_SLEEP_STATE_CHANGED"] = 14;
	            values[valuesById[15] = "ATOM_MEMORY_FACTOR_STATE_CHANGED"] = 15;
	            values[valuesById[16] = "ATOM_EXCESSIVE_CPU_USAGE_REPORTED"] = 16;
	            values[valuesById[17] = "ATOM_CACHED_KILL_REPORTED"] = 17;
	            values[valuesById[18] = "ATOM_PROCESS_MEMORY_STAT_REPORTED"] = 18;
	            values[valuesById[19] = "ATOM_LAUNCHER_EVENT"] = 19;
	            values[valuesById[20] = "ATOM_BATTERY_SAVER_MODE_STATE_CHANGED"] = 20;
	            values[valuesById[21] = "ATOM_DEVICE_IDLE_MODE_STATE_CHANGED"] = 21;
	            values[valuesById[22] = "ATOM_DEVICE_IDLING_MODE_STATE_CHANGED"] = 22;
	            values[valuesById[23] = "ATOM_AUDIO_STATE_CHANGED"] = 23;
	            values[valuesById[24] = "ATOM_MEDIA_CODEC_STATE_CHANGED"] = 24;
	            values[valuesById[25] = "ATOM_CAMERA_STATE_CHANGED"] = 25;
	            values[valuesById[26] = "ATOM_FLASHLIGHT_STATE_CHANGED"] = 26;
	            values[valuesById[27] = "ATOM_UID_PROCESS_STATE_CHANGED"] = 27;
	            values[valuesById[28] = "ATOM_PROCESS_LIFE_CYCLE_STATE_CHANGED"] = 28;
	            values[valuesById[29] = "ATOM_SCREEN_STATE_CHANGED"] = 29;
	            values[valuesById[30] = "ATOM_BATTERY_LEVEL_CHANGED"] = 30;
	            values[valuesById[31] = "ATOM_CHARGING_STATE_CHANGED"] = 31;
	            values[valuesById[32] = "ATOM_PLUGGED_STATE_CHANGED"] = 32;
	            values[valuesById[33] = "ATOM_INTERACTIVE_STATE_CHANGED"] = 33;
	            values[valuesById[34] = "ATOM_TOUCH_EVENT_REPORTED"] = 34;
	            values[valuesById[35] = "ATOM_WAKEUP_ALARM_OCCURRED"] = 35;
	            values[valuesById[36] = "ATOM_KERNEL_WAKEUP_REPORTED"] = 36;
	            values[valuesById[37] = "ATOM_WIFI_LOCK_STATE_CHANGED"] = 37;
	            values[valuesById[38] = "ATOM_WIFI_SIGNAL_STRENGTH_CHANGED"] = 38;
	            values[valuesById[39] = "ATOM_WIFI_SCAN_STATE_CHANGED"] = 39;
	            values[valuesById[40] = "ATOM_PHONE_SIGNAL_STRENGTH_CHANGED"] = 40;
	            values[valuesById[41] = "ATOM_SETTING_CHANGED"] = 41;
	            values[valuesById[42] = "ATOM_ACTIVITY_FOREGROUND_STATE_CHANGED"] = 42;
	            values[valuesById[43] = "ATOM_ISOLATED_UID_CHANGED"] = 43;
	            values[valuesById[44] = "ATOM_PACKET_WAKEUP_OCCURRED"] = 44;
	            values[valuesById[45] = "ATOM_WALL_CLOCK_TIME_SHIFTED"] = 45;
	            values[valuesById[46] = "ATOM_ANOMALY_DETECTED"] = 46;
	            values[valuesById[47] = "ATOM_APP_BREADCRUMB_REPORTED"] = 47;
	            values[valuesById[48] = "ATOM_APP_START_OCCURRED"] = 48;
	            values[valuesById[49] = "ATOM_APP_START_CANCELED"] = 49;
	            values[valuesById[50] = "ATOM_APP_START_FULLY_DRAWN"] = 50;
	            values[valuesById[51] = "ATOM_LMK_KILL_OCCURRED"] = 51;
	            values[valuesById[52] = "ATOM_PICTURE_IN_PICTURE_STATE_CHANGED"] = 52;
	            values[valuesById[53] = "ATOM_WIFI_MULTICAST_LOCK_STATE_CHANGED"] = 53;
	            values[valuesById[55] = "ATOM_APP_START_MEMORY_STATE_CAPTURED"] = 55;
	            values[valuesById[56] = "ATOM_SHUTDOWN_SEQUENCE_REPORTED"] = 56;
	            values[valuesById[57] = "ATOM_BOOT_SEQUENCE_REPORTED"] = 57;
	            values[valuesById[59] = "ATOM_OVERLAY_STATE_CHANGED"] = 59;
	            values[valuesById[60] = "ATOM_FOREGROUND_SERVICE_STATE_CHANGED"] = 60;
	            values[valuesById[61] = "ATOM_CALL_STATE_CHANGED"] = 61;
	            values[valuesById[62] = "ATOM_KEYGUARD_STATE_CHANGED"] = 62;
	            values[valuesById[63] = "ATOM_KEYGUARD_BOUNCER_STATE_CHANGED"] = 63;
	            values[valuesById[64] = "ATOM_KEYGUARD_BOUNCER_PASSWORD_ENTERED"] = 64;
	            values[valuesById[65] = "ATOM_APP_DIED"] = 65;
	            values[valuesById[66] = "ATOM_RESOURCE_CONFIGURATION_CHANGED"] = 66;
	            values[valuesById[67] = "ATOM_BLUETOOTH_ENABLED_STATE_CHANGED"] = 67;
	            values[valuesById[68] = "ATOM_BLUETOOTH_CONNECTION_STATE_CHANGED"] = 68;
	            values[valuesById[69] = "ATOM_GPS_SIGNAL_QUALITY_CHANGED"] = 69;
	            values[valuesById[70] = "ATOM_USB_CONNECTOR_STATE_CHANGED"] = 70;
	            values[valuesById[71] = "ATOM_SPEAKER_IMPEDANCE_REPORTED"] = 71;
	            values[valuesById[72] = "ATOM_HARDWARE_FAILED"] = 72;
	            values[valuesById[73] = "ATOM_PHYSICAL_DROP_DETECTED"] = 73;
	            values[valuesById[74] = "ATOM_CHARGE_CYCLES_REPORTED"] = 74;
	            values[valuesById[75] = "ATOM_MOBILE_CONNECTION_STATE_CHANGED"] = 75;
	            values[valuesById[76] = "ATOM_MOBILE_RADIO_TECHNOLOGY_CHANGED"] = 76;
	            values[valuesById[77] = "ATOM_USB_DEVICE_ATTACHED"] = 77;
	            values[valuesById[78] = "ATOM_APP_CRASH_OCCURRED"] = 78;
	            values[valuesById[79] = "ATOM_ANR_OCCURRED"] = 79;
	            values[valuesById[80] = "ATOM_WTF_OCCURRED"] = 80;
	            values[valuesById[81] = "ATOM_LOW_MEM_REPORTED"] = 81;
	            values[valuesById[82] = "ATOM_GENERIC_ATOM"] = 82;
	            values[valuesById[84] = "ATOM_VIBRATOR_STATE_CHANGED"] = 84;
	            values[valuesById[85] = "ATOM_DEFERRED_JOB_STATS_REPORTED"] = 85;
	            values[valuesById[86] = "ATOM_THERMAL_THROTTLING"] = 86;
	            values[valuesById[87] = "ATOM_BIOMETRIC_ACQUIRED"] = 87;
	            values[valuesById[88] = "ATOM_BIOMETRIC_AUTHENTICATED"] = 88;
	            values[valuesById[89] = "ATOM_BIOMETRIC_ERROR_OCCURRED"] = 89;
	            values[valuesById[90] = "ATOM_UI_EVENT_REPORTED"] = 90;
	            values[valuesById[91] = "ATOM_BATTERY_HEALTH_SNAPSHOT"] = 91;
	            values[valuesById[92] = "ATOM_SLOW_IO"] = 92;
	            values[valuesById[93] = "ATOM_BATTERY_CAUSED_SHUTDOWN"] = 93;
	            values[valuesById[94] = "ATOM_PHONE_SERVICE_STATE_CHANGED"] = 94;
	            values[valuesById[95] = "ATOM_PHONE_STATE_CHANGED"] = 95;
	            values[valuesById[96] = "ATOM_USER_RESTRICTION_CHANGED"] = 96;
	            values[valuesById[97] = "ATOM_SETTINGS_UI_CHANGED"] = 97;
	            values[valuesById[98] = "ATOM_CONNECTIVITY_STATE_CHANGED"] = 98;
	            values[valuesById[99] = "ATOM_SERVICE_STATE_CHANGED"] = 99;
	            values[valuesById[100] = "ATOM_SERVICE_LAUNCH_REPORTED"] = 100;
	            values[valuesById[101] = "ATOM_FLAG_FLIP_UPDATE_OCCURRED"] = 101;
	            values[valuesById[102] = "ATOM_BINARY_PUSH_STATE_CHANGED"] = 102;
	            values[valuesById[103] = "ATOM_DEVICE_POLICY_EVENT"] = 103;
	            values[valuesById[104] = "ATOM_DOCS_UI_FILE_OP_CANCELED"] = 104;
	            values[valuesById[105] = "ATOM_DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED"] = 105;
	            values[valuesById[106] = "ATOM_DOCS_UI_FILE_OP_FAILURE"] = 106;
	            values[valuesById[107] = "ATOM_DOCS_UI_PROVIDER_FILE_OP"] = 107;
	            values[valuesById[108] = "ATOM_DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST"] = 108;
	            values[valuesById[109] = "ATOM_DOCS_UI_LAUNCH_REPORTED"] = 109;
	            values[valuesById[110] = "ATOM_DOCS_UI_ROOT_VISITED"] = 110;
	            values[valuesById[111] = "ATOM_DOCS_UI_STARTUP_MS"] = 111;
	            values[valuesById[112] = "ATOM_DOCS_UI_USER_ACTION_REPORTED"] = 112;
	            values[valuesById[113] = "ATOM_WIFI_ENABLED_STATE_CHANGED"] = 113;
	            values[valuesById[114] = "ATOM_WIFI_RUNNING_STATE_CHANGED"] = 114;
	            values[valuesById[115] = "ATOM_APP_COMPACTED"] = 115;
	            values[valuesById[116] = "ATOM_NETWORK_DNS_EVENT_REPORTED"] = 116;
	            values[valuesById[117] = "ATOM_DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED"] = 117;
	            values[valuesById[118] = "ATOM_DOCS_UI_PICK_RESULT_REPORTED"] = 118;
	            values[valuesById[119] = "ATOM_DOCS_UI_SEARCH_MODE_REPORTED"] = 119;
	            values[valuesById[120] = "ATOM_DOCS_UI_SEARCH_TYPE_REPORTED"] = 120;
	            values[valuesById[121] = "ATOM_DATA_STALL_EVENT"] = 121;
	            values[valuesById[122] = "ATOM_RESCUE_PARTY_RESET_REPORTED"] = 122;
	            values[valuesById[123] = "ATOM_SIGNED_CONFIG_REPORTED"] = 123;
	            values[valuesById[124] = "ATOM_GNSS_NI_EVENT_REPORTED"] = 124;
	            values[valuesById[125] = "ATOM_BLUETOOTH_LINK_LAYER_CONNECTION_EVENT"] = 125;
	            values[valuesById[126] = "ATOM_BLUETOOTH_ACL_CONNECTION_STATE_CHANGED"] = 126;
	            values[valuesById[127] = "ATOM_BLUETOOTH_SCO_CONNECTION_STATE_CHANGED"] = 127;
	            values[valuesById[128] = "ATOM_APP_DOWNGRADED"] = 128;
	            values[valuesById[129] = "ATOM_APP_OPTIMIZED_AFTER_DOWNGRADED"] = 129;
	            values[valuesById[130] = "ATOM_LOW_STORAGE_STATE_CHANGED"] = 130;
	            values[valuesById[131] = "ATOM_GNSS_NFW_NOTIFICATION_REPORTED"] = 131;
	            values[valuesById[132] = "ATOM_GNSS_CONFIGURATION_REPORTED"] = 132;
	            values[valuesById[133] = "ATOM_USB_PORT_OVERHEAT_EVENT_REPORTED"] = 133;
	            values[valuesById[134] = "ATOM_NFC_ERROR_OCCURRED"] = 134;
	            values[valuesById[135] = "ATOM_NFC_STATE_CHANGED"] = 135;
	            values[valuesById[136] = "ATOM_NFC_BEAM_OCCURRED"] = 136;
	            values[valuesById[137] = "ATOM_NFC_CARDEMULATION_OCCURRED"] = 137;
	            values[valuesById[138] = "ATOM_NFC_TAG_OCCURRED"] = 138;
	            values[valuesById[139] = "ATOM_NFC_HCE_TRANSACTION_OCCURRED"] = 139;
	            values[valuesById[140] = "ATOM_SE_STATE_CHANGED"] = 140;
	            values[valuesById[141] = "ATOM_SE_OMAPI_REPORTED"] = 141;
	            values[valuesById[142] = "ATOM_BROADCAST_DISPATCH_LATENCY_REPORTED"] = 142;
	            values[valuesById[143] = "ATOM_ATTENTION_MANAGER_SERVICE_RESULT_REPORTED"] = 143;
	            values[valuesById[144] = "ATOM_ADB_CONNECTION_CHANGED"] = 144;
	            values[valuesById[145] = "ATOM_SPEECH_DSP_STAT_REPORTED"] = 145;
	            values[valuesById[146] = "ATOM_USB_CONTAMINANT_REPORTED"] = 146;
	            values[valuesById[147] = "ATOM_WATCHDOG_ROLLBACK_OCCURRED"] = 147;
	            values[valuesById[148] = "ATOM_BIOMETRIC_SYSTEM_HEALTH_ISSUE_DETECTED"] = 148;
	            values[valuesById[149] = "ATOM_BUBBLE_UI_CHANGED"] = 149;
	            values[valuesById[150] = "ATOM_SCHEDULED_JOB_CONSTRAINT_CHANGED"] = 150;
	            values[valuesById[151] = "ATOM_BLUETOOTH_ACTIVE_DEVICE_CHANGED"] = 151;
	            values[valuesById[152] = "ATOM_BLUETOOTH_A2DP_PLAYBACK_STATE_CHANGED"] = 152;
	            values[valuesById[153] = "ATOM_BLUETOOTH_A2DP_CODEC_CONFIG_CHANGED"] = 153;
	            values[valuesById[154] = "ATOM_BLUETOOTH_A2DP_CODEC_CAPABILITY_CHANGED"] = 154;
	            values[valuesById[155] = "ATOM_BLUETOOTH_A2DP_AUDIO_UNDERRUN_REPORTED"] = 155;
	            values[valuesById[156] = "ATOM_BLUETOOTH_A2DP_AUDIO_OVERRUN_REPORTED"] = 156;
	            values[valuesById[157] = "ATOM_BLUETOOTH_DEVICE_RSSI_REPORTED"] = 157;
	            values[valuesById[158] = "ATOM_BLUETOOTH_DEVICE_FAILED_CONTACT_COUNTER_REPORTED"] = 158;
	            values[valuesById[159] = "ATOM_BLUETOOTH_DEVICE_TX_POWER_LEVEL_REPORTED"] = 159;
	            values[valuesById[160] = "ATOM_BLUETOOTH_HCI_TIMEOUT_REPORTED"] = 160;
	            values[valuesById[161] = "ATOM_BLUETOOTH_QUALITY_REPORT_REPORTED"] = 161;
	            values[valuesById[162] = "ATOM_BLUETOOTH_DEVICE_INFO_REPORTED"] = 162;
	            values[valuesById[163] = "ATOM_BLUETOOTH_REMOTE_VERSION_INFO_REPORTED"] = 163;
	            values[valuesById[164] = "ATOM_BLUETOOTH_SDP_ATTRIBUTE_REPORTED"] = 164;
	            values[valuesById[165] = "ATOM_BLUETOOTH_BOND_STATE_CHANGED"] = 165;
	            values[valuesById[166] = "ATOM_BLUETOOTH_CLASSIC_PAIRING_EVENT_REPORTED"] = 166;
	            values[valuesById[167] = "ATOM_BLUETOOTH_SMP_PAIRING_EVENT_REPORTED"] = 167;
	            values[valuesById[168] = "ATOM_SCREEN_TIMEOUT_EXTENSION_REPORTED"] = 168;
	            values[valuesById[169] = "ATOM_PROCESS_START_TIME"] = 169;
	            values[valuesById[170] = "ATOM_PERMISSION_GRANT_REQUEST_RESULT_REPORTED"] = 170;
	            values[valuesById[171] = "ATOM_BLUETOOTH_SOCKET_CONNECTION_STATE_CHANGED"] = 171;
	            values[valuesById[172] = "ATOM_DEVICE_IDENTIFIER_ACCESS_DENIED"] = 172;
	            values[valuesById[173] = "ATOM_BUBBLE_DEVELOPER_ERROR_REPORTED"] = 173;
	            values[valuesById[174] = "ATOM_ASSIST_GESTURE_STAGE_REPORTED"] = 174;
	            values[valuesById[175] = "ATOM_ASSIST_GESTURE_FEEDBACK_REPORTED"] = 175;
	            values[valuesById[176] = "ATOM_ASSIST_GESTURE_PROGRESS_REPORTED"] = 176;
	            values[valuesById[177] = "ATOM_TOUCH_GESTURE_CLASSIFIED"] = 177;
	            values[valuesById[178] = "ATOM_HIDDEN_API_USED"] = 178;
	            values[valuesById[179] = "ATOM_STYLE_UI_CHANGED"] = 179;
	            values[valuesById[180] = "ATOM_PRIVACY_INDICATORS_INTERACTED"] = 180;
	            values[valuesById[181] = "ATOM_APP_INSTALL_ON_EXTERNAL_STORAGE_REPORTED"] = 181;
	            values[valuesById[182] = "ATOM_NETWORK_STACK_REPORTED"] = 182;
	            values[valuesById[183] = "ATOM_APP_MOVED_STORAGE_REPORTED"] = 183;
	            values[valuesById[184] = "ATOM_BIOMETRIC_ENROLLED"] = 184;
	            values[valuesById[185] = "ATOM_SYSTEM_SERVER_WATCHDOG_OCCURRED"] = 185;
	            values[valuesById[186] = "ATOM_TOMB_STONE_OCCURRED"] = 186;
	            values[valuesById[187] = "ATOM_BLUETOOTH_CLASS_OF_DEVICE_REPORTED"] = 187;
	            values[valuesById[188] = "ATOM_INTELLIGENCE_EVENT_REPORTED"] = 188;
	            values[valuesById[189] = "ATOM_THERMAL_THROTTLING_SEVERITY_STATE_CHANGED"] = 189;
	            values[valuesById[190] = "ATOM_ROLE_REQUEST_RESULT_REPORTED"] = 190;
	            values[valuesById[191] = "ATOM_MEDIAMETRICS_AUDIOPOLICY_REPORTED"] = 191;
	            values[valuesById[192] = "ATOM_MEDIAMETRICS_AUDIORECORD_REPORTED"] = 192;
	            values[valuesById[193] = "ATOM_MEDIAMETRICS_AUDIOTHREAD_REPORTED"] = 193;
	            values[valuesById[194] = "ATOM_MEDIAMETRICS_AUDIOTRACK_REPORTED"] = 194;
	            values[valuesById[195] = "ATOM_MEDIAMETRICS_CODEC_REPORTED"] = 195;
	            values[valuesById[196] = "ATOM_MEDIAMETRICS_DRM_WIDEVINE_REPORTED"] = 196;
	            values[valuesById[197] = "ATOM_MEDIAMETRICS_EXTRACTOR_REPORTED"] = 197;
	            values[valuesById[198] = "ATOM_MEDIAMETRICS_MEDIADRM_REPORTED"] = 198;
	            values[valuesById[199] = "ATOM_MEDIAMETRICS_NUPLAYER_REPORTED"] = 199;
	            values[valuesById[200] = "ATOM_MEDIAMETRICS_RECORDER_REPORTED"] = 200;
	            values[valuesById[201] = "ATOM_MEDIAMETRICS_DRMMANAGER_REPORTED"] = 201;
	            values[valuesById[203] = "ATOM_CAR_POWER_STATE_CHANGED"] = 203;
	            values[valuesById[204] = "ATOM_GARAGE_MODE_INFO"] = 204;
	            values[valuesById[205] = "ATOM_TEST_ATOM_REPORTED"] = 205;
	            values[valuesById[206] = "ATOM_CONTENT_CAPTURE_CALLER_MISMATCH_REPORTED"] = 206;
	            values[valuesById[207] = "ATOM_CONTENT_CAPTURE_SERVICE_EVENTS"] = 207;
	            values[valuesById[208] = "ATOM_CONTENT_CAPTURE_SESSION_EVENTS"] = 208;
	            values[valuesById[209] = "ATOM_CONTENT_CAPTURE_FLUSHED"] = 209;
	            values[valuesById[210] = "ATOM_LOCATION_MANAGER_API_USAGE_REPORTED"] = 210;
	            values[valuesById[211] = "ATOM_REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED"] = 211;
	            values[valuesById[212] = "ATOM_RUNTIME_PERMISSIONS_UPGRADE_RESULT"] = 212;
	            values[valuesById[213] = "ATOM_GRANT_PERMISSIONS_ACTIVITY_BUTTON_ACTIONS"] = 213;
	            values[valuesById[214] = "ATOM_LOCATION_ACCESS_CHECK_NOTIFICATION_ACTION"] = 214;
	            values[valuesById[215] = "ATOM_APP_PERMISSION_FRAGMENT_ACTION_REPORTED"] = 215;
	            values[valuesById[216] = "ATOM_APP_PERMISSION_FRAGMENT_VIEWED"] = 216;
	            values[valuesById[217] = "ATOM_APP_PERMISSIONS_FRAGMENT_VIEWED"] = 217;
	            values[valuesById[218] = "ATOM_PERMISSION_APPS_FRAGMENT_VIEWED"] = 218;
	            values[valuesById[219] = "ATOM_TEXT_SELECTION_EVENT"] = 219;
	            values[valuesById[220] = "ATOM_TEXT_LINKIFY_EVENT"] = 220;
	            values[valuesById[221] = "ATOM_CONVERSATION_ACTIONS_EVENT"] = 221;
	            values[valuesById[222] = "ATOM_LANGUAGE_DETECTION_EVENT"] = 222;
	            values[valuesById[223] = "ATOM_EXCLUSION_RECT_STATE_CHANGED"] = 223;
	            values[valuesById[224] = "ATOM_BACK_GESTURE_REPORTED_REPORTED"] = 224;
	            values[valuesById[225] = "ATOM_UPDATE_ENGINE_UPDATE_ATTEMPT_REPORTED"] = 225;
	            values[valuesById[226] = "ATOM_UPDATE_ENGINE_SUCCESSFUL_UPDATE_REPORTED"] = 226;
	            values[valuesById[227] = "ATOM_CAMERA_ACTION_EVENT"] = 227;
	            values[valuesById[228] = "ATOM_APP_COMPATIBILITY_CHANGE_REPORTED"] = 228;
	            values[valuesById[229] = "ATOM_PERFETTO_UPLOADED"] = 229;
	            values[valuesById[230] = "ATOM_VMS_CLIENT_CONNECTION_STATE_CHANGED"] = 230;
	            values[valuesById[233] = "ATOM_MEDIA_PROVIDER_SCAN_OCCURRED"] = 233;
	            values[valuesById[234] = "ATOM_MEDIA_CONTENT_DELETED"] = 234;
	            values[valuesById[235] = "ATOM_MEDIA_PROVIDER_PERMISSION_REQUESTED"] = 235;
	            values[valuesById[236] = "ATOM_MEDIA_PROVIDER_SCHEMA_CHANGED"] = 236;
	            values[valuesById[237] = "ATOM_MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED"] = 237;
	            values[valuesById[238] = "ATOM_REBOOT_ESCROW_RECOVERY_REPORTED"] = 238;
	            values[valuesById[239] = "ATOM_BOOT_TIME_EVENT_DURATION_REPORTED"] = 239;
	            values[valuesById[240] = "ATOM_BOOT_TIME_EVENT_ELAPSED_TIME_REPORTED"] = 240;
	            values[valuesById[241] = "ATOM_BOOT_TIME_EVENT_UTC_TIME_REPORTED"] = 241;
	            values[valuesById[242] = "ATOM_BOOT_TIME_EVENT_ERROR_CODE_REPORTED"] = 242;
	            values[valuesById[243] = "ATOM_USERSPACE_REBOOT_REPORTED"] = 243;
	            values[valuesById[244] = "ATOM_NOTIFICATION_REPORTED"] = 244;
	            values[valuesById[245] = "ATOM_NOTIFICATION_PANEL_REPORTED"] = 245;
	            values[valuesById[246] = "ATOM_NOTIFICATION_CHANNEL_MODIFIED"] = 246;
	            values[valuesById[247] = "ATOM_INTEGRITY_CHECK_RESULT_REPORTED"] = 247;
	            values[valuesById[248] = "ATOM_INTEGRITY_RULES_PUSHED"] = 248;
	            values[valuesById[249] = "ATOM_CB_MESSAGE_REPORTED"] = 249;
	            values[valuesById[250] = "ATOM_CB_MESSAGE_ERROR"] = 250;
	            values[valuesById[251] = "ATOM_WIFI_HEALTH_STAT_REPORTED"] = 251;
	            values[valuesById[252] = "ATOM_WIFI_FAILURE_STAT_REPORTED"] = 252;
	            values[valuesById[253] = "ATOM_WIFI_CONNECTION_RESULT_REPORTED"] = 253;
	            values[valuesById[254] = "ATOM_APP_FREEZE_CHANGED"] = 254;
	            values[valuesById[255] = "ATOM_SNAPSHOT_MERGE_REPORTED"] = 255;
	            values[valuesById[256] = "ATOM_FOREGROUND_SERVICE_APP_OP_SESSION_ENDED"] = 256;
	            values[valuesById[257] = "ATOM_DISPLAY_JANK_REPORTED"] = 257;
	            values[valuesById[258] = "ATOM_APP_STANDBY_BUCKET_CHANGED"] = 258;
	            values[valuesById[259] = "ATOM_SHARESHEET_STARTED"] = 259;
	            values[valuesById[260] = "ATOM_RANKING_SELECTED"] = 260;
	            values[valuesById[261] = "ATOM_TVSETTINGS_UI_INTERACTED"] = 261;
	            values[valuesById[262] = "ATOM_LAUNCHER_SNAPSHOT"] = 262;
	            values[valuesById[263] = "ATOM_PACKAGE_INSTALLER_V2_REPORTED"] = 263;
	            values[valuesById[264] = "ATOM_USER_LIFECYCLE_JOURNEY_REPORTED"] = 264;
	            values[valuesById[265] = "ATOM_USER_LIFECYCLE_EVENT_OCCURRED"] = 265;
	            values[valuesById[266] = "ATOM_ACCESSIBILITY_SHORTCUT_REPORTED"] = 266;
	            values[valuesById[267] = "ATOM_ACCESSIBILITY_SERVICE_REPORTED"] = 267;
	            values[valuesById[268] = "ATOM_DOCS_UI_DRAG_AND_DROP_REPORTED"] = 268;
	            values[valuesById[269] = "ATOM_APP_USAGE_EVENT_OCCURRED"] = 269;
	            values[valuesById[270] = "ATOM_AUTO_REVOKE_NOTIFICATION_CLICKED"] = 270;
	            values[valuesById[271] = "ATOM_AUTO_REVOKE_FRAGMENT_APP_VIEWED"] = 271;
	            values[valuesById[272] = "ATOM_AUTO_REVOKED_APP_INTERACTION"] = 272;
	            values[valuesById[273] = "ATOM_APP_PERMISSION_GROUPS_FRAGMENT_AUTO_REVOKE_ACTION"] = 273;
	            values[valuesById[274] = "ATOM_EVS_USAGE_STATS_REPORTED"] = 274;
	            values[valuesById[275] = "ATOM_AUDIO_POWER_USAGE_DATA_REPORTED"] = 275;
	            values[valuesById[276] = "ATOM_TV_TUNER_STATE_CHANGED"] = 276;
	            values[valuesById[277] = "ATOM_MEDIAOUTPUT_OP_SWITCH_REPORTED"] = 277;
	            values[valuesById[278] = "ATOM_CB_MESSAGE_FILTERED"] = 278;
	            values[valuesById[279] = "ATOM_TV_TUNER_DVR_STATUS"] = 279;
	            values[valuesById[280] = "ATOM_TV_CAS_SESSION_OPEN_STATUS"] = 280;
	            values[valuesById[281] = "ATOM_ASSISTANT_INVOCATION_REPORTED"] = 281;
	            values[valuesById[282] = "ATOM_DISPLAY_WAKE_REPORTED"] = 282;
	            values[valuesById[283] = "ATOM_CAR_USER_HAL_MODIFY_USER_REQUEST_REPORTED"] = 283;
	            values[valuesById[284] = "ATOM_CAR_USER_HAL_MODIFY_USER_RESPONSE_REPORTED"] = 284;
	            values[valuesById[285] = "ATOM_CAR_USER_HAL_POST_SWITCH_RESPONSE_REPORTED"] = 285;
	            values[valuesById[286] = "ATOM_CAR_USER_HAL_INITIAL_USER_INFO_REQUEST_REPORTED"] = 286;
	            values[valuesById[287] = "ATOM_CAR_USER_HAL_INITIAL_USER_INFO_RESPONSE_REPORTED"] = 287;
	            values[valuesById[288] = "ATOM_CAR_USER_HAL_USER_ASSOCIATION_REQUEST_REPORTED"] = 288;
	            values[valuesById[289] = "ATOM_CAR_USER_HAL_SET_USER_ASSOCIATION_RESPONSE_REPORTED"] = 289;
	            values[valuesById[290] = "ATOM_NETWORK_IP_PROVISIONING_REPORTED"] = 290;
	            values[valuesById[291] = "ATOM_NETWORK_DHCP_RENEW_REPORTED"] = 291;
	            values[valuesById[292] = "ATOM_NETWORK_VALIDATION_REPORTED"] = 292;
	            values[valuesById[293] = "ATOM_NETWORK_STACK_QUIRK_REPORTED"] = 293;
	            values[valuesById[294] = "ATOM_MEDIAMETRICS_AUDIORECORDDEVICEUSAGE_REPORTED"] = 294;
	            values[valuesById[295] = "ATOM_MEDIAMETRICS_AUDIOTHREADDEVICEUSAGE_REPORTED"] = 295;
	            values[valuesById[296] = "ATOM_MEDIAMETRICS_AUDIOTRACKDEVICEUSAGE_REPORTED"] = 296;
	            values[valuesById[297] = "ATOM_MEDIAMETRICS_AUDIODEVICECONNECTION_REPORTED"] = 297;
	            values[valuesById[298] = "ATOM_BLOB_COMMITTED"] = 298;
	            values[valuesById[299] = "ATOM_BLOB_LEASED"] = 299;
	            values[valuesById[300] = "ATOM_BLOB_OPENED"] = 300;
	            values[valuesById[301] = "ATOM_CONTACTS_PROVIDER_STATUS_REPORTED"] = 301;
	            values[valuesById[302] = "ATOM_KEYSTORE_KEY_EVENT_REPORTED"] = 302;
	            values[valuesById[303] = "ATOM_NETWORK_TETHERING_REPORTED"] = 303;
	            values[valuesById[304] = "ATOM_IME_TOUCH_REPORTED"] = 304;
	            values[valuesById[305] = "ATOM_UI_INTERACTION_FRAME_INFO_REPORTED"] = 305;
	            values[valuesById[306] = "ATOM_UI_ACTION_LATENCY_REPORTED"] = 306;
	            values[valuesById[307] = "ATOM_WIFI_DISCONNECT_REPORTED"] = 307;
	            values[valuesById[308] = "ATOM_WIFI_CONNECTION_STATE_CHANGED"] = 308;
	            values[valuesById[309] = "ATOM_HDMI_CEC_ACTIVE_SOURCE_CHANGED"] = 309;
	            values[valuesById[310] = "ATOM_HDMI_CEC_MESSAGE_REPORTED"] = 310;
	            values[valuesById[311] = "ATOM_AIRPLANE_MODE"] = 311;
	            values[valuesById[312] = "ATOM_MODEM_RESTART"] = 312;
	            values[valuesById[313] = "ATOM_CARRIER_ID_MISMATCH_REPORTED"] = 313;
	            values[valuesById[314] = "ATOM_CARRIER_ID_TABLE_UPDATED"] = 314;
	            values[valuesById[315] = "ATOM_DATA_STALL_RECOVERY_REPORTED"] = 315;
	            values[valuesById[316] = "ATOM_MEDIAMETRICS_MEDIAPARSER_REPORTED"] = 316;
	            values[valuesById[317] = "ATOM_TLS_HANDSHAKE_REPORTED"] = 317;
	            values[valuesById[318] = "ATOM_TEXT_CLASSIFIER_API_USAGE_REPORTED"] = 318;
	            values[valuesById[319] = "ATOM_CAR_WATCHDOG_KILL_STATS_REPORTED"] = 319;
	            values[valuesById[320] = "ATOM_MEDIAMETRICS_PLAYBACK_REPORTED"] = 320;
	            values[valuesById[321] = "ATOM_MEDIA_NETWORK_INFO_CHANGED"] = 321;
	            values[valuesById[322] = "ATOM_MEDIA_PLAYBACK_STATE_CHANGED"] = 322;
	            values[valuesById[323] = "ATOM_MEDIA_PLAYBACK_ERROR_REPORTED"] = 323;
	            values[valuesById[324] = "ATOM_MEDIA_PLAYBACK_TRACK_CHANGED"] = 324;
	            values[valuesById[325] = "ATOM_WIFI_SCAN_REPORTED"] = 325;
	            values[valuesById[326] = "ATOM_WIFI_PNO_SCAN_REPORTED"] = 326;
	            values[valuesById[327] = "ATOM_TIF_TUNE_CHANGED"] = 327;
	            values[valuesById[328] = "ATOM_AUTO_ROTATE_REPORTED"] = 328;
	            values[valuesById[329] = "ATOM_PERFETTO_TRIGGER"] = 329;
	            values[valuesById[330] = "ATOM_TRANSCODING_DATA"] = 330;
	            values[valuesById[331] = "ATOM_IMS_SERVICE_ENTITLEMENT_UPDATED"] = 331;
	            values[valuesById[333] = "ATOM_DEVICE_ROTATED"] = 333;
	            values[valuesById[334] = "ATOM_SIM_SPECIFIC_SETTINGS_RESTORED"] = 334;
	            values[valuesById[335] = "ATOM_TEXT_CLASSIFIER_DOWNLOAD_REPORTED"] = 335;
	            values[valuesById[336] = "ATOM_PIN_STORAGE_EVENT"] = 336;
	            values[valuesById[337] = "ATOM_FACE_DOWN_REPORTED"] = 337;
	            values[valuesById[338] = "ATOM_BLUETOOTH_HAL_CRASH_REASON_REPORTED"] = 338;
	            values[valuesById[339] = "ATOM_REBOOT_ESCROW_PREPARATION_REPORTED"] = 339;
	            values[valuesById[340] = "ATOM_REBOOT_ESCROW_LSKF_CAPTURE_REPORTED"] = 340;
	            values[valuesById[341] = "ATOM_REBOOT_ESCROW_REBOOT_REPORTED"] = 341;
	            values[valuesById[342] = "ATOM_BINDER_LATENCY_REPORTED"] = 342;
	            values[valuesById[343] = "ATOM_MEDIAMETRICS_AAUDIOSTREAM_REPORTED"] = 343;
	            values[valuesById[344] = "ATOM_MEDIA_TRANSCODING_SESSION_ENDED"] = 344;
	            values[valuesById[345] = "ATOM_MAGNIFICATION_USAGE_REPORTED"] = 345;
	            values[valuesById[346] = "ATOM_MAGNIFICATION_MODE_WITH_IME_ON_REPORTED"] = 346;
	            values[valuesById[347] = "ATOM_APP_SEARCH_CALL_STATS_REPORTED"] = 347;
	            values[valuesById[348] = "ATOM_APP_SEARCH_PUT_DOCUMENT_STATS_REPORTED"] = 348;
	            values[valuesById[349] = "ATOM_DEVICE_CONTROL_CHANGED"] = 349;
	            values[valuesById[350] = "ATOM_DEVICE_STATE_CHANGED"] = 350;
	            values[valuesById[351] = "ATOM_INPUTDEVICE_REGISTERED"] = 351;
	            values[valuesById[352] = "ATOM_SMARTSPACE_CARD_REPORTED"] = 352;
	            values[valuesById[353] = "ATOM_AUTH_PROMPT_AUTHENTICATE_INVOKED"] = 353;
	            values[valuesById[354] = "ATOM_AUTH_MANAGER_CAN_AUTHENTICATE_INVOKED"] = 354;
	            values[valuesById[355] = "ATOM_AUTH_ENROLL_ACTION_INVOKED"] = 355;
	            values[valuesById[356] = "ATOM_AUTH_DEPRECATED_API_USED"] = 356;
	            values[valuesById[357] = "ATOM_UNATTENDED_REBOOT_OCCURRED"] = 357;
	            values[valuesById[358] = "ATOM_LONG_REBOOT_BLOCKING_REPORTED"] = 358;
	            values[valuesById[359] = "ATOM_LOCATION_TIME_ZONE_PROVIDER_STATE_CHANGED"] = 359;
	            values[valuesById[364] = "ATOM_FDTRACK_EVENT_OCCURRED"] = 364;
	            values[valuesById[365] = "ATOM_TIMEOUT_AUTO_EXTENDED_REPORTED"] = 365;
	            values[valuesById[367] = "ATOM_ALARM_BATCH_DELIVERED"] = 367;
	            values[valuesById[368] = "ATOM_ALARM_SCHEDULED"] = 368;
	            values[valuesById[369] = "ATOM_CAR_WATCHDOG_IO_OVERUSE_STATS_REPORTED"] = 369;
	            values[valuesById[370] = "ATOM_USER_LEVEL_HIBERNATION_STATE_CHANGED"] = 370;
	            values[valuesById[371] = "ATOM_APP_SEARCH_INITIALIZE_STATS_REPORTED"] = 371;
	            values[valuesById[372] = "ATOM_APP_SEARCH_QUERY_STATS_REPORTED"] = 372;
	            values[valuesById[373] = "ATOM_APP_PROCESS_DIED"] = 373;
	            values[valuesById[374] = "ATOM_NETWORK_IP_REACHABILITY_MONITOR_REPORTED"] = 374;
	            values[valuesById[375] = "ATOM_SLOW_INPUT_EVENT_REPORTED"] = 375;
	            values[valuesById[376] = "ATOM_ANR_OCCURRED_PROCESSING_STARTED"] = 376;
	            values[valuesById[377] = "ATOM_APP_SEARCH_REMOVE_STATS_REPORTED"] = 377;
	            values[valuesById[378] = "ATOM_MEDIA_CODEC_REPORTED"] = 378;
	            values[valuesById[379] = "ATOM_PERMISSION_USAGE_FRAGMENT_INTERACTION"] = 379;
	            values[valuesById[380] = "ATOM_PERMISSION_DETAILS_INTERACTION"] = 380;
	            values[valuesById[381] = "ATOM_PRIVACY_SENSOR_TOGGLE_INTERACTION"] = 381;
	            values[valuesById[382] = "ATOM_PRIVACY_TOGGLE_DIALOG_INTERACTION"] = 382;
	            values[valuesById[383] = "ATOM_APP_SEARCH_OPTIMIZE_STATS_REPORTED"] = 383;
	            values[valuesById[384] = "ATOM_NON_A11Y_TOOL_SERVICE_WARNING_REPORT"] = 384;
	            values[valuesById[386] = "ATOM_APP_COMPAT_STATE_CHANGED"] = 386;
	            values[valuesById[387] = "ATOM_SIZE_COMPAT_RESTART_BUTTON_EVENT_REPORTED"] = 387;
	            values[valuesById[388] = "ATOM_SPLITSCREEN_UI_CHANGED"] = 388;
	            values[valuesById[389] = "ATOM_NETWORK_DNS_HANDSHAKE_REPORTED"] = 389;
	            values[valuesById[390] = "ATOM_BLUETOOTH_CODE_PATH_COUNTER"] = 390;
	            values[valuesById[392] = "ATOM_BLUETOOTH_LE_BATCH_SCAN_REPORT_DELAY"] = 392;
	            values[valuesById[393] = "ATOM_ACCESSIBILITY_FLOATING_MENU_UI_CHANGED"] = 393;
	            values[valuesById[394] = "ATOM_NEURALNETWORKS_COMPILATION_COMPLETED"] = 394;
	            values[valuesById[395] = "ATOM_NEURALNETWORKS_EXECUTION_COMPLETED"] = 395;
	            values[valuesById[396] = "ATOM_NEURALNETWORKS_COMPILATION_FAILED"] = 396;
	            values[valuesById[397] = "ATOM_NEURALNETWORKS_EXECUTION_FAILED"] = 397;
	            values[valuesById[398] = "ATOM_CONTEXT_HUB_BOOTED"] = 398;
	            values[valuesById[399] = "ATOM_CONTEXT_HUB_RESTARTED"] = 399;
	            values[valuesById[400] = "ATOM_CONTEXT_HUB_LOADED_NANOAPP_SNAPSHOT_REPORTED"] = 400;
	            values[valuesById[401] = "ATOM_CHRE_CODE_DOWNLOAD_TRANSACTED"] = 401;
	            values[valuesById[402] = "ATOM_UWB_SESSION_INITED"] = 402;
	            values[valuesById[403] = "ATOM_UWB_SESSION_CLOSED"] = 403;
	            values[valuesById[404] = "ATOM_UWB_FIRST_RANGING_RECEIVED"] = 404;
	            values[valuesById[405] = "ATOM_UWB_RANGING_MEASUREMENT_RECEIVED"] = 405;
	            values[valuesById[406] = "ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_SCHEDULED"] = 406;
	            values[valuesById[407] = "ATOM_TEXT_CLASSIFIER_DOWNLOAD_WORK_COMPLETED"] = 407;
	            values[valuesById[408] = "ATOM_CLIPBOARD_CLEARED"] = 408;
	            values[valuesById[409] = "ATOM_VM_CREATION_REQUESTED"] = 409;
	            values[valuesById[410] = "ATOM_NEARBY_DEVICE_SCAN_STATE_CHANGED"] = 410;
	            values[valuesById[411] = "ATOM_CAMERA_COMPAT_CONTROL_EVENT_REPORTED"] = 411;
	            values[valuesById[412] = "ATOM_APPLICATION_LOCALES_CHANGED"] = 412;
	            values[valuesById[413] = "ATOM_MEDIAMETRICS_AUDIOTRACKSTATUS_REPORTED"] = 413;
	            values[valuesById[414] = "ATOM_FOLD_STATE_DURATION_REPORTED"] = 414;
	            values[valuesById[415] = "ATOM_LOCATION_TIME_ZONE_PROVIDER_CONTROLLER_STATE_CHANGED"] = 415;
	            values[valuesById[416] = "ATOM_DISPLAY_HBM_STATE_CHANGED"] = 416;
	            values[valuesById[417] = "ATOM_DISPLAY_HBM_BRIGHTNESS_CHANGED"] = 417;
	            values[valuesById[418] = "ATOM_PERSISTENT_URI_PERMISSIONS_FLUSHED"] = 418;
	            values[valuesById[419] = "ATOM_EARLY_BOOT_COMP_OS_ARTIFACTS_CHECK_REPORTED"] = 419;
	            values[valuesById[420] = "ATOM_VBMETA_DIGEST_REPORTED"] = 420;
	            values[valuesById[421] = "ATOM_APEX_INFO_GATHERED"] = 421;
	            values[valuesById[422] = "ATOM_PVM_INFO_GATHERED"] = 422;
	            values[valuesById[423] = "ATOM_WEAR_SETTINGS_UI_INTERACTED"] = 423;
	            values[valuesById[424] = "ATOM_TRACING_SERVICE_REPORT_EVENT"] = 424;
	            values[valuesById[425] = "ATOM_MEDIAMETRICS_AUDIORECORDSTATUS_REPORTED"] = 425;
	            values[valuesById[426] = "ATOM_LAUNCHER_LATENCY"] = 426;
	            values[valuesById[427] = "ATOM_DROPBOX_ENTRY_DROPPED"] = 427;
	            values[valuesById[428] = "ATOM_WIFI_P2P_CONNECTION_REPORTED"] = 428;
	            values[valuesById[429] = "ATOM_GAME_STATE_CHANGED"] = 429;
	            values[valuesById[430] = "ATOM_HOTWORD_DETECTOR_CREATE_REQUESTED"] = 430;
	            values[valuesById[431] = "ATOM_HOTWORD_DETECTION_SERVICE_INIT_RESULT_REPORTED"] = 431;
	            values[valuesById[432] = "ATOM_HOTWORD_DETECTION_SERVICE_RESTARTED"] = 432;
	            values[valuesById[433] = "ATOM_HOTWORD_DETECTOR_KEYPHRASE_TRIGGERED"] = 433;
	            values[valuesById[434] = "ATOM_HOTWORD_DETECTOR_EVENTS"] = 434;
	            values[valuesById[437] = "ATOM_BOOT_COMPLETED_BROADCAST_COMPLETION_LATENCY_REPORTED"] = 437;
	            values[valuesById[440] = "ATOM_CONTACTS_INDEXER_UPDATE_STATS_REPORTED"] = 440;
	            values[valuesById[441] = "ATOM_APP_BACKGROUND_RESTRICTIONS_INFO"] = 441;
	            values[valuesById[442] = "ATOM_MMS_SMS_PROVIDER_GET_THREAD_ID_FAILED"] = 442;
	            values[valuesById[443] = "ATOM_MMS_SMS_DATABASE_HELPER_ON_UPGRADE_FAILED"] = 443;
	            values[valuesById[444] = "ATOM_PERMISSION_REMINDER_NOTIFICATION_INTERACTED"] = 444;
	            values[valuesById[445] = "ATOM_RECENT_PERMISSION_DECISIONS_INTERACTED"] = 445;
	            values[valuesById[446] = "ATOM_GNSS_PSDS_DOWNLOAD_REPORTED"] = 446;
	            values[valuesById[447] = "ATOM_LE_AUDIO_CONNECTION_SESSION_REPORTED"] = 447;
	            values[valuesById[448] = "ATOM_LE_AUDIO_BROADCAST_SESSION_REPORTED"] = 448;
	            values[valuesById[449] = "ATOM_DREAM_UI_EVENT_REPORTED"] = 449;
	            values[valuesById[450] = "ATOM_TASK_MANAGER_EVENT_REPORTED"] = 450;
	            values[valuesById[451] = "ATOM_CDM_ASSOCIATION_ACTION"] = 451;
	            values[valuesById[452] = "ATOM_MAGNIFICATION_TRIPLE_TAP_AND_HOLD_ACTIVATED_SESSION_REPORTED"] = 452;
	            values[valuesById[453] = "ATOM_MAGNIFICATION_FOLLOW_TYPING_FOCUS_ACTIVATED_SESSION_REPORTED"] = 453;
	            values[valuesById[454] = "ATOM_ACCESSIBILITY_TEXT_READING_OPTIONS_CHANGED"] = 454;
	            values[valuesById[455] = "ATOM_WIFI_SETUP_FAILURE_CRASH_REPORTED"] = 455;
	            values[valuesById[456] = "ATOM_UWB_DEVICE_ERROR_REPORTED"] = 456;
	            values[valuesById[457] = "ATOM_ISOLATED_COMPILATION_SCHEDULED"] = 457;
	            values[valuesById[458] = "ATOM_ISOLATED_COMPILATION_ENDED"] = 458;
	            values[valuesById[459] = "ATOM_ONS_OPPORTUNISTIC_ESIM_PROVISIONING_COMPLETE"] = 459;
	            values[valuesById[460] = "ATOM_SYSTEM_SERVER_PRE_WATCHDOG_OCCURRED"] = 460;
	            values[valuesById[461] = "ATOM_TELEPHONY_ANOMALY_DETECTED"] = 461;
	            values[valuesById[462] = "ATOM_LETTERBOX_POSITION_CHANGED"] = 462;
	            values[valuesById[463] = "ATOM_REMOTE_KEY_PROVISIONING_ATTEMPT"] = 463;
	            values[valuesById[464] = "ATOM_REMOTE_KEY_PROVISIONING_NETWORK_INFO"] = 464;
	            values[valuesById[465] = "ATOM_REMOTE_KEY_PROVISIONING_TIMING"] = 465;
	            values[valuesById[466] = "ATOM_MEDIAOUTPUT_OP_INTERACTION_REPORT"] = 466;
	            values[valuesById[468] = "ATOM_SYNC_EXEMPTION_OCCURRED"] = 468;
	            values[valuesById[469] = "ATOM_AUTOFILL_PRESENTATION_EVENT_REPORTED"] = 469;
	            values[valuesById[470] = "ATOM_DOCK_STATE_CHANGED"] = 470;
	            values[valuesById[471] = "ATOM_SAFETY_SOURCE_STATE_COLLECTED"] = 471;
	            values[valuesById[472] = "ATOM_SAFETY_CENTER_SYSTEM_EVENT_REPORTED"] = 472;
	            values[valuesById[473] = "ATOM_SAFETY_CENTER_INTERACTION_REPORTED"] = 473;
	            values[valuesById[474] = "ATOM_SETTINGS_PROVIDER_SETTING_CHANGED"] = 474;
	            values[valuesById[475] = "ATOM_BROADCAST_DELIVERY_EVENT_REPORTED"] = 475;
	            values[valuesById[476] = "ATOM_SERVICE_REQUEST_EVENT_REPORTED"] = 476;
	            values[valuesById[477] = "ATOM_PROVIDER_ACQUISITION_EVENT_REPORTED"] = 477;
	            values[valuesById[478] = "ATOM_BLUETOOTH_DEVICE_NAME_REPORTED"] = 478;
	            values[valuesById[479] = "ATOM_CB_CONFIG_UPDATED"] = 479;
	            values[valuesById[480] = "ATOM_CB_MODULE_ERROR_REPORTED"] = 480;
	            values[valuesById[481] = "ATOM_CB_SERVICE_FEATURE_CHANGED"] = 481;
	            values[valuesById[482] = "ATOM_CB_RECEIVER_FEATURE_CHANGED"] = 482;
	            values[valuesById[484] = "ATOM_PRIVACY_SIGNAL_NOTIFICATION_INTERACTION"] = 484;
	            values[valuesById[485] = "ATOM_PRIVACY_SIGNAL_ISSUE_CARD_INTERACTION"] = 485;
	            values[valuesById[486] = "ATOM_PRIVACY_SIGNALS_JOB_FAILURE"] = 486;
	            values[valuesById[487] = "ATOM_VIBRATION_REPORTED"] = 487;
	            values[valuesById[489] = "ATOM_UWB_RANGING_START"] = 489;
	            values[valuesById[491] = "ATOM_APP_COMPACTED_V2"] = 491;
	            values[valuesById[494] = "ATOM_DISPLAY_BRIGHTNESS_CHANGED"] = 494;
	            values[valuesById[495] = "ATOM_ACTIVITY_ACTION_BLOCKED"] = 495;
	            values[valuesById[504] = "ATOM_NETWORK_DNS_SERVER_SUPPORT_REPORTED"] = 504;
	            values[valuesById[505] = "ATOM_VM_BOOTED"] = 505;
	            values[valuesById[506] = "ATOM_VM_EXITED"] = 506;
	            values[valuesById[507] = "ATOM_AMBIENT_BRIGHTNESS_STATS_REPORTED"] = 507;
	            values[valuesById[508] = "ATOM_MEDIAMETRICS_SPATIALIZERCAPABILITIES_REPORTED"] = 508;
	            values[valuesById[509] = "ATOM_MEDIAMETRICS_SPATIALIZERDEVICEENABLED_REPORTED"] = 509;
	            values[valuesById[510] = "ATOM_MEDIAMETRICS_HEADTRACKERDEVICEENABLED_REPORTED"] = 510;
	            values[valuesById[511] = "ATOM_MEDIAMETRICS_HEADTRACKERDEVICESUPPORTED_REPORTED"] = 511;
	            values[valuesById[513] = "ATOM_HEARING_AID_INFO_REPORTED"] = 513;
	            values[valuesById[514] = "ATOM_DEVICE_WIDE_JOB_CONSTRAINT_CHANGED"] = 514;
	            values[valuesById[515] = "ATOM_AMBIENT_MODE_CHANGED"] = 515;
	            values[valuesById[516] = "ATOM_ANR_LATENCY_REPORTED"] = 516;
	            values[valuesById[517] = "ATOM_RESOURCE_API_INFO"] = 517;
	            values[valuesById[518] = "ATOM_SYSTEM_DEFAULT_NETWORK_CHANGED"] = 518;
	            values[valuesById[519] = "ATOM_IWLAN_SETUP_DATA_CALL_RESULT_REPORTED"] = 519;
	            values[valuesById[520] = "ATOM_IWLAN_PDN_DISCONNECTED_REASON_REPORTED"] = 520;
	            values[valuesById[521] = "ATOM_AIRPLANE_MODE_SESSION_REPORTED"] = 521;
	            values[valuesById[522] = "ATOM_VM_CPU_STATUS_REPORTED"] = 522;
	            values[valuesById[523] = "ATOM_VM_MEM_STATUS_REPORTED"] = 523;
	            values[valuesById[524] = "ATOM_PACKAGE_INSTALLATION_SESSION_REPORTED"] = 524;
	            values[valuesById[525] = "ATOM_DEFAULT_NETWORK_REMATCH_INFO"] = 525;
	            values[valuesById[526] = "ATOM_NETWORK_SELECTION_PERFORMANCE"] = 526;
	            values[valuesById[527] = "ATOM_NETWORK_NSD_REPORTED"] = 527;
	            values[valuesById[529] = "ATOM_BLUETOOTH_DISCONNECTION_REASON_REPORTED"] = 529;
	            values[valuesById[530] = "ATOM_BLUETOOTH_LOCAL_VERSIONS_REPORTED"] = 530;
	            values[valuesById[531] = "ATOM_BLUETOOTH_REMOTE_SUPPORTED_FEATURES_REPORTED"] = 531;
	            values[valuesById[532] = "ATOM_BLUETOOTH_LOCAL_SUPPORTED_FEATURES_REPORTED"] = 532;
	            values[valuesById[533] = "ATOM_BLUETOOTH_GATT_APP_INFO"] = 533;
	            values[valuesById[534] = "ATOM_BRIGHTNESS_CONFIGURATION_UPDATED"] = 534;
	            values[valuesById[538] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_LAUNCHED"] = 538;
	            values[valuesById[539] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FINISHED"] = 539;
	            values[valuesById[540] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECTION_REPORTED"] = 540;
	            values[valuesById[541] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_TRIGGERED"] = 541;
	            values[valuesById[542] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FIRST_DEVICE_SCAN_LATENCY"] = 542;
	            values[valuesById[543] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_CONNECT_DEVICE_LATENCY"] = 543;
	            values[valuesById[544] = "ATOM_PACKAGE_MANAGER_SNAPSHOT_REPORTED"] = 544;
	            values[valuesById[545] = "ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_BUILD_REPORTED"] = 545;
	            values[valuesById[546] = "ATOM_PACKAGE_MANAGER_APPS_FILTER_CACHE_UPDATE_REPORTED"] = 546;
	            values[valuesById[547] = "ATOM_LAUNCHER_IMPRESSION_EVENT"] = 547;
	            values[valuesById[549] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_ALL_DEVICES_SCAN_LATENCY"] = 549;
	            values[valuesById[551] = "ATOM_WS_WATCH_FACE_EDITED"] = 551;
	            values[valuesById[552] = "ATOM_WS_WATCH_FACE_FAVORITE_ACTION_REPORTED"] = 552;
	            values[valuesById[553] = "ATOM_WS_WATCH_FACE_SET_ACTION_REPORTED"] = 553;
	            values[valuesById[554] = "ATOM_PACKAGE_UNINSTALLATION_REPORTED"] = 554;
	            values[valuesById[555] = "ATOM_GAME_MODE_CHANGED"] = 555;
	            values[valuesById[556] = "ATOM_GAME_MODE_CONFIGURATION_CHANGED"] = 556;
	            values[valuesById[557] = "ATOM_BEDTIME_MODE_STATE_CHANGED"] = 557;
	            values[valuesById[558] = "ATOM_NETWORK_SLICE_SESSION_ENDED"] = 558;
	            values[valuesById[559] = "ATOM_NETWORK_SLICE_DAILY_DATA_USAGE_REPORTED"] = 559;
	            values[valuesById[560] = "ATOM_NFC_TAG_TYPE_OCCURRED"] = 560;
	            values[valuesById[561] = "ATOM_NFC_AID_CONFLICT_OCCURRED"] = 561;
	            values[valuesById[562] = "ATOM_NFC_READER_CONFLICT_OCCURRED"] = 562;
	            values[valuesById[563] = "ATOM_WS_TILE_LIST_CHANGED"] = 563;
	            values[valuesById[564] = "ATOM_GET_TYPE_ACCESSED_WITHOUT_PERMISSION"] = 564;
	            values[valuesById[566] = "ATOM_MOBILE_BUNDLED_APP_INFO_GATHERED"] = 566;
	            values[valuesById[567] = "ATOM_WS_WATCH_FACE_COMPLICATION_SET_CHANGED"] = 567;
	            values[valuesById[568] = "ATOM_MEDIA_DRM_CREATED"] = 568;
	            values[valuesById[569] = "ATOM_MEDIA_DRM_ERRORED"] = 569;
	            values[valuesById[570] = "ATOM_MEDIA_DRM_SESSION_OPENED"] = 570;
	            values[valuesById[571] = "ATOM_MEDIA_DRM_SESSION_CLOSED"] = 571;
	            values[valuesById[572] = "ATOM_USER_SELECTED_RESOLUTION"] = 572;
	            values[valuesById[573] = "ATOM_UNSAFE_INTENT_EVENT_REPORTED"] = 573;
	            values[valuesById[574] = "ATOM_PERFORMANCE_HINT_SESSION_REPORTED"] = 574;
	            values[valuesById[576] = "ATOM_MEDIAMETRICS_MIDI_DEVICE_CLOSE_REPORTED"] = 576;
	            values[valuesById[577] = "ATOM_BIOMETRIC_TOUCH_REPORTED"] = 577;
	            values[valuesById[578] = "ATOM_HOTWORD_AUDIO_EGRESS_EVENT_REPORTED"] = 578;
	            values[valuesById[580] = "ATOM_LOCATION_ENABLED_STATE_CHANGED"] = 580;
	            values[valuesById[581] = "ATOM_IME_REQUEST_FINISHED"] = 581;
	            values[valuesById[582] = "ATOM_USB_COMPLIANCE_WARNINGS_REPORTED"] = 582;
	            values[valuesById[583] = "ATOM_APP_SUPPORTED_LOCALES_CHANGED"] = 583;
	            values[valuesById[586] = "ATOM_MEDIA_PROVIDER_VOLUME_RECOVERY_REPORTED"] = 586;
	            values[valuesById[587] = "ATOM_BIOMETRIC_PROPERTIES_COLLECTED"] = 587;
	            values[valuesById[588] = "ATOM_KERNEL_WAKEUP_ATTRIBUTED"] = 588;
	            values[valuesById[589] = "ATOM_SCREEN_STATE_CHANGED_V2"] = 589;
	            values[valuesById[590] = "ATOM_WS_BACKUP_ACTION_REPORTED"] = 590;
	            values[valuesById[591] = "ATOM_WS_RESTORE_ACTION_REPORTED"] = 591;
	            values[valuesById[592] = "ATOM_DEVICE_LOG_ACCESS_EVENT_REPORTED"] = 592;
	            values[valuesById[594] = "ATOM_MEDIA_SESSION_UPDATED"] = 594;
	            values[valuesById[595] = "ATOM_WEAR_OOBE_STATE_CHANGED"] = 595;
	            values[valuesById[596] = "ATOM_WS_NOTIFICATION_UPDATED"] = 596;
	            values[valuesById[601] = "ATOM_NETWORK_VALIDATION_FAILURE_STATS_DAILY_REPORTED"] = 601;
	            values[valuesById[602] = "ATOM_WS_COMPLICATION_TAPPED"] = 602;
	            values[valuesById[780] = "ATOM_WS_NOTIFICATION_BLOCKING"] = 780;
	            values[valuesById[822] = "ATOM_WS_NOTIFICATION_BRIDGEMODE_UPDATED"] = 822;
	            values[valuesById[823] = "ATOM_WS_NOTIFICATION_DISMISSAL_ACTIONED"] = 823;
	            values[valuesById[824] = "ATOM_WS_NOTIFICATION_ACTIONED"] = 824;
	            values[valuesById[880] = "ATOM_WS_NOTIFICATION_LATENCY"] = 880;
	            values[valuesById[10000] = "ATOM_WIFI_BYTES_TRANSFER"] = 10000;
	            values[valuesById[10001] = "ATOM_WIFI_BYTES_TRANSFER_BY_FG_BG"] = 10001;
	            values[valuesById[10002] = "ATOM_MOBILE_BYTES_TRANSFER"] = 10002;
	            values[valuesById[10003] = "ATOM_MOBILE_BYTES_TRANSFER_BY_FG_BG"] = 10003;
	            values[valuesById[10006] = "ATOM_BLUETOOTH_BYTES_TRANSFER"] = 10006;
	            values[valuesById[10004] = "ATOM_KERNEL_WAKELOCK"] = 10004;
	            values[valuesById[10005] = "ATOM_SUBSYSTEM_SLEEP_STATE"] = 10005;
	            values[valuesById[10009] = "ATOM_CPU_TIME_PER_UID"] = 10009;
	            values[valuesById[10010] = "ATOM_CPU_TIME_PER_UID_FREQ"] = 10010;
	            values[valuesById[10011] = "ATOM_WIFI_ACTIVITY_INFO"] = 10011;
	            values[valuesById[10012] = "ATOM_MODEM_ACTIVITY_INFO"] = 10012;
	            values[valuesById[10007] = "ATOM_BLUETOOTH_ACTIVITY_INFO"] = 10007;
	            values[valuesById[10013] = "ATOM_PROCESS_MEMORY_STATE"] = 10013;
	            values[valuesById[10014] = "ATOM_SYSTEM_ELAPSED_REALTIME"] = 10014;
	            values[valuesById[10015] = "ATOM_SYSTEM_UPTIME"] = 10015;
	            values[valuesById[10016] = "ATOM_CPU_ACTIVE_TIME"] = 10016;
	            values[valuesById[10017] = "ATOM_CPU_CLUSTER_TIME"] = 10017;
	            values[valuesById[10018] = "ATOM_DISK_SPACE"] = 10018;
	            values[valuesById[10019] = "ATOM_REMAINING_BATTERY_CAPACITY"] = 10019;
	            values[valuesById[10020] = "ATOM_FULL_BATTERY_CAPACITY"] = 10020;
	            values[valuesById[10021] = "ATOM_TEMPERATURE"] = 10021;
	            values[valuesById[10022] = "ATOM_BINDER_CALLS"] = 10022;
	            values[valuesById[10023] = "ATOM_BINDER_CALLS_EXCEPTIONS"] = 10023;
	            values[valuesById[10024] = "ATOM_LOOPER_STATS"] = 10024;
	            values[valuesById[10025] = "ATOM_DISK_STATS"] = 10025;
	            values[valuesById[10026] = "ATOM_DIRECTORY_USAGE"] = 10026;
	            values[valuesById[10027] = "ATOM_APP_SIZE"] = 10027;
	            values[valuesById[10028] = "ATOM_CATEGORY_SIZE"] = 10028;
	            values[valuesById[10029] = "ATOM_PROC_STATS"] = 10029;
	            values[valuesById[10030] = "ATOM_BATTERY_VOLTAGE"] = 10030;
	            values[valuesById[10031] = "ATOM_NUM_FINGERPRINTS_ENROLLED"] = 10031;
	            values[valuesById[10032] = "ATOM_DISK_IO"] = 10032;
	            values[valuesById[10033] = "ATOM_POWER_PROFILE"] = 10033;
	            values[valuesById[10034] = "ATOM_PROC_STATS_PKG_PROC"] = 10034;
	            values[valuesById[10035] = "ATOM_PROCESS_CPU_TIME"] = 10035;
	            values[valuesById[10037] = "ATOM_CPU_TIME_PER_THREAD_FREQ"] = 10037;
	            values[valuesById[10038] = "ATOM_ON_DEVICE_POWER_MEASUREMENT"] = 10038;
	            values[valuesById[10039] = "ATOM_DEVICE_CALCULATED_POWER_USE"] = 10039;
	            values[valuesById[10042] = "ATOM_PROCESS_MEMORY_HIGH_WATER_MARK"] = 10042;
	            values[valuesById[10043] = "ATOM_BATTERY_LEVEL"] = 10043;
	            values[valuesById[10044] = "ATOM_BUILD_INFORMATION"] = 10044;
	            values[valuesById[10045] = "ATOM_BATTERY_CYCLE_COUNT"] = 10045;
	            values[valuesById[10046] = "ATOM_DEBUG_ELAPSED_CLOCK"] = 10046;
	            values[valuesById[10047] = "ATOM_DEBUG_FAILING_ELAPSED_CLOCK"] = 10047;
	            values[valuesById[10048] = "ATOM_NUM_FACES_ENROLLED"] = 10048;
	            values[valuesById[10049] = "ATOM_ROLE_HOLDER"] = 10049;
	            values[valuesById[10050] = "ATOM_DANGEROUS_PERMISSION_STATE"] = 10050;
	            values[valuesById[10051] = "ATOM_TRAIN_INFO"] = 10051;
	            values[valuesById[10052] = "ATOM_TIME_ZONE_DATA_INFO"] = 10052;
	            values[valuesById[10053] = "ATOM_EXTERNAL_STORAGE_INFO"] = 10053;
	            values[valuesById[10054] = "ATOM_GPU_STATS_GLOBAL_INFO"] = 10054;
	            values[valuesById[10055] = "ATOM_GPU_STATS_APP_INFO"] = 10055;
	            values[valuesById[10056] = "ATOM_SYSTEM_ION_HEAP_SIZE"] = 10056;
	            values[valuesById[10057] = "ATOM_APPS_ON_EXTERNAL_STORAGE_INFO"] = 10057;
	            values[valuesById[10058] = "ATOM_FACE_SETTINGS"] = 10058;
	            values[valuesById[10059] = "ATOM_COOLING_DEVICE"] = 10059;
	            values[valuesById[10060] = "ATOM_APP_OPS"] = 10060;
	            values[valuesById[10061] = "ATOM_PROCESS_SYSTEM_ION_HEAP_SIZE"] = 10061;
	            values[valuesById[10062] = "ATOM_SURFACEFLINGER_STATS_GLOBAL_INFO"] = 10062;
	            values[valuesById[10063] = "ATOM_SURFACEFLINGER_STATS_LAYER_INFO"] = 10063;
	            values[valuesById[10064] = "ATOM_PROCESS_MEMORY_SNAPSHOT"] = 10064;
	            values[valuesById[10065] = "ATOM_VMS_CLIENT_STATS"] = 10065;
	            values[valuesById[10066] = "ATOM_NOTIFICATION_REMOTE_VIEWS"] = 10066;
	            values[valuesById[10067] = "ATOM_DANGEROUS_PERMISSION_STATE_SAMPLED"] = 10067;
	            values[valuesById[10068] = "ATOM_GRAPHICS_STATS"] = 10068;
	            values[valuesById[10069] = "ATOM_RUNTIME_APP_OP_ACCESS"] = 10069;
	            values[valuesById[10070] = "ATOM_ION_HEAP_SIZE"] = 10070;
	            values[valuesById[10071] = "ATOM_PACKAGE_NOTIFICATION_PREFERENCES"] = 10071;
	            values[valuesById[10072] = "ATOM_PACKAGE_NOTIFICATION_CHANNEL_PREFERENCES"] = 10072;
	            values[valuesById[10073] = "ATOM_PACKAGE_NOTIFICATION_CHANNEL_GROUP_PREFERENCES"] = 10073;
	            values[valuesById[10074] = "ATOM_GNSS_STATS"] = 10074;
	            values[valuesById[10075] = "ATOM_ATTRIBUTED_APP_OPS"] = 10075;
	            values[valuesById[10076] = "ATOM_VOICE_CALL_SESSION"] = 10076;
	            values[valuesById[10077] = "ATOM_VOICE_CALL_RAT_USAGE"] = 10077;
	            values[valuesById[10078] = "ATOM_SIM_SLOT_STATE"] = 10078;
	            values[valuesById[10079] = "ATOM_SUPPORTED_RADIO_ACCESS_FAMILY"] = 10079;
	            values[valuesById[10080] = "ATOM_SETTING_SNAPSHOT"] = 10080;
	            values[valuesById[10081] = "ATOM_BLOB_INFO"] = 10081;
	            values[valuesById[10082] = "ATOM_DATA_USAGE_BYTES_TRANSFER"] = 10082;
	            values[valuesById[10083] = "ATOM_BYTES_TRANSFER_BY_TAG_AND_METERED"] = 10083;
	            values[valuesById[10084] = "ATOM_DND_MODE_RULE"] = 10084;
	            values[valuesById[10085] = "ATOM_GENERAL_EXTERNAL_STORAGE_ACCESS_STATS"] = 10085;
	            values[valuesById[10086] = "ATOM_INCOMING_SMS"] = 10086;
	            values[valuesById[10087] = "ATOM_OUTGOING_SMS"] = 10087;
	            values[valuesById[10088] = "ATOM_CARRIER_ID_TABLE_VERSION"] = 10088;
	            values[valuesById[10089] = "ATOM_DATA_CALL_SESSION"] = 10089;
	            values[valuesById[10090] = "ATOM_CELLULAR_SERVICE_STATE"] = 10090;
	            values[valuesById[10091] = "ATOM_CELLULAR_DATA_SERVICE_SWITCH"] = 10091;
	            values[valuesById[10092] = "ATOM_SYSTEM_MEMORY"] = 10092;
	            values[valuesById[10093] = "ATOM_IMS_REGISTRATION_TERMINATION"] = 10093;
	            values[valuesById[10094] = "ATOM_IMS_REGISTRATION_STATS"] = 10094;
	            values[valuesById[10095] = "ATOM_CPU_TIME_PER_CLUSTER_FREQ"] = 10095;
	            values[valuesById[10096] = "ATOM_CPU_CYCLES_PER_UID_CLUSTER"] = 10096;
	            values[valuesById[10097] = "ATOM_DEVICE_ROTATED_DATA"] = 10097;
	            values[valuesById[10098] = "ATOM_CPU_CYCLES_PER_THREAD_GROUP_CLUSTER"] = 10098;
	            values[valuesById[10099] = "ATOM_MEDIA_DRM_ACTIVITY_INFO"] = 10099;
	            values[valuesById[10100] = "ATOM_OEM_MANAGED_BYTES_TRANSFER"] = 10100;
	            values[valuesById[10101] = "ATOM_GNSS_POWER_STATS"] = 10101;
	            values[valuesById[10102] = "ATOM_TIME_ZONE_DETECTOR_STATE"] = 10102;
	            values[valuesById[10103] = "ATOM_KEYSTORE2_STORAGE_STATS"] = 10103;
	            values[valuesById[10104] = "ATOM_RKP_POOL_STATS"] = 10104;
	            values[valuesById[10105] = "ATOM_PROCESS_DMABUF_MEMORY"] = 10105;
	            values[valuesById[10106] = "ATOM_PENDING_ALARM_INFO"] = 10106;
	            values[valuesById[10107] = "ATOM_USER_LEVEL_HIBERNATED_APPS"] = 10107;
	            values[valuesById[10108] = "ATOM_LAUNCHER_LAYOUT_SNAPSHOT"] = 10108;
	            values[valuesById[10109] = "ATOM_GLOBAL_HIBERNATED_APPS"] = 10109;
	            values[valuesById[10110] = "ATOM_INPUT_EVENT_LATENCY_SKETCH"] = 10110;
	            values[valuesById[10111] = "ATOM_BATTERY_USAGE_STATS_BEFORE_RESET"] = 10111;
	            values[valuesById[10112] = "ATOM_BATTERY_USAGE_STATS_SINCE_RESET"] = 10112;
	            values[valuesById[10113] = "ATOM_BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL"] = 10113;
	            values[valuesById[10114] = "ATOM_INSTALLED_INCREMENTAL_PACKAGE"] = 10114;
	            values[valuesById[10115] = "ATOM_TELEPHONY_NETWORK_REQUESTS"] = 10115;
	            values[valuesById[10116] = "ATOM_APP_SEARCH_STORAGE_INFO"] = 10116;
	            values[valuesById[10117] = "ATOM_VMSTAT"] = 10117;
	            values[valuesById[10118] = "ATOM_KEYSTORE2_KEY_CREATION_WITH_GENERAL_INFO"] = 10118;
	            values[valuesById[10119] = "ATOM_KEYSTORE2_KEY_CREATION_WITH_AUTH_INFO"] = 10119;
	            values[valuesById[10120] = "ATOM_KEYSTORE2_KEY_CREATION_WITH_PURPOSE_AND_MODES_INFO"] = 10120;
	            values[valuesById[10121] = "ATOM_KEYSTORE2_ATOM_WITH_OVERFLOW"] = 10121;
	            values[valuesById[10122] = "ATOM_KEYSTORE2_KEY_OPERATION_WITH_PURPOSE_AND_MODES_INFO"] = 10122;
	            values[valuesById[10123] = "ATOM_KEYSTORE2_KEY_OPERATION_WITH_GENERAL_INFO"] = 10123;
	            values[valuesById[10124] = "ATOM_RKP_ERROR_STATS"] = 10124;
	            values[valuesById[10125] = "ATOM_KEYSTORE2_CRASH_STATS"] = 10125;
	            values[valuesById[10126] = "ATOM_VENDOR_APEX_INFO"] = 10126;
	            values[valuesById[10127] = "ATOM_ACCESSIBILITY_SHORTCUT_STATS"] = 10127;
	            values[valuesById[10128] = "ATOM_ACCESSIBILITY_FLOATING_MENU_STATS"] = 10128;
	            values[valuesById[10129] = "ATOM_DATA_USAGE_BYTES_TRANSFER_V2"] = 10129;
	            values[valuesById[10130] = "ATOM_MEDIA_CAPABILITIES"] = 10130;
	            values[valuesById[10131] = "ATOM_CAR_WATCHDOG_SYSTEM_IO_USAGE_SUMMARY"] = 10131;
	            values[valuesById[10132] = "ATOM_CAR_WATCHDOG_UID_IO_USAGE_SUMMARY"] = 10132;
	            values[valuesById[10133] = "ATOM_IMS_REGISTRATION_FEATURE_TAG_STATS"] = 10133;
	            values[valuesById[10134] = "ATOM_RCS_CLIENT_PROVISIONING_STATS"] = 10134;
	            values[valuesById[10135] = "ATOM_RCS_ACS_PROVISIONING_STATS"] = 10135;
	            values[valuesById[10136] = "ATOM_SIP_DELEGATE_STATS"] = 10136;
	            values[valuesById[10137] = "ATOM_SIP_TRANSPORT_FEATURE_TAG_STATS"] = 10137;
	            values[valuesById[10138] = "ATOM_SIP_MESSAGE_RESPONSE"] = 10138;
	            values[valuesById[10139] = "ATOM_SIP_TRANSPORT_SESSION"] = 10139;
	            values[valuesById[10140] = "ATOM_IMS_DEDICATED_BEARER_LISTENER_EVENT"] = 10140;
	            values[valuesById[10141] = "ATOM_IMS_DEDICATED_BEARER_EVENT"] = 10141;
	            values[valuesById[10142] = "ATOM_IMS_REGISTRATION_SERVICE_DESC_STATS"] = 10142;
	            values[valuesById[10143] = "ATOM_UCE_EVENT_STATS"] = 10143;
	            values[valuesById[10144] = "ATOM_PRESENCE_NOTIFY_EVENT"] = 10144;
	            values[valuesById[10145] = "ATOM_GBA_EVENT"] = 10145;
	            values[valuesById[10146] = "ATOM_PER_SIM_STATUS"] = 10146;
	            values[valuesById[10147] = "ATOM_GPU_WORK_PER_UID"] = 10147;
	            values[valuesById[10148] = "ATOM_PERSISTENT_URI_PERMISSIONS_AMOUNT_PER_PACKAGE"] = 10148;
	            values[valuesById[10149] = "ATOM_SIGNED_PARTITION_INFO"] = 10149;
	            values[valuesById[10150] = "ATOM_PINNED_FILE_SIZES_PER_PACKAGE"] = 10150;
	            values[valuesById[10151] = "ATOM_PENDING_INTENTS_PER_PACKAGE"] = 10151;
	            values[valuesById[10152] = "ATOM_USER_INFO"] = 10152;
	            values[valuesById[10153] = "ATOM_TELEPHONY_NETWORK_REQUESTS_V2"] = 10153;
	            values[valuesById[10154] = "ATOM_DEVICE_TELEPHONY_PROPERTIES"] = 10154;
	            values[valuesById[10155] = "ATOM_REMOTE_KEY_PROVISIONING_ERROR_COUNTS"] = 10155;
	            values[valuesById[10156] = "ATOM_SAFETY_STATE"] = 10156;
	            values[valuesById[10157] = "ATOM_INCOMING_MMS"] = 10157;
	            values[valuesById[10158] = "ATOM_OUTGOING_MMS"] = 10158;
	            values[valuesById[10160] = "ATOM_MULTI_USER_INFO"] = 10160;
	            values[valuesById[10161] = "ATOM_NETWORK_BPF_MAP_INFO"] = 10161;
	            values[valuesById[10162] = "ATOM_OUTGOING_SHORT_CODE_SMS"] = 10162;
	            values[valuesById[10163] = "ATOM_CONNECTIVITY_STATE_SAMPLE"] = 10163;
	            values[valuesById[10164] = "ATOM_NETWORK_SELECTION_REMATCH_REASONS_INFO"] = 10164;
	            values[valuesById[10165] = "ATOM_GAME_MODE_INFO"] = 10165;
	            values[valuesById[10166] = "ATOM_GAME_MODE_CONFIGURATION"] = 10166;
	            values[valuesById[10167] = "ATOM_GAME_MODE_LISTENER"] = 10167;
	            values[valuesById[10168] = "ATOM_NETWORK_SLICE_REQUEST_COUNT"] = 10168;
	            values[valuesById[10169] = "ATOM_WS_TILE_SNAPSHOT"] = 10169;
	            values[valuesById[10170] = "ATOM_WS_ACTIVE_WATCH_FACE_COMPLICATION_SET_SNAPSHOT"] = 10170;
	            values[valuesById[10171] = "ATOM_PROCESS_STATE"] = 10171;
	            values[valuesById[10172] = "ATOM_PROCESS_ASSOCIATION"] = 10172;
	            values[valuesById[10173] = "ATOM_ADPF_SYSTEM_COMPONENT_INFO"] = 10173;
	            values[valuesById[10174] = "ATOM_NOTIFICATION_MEMORY_USE"] = 10174;
	            values[valuesById[10175] = "ATOM_HDR_CAPABILITIES"] = 10175;
	            values[valuesById[10176] = "ATOM_WS_FAVOURITE_WATCH_FACE_LIST_SNAPSHOT"] = 10176;
	            values[valuesById[820] = "ATOM_ADAPTIVE_AUTH_UNLOCK_AFTER_LOCK_REPORTED"] = 820;
	            values[valuesById[772] = "ATOM_THERMAL_STATUS_CALLED"] = 772;
	            values[valuesById[773] = "ATOM_THERMAL_HEADROOM_CALLED"] = 773;
	            values[valuesById[774] = "ATOM_THERMAL_HEADROOM_THRESHOLDS_CALLED"] = 774;
	            values[valuesById[839] = "ATOM_ADPF_HINT_SESSION_TID_CLEANUP"] = 839;
	            values[valuesById[10201] = "ATOM_THERMAL_HEADROOM_THRESHOLDS"] = 10201;
	            values[valuesById[10218] = "ATOM_ADPF_SESSION_SNAPSHOT"] = 10218;
	            values[valuesById[483] = "ATOM_JSSCRIPTENGINE_LATENCY_REPORTED"] = 483;
	            values[valuesById[435] = "ATOM_AD_SERVICES_API_CALLED"] = 435;
	            values[valuesById[436] = "ATOM_AD_SERVICES_MESUREMENT_REPORTS_UPLOADED"] = 436;
	            values[valuesById[490] = "ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STATUS_REPORTED"] = 490;
	            values[valuesById[502] = "ATOM_MOBILE_DATA_DOWNLOAD_DOWNLOAD_RESULT_REPORTED"] = 502;
	            values[valuesById[493] = "ATOM_AD_SERVICES_SETTINGS_USAGE_REPORTED"] = 493;
	            values[valuesById[496] = "ATOM_BACKGROUND_FETCH_PROCESS_REPORTED"] = 496;
	            values[valuesById[497] = "ATOM_UPDATE_CUSTOM_AUDIENCE_PROCESS_REPORTED"] = 497;
	            values[valuesById[498] = "ATOM_RUN_AD_BIDDING_PROCESS_REPORTED"] = 498;
	            values[valuesById[499] = "ATOM_RUN_AD_SCORING_PROCESS_REPORTED"] = 499;
	            values[valuesById[500] = "ATOM_RUN_AD_SELECTION_PROCESS_REPORTED"] = 500;
	            values[valuesById[501] = "ATOM_RUN_AD_BIDDING_PER_CA_PROCESS_REPORTED"] = 501;
	            values[valuesById[503] = "ATOM_MOBILE_DATA_DOWNLOAD_FILE_GROUP_STORAGE_STATS_REPORTED"] = 503;
	            values[valuesById[512] = "ATOM_AD_SERVICES_MEASUREMENT_REGISTRATIONS"] = 512;
	            values[valuesById[535] = "ATOM_AD_SERVICES_GET_TOPICS_REPORTED"] = 535;
	            values[valuesById[536] = "ATOM_AD_SERVICES_EPOCH_COMPUTATION_GET_TOP_TOPICS_REPORTED"] = 536;
	            values[valuesById[537] = "ATOM_AD_SERVICES_EPOCH_COMPUTATION_CLASSIFIER_REPORTED"] = 537;
	            values[valuesById[598] = "ATOM_AD_SERVICES_BACK_COMPAT_GET_TOPICS_REPORTED"] = 598;
	            values[valuesById[599] = "ATOM_AD_SERVICES_BACK_COMPAT_EPOCH_COMPUTATION_CLASSIFIER_REPORTED"] = 599;
	            values[valuesById[640] = "ATOM_AD_SERVICES_MEASUREMENT_DEBUG_KEYS"] = 640;
	            values[valuesById[662] = "ATOM_AD_SERVICES_ERROR_REPORTED"] = 662;
	            values[valuesById[663] = "ATOM_AD_SERVICES_BACKGROUND_JOBS_EXECUTION_REPORTED"] = 663;
	            values[valuesById[673] = "ATOM_AD_SERVICES_MEASUREMENT_DELAYED_SOURCE_REGISTRATION"] = 673;
	            values[valuesById[674] = "ATOM_AD_SERVICES_MEASUREMENT_ATTRIBUTION"] = 674;
	            values[valuesById[675] = "ATOM_AD_SERVICES_MEASUREMENT_JOBS"] = 675;
	            values[valuesById[676] = "ATOM_AD_SERVICES_MEASUREMENT_WIPEOUT"] = 676;
	            values[valuesById[695] = "ATOM_AD_SERVICES_MEASUREMENT_AD_ID_MATCH_FOR_DEBUG_KEYS"] = 695;
	            values[valuesById[697] = "ATOM_AD_SERVICES_ENROLLMENT_DATA_STORED"] = 697;
	            values[valuesById[698] = "ATOM_AD_SERVICES_ENROLLMENT_FILE_DOWNLOADED"] = 698;
	            values[valuesById[699] = "ATOM_AD_SERVICES_ENROLLMENT_MATCHED"] = 699;
	            values[valuesById[702] = "ATOM_AD_SERVICES_CONSENT_MIGRATED"] = 702;
	            values[valuesById[714] = "ATOM_AD_SERVICES_ENROLLMENT_FAILED"] = 714;
	            values[valuesById[756] = "ATOM_AD_SERVICES_MEASUREMENT_CLICK_VERIFICATION"] = 756;
	            values[valuesById[765] = "ATOM_AD_SERVICES_ENCRYPTION_KEY_FETCHED"] = 765;
	            values[valuesById[766] = "ATOM_AD_SERVICES_ENCRYPTION_KEY_DB_TRANSACTION_ENDED"] = 766;
	            values[valuesById[767] = "ATOM_DESTINATION_REGISTERED_BEACONS"] = 767;
	            values[valuesById[768] = "ATOM_REPORT_INTERACTION_API_CALLED"] = 768;
	            values[valuesById[769] = "ATOM_INTERACTION_REPORTING_TABLE_CLEARED"] = 769;
	            values[valuesById[788] = "ATOM_APP_MANIFEST_CONFIG_HELPER_CALLED"] = 788;
	            values[valuesById[793] = "ATOM_AD_FILTERING_PROCESS_JOIN_CA_REPORTED"] = 793;
	            values[valuesById[794] = "ATOM_AD_FILTERING_PROCESS_AD_SELECTION_REPORTED"] = 794;
	            values[valuesById[795] = "ATOM_AD_COUNTER_HISTOGRAM_UPDATER_REPORTED"] = 795;
	            values[valuesById[807] = "ATOM_SIGNATURE_VERIFICATION"] = 807;
	            values[valuesById[808] = "ATOM_K_ANON_IMMEDIATE_SIGN_JOIN_STATUS_REPORTED"] = 808;
	            values[valuesById[809] = "ATOM_K_ANON_BACKGROUND_JOB_STATUS_REPORTED"] = 809;
	            values[valuesById[810] = "ATOM_K_ANON_INITIALIZE_STATUS_REPORTED"] = 810;
	            values[valuesById[811] = "ATOM_K_ANON_SIGN_STATUS_REPORTED"] = 811;
	            values[valuesById[812] = "ATOM_K_ANON_JOIN_STATUS_REPORTED"] = 812;
	            values[valuesById[813] = "ATOM_K_ANON_KEY_ATTESTATION_STATUS_REPORTED"] = 813;
	            values[valuesById[814] = "ATOM_GET_AD_SELECTION_DATA_API_CALLED"] = 814;
	            values[valuesById[815] = "ATOM_GET_AD_SELECTION_DATA_BUYER_INPUT_GENERATED"] = 815;
	            values[valuesById[834] = "ATOM_BACKGROUND_JOB_SCHEDULING_REPORTED"] = 834;
	            values[valuesById[840] = "ATOM_TOPICS_ENCRYPTION_EPOCH_COMPUTATION_REPORTED"] = 840;
	            values[valuesById[841] = "ATOM_TOPICS_ENCRYPTION_GET_TOPICS_REPORTED"] = 841;
	            values[valuesById[842] = "ATOM_ADSERVICES_SHELL_COMMAND_CALLED"] = 842;
	            values[valuesById[843] = "ATOM_UPDATE_SIGNALS_API_CALLED"] = 843;
	            values[valuesById[844] = "ATOM_ENCODING_JOB_RUN"] = 844;
	            values[valuesById[845] = "ATOM_ENCODING_JS_FETCH"] = 845;
	            values[valuesById[846] = "ATOM_ENCODING_JS_EXECUTION"] = 846;
	            values[valuesById[847] = "ATOM_PERSIST_AD_SELECTION_RESULT_CALLED"] = 847;
	            values[valuesById[848] = "ATOM_SERVER_AUCTION_KEY_FETCH_CALLED"] = 848;
	            values[valuesById[849] = "ATOM_SERVER_AUCTION_BACKGROUND_KEY_FETCH_ENABLED"] = 849;
	            values[valuesById[864] = "ATOM_AD_SERVICES_MEASUREMENT_PROCESS_ODP_REGISTRATION"] = 864;
	            values[valuesById[865] = "ATOM_AD_SERVICES_MEASUREMENT_NOTIFY_REGISTRATION_TO_ODP"] = 865;
	            values[valuesById[876] = "ATOM_SELECT_ADS_FROM_OUTCOMES_API_CALLED"] = 876;
	            values[valuesById[877] = "ATOM_REPORT_IMPRESSION_API_CALLED"] = 877;
	            values[valuesById[885] = "ATOM_AD_SERVICES_ENROLLMENT_TRANSACTION_STATS"] = 885;
	            values[valuesById[706] = "ATOM_AI_WALLPAPERS_BUTTON_PRESSED"] = 706;
	            values[valuesById[707] = "ATOM_AI_WALLPAPERS_TEMPLATE_SELECTED"] = 707;
	            values[valuesById[708] = "ATOM_AI_WALLPAPERS_TERM_SELECTED"] = 708;
	            values[valuesById[709] = "ATOM_AI_WALLPAPERS_WALLPAPER_SET"] = 709;
	            values[valuesById[710] = "ATOM_AI_WALLPAPERS_SESSION_SUMMARY"] = 710;
	            values[valuesById[732] = "ATOM_APEX_INSTALLATION_REQUESTED"] = 732;
	            values[valuesById[733] = "ATOM_APEX_INSTALLATION_STAGED"] = 733;
	            values[valuesById[734] = "ATOM_APEX_INSTALLATION_ENDED"] = 734;
	            values[valuesById[385] = "ATOM_APP_SEARCH_SET_SCHEMA_STATS_REPORTED"] = 385;
	            values[valuesById[579] = "ATOM_APP_SEARCH_SCHEMA_MIGRATION_STATS_REPORTED"] = 579;
	            values[valuesById[825] = "ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_STATS_REPORTED"] = 825;
	            values[valuesById[826] = "ATOM_APP_SEARCH_USAGE_SEARCH_INTENT_RAW_QUERY_STATS_REPORTED"] = 826;
	            values[valuesById[332] = "ATOM_ART_DATUM_REPORTED"] = 332;
	            values[valuesById[550] = "ATOM_ART_DEVICE_DATUM_REPORTED"] = 550;
	            values[valuesById[565] = "ATOM_ART_DATUM_DELTA_REPORTED"] = 565;
	            values[valuesById[929] = "ATOM_ART_DEX2OAT_REPORTED"] = 929;
	            values[valuesById[10205] = "ATOM_ART_DEVICE_STATUS"] = 10205;
	            values[valuesById[467] = "ATOM_BACKGROUND_DEXOPT_JOB_ENDED"] = 467;
	            values[valuesById[883] = "ATOM_PREREBOOT_DEXOPT_JOB_ENDED"] = 883;
	            values[valuesById[366] = "ATOM_ODREFRESH_REPORTED"] = 366;
	            values[valuesById[548] = "ATOM_ODSIGN_REPORTED"] = 548;
	            values[valuesById[603] = "ATOM_AUTOFILL_UI_EVENT_REPORTED"] = 603;
	            values[valuesById[604] = "ATOM_AUTOFILL_FILL_REQUEST_REPORTED"] = 604;
	            values[valuesById[605] = "ATOM_AUTOFILL_FILL_RESPONSE_REPORTED"] = 605;
	            values[valuesById[606] = "ATOM_AUTOFILL_SAVE_EVENT_REPORTED"] = 606;
	            values[valuesById[607] = "ATOM_AUTOFILL_SESSION_COMMITTED"] = 607;
	            values[valuesById[659] = "ATOM_AUTOFILL_FIELD_CLASSIFICATION_EVENT_REPORTED"] = 659;
	            values[valuesById[770] = "ATOM_CAR_RECENTS_EVENT_REPORTED"] = 770;
	            values[valuesById[797] = "ATOM_CAR_CALM_MODE_EVENT_REPORTED"] = 797;
	            values[valuesById[852] = "ATOM_CAR_WAKEUP_FROM_SUSPEND_REPORTED"] = 852;
	            values[valuesById[655] = "ATOM_PLUGIN_INITIALIZED"] = 655;
	            values[valuesById[613] = "ATOM_BLUETOOTH_HASHED_DEVICE_NAME_REPORTED"] = 613;
	            values[valuesById[614] = "ATOM_BLUETOOTH_L2CAP_COC_CLIENT_CONNECTION"] = 614;
	            values[valuesById[615] = "ATOM_BLUETOOTH_L2CAP_COC_SERVER_CONNECTION"] = 615;
	            values[valuesById[656] = "ATOM_BLUETOOTH_LE_SESSION_CONNECTED"] = 656;
	            values[valuesById[666] = "ATOM_RESTRICTED_BLUETOOTH_DEVICE_NAME_REPORTED"] = 666;
	            values[valuesById[696] = "ATOM_BLUETOOTH_PROFILE_CONNECTION_ATTEMPTED"] = 696;
	            values[valuesById[781] = "ATOM_BLUETOOTH_CONTENT_PROFILE_ERROR_REPORTED"] = 781;
	            values[valuesById[782] = "ATOM_BLUETOOTH_RFCOMM_CONNECTION_ATTEMPTED"] = 782;
	            values[valuesById[862] = "ATOM_REMOTE_DEVICE_INFORMATION_WITH_METRIC_ID"] = 862;
	            values[valuesById[870] = "ATOM_LE_APP_SCAN_STATE_CHANGED"] = 870;
	            values[valuesById[871] = "ATOM_LE_RADIO_SCAN_STOPPED"] = 871;
	            values[valuesById[872] = "ATOM_LE_SCAN_RESULT_RECEIVED"] = 872;
	            values[valuesById[873] = "ATOM_LE_SCAN_ABUSED"] = 873;
	            values[valuesById[874] = "ATOM_LE_ADV_STATE_CHANGED"] = 874;
	            values[valuesById[875] = "ATOM_LE_ADV_ERROR_REPORTED"] = 875;
	            values[valuesById[904] = "ATOM_A2DP_SESSION_REPORTED"] = 904;
	            values[valuesById[916] = "ATOM_BLUETOOTH_CROSS_LAYER_EVENT_REPORTED"] = 916;
	            values[valuesById[927] = "ATOM_BROADCAST_AUDIO_SESSION_REPORTED"] = 927;
	            values[valuesById[928] = "ATOM_BROADCAST_AUDIO_SYNC_REPORTED"] = 928;
	            values[valuesById[982] = "ATOM_BLUETOOTH_RFCOMM_CONNECTION_REPORTED_AT_CLOSE"] = 982;
	            values[valuesById[900] = "ATOM_CAMERA_FEATURE_COMBINATION_QUERY_EVENT"] = 900;
	            values[valuesById[650] = "ATOM_DAILY_KEEPALIVE_INFO_REPORTED"] = 650;
	            values[valuesById[779] = "ATOM_NETWORK_REQUEST_STATE_CHANGED"] = 779;
	            values[valuesById[925] = "ATOM_TETHERING_ACTIVE_SESSIONS_REPORTED"] = 925;
	            values[valuesById[783] = "ATOM_NETWORK_STATS_RECORDER_FILE_OPERATED"] = 783;
	            values[valuesById[979] = "ATOM_CORE_NETWORKING_TERRIBLE_ERROR_OCCURRED"] = 979;
	            values[valuesById[777] = "ATOM_APF_SESSION_INFO_REPORTED"] = 777;
	            values[valuesById[778] = "ATOM_IP_CLIENT_RA_INFO_REPORTED"] = 778;
	            values[valuesById[850] = "ATOM_VPN_CONNECTION_STATE_CHANGED"] = 850;
	            values[valuesById[851] = "ATOM_VPN_CONNECTION_REPORTED"] = 851;
	            values[valuesById[10199] = "ATOM_CPU_POLICY"] = 10199;
	            values[valuesById[585] = "ATOM_CREDENTIAL_MANAGER_API_CALLED"] = 585;
	            values[valuesById[651] = "ATOM_CREDENTIAL_MANAGER_INIT_PHASE_REPORTED"] = 651;
	            values[valuesById[652] = "ATOM_CREDENTIAL_MANAGER_CANDIDATE_PHASE_REPORTED"] = 652;
	            values[valuesById[653] = "ATOM_CREDENTIAL_MANAGER_FINAL_PHASE_REPORTED"] = 653;
	            values[valuesById[667] = "ATOM_CREDENTIAL_MANAGER_TOTAL_REPORTED"] = 667;
	            values[valuesById[668] = "ATOM_CREDENTIAL_MANAGER_FINALNOUID_REPORTED"] = 668;
	            values[valuesById[669] = "ATOM_CREDENTIAL_MANAGER_GET_REPORTED"] = 669;
	            values[valuesById[670] = "ATOM_CREDENTIAL_MANAGER_AUTH_CLICK_REPORTED"] = 670;
	            values[valuesById[671] = "ATOM_CREDENTIAL_MANAGER_APIV2_CALLED"] = 671;
	            values[valuesById[703] = "ATOM_CRONET_ENGINE_CREATED"] = 703;
	            values[valuesById[704] = "ATOM_CRONET_TRAFFIC_REPORTED"] = 704;
	            values[valuesById[762] = "ATOM_CRONET_ENGINE_BUILDER_INITIALIZED"] = 762;
	            values[valuesById[763] = "ATOM_CRONET_HTTP_FLAGS_INITIALIZED"] = 763;
	            values[valuesById[764] = "ATOM_CRONET_INITIALIZED"] = 764;
	            values[valuesById[818] = "ATOM_DESKTOP_MODE_UI_CHANGED"] = 818;
	            values[valuesById[819] = "ATOM_DESKTOP_MODE_SESSION_TASK_UPDATE"] = 819;
	            values[valuesById[726] = "ATOM_DEVICE_LOCK_CHECK_IN_REQUEST_REPORTED"] = 726;
	            values[valuesById[727] = "ATOM_DEVICE_LOCK_PROVISIONING_COMPLETE_REPORTED"] = 727;
	            values[valuesById[728] = "ATOM_DEVICE_LOCK_KIOSK_APP_REQUEST_REPORTED"] = 728;
	            values[valuesById[789] = "ATOM_DEVICE_LOCK_CHECK_IN_RETRY_REPORTED"] = 789;
	            values[valuesById[790] = "ATOM_DEVICE_LOCK_PROVISION_FAILURE_REPORTED"] = 790;
	            values[valuesById[791] = "ATOM_DEVICE_LOCK_LOCK_UNLOCK_DEVICE_FAILURE_REPORTED"] = 791;
	            values[valuesById[10216] = "ATOM_DEVICE_POLICY_MANAGEMENT_MODE"] = 10216;
	            values[valuesById[10217] = "ATOM_DEVICE_POLICY_STATE"] = 10217;
	            values[valuesById[792] = "ATOM_DISPLAY_MODE_DIRECTOR_VOTE_CHANGED"] = 792;
	            values[valuesById[806] = "ATOM_EXTERNAL_DISPLAY_STATE_CHANGED"] = 806;
	            values[valuesById[657] = "ATOM_DND_STATE_CHANGED"] = 657;
	            values[valuesById[705] = "ATOM_DREAM_SETTING_CHANGED"] = 705;
	            values[valuesById[10192] = "ATOM_DREAM_SETTING_SNAPSHOT"] = 10192;
	            values[valuesById[528] = "ATOM_EXPRESS_EVENT_REPORTED"] = 528;
	            values[valuesById[593] = "ATOM_EXPRESS_HISTOGRAM_SAMPLE_REPORTED"] = 593;
	            values[valuesById[644] = "ATOM_EXPRESS_UID_EVENT_REPORTED"] = 644;
	            values[valuesById[658] = "ATOM_EXPRESS_UID_HISTOGRAM_SAMPLE_REPORTED"] = 658;
	            values[valuesById[712] = "ATOM_FEDERATED_COMPUTE_API_CALLED"] = 712;
	            values[valuesById[771] = "ATOM_FEDERATED_COMPUTE_TRAINING_EVENT_REPORTED"] = 771;
	            values[valuesById[838] = "ATOM_EXAMPLE_ITERATOR_NEXT_LATENCY_REPORTED"] = 838;
	            values[valuesById[631] = "ATOM_FULL_SCREEN_INTENT_LAUNCHED"] = 631;
	            values[valuesById[632] = "ATOM_BAL_ALLOWED"] = 632;
	            values[valuesById[685] = "ATOM_IN_TASK_ACTIVITY_STARTED"] = 685;
	            values[valuesById[10189] = "ATOM_CACHED_APPS_HIGH_WATERMARK"] = 10189;
	            values[valuesById[718] = "ATOM_STYLUS_PREDICTION_METRICS_REPORTED"] = 718;
	            values[valuesById[725] = "ATOM_USER_RISK_EVENT_REPORTED"] = 725;
	            values[valuesById[729] = "ATOM_MEDIA_PROJECTION_STATE_CHANGED"] = 729;
	            values[valuesById[730] = "ATOM_MEDIA_PROJECTION_TARGET_CHANGED"] = 730;
	            values[valuesById[853] = "ATOM_EXCESSIVE_BINDER_PROXY_COUNT_REPORTED"] = 853;
	            values[valuesById[10200] = "ATOM_PROXY_BYTES_TRANSFER_BY_FG_BG"] = 10200;
	            values[valuesById[10204] = "ATOM_MOBILE_BYTES_TRANSFER_BY_PROC_STATE"] = 10204;
	            values[valuesById[817] = "ATOM_BIOMETRIC_FRR_NOTIFICATION"] = 817;
	            values[valuesById[830] = "ATOM_SENSITIVE_CONTENT_MEDIA_PROJECTION_SESSION"] = 830;
	            values[valuesById[831] = "ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_SESSION"] = 831;
	            values[valuesById[832] = "ATOM_SENSITIVE_NOTIFICATION_APP_PROTECTION_APPLIED"] = 832;
	            values[valuesById[833] = "ATOM_SENSITIVE_NOTIFICATION_REDACTION"] = 833;
	            values[valuesById[835] = "ATOM_SENSITIVE_CONTENT_APP_PROTECTION"] = 835;
	            values[valuesById[866] = "ATOM_APP_RESTRICTION_STATE_CHANGED"] = 866;
	            values[valuesById[584] = "ATOM_APPLICATION_GRAMMATICAL_INFLECTION_CHANGED"] = 584;
	            values[valuesById[816] = "ATOM_SYSTEM_GRAMMATICAL_INFLECTION_CHANGED"] = 816;
	            values[valuesById[701] = "ATOM_HDMI_EARC_STATUS_REPORTED"] = 701;
	            values[valuesById[724] = "ATOM_HDMI_SOUNDBAR_MODE_STATUS_REPORTED"] = 724;
	            values[valuesById[616] = "ATOM_HEALTH_CONNECT_API_CALLED"] = 616;
	            values[valuesById[617] = "ATOM_HEALTH_CONNECT_USAGE_STATS"] = 617;
	            values[valuesById[618] = "ATOM_HEALTH_CONNECT_STORAGE_STATS"] = 618;
	            values[valuesById[643] = "ATOM_HEALTH_CONNECT_API_INVOKED"] = 643;
	            values[valuesById[654] = "ATOM_EXERCISE_ROUTE_API_CALLED"] = 654;
	            values[valuesById[623] = "ATOM_HEALTH_CONNECT_UI_IMPRESSION"] = 623;
	            values[valuesById[624] = "ATOM_HEALTH_CONNECT_UI_INTERACTION"] = 624;
	            values[valuesById[625] = "ATOM_HEALTH_CONNECT_APP_OPENED_REPORTED"] = 625;
	            values[valuesById[761] = "ATOM_HOTWORD_EGRESS_SIZE_ATOM_REPORTED"] = 761;
	            values[valuesById[678] = "ATOM_IKE_SESSION_TERMINATED"] = 678;
	            values[valuesById[760] = "ATOM_IKE_LIVENESS_CHECK_SESSION_VALIDATED"] = 760;
	            values[valuesById[821] = "ATOM_NEGOTIATED_SECURITY_ASSOCIATION"] = 821;
	            values[valuesById[682] = "ATOM_KEYBOARD_CONFIGURED"] = 682;
	            values[valuesById[683] = "ATOM_KEYBOARD_SYSTEMS_EVENT_REPORTED"] = 683;
	            values[valuesById[686] = "ATOM_INPUTDEVICE_USAGE_REPORTED"] = 686;
	            values[valuesById[10191] = "ATOM_TOUCHPAD_USAGE"] = 10191;
	            values[valuesById[754] = "ATOM_KERNEL_OOM_KILL_OCCURRED"] = 754;
	            values[valuesById[633] = "ATOM_EMERGENCY_STATE_CHANGED"] = 633;
	            values[valuesById[868] = "ATOM_CHRE_SIGNIFICANT_MOTION_STATE_CHANGED"] = 868;
	            values[valuesById[600] = "ATOM_MEDIA_CODEC_RECLAIM_REQUEST_COMPLETED"] = 600;
	            values[valuesById[641] = "ATOM_MEDIA_CODEC_STARTED"] = 641;
	            values[valuesById[642] = "ATOM_MEDIA_CODEC_STOPPED"] = 642;
	            values[valuesById[684] = "ATOM_MEDIA_CODEC_RENDERED"] = 684;
	            values[valuesById[798] = "ATOM_MEDIA_EDITING_ENDED_REPORTED"] = 798;
	            values[valuesById[10181] = "ATOM_MTE_STATE"] = 10181;
	            values[valuesById[855] = "ATOM_NFC_OBSERVE_MODE_STATE_CHANGED"] = 855;
	            values[valuesById[856] = "ATOM_NFC_FIELD_CHANGED"] = 856;
	            values[valuesById[857] = "ATOM_NFC_POLLING_LOOP_NOTIFICATION_REPORTED"] = 857;
	            values[valuesById[858] = "ATOM_NFC_PROPRIETARY_CAPABILITIES_REPORTED"] = 858;
	            values[valuesById[711] = "ATOM_ONDEVICEPERSONALIZATION_API_CALLED"] = 711;
	            values[valuesById[863] = "ATOM_COMPONENT_STATE_CHANGED_REPORTED"] = 863;
	            values[valuesById[859] = "ATOM_PDF_LOAD_REPORTED"] = 859;
	            values[valuesById[860] = "ATOM_PDF_API_USAGE_REPORTED"] = 860;
	            values[valuesById[861] = "ATOM_PDF_SEARCH_REPORTED"] = 861;
	            values[valuesById[645] = "ATOM_PERMISSION_RATIONALE_DIALOG_VIEWED"] = 645;
	            values[valuesById[646] = "ATOM_PERMISSION_RATIONALE_DIALOG_ACTION_REPORTED"] = 646;
	            values[valuesById[647] = "ATOM_APP_DATA_SHARING_UPDATES_NOTIFICATION_INTERACTION"] = 647;
	            values[valuesById[648] = "ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_VIEWED"] = 648;
	            values[valuesById[649] = "ATOM_APP_DATA_SHARING_UPDATES_FRAGMENT_ACTION_REPORTED"] = 649;
	            values[valuesById[827] = "ATOM_ENHANCED_CONFIRMATION_DIALOG_RESULT_REPORTED"] = 827;
	            values[valuesById[828] = "ATOM_ENHANCED_CONFIRMATION_RESTRICTION_CLEARED"] = 828;
	            values[valuesById[886] = "ATOM_PHOTOPICKER_SESSION_INFO_REPORTED"] = 886;
	            values[valuesById[887] = "ATOM_PHOTOPICKER_API_INFO_REPORTED"] = 887;
	            values[valuesById[888] = "ATOM_PHOTOPICKER_UI_EVENT_LOGGED"] = 888;
	            values[valuesById[889] = "ATOM_PHOTOPICKER_MEDIA_ITEM_STATUS_REPORTED"] = 889;
	            values[valuesById[890] = "ATOM_PHOTOPICKER_PREVIEW_INFO_LOGGED"] = 890;
	            values[valuesById[891] = "ATOM_PHOTOPICKER_MENU_INTERACTION_LOGGED"] = 891;
	            values[valuesById[892] = "ATOM_PHOTOPICKER_BANNER_INTERACTION_LOGGED"] = 892;
	            values[valuesById[893] = "ATOM_PHOTOPICKER_MEDIA_LIBRARY_INFO_LOGGED"] = 893;
	            values[valuesById[894] = "ATOM_PHOTOPICKER_PAGE_INFO_LOGGED"] = 894;
	            values[valuesById[895] = "ATOM_PHOTOPICKER_MEDIA_GRID_SYNC_INFO_REPORTED"] = 895;
	            values[valuesById[896] = "ATOM_PHOTOPICKER_ALBUM_SYNC_INFO_REPORTED"] = 896;
	            values[valuesById[897] = "ATOM_PHOTOPICKER_SEARCH_INFO_REPORTED"] = 897;
	            values[valuesById[898] = "ATOM_SEARCH_DATA_EXTRACTION_DETAILS_REPORTED"] = 898;
	            values[valuesById[899] = "ATOM_EMBEDDED_PHOTOPICKER_INFO_REPORTED"] = 899;
	            values[valuesById[9999] = "ATOM_ATOM_9999"] = 9999;
	            values[valuesById[99999] = "ATOM_ATOM_99999"] = 99999;
	            values[valuesById[776] = "ATOM_SCREEN_OFF_REPORTED"] = 776;
	            values[valuesById[836] = "ATOM_SCREEN_TIMEOUT_OVERRIDE_REPORTED"] = 836;
	            values[valuesById[837] = "ATOM_SCREEN_INTERACTIVE_SESSION_REPORTED"] = 837;
	            values[valuesById[867] = "ATOM_SCREEN_DIM_REPORTED"] = 867;
	            values[valuesById[784] = "ATOM_MEDIA_PROVIDER_DATABASE_ROLLBACK_REPORTED"] = 784;
	            values[valuesById[785] = "ATOM_BACKUP_SETUP_STATUS_REPORTED"] = 785;
	            values[valuesById[664] = "ATOM_RKPD_POOL_STATS"] = 664;
	            values[valuesById[665] = "ATOM_RKPD_CLIENT_OPERATION"] = 665;
	            values[valuesById[488] = "ATOM_SANDBOX_API_CALLED"] = 488;
	            values[valuesById[735] = "ATOM_SANDBOX_ACTIVITY_EVENT_OCCURRED"] = 735;
	            values[valuesById[796] = "ATOM_SDK_SANDBOX_RESTRICTED_ACCESS_IN_SESSION"] = 796;
	            values[valuesById[10159] = "ATOM_SANDBOX_SDK_STORAGE"] = 10159;
	            values[valuesById[799] = "ATOM_SELINUX_AUDIT_LOG"] = 799;
	            values[valuesById[622] = "ATOM_SETTINGS_SPA_REPORTED"] = 622;
	            values[valuesById[660] = "ATOM_TEST_EXTENSION_ATOM_REPORTED"] = 660;
	            values[valuesById[672] = "ATOM_TEST_RESTRICTED_ATOM_REPORTED"] = 672;
	            values[valuesById[752] = "ATOM_STATS_SOCKET_LOSS_REPORTED"] = 752;
	            values[valuesById[611] = "ATOM_LOCKSCREEN_SHORTCUT_SELECTED"] = 611;
	            values[valuesById[612] = "ATOM_LOCKSCREEN_SHORTCUT_TRIGGERED"] = 612;
	            values[valuesById[716] = "ATOM_LAUNCHER_IMPRESSION_EVENT_V2"] = 716;
	            values[valuesById[753] = "ATOM_DISPLAY_SWITCH_LATENCY_TRACKED"] = 753;
	            values[valuesById[829] = "ATOM_NOTIFICATION_LISTENER_SERVICE"] = 829;
	            values[valuesById[869] = "ATOM_NAV_HANDLE_TOUCH_POINTS"] = 869;
	            values[valuesById[637] = "ATOM_EMERGENCY_NUMBER_DIALED"] = 637;
	            values[valuesById[713] = "ATOM_CELLULAR_RADIO_POWER_STATE_CHANGED"] = 713;
	            values[valuesById[10180] = "ATOM_EMERGENCY_NUMBERS_INFO"] = 10180;
	            values[valuesById[10207] = "ATOM_DATA_NETWORK_VALIDATION"] = 10207;
	            values[valuesById[854] = "ATOM_DATA_RAT_STATE_CHANGED"] = 854;
	            values[valuesById[882] = "ATOM_CONNECTED_CHANNEL_CHANGED"] = 882;
	            values[valuesById[634] = "ATOM_QUALIFIED_RAT_LIST_CHANGED"] = 634;
	            values[valuesById[635] = "ATOM_QNS_IMS_CALL_DROP_STATS"] = 635;
	            values[valuesById[636] = "ATOM_QNS_FALLBACK_RESTRICTION_CHANGED"] = 636;
	            values[valuesById[10177] = "ATOM_QNS_RAT_PREFERENCE_MISMATCH_INFO"] = 10177;
	            values[valuesById[10178] = "ATOM_QNS_HANDOVER_TIME_MILLIS"] = 10178;
	            values[valuesById[10179] = "ATOM_QNS_HANDOVER_PINGPONG"] = 10179;
	            values[valuesById[10182] = "ATOM_SATELLITE_CONTROLLER"] = 10182;
	            values[valuesById[10183] = "ATOM_SATELLITE_SESSION"] = 10183;
	            values[valuesById[10184] = "ATOM_SATELLITE_INCOMING_DATAGRAM"] = 10184;
	            values[valuesById[10185] = "ATOM_SATELLITE_OUTGOING_DATAGRAM"] = 10185;
	            values[valuesById[10186] = "ATOM_SATELLITE_PROVISION"] = 10186;
	            values[valuesById[10187] = "ATOM_SATELLITE_SOS_MESSAGE_RECOMMENDER"] = 10187;
	            values[valuesById[10211] = "ATOM_CARRIER_ROAMING_SATELLITE_SESSION"] = 10211;
	            values[valuesById[10212] = "ATOM_CARRIER_ROAMING_SATELLITE_CONTROLLER_STATS"] = 10212;
	            values[valuesById[10213] = "ATOM_CONTROLLER_STATS_PER_PACKAGE"] = 10213;
	            values[valuesById[10214] = "ATOM_SATELLITE_ENTITLEMENT"] = 10214;
	            values[valuesById[10215] = "ATOM_SATELLITE_CONFIG_UPDATER"] = 10215;
	            values[valuesById[10219] = "ATOM_SATELLITE_ACCESS_CONTROLLER"] = 10219;
	            values[valuesById[800] = "ATOM_CELLULAR_IDENTIFIER_DISCLOSED"] = 800;
	            values[valuesById[738] = "ATOM_THREADNETWORK_TELEMETRY_DATA_REPORTED"] = 738;
	            values[valuesById[739] = "ATOM_THREADNETWORK_TOPO_ENTRY_REPEATED"] = 739;
	            values[valuesById[740] = "ATOM_THREADNETWORK_DEVICE_INFO_REPORTED"] = 740;
	            values[valuesById[775] = "ATOM_BOOT_INTEGRITY_INFO_REPORTED"] = 775;
	            values[valuesById[679] = "ATOM_TV_LOW_POWER_STANDBY_POLICY"] = 679;
	            values[valuesById[717] = "ATOM_EXTERNAL_TV_INPUT_EVENT"] = 717;
	            values[valuesById[10188] = "ATOM_UWB_ACTIVITY_INFO"] = 10188;
	            values[valuesById[721] = "ATOM_MEDIATOR_UPDATED"] = 721;
	            values[valuesById[10196] = "ATOM_SYSPROXY_BLUETOOTH_BYTES_TRANSFER"] = 10196;
	            values[valuesById[786] = "ATOM_SYSPROXY_CONNECTION_UPDATED"] = 786;
	            values[valuesById[608] = "ATOM_MEDIA_ACTION_REPORTED"] = 608;
	            values[valuesById[609] = "ATOM_MEDIA_CONTROLS_LAUNCHED"] = 609;
	            values[valuesById[677] = "ATOM_MEDIA_SESSION_STATE_CHANGED"] = 677;
	            values[valuesById[757] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_DEVICE_SCAN_API_LATENCY"] = 757;
	            values[valuesById[758] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_SASS_DEVICE_UNAVAILABLE"] = 758;
	            values[valuesById[759] = "ATOM_WEAR_MEDIA_OUTPUT_SWITCHER_FASTPAIR_API_TIMEOUT"] = 759;
	            values[valuesById[715] = "ATOM_WEAR_MODE_STATE_CHANGED"] = 715;
	            values[valuesById[736] = "ATOM_RENDERER_INITIALIZED"] = 736;
	            values[valuesById[737] = "ATOM_SCHEMA_VERSION_RECEIVED"] = 737;
	            values[valuesById[741] = "ATOM_LAYOUT_INSPECTED"] = 741;
	            values[valuesById[742] = "ATOM_LAYOUT_EXPRESSION_INSPECTED"] = 742;
	            values[valuesById[743] = "ATOM_LAYOUT_ANIMATIONS_INSPECTED"] = 743;
	            values[valuesById[744] = "ATOM_MATERIAL_COMPONENTS_INSPECTED"] = 744;
	            values[valuesById[745] = "ATOM_TILE_REQUESTED"] = 745;
	            values[valuesById[746] = "ATOM_STATE_RESPONSE_RECEIVED"] = 746;
	            values[valuesById[747] = "ATOM_TILE_RESPONSE_RECEIVED"] = 747;
	            values[valuesById[748] = "ATOM_INFLATION_FINISHED"] = 748;
	            values[valuesById[749] = "ATOM_INFLATION_FAILED"] = 749;
	            values[valuesById[750] = "ATOM_IGNORED_INFLATION_FAILURES_REPORTED"] = 750;
	            values[valuesById[751] = "ATOM_DRAWABLE_RENDERED"] = 751;
	            values[valuesById[619] = "ATOM_WEAR_ADAPTIVE_SUSPEND_STATS_REPORTED"] = 619;
	            values[valuesById[620] = "ATOM_WEAR_POWER_ANOMALY_SERVICE_OPERATIONAL_STATS_REPORTED"] = 620;
	            values[valuesById[621] = "ATOM_WEAR_POWER_ANOMALY_SERVICE_EVENT_STATS_REPORTED"] = 621;
	            values[valuesById[610] = "ATOM_WS_WEAR_TIME_SESSION"] = 610;
	            values[valuesById[626] = "ATOM_WS_INCOMING_CALL_ACTION_REPORTED"] = 626;
	            values[valuesById[627] = "ATOM_WS_CALL_DISCONNECTION_REPORTED"] = 627;
	            values[valuesById[628] = "ATOM_WS_CALL_DURATION_REPORTED"] = 628;
	            values[valuesById[629] = "ATOM_WS_CALL_USER_EXPERIENCE_LATENCY_REPORTED"] = 629;
	            values[valuesById[630] = "ATOM_WS_CALL_INTERACTION_REPORTED"] = 630;
	            values[valuesById[787] = "ATOM_WS_ON_BODY_STATE_CHANGED"] = 787;
	            values[valuesById[802] = "ATOM_WS_WATCH_FACE_RESTRICTED_COMPLICATIONS_IMPACTED"] = 802;
	            values[valuesById[803] = "ATOM_WS_WATCH_FACE_DEFAULT_RESTRICTED_COMPLICATIONS_REMOVED"] = 803;
	            values[valuesById[804] = "ATOM_WS_COMPLICATIONS_IMPACTED_NOTIFICATION_EVENT_REPORTED"] = 804;
	            values[valuesById[10197] = "ATOM_WS_STANDALONE_MODE_SNAPSHOT"] = 10197;
	            values[valuesById[10206] = "ATOM_WS_FAVORITE_WATCH_FACE_SNAPSHOT"] = 10206;
	            values[valuesById[731] = "ATOM_WEAR_POWER_MENU_OPENED"] = 731;
	            values[valuesById[755] = "ATOM_WEAR_ASSISTANT_OPENED"] = 755;
	            values[valuesById[638] = "ATOM_WIFI_AWARE_NDP_REPORTED"] = 638;
	            values[valuesById[639] = "ATOM_WIFI_AWARE_ATTACH_REPORTED"] = 639;
	            values[valuesById[661] = "ATOM_WIFI_SELF_RECOVERY_TRIGGERED"] = 661;
	            values[valuesById[680] = "ATOM_SOFT_AP_STARTED"] = 680;
	            values[valuesById[681] = "ATOM_SOFT_AP_STOPPED"] = 681;
	            values[valuesById[687] = "ATOM_WIFI_LOCK_RELEASED"] = 687;
	            values[valuesById[688] = "ATOM_WIFI_LOCK_DEACTIVATED"] = 688;
	            values[valuesById[689] = "ATOM_WIFI_CONFIG_SAVED"] = 689;
	            values[valuesById[690] = "ATOM_WIFI_AWARE_RESOURCE_USING_CHANGED"] = 690;
	            values[valuesById[691] = "ATOM_WIFI_AWARE_HAL_API_CALLED"] = 691;
	            values[valuesById[692] = "ATOM_WIFI_LOCAL_ONLY_REQUEST_RECEIVED"] = 692;
	            values[valuesById[693] = "ATOM_WIFI_LOCAL_ONLY_REQUEST_SCAN_TRIGGERED"] = 693;
	            values[valuesById[694] = "ATOM_WIFI_THREAD_TASK_EXECUTED"] = 694;
	            values[valuesById[700] = "ATOM_WIFI_STATE_CHANGED"] = 700;
	            values[valuesById[719] = "ATOM_PNO_SCAN_STARTED"] = 719;
	            values[valuesById[720] = "ATOM_PNO_SCAN_STOPPED"] = 720;
	            values[valuesById[722] = "ATOM_WIFI_IS_UNUSABLE_REPORTED"] = 722;
	            values[valuesById[723] = "ATOM_WIFI_AP_CAPABILITIES_REPORTED"] = 723;
	            values[valuesById[805] = "ATOM_SOFT_AP_STATE_CHANGED"] = 805;
	            values[valuesById[884] = "ATOM_SCORER_PREDICTION_RESULT_REPORTED"] = 884;
	            values[valuesById[10190] = "ATOM_WIFI_AWARE_CAPABILITIES"] = 10190;
	            values[valuesById[10193] = "ATOM_WIFI_MODULE_INFO"] = 10193;
	            values[valuesById[10194] = "ATOM_WIFI_SETTING_INFO"] = 10194;
	            values[valuesById[10195] = "ATOM_WIFI_COMPLEX_SETTING_INFO"] = 10195;
	            values[valuesById[10198] = "ATOM_WIFI_CONFIGURED_NETWORK_INFO"] = 10198;
	            return values;
	        })();

	        protos.ProcessStatsConfig = (function() {

	            /**
	             * Properties of a ProcessStatsConfig.
	             * @memberof perfetto.protos
	             * @interface IProcessStatsConfig
	             * @property {Array.<perfetto.protos.ProcessStatsConfig.Quirks>|null} [quirks] ProcessStatsConfig quirks
	             * @property {boolean|null} [scanAllProcessesOnStart] ProcessStatsConfig scanAllProcessesOnStart
	             * @property {boolean|null} [recordThreadNames] ProcessStatsConfig recordThreadNames
	             * @property {number|null} [procStatsPollMs] ProcessStatsConfig procStatsPollMs
	             * @property {number|null} [procStatsCacheTtlMs] ProcessStatsConfig procStatsCacheTtlMs
	             * @property {boolean|null} [resolveProcessFds] ProcessStatsConfig resolveProcessFds
	             * @property {boolean|null} [scanSmapsRollup] ProcessStatsConfig scanSmapsRollup
	             * @property {boolean|null} [recordProcessAge] ProcessStatsConfig recordProcessAge
	             * @property {boolean|null} [recordProcessRuntime] ProcessStatsConfig recordProcessRuntime
	             */

	            /**
	             * Constructs a new ProcessStatsConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ProcessStatsConfig.
	             * @implements IProcessStatsConfig
	             * @constructor
	             * @param {perfetto.protos.IProcessStatsConfig=} [p] Properties to set
	             */
	            function ProcessStatsConfig(p) {
	                this.quirks = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ProcessStatsConfig quirks.
	             * @member {Array.<perfetto.protos.ProcessStatsConfig.Quirks>} quirks
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.quirks = $util.emptyArray;

	            /**
	             * ProcessStatsConfig scanAllProcessesOnStart.
	             * @member {boolean} scanAllProcessesOnStart
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.scanAllProcessesOnStart = false;

	            /**
	             * ProcessStatsConfig recordThreadNames.
	             * @member {boolean} recordThreadNames
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.recordThreadNames = false;

	            /**
	             * ProcessStatsConfig procStatsPollMs.
	             * @member {number} procStatsPollMs
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.procStatsPollMs = 0;

	            /**
	             * ProcessStatsConfig procStatsCacheTtlMs.
	             * @member {number} procStatsCacheTtlMs
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.procStatsCacheTtlMs = 0;

	            /**
	             * ProcessStatsConfig resolveProcessFds.
	             * @member {boolean} resolveProcessFds
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.resolveProcessFds = false;

	            /**
	             * ProcessStatsConfig scanSmapsRollup.
	             * @member {boolean} scanSmapsRollup
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.scanSmapsRollup = false;

	            /**
	             * ProcessStatsConfig recordProcessAge.
	             * @member {boolean} recordProcessAge
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.recordProcessAge = false;

	            /**
	             * ProcessStatsConfig recordProcessRuntime.
	             * @member {boolean} recordProcessRuntime
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             */
	            ProcessStatsConfig.prototype.recordProcessRuntime = false;

	            /**
	             * Creates a new ProcessStatsConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @static
	             * @param {perfetto.protos.IProcessStatsConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.ProcessStatsConfig} ProcessStatsConfig instance
	             */
	            ProcessStatsConfig.create = function create(properties) {
	                return new ProcessStatsConfig(properties);
	            };

	            /**
	             * Encodes the specified ProcessStatsConfig message. Does not implicitly {@link perfetto.protos.ProcessStatsConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @static
	             * @param {perfetto.protos.IProcessStatsConfig} m ProcessStatsConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ProcessStatsConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.quirks != null && m.quirks.length) {
	                    for (var i = 0; i < m.quirks.length; ++i)
	                        w.uint32(8).int32(m.quirks[i]);
	                }
	                if (m.scanAllProcessesOnStart != null && Object.hasOwnProperty.call(m, "scanAllProcessesOnStart"))
	                    w.uint32(16).bool(m.scanAllProcessesOnStart);
	                if (m.recordThreadNames != null && Object.hasOwnProperty.call(m, "recordThreadNames"))
	                    w.uint32(24).bool(m.recordThreadNames);
	                if (m.procStatsPollMs != null && Object.hasOwnProperty.call(m, "procStatsPollMs"))
	                    w.uint32(32).uint32(m.procStatsPollMs);
	                if (m.procStatsCacheTtlMs != null && Object.hasOwnProperty.call(m, "procStatsCacheTtlMs"))
	                    w.uint32(48).uint32(m.procStatsCacheTtlMs);
	                if (m.resolveProcessFds != null && Object.hasOwnProperty.call(m, "resolveProcessFds"))
	                    w.uint32(72).bool(m.resolveProcessFds);
	                if (m.scanSmapsRollup != null && Object.hasOwnProperty.call(m, "scanSmapsRollup"))
	                    w.uint32(80).bool(m.scanSmapsRollup);
	                if (m.recordProcessAge != null && Object.hasOwnProperty.call(m, "recordProcessAge"))
	                    w.uint32(88).bool(m.recordProcessAge);
	                if (m.recordProcessRuntime != null && Object.hasOwnProperty.call(m, "recordProcessRuntime"))
	                    w.uint32(96).bool(m.recordProcessRuntime);
	                return w;
	            };

	            /**
	             * Decodes a ProcessStatsConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ProcessStatsConfig} ProcessStatsConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ProcessStatsConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ProcessStatsConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.quirks && m.quirks.length))
	                                m.quirks = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.quirks.push(r.int32());
	                            } else
	                                m.quirks.push(r.int32());
	                            break;
	                        }
	                    case 2: {
	                            m.scanAllProcessesOnStart = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.recordThreadNames = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.procStatsPollMs = r.uint32();
	                            break;
	                        }
	                    case 6: {
	                            m.procStatsCacheTtlMs = r.uint32();
	                            break;
	                        }
	                    case 9: {
	                            m.resolveProcessFds = r.bool();
	                            break;
	                        }
	                    case 10: {
	                            m.scanSmapsRollup = r.bool();
	                            break;
	                        }
	                    case 11: {
	                            m.recordProcessAge = r.bool();
	                            break;
	                        }
	                    case 12: {
	                            m.recordProcessRuntime = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ProcessStatsConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ProcessStatsConfig} ProcessStatsConfig
	             */
	            ProcessStatsConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ProcessStatsConfig)
	                    return d;
	                var m = new $root.perfetto.protos.ProcessStatsConfig();
	                if (d.quirks) {
	                    if (!Array.isArray(d.quirks))
	                        throw TypeError(".perfetto.protos.ProcessStatsConfig.quirks: array expected");
	                    m.quirks = [];
	                    for (var i = 0; i < d.quirks.length; ++i) {
	                        switch (d.quirks[i]) {
	                        default:
	                            if (typeof d.quirks[i] === "number") {
	                                m.quirks[i] = d.quirks[i];
	                                break;
	                            }
	                        case "QUIRKS_UNSPECIFIED":
	                        case 0:
	                            m.quirks[i] = 0;
	                            break;
	                        case "DISABLE_INITIAL_DUMP":
	                        case 1:
	                            m.quirks[i] = 1;
	                            break;
	                        case "DISABLE_ON_DEMAND":
	                        case 2:
	                            m.quirks[i] = 2;
	                            break;
	                        }
	                    }
	                }
	                if (d.scanAllProcessesOnStart != null) {
	                    m.scanAllProcessesOnStart = Boolean(d.scanAllProcessesOnStart);
	                }
	                if (d.recordThreadNames != null) {
	                    m.recordThreadNames = Boolean(d.recordThreadNames);
	                }
	                if (d.procStatsPollMs != null) {
	                    m.procStatsPollMs = d.procStatsPollMs >>> 0;
	                }
	                if (d.procStatsCacheTtlMs != null) {
	                    m.procStatsCacheTtlMs = d.procStatsCacheTtlMs >>> 0;
	                }
	                if (d.resolveProcessFds != null) {
	                    m.resolveProcessFds = Boolean(d.resolveProcessFds);
	                }
	                if (d.scanSmapsRollup != null) {
	                    m.scanSmapsRollup = Boolean(d.scanSmapsRollup);
	                }
	                if (d.recordProcessAge != null) {
	                    m.recordProcessAge = Boolean(d.recordProcessAge);
	                }
	                if (d.recordProcessRuntime != null) {
	                    m.recordProcessRuntime = Boolean(d.recordProcessRuntime);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ProcessStatsConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @static
	             * @param {perfetto.protos.ProcessStatsConfig} m ProcessStatsConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ProcessStatsConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.quirks = [];
	                }
	                if (o.defaults) {
	                    d.scanAllProcessesOnStart = false;
	                    d.recordThreadNames = false;
	                    d.procStatsPollMs = 0;
	                    d.procStatsCacheTtlMs = 0;
	                    d.resolveProcessFds = false;
	                    d.scanSmapsRollup = false;
	                    d.recordProcessAge = false;
	                    d.recordProcessRuntime = false;
	                }
	                if (m.quirks && m.quirks.length) {
	                    d.quirks = [];
	                    for (var j = 0; j < m.quirks.length; ++j) {
	                        d.quirks[j] = o.enums === String ? $root.perfetto.protos.ProcessStatsConfig.Quirks[m.quirks[j]] === undefined ? m.quirks[j] : $root.perfetto.protos.ProcessStatsConfig.Quirks[m.quirks[j]] : m.quirks[j];
	                    }
	                }
	                if (m.scanAllProcessesOnStart != null && m.hasOwnProperty("scanAllProcessesOnStart")) {
	                    d.scanAllProcessesOnStart = m.scanAllProcessesOnStart;
	                }
	                if (m.recordThreadNames != null && m.hasOwnProperty("recordThreadNames")) {
	                    d.recordThreadNames = m.recordThreadNames;
	                }
	                if (m.procStatsPollMs != null && m.hasOwnProperty("procStatsPollMs")) {
	                    d.procStatsPollMs = m.procStatsPollMs;
	                }
	                if (m.procStatsCacheTtlMs != null && m.hasOwnProperty("procStatsCacheTtlMs")) {
	                    d.procStatsCacheTtlMs = m.procStatsCacheTtlMs;
	                }
	                if (m.resolveProcessFds != null && m.hasOwnProperty("resolveProcessFds")) {
	                    d.resolveProcessFds = m.resolveProcessFds;
	                }
	                if (m.scanSmapsRollup != null && m.hasOwnProperty("scanSmapsRollup")) {
	                    d.scanSmapsRollup = m.scanSmapsRollup;
	                }
	                if (m.recordProcessAge != null && m.hasOwnProperty("recordProcessAge")) {
	                    d.recordProcessAge = m.recordProcessAge;
	                }
	                if (m.recordProcessRuntime != null && m.hasOwnProperty("recordProcessRuntime")) {
	                    d.recordProcessRuntime = m.recordProcessRuntime;
	                }
	                return d;
	            };

	            /**
	             * Converts this ProcessStatsConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ProcessStatsConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ProcessStatsConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ProcessStatsConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ProcessStatsConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ProcessStatsConfig";
	            };

	            /**
	             * Quirks enum.
	             * @name perfetto.protos.ProcessStatsConfig.Quirks
	             * @enum {number}
	             * @property {number} QUIRKS_UNSPECIFIED=0 QUIRKS_UNSPECIFIED value
	             * @property {number} DISABLE_INITIAL_DUMP=1 DISABLE_INITIAL_DUMP value
	             * @property {number} DISABLE_ON_DEMAND=2 DISABLE_ON_DEMAND value
	             */
	            ProcessStatsConfig.Quirks = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "QUIRKS_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "DISABLE_INITIAL_DUMP"] = 1;
	                values[valuesById[2] = "DISABLE_ON_DEMAND"] = 2;
	                return values;
	            })();

	            return ProcessStatsConfig;
	        })();

	        protos.HeapprofdConfig = (function() {

	            /**
	             * Properties of a HeapprofdConfig.
	             * @memberof perfetto.protos
	             * @interface IHeapprofdConfig
	             * @property {number|null} [samplingIntervalBytes] HeapprofdConfig samplingIntervalBytes
	             * @property {number|null} [adaptiveSamplingShmemThreshold] HeapprofdConfig adaptiveSamplingShmemThreshold
	             * @property {number|null} [adaptiveSamplingMaxSamplingIntervalBytes] HeapprofdConfig adaptiveSamplingMaxSamplingIntervalBytes
	             * @property {Array.<string>|null} [processCmdline] HeapprofdConfig processCmdline
	             * @property {Array.<number>|null} [pid] HeapprofdConfig pid
	             * @property {Array.<string>|null} [targetInstalledBy] HeapprofdConfig targetInstalledBy
	             * @property {Array.<string>|null} [heaps] HeapprofdConfig heaps
	             * @property {Array.<string>|null} [excludeHeaps] HeapprofdConfig excludeHeaps
	             * @property {boolean|null} [streamAllocations] HeapprofdConfig streamAllocations
	             * @property {Array.<number>|null} [heapSamplingIntervals] HeapprofdConfig heapSamplingIntervals
	             * @property {boolean|null} [allHeaps] HeapprofdConfig allHeaps
	             * @property {boolean|null} [all] HeapprofdConfig all
	             * @property {number|null} [minAnonymousMemoryKb] HeapprofdConfig minAnonymousMemoryKb
	             * @property {number|null} [maxHeapprofdMemoryKb] HeapprofdConfig maxHeapprofdMemoryKb
	             * @property {number|null} [maxHeapprofdCpuSecs] HeapprofdConfig maxHeapprofdCpuSecs
	             * @property {Array.<string>|null} [skipSymbolPrefix] HeapprofdConfig skipSymbolPrefix
	             * @property {perfetto.protos.HeapprofdConfig.IContinuousDumpConfig|null} [continuousDumpConfig] HeapprofdConfig continuousDumpConfig
	             * @property {number|null} [shmemSizeBytes] HeapprofdConfig shmemSizeBytes
	             * @property {boolean|null} [blockClient] HeapprofdConfig blockClient
	             * @property {number|null} [blockClientTimeoutUs] HeapprofdConfig blockClientTimeoutUs
	             * @property {boolean|null} [noStartup] HeapprofdConfig noStartup
	             * @property {boolean|null} [noRunning] HeapprofdConfig noRunning
	             * @property {boolean|null} [dumpAtMax] HeapprofdConfig dumpAtMax
	             * @property {boolean|null} [disableForkTeardown] HeapprofdConfig disableForkTeardown
	             * @property {boolean|null} [disableVforkDetection] HeapprofdConfig disableVforkDetection
	             */

	            /**
	             * Constructs a new HeapprofdConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a HeapprofdConfig.
	             * @implements IHeapprofdConfig
	             * @constructor
	             * @param {perfetto.protos.IHeapprofdConfig=} [p] Properties to set
	             */
	            function HeapprofdConfig(p) {
	                this.processCmdline = [];
	                this.pid = [];
	                this.targetInstalledBy = [];
	                this.heaps = [];
	                this.excludeHeaps = [];
	                this.heapSamplingIntervals = [];
	                this.skipSymbolPrefix = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * HeapprofdConfig samplingIntervalBytes.
	             * @member {number} samplingIntervalBytes
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.samplingIntervalBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * HeapprofdConfig adaptiveSamplingShmemThreshold.
	             * @member {number} adaptiveSamplingShmemThreshold
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.adaptiveSamplingShmemThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * HeapprofdConfig adaptiveSamplingMaxSamplingIntervalBytes.
	             * @member {number} adaptiveSamplingMaxSamplingIntervalBytes
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.adaptiveSamplingMaxSamplingIntervalBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * HeapprofdConfig processCmdline.
	             * @member {Array.<string>} processCmdline
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.processCmdline = $util.emptyArray;

	            /**
	             * HeapprofdConfig pid.
	             * @member {Array.<number>} pid
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.pid = $util.emptyArray;

	            /**
	             * HeapprofdConfig targetInstalledBy.
	             * @member {Array.<string>} targetInstalledBy
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.targetInstalledBy = $util.emptyArray;

	            /**
	             * HeapprofdConfig heaps.
	             * @member {Array.<string>} heaps
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.heaps = $util.emptyArray;

	            /**
	             * HeapprofdConfig excludeHeaps.
	             * @member {Array.<string>} excludeHeaps
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.excludeHeaps = $util.emptyArray;

	            /**
	             * HeapprofdConfig streamAllocations.
	             * @member {boolean} streamAllocations
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.streamAllocations = false;

	            /**
	             * HeapprofdConfig heapSamplingIntervals.
	             * @member {Array.<number>} heapSamplingIntervals
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.heapSamplingIntervals = $util.emptyArray;

	            /**
	             * HeapprofdConfig allHeaps.
	             * @member {boolean} allHeaps
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.allHeaps = false;

	            /**
	             * HeapprofdConfig all.
	             * @member {boolean} all
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.all = false;

	            /**
	             * HeapprofdConfig minAnonymousMemoryKb.
	             * @member {number} minAnonymousMemoryKb
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.minAnonymousMemoryKb = 0;

	            /**
	             * HeapprofdConfig maxHeapprofdMemoryKb.
	             * @member {number} maxHeapprofdMemoryKb
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.maxHeapprofdMemoryKb = 0;

	            /**
	             * HeapprofdConfig maxHeapprofdCpuSecs.
	             * @member {number} maxHeapprofdCpuSecs
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.maxHeapprofdCpuSecs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * HeapprofdConfig skipSymbolPrefix.
	             * @member {Array.<string>} skipSymbolPrefix
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.skipSymbolPrefix = $util.emptyArray;

	            /**
	             * HeapprofdConfig continuousDumpConfig.
	             * @member {perfetto.protos.HeapprofdConfig.IContinuousDumpConfig|null|undefined} continuousDumpConfig
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.continuousDumpConfig = null;

	            /**
	             * HeapprofdConfig shmemSizeBytes.
	             * @member {number} shmemSizeBytes
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.shmemSizeBytes = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * HeapprofdConfig blockClient.
	             * @member {boolean} blockClient
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.blockClient = false;

	            /**
	             * HeapprofdConfig blockClientTimeoutUs.
	             * @member {number} blockClientTimeoutUs
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.blockClientTimeoutUs = 0;

	            /**
	             * HeapprofdConfig noStartup.
	             * @member {boolean} noStartup
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.noStartup = false;

	            /**
	             * HeapprofdConfig noRunning.
	             * @member {boolean} noRunning
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.noRunning = false;

	            /**
	             * HeapprofdConfig dumpAtMax.
	             * @member {boolean} dumpAtMax
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.dumpAtMax = false;

	            /**
	             * HeapprofdConfig disableForkTeardown.
	             * @member {boolean} disableForkTeardown
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.disableForkTeardown = false;

	            /**
	             * HeapprofdConfig disableVforkDetection.
	             * @member {boolean} disableVforkDetection
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             */
	            HeapprofdConfig.prototype.disableVforkDetection = false;

	            /**
	             * Creates a new HeapprofdConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @static
	             * @param {perfetto.protos.IHeapprofdConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.HeapprofdConfig} HeapprofdConfig instance
	             */
	            HeapprofdConfig.create = function create(properties) {
	                return new HeapprofdConfig(properties);
	            };

	            /**
	             * Encodes the specified HeapprofdConfig message. Does not implicitly {@link perfetto.protos.HeapprofdConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @static
	             * @param {perfetto.protos.IHeapprofdConfig} m HeapprofdConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            HeapprofdConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.samplingIntervalBytes != null && Object.hasOwnProperty.call(m, "samplingIntervalBytes"))
	                    w.uint32(8).uint64(m.samplingIntervalBytes);
	                if (m.processCmdline != null && m.processCmdline.length) {
	                    for (var i = 0; i < m.processCmdline.length; ++i)
	                        w.uint32(18).string(m.processCmdline[i]);
	                }
	                if (m.pid != null && m.pid.length) {
	                    for (var i = 0; i < m.pid.length; ++i)
	                        w.uint32(32).uint64(m.pid[i]);
	                }
	                if (m.all != null && Object.hasOwnProperty.call(m, "all"))
	                    w.uint32(40).bool(m.all);
	                if (m.continuousDumpConfig != null && Object.hasOwnProperty.call(m, "continuousDumpConfig"))
	                    $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.encode(m.continuousDumpConfig, w.uint32(50).fork()).ldelim();
	                if (m.skipSymbolPrefix != null && m.skipSymbolPrefix.length) {
	                    for (var i = 0; i < m.skipSymbolPrefix.length; ++i)
	                        w.uint32(58).string(m.skipSymbolPrefix[i]);
	                }
	                if (m.shmemSizeBytes != null && Object.hasOwnProperty.call(m, "shmemSizeBytes"))
	                    w.uint32(64).uint64(m.shmemSizeBytes);
	                if (m.blockClient != null && Object.hasOwnProperty.call(m, "blockClient"))
	                    w.uint32(72).bool(m.blockClient);
	                if (m.noStartup != null && Object.hasOwnProperty.call(m, "noStartup"))
	                    w.uint32(80).bool(m.noStartup);
	                if (m.noRunning != null && Object.hasOwnProperty.call(m, "noRunning"))
	                    w.uint32(88).bool(m.noRunning);
	                if (m.dumpAtMax != null && Object.hasOwnProperty.call(m, "dumpAtMax"))
	                    w.uint32(104).bool(m.dumpAtMax);
	                if (m.blockClientTimeoutUs != null && Object.hasOwnProperty.call(m, "blockClientTimeoutUs"))
	                    w.uint32(112).uint32(m.blockClientTimeoutUs);
	                if (m.minAnonymousMemoryKb != null && Object.hasOwnProperty.call(m, "minAnonymousMemoryKb"))
	                    w.uint32(120).uint32(m.minAnonymousMemoryKb);
	                if (m.maxHeapprofdMemoryKb != null && Object.hasOwnProperty.call(m, "maxHeapprofdMemoryKb"))
	                    w.uint32(128).uint32(m.maxHeapprofdMemoryKb);
	                if (m.maxHeapprofdCpuSecs != null && Object.hasOwnProperty.call(m, "maxHeapprofdCpuSecs"))
	                    w.uint32(136).uint64(m.maxHeapprofdCpuSecs);
	                if (m.disableForkTeardown != null && Object.hasOwnProperty.call(m, "disableForkTeardown"))
	                    w.uint32(144).bool(m.disableForkTeardown);
	                if (m.disableVforkDetection != null && Object.hasOwnProperty.call(m, "disableVforkDetection"))
	                    w.uint32(152).bool(m.disableVforkDetection);
	                if (m.heaps != null && m.heaps.length) {
	                    for (var i = 0; i < m.heaps.length; ++i)
	                        w.uint32(162).string(m.heaps[i]);
	                }
	                if (m.allHeaps != null && Object.hasOwnProperty.call(m, "allHeaps"))
	                    w.uint32(168).bool(m.allHeaps);
	                if (m.heapSamplingIntervals != null && m.heapSamplingIntervals.length) {
	                    for (var i = 0; i < m.heapSamplingIntervals.length; ++i)
	                        w.uint32(176).uint64(m.heapSamplingIntervals[i]);
	                }
	                if (m.streamAllocations != null && Object.hasOwnProperty.call(m, "streamAllocations"))
	                    w.uint32(184).bool(m.streamAllocations);
	                if (m.adaptiveSamplingShmemThreshold != null && Object.hasOwnProperty.call(m, "adaptiveSamplingShmemThreshold"))
	                    w.uint32(192).uint64(m.adaptiveSamplingShmemThreshold);
	                if (m.adaptiveSamplingMaxSamplingIntervalBytes != null && Object.hasOwnProperty.call(m, "adaptiveSamplingMaxSamplingIntervalBytes"))
	                    w.uint32(200).uint64(m.adaptiveSamplingMaxSamplingIntervalBytes);
	                if (m.targetInstalledBy != null && m.targetInstalledBy.length) {
	                    for (var i = 0; i < m.targetInstalledBy.length; ++i)
	                        w.uint32(210).string(m.targetInstalledBy[i]);
	                }
	                if (m.excludeHeaps != null && m.excludeHeaps.length) {
	                    for (var i = 0; i < m.excludeHeaps.length; ++i)
	                        w.uint32(218).string(m.excludeHeaps[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a HeapprofdConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.HeapprofdConfig} HeapprofdConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            HeapprofdConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.HeapprofdConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.samplingIntervalBytes = r.uint64();
	                            break;
	                        }
	                    case 24: {
	                            m.adaptiveSamplingShmemThreshold = r.uint64();
	                            break;
	                        }
	                    case 25: {
	                            m.adaptiveSamplingMaxSamplingIntervalBytes = r.uint64();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.processCmdline && m.processCmdline.length))
	                                m.processCmdline = [];
	                            m.processCmdline.push(r.string());
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.pid && m.pid.length))
	                                m.pid = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.pid.push(r.uint64());
	                            } else
	                                m.pid.push(r.uint64());
	                            break;
	                        }
	                    case 26: {
	                            if (!(m.targetInstalledBy && m.targetInstalledBy.length))
	                                m.targetInstalledBy = [];
	                            m.targetInstalledBy.push(r.string());
	                            break;
	                        }
	                    case 20: {
	                            if (!(m.heaps && m.heaps.length))
	                                m.heaps = [];
	                            m.heaps.push(r.string());
	                            break;
	                        }
	                    case 27: {
	                            if (!(m.excludeHeaps && m.excludeHeaps.length))
	                                m.excludeHeaps = [];
	                            m.excludeHeaps.push(r.string());
	                            break;
	                        }
	                    case 23: {
	                            m.streamAllocations = r.bool();
	                            break;
	                        }
	                    case 22: {
	                            if (!(m.heapSamplingIntervals && m.heapSamplingIntervals.length))
	                                m.heapSamplingIntervals = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.heapSamplingIntervals.push(r.uint64());
	                            } else
	                                m.heapSamplingIntervals.push(r.uint64());
	                            break;
	                        }
	                    case 21: {
	                            m.allHeaps = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.all = r.bool();
	                            break;
	                        }
	                    case 15: {
	                            m.minAnonymousMemoryKb = r.uint32();
	                            break;
	                        }
	                    case 16: {
	                            m.maxHeapprofdMemoryKb = r.uint32();
	                            break;
	                        }
	                    case 17: {
	                            m.maxHeapprofdCpuSecs = r.uint64();
	                            break;
	                        }
	                    case 7: {
	                            if (!(m.skipSymbolPrefix && m.skipSymbolPrefix.length))
	                                m.skipSymbolPrefix = [];
	                            m.skipSymbolPrefix.push(r.string());
	                            break;
	                        }
	                    case 6: {
	                            m.continuousDumpConfig = $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 8: {
	                            m.shmemSizeBytes = r.uint64();
	                            break;
	                        }
	                    case 9: {
	                            m.blockClient = r.bool();
	                            break;
	                        }
	                    case 14: {
	                            m.blockClientTimeoutUs = r.uint32();
	                            break;
	                        }
	                    case 10: {
	                            m.noStartup = r.bool();
	                            break;
	                        }
	                    case 11: {
	                            m.noRunning = r.bool();
	                            break;
	                        }
	                    case 13: {
	                            m.dumpAtMax = r.bool();
	                            break;
	                        }
	                    case 18: {
	                            m.disableForkTeardown = r.bool();
	                            break;
	                        }
	                    case 19: {
	                            m.disableVforkDetection = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a HeapprofdConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.HeapprofdConfig} HeapprofdConfig
	             */
	            HeapprofdConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.HeapprofdConfig)
	                    return d;
	                var m = new $root.perfetto.protos.HeapprofdConfig();
	                if (d.samplingIntervalBytes != null) {
	                    if ($util.Long)
	                        (m.samplingIntervalBytes = $util.Long.fromValue(d.samplingIntervalBytes)).unsigned = true;
	                    else if (typeof d.samplingIntervalBytes === "string")
	                        m.samplingIntervalBytes = parseInt(d.samplingIntervalBytes, 10);
	                    else if (typeof d.samplingIntervalBytes === "number")
	                        m.samplingIntervalBytes = d.samplingIntervalBytes;
	                    else if (typeof d.samplingIntervalBytes === "object")
	                        m.samplingIntervalBytes = new $util.LongBits(d.samplingIntervalBytes.low >>> 0, d.samplingIntervalBytes.high >>> 0).toNumber(true);
	                }
	                if (d.adaptiveSamplingShmemThreshold != null) {
	                    if ($util.Long)
	                        (m.adaptiveSamplingShmemThreshold = $util.Long.fromValue(d.adaptiveSamplingShmemThreshold)).unsigned = true;
	                    else if (typeof d.adaptiveSamplingShmemThreshold === "string")
	                        m.adaptiveSamplingShmemThreshold = parseInt(d.adaptiveSamplingShmemThreshold, 10);
	                    else if (typeof d.adaptiveSamplingShmemThreshold === "number")
	                        m.adaptiveSamplingShmemThreshold = d.adaptiveSamplingShmemThreshold;
	                    else if (typeof d.adaptiveSamplingShmemThreshold === "object")
	                        m.adaptiveSamplingShmemThreshold = new $util.LongBits(d.adaptiveSamplingShmemThreshold.low >>> 0, d.adaptiveSamplingShmemThreshold.high >>> 0).toNumber(true);
	                }
	                if (d.adaptiveSamplingMaxSamplingIntervalBytes != null) {
	                    if ($util.Long)
	                        (m.adaptiveSamplingMaxSamplingIntervalBytes = $util.Long.fromValue(d.adaptiveSamplingMaxSamplingIntervalBytes)).unsigned = true;
	                    else if (typeof d.adaptiveSamplingMaxSamplingIntervalBytes === "string")
	                        m.adaptiveSamplingMaxSamplingIntervalBytes = parseInt(d.adaptiveSamplingMaxSamplingIntervalBytes, 10);
	                    else if (typeof d.adaptiveSamplingMaxSamplingIntervalBytes === "number")
	                        m.adaptiveSamplingMaxSamplingIntervalBytes = d.adaptiveSamplingMaxSamplingIntervalBytes;
	                    else if (typeof d.adaptiveSamplingMaxSamplingIntervalBytes === "object")
	                        m.adaptiveSamplingMaxSamplingIntervalBytes = new $util.LongBits(d.adaptiveSamplingMaxSamplingIntervalBytes.low >>> 0, d.adaptiveSamplingMaxSamplingIntervalBytes.high >>> 0).toNumber(true);
	                }
	                if (d.processCmdline) {
	                    if (!Array.isArray(d.processCmdline))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.processCmdline: array expected");
	                    m.processCmdline = [];
	                    for (var i = 0; i < d.processCmdline.length; ++i) {
	                        m.processCmdline[i] = String(d.processCmdline[i]);
	                    }
	                }
	                if (d.pid) {
	                    if (!Array.isArray(d.pid))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.pid: array expected");
	                    m.pid = [];
	                    for (var i = 0; i < d.pid.length; ++i) {
	                        if ($util.Long)
	                            (m.pid[i] = $util.Long.fromValue(d.pid[i])).unsigned = true;
	                        else if (typeof d.pid[i] === "string")
	                            m.pid[i] = parseInt(d.pid[i], 10);
	                        else if (typeof d.pid[i] === "number")
	                            m.pid[i] = d.pid[i];
	                        else if (typeof d.pid[i] === "object")
	                            m.pid[i] = new $util.LongBits(d.pid[i].low >>> 0, d.pid[i].high >>> 0).toNumber(true);
	                    }
	                }
	                if (d.targetInstalledBy) {
	                    if (!Array.isArray(d.targetInstalledBy))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.targetInstalledBy: array expected");
	                    m.targetInstalledBy = [];
	                    for (var i = 0; i < d.targetInstalledBy.length; ++i) {
	                        m.targetInstalledBy[i] = String(d.targetInstalledBy[i]);
	                    }
	                }
	                if (d.heaps) {
	                    if (!Array.isArray(d.heaps))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.heaps: array expected");
	                    m.heaps = [];
	                    for (var i = 0; i < d.heaps.length; ++i) {
	                        m.heaps[i] = String(d.heaps[i]);
	                    }
	                }
	                if (d.excludeHeaps) {
	                    if (!Array.isArray(d.excludeHeaps))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.excludeHeaps: array expected");
	                    m.excludeHeaps = [];
	                    for (var i = 0; i < d.excludeHeaps.length; ++i) {
	                        m.excludeHeaps[i] = String(d.excludeHeaps[i]);
	                    }
	                }
	                if (d.streamAllocations != null) {
	                    m.streamAllocations = Boolean(d.streamAllocations);
	                }
	                if (d.heapSamplingIntervals) {
	                    if (!Array.isArray(d.heapSamplingIntervals))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.heapSamplingIntervals: array expected");
	                    m.heapSamplingIntervals = [];
	                    for (var i = 0; i < d.heapSamplingIntervals.length; ++i) {
	                        if ($util.Long)
	                            (m.heapSamplingIntervals[i] = $util.Long.fromValue(d.heapSamplingIntervals[i])).unsigned = true;
	                        else if (typeof d.heapSamplingIntervals[i] === "string")
	                            m.heapSamplingIntervals[i] = parseInt(d.heapSamplingIntervals[i], 10);
	                        else if (typeof d.heapSamplingIntervals[i] === "number")
	                            m.heapSamplingIntervals[i] = d.heapSamplingIntervals[i];
	                        else if (typeof d.heapSamplingIntervals[i] === "object")
	                            m.heapSamplingIntervals[i] = new $util.LongBits(d.heapSamplingIntervals[i].low >>> 0, d.heapSamplingIntervals[i].high >>> 0).toNumber(true);
	                    }
	                }
	                if (d.allHeaps != null) {
	                    m.allHeaps = Boolean(d.allHeaps);
	                }
	                if (d.all != null) {
	                    m.all = Boolean(d.all);
	                }
	                if (d.minAnonymousMemoryKb != null) {
	                    m.minAnonymousMemoryKb = d.minAnonymousMemoryKb >>> 0;
	                }
	                if (d.maxHeapprofdMemoryKb != null) {
	                    m.maxHeapprofdMemoryKb = d.maxHeapprofdMemoryKb >>> 0;
	                }
	                if (d.maxHeapprofdCpuSecs != null) {
	                    if ($util.Long)
	                        (m.maxHeapprofdCpuSecs = $util.Long.fromValue(d.maxHeapprofdCpuSecs)).unsigned = true;
	                    else if (typeof d.maxHeapprofdCpuSecs === "string")
	                        m.maxHeapprofdCpuSecs = parseInt(d.maxHeapprofdCpuSecs, 10);
	                    else if (typeof d.maxHeapprofdCpuSecs === "number")
	                        m.maxHeapprofdCpuSecs = d.maxHeapprofdCpuSecs;
	                    else if (typeof d.maxHeapprofdCpuSecs === "object")
	                        m.maxHeapprofdCpuSecs = new $util.LongBits(d.maxHeapprofdCpuSecs.low >>> 0, d.maxHeapprofdCpuSecs.high >>> 0).toNumber(true);
	                }
	                if (d.skipSymbolPrefix) {
	                    if (!Array.isArray(d.skipSymbolPrefix))
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.skipSymbolPrefix: array expected");
	                    m.skipSymbolPrefix = [];
	                    for (var i = 0; i < d.skipSymbolPrefix.length; ++i) {
	                        m.skipSymbolPrefix[i] = String(d.skipSymbolPrefix[i]);
	                    }
	                }
	                if (d.continuousDumpConfig != null) {
	                    if (typeof d.continuousDumpConfig !== "object")
	                        throw TypeError(".perfetto.protos.HeapprofdConfig.continuousDumpConfig: object expected");
	                    m.continuousDumpConfig = $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.fromObject(d.continuousDumpConfig);
	                }
	                if (d.shmemSizeBytes != null) {
	                    if ($util.Long)
	                        (m.shmemSizeBytes = $util.Long.fromValue(d.shmemSizeBytes)).unsigned = true;
	                    else if (typeof d.shmemSizeBytes === "string")
	                        m.shmemSizeBytes = parseInt(d.shmemSizeBytes, 10);
	                    else if (typeof d.shmemSizeBytes === "number")
	                        m.shmemSizeBytes = d.shmemSizeBytes;
	                    else if (typeof d.shmemSizeBytes === "object")
	                        m.shmemSizeBytes = new $util.LongBits(d.shmemSizeBytes.low >>> 0, d.shmemSizeBytes.high >>> 0).toNumber(true);
	                }
	                if (d.blockClient != null) {
	                    m.blockClient = Boolean(d.blockClient);
	                }
	                if (d.blockClientTimeoutUs != null) {
	                    m.blockClientTimeoutUs = d.blockClientTimeoutUs >>> 0;
	                }
	                if (d.noStartup != null) {
	                    m.noStartup = Boolean(d.noStartup);
	                }
	                if (d.noRunning != null) {
	                    m.noRunning = Boolean(d.noRunning);
	                }
	                if (d.dumpAtMax != null) {
	                    m.dumpAtMax = Boolean(d.dumpAtMax);
	                }
	                if (d.disableForkTeardown != null) {
	                    m.disableForkTeardown = Boolean(d.disableForkTeardown);
	                }
	                if (d.disableVforkDetection != null) {
	                    m.disableVforkDetection = Boolean(d.disableVforkDetection);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a HeapprofdConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @static
	             * @param {perfetto.protos.HeapprofdConfig} m HeapprofdConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            HeapprofdConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.processCmdline = [];
	                    d.pid = [];
	                    d.skipSymbolPrefix = [];
	                    d.heaps = [];
	                    d.heapSamplingIntervals = [];
	                    d.targetInstalledBy = [];
	                    d.excludeHeaps = [];
	                }
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.samplingIntervalBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.samplingIntervalBytes = o.longs === String ? "0" : 0;
	                    d.all = false;
	                    d.continuousDumpConfig = null;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.shmemSizeBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.shmemSizeBytes = o.longs === String ? "0" : 0;
	                    d.blockClient = false;
	                    d.noStartup = false;
	                    d.noRunning = false;
	                    d.dumpAtMax = false;
	                    d.blockClientTimeoutUs = 0;
	                    d.minAnonymousMemoryKb = 0;
	                    d.maxHeapprofdMemoryKb = 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.maxHeapprofdCpuSecs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.maxHeapprofdCpuSecs = o.longs === String ? "0" : 0;
	                    d.disableForkTeardown = false;
	                    d.disableVforkDetection = false;
	                    d.allHeaps = false;
	                    d.streamAllocations = false;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.adaptiveSamplingShmemThreshold = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.adaptiveSamplingShmemThreshold = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.adaptiveSamplingMaxSamplingIntervalBytes = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.adaptiveSamplingMaxSamplingIntervalBytes = o.longs === String ? "0" : 0;
	                }
	                if (m.samplingIntervalBytes != null && m.hasOwnProperty("samplingIntervalBytes")) {
	                    if (typeof m.samplingIntervalBytes === "number")
	                        d.samplingIntervalBytes = o.longs === String ? String(m.samplingIntervalBytes) : m.samplingIntervalBytes;
	                    else
	                        d.samplingIntervalBytes = o.longs === String ? $util.Long.prototype.toString.call(m.samplingIntervalBytes) : o.longs === Number ? new $util.LongBits(m.samplingIntervalBytes.low >>> 0, m.samplingIntervalBytes.high >>> 0).toNumber(true) : m.samplingIntervalBytes;
	                }
	                if (m.processCmdline && m.processCmdline.length) {
	                    d.processCmdline = [];
	                    for (var j = 0; j < m.processCmdline.length; ++j) {
	                        d.processCmdline[j] = m.processCmdline[j];
	                    }
	                }
	                if (m.pid && m.pid.length) {
	                    d.pid = [];
	                    for (var j = 0; j < m.pid.length; ++j) {
	                        if (typeof m.pid[j] === "number")
	                            d.pid[j] = o.longs === String ? String(m.pid[j]) : m.pid[j];
	                        else
	                            d.pid[j] = o.longs === String ? $util.Long.prototype.toString.call(m.pid[j]) : o.longs === Number ? new $util.LongBits(m.pid[j].low >>> 0, m.pid[j].high >>> 0).toNumber(true) : m.pid[j];
	                    }
	                }
	                if (m.all != null && m.hasOwnProperty("all")) {
	                    d.all = m.all;
	                }
	                if (m.continuousDumpConfig != null && m.hasOwnProperty("continuousDumpConfig")) {
	                    d.continuousDumpConfig = $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.toObject(m.continuousDumpConfig, o);
	                }
	                if (m.skipSymbolPrefix && m.skipSymbolPrefix.length) {
	                    d.skipSymbolPrefix = [];
	                    for (var j = 0; j < m.skipSymbolPrefix.length; ++j) {
	                        d.skipSymbolPrefix[j] = m.skipSymbolPrefix[j];
	                    }
	                }
	                if (m.shmemSizeBytes != null && m.hasOwnProperty("shmemSizeBytes")) {
	                    if (typeof m.shmemSizeBytes === "number")
	                        d.shmemSizeBytes = o.longs === String ? String(m.shmemSizeBytes) : m.shmemSizeBytes;
	                    else
	                        d.shmemSizeBytes = o.longs === String ? $util.Long.prototype.toString.call(m.shmemSizeBytes) : o.longs === Number ? new $util.LongBits(m.shmemSizeBytes.low >>> 0, m.shmemSizeBytes.high >>> 0).toNumber(true) : m.shmemSizeBytes;
	                }
	                if (m.blockClient != null && m.hasOwnProperty("blockClient")) {
	                    d.blockClient = m.blockClient;
	                }
	                if (m.noStartup != null && m.hasOwnProperty("noStartup")) {
	                    d.noStartup = m.noStartup;
	                }
	                if (m.noRunning != null && m.hasOwnProperty("noRunning")) {
	                    d.noRunning = m.noRunning;
	                }
	                if (m.dumpAtMax != null && m.hasOwnProperty("dumpAtMax")) {
	                    d.dumpAtMax = m.dumpAtMax;
	                }
	                if (m.blockClientTimeoutUs != null && m.hasOwnProperty("blockClientTimeoutUs")) {
	                    d.blockClientTimeoutUs = m.blockClientTimeoutUs;
	                }
	                if (m.minAnonymousMemoryKb != null && m.hasOwnProperty("minAnonymousMemoryKb")) {
	                    d.minAnonymousMemoryKb = m.minAnonymousMemoryKb;
	                }
	                if (m.maxHeapprofdMemoryKb != null && m.hasOwnProperty("maxHeapprofdMemoryKb")) {
	                    d.maxHeapprofdMemoryKb = m.maxHeapprofdMemoryKb;
	                }
	                if (m.maxHeapprofdCpuSecs != null && m.hasOwnProperty("maxHeapprofdCpuSecs")) {
	                    if (typeof m.maxHeapprofdCpuSecs === "number")
	                        d.maxHeapprofdCpuSecs = o.longs === String ? String(m.maxHeapprofdCpuSecs) : m.maxHeapprofdCpuSecs;
	                    else
	                        d.maxHeapprofdCpuSecs = o.longs === String ? $util.Long.prototype.toString.call(m.maxHeapprofdCpuSecs) : o.longs === Number ? new $util.LongBits(m.maxHeapprofdCpuSecs.low >>> 0, m.maxHeapprofdCpuSecs.high >>> 0).toNumber(true) : m.maxHeapprofdCpuSecs;
	                }
	                if (m.disableForkTeardown != null && m.hasOwnProperty("disableForkTeardown")) {
	                    d.disableForkTeardown = m.disableForkTeardown;
	                }
	                if (m.disableVforkDetection != null && m.hasOwnProperty("disableVforkDetection")) {
	                    d.disableVforkDetection = m.disableVforkDetection;
	                }
	                if (m.heaps && m.heaps.length) {
	                    d.heaps = [];
	                    for (var j = 0; j < m.heaps.length; ++j) {
	                        d.heaps[j] = m.heaps[j];
	                    }
	                }
	                if (m.allHeaps != null && m.hasOwnProperty("allHeaps")) {
	                    d.allHeaps = m.allHeaps;
	                }
	                if (m.heapSamplingIntervals && m.heapSamplingIntervals.length) {
	                    d.heapSamplingIntervals = [];
	                    for (var j = 0; j < m.heapSamplingIntervals.length; ++j) {
	                        if (typeof m.heapSamplingIntervals[j] === "number")
	                            d.heapSamplingIntervals[j] = o.longs === String ? String(m.heapSamplingIntervals[j]) : m.heapSamplingIntervals[j];
	                        else
	                            d.heapSamplingIntervals[j] = o.longs === String ? $util.Long.prototype.toString.call(m.heapSamplingIntervals[j]) : o.longs === Number ? new $util.LongBits(m.heapSamplingIntervals[j].low >>> 0, m.heapSamplingIntervals[j].high >>> 0).toNumber(true) : m.heapSamplingIntervals[j];
	                    }
	                }
	                if (m.streamAllocations != null && m.hasOwnProperty("streamAllocations")) {
	                    d.streamAllocations = m.streamAllocations;
	                }
	                if (m.adaptiveSamplingShmemThreshold != null && m.hasOwnProperty("adaptiveSamplingShmemThreshold")) {
	                    if (typeof m.adaptiveSamplingShmemThreshold === "number")
	                        d.adaptiveSamplingShmemThreshold = o.longs === String ? String(m.adaptiveSamplingShmemThreshold) : m.adaptiveSamplingShmemThreshold;
	                    else
	                        d.adaptiveSamplingShmemThreshold = o.longs === String ? $util.Long.prototype.toString.call(m.adaptiveSamplingShmemThreshold) : o.longs === Number ? new $util.LongBits(m.adaptiveSamplingShmemThreshold.low >>> 0, m.adaptiveSamplingShmemThreshold.high >>> 0).toNumber(true) : m.adaptiveSamplingShmemThreshold;
	                }
	                if (m.adaptiveSamplingMaxSamplingIntervalBytes != null && m.hasOwnProperty("adaptiveSamplingMaxSamplingIntervalBytes")) {
	                    if (typeof m.adaptiveSamplingMaxSamplingIntervalBytes === "number")
	                        d.adaptiveSamplingMaxSamplingIntervalBytes = o.longs === String ? String(m.adaptiveSamplingMaxSamplingIntervalBytes) : m.adaptiveSamplingMaxSamplingIntervalBytes;
	                    else
	                        d.adaptiveSamplingMaxSamplingIntervalBytes = o.longs === String ? $util.Long.prototype.toString.call(m.adaptiveSamplingMaxSamplingIntervalBytes) : o.longs === Number ? new $util.LongBits(m.adaptiveSamplingMaxSamplingIntervalBytes.low >>> 0, m.adaptiveSamplingMaxSamplingIntervalBytes.high >>> 0).toNumber(true) : m.adaptiveSamplingMaxSamplingIntervalBytes;
	                }
	                if (m.targetInstalledBy && m.targetInstalledBy.length) {
	                    d.targetInstalledBy = [];
	                    for (var j = 0; j < m.targetInstalledBy.length; ++j) {
	                        d.targetInstalledBy[j] = m.targetInstalledBy[j];
	                    }
	                }
	                if (m.excludeHeaps && m.excludeHeaps.length) {
	                    d.excludeHeaps = [];
	                    for (var j = 0; j < m.excludeHeaps.length; ++j) {
	                        d.excludeHeaps[j] = m.excludeHeaps[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this HeapprofdConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            HeapprofdConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for HeapprofdConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.HeapprofdConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            HeapprofdConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.HeapprofdConfig";
	            };

	            HeapprofdConfig.ContinuousDumpConfig = (function() {

	                /**
	                 * Properties of a ContinuousDumpConfig.
	                 * @memberof perfetto.protos.HeapprofdConfig
	                 * @interface IContinuousDumpConfig
	                 * @property {number|null} [dumpPhaseMs] ContinuousDumpConfig dumpPhaseMs
	                 * @property {number|null} [dumpIntervalMs] ContinuousDumpConfig dumpIntervalMs
	                 */

	                /**
	                 * Constructs a new ContinuousDumpConfig.
	                 * @memberof perfetto.protos.HeapprofdConfig
	                 * @classdesc Represents a ContinuousDumpConfig.
	                 * @implements IContinuousDumpConfig
	                 * @constructor
	                 * @param {perfetto.protos.HeapprofdConfig.IContinuousDumpConfig=} [p] Properties to set
	                 */
	                function ContinuousDumpConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * ContinuousDumpConfig dumpPhaseMs.
	                 * @member {number} dumpPhaseMs
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @instance
	                 */
	                ContinuousDumpConfig.prototype.dumpPhaseMs = 0;

	                /**
	                 * ContinuousDumpConfig dumpIntervalMs.
	                 * @member {number} dumpIntervalMs
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @instance
	                 */
	                ContinuousDumpConfig.prototype.dumpIntervalMs = 0;

	                /**
	                 * Creates a new ContinuousDumpConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {perfetto.protos.HeapprofdConfig.IContinuousDumpConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.HeapprofdConfig.ContinuousDumpConfig} ContinuousDumpConfig instance
	                 */
	                ContinuousDumpConfig.create = function create(properties) {
	                    return new ContinuousDumpConfig(properties);
	                };

	                /**
	                 * Encodes the specified ContinuousDumpConfig message. Does not implicitly {@link perfetto.protos.HeapprofdConfig.ContinuousDumpConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {perfetto.protos.HeapprofdConfig.IContinuousDumpConfig} m ContinuousDumpConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                ContinuousDumpConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.dumpPhaseMs != null && Object.hasOwnProperty.call(m, "dumpPhaseMs"))
	                        w.uint32(40).uint32(m.dumpPhaseMs);
	                    if (m.dumpIntervalMs != null && Object.hasOwnProperty.call(m, "dumpIntervalMs"))
	                        w.uint32(48).uint32(m.dumpIntervalMs);
	                    return w;
	                };

	                /**
	                 * Decodes a ContinuousDumpConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.HeapprofdConfig.ContinuousDumpConfig} ContinuousDumpConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                ContinuousDumpConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 5: {
	                                m.dumpPhaseMs = r.uint32();
	                                break;
	                            }
	                        case 6: {
	                                m.dumpIntervalMs = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a ContinuousDumpConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.HeapprofdConfig.ContinuousDumpConfig} ContinuousDumpConfig
	                 */
	                ContinuousDumpConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig();
	                    if (d.dumpPhaseMs != null) {
	                        m.dumpPhaseMs = d.dumpPhaseMs >>> 0;
	                    }
	                    if (d.dumpIntervalMs != null) {
	                        m.dumpIntervalMs = d.dumpIntervalMs >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a ContinuousDumpConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {perfetto.protos.HeapprofdConfig.ContinuousDumpConfig} m ContinuousDumpConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                ContinuousDumpConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.dumpPhaseMs = 0;
	                        d.dumpIntervalMs = 0;
	                    }
	                    if (m.dumpPhaseMs != null && m.hasOwnProperty("dumpPhaseMs")) {
	                        d.dumpPhaseMs = m.dumpPhaseMs;
	                    }
	                    if (m.dumpIntervalMs != null && m.hasOwnProperty("dumpIntervalMs")) {
	                        d.dumpIntervalMs = m.dumpIntervalMs;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this ContinuousDumpConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                ContinuousDumpConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for ContinuousDumpConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                ContinuousDumpConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.HeapprofdConfig.ContinuousDumpConfig";
	                };

	                return ContinuousDumpConfig;
	            })();

	            return HeapprofdConfig;
	        })();

	        protos.JavaHprofConfig = (function() {

	            /**
	             * Properties of a JavaHprofConfig.
	             * @memberof perfetto.protos
	             * @interface IJavaHprofConfig
	             * @property {Array.<string>|null} [processCmdline] JavaHprofConfig processCmdline
	             * @property {Array.<number>|null} [pid] JavaHprofConfig pid
	             * @property {Array.<string>|null} [targetInstalledBy] JavaHprofConfig targetInstalledBy
	             * @property {perfetto.protos.JavaHprofConfig.IContinuousDumpConfig|null} [continuousDumpConfig] JavaHprofConfig continuousDumpConfig
	             * @property {number|null} [minAnonymousMemoryKb] JavaHprofConfig minAnonymousMemoryKb
	             * @property {boolean|null} [dumpSmaps] JavaHprofConfig dumpSmaps
	             * @property {Array.<string>|null} [ignoredTypes] JavaHprofConfig ignoredTypes
	             */

	            /**
	             * Constructs a new JavaHprofConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a JavaHprofConfig.
	             * @implements IJavaHprofConfig
	             * @constructor
	             * @param {perfetto.protos.IJavaHprofConfig=} [p] Properties to set
	             */
	            function JavaHprofConfig(p) {
	                this.processCmdline = [];
	                this.pid = [];
	                this.targetInstalledBy = [];
	                this.ignoredTypes = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * JavaHprofConfig processCmdline.
	             * @member {Array.<string>} processCmdline
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.processCmdline = $util.emptyArray;

	            /**
	             * JavaHprofConfig pid.
	             * @member {Array.<number>} pid
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.pid = $util.emptyArray;

	            /**
	             * JavaHprofConfig targetInstalledBy.
	             * @member {Array.<string>} targetInstalledBy
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.targetInstalledBy = $util.emptyArray;

	            /**
	             * JavaHprofConfig continuousDumpConfig.
	             * @member {perfetto.protos.JavaHprofConfig.IContinuousDumpConfig|null|undefined} continuousDumpConfig
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.continuousDumpConfig = null;

	            /**
	             * JavaHprofConfig minAnonymousMemoryKb.
	             * @member {number} minAnonymousMemoryKb
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.minAnonymousMemoryKb = 0;

	            /**
	             * JavaHprofConfig dumpSmaps.
	             * @member {boolean} dumpSmaps
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.dumpSmaps = false;

	            /**
	             * JavaHprofConfig ignoredTypes.
	             * @member {Array.<string>} ignoredTypes
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             */
	            JavaHprofConfig.prototype.ignoredTypes = $util.emptyArray;

	            /**
	             * Creates a new JavaHprofConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @static
	             * @param {perfetto.protos.IJavaHprofConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.JavaHprofConfig} JavaHprofConfig instance
	             */
	            JavaHprofConfig.create = function create(properties) {
	                return new JavaHprofConfig(properties);
	            };

	            /**
	             * Encodes the specified JavaHprofConfig message. Does not implicitly {@link perfetto.protos.JavaHprofConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @static
	             * @param {perfetto.protos.IJavaHprofConfig} m JavaHprofConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            JavaHprofConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.processCmdline != null && m.processCmdline.length) {
	                    for (var i = 0; i < m.processCmdline.length; ++i)
	                        w.uint32(10).string(m.processCmdline[i]);
	                }
	                if (m.pid != null && m.pid.length) {
	                    for (var i = 0; i < m.pid.length; ++i)
	                        w.uint32(16).uint64(m.pid[i]);
	                }
	                if (m.continuousDumpConfig != null && Object.hasOwnProperty.call(m, "continuousDumpConfig"))
	                    $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.encode(m.continuousDumpConfig, w.uint32(26).fork()).ldelim();
	                if (m.minAnonymousMemoryKb != null && Object.hasOwnProperty.call(m, "minAnonymousMemoryKb"))
	                    w.uint32(32).uint32(m.minAnonymousMemoryKb);
	                if (m.dumpSmaps != null && Object.hasOwnProperty.call(m, "dumpSmaps"))
	                    w.uint32(40).bool(m.dumpSmaps);
	                if (m.ignoredTypes != null && m.ignoredTypes.length) {
	                    for (var i = 0; i < m.ignoredTypes.length; ++i)
	                        w.uint32(50).string(m.ignoredTypes[i]);
	                }
	                if (m.targetInstalledBy != null && m.targetInstalledBy.length) {
	                    for (var i = 0; i < m.targetInstalledBy.length; ++i)
	                        w.uint32(58).string(m.targetInstalledBy[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a JavaHprofConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.JavaHprofConfig} JavaHprofConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            JavaHprofConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.JavaHprofConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.processCmdline && m.processCmdline.length))
	                                m.processCmdline = [];
	                            m.processCmdline.push(r.string());
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.pid && m.pid.length))
	                                m.pid = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.pid.push(r.uint64());
	                            } else
	                                m.pid.push(r.uint64());
	                            break;
	                        }
	                    case 7: {
	                            if (!(m.targetInstalledBy && m.targetInstalledBy.length))
	                                m.targetInstalledBy = [];
	                            m.targetInstalledBy.push(r.string());
	                            break;
	                        }
	                    case 3: {
	                            m.continuousDumpConfig = $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.decode(r, r.uint32());
	                            break;
	                        }
	                    case 4: {
	                            m.minAnonymousMemoryKb = r.uint32();
	                            break;
	                        }
	                    case 5: {
	                            m.dumpSmaps = r.bool();
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.ignoredTypes && m.ignoredTypes.length))
	                                m.ignoredTypes = [];
	                            m.ignoredTypes.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a JavaHprofConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.JavaHprofConfig} JavaHprofConfig
	             */
	            JavaHprofConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.JavaHprofConfig)
	                    return d;
	                var m = new $root.perfetto.protos.JavaHprofConfig();
	                if (d.processCmdline) {
	                    if (!Array.isArray(d.processCmdline))
	                        throw TypeError(".perfetto.protos.JavaHprofConfig.processCmdline: array expected");
	                    m.processCmdline = [];
	                    for (var i = 0; i < d.processCmdline.length; ++i) {
	                        m.processCmdline[i] = String(d.processCmdline[i]);
	                    }
	                }
	                if (d.pid) {
	                    if (!Array.isArray(d.pid))
	                        throw TypeError(".perfetto.protos.JavaHprofConfig.pid: array expected");
	                    m.pid = [];
	                    for (var i = 0; i < d.pid.length; ++i) {
	                        if ($util.Long)
	                            (m.pid[i] = $util.Long.fromValue(d.pid[i])).unsigned = true;
	                        else if (typeof d.pid[i] === "string")
	                            m.pid[i] = parseInt(d.pid[i], 10);
	                        else if (typeof d.pid[i] === "number")
	                            m.pid[i] = d.pid[i];
	                        else if (typeof d.pid[i] === "object")
	                            m.pid[i] = new $util.LongBits(d.pid[i].low >>> 0, d.pid[i].high >>> 0).toNumber(true);
	                    }
	                }
	                if (d.targetInstalledBy) {
	                    if (!Array.isArray(d.targetInstalledBy))
	                        throw TypeError(".perfetto.protos.JavaHprofConfig.targetInstalledBy: array expected");
	                    m.targetInstalledBy = [];
	                    for (var i = 0; i < d.targetInstalledBy.length; ++i) {
	                        m.targetInstalledBy[i] = String(d.targetInstalledBy[i]);
	                    }
	                }
	                if (d.continuousDumpConfig != null) {
	                    if (typeof d.continuousDumpConfig !== "object")
	                        throw TypeError(".perfetto.protos.JavaHprofConfig.continuousDumpConfig: object expected");
	                    m.continuousDumpConfig = $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.fromObject(d.continuousDumpConfig);
	                }
	                if (d.minAnonymousMemoryKb != null) {
	                    m.minAnonymousMemoryKb = d.minAnonymousMemoryKb >>> 0;
	                }
	                if (d.dumpSmaps != null) {
	                    m.dumpSmaps = Boolean(d.dumpSmaps);
	                }
	                if (d.ignoredTypes) {
	                    if (!Array.isArray(d.ignoredTypes))
	                        throw TypeError(".perfetto.protos.JavaHprofConfig.ignoredTypes: array expected");
	                    m.ignoredTypes = [];
	                    for (var i = 0; i < d.ignoredTypes.length; ++i) {
	                        m.ignoredTypes[i] = String(d.ignoredTypes[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a JavaHprofConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @static
	             * @param {perfetto.protos.JavaHprofConfig} m JavaHprofConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            JavaHprofConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.processCmdline = [];
	                    d.pid = [];
	                    d.ignoredTypes = [];
	                    d.targetInstalledBy = [];
	                }
	                if (o.defaults) {
	                    d.continuousDumpConfig = null;
	                    d.minAnonymousMemoryKb = 0;
	                    d.dumpSmaps = false;
	                }
	                if (m.processCmdline && m.processCmdline.length) {
	                    d.processCmdline = [];
	                    for (var j = 0; j < m.processCmdline.length; ++j) {
	                        d.processCmdline[j] = m.processCmdline[j];
	                    }
	                }
	                if (m.pid && m.pid.length) {
	                    d.pid = [];
	                    for (var j = 0; j < m.pid.length; ++j) {
	                        if (typeof m.pid[j] === "number")
	                            d.pid[j] = o.longs === String ? String(m.pid[j]) : m.pid[j];
	                        else
	                            d.pid[j] = o.longs === String ? $util.Long.prototype.toString.call(m.pid[j]) : o.longs === Number ? new $util.LongBits(m.pid[j].low >>> 0, m.pid[j].high >>> 0).toNumber(true) : m.pid[j];
	                    }
	                }
	                if (m.continuousDumpConfig != null && m.hasOwnProperty("continuousDumpConfig")) {
	                    d.continuousDumpConfig = $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.toObject(m.continuousDumpConfig, o);
	                }
	                if (m.minAnonymousMemoryKb != null && m.hasOwnProperty("minAnonymousMemoryKb")) {
	                    d.minAnonymousMemoryKb = m.minAnonymousMemoryKb;
	                }
	                if (m.dumpSmaps != null && m.hasOwnProperty("dumpSmaps")) {
	                    d.dumpSmaps = m.dumpSmaps;
	                }
	                if (m.ignoredTypes && m.ignoredTypes.length) {
	                    d.ignoredTypes = [];
	                    for (var j = 0; j < m.ignoredTypes.length; ++j) {
	                        d.ignoredTypes[j] = m.ignoredTypes[j];
	                    }
	                }
	                if (m.targetInstalledBy && m.targetInstalledBy.length) {
	                    d.targetInstalledBy = [];
	                    for (var j = 0; j < m.targetInstalledBy.length; ++j) {
	                        d.targetInstalledBy[j] = m.targetInstalledBy[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this JavaHprofConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            JavaHprofConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for JavaHprofConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.JavaHprofConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            JavaHprofConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.JavaHprofConfig";
	            };

	            JavaHprofConfig.ContinuousDumpConfig = (function() {

	                /**
	                 * Properties of a ContinuousDumpConfig.
	                 * @memberof perfetto.protos.JavaHprofConfig
	                 * @interface IContinuousDumpConfig
	                 * @property {number|null} [dumpPhaseMs] ContinuousDumpConfig dumpPhaseMs
	                 * @property {number|null} [dumpIntervalMs] ContinuousDumpConfig dumpIntervalMs
	                 * @property {boolean|null} [scanPidsOnlyOnStart] ContinuousDumpConfig scanPidsOnlyOnStart
	                 */

	                /**
	                 * Constructs a new ContinuousDumpConfig.
	                 * @memberof perfetto.protos.JavaHprofConfig
	                 * @classdesc Represents a ContinuousDumpConfig.
	                 * @implements IContinuousDumpConfig
	                 * @constructor
	                 * @param {perfetto.protos.JavaHprofConfig.IContinuousDumpConfig=} [p] Properties to set
	                 */
	                function ContinuousDumpConfig(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * ContinuousDumpConfig dumpPhaseMs.
	                 * @member {number} dumpPhaseMs
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @instance
	                 */
	                ContinuousDumpConfig.prototype.dumpPhaseMs = 0;

	                /**
	                 * ContinuousDumpConfig dumpIntervalMs.
	                 * @member {number} dumpIntervalMs
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @instance
	                 */
	                ContinuousDumpConfig.prototype.dumpIntervalMs = 0;

	                /**
	                 * ContinuousDumpConfig scanPidsOnlyOnStart.
	                 * @member {boolean} scanPidsOnlyOnStart
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @instance
	                 */
	                ContinuousDumpConfig.prototype.scanPidsOnlyOnStart = false;

	                /**
	                 * Creates a new ContinuousDumpConfig instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {perfetto.protos.JavaHprofConfig.IContinuousDumpConfig=} [properties] Properties to set
	                 * @returns {perfetto.protos.JavaHprofConfig.ContinuousDumpConfig} ContinuousDumpConfig instance
	                 */
	                ContinuousDumpConfig.create = function create(properties) {
	                    return new ContinuousDumpConfig(properties);
	                };

	                /**
	                 * Encodes the specified ContinuousDumpConfig message. Does not implicitly {@link perfetto.protos.JavaHprofConfig.ContinuousDumpConfig.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {perfetto.protos.JavaHprofConfig.IContinuousDumpConfig} m ContinuousDumpConfig message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                ContinuousDumpConfig.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.dumpPhaseMs != null && Object.hasOwnProperty.call(m, "dumpPhaseMs"))
	                        w.uint32(8).uint32(m.dumpPhaseMs);
	                    if (m.dumpIntervalMs != null && Object.hasOwnProperty.call(m, "dumpIntervalMs"))
	                        w.uint32(16).uint32(m.dumpIntervalMs);
	                    if (m.scanPidsOnlyOnStart != null && Object.hasOwnProperty.call(m, "scanPidsOnlyOnStart"))
	                        w.uint32(24).bool(m.scanPidsOnlyOnStart);
	                    return w;
	                };

	                /**
	                 * Decodes a ContinuousDumpConfig message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.JavaHprofConfig.ContinuousDumpConfig} ContinuousDumpConfig
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                ContinuousDumpConfig.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.dumpPhaseMs = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.dumpIntervalMs = r.uint32();
	                                break;
	                            }
	                        case 3: {
	                                m.scanPidsOnlyOnStart = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a ContinuousDumpConfig message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.JavaHprofConfig.ContinuousDumpConfig} ContinuousDumpConfig
	                 */
	                ContinuousDumpConfig.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig)
	                        return d;
	                    var m = new $root.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig();
	                    if (d.dumpPhaseMs != null) {
	                        m.dumpPhaseMs = d.dumpPhaseMs >>> 0;
	                    }
	                    if (d.dumpIntervalMs != null) {
	                        m.dumpIntervalMs = d.dumpIntervalMs >>> 0;
	                    }
	                    if (d.scanPidsOnlyOnStart != null) {
	                        m.scanPidsOnlyOnStart = Boolean(d.scanPidsOnlyOnStart);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a ContinuousDumpConfig message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {perfetto.protos.JavaHprofConfig.ContinuousDumpConfig} m ContinuousDumpConfig
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                ContinuousDumpConfig.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.dumpPhaseMs = 0;
	                        d.dumpIntervalMs = 0;
	                        d.scanPidsOnlyOnStart = false;
	                    }
	                    if (m.dumpPhaseMs != null && m.hasOwnProperty("dumpPhaseMs")) {
	                        d.dumpPhaseMs = m.dumpPhaseMs;
	                    }
	                    if (m.dumpIntervalMs != null && m.hasOwnProperty("dumpIntervalMs")) {
	                        d.dumpIntervalMs = m.dumpIntervalMs;
	                    }
	                    if (m.scanPidsOnlyOnStart != null && m.hasOwnProperty("scanPidsOnlyOnStart")) {
	                        d.scanPidsOnlyOnStart = m.scanPidsOnlyOnStart;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this ContinuousDumpConfig to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                ContinuousDumpConfig.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for ContinuousDumpConfig
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                ContinuousDumpConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.JavaHprofConfig.ContinuousDumpConfig";
	                };

	                return ContinuousDumpConfig;
	            })();

	            return JavaHprofConfig;
	        })();

	        protos.PerfEventConfig = (function() {

	            /**
	             * Properties of a PerfEventConfig.
	             * @memberof perfetto.protos
	             * @interface IPerfEventConfig
	             * @property {perfetto.protos.PerfEvents.ITimebase|null} [timebase] PerfEventConfig timebase
	             * @property {Array.<perfetto.protos.IFollowerEvent>|null} [followers] PerfEventConfig followers
	             * @property {perfetto.protos.PerfEventConfig.ICallstackSampling|null} [callstackSampling] PerfEventConfig callstackSampling
	             * @property {number|null} [ringBufferReadPeriodMs] PerfEventConfig ringBufferReadPeriodMs
	             * @property {number|null} [ringBufferPages] PerfEventConfig ringBufferPages
	             * @property {number|null} [maxEnqueuedFootprintKb] PerfEventConfig maxEnqueuedFootprintKb
	             * @property {number|null} [maxDaemonMemoryKb] PerfEventConfig maxDaemonMemoryKb
	             * @property {number|null} [remoteDescriptorTimeoutMs] PerfEventConfig remoteDescriptorTimeoutMs
	             * @property {number|null} [unwindStateClearPeriodMs] PerfEventConfig unwindStateClearPeriodMs
	             * @property {Array.<string>|null} [targetInstalledBy] PerfEventConfig targetInstalledBy
	             * @property {boolean|null} [allCpus] PerfEventConfig allCpus
	             * @property {number|null} [samplingFrequency] PerfEventConfig samplingFrequency
	             * @property {boolean|null} [kernelFrames] PerfEventConfig kernelFrames
	             * @property {Array.<number>|null} [targetPid] PerfEventConfig targetPid
	             * @property {Array.<string>|null} [targetCmdline] PerfEventConfig targetCmdline
	             * @property {Array.<number>|null} [excludePid] PerfEventConfig excludePid
	             * @property {Array.<string>|null} [excludeCmdline] PerfEventConfig excludeCmdline
	             * @property {number|null} [additionalCmdlineCount] PerfEventConfig additionalCmdlineCount
	             */

	            /**
	             * Constructs a new PerfEventConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a PerfEventConfig.
	             * @implements IPerfEventConfig
	             * @constructor
	             * @param {perfetto.protos.IPerfEventConfig=} [p] Properties to set
	             */
	            function PerfEventConfig(p) {
	                this.followers = [];
	                this.targetInstalledBy = [];
	                this.targetPid = [];
	                this.targetCmdline = [];
	                this.excludePid = [];
	                this.excludeCmdline = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * PerfEventConfig timebase.
	             * @member {perfetto.protos.PerfEvents.ITimebase|null|undefined} timebase
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.timebase = null;

	            /**
	             * PerfEventConfig followers.
	             * @member {Array.<perfetto.protos.IFollowerEvent>} followers
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.followers = $util.emptyArray;

	            /**
	             * PerfEventConfig callstackSampling.
	             * @member {perfetto.protos.PerfEventConfig.ICallstackSampling|null|undefined} callstackSampling
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.callstackSampling = null;

	            /**
	             * PerfEventConfig ringBufferReadPeriodMs.
	             * @member {number} ringBufferReadPeriodMs
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.ringBufferReadPeriodMs = 0;

	            /**
	             * PerfEventConfig ringBufferPages.
	             * @member {number} ringBufferPages
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.ringBufferPages = 0;

	            /**
	             * PerfEventConfig maxEnqueuedFootprintKb.
	             * @member {number} maxEnqueuedFootprintKb
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.maxEnqueuedFootprintKb = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * PerfEventConfig maxDaemonMemoryKb.
	             * @member {number} maxDaemonMemoryKb
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.maxDaemonMemoryKb = 0;

	            /**
	             * PerfEventConfig remoteDescriptorTimeoutMs.
	             * @member {number} remoteDescriptorTimeoutMs
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.remoteDescriptorTimeoutMs = 0;

	            /**
	             * PerfEventConfig unwindStateClearPeriodMs.
	             * @member {number} unwindStateClearPeriodMs
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.unwindStateClearPeriodMs = 0;

	            /**
	             * PerfEventConfig targetInstalledBy.
	             * @member {Array.<string>} targetInstalledBy
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.targetInstalledBy = $util.emptyArray;

	            /**
	             * PerfEventConfig allCpus.
	             * @member {boolean} allCpus
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.allCpus = false;

	            /**
	             * PerfEventConfig samplingFrequency.
	             * @member {number} samplingFrequency
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.samplingFrequency = 0;

	            /**
	             * PerfEventConfig kernelFrames.
	             * @member {boolean} kernelFrames
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.kernelFrames = false;

	            /**
	             * PerfEventConfig targetPid.
	             * @member {Array.<number>} targetPid
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.targetPid = $util.emptyArray;

	            /**
	             * PerfEventConfig targetCmdline.
	             * @member {Array.<string>} targetCmdline
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.targetCmdline = $util.emptyArray;

	            /**
	             * PerfEventConfig excludePid.
	             * @member {Array.<number>} excludePid
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.excludePid = $util.emptyArray;

	            /**
	             * PerfEventConfig excludeCmdline.
	             * @member {Array.<string>} excludeCmdline
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.excludeCmdline = $util.emptyArray;

	            /**
	             * PerfEventConfig additionalCmdlineCount.
	             * @member {number} additionalCmdlineCount
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             */
	            PerfEventConfig.prototype.additionalCmdlineCount = 0;

	            /**
	             * Creates a new PerfEventConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.PerfEventConfig
	             * @static
	             * @param {perfetto.protos.IPerfEventConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.PerfEventConfig} PerfEventConfig instance
	             */
	            PerfEventConfig.create = function create(properties) {
	                return new PerfEventConfig(properties);
	            };

	            /**
	             * Encodes the specified PerfEventConfig message. Does not implicitly {@link perfetto.protos.PerfEventConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.PerfEventConfig
	             * @static
	             * @param {perfetto.protos.IPerfEventConfig} m PerfEventConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            PerfEventConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.allCpus != null && Object.hasOwnProperty.call(m, "allCpus"))
	                    w.uint32(8).bool(m.allCpus);
	                if (m.samplingFrequency != null && Object.hasOwnProperty.call(m, "samplingFrequency"))
	                    w.uint32(16).uint32(m.samplingFrequency);
	                if (m.ringBufferPages != null && Object.hasOwnProperty.call(m, "ringBufferPages"))
	                    w.uint32(24).uint32(m.ringBufferPages);
	                if (m.targetPid != null && m.targetPid.length) {
	                    for (var i = 0; i < m.targetPid.length; ++i)
	                        w.uint32(32).int32(m.targetPid[i]);
	                }
	                if (m.targetCmdline != null && m.targetCmdline.length) {
	                    for (var i = 0; i < m.targetCmdline.length; ++i)
	                        w.uint32(42).string(m.targetCmdline[i]);
	                }
	                if (m.excludePid != null && m.excludePid.length) {
	                    for (var i = 0; i < m.excludePid.length; ++i)
	                        w.uint32(48).int32(m.excludePid[i]);
	                }
	                if (m.excludeCmdline != null && m.excludeCmdline.length) {
	                    for (var i = 0; i < m.excludeCmdline.length; ++i)
	                        w.uint32(58).string(m.excludeCmdline[i]);
	                }
	                if (m.ringBufferReadPeriodMs != null && Object.hasOwnProperty.call(m, "ringBufferReadPeriodMs"))
	                    w.uint32(64).uint32(m.ringBufferReadPeriodMs);
	                if (m.remoteDescriptorTimeoutMs != null && Object.hasOwnProperty.call(m, "remoteDescriptorTimeoutMs"))
	                    w.uint32(72).uint32(m.remoteDescriptorTimeoutMs);
	                if (m.unwindStateClearPeriodMs != null && Object.hasOwnProperty.call(m, "unwindStateClearPeriodMs"))
	                    w.uint32(80).uint32(m.unwindStateClearPeriodMs);
	                if (m.additionalCmdlineCount != null && Object.hasOwnProperty.call(m, "additionalCmdlineCount"))
	                    w.uint32(88).uint32(m.additionalCmdlineCount);
	                if (m.kernelFrames != null && Object.hasOwnProperty.call(m, "kernelFrames"))
	                    w.uint32(96).bool(m.kernelFrames);
	                if (m.maxDaemonMemoryKb != null && Object.hasOwnProperty.call(m, "maxDaemonMemoryKb"))
	                    w.uint32(104).uint32(m.maxDaemonMemoryKb);
	                if (m.timebase != null && Object.hasOwnProperty.call(m, "timebase"))
	                    $root.perfetto.protos.PerfEvents.Timebase.encode(m.timebase, w.uint32(122).fork()).ldelim();
	                if (m.callstackSampling != null && Object.hasOwnProperty.call(m, "callstackSampling"))
	                    $root.perfetto.protos.PerfEventConfig.CallstackSampling.encode(m.callstackSampling, w.uint32(130).fork()).ldelim();
	                if (m.maxEnqueuedFootprintKb != null && Object.hasOwnProperty.call(m, "maxEnqueuedFootprintKb"))
	                    w.uint32(136).uint64(m.maxEnqueuedFootprintKb);
	                if (m.targetInstalledBy != null && m.targetInstalledBy.length) {
	                    for (var i = 0; i < m.targetInstalledBy.length; ++i)
	                        w.uint32(146).string(m.targetInstalledBy[i]);
	                }
	                if (m.followers != null && m.followers.length) {
	                    for (var i = 0; i < m.followers.length; ++i)
	                        $root.perfetto.protos.FollowerEvent.encode(m.followers[i], w.uint32(154).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a PerfEventConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.PerfEventConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.PerfEventConfig} PerfEventConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            PerfEventConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEventConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 15: {
	                            m.timebase = $root.perfetto.protos.PerfEvents.Timebase.decode(r, r.uint32());
	                            break;
	                        }
	                    case 19: {
	                            if (!(m.followers && m.followers.length))
	                                m.followers = [];
	                            m.followers.push($root.perfetto.protos.FollowerEvent.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 16: {
	                            m.callstackSampling = $root.perfetto.protos.PerfEventConfig.CallstackSampling.decode(r, r.uint32());
	                            break;
	                        }
	                    case 8: {
	                            m.ringBufferReadPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 3: {
	                            m.ringBufferPages = r.uint32();
	                            break;
	                        }
	                    case 17: {
	                            m.maxEnqueuedFootprintKb = r.uint64();
	                            break;
	                        }
	                    case 13: {
	                            m.maxDaemonMemoryKb = r.uint32();
	                            break;
	                        }
	                    case 9: {
	                            m.remoteDescriptorTimeoutMs = r.uint32();
	                            break;
	                        }
	                    case 10: {
	                            m.unwindStateClearPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 18: {
	                            if (!(m.targetInstalledBy && m.targetInstalledBy.length))
	                                m.targetInstalledBy = [];
	                            m.targetInstalledBy.push(r.string());
	                            break;
	                        }
	                    case 1: {
	                            m.allCpus = r.bool();
	                            break;
	                        }
	                    case 2: {
	                            m.samplingFrequency = r.uint32();
	                            break;
	                        }
	                    case 12: {
	                            m.kernelFrames = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.targetPid && m.targetPid.length))
	                                m.targetPid = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.targetPid.push(r.int32());
	                            } else
	                                m.targetPid.push(r.int32());
	                            break;
	                        }
	                    case 5: {
	                            if (!(m.targetCmdline && m.targetCmdline.length))
	                                m.targetCmdline = [];
	                            m.targetCmdline.push(r.string());
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.excludePid && m.excludePid.length))
	                                m.excludePid = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.excludePid.push(r.int32());
	                            } else
	                                m.excludePid.push(r.int32());
	                            break;
	                        }
	                    case 7: {
	                            if (!(m.excludeCmdline && m.excludeCmdline.length))
	                                m.excludeCmdline = [];
	                            m.excludeCmdline.push(r.string());
	                            break;
	                        }
	                    case 11: {
	                            m.additionalCmdlineCount = r.uint32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a PerfEventConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.PerfEventConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.PerfEventConfig} PerfEventConfig
	             */
	            PerfEventConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.PerfEventConfig)
	                    return d;
	                var m = new $root.perfetto.protos.PerfEventConfig();
	                if (d.timebase != null) {
	                    if (typeof d.timebase !== "object")
	                        throw TypeError(".perfetto.protos.PerfEventConfig.timebase: object expected");
	                    m.timebase = $root.perfetto.protos.PerfEvents.Timebase.fromObject(d.timebase);
	                }
	                if (d.followers) {
	                    if (!Array.isArray(d.followers))
	                        throw TypeError(".perfetto.protos.PerfEventConfig.followers: array expected");
	                    m.followers = [];
	                    for (var i = 0; i < d.followers.length; ++i) {
	                        if (typeof d.followers[i] !== "object")
	                            throw TypeError(".perfetto.protos.PerfEventConfig.followers: object expected");
	                        m.followers[i] = $root.perfetto.protos.FollowerEvent.fromObject(d.followers[i]);
	                    }
	                }
	                if (d.callstackSampling != null) {
	                    if (typeof d.callstackSampling !== "object")
	                        throw TypeError(".perfetto.protos.PerfEventConfig.callstackSampling: object expected");
	                    m.callstackSampling = $root.perfetto.protos.PerfEventConfig.CallstackSampling.fromObject(d.callstackSampling);
	                }
	                if (d.ringBufferReadPeriodMs != null) {
	                    m.ringBufferReadPeriodMs = d.ringBufferReadPeriodMs >>> 0;
	                }
	                if (d.ringBufferPages != null) {
	                    m.ringBufferPages = d.ringBufferPages >>> 0;
	                }
	                if (d.maxEnqueuedFootprintKb != null) {
	                    if ($util.Long)
	                        (m.maxEnqueuedFootprintKb = $util.Long.fromValue(d.maxEnqueuedFootprintKb)).unsigned = true;
	                    else if (typeof d.maxEnqueuedFootprintKb === "string")
	                        m.maxEnqueuedFootprintKb = parseInt(d.maxEnqueuedFootprintKb, 10);
	                    else if (typeof d.maxEnqueuedFootprintKb === "number")
	                        m.maxEnqueuedFootprintKb = d.maxEnqueuedFootprintKb;
	                    else if (typeof d.maxEnqueuedFootprintKb === "object")
	                        m.maxEnqueuedFootprintKb = new $util.LongBits(d.maxEnqueuedFootprintKb.low >>> 0, d.maxEnqueuedFootprintKb.high >>> 0).toNumber(true);
	                }
	                if (d.maxDaemonMemoryKb != null) {
	                    m.maxDaemonMemoryKb = d.maxDaemonMemoryKb >>> 0;
	                }
	                if (d.remoteDescriptorTimeoutMs != null) {
	                    m.remoteDescriptorTimeoutMs = d.remoteDescriptorTimeoutMs >>> 0;
	                }
	                if (d.unwindStateClearPeriodMs != null) {
	                    m.unwindStateClearPeriodMs = d.unwindStateClearPeriodMs >>> 0;
	                }
	                if (d.targetInstalledBy) {
	                    if (!Array.isArray(d.targetInstalledBy))
	                        throw TypeError(".perfetto.protos.PerfEventConfig.targetInstalledBy: array expected");
	                    m.targetInstalledBy = [];
	                    for (var i = 0; i < d.targetInstalledBy.length; ++i) {
	                        m.targetInstalledBy[i] = String(d.targetInstalledBy[i]);
	                    }
	                }
	                if (d.allCpus != null) {
	                    m.allCpus = Boolean(d.allCpus);
	                }
	                if (d.samplingFrequency != null) {
	                    m.samplingFrequency = d.samplingFrequency >>> 0;
	                }
	                if (d.kernelFrames != null) {
	                    m.kernelFrames = Boolean(d.kernelFrames);
	                }
	                if (d.targetPid) {
	                    if (!Array.isArray(d.targetPid))
	                        throw TypeError(".perfetto.protos.PerfEventConfig.targetPid: array expected");
	                    m.targetPid = [];
	                    for (var i = 0; i < d.targetPid.length; ++i) {
	                        m.targetPid[i] = d.targetPid[i] | 0;
	                    }
	                }
	                if (d.targetCmdline) {
	                    if (!Array.isArray(d.targetCmdline))
	                        throw TypeError(".perfetto.protos.PerfEventConfig.targetCmdline: array expected");
	                    m.targetCmdline = [];
	                    for (var i = 0; i < d.targetCmdline.length; ++i) {
	                        m.targetCmdline[i] = String(d.targetCmdline[i]);
	                    }
	                }
	                if (d.excludePid) {
	                    if (!Array.isArray(d.excludePid))
	                        throw TypeError(".perfetto.protos.PerfEventConfig.excludePid: array expected");
	                    m.excludePid = [];
	                    for (var i = 0; i < d.excludePid.length; ++i) {
	                        m.excludePid[i] = d.excludePid[i] | 0;
	                    }
	                }
	                if (d.excludeCmdline) {
	                    if (!Array.isArray(d.excludeCmdline))
	                        throw TypeError(".perfetto.protos.PerfEventConfig.excludeCmdline: array expected");
	                    m.excludeCmdline = [];
	                    for (var i = 0; i < d.excludeCmdline.length; ++i) {
	                        m.excludeCmdline[i] = String(d.excludeCmdline[i]);
	                    }
	                }
	                if (d.additionalCmdlineCount != null) {
	                    m.additionalCmdlineCount = d.additionalCmdlineCount >>> 0;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a PerfEventConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.PerfEventConfig
	             * @static
	             * @param {perfetto.protos.PerfEventConfig} m PerfEventConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            PerfEventConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.targetPid = [];
	                    d.targetCmdline = [];
	                    d.excludePid = [];
	                    d.excludeCmdline = [];
	                    d.targetInstalledBy = [];
	                    d.followers = [];
	                }
	                if (o.defaults) {
	                    d.allCpus = false;
	                    d.samplingFrequency = 0;
	                    d.ringBufferPages = 0;
	                    d.ringBufferReadPeriodMs = 0;
	                    d.remoteDescriptorTimeoutMs = 0;
	                    d.unwindStateClearPeriodMs = 0;
	                    d.additionalCmdlineCount = 0;
	                    d.kernelFrames = false;
	                    d.maxDaemonMemoryKb = 0;
	                    d.timebase = null;
	                    d.callstackSampling = null;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.maxEnqueuedFootprintKb = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.maxEnqueuedFootprintKb = o.longs === String ? "0" : 0;
	                }
	                if (m.allCpus != null && m.hasOwnProperty("allCpus")) {
	                    d.allCpus = m.allCpus;
	                }
	                if (m.samplingFrequency != null && m.hasOwnProperty("samplingFrequency")) {
	                    d.samplingFrequency = m.samplingFrequency;
	                }
	                if (m.ringBufferPages != null && m.hasOwnProperty("ringBufferPages")) {
	                    d.ringBufferPages = m.ringBufferPages;
	                }
	                if (m.targetPid && m.targetPid.length) {
	                    d.targetPid = [];
	                    for (var j = 0; j < m.targetPid.length; ++j) {
	                        d.targetPid[j] = m.targetPid[j];
	                    }
	                }
	                if (m.targetCmdline && m.targetCmdline.length) {
	                    d.targetCmdline = [];
	                    for (var j = 0; j < m.targetCmdline.length; ++j) {
	                        d.targetCmdline[j] = m.targetCmdline[j];
	                    }
	                }
	                if (m.excludePid && m.excludePid.length) {
	                    d.excludePid = [];
	                    for (var j = 0; j < m.excludePid.length; ++j) {
	                        d.excludePid[j] = m.excludePid[j];
	                    }
	                }
	                if (m.excludeCmdline && m.excludeCmdline.length) {
	                    d.excludeCmdline = [];
	                    for (var j = 0; j < m.excludeCmdline.length; ++j) {
	                        d.excludeCmdline[j] = m.excludeCmdline[j];
	                    }
	                }
	                if (m.ringBufferReadPeriodMs != null && m.hasOwnProperty("ringBufferReadPeriodMs")) {
	                    d.ringBufferReadPeriodMs = m.ringBufferReadPeriodMs;
	                }
	                if (m.remoteDescriptorTimeoutMs != null && m.hasOwnProperty("remoteDescriptorTimeoutMs")) {
	                    d.remoteDescriptorTimeoutMs = m.remoteDescriptorTimeoutMs;
	                }
	                if (m.unwindStateClearPeriodMs != null && m.hasOwnProperty("unwindStateClearPeriodMs")) {
	                    d.unwindStateClearPeriodMs = m.unwindStateClearPeriodMs;
	                }
	                if (m.additionalCmdlineCount != null && m.hasOwnProperty("additionalCmdlineCount")) {
	                    d.additionalCmdlineCount = m.additionalCmdlineCount;
	                }
	                if (m.kernelFrames != null && m.hasOwnProperty("kernelFrames")) {
	                    d.kernelFrames = m.kernelFrames;
	                }
	                if (m.maxDaemonMemoryKb != null && m.hasOwnProperty("maxDaemonMemoryKb")) {
	                    d.maxDaemonMemoryKb = m.maxDaemonMemoryKb;
	                }
	                if (m.timebase != null && m.hasOwnProperty("timebase")) {
	                    d.timebase = $root.perfetto.protos.PerfEvents.Timebase.toObject(m.timebase, o);
	                }
	                if (m.callstackSampling != null && m.hasOwnProperty("callstackSampling")) {
	                    d.callstackSampling = $root.perfetto.protos.PerfEventConfig.CallstackSampling.toObject(m.callstackSampling, o);
	                }
	                if (m.maxEnqueuedFootprintKb != null && m.hasOwnProperty("maxEnqueuedFootprintKb")) {
	                    if (typeof m.maxEnqueuedFootprintKb === "number")
	                        d.maxEnqueuedFootprintKb = o.longs === String ? String(m.maxEnqueuedFootprintKb) : m.maxEnqueuedFootprintKb;
	                    else
	                        d.maxEnqueuedFootprintKb = o.longs === String ? $util.Long.prototype.toString.call(m.maxEnqueuedFootprintKb) : o.longs === Number ? new $util.LongBits(m.maxEnqueuedFootprintKb.low >>> 0, m.maxEnqueuedFootprintKb.high >>> 0).toNumber(true) : m.maxEnqueuedFootprintKb;
	                }
	                if (m.targetInstalledBy && m.targetInstalledBy.length) {
	                    d.targetInstalledBy = [];
	                    for (var j = 0; j < m.targetInstalledBy.length; ++j) {
	                        d.targetInstalledBy[j] = m.targetInstalledBy[j];
	                    }
	                }
	                if (m.followers && m.followers.length) {
	                    d.followers = [];
	                    for (var j = 0; j < m.followers.length; ++j) {
	                        d.followers[j] = $root.perfetto.protos.FollowerEvent.toObject(m.followers[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this PerfEventConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.PerfEventConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            PerfEventConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for PerfEventConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.PerfEventConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            PerfEventConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.PerfEventConfig";
	            };

	            PerfEventConfig.CallstackSampling = (function() {

	                /**
	                 * Properties of a CallstackSampling.
	                 * @memberof perfetto.protos.PerfEventConfig
	                 * @interface ICallstackSampling
	                 * @property {perfetto.protos.PerfEventConfig.IScope|null} [scope] CallstackSampling scope
	                 * @property {boolean|null} [kernelFrames] CallstackSampling kernelFrames
	                 * @property {perfetto.protos.PerfEventConfig.UnwindMode|null} [userFrames] CallstackSampling userFrames
	                 */

	                /**
	                 * Constructs a new CallstackSampling.
	                 * @memberof perfetto.protos.PerfEventConfig
	                 * @classdesc Represents a CallstackSampling.
	                 * @implements ICallstackSampling
	                 * @constructor
	                 * @param {perfetto.protos.PerfEventConfig.ICallstackSampling=} [p] Properties to set
	                 */
	                function CallstackSampling(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * CallstackSampling scope.
	                 * @member {perfetto.protos.PerfEventConfig.IScope|null|undefined} scope
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @instance
	                 */
	                CallstackSampling.prototype.scope = null;

	                /**
	                 * CallstackSampling kernelFrames.
	                 * @member {boolean} kernelFrames
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @instance
	                 */
	                CallstackSampling.prototype.kernelFrames = false;

	                /**
	                 * CallstackSampling userFrames.
	                 * @member {perfetto.protos.PerfEventConfig.UnwindMode} userFrames
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @instance
	                 */
	                CallstackSampling.prototype.userFrames = 0;

	                /**
	                 * Creates a new CallstackSampling instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @static
	                 * @param {perfetto.protos.PerfEventConfig.ICallstackSampling=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfEventConfig.CallstackSampling} CallstackSampling instance
	                 */
	                CallstackSampling.create = function create(properties) {
	                    return new CallstackSampling(properties);
	                };

	                /**
	                 * Encodes the specified CallstackSampling message. Does not implicitly {@link perfetto.protos.PerfEventConfig.CallstackSampling.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @static
	                 * @param {perfetto.protos.PerfEventConfig.ICallstackSampling} m CallstackSampling message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                CallstackSampling.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.scope != null && Object.hasOwnProperty.call(m, "scope"))
	                        $root.perfetto.protos.PerfEventConfig.Scope.encode(m.scope, w.uint32(10).fork()).ldelim();
	                    if (m.kernelFrames != null && Object.hasOwnProperty.call(m, "kernelFrames"))
	                        w.uint32(16).bool(m.kernelFrames);
	                    if (m.userFrames != null && Object.hasOwnProperty.call(m, "userFrames"))
	                        w.uint32(24).int32(m.userFrames);
	                    return w;
	                };

	                /**
	                 * Decodes a CallstackSampling message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfEventConfig.CallstackSampling} CallstackSampling
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                CallstackSampling.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEventConfig.CallstackSampling();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.scope = $root.perfetto.protos.PerfEventConfig.Scope.decode(r, r.uint32());
	                                break;
	                            }
	                        case 2: {
	                                m.kernelFrames = r.bool();
	                                break;
	                            }
	                        case 3: {
	                                m.userFrames = r.int32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a CallstackSampling message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfEventConfig.CallstackSampling} CallstackSampling
	                 */
	                CallstackSampling.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfEventConfig.CallstackSampling)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfEventConfig.CallstackSampling();
	                    if (d.scope != null) {
	                        if (typeof d.scope !== "object")
	                            throw TypeError(".perfetto.protos.PerfEventConfig.CallstackSampling.scope: object expected");
	                        m.scope = $root.perfetto.protos.PerfEventConfig.Scope.fromObject(d.scope);
	                    }
	                    if (d.kernelFrames != null) {
	                        m.kernelFrames = Boolean(d.kernelFrames);
	                    }
	                    switch (d.userFrames) {
	                    default:
	                        if (typeof d.userFrames === "number") {
	                            m.userFrames = d.userFrames;
	                            break;
	                        }
	                        break;
	                    case "UNWIND_UNKNOWN":
	                    case 0:
	                        m.userFrames = 0;
	                        break;
	                    case "UNWIND_SKIP":
	                    case 1:
	                        m.userFrames = 1;
	                        break;
	                    case "UNWIND_DWARF":
	                    case 2:
	                        m.userFrames = 2;
	                        break;
	                    case "UNWIND_FRAME_POINTER":
	                    case 3:
	                        m.userFrames = 3;
	                        break;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a CallstackSampling message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @static
	                 * @param {perfetto.protos.PerfEventConfig.CallstackSampling} m CallstackSampling
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                CallstackSampling.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.scope = null;
	                        d.kernelFrames = false;
	                        d.userFrames = o.enums === String ? "UNWIND_UNKNOWN" : 0;
	                    }
	                    if (m.scope != null && m.hasOwnProperty("scope")) {
	                        d.scope = $root.perfetto.protos.PerfEventConfig.Scope.toObject(m.scope, o);
	                    }
	                    if (m.kernelFrames != null && m.hasOwnProperty("kernelFrames")) {
	                        d.kernelFrames = m.kernelFrames;
	                    }
	                    if (m.userFrames != null && m.hasOwnProperty("userFrames")) {
	                        d.userFrames = o.enums === String ? $root.perfetto.protos.PerfEventConfig.UnwindMode[m.userFrames] === undefined ? m.userFrames : $root.perfetto.protos.PerfEventConfig.UnwindMode[m.userFrames] : m.userFrames;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this CallstackSampling to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                CallstackSampling.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for CallstackSampling
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfEventConfig.CallstackSampling
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                CallstackSampling.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfEventConfig.CallstackSampling";
	                };

	                return CallstackSampling;
	            })();

	            PerfEventConfig.Scope = (function() {

	                /**
	                 * Properties of a Scope.
	                 * @memberof perfetto.protos.PerfEventConfig
	                 * @interface IScope
	                 * @property {Array.<number>|null} [targetPid] Scope targetPid
	                 * @property {Array.<string>|null} [targetCmdline] Scope targetCmdline
	                 * @property {Array.<number>|null} [excludePid] Scope excludePid
	                 * @property {Array.<string>|null} [excludeCmdline] Scope excludeCmdline
	                 * @property {number|null} [additionalCmdlineCount] Scope additionalCmdlineCount
	                 * @property {number|null} [processShardCount] Scope processShardCount
	                 */

	                /**
	                 * Constructs a new Scope.
	                 * @memberof perfetto.protos.PerfEventConfig
	                 * @classdesc Represents a Scope.
	                 * @implements IScope
	                 * @constructor
	                 * @param {perfetto.protos.PerfEventConfig.IScope=} [p] Properties to set
	                 */
	                function Scope(p) {
	                    this.targetPid = [];
	                    this.targetCmdline = [];
	                    this.excludePid = [];
	                    this.excludeCmdline = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Scope targetPid.
	                 * @member {Array.<number>} targetPid
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 */
	                Scope.prototype.targetPid = $util.emptyArray;

	                /**
	                 * Scope targetCmdline.
	                 * @member {Array.<string>} targetCmdline
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 */
	                Scope.prototype.targetCmdline = $util.emptyArray;

	                /**
	                 * Scope excludePid.
	                 * @member {Array.<number>} excludePid
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 */
	                Scope.prototype.excludePid = $util.emptyArray;

	                /**
	                 * Scope excludeCmdline.
	                 * @member {Array.<string>} excludeCmdline
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 */
	                Scope.prototype.excludeCmdline = $util.emptyArray;

	                /**
	                 * Scope additionalCmdlineCount.
	                 * @member {number} additionalCmdlineCount
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 */
	                Scope.prototype.additionalCmdlineCount = 0;

	                /**
	                 * Scope processShardCount.
	                 * @member {number} processShardCount
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 */
	                Scope.prototype.processShardCount = 0;

	                /**
	                 * Creates a new Scope instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @static
	                 * @param {perfetto.protos.PerfEventConfig.IScope=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfEventConfig.Scope} Scope instance
	                 */
	                Scope.create = function create(properties) {
	                    return new Scope(properties);
	                };

	                /**
	                 * Encodes the specified Scope message. Does not implicitly {@link perfetto.protos.PerfEventConfig.Scope.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @static
	                 * @param {perfetto.protos.PerfEventConfig.IScope} m Scope message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Scope.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.targetPid != null && m.targetPid.length) {
	                        for (var i = 0; i < m.targetPid.length; ++i)
	                            w.uint32(8).int32(m.targetPid[i]);
	                    }
	                    if (m.targetCmdline != null && m.targetCmdline.length) {
	                        for (var i = 0; i < m.targetCmdline.length; ++i)
	                            w.uint32(18).string(m.targetCmdline[i]);
	                    }
	                    if (m.excludePid != null && m.excludePid.length) {
	                        for (var i = 0; i < m.excludePid.length; ++i)
	                            w.uint32(24).int32(m.excludePid[i]);
	                    }
	                    if (m.excludeCmdline != null && m.excludeCmdline.length) {
	                        for (var i = 0; i < m.excludeCmdline.length; ++i)
	                            w.uint32(34).string(m.excludeCmdline[i]);
	                    }
	                    if (m.additionalCmdlineCount != null && Object.hasOwnProperty.call(m, "additionalCmdlineCount"))
	                        w.uint32(40).uint32(m.additionalCmdlineCount);
	                    if (m.processShardCount != null && Object.hasOwnProperty.call(m, "processShardCount"))
	                        w.uint32(48).uint32(m.processShardCount);
	                    return w;
	                };

	                /**
	                 * Decodes a Scope message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfEventConfig.Scope} Scope
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Scope.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEventConfig.Scope();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                if (!(m.targetPid && m.targetPid.length))
	                                    m.targetPid = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.targetPid.push(r.int32());
	                                } else
	                                    m.targetPid.push(r.int32());
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.targetCmdline && m.targetCmdline.length))
	                                    m.targetCmdline = [];
	                                m.targetCmdline.push(r.string());
	                                break;
	                            }
	                        case 3: {
	                                if (!(m.excludePid && m.excludePid.length))
	                                    m.excludePid = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.excludePid.push(r.int32());
	                                } else
	                                    m.excludePid.push(r.int32());
	                                break;
	                            }
	                        case 4: {
	                                if (!(m.excludeCmdline && m.excludeCmdline.length))
	                                    m.excludeCmdline = [];
	                                m.excludeCmdline.push(r.string());
	                                break;
	                            }
	                        case 5: {
	                                m.additionalCmdlineCount = r.uint32();
	                                break;
	                            }
	                        case 6: {
	                                m.processShardCount = r.uint32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a Scope message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfEventConfig.Scope} Scope
	                 */
	                Scope.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfEventConfig.Scope)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfEventConfig.Scope();
	                    if (d.targetPid) {
	                        if (!Array.isArray(d.targetPid))
	                            throw TypeError(".perfetto.protos.PerfEventConfig.Scope.targetPid: array expected");
	                        m.targetPid = [];
	                        for (var i = 0; i < d.targetPid.length; ++i) {
	                            m.targetPid[i] = d.targetPid[i] | 0;
	                        }
	                    }
	                    if (d.targetCmdline) {
	                        if (!Array.isArray(d.targetCmdline))
	                            throw TypeError(".perfetto.protos.PerfEventConfig.Scope.targetCmdline: array expected");
	                        m.targetCmdline = [];
	                        for (var i = 0; i < d.targetCmdline.length; ++i) {
	                            m.targetCmdline[i] = String(d.targetCmdline[i]);
	                        }
	                    }
	                    if (d.excludePid) {
	                        if (!Array.isArray(d.excludePid))
	                            throw TypeError(".perfetto.protos.PerfEventConfig.Scope.excludePid: array expected");
	                        m.excludePid = [];
	                        for (var i = 0; i < d.excludePid.length; ++i) {
	                            m.excludePid[i] = d.excludePid[i] | 0;
	                        }
	                    }
	                    if (d.excludeCmdline) {
	                        if (!Array.isArray(d.excludeCmdline))
	                            throw TypeError(".perfetto.protos.PerfEventConfig.Scope.excludeCmdline: array expected");
	                        m.excludeCmdline = [];
	                        for (var i = 0; i < d.excludeCmdline.length; ++i) {
	                            m.excludeCmdline[i] = String(d.excludeCmdline[i]);
	                        }
	                    }
	                    if (d.additionalCmdlineCount != null) {
	                        m.additionalCmdlineCount = d.additionalCmdlineCount >>> 0;
	                    }
	                    if (d.processShardCount != null) {
	                        m.processShardCount = d.processShardCount >>> 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a Scope message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @static
	                 * @param {perfetto.protos.PerfEventConfig.Scope} m Scope
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Scope.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.targetPid = [];
	                        d.targetCmdline = [];
	                        d.excludePid = [];
	                        d.excludeCmdline = [];
	                    }
	                    if (o.defaults) {
	                        d.additionalCmdlineCount = 0;
	                        d.processShardCount = 0;
	                    }
	                    if (m.targetPid && m.targetPid.length) {
	                        d.targetPid = [];
	                        for (var j = 0; j < m.targetPid.length; ++j) {
	                            d.targetPid[j] = m.targetPid[j];
	                        }
	                    }
	                    if (m.targetCmdline && m.targetCmdline.length) {
	                        d.targetCmdline = [];
	                        for (var j = 0; j < m.targetCmdline.length; ++j) {
	                            d.targetCmdline[j] = m.targetCmdline[j];
	                        }
	                    }
	                    if (m.excludePid && m.excludePid.length) {
	                        d.excludePid = [];
	                        for (var j = 0; j < m.excludePid.length; ++j) {
	                            d.excludePid[j] = m.excludePid[j];
	                        }
	                    }
	                    if (m.excludeCmdline && m.excludeCmdline.length) {
	                        d.excludeCmdline = [];
	                        for (var j = 0; j < m.excludeCmdline.length; ++j) {
	                            d.excludeCmdline[j] = m.excludeCmdline[j];
	                        }
	                    }
	                    if (m.additionalCmdlineCount != null && m.hasOwnProperty("additionalCmdlineCount")) {
	                        d.additionalCmdlineCount = m.additionalCmdlineCount;
	                    }
	                    if (m.processShardCount != null && m.hasOwnProperty("processShardCount")) {
	                        d.processShardCount = m.processShardCount;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Scope to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Scope.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Scope
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfEventConfig.Scope
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Scope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfEventConfig.Scope";
	                };

	                return Scope;
	            })();

	            /**
	             * UnwindMode enum.
	             * @name perfetto.protos.PerfEventConfig.UnwindMode
	             * @enum {number}
	             * @property {number} UNWIND_UNKNOWN=0 UNWIND_UNKNOWN value
	             * @property {number} UNWIND_SKIP=1 UNWIND_SKIP value
	             * @property {number} UNWIND_DWARF=2 UNWIND_DWARF value
	             * @property {number} UNWIND_FRAME_POINTER=3 UNWIND_FRAME_POINTER value
	             */
	            PerfEventConfig.UnwindMode = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "UNWIND_UNKNOWN"] = 0;
	                values[valuesById[1] = "UNWIND_SKIP"] = 1;
	                values[valuesById[2] = "UNWIND_DWARF"] = 2;
	                values[valuesById[3] = "UNWIND_FRAME_POINTER"] = 3;
	                return values;
	            })();

	            return PerfEventConfig;
	        })();

	        protos.PerfEvents = (function() {

	            /**
	             * Properties of a PerfEvents.
	             * @memberof perfetto.protos
	             * @interface IPerfEvents
	             */

	            /**
	             * Constructs a new PerfEvents.
	             * @memberof perfetto.protos
	             * @classdesc Represents a PerfEvents.
	             * @implements IPerfEvents
	             * @constructor
	             * @param {perfetto.protos.IPerfEvents=} [p] Properties to set
	             */
	            function PerfEvents(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new PerfEvents instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.PerfEvents
	             * @static
	             * @param {perfetto.protos.IPerfEvents=} [properties] Properties to set
	             * @returns {perfetto.protos.PerfEvents} PerfEvents instance
	             */
	            PerfEvents.create = function create(properties) {
	                return new PerfEvents(properties);
	            };

	            /**
	             * Encodes the specified PerfEvents message. Does not implicitly {@link perfetto.protos.PerfEvents.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.PerfEvents
	             * @static
	             * @param {perfetto.protos.IPerfEvents} m PerfEvents message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            PerfEvents.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a PerfEvents message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.PerfEvents
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.PerfEvents} PerfEvents
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            PerfEvents.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEvents();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a PerfEvents message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.PerfEvents
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.PerfEvents} PerfEvents
	             */
	            PerfEvents.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.PerfEvents)
	                    return d;
	                return new $root.perfetto.protos.PerfEvents();
	            };

	            /**
	             * Creates a plain object from a PerfEvents message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.PerfEvents
	             * @static
	             * @param {perfetto.protos.PerfEvents} m PerfEvents
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            PerfEvents.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this PerfEvents to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.PerfEvents
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            PerfEvents.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for PerfEvents
	             * @function getTypeUrl
	             * @memberof perfetto.protos.PerfEvents
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            PerfEvents.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.PerfEvents";
	            };

	            PerfEvents.Timebase = (function() {

	                /**
	                 * Properties of a Timebase.
	                 * @memberof perfetto.protos.PerfEvents
	                 * @interface ITimebase
	                 * @property {number|null} [frequency] Timebase frequency
	                 * @property {number|null} [period] Timebase period
	                 * @property {perfetto.protos.PerfEvents.Counter|null} [counter] Timebase counter
	                 * @property {perfetto.protos.PerfEvents.ITracepoint|null} [tracepoint] Timebase tracepoint
	                 * @property {perfetto.protos.PerfEvents.IRawEvent|null} [rawEvent] Timebase rawEvent
	                 * @property {perfetto.protos.PerfEvents.PerfClock|null} [timestampClock] Timebase timestampClock
	                 * @property {string|null} [name] Timebase name
	                 */

	                /**
	                 * Constructs a new Timebase.
	                 * @memberof perfetto.protos.PerfEvents
	                 * @classdesc Represents a Timebase.
	                 * @implements ITimebase
	                 * @constructor
	                 * @param {perfetto.protos.PerfEvents.ITimebase=} [p] Properties to set
	                 */
	                function Timebase(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Timebase frequency.
	                 * @member {number|null|undefined} frequency
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.frequency = null;

	                /**
	                 * Timebase period.
	                 * @member {number|null|undefined} period
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.period = null;

	                /**
	                 * Timebase counter.
	                 * @member {perfetto.protos.PerfEvents.Counter|null|undefined} counter
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.counter = null;

	                /**
	                 * Timebase tracepoint.
	                 * @member {perfetto.protos.PerfEvents.ITracepoint|null|undefined} tracepoint
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.tracepoint = null;

	                /**
	                 * Timebase rawEvent.
	                 * @member {perfetto.protos.PerfEvents.IRawEvent|null|undefined} rawEvent
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.rawEvent = null;

	                /**
	                 * Timebase timestampClock.
	                 * @member {perfetto.protos.PerfEvents.PerfClock} timestampClock
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.timestampClock = 0;

	                /**
	                 * Timebase name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Timebase.prototype.name = "";

	                // OneOf field names bound to virtual getters and setters
	                var $oneOfFields;

	                /**
	                 * Timebase interval.
	                 * @member {"frequency"|"period"|undefined} interval
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Object.defineProperty(Timebase.prototype, "interval", {
	                    get: $util.oneOfGetter($oneOfFields = ["frequency", "period"]),
	                    set: $util.oneOfSetter($oneOfFields)
	                });

	                /**
	                 * Timebase event.
	                 * @member {"counter"|"tracepoint"|"rawEvent"|undefined} event
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 */
	                Object.defineProperty(Timebase.prototype, "event", {
	                    get: $util.oneOfGetter($oneOfFields = ["counter", "tracepoint", "rawEvent"]),
	                    set: $util.oneOfSetter($oneOfFields)
	                });

	                /**
	                 * Creates a new Timebase instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.ITimebase=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfEvents.Timebase} Timebase instance
	                 */
	                Timebase.create = function create(properties) {
	                    return new Timebase(properties);
	                };

	                /**
	                 * Encodes the specified Timebase message. Does not implicitly {@link perfetto.protos.PerfEvents.Timebase.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.ITimebase} m Timebase message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Timebase.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.period != null && Object.hasOwnProperty.call(m, "period"))
	                        w.uint32(8).uint64(m.period);
	                    if (m.frequency != null && Object.hasOwnProperty.call(m, "frequency"))
	                        w.uint32(16).uint64(m.frequency);
	                    if (m.tracepoint != null && Object.hasOwnProperty.call(m, "tracepoint"))
	                        $root.perfetto.protos.PerfEvents.Tracepoint.encode(m.tracepoint, w.uint32(26).fork()).ldelim();
	                    if (m.counter != null && Object.hasOwnProperty.call(m, "counter"))
	                        w.uint32(32).int32(m.counter);
	                    if (m.rawEvent != null && Object.hasOwnProperty.call(m, "rawEvent"))
	                        $root.perfetto.protos.PerfEvents.RawEvent.encode(m.rawEvent, w.uint32(42).fork()).ldelim();
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(82).string(m.name);
	                    if (m.timestampClock != null && Object.hasOwnProperty.call(m, "timestampClock"))
	                        w.uint32(88).int32(m.timestampClock);
	                    return w;
	                };

	                /**
	                 * Decodes a Timebase message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfEvents.Timebase} Timebase
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Timebase.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEvents.Timebase();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 2: {
	                                m.frequency = r.uint64();
	                                break;
	                            }
	                        case 1: {
	                                m.period = r.uint64();
	                                break;
	                            }
	                        case 4: {
	                                m.counter = r.int32();
	                                break;
	                            }
	                        case 3: {
	                                m.tracepoint = $root.perfetto.protos.PerfEvents.Tracepoint.decode(r, r.uint32());
	                                break;
	                            }
	                        case 5: {
	                                m.rawEvent = $root.perfetto.protos.PerfEvents.RawEvent.decode(r, r.uint32());
	                                break;
	                            }
	                        case 11: {
	                                m.timestampClock = r.int32();
	                                break;
	                            }
	                        case 10: {
	                                m.name = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a Timebase message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfEvents.Timebase} Timebase
	                 */
	                Timebase.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfEvents.Timebase)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfEvents.Timebase();
	                    if (d.frequency != null) {
	                        if ($util.Long)
	                            (m.frequency = $util.Long.fromValue(d.frequency)).unsigned = true;
	                        else if (typeof d.frequency === "string")
	                            m.frequency = parseInt(d.frequency, 10);
	                        else if (typeof d.frequency === "number")
	                            m.frequency = d.frequency;
	                        else if (typeof d.frequency === "object")
	                            m.frequency = new $util.LongBits(d.frequency.low >>> 0, d.frequency.high >>> 0).toNumber(true);
	                    }
	                    if (d.period != null) {
	                        if ($util.Long)
	                            (m.period = $util.Long.fromValue(d.period)).unsigned = true;
	                        else if (typeof d.period === "string")
	                            m.period = parseInt(d.period, 10);
	                        else if (typeof d.period === "number")
	                            m.period = d.period;
	                        else if (typeof d.period === "object")
	                            m.period = new $util.LongBits(d.period.low >>> 0, d.period.high >>> 0).toNumber(true);
	                    }
	                    switch (d.counter) {
	                    default:
	                        if (typeof d.counter === "number") {
	                            m.counter = d.counter;
	                            break;
	                        }
	                        break;
	                    case "UNKNOWN_COUNTER":
	                    case 0:
	                        m.counter = 0;
	                        break;
	                    case "SW_CPU_CLOCK":
	                    case 1:
	                        m.counter = 1;
	                        break;
	                    case "SW_PAGE_FAULTS":
	                    case 2:
	                        m.counter = 2;
	                        break;
	                    case "SW_TASK_CLOCK":
	                    case 3:
	                        m.counter = 3;
	                        break;
	                    case "SW_CONTEXT_SWITCHES":
	                    case 4:
	                        m.counter = 4;
	                        break;
	                    case "SW_CPU_MIGRATIONS":
	                    case 5:
	                        m.counter = 5;
	                        break;
	                    case "SW_PAGE_FAULTS_MIN":
	                    case 6:
	                        m.counter = 6;
	                        break;
	                    case "SW_PAGE_FAULTS_MAJ":
	                    case 7:
	                        m.counter = 7;
	                        break;
	                    case "SW_ALIGNMENT_FAULTS":
	                    case 8:
	                        m.counter = 8;
	                        break;
	                    case "SW_EMULATION_FAULTS":
	                    case 9:
	                        m.counter = 9;
	                        break;
	                    case "SW_DUMMY":
	                    case 20:
	                        m.counter = 20;
	                        break;
	                    case "HW_CPU_CYCLES":
	                    case 10:
	                        m.counter = 10;
	                        break;
	                    case "HW_INSTRUCTIONS":
	                    case 11:
	                        m.counter = 11;
	                        break;
	                    case "HW_CACHE_REFERENCES":
	                    case 12:
	                        m.counter = 12;
	                        break;
	                    case "HW_CACHE_MISSES":
	                    case 13:
	                        m.counter = 13;
	                        break;
	                    case "HW_BRANCH_INSTRUCTIONS":
	                    case 14:
	                        m.counter = 14;
	                        break;
	                    case "HW_BRANCH_MISSES":
	                    case 15:
	                        m.counter = 15;
	                        break;
	                    case "HW_BUS_CYCLES":
	                    case 16:
	                        m.counter = 16;
	                        break;
	                    case "HW_STALLED_CYCLES_FRONTEND":
	                    case 17:
	                        m.counter = 17;
	                        break;
	                    case "HW_STALLED_CYCLES_BACKEND":
	                    case 18:
	                        m.counter = 18;
	                        break;
	                    case "HW_REF_CPU_CYCLES":
	                    case 19:
	                        m.counter = 19;
	                        break;
	                    }
	                    if (d.tracepoint != null) {
	                        if (typeof d.tracepoint !== "object")
	                            throw TypeError(".perfetto.protos.PerfEvents.Timebase.tracepoint: object expected");
	                        m.tracepoint = $root.perfetto.protos.PerfEvents.Tracepoint.fromObject(d.tracepoint);
	                    }
	                    if (d.rawEvent != null) {
	                        if (typeof d.rawEvent !== "object")
	                            throw TypeError(".perfetto.protos.PerfEvents.Timebase.rawEvent: object expected");
	                        m.rawEvent = $root.perfetto.protos.PerfEvents.RawEvent.fromObject(d.rawEvent);
	                    }
	                    switch (d.timestampClock) {
	                    default:
	                        if (typeof d.timestampClock === "number") {
	                            m.timestampClock = d.timestampClock;
	                            break;
	                        }
	                        break;
	                    case "UNKNOWN_PERF_CLOCK":
	                    case 0:
	                        m.timestampClock = 0;
	                        break;
	                    case "PERF_CLOCK_REALTIME":
	                    case 1:
	                        m.timestampClock = 1;
	                        break;
	                    case "PERF_CLOCK_MONOTONIC":
	                    case 2:
	                        m.timestampClock = 2;
	                        break;
	                    case "PERF_CLOCK_MONOTONIC_RAW":
	                    case 3:
	                        m.timestampClock = 3;
	                        break;
	                    case "PERF_CLOCK_BOOTTIME":
	                    case 4:
	                        m.timestampClock = 4;
	                        break;
	                    }
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a Timebase message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.Timebase} m Timebase
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Timebase.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.name = "";
	                        d.timestampClock = o.enums === String ? "UNKNOWN_PERF_CLOCK" : 0;
	                    }
	                    if (m.period != null && m.hasOwnProperty("period")) {
	                        if (typeof m.period === "number")
	                            d.period = o.longs === String ? String(m.period) : m.period;
	                        else
	                            d.period = o.longs === String ? $util.Long.prototype.toString.call(m.period) : o.longs === Number ? new $util.LongBits(m.period.low >>> 0, m.period.high >>> 0).toNumber(true) : m.period;
	                        if (o.oneofs)
	                            d.interval = "period";
	                    }
	                    if (m.frequency != null && m.hasOwnProperty("frequency")) {
	                        if (typeof m.frequency === "number")
	                            d.frequency = o.longs === String ? String(m.frequency) : m.frequency;
	                        else
	                            d.frequency = o.longs === String ? $util.Long.prototype.toString.call(m.frequency) : o.longs === Number ? new $util.LongBits(m.frequency.low >>> 0, m.frequency.high >>> 0).toNumber(true) : m.frequency;
	                        if (o.oneofs)
	                            d.interval = "frequency";
	                    }
	                    if (m.tracepoint != null && m.hasOwnProperty("tracepoint")) {
	                        d.tracepoint = $root.perfetto.protos.PerfEvents.Tracepoint.toObject(m.tracepoint, o);
	                        if (o.oneofs)
	                            d.event = "tracepoint";
	                    }
	                    if (m.counter != null && m.hasOwnProperty("counter")) {
	                        d.counter = o.enums === String ? $root.perfetto.protos.PerfEvents.Counter[m.counter] === undefined ? m.counter : $root.perfetto.protos.PerfEvents.Counter[m.counter] : m.counter;
	                        if (o.oneofs)
	                            d.event = "counter";
	                    }
	                    if (m.rawEvent != null && m.hasOwnProperty("rawEvent")) {
	                        d.rawEvent = $root.perfetto.protos.PerfEvents.RawEvent.toObject(m.rawEvent, o);
	                        if (o.oneofs)
	                            d.event = "rawEvent";
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.timestampClock != null && m.hasOwnProperty("timestampClock")) {
	                        d.timestampClock = o.enums === String ? $root.perfetto.protos.PerfEvents.PerfClock[m.timestampClock] === undefined ? m.timestampClock : $root.perfetto.protos.PerfEvents.PerfClock[m.timestampClock] : m.timestampClock;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Timebase to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Timebase.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Timebase
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfEvents.Timebase
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Timebase.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfEvents.Timebase";
	                };

	                return Timebase;
	            })();

	            /**
	             * Counter enum.
	             * @name perfetto.protos.PerfEvents.Counter
	             * @enum {number}
	             * @property {number} UNKNOWN_COUNTER=0 UNKNOWN_COUNTER value
	             * @property {number} SW_CPU_CLOCK=1 SW_CPU_CLOCK value
	             * @property {number} SW_PAGE_FAULTS=2 SW_PAGE_FAULTS value
	             * @property {number} SW_TASK_CLOCK=3 SW_TASK_CLOCK value
	             * @property {number} SW_CONTEXT_SWITCHES=4 SW_CONTEXT_SWITCHES value
	             * @property {number} SW_CPU_MIGRATIONS=5 SW_CPU_MIGRATIONS value
	             * @property {number} SW_PAGE_FAULTS_MIN=6 SW_PAGE_FAULTS_MIN value
	             * @property {number} SW_PAGE_FAULTS_MAJ=7 SW_PAGE_FAULTS_MAJ value
	             * @property {number} SW_ALIGNMENT_FAULTS=8 SW_ALIGNMENT_FAULTS value
	             * @property {number} SW_EMULATION_FAULTS=9 SW_EMULATION_FAULTS value
	             * @property {number} SW_DUMMY=20 SW_DUMMY value
	             * @property {number} HW_CPU_CYCLES=10 HW_CPU_CYCLES value
	             * @property {number} HW_INSTRUCTIONS=11 HW_INSTRUCTIONS value
	             * @property {number} HW_CACHE_REFERENCES=12 HW_CACHE_REFERENCES value
	             * @property {number} HW_CACHE_MISSES=13 HW_CACHE_MISSES value
	             * @property {number} HW_BRANCH_INSTRUCTIONS=14 HW_BRANCH_INSTRUCTIONS value
	             * @property {number} HW_BRANCH_MISSES=15 HW_BRANCH_MISSES value
	             * @property {number} HW_BUS_CYCLES=16 HW_BUS_CYCLES value
	             * @property {number} HW_STALLED_CYCLES_FRONTEND=17 HW_STALLED_CYCLES_FRONTEND value
	             * @property {number} HW_STALLED_CYCLES_BACKEND=18 HW_STALLED_CYCLES_BACKEND value
	             * @property {number} HW_REF_CPU_CYCLES=19 HW_REF_CPU_CYCLES value
	             */
	            PerfEvents.Counter = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "UNKNOWN_COUNTER"] = 0;
	                values[valuesById[1] = "SW_CPU_CLOCK"] = 1;
	                values[valuesById[2] = "SW_PAGE_FAULTS"] = 2;
	                values[valuesById[3] = "SW_TASK_CLOCK"] = 3;
	                values[valuesById[4] = "SW_CONTEXT_SWITCHES"] = 4;
	                values[valuesById[5] = "SW_CPU_MIGRATIONS"] = 5;
	                values[valuesById[6] = "SW_PAGE_FAULTS_MIN"] = 6;
	                values[valuesById[7] = "SW_PAGE_FAULTS_MAJ"] = 7;
	                values[valuesById[8] = "SW_ALIGNMENT_FAULTS"] = 8;
	                values[valuesById[9] = "SW_EMULATION_FAULTS"] = 9;
	                values[valuesById[20] = "SW_DUMMY"] = 20;
	                values[valuesById[10] = "HW_CPU_CYCLES"] = 10;
	                values[valuesById[11] = "HW_INSTRUCTIONS"] = 11;
	                values[valuesById[12] = "HW_CACHE_REFERENCES"] = 12;
	                values[valuesById[13] = "HW_CACHE_MISSES"] = 13;
	                values[valuesById[14] = "HW_BRANCH_INSTRUCTIONS"] = 14;
	                values[valuesById[15] = "HW_BRANCH_MISSES"] = 15;
	                values[valuesById[16] = "HW_BUS_CYCLES"] = 16;
	                values[valuesById[17] = "HW_STALLED_CYCLES_FRONTEND"] = 17;
	                values[valuesById[18] = "HW_STALLED_CYCLES_BACKEND"] = 18;
	                values[valuesById[19] = "HW_REF_CPU_CYCLES"] = 19;
	                return values;
	            })();

	            PerfEvents.Tracepoint = (function() {

	                /**
	                 * Properties of a Tracepoint.
	                 * @memberof perfetto.protos.PerfEvents
	                 * @interface ITracepoint
	                 * @property {string|null} [name] Tracepoint name
	                 * @property {string|null} [filter] Tracepoint filter
	                 */

	                /**
	                 * Constructs a new Tracepoint.
	                 * @memberof perfetto.protos.PerfEvents
	                 * @classdesc Represents a Tracepoint.
	                 * @implements ITracepoint
	                 * @constructor
	                 * @param {perfetto.protos.PerfEvents.ITracepoint=} [p] Properties to set
	                 */
	                function Tracepoint(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Tracepoint name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @instance
	                 */
	                Tracepoint.prototype.name = "";

	                /**
	                 * Tracepoint filter.
	                 * @member {string} filter
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @instance
	                 */
	                Tracepoint.prototype.filter = "";

	                /**
	                 * Creates a new Tracepoint instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.ITracepoint=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfEvents.Tracepoint} Tracepoint instance
	                 */
	                Tracepoint.create = function create(properties) {
	                    return new Tracepoint(properties);
	                };

	                /**
	                 * Encodes the specified Tracepoint message. Does not implicitly {@link perfetto.protos.PerfEvents.Tracepoint.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.ITracepoint} m Tracepoint message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Tracepoint.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(10).string(m.name);
	                    if (m.filter != null && Object.hasOwnProperty.call(m, "filter"))
	                        w.uint32(18).string(m.filter);
	                    return w;
	                };

	                /**
	                 * Decodes a Tracepoint message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfEvents.Tracepoint} Tracepoint
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Tracepoint.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEvents.Tracepoint();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.filter = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a Tracepoint message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfEvents.Tracepoint} Tracepoint
	                 */
	                Tracepoint.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfEvents.Tracepoint)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfEvents.Tracepoint();
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.filter != null) {
	                        m.filter = String(d.filter);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a Tracepoint message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.Tracepoint} m Tracepoint
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Tracepoint.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.name = "";
	                        d.filter = "";
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.filter != null && m.hasOwnProperty("filter")) {
	                        d.filter = m.filter;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Tracepoint to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Tracepoint.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Tracepoint
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfEvents.Tracepoint
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Tracepoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfEvents.Tracepoint";
	                };

	                return Tracepoint;
	            })();

	            PerfEvents.RawEvent = (function() {

	                /**
	                 * Properties of a RawEvent.
	                 * @memberof perfetto.protos.PerfEvents
	                 * @interface IRawEvent
	                 * @property {number|null} [type] RawEvent type
	                 * @property {number|null} [config] RawEvent config
	                 * @property {number|null} [config1] RawEvent config1
	                 * @property {number|null} [config2] RawEvent config2
	                 */

	                /**
	                 * Constructs a new RawEvent.
	                 * @memberof perfetto.protos.PerfEvents
	                 * @classdesc Represents a RawEvent.
	                 * @implements IRawEvent
	                 * @constructor
	                 * @param {perfetto.protos.PerfEvents.IRawEvent=} [p] Properties to set
	                 */
	                function RawEvent(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * RawEvent type.
	                 * @member {number} type
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @instance
	                 */
	                RawEvent.prototype.type = 0;

	                /**
	                 * RawEvent config.
	                 * @member {number} config
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @instance
	                 */
	                RawEvent.prototype.config = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * RawEvent config1.
	                 * @member {number} config1
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @instance
	                 */
	                RawEvent.prototype.config1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * RawEvent config2.
	                 * @member {number} config2
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @instance
	                 */
	                RawEvent.prototype.config2 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * Creates a new RawEvent instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.IRawEvent=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfEvents.RawEvent} RawEvent instance
	                 */
	                RawEvent.create = function create(properties) {
	                    return new RawEvent(properties);
	                };

	                /**
	                 * Encodes the specified RawEvent message. Does not implicitly {@link perfetto.protos.PerfEvents.RawEvent.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.IRawEvent} m RawEvent message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                RawEvent.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.type != null && Object.hasOwnProperty.call(m, "type"))
	                        w.uint32(8).uint32(m.type);
	                    if (m.config != null && Object.hasOwnProperty.call(m, "config"))
	                        w.uint32(16).uint64(m.config);
	                    if (m.config1 != null && Object.hasOwnProperty.call(m, "config1"))
	                        w.uint32(24).uint64(m.config1);
	                    if (m.config2 != null && Object.hasOwnProperty.call(m, "config2"))
	                        w.uint32(32).uint64(m.config2);
	                    return w;
	                };

	                /**
	                 * Decodes a RawEvent message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfEvents.RawEvent} RawEvent
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                RawEvent.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfEvents.RawEvent();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.type = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.config = r.uint64();
	                                break;
	                            }
	                        case 3: {
	                                m.config1 = r.uint64();
	                                break;
	                            }
	                        case 4: {
	                                m.config2 = r.uint64();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a RawEvent message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfEvents.RawEvent} RawEvent
	                 */
	                RawEvent.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfEvents.RawEvent)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfEvents.RawEvent();
	                    if (d.type != null) {
	                        m.type = d.type >>> 0;
	                    }
	                    if (d.config != null) {
	                        if ($util.Long)
	                            (m.config = $util.Long.fromValue(d.config)).unsigned = true;
	                        else if (typeof d.config === "string")
	                            m.config = parseInt(d.config, 10);
	                        else if (typeof d.config === "number")
	                            m.config = d.config;
	                        else if (typeof d.config === "object")
	                            m.config = new $util.LongBits(d.config.low >>> 0, d.config.high >>> 0).toNumber(true);
	                    }
	                    if (d.config1 != null) {
	                        if ($util.Long)
	                            (m.config1 = $util.Long.fromValue(d.config1)).unsigned = true;
	                        else if (typeof d.config1 === "string")
	                            m.config1 = parseInt(d.config1, 10);
	                        else if (typeof d.config1 === "number")
	                            m.config1 = d.config1;
	                        else if (typeof d.config1 === "object")
	                            m.config1 = new $util.LongBits(d.config1.low >>> 0, d.config1.high >>> 0).toNumber(true);
	                    }
	                    if (d.config2 != null) {
	                        if ($util.Long)
	                            (m.config2 = $util.Long.fromValue(d.config2)).unsigned = true;
	                        else if (typeof d.config2 === "string")
	                            m.config2 = parseInt(d.config2, 10);
	                        else if (typeof d.config2 === "number")
	                            m.config2 = d.config2;
	                        else if (typeof d.config2 === "object")
	                            m.config2 = new $util.LongBits(d.config2.low >>> 0, d.config2.high >>> 0).toNumber(true);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a RawEvent message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @static
	                 * @param {perfetto.protos.PerfEvents.RawEvent} m RawEvent
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                RawEvent.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.type = 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.config = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.config = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.config1 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.config1 = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.config2 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.config2 = o.longs === String ? "0" : 0;
	                    }
	                    if (m.type != null && m.hasOwnProperty("type")) {
	                        d.type = m.type;
	                    }
	                    if (m.config != null && m.hasOwnProperty("config")) {
	                        if (typeof m.config === "number")
	                            d.config = o.longs === String ? String(m.config) : m.config;
	                        else
	                            d.config = o.longs === String ? $util.Long.prototype.toString.call(m.config) : o.longs === Number ? new $util.LongBits(m.config.low >>> 0, m.config.high >>> 0).toNumber(true) : m.config;
	                    }
	                    if (m.config1 != null && m.hasOwnProperty("config1")) {
	                        if (typeof m.config1 === "number")
	                            d.config1 = o.longs === String ? String(m.config1) : m.config1;
	                        else
	                            d.config1 = o.longs === String ? $util.Long.prototype.toString.call(m.config1) : o.longs === Number ? new $util.LongBits(m.config1.low >>> 0, m.config1.high >>> 0).toNumber(true) : m.config1;
	                    }
	                    if (m.config2 != null && m.hasOwnProperty("config2")) {
	                        if (typeof m.config2 === "number")
	                            d.config2 = o.longs === String ? String(m.config2) : m.config2;
	                        else
	                            d.config2 = o.longs === String ? $util.Long.prototype.toString.call(m.config2) : o.longs === Number ? new $util.LongBits(m.config2.low >>> 0, m.config2.high >>> 0).toNumber(true) : m.config2;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this RawEvent to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                RawEvent.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for RawEvent
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfEvents.RawEvent
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                RawEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfEvents.RawEvent";
	                };

	                return RawEvent;
	            })();

	            /**
	             * PerfClock enum.
	             * @name perfetto.protos.PerfEvents.PerfClock
	             * @enum {number}
	             * @property {number} UNKNOWN_PERF_CLOCK=0 UNKNOWN_PERF_CLOCK value
	             * @property {number} PERF_CLOCK_REALTIME=1 PERF_CLOCK_REALTIME value
	             * @property {number} PERF_CLOCK_MONOTONIC=2 PERF_CLOCK_MONOTONIC value
	             * @property {number} PERF_CLOCK_MONOTONIC_RAW=3 PERF_CLOCK_MONOTONIC_RAW value
	             * @property {number} PERF_CLOCK_BOOTTIME=4 PERF_CLOCK_BOOTTIME value
	             */
	            PerfEvents.PerfClock = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "UNKNOWN_PERF_CLOCK"] = 0;
	                values[valuesById[1] = "PERF_CLOCK_REALTIME"] = 1;
	                values[valuesById[2] = "PERF_CLOCK_MONOTONIC"] = 2;
	                values[valuesById[3] = "PERF_CLOCK_MONOTONIC_RAW"] = 3;
	                values[valuesById[4] = "PERF_CLOCK_BOOTTIME"] = 4;
	                return values;
	            })();

	            return PerfEvents;
	        })();

	        protos.FollowerEvent = (function() {

	            /**
	             * Properties of a FollowerEvent.
	             * @memberof perfetto.protos
	             * @interface IFollowerEvent
	             * @property {perfetto.protos.PerfEvents.Counter|null} [counter] FollowerEvent counter
	             * @property {perfetto.protos.PerfEvents.ITracepoint|null} [tracepoint] FollowerEvent tracepoint
	             * @property {perfetto.protos.PerfEvents.IRawEvent|null} [rawEvent] FollowerEvent rawEvent
	             * @property {string|null} [name] FollowerEvent name
	             */

	            /**
	             * Constructs a new FollowerEvent.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FollowerEvent.
	             * @implements IFollowerEvent
	             * @constructor
	             * @param {perfetto.protos.IFollowerEvent=} [p] Properties to set
	             */
	            function FollowerEvent(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FollowerEvent counter.
	             * @member {perfetto.protos.PerfEvents.Counter|null|undefined} counter
	             * @memberof perfetto.protos.FollowerEvent
	             * @instance
	             */
	            FollowerEvent.prototype.counter = null;

	            /**
	             * FollowerEvent tracepoint.
	             * @member {perfetto.protos.PerfEvents.ITracepoint|null|undefined} tracepoint
	             * @memberof perfetto.protos.FollowerEvent
	             * @instance
	             */
	            FollowerEvent.prototype.tracepoint = null;

	            /**
	             * FollowerEvent rawEvent.
	             * @member {perfetto.protos.PerfEvents.IRawEvent|null|undefined} rawEvent
	             * @memberof perfetto.protos.FollowerEvent
	             * @instance
	             */
	            FollowerEvent.prototype.rawEvent = null;

	            /**
	             * FollowerEvent name.
	             * @member {string} name
	             * @memberof perfetto.protos.FollowerEvent
	             * @instance
	             */
	            FollowerEvent.prototype.name = "";

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * FollowerEvent event.
	             * @member {"counter"|"tracepoint"|"rawEvent"|undefined} event
	             * @memberof perfetto.protos.FollowerEvent
	             * @instance
	             */
	            Object.defineProperty(FollowerEvent.prototype, "event", {
	                get: $util.oneOfGetter($oneOfFields = ["counter", "tracepoint", "rawEvent"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new FollowerEvent instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FollowerEvent
	             * @static
	             * @param {perfetto.protos.IFollowerEvent=} [properties] Properties to set
	             * @returns {perfetto.protos.FollowerEvent} FollowerEvent instance
	             */
	            FollowerEvent.create = function create(properties) {
	                return new FollowerEvent(properties);
	            };

	            /**
	             * Encodes the specified FollowerEvent message. Does not implicitly {@link perfetto.protos.FollowerEvent.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FollowerEvent
	             * @static
	             * @param {perfetto.protos.IFollowerEvent} m FollowerEvent message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FollowerEvent.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.counter != null && Object.hasOwnProperty.call(m, "counter"))
	                    w.uint32(8).int32(m.counter);
	                if (m.tracepoint != null && Object.hasOwnProperty.call(m, "tracepoint"))
	                    $root.perfetto.protos.PerfEvents.Tracepoint.encode(m.tracepoint, w.uint32(18).fork()).ldelim();
	                if (m.rawEvent != null && Object.hasOwnProperty.call(m, "rawEvent"))
	                    $root.perfetto.protos.PerfEvents.RawEvent.encode(m.rawEvent, w.uint32(26).fork()).ldelim();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(34).string(m.name);
	                return w;
	            };

	            /**
	             * Decodes a FollowerEvent message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FollowerEvent
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FollowerEvent} FollowerEvent
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FollowerEvent.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FollowerEvent();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.counter = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            m.tracepoint = $root.perfetto.protos.PerfEvents.Tracepoint.decode(r, r.uint32());
	                            break;
	                        }
	                    case 3: {
	                            m.rawEvent = $root.perfetto.protos.PerfEvents.RawEvent.decode(r, r.uint32());
	                            break;
	                        }
	                    case 4: {
	                            m.name = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FollowerEvent message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FollowerEvent
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FollowerEvent} FollowerEvent
	             */
	            FollowerEvent.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FollowerEvent)
	                    return d;
	                var m = new $root.perfetto.protos.FollowerEvent();
	                switch (d.counter) {
	                default:
	                    if (typeof d.counter === "number") {
	                        m.counter = d.counter;
	                        break;
	                    }
	                    break;
	                case "UNKNOWN_COUNTER":
	                case 0:
	                    m.counter = 0;
	                    break;
	                case "SW_CPU_CLOCK":
	                case 1:
	                    m.counter = 1;
	                    break;
	                case "SW_PAGE_FAULTS":
	                case 2:
	                    m.counter = 2;
	                    break;
	                case "SW_TASK_CLOCK":
	                case 3:
	                    m.counter = 3;
	                    break;
	                case "SW_CONTEXT_SWITCHES":
	                case 4:
	                    m.counter = 4;
	                    break;
	                case "SW_CPU_MIGRATIONS":
	                case 5:
	                    m.counter = 5;
	                    break;
	                case "SW_PAGE_FAULTS_MIN":
	                case 6:
	                    m.counter = 6;
	                    break;
	                case "SW_PAGE_FAULTS_MAJ":
	                case 7:
	                    m.counter = 7;
	                    break;
	                case "SW_ALIGNMENT_FAULTS":
	                case 8:
	                    m.counter = 8;
	                    break;
	                case "SW_EMULATION_FAULTS":
	                case 9:
	                    m.counter = 9;
	                    break;
	                case "SW_DUMMY":
	                case 20:
	                    m.counter = 20;
	                    break;
	                case "HW_CPU_CYCLES":
	                case 10:
	                    m.counter = 10;
	                    break;
	                case "HW_INSTRUCTIONS":
	                case 11:
	                    m.counter = 11;
	                    break;
	                case "HW_CACHE_REFERENCES":
	                case 12:
	                    m.counter = 12;
	                    break;
	                case "HW_CACHE_MISSES":
	                case 13:
	                    m.counter = 13;
	                    break;
	                case "HW_BRANCH_INSTRUCTIONS":
	                case 14:
	                    m.counter = 14;
	                    break;
	                case "HW_BRANCH_MISSES":
	                case 15:
	                    m.counter = 15;
	                    break;
	                case "HW_BUS_CYCLES":
	                case 16:
	                    m.counter = 16;
	                    break;
	                case "HW_STALLED_CYCLES_FRONTEND":
	                case 17:
	                    m.counter = 17;
	                    break;
	                case "HW_STALLED_CYCLES_BACKEND":
	                case 18:
	                    m.counter = 18;
	                    break;
	                case "HW_REF_CPU_CYCLES":
	                case 19:
	                    m.counter = 19;
	                    break;
	                }
	                if (d.tracepoint != null) {
	                    if (typeof d.tracepoint !== "object")
	                        throw TypeError(".perfetto.protos.FollowerEvent.tracepoint: object expected");
	                    m.tracepoint = $root.perfetto.protos.PerfEvents.Tracepoint.fromObject(d.tracepoint);
	                }
	                if (d.rawEvent != null) {
	                    if (typeof d.rawEvent !== "object")
	                        throw TypeError(".perfetto.protos.FollowerEvent.rawEvent: object expected");
	                    m.rawEvent = $root.perfetto.protos.PerfEvents.RawEvent.fromObject(d.rawEvent);
	                }
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FollowerEvent message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FollowerEvent
	             * @static
	             * @param {perfetto.protos.FollowerEvent} m FollowerEvent
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FollowerEvent.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                }
	                if (m.counter != null && m.hasOwnProperty("counter")) {
	                    d.counter = o.enums === String ? $root.perfetto.protos.PerfEvents.Counter[m.counter] === undefined ? m.counter : $root.perfetto.protos.PerfEvents.Counter[m.counter] : m.counter;
	                    if (o.oneofs)
	                        d.event = "counter";
	                }
	                if (m.tracepoint != null && m.hasOwnProperty("tracepoint")) {
	                    d.tracepoint = $root.perfetto.protos.PerfEvents.Tracepoint.toObject(m.tracepoint, o);
	                    if (o.oneofs)
	                        d.event = "tracepoint";
	                }
	                if (m.rawEvent != null && m.hasOwnProperty("rawEvent")) {
	                    d.rawEvent = $root.perfetto.protos.PerfEvents.RawEvent.toObject(m.rawEvent, o);
	                    if (o.oneofs)
	                        d.event = "rawEvent";
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                return d;
	            };

	            /**
	             * Converts this FollowerEvent to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FollowerEvent
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FollowerEvent.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FollowerEvent
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FollowerEvent
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FollowerEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FollowerEvent";
	            };

	            return FollowerEvent;
	        })();

	        protos.SysStatsConfig = (function() {

	            /**
	             * Properties of a SysStatsConfig.
	             * @memberof perfetto.protos
	             * @interface ISysStatsConfig
	             * @property {number|null} [meminfoPeriodMs] SysStatsConfig meminfoPeriodMs
	             * @property {Array.<perfetto.protos.MeminfoCounters>|null} [meminfoCounters] SysStatsConfig meminfoCounters
	             * @property {number|null} [vmstatPeriodMs] SysStatsConfig vmstatPeriodMs
	             * @property {Array.<perfetto.protos.VmstatCounters>|null} [vmstatCounters] SysStatsConfig vmstatCounters
	             * @property {number|null} [statPeriodMs] SysStatsConfig statPeriodMs
	             * @property {Array.<perfetto.protos.SysStatsConfig.StatCounters>|null} [statCounters] SysStatsConfig statCounters
	             * @property {number|null} [devfreqPeriodMs] SysStatsConfig devfreqPeriodMs
	             * @property {number|null} [cpufreqPeriodMs] SysStatsConfig cpufreqPeriodMs
	             * @property {number|null} [buddyinfoPeriodMs] SysStatsConfig buddyinfoPeriodMs
	             * @property {number|null} [diskstatPeriodMs] SysStatsConfig diskstatPeriodMs
	             * @property {number|null} [psiPeriodMs] SysStatsConfig psiPeriodMs
	             * @property {number|null} [thermalPeriodMs] SysStatsConfig thermalPeriodMs
	             * @property {number|null} [cpuidlePeriodMs] SysStatsConfig cpuidlePeriodMs
	             * @property {number|null} [gpufreqPeriodMs] SysStatsConfig gpufreqPeriodMs
	             */

	            /**
	             * Constructs a new SysStatsConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a SysStatsConfig.
	             * @implements ISysStatsConfig
	             * @constructor
	             * @param {perfetto.protos.ISysStatsConfig=} [p] Properties to set
	             */
	            function SysStatsConfig(p) {
	                this.meminfoCounters = [];
	                this.vmstatCounters = [];
	                this.statCounters = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * SysStatsConfig meminfoPeriodMs.
	             * @member {number} meminfoPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.meminfoPeriodMs = 0;

	            /**
	             * SysStatsConfig meminfoCounters.
	             * @member {Array.<perfetto.protos.MeminfoCounters>} meminfoCounters
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.meminfoCounters = $util.emptyArray;

	            /**
	             * SysStatsConfig vmstatPeriodMs.
	             * @member {number} vmstatPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.vmstatPeriodMs = 0;

	            /**
	             * SysStatsConfig vmstatCounters.
	             * @member {Array.<perfetto.protos.VmstatCounters>} vmstatCounters
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.vmstatCounters = $util.emptyArray;

	            /**
	             * SysStatsConfig statPeriodMs.
	             * @member {number} statPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.statPeriodMs = 0;

	            /**
	             * SysStatsConfig statCounters.
	             * @member {Array.<perfetto.protos.SysStatsConfig.StatCounters>} statCounters
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.statCounters = $util.emptyArray;

	            /**
	             * SysStatsConfig devfreqPeriodMs.
	             * @member {number} devfreqPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.devfreqPeriodMs = 0;

	            /**
	             * SysStatsConfig cpufreqPeriodMs.
	             * @member {number} cpufreqPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.cpufreqPeriodMs = 0;

	            /**
	             * SysStatsConfig buddyinfoPeriodMs.
	             * @member {number} buddyinfoPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.buddyinfoPeriodMs = 0;

	            /**
	             * SysStatsConfig diskstatPeriodMs.
	             * @member {number} diskstatPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.diskstatPeriodMs = 0;

	            /**
	             * SysStatsConfig psiPeriodMs.
	             * @member {number} psiPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.psiPeriodMs = 0;

	            /**
	             * SysStatsConfig thermalPeriodMs.
	             * @member {number} thermalPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.thermalPeriodMs = 0;

	            /**
	             * SysStatsConfig cpuidlePeriodMs.
	             * @member {number} cpuidlePeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.cpuidlePeriodMs = 0;

	            /**
	             * SysStatsConfig gpufreqPeriodMs.
	             * @member {number} gpufreqPeriodMs
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             */
	            SysStatsConfig.prototype.gpufreqPeriodMs = 0;

	            /**
	             * Creates a new SysStatsConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.SysStatsConfig
	             * @static
	             * @param {perfetto.protos.ISysStatsConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.SysStatsConfig} SysStatsConfig instance
	             */
	            SysStatsConfig.create = function create(properties) {
	                return new SysStatsConfig(properties);
	            };

	            /**
	             * Encodes the specified SysStatsConfig message. Does not implicitly {@link perfetto.protos.SysStatsConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.SysStatsConfig
	             * @static
	             * @param {perfetto.protos.ISysStatsConfig} m SysStatsConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SysStatsConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.meminfoPeriodMs != null && Object.hasOwnProperty.call(m, "meminfoPeriodMs"))
	                    w.uint32(8).uint32(m.meminfoPeriodMs);
	                if (m.meminfoCounters != null && m.meminfoCounters.length) {
	                    for (var i = 0; i < m.meminfoCounters.length; ++i)
	                        w.uint32(16).int32(m.meminfoCounters[i]);
	                }
	                if (m.vmstatPeriodMs != null && Object.hasOwnProperty.call(m, "vmstatPeriodMs"))
	                    w.uint32(24).uint32(m.vmstatPeriodMs);
	                if (m.vmstatCounters != null && m.vmstatCounters.length) {
	                    for (var i = 0; i < m.vmstatCounters.length; ++i)
	                        w.uint32(32).int32(m.vmstatCounters[i]);
	                }
	                if (m.statPeriodMs != null && Object.hasOwnProperty.call(m, "statPeriodMs"))
	                    w.uint32(40).uint32(m.statPeriodMs);
	                if (m.statCounters != null && m.statCounters.length) {
	                    for (var i = 0; i < m.statCounters.length; ++i)
	                        w.uint32(48).int32(m.statCounters[i]);
	                }
	                if (m.devfreqPeriodMs != null && Object.hasOwnProperty.call(m, "devfreqPeriodMs"))
	                    w.uint32(56).uint32(m.devfreqPeriodMs);
	                if (m.cpufreqPeriodMs != null && Object.hasOwnProperty.call(m, "cpufreqPeriodMs"))
	                    w.uint32(64).uint32(m.cpufreqPeriodMs);
	                if (m.buddyinfoPeriodMs != null && Object.hasOwnProperty.call(m, "buddyinfoPeriodMs"))
	                    w.uint32(72).uint32(m.buddyinfoPeriodMs);
	                if (m.diskstatPeriodMs != null && Object.hasOwnProperty.call(m, "diskstatPeriodMs"))
	                    w.uint32(80).uint32(m.diskstatPeriodMs);
	                if (m.psiPeriodMs != null && Object.hasOwnProperty.call(m, "psiPeriodMs"))
	                    w.uint32(88).uint32(m.psiPeriodMs);
	                if (m.thermalPeriodMs != null && Object.hasOwnProperty.call(m, "thermalPeriodMs"))
	                    w.uint32(96).uint32(m.thermalPeriodMs);
	                if (m.cpuidlePeriodMs != null && Object.hasOwnProperty.call(m, "cpuidlePeriodMs"))
	                    w.uint32(104).uint32(m.cpuidlePeriodMs);
	                if (m.gpufreqPeriodMs != null && Object.hasOwnProperty.call(m, "gpufreqPeriodMs"))
	                    w.uint32(112).uint32(m.gpufreqPeriodMs);
	                return w;
	            };

	            /**
	             * Decodes a SysStatsConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.SysStatsConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.SysStatsConfig} SysStatsConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SysStatsConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.SysStatsConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.meminfoPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.meminfoCounters && m.meminfoCounters.length))
	                                m.meminfoCounters = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.meminfoCounters.push(r.int32());
	                            } else
	                                m.meminfoCounters.push(r.int32());
	                            break;
	                        }
	                    case 3: {
	                            m.vmstatPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.vmstatCounters && m.vmstatCounters.length))
	                                m.vmstatCounters = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.vmstatCounters.push(r.int32());
	                            } else
	                                m.vmstatCounters.push(r.int32());
	                            break;
	                        }
	                    case 5: {
	                            m.statPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.statCounters && m.statCounters.length))
	                                m.statCounters = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.statCounters.push(r.int32());
	                            } else
	                                m.statCounters.push(r.int32());
	                            break;
	                        }
	                    case 7: {
	                            m.devfreqPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 8: {
	                            m.cpufreqPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 9: {
	                            m.buddyinfoPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 10: {
	                            m.diskstatPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 11: {
	                            m.psiPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 12: {
	                            m.thermalPeriodMs = r.uint32();
	                            break;
	                        }
	                    case 13: {
	                            m.cpuidlePeriodMs = r.uint32();
	                            break;
	                        }
	                    case 14: {
	                            m.gpufreqPeriodMs = r.uint32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a SysStatsConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.SysStatsConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.SysStatsConfig} SysStatsConfig
	             */
	            SysStatsConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.SysStatsConfig)
	                    return d;
	                var m = new $root.perfetto.protos.SysStatsConfig();
	                if (d.meminfoPeriodMs != null) {
	                    m.meminfoPeriodMs = d.meminfoPeriodMs >>> 0;
	                }
	                if (d.meminfoCounters) {
	                    if (!Array.isArray(d.meminfoCounters))
	                        throw TypeError(".perfetto.protos.SysStatsConfig.meminfoCounters: array expected");
	                    m.meminfoCounters = [];
	                    for (var i = 0; i < d.meminfoCounters.length; ++i) {
	                        switch (d.meminfoCounters[i]) {
	                        default:
	                            if (typeof d.meminfoCounters[i] === "number") {
	                                m.meminfoCounters[i] = d.meminfoCounters[i];
	                                break;
	                            }
	                        case "MEMINFO_UNSPECIFIED":
	                        case 0:
	                            m.meminfoCounters[i] = 0;
	                            break;
	                        case "MEMINFO_MEM_TOTAL":
	                        case 1:
	                            m.meminfoCounters[i] = 1;
	                            break;
	                        case "MEMINFO_MEM_FREE":
	                        case 2:
	                            m.meminfoCounters[i] = 2;
	                            break;
	                        case "MEMINFO_MEM_AVAILABLE":
	                        case 3:
	                            m.meminfoCounters[i] = 3;
	                            break;
	                        case "MEMINFO_BUFFERS":
	                        case 4:
	                            m.meminfoCounters[i] = 4;
	                            break;
	                        case "MEMINFO_CACHED":
	                        case 5:
	                            m.meminfoCounters[i] = 5;
	                            break;
	                        case "MEMINFO_SWAP_CACHED":
	                        case 6:
	                            m.meminfoCounters[i] = 6;
	                            break;
	                        case "MEMINFO_ACTIVE":
	                        case 7:
	                            m.meminfoCounters[i] = 7;
	                            break;
	                        case "MEMINFO_INACTIVE":
	                        case 8:
	                            m.meminfoCounters[i] = 8;
	                            break;
	                        case "MEMINFO_ACTIVE_ANON":
	                        case 9:
	                            m.meminfoCounters[i] = 9;
	                            break;
	                        case "MEMINFO_INACTIVE_ANON":
	                        case 10:
	                            m.meminfoCounters[i] = 10;
	                            break;
	                        case "MEMINFO_ACTIVE_FILE":
	                        case 11:
	                            m.meminfoCounters[i] = 11;
	                            break;
	                        case "MEMINFO_INACTIVE_FILE":
	                        case 12:
	                            m.meminfoCounters[i] = 12;
	                            break;
	                        case "MEMINFO_UNEVICTABLE":
	                        case 13:
	                            m.meminfoCounters[i] = 13;
	                            break;
	                        case "MEMINFO_MLOCKED":
	                        case 14:
	                            m.meminfoCounters[i] = 14;
	                            break;
	                        case "MEMINFO_SWAP_TOTAL":
	                        case 15:
	                            m.meminfoCounters[i] = 15;
	                            break;
	                        case "MEMINFO_SWAP_FREE":
	                        case 16:
	                            m.meminfoCounters[i] = 16;
	                            break;
	                        case "MEMINFO_DIRTY":
	                        case 17:
	                            m.meminfoCounters[i] = 17;
	                            break;
	                        case "MEMINFO_WRITEBACK":
	                        case 18:
	                            m.meminfoCounters[i] = 18;
	                            break;
	                        case "MEMINFO_ANON_PAGES":
	                        case 19:
	                            m.meminfoCounters[i] = 19;
	                            break;
	                        case "MEMINFO_MAPPED":
	                        case 20:
	                            m.meminfoCounters[i] = 20;
	                            break;
	                        case "MEMINFO_SHMEM":
	                        case 21:
	                            m.meminfoCounters[i] = 21;
	                            break;
	                        case "MEMINFO_SLAB":
	                        case 22:
	                            m.meminfoCounters[i] = 22;
	                            break;
	                        case "MEMINFO_SLAB_RECLAIMABLE":
	                        case 23:
	                            m.meminfoCounters[i] = 23;
	                            break;
	                        case "MEMINFO_SLAB_UNRECLAIMABLE":
	                        case 24:
	                            m.meminfoCounters[i] = 24;
	                            break;
	                        case "MEMINFO_KERNEL_STACK":
	                        case 25:
	                            m.meminfoCounters[i] = 25;
	                            break;
	                        case "MEMINFO_PAGE_TABLES":
	                        case 26:
	                            m.meminfoCounters[i] = 26;
	                            break;
	                        case "MEMINFO_COMMIT_LIMIT":
	                        case 27:
	                            m.meminfoCounters[i] = 27;
	                            break;
	                        case "MEMINFO_COMMITED_AS":
	                        case 28:
	                            m.meminfoCounters[i] = 28;
	                            break;
	                        case "MEMINFO_VMALLOC_TOTAL":
	                        case 29:
	                            m.meminfoCounters[i] = 29;
	                            break;
	                        case "MEMINFO_VMALLOC_USED":
	                        case 30:
	                            m.meminfoCounters[i] = 30;
	                            break;
	                        case "MEMINFO_VMALLOC_CHUNK":
	                        case 31:
	                            m.meminfoCounters[i] = 31;
	                            break;
	                        case "MEMINFO_CMA_TOTAL":
	                        case 32:
	                            m.meminfoCounters[i] = 32;
	                            break;
	                        case "MEMINFO_CMA_FREE":
	                        case 33:
	                            m.meminfoCounters[i] = 33;
	                            break;
	                        case "MEMINFO_GPU":
	                        case 34:
	                            m.meminfoCounters[i] = 34;
	                            break;
	                        case "MEMINFO_ZRAM":
	                        case 35:
	                            m.meminfoCounters[i] = 35;
	                            break;
	                        case "MEMINFO_MISC":
	                        case 36:
	                            m.meminfoCounters[i] = 36;
	                            break;
	                        case "MEMINFO_ION_HEAP":
	                        case 37:
	                            m.meminfoCounters[i] = 37;
	                            break;
	                        case "MEMINFO_ION_HEAP_POOL":
	                        case 38:
	                            m.meminfoCounters[i] = 38;
	                            break;
	                        }
	                    }
	                }
	                if (d.vmstatPeriodMs != null) {
	                    m.vmstatPeriodMs = d.vmstatPeriodMs >>> 0;
	                }
	                if (d.vmstatCounters) {
	                    if (!Array.isArray(d.vmstatCounters))
	                        throw TypeError(".perfetto.protos.SysStatsConfig.vmstatCounters: array expected");
	                    m.vmstatCounters = [];
	                    for (var i = 0; i < d.vmstatCounters.length; ++i) {
	                        switch (d.vmstatCounters[i]) {
	                        default:
	                            if (typeof d.vmstatCounters[i] === "number") {
	                                m.vmstatCounters[i] = d.vmstatCounters[i];
	                                break;
	                            }
	                        case "VMSTAT_UNSPECIFIED":
	                        case 0:
	                            m.vmstatCounters[i] = 0;
	                            break;
	                        case "VMSTAT_NR_FREE_PAGES":
	                        case 1:
	                            m.vmstatCounters[i] = 1;
	                            break;
	                        case "VMSTAT_NR_ALLOC_BATCH":
	                        case 2:
	                            m.vmstatCounters[i] = 2;
	                            break;
	                        case "VMSTAT_NR_INACTIVE_ANON":
	                        case 3:
	                            m.vmstatCounters[i] = 3;
	                            break;
	                        case "VMSTAT_NR_ACTIVE_ANON":
	                        case 4:
	                            m.vmstatCounters[i] = 4;
	                            break;
	                        case "VMSTAT_NR_INACTIVE_FILE":
	                        case 5:
	                            m.vmstatCounters[i] = 5;
	                            break;
	                        case "VMSTAT_NR_ACTIVE_FILE":
	                        case 6:
	                            m.vmstatCounters[i] = 6;
	                            break;
	                        case "VMSTAT_NR_UNEVICTABLE":
	                        case 7:
	                            m.vmstatCounters[i] = 7;
	                            break;
	                        case "VMSTAT_NR_MLOCK":
	                        case 8:
	                            m.vmstatCounters[i] = 8;
	                            break;
	                        case "VMSTAT_NR_ANON_PAGES":
	                        case 9:
	                            m.vmstatCounters[i] = 9;
	                            break;
	                        case "VMSTAT_NR_MAPPED":
	                        case 10:
	                            m.vmstatCounters[i] = 10;
	                            break;
	                        case "VMSTAT_NR_FILE_PAGES":
	                        case 11:
	                            m.vmstatCounters[i] = 11;
	                            break;
	                        case "VMSTAT_NR_DIRTY":
	                        case 12:
	                            m.vmstatCounters[i] = 12;
	                            break;
	                        case "VMSTAT_NR_WRITEBACK":
	                        case 13:
	                            m.vmstatCounters[i] = 13;
	                            break;
	                        case "VMSTAT_NR_SLAB_RECLAIMABLE":
	                        case 14:
	                            m.vmstatCounters[i] = 14;
	                            break;
	                        case "VMSTAT_NR_SLAB_UNRECLAIMABLE":
	                        case 15:
	                            m.vmstatCounters[i] = 15;
	                            break;
	                        case "VMSTAT_NR_PAGE_TABLE_PAGES":
	                        case 16:
	                            m.vmstatCounters[i] = 16;
	                            break;
	                        case "VMSTAT_NR_KERNEL_STACK":
	                        case 17:
	                            m.vmstatCounters[i] = 17;
	                            break;
	                        case "VMSTAT_NR_OVERHEAD":
	                        case 18:
	                            m.vmstatCounters[i] = 18;
	                            break;
	                        case "VMSTAT_NR_UNSTABLE":
	                        case 19:
	                            m.vmstatCounters[i] = 19;
	                            break;
	                        case "VMSTAT_NR_BOUNCE":
	                        case 20:
	                            m.vmstatCounters[i] = 20;
	                            break;
	                        case "VMSTAT_NR_VMSCAN_WRITE":
	                        case 21:
	                            m.vmstatCounters[i] = 21;
	                            break;
	                        case "VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM":
	                        case 22:
	                            m.vmstatCounters[i] = 22;
	                            break;
	                        case "VMSTAT_NR_WRITEBACK_TEMP":
	                        case 23:
	                            m.vmstatCounters[i] = 23;
	                            break;
	                        case "VMSTAT_NR_ISOLATED_ANON":
	                        case 24:
	                            m.vmstatCounters[i] = 24;
	                            break;
	                        case "VMSTAT_NR_ISOLATED_FILE":
	                        case 25:
	                            m.vmstatCounters[i] = 25;
	                            break;
	                        case "VMSTAT_NR_SHMEM":
	                        case 26:
	                            m.vmstatCounters[i] = 26;
	                            break;
	                        case "VMSTAT_NR_DIRTIED":
	                        case 27:
	                            m.vmstatCounters[i] = 27;
	                            break;
	                        case "VMSTAT_NR_WRITTEN":
	                        case 28:
	                            m.vmstatCounters[i] = 28;
	                            break;
	                        case "VMSTAT_NR_PAGES_SCANNED":
	                        case 29:
	                            m.vmstatCounters[i] = 29;
	                            break;
	                        case "VMSTAT_WORKINGSET_REFAULT":
	                        case 30:
	                            m.vmstatCounters[i] = 30;
	                            break;
	                        case "VMSTAT_WORKINGSET_ACTIVATE":
	                        case 31:
	                            m.vmstatCounters[i] = 31;
	                            break;
	                        case "VMSTAT_WORKINGSET_NODERECLAIM":
	                        case 32:
	                            m.vmstatCounters[i] = 32;
	                            break;
	                        case "VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES":
	                        case 33:
	                            m.vmstatCounters[i] = 33;
	                            break;
	                        case "VMSTAT_NR_FREE_CMA":
	                        case 34:
	                            m.vmstatCounters[i] = 34;
	                            break;
	                        case "VMSTAT_NR_SWAPCACHE":
	                        case 35:
	                            m.vmstatCounters[i] = 35;
	                            break;
	                        case "VMSTAT_NR_DIRTY_THRESHOLD":
	                        case 36:
	                            m.vmstatCounters[i] = 36;
	                            break;
	                        case "VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD":
	                        case 37:
	                            m.vmstatCounters[i] = 37;
	                            break;
	                        case "VMSTAT_PGPGIN":
	                        case 38:
	                            m.vmstatCounters[i] = 38;
	                            break;
	                        case "VMSTAT_PGPGOUT":
	                        case 39:
	                            m.vmstatCounters[i] = 39;
	                            break;
	                        case "VMSTAT_PGPGOUTCLEAN":
	                        case 40:
	                            m.vmstatCounters[i] = 40;
	                            break;
	                        case "VMSTAT_PSWPIN":
	                        case 41:
	                            m.vmstatCounters[i] = 41;
	                            break;
	                        case "VMSTAT_PSWPOUT":
	                        case 42:
	                            m.vmstatCounters[i] = 42;
	                            break;
	                        case "VMSTAT_PGALLOC_DMA":
	                        case 43:
	                            m.vmstatCounters[i] = 43;
	                            break;
	                        case "VMSTAT_PGALLOC_NORMAL":
	                        case 44:
	                            m.vmstatCounters[i] = 44;
	                            break;
	                        case "VMSTAT_PGALLOC_MOVABLE":
	                        case 45:
	                            m.vmstatCounters[i] = 45;
	                            break;
	                        case "VMSTAT_PGFREE":
	                        case 46:
	                            m.vmstatCounters[i] = 46;
	                            break;
	                        case "VMSTAT_PGACTIVATE":
	                        case 47:
	                            m.vmstatCounters[i] = 47;
	                            break;
	                        case "VMSTAT_PGDEACTIVATE":
	                        case 48:
	                            m.vmstatCounters[i] = 48;
	                            break;
	                        case "VMSTAT_PGFAULT":
	                        case 49:
	                            m.vmstatCounters[i] = 49;
	                            break;
	                        case "VMSTAT_PGMAJFAULT":
	                        case 50:
	                            m.vmstatCounters[i] = 50;
	                            break;
	                        case "VMSTAT_PGREFILL_DMA":
	                        case 51:
	                            m.vmstatCounters[i] = 51;
	                            break;
	                        case "VMSTAT_PGREFILL_NORMAL":
	                        case 52:
	                            m.vmstatCounters[i] = 52;
	                            break;
	                        case "VMSTAT_PGREFILL_MOVABLE":
	                        case 53:
	                            m.vmstatCounters[i] = 53;
	                            break;
	                        case "VMSTAT_PGSTEAL_KSWAPD_DMA":
	                        case 54:
	                            m.vmstatCounters[i] = 54;
	                            break;
	                        case "VMSTAT_PGSTEAL_KSWAPD_NORMAL":
	                        case 55:
	                            m.vmstatCounters[i] = 55;
	                            break;
	                        case "VMSTAT_PGSTEAL_KSWAPD_MOVABLE":
	                        case 56:
	                            m.vmstatCounters[i] = 56;
	                            break;
	                        case "VMSTAT_PGSTEAL_DIRECT_DMA":
	                        case 57:
	                            m.vmstatCounters[i] = 57;
	                            break;
	                        case "VMSTAT_PGSTEAL_DIRECT_NORMAL":
	                        case 58:
	                            m.vmstatCounters[i] = 58;
	                            break;
	                        case "VMSTAT_PGSTEAL_DIRECT_MOVABLE":
	                        case 59:
	                            m.vmstatCounters[i] = 59;
	                            break;
	                        case "VMSTAT_PGSCAN_KSWAPD_DMA":
	                        case 60:
	                            m.vmstatCounters[i] = 60;
	                            break;
	                        case "VMSTAT_PGSCAN_KSWAPD_NORMAL":
	                        case 61:
	                            m.vmstatCounters[i] = 61;
	                            break;
	                        case "VMSTAT_PGSCAN_KSWAPD_MOVABLE":
	                        case 62:
	                            m.vmstatCounters[i] = 62;
	                            break;
	                        case "VMSTAT_PGSCAN_DIRECT_DMA":
	                        case 63:
	                            m.vmstatCounters[i] = 63;
	                            break;
	                        case "VMSTAT_PGSCAN_DIRECT_NORMAL":
	                        case 64:
	                            m.vmstatCounters[i] = 64;
	                            break;
	                        case "VMSTAT_PGSCAN_DIRECT_MOVABLE":
	                        case 65:
	                            m.vmstatCounters[i] = 65;
	                            break;
	                        case "VMSTAT_PGSCAN_DIRECT_THROTTLE":
	                        case 66:
	                            m.vmstatCounters[i] = 66;
	                            break;
	                        case "VMSTAT_PGINODESTEAL":
	                        case 67:
	                            m.vmstatCounters[i] = 67;
	                            break;
	                        case "VMSTAT_SLABS_SCANNED":
	                        case 68:
	                            m.vmstatCounters[i] = 68;
	                            break;
	                        case "VMSTAT_KSWAPD_INODESTEAL":
	                        case 69:
	                            m.vmstatCounters[i] = 69;
	                            break;
	                        case "VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY":
	                        case 70:
	                            m.vmstatCounters[i] = 70;
	                            break;
	                        case "VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY":
	                        case 71:
	                            m.vmstatCounters[i] = 71;
	                            break;
	                        case "VMSTAT_PAGEOUTRUN":
	                        case 72:
	                            m.vmstatCounters[i] = 72;
	                            break;
	                        case "VMSTAT_ALLOCSTALL":
	                        case 73:
	                            m.vmstatCounters[i] = 73;
	                            break;
	                        case "VMSTAT_PGROTATED":
	                        case 74:
	                            m.vmstatCounters[i] = 74;
	                            break;
	                        case "VMSTAT_DROP_PAGECACHE":
	                        case 75:
	                            m.vmstatCounters[i] = 75;
	                            break;
	                        case "VMSTAT_DROP_SLAB":
	                        case 76:
	                            m.vmstatCounters[i] = 76;
	                            break;
	                        case "VMSTAT_PGMIGRATE_SUCCESS":
	                        case 77:
	                            m.vmstatCounters[i] = 77;
	                            break;
	                        case "VMSTAT_PGMIGRATE_FAIL":
	                        case 78:
	                            m.vmstatCounters[i] = 78;
	                            break;
	                        case "VMSTAT_COMPACT_MIGRATE_SCANNED":
	                        case 79:
	                            m.vmstatCounters[i] = 79;
	                            break;
	                        case "VMSTAT_COMPACT_FREE_SCANNED":
	                        case 80:
	                            m.vmstatCounters[i] = 80;
	                            break;
	                        case "VMSTAT_COMPACT_ISOLATED":
	                        case 81:
	                            m.vmstatCounters[i] = 81;
	                            break;
	                        case "VMSTAT_COMPACT_STALL":
	                        case 82:
	                            m.vmstatCounters[i] = 82;
	                            break;
	                        case "VMSTAT_COMPACT_FAIL":
	                        case 83:
	                            m.vmstatCounters[i] = 83;
	                            break;
	                        case "VMSTAT_COMPACT_SUCCESS":
	                        case 84:
	                            m.vmstatCounters[i] = 84;
	                            break;
	                        case "VMSTAT_COMPACT_DAEMON_WAKE":
	                        case 85:
	                            m.vmstatCounters[i] = 85;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_CULLED":
	                        case 86:
	                            m.vmstatCounters[i] = 86;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_SCANNED":
	                        case 87:
	                            m.vmstatCounters[i] = 87;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_RESCUED":
	                        case 88:
	                            m.vmstatCounters[i] = 88;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_MLOCKED":
	                        case 89:
	                            m.vmstatCounters[i] = 89;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_MUNLOCKED":
	                        case 90:
	                            m.vmstatCounters[i] = 90;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_CLEARED":
	                        case 91:
	                            m.vmstatCounters[i] = 91;
	                            break;
	                        case "VMSTAT_UNEVICTABLE_PGS_STRANDED":
	                        case 92:
	                            m.vmstatCounters[i] = 92;
	                            break;
	                        case "VMSTAT_NR_ZSPAGES":
	                        case 93:
	                            m.vmstatCounters[i] = 93;
	                            break;
	                        case "VMSTAT_NR_ION_HEAP":
	                        case 94:
	                            m.vmstatCounters[i] = 94;
	                            break;
	                        case "VMSTAT_NR_GPU_HEAP":
	                        case 95:
	                            m.vmstatCounters[i] = 95;
	                            break;
	                        case "VMSTAT_ALLOCSTALL_DMA":
	                        case 96:
	                            m.vmstatCounters[i] = 96;
	                            break;
	                        case "VMSTAT_ALLOCSTALL_MOVABLE":
	                        case 97:
	                            m.vmstatCounters[i] = 97;
	                            break;
	                        case "VMSTAT_ALLOCSTALL_NORMAL":
	                        case 98:
	                            m.vmstatCounters[i] = 98;
	                            break;
	                        case "VMSTAT_COMPACT_DAEMON_FREE_SCANNED":
	                        case 99:
	                            m.vmstatCounters[i] = 99;
	                            break;
	                        case "VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED":
	                        case 100:
	                            m.vmstatCounters[i] = 100;
	                            break;
	                        case "VMSTAT_NR_FASTRPC":
	                        case 101:
	                            m.vmstatCounters[i] = 101;
	                            break;
	                        case "VMSTAT_NR_INDIRECTLY_RECLAIMABLE":
	                        case 102:
	                            m.vmstatCounters[i] = 102;
	                            break;
	                        case "VMSTAT_NR_ION_HEAP_POOL":
	                        case 103:
	                            m.vmstatCounters[i] = 103;
	                            break;
	                        case "VMSTAT_NR_KERNEL_MISC_RECLAIMABLE":
	                        case 104:
	                            m.vmstatCounters[i] = 104;
	                            break;
	                        case "VMSTAT_NR_SHADOW_CALL_STACK_BYTES":
	                        case 105:
	                            m.vmstatCounters[i] = 105;
	                            break;
	                        case "VMSTAT_NR_SHMEM_HUGEPAGES":
	                        case 106:
	                            m.vmstatCounters[i] = 106;
	                            break;
	                        case "VMSTAT_NR_SHMEM_PMDMAPPED":
	                        case 107:
	                            m.vmstatCounters[i] = 107;
	                            break;
	                        case "VMSTAT_NR_UNRECLAIMABLE_PAGES":
	                        case 108:
	                            m.vmstatCounters[i] = 108;
	                            break;
	                        case "VMSTAT_NR_ZONE_ACTIVE_ANON":
	                        case 109:
	                            m.vmstatCounters[i] = 109;
	                            break;
	                        case "VMSTAT_NR_ZONE_ACTIVE_FILE":
	                        case 110:
	                            m.vmstatCounters[i] = 110;
	                            break;
	                        case "VMSTAT_NR_ZONE_INACTIVE_ANON":
	                        case 111:
	                            m.vmstatCounters[i] = 111;
	                            break;
	                        case "VMSTAT_NR_ZONE_INACTIVE_FILE":
	                        case 112:
	                            m.vmstatCounters[i] = 112;
	                            break;
	                        case "VMSTAT_NR_ZONE_UNEVICTABLE":
	                        case 113:
	                            m.vmstatCounters[i] = 113;
	                            break;
	                        case "VMSTAT_NR_ZONE_WRITE_PENDING":
	                        case 114:
	                            m.vmstatCounters[i] = 114;
	                            break;
	                        case "VMSTAT_OOM_KILL":
	                        case 115:
	                            m.vmstatCounters[i] = 115;
	                            break;
	                        case "VMSTAT_PGLAZYFREE":
	                        case 116:
	                            m.vmstatCounters[i] = 116;
	                            break;
	                        case "VMSTAT_PGLAZYFREED":
	                        case 117:
	                            m.vmstatCounters[i] = 117;
	                            break;
	                        case "VMSTAT_PGREFILL":
	                        case 118:
	                            m.vmstatCounters[i] = 118;
	                            break;
	                        case "VMSTAT_PGSCAN_DIRECT":
	                        case 119:
	                            m.vmstatCounters[i] = 119;
	                            break;
	                        case "VMSTAT_PGSCAN_KSWAPD":
	                        case 120:
	                            m.vmstatCounters[i] = 120;
	                            break;
	                        case "VMSTAT_PGSKIP_DMA":
	                        case 121:
	                            m.vmstatCounters[i] = 121;
	                            break;
	                        case "VMSTAT_PGSKIP_MOVABLE":
	                        case 122:
	                            m.vmstatCounters[i] = 122;
	                            break;
	                        case "VMSTAT_PGSKIP_NORMAL":
	                        case 123:
	                            m.vmstatCounters[i] = 123;
	                            break;
	                        case "VMSTAT_PGSTEAL_DIRECT":
	                        case 124:
	                            m.vmstatCounters[i] = 124;
	                            break;
	                        case "VMSTAT_PGSTEAL_KSWAPD":
	                        case 125:
	                            m.vmstatCounters[i] = 125;
	                            break;
	                        case "VMSTAT_SWAP_RA":
	                        case 126:
	                            m.vmstatCounters[i] = 126;
	                            break;
	                        case "VMSTAT_SWAP_RA_HIT":
	                        case 127:
	                            m.vmstatCounters[i] = 127;
	                            break;
	                        case "VMSTAT_WORKINGSET_RESTORE":
	                        case 128:
	                            m.vmstatCounters[i] = 128;
	                            break;
	                        case "VMSTAT_ALLOCSTALL_DEVICE":
	                        case 129:
	                            m.vmstatCounters[i] = 129;
	                            break;
	                        case "VMSTAT_ALLOCSTALL_DMA32":
	                        case 130:
	                            m.vmstatCounters[i] = 130;
	                            break;
	                        case "VMSTAT_BALLOON_DEFLATE":
	                        case 131:
	                            m.vmstatCounters[i] = 131;
	                            break;
	                        case "VMSTAT_BALLOON_INFLATE":
	                        case 132:
	                            m.vmstatCounters[i] = 132;
	                            break;
	                        case "VMSTAT_BALLOON_MIGRATE":
	                        case 133:
	                            m.vmstatCounters[i] = 133;
	                            break;
	                        case "VMSTAT_CMA_ALLOC_FAIL":
	                        case 134:
	                            m.vmstatCounters[i] = 134;
	                            break;
	                        case "VMSTAT_CMA_ALLOC_SUCCESS":
	                        case 135:
	                            m.vmstatCounters[i] = 135;
	                            break;
	                        case "VMSTAT_NR_FILE_HUGEPAGES":
	                        case 136:
	                            m.vmstatCounters[i] = 136;
	                            break;
	                        case "VMSTAT_NR_FILE_PMDMAPPED":
	                        case 137:
	                            m.vmstatCounters[i] = 137;
	                            break;
	                        case "VMSTAT_NR_FOLL_PIN_ACQUIRED":
	                        case 138:
	                            m.vmstatCounters[i] = 138;
	                            break;
	                        case "VMSTAT_NR_FOLL_PIN_RELEASED":
	                        case 139:
	                            m.vmstatCounters[i] = 139;
	                            break;
	                        case "VMSTAT_NR_SEC_PAGE_TABLE_PAGES":
	                        case 140:
	                            m.vmstatCounters[i] = 140;
	                            break;
	                        case "VMSTAT_NR_SHADOW_CALL_STACK":
	                        case 141:
	                            m.vmstatCounters[i] = 141;
	                            break;
	                        case "VMSTAT_NR_SWAPCACHED":
	                        case 142:
	                            m.vmstatCounters[i] = 142;
	                            break;
	                        case "VMSTAT_NR_THROTTLED_WRITTEN":
	                        case 143:
	                            m.vmstatCounters[i] = 143;
	                            break;
	                        case "VMSTAT_PGALLOC_DEVICE":
	                        case 144:
	                            m.vmstatCounters[i] = 144;
	                            break;
	                        case "VMSTAT_PGALLOC_DMA32":
	                        case 145:
	                            m.vmstatCounters[i] = 145;
	                            break;
	                        case "VMSTAT_PGDEMOTE_DIRECT":
	                        case 146:
	                            m.vmstatCounters[i] = 146;
	                            break;
	                        case "VMSTAT_PGDEMOTE_KSWAPD":
	                        case 147:
	                            m.vmstatCounters[i] = 147;
	                            break;
	                        case "VMSTAT_PGREUSE":
	                        case 148:
	                            m.vmstatCounters[i] = 148;
	                            break;
	                        case "VMSTAT_PGSCAN_ANON":
	                        case 149:
	                            m.vmstatCounters[i] = 149;
	                            break;
	                        case "VMSTAT_PGSCAN_FILE":
	                        case 150:
	                            m.vmstatCounters[i] = 150;
	                            break;
	                        case "VMSTAT_PGSKIP_DEVICE":
	                        case 151:
	                            m.vmstatCounters[i] = 151;
	                            break;
	                        case "VMSTAT_PGSKIP_DMA32":
	                        case 152:
	                            m.vmstatCounters[i] = 152;
	                            break;
	                        case "VMSTAT_PGSTEAL_ANON":
	                        case 153:
	                            m.vmstatCounters[i] = 153;
	                            break;
	                        case "VMSTAT_PGSTEAL_FILE":
	                        case 154:
	                            m.vmstatCounters[i] = 154;
	                            break;
	                        case "VMSTAT_THP_COLLAPSE_ALLOC":
	                        case 155:
	                            m.vmstatCounters[i] = 155;
	                            break;
	                        case "VMSTAT_THP_COLLAPSE_ALLOC_FAILED":
	                        case 156:
	                            m.vmstatCounters[i] = 156;
	                            break;
	                        case "VMSTAT_THP_DEFERRED_SPLIT_PAGE":
	                        case 157:
	                            m.vmstatCounters[i] = 157;
	                            break;
	                        case "VMSTAT_THP_FAULT_ALLOC":
	                        case 158:
	                            m.vmstatCounters[i] = 158;
	                            break;
	                        case "VMSTAT_THP_FAULT_FALLBACK":
	                        case 159:
	                            m.vmstatCounters[i] = 159;
	                            break;
	                        case "VMSTAT_THP_FAULT_FALLBACK_CHARGE":
	                        case 160:
	                            m.vmstatCounters[i] = 160;
	                            break;
	                        case "VMSTAT_THP_FILE_ALLOC":
	                        case 161:
	                            m.vmstatCounters[i] = 161;
	                            break;
	                        case "VMSTAT_THP_FILE_FALLBACK":
	                        case 162:
	                            m.vmstatCounters[i] = 162;
	                            break;
	                        case "VMSTAT_THP_FILE_FALLBACK_CHARGE":
	                        case 163:
	                            m.vmstatCounters[i] = 163;
	                            break;
	                        case "VMSTAT_THP_FILE_MAPPED":
	                        case 164:
	                            m.vmstatCounters[i] = 164;
	                            break;
	                        case "VMSTAT_THP_MIGRATION_FAIL":
	                        case 165:
	                            m.vmstatCounters[i] = 165;
	                            break;
	                        case "VMSTAT_THP_MIGRATION_SPLIT":
	                        case 166:
	                            m.vmstatCounters[i] = 166;
	                            break;
	                        case "VMSTAT_THP_MIGRATION_SUCCESS":
	                        case 167:
	                            m.vmstatCounters[i] = 167;
	                            break;
	                        case "VMSTAT_THP_SCAN_EXCEED_NONE_PTE":
	                        case 168:
	                            m.vmstatCounters[i] = 168;
	                            break;
	                        case "VMSTAT_THP_SCAN_EXCEED_SHARE_PTE":
	                        case 169:
	                            m.vmstatCounters[i] = 169;
	                            break;
	                        case "VMSTAT_THP_SCAN_EXCEED_SWAP_PTE":
	                        case 170:
	                            m.vmstatCounters[i] = 170;
	                            break;
	                        case "VMSTAT_THP_SPLIT_PAGE":
	                        case 171:
	                            m.vmstatCounters[i] = 171;
	                            break;
	                        case "VMSTAT_THP_SPLIT_PAGE_FAILED":
	                        case 172:
	                            m.vmstatCounters[i] = 172;
	                            break;
	                        case "VMSTAT_THP_SPLIT_PMD":
	                        case 173:
	                            m.vmstatCounters[i] = 173;
	                            break;
	                        case "VMSTAT_THP_SWPOUT":
	                        case 174:
	                            m.vmstatCounters[i] = 174;
	                            break;
	                        case "VMSTAT_THP_SWPOUT_FALLBACK":
	                        case 175:
	                            m.vmstatCounters[i] = 175;
	                            break;
	                        case "VMSTAT_THP_ZERO_PAGE_ALLOC":
	                        case 176:
	                            m.vmstatCounters[i] = 176;
	                            break;
	                        case "VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED":
	                        case 177:
	                            m.vmstatCounters[i] = 177;
	                            break;
	                        case "VMSTAT_VMA_LOCK_ABORT":
	                        case 178:
	                            m.vmstatCounters[i] = 178;
	                            break;
	                        case "VMSTAT_VMA_LOCK_MISS":
	                        case 179:
	                            m.vmstatCounters[i] = 179;
	                            break;
	                        case "VMSTAT_VMA_LOCK_RETRY":
	                        case 180:
	                            m.vmstatCounters[i] = 180;
	                            break;
	                        case "VMSTAT_VMA_LOCK_SUCCESS":
	                        case 181:
	                            m.vmstatCounters[i] = 181;
	                            break;
	                        case "VMSTAT_WORKINGSET_ACTIVATE_ANON":
	                        case 182:
	                            m.vmstatCounters[i] = 182;
	                            break;
	                        case "VMSTAT_WORKINGSET_ACTIVATE_FILE":
	                        case 183:
	                            m.vmstatCounters[i] = 183;
	                            break;
	                        case "VMSTAT_WORKINGSET_NODES":
	                        case 184:
	                            m.vmstatCounters[i] = 184;
	                            break;
	                        case "VMSTAT_WORKINGSET_REFAULT_ANON":
	                        case 185:
	                            m.vmstatCounters[i] = 185;
	                            break;
	                        case "VMSTAT_WORKINGSET_REFAULT_FILE":
	                        case 186:
	                            m.vmstatCounters[i] = 186;
	                            break;
	                        case "VMSTAT_WORKINGSET_RESTORE_ANON":
	                        case 187:
	                            m.vmstatCounters[i] = 187;
	                            break;
	                        case "VMSTAT_WORKINGSET_RESTORE_FILE":
	                        case 188:
	                            m.vmstatCounters[i] = 188;
	                            break;
	                        }
	                    }
	                }
	                if (d.statPeriodMs != null) {
	                    m.statPeriodMs = d.statPeriodMs >>> 0;
	                }
	                if (d.statCounters) {
	                    if (!Array.isArray(d.statCounters))
	                        throw TypeError(".perfetto.protos.SysStatsConfig.statCounters: array expected");
	                    m.statCounters = [];
	                    for (var i = 0; i < d.statCounters.length; ++i) {
	                        switch (d.statCounters[i]) {
	                        default:
	                            if (typeof d.statCounters[i] === "number") {
	                                m.statCounters[i] = d.statCounters[i];
	                                break;
	                            }
	                        case "STAT_UNSPECIFIED":
	                        case 0:
	                            m.statCounters[i] = 0;
	                            break;
	                        case "STAT_CPU_TIMES":
	                        case 1:
	                            m.statCounters[i] = 1;
	                            break;
	                        case "STAT_IRQ_COUNTS":
	                        case 2:
	                            m.statCounters[i] = 2;
	                            break;
	                        case "STAT_SOFTIRQ_COUNTS":
	                        case 3:
	                            m.statCounters[i] = 3;
	                            break;
	                        case "STAT_FORK_COUNT":
	                        case 4:
	                            m.statCounters[i] = 4;
	                            break;
	                        }
	                    }
	                }
	                if (d.devfreqPeriodMs != null) {
	                    m.devfreqPeriodMs = d.devfreqPeriodMs >>> 0;
	                }
	                if (d.cpufreqPeriodMs != null) {
	                    m.cpufreqPeriodMs = d.cpufreqPeriodMs >>> 0;
	                }
	                if (d.buddyinfoPeriodMs != null) {
	                    m.buddyinfoPeriodMs = d.buddyinfoPeriodMs >>> 0;
	                }
	                if (d.diskstatPeriodMs != null) {
	                    m.diskstatPeriodMs = d.diskstatPeriodMs >>> 0;
	                }
	                if (d.psiPeriodMs != null) {
	                    m.psiPeriodMs = d.psiPeriodMs >>> 0;
	                }
	                if (d.thermalPeriodMs != null) {
	                    m.thermalPeriodMs = d.thermalPeriodMs >>> 0;
	                }
	                if (d.cpuidlePeriodMs != null) {
	                    m.cpuidlePeriodMs = d.cpuidlePeriodMs >>> 0;
	                }
	                if (d.gpufreqPeriodMs != null) {
	                    m.gpufreqPeriodMs = d.gpufreqPeriodMs >>> 0;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a SysStatsConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.SysStatsConfig
	             * @static
	             * @param {perfetto.protos.SysStatsConfig} m SysStatsConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SysStatsConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.meminfoCounters = [];
	                    d.vmstatCounters = [];
	                    d.statCounters = [];
	                }
	                if (o.defaults) {
	                    d.meminfoPeriodMs = 0;
	                    d.vmstatPeriodMs = 0;
	                    d.statPeriodMs = 0;
	                    d.devfreqPeriodMs = 0;
	                    d.cpufreqPeriodMs = 0;
	                    d.buddyinfoPeriodMs = 0;
	                    d.diskstatPeriodMs = 0;
	                    d.psiPeriodMs = 0;
	                    d.thermalPeriodMs = 0;
	                    d.cpuidlePeriodMs = 0;
	                    d.gpufreqPeriodMs = 0;
	                }
	                if (m.meminfoPeriodMs != null && m.hasOwnProperty("meminfoPeriodMs")) {
	                    d.meminfoPeriodMs = m.meminfoPeriodMs;
	                }
	                if (m.meminfoCounters && m.meminfoCounters.length) {
	                    d.meminfoCounters = [];
	                    for (var j = 0; j < m.meminfoCounters.length; ++j) {
	                        d.meminfoCounters[j] = o.enums === String ? $root.perfetto.protos.MeminfoCounters[m.meminfoCounters[j]] === undefined ? m.meminfoCounters[j] : $root.perfetto.protos.MeminfoCounters[m.meminfoCounters[j]] : m.meminfoCounters[j];
	                    }
	                }
	                if (m.vmstatPeriodMs != null && m.hasOwnProperty("vmstatPeriodMs")) {
	                    d.vmstatPeriodMs = m.vmstatPeriodMs;
	                }
	                if (m.vmstatCounters && m.vmstatCounters.length) {
	                    d.vmstatCounters = [];
	                    for (var j = 0; j < m.vmstatCounters.length; ++j) {
	                        d.vmstatCounters[j] = o.enums === String ? $root.perfetto.protos.VmstatCounters[m.vmstatCounters[j]] === undefined ? m.vmstatCounters[j] : $root.perfetto.protos.VmstatCounters[m.vmstatCounters[j]] : m.vmstatCounters[j];
	                    }
	                }
	                if (m.statPeriodMs != null && m.hasOwnProperty("statPeriodMs")) {
	                    d.statPeriodMs = m.statPeriodMs;
	                }
	                if (m.statCounters && m.statCounters.length) {
	                    d.statCounters = [];
	                    for (var j = 0; j < m.statCounters.length; ++j) {
	                        d.statCounters[j] = o.enums === String ? $root.perfetto.protos.SysStatsConfig.StatCounters[m.statCounters[j]] === undefined ? m.statCounters[j] : $root.perfetto.protos.SysStatsConfig.StatCounters[m.statCounters[j]] : m.statCounters[j];
	                    }
	                }
	                if (m.devfreqPeriodMs != null && m.hasOwnProperty("devfreqPeriodMs")) {
	                    d.devfreqPeriodMs = m.devfreqPeriodMs;
	                }
	                if (m.cpufreqPeriodMs != null && m.hasOwnProperty("cpufreqPeriodMs")) {
	                    d.cpufreqPeriodMs = m.cpufreqPeriodMs;
	                }
	                if (m.buddyinfoPeriodMs != null && m.hasOwnProperty("buddyinfoPeriodMs")) {
	                    d.buddyinfoPeriodMs = m.buddyinfoPeriodMs;
	                }
	                if (m.diskstatPeriodMs != null && m.hasOwnProperty("diskstatPeriodMs")) {
	                    d.diskstatPeriodMs = m.diskstatPeriodMs;
	                }
	                if (m.psiPeriodMs != null && m.hasOwnProperty("psiPeriodMs")) {
	                    d.psiPeriodMs = m.psiPeriodMs;
	                }
	                if (m.thermalPeriodMs != null && m.hasOwnProperty("thermalPeriodMs")) {
	                    d.thermalPeriodMs = m.thermalPeriodMs;
	                }
	                if (m.cpuidlePeriodMs != null && m.hasOwnProperty("cpuidlePeriodMs")) {
	                    d.cpuidlePeriodMs = m.cpuidlePeriodMs;
	                }
	                if (m.gpufreqPeriodMs != null && m.hasOwnProperty("gpufreqPeriodMs")) {
	                    d.gpufreqPeriodMs = m.gpufreqPeriodMs;
	                }
	                return d;
	            };

	            /**
	             * Converts this SysStatsConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.SysStatsConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SysStatsConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for SysStatsConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.SysStatsConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            SysStatsConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.SysStatsConfig";
	            };

	            /**
	             * StatCounters enum.
	             * @name perfetto.protos.SysStatsConfig.StatCounters
	             * @enum {number}
	             * @property {number} STAT_UNSPECIFIED=0 STAT_UNSPECIFIED value
	             * @property {number} STAT_CPU_TIMES=1 STAT_CPU_TIMES value
	             * @property {number} STAT_IRQ_COUNTS=2 STAT_IRQ_COUNTS value
	             * @property {number} STAT_SOFTIRQ_COUNTS=3 STAT_SOFTIRQ_COUNTS value
	             * @property {number} STAT_FORK_COUNT=4 STAT_FORK_COUNT value
	             */
	            SysStatsConfig.StatCounters = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "STAT_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "STAT_CPU_TIMES"] = 1;
	                values[valuesById[2] = "STAT_IRQ_COUNTS"] = 2;
	                values[valuesById[3] = "STAT_SOFTIRQ_COUNTS"] = 3;
	                values[valuesById[4] = "STAT_FORK_COUNT"] = 4;
	                return values;
	            })();

	            return SysStatsConfig;
	        })();

	        /**
	         * MeminfoCounters enum.
	         * @name perfetto.protos.MeminfoCounters
	         * @enum {number}
	         * @property {number} MEMINFO_UNSPECIFIED=0 MEMINFO_UNSPECIFIED value
	         * @property {number} MEMINFO_MEM_TOTAL=1 MEMINFO_MEM_TOTAL value
	         * @property {number} MEMINFO_MEM_FREE=2 MEMINFO_MEM_FREE value
	         * @property {number} MEMINFO_MEM_AVAILABLE=3 MEMINFO_MEM_AVAILABLE value
	         * @property {number} MEMINFO_BUFFERS=4 MEMINFO_BUFFERS value
	         * @property {number} MEMINFO_CACHED=5 MEMINFO_CACHED value
	         * @property {number} MEMINFO_SWAP_CACHED=6 MEMINFO_SWAP_CACHED value
	         * @property {number} MEMINFO_ACTIVE=7 MEMINFO_ACTIVE value
	         * @property {number} MEMINFO_INACTIVE=8 MEMINFO_INACTIVE value
	         * @property {number} MEMINFO_ACTIVE_ANON=9 MEMINFO_ACTIVE_ANON value
	         * @property {number} MEMINFO_INACTIVE_ANON=10 MEMINFO_INACTIVE_ANON value
	         * @property {number} MEMINFO_ACTIVE_FILE=11 MEMINFO_ACTIVE_FILE value
	         * @property {number} MEMINFO_INACTIVE_FILE=12 MEMINFO_INACTIVE_FILE value
	         * @property {number} MEMINFO_UNEVICTABLE=13 MEMINFO_UNEVICTABLE value
	         * @property {number} MEMINFO_MLOCKED=14 MEMINFO_MLOCKED value
	         * @property {number} MEMINFO_SWAP_TOTAL=15 MEMINFO_SWAP_TOTAL value
	         * @property {number} MEMINFO_SWAP_FREE=16 MEMINFO_SWAP_FREE value
	         * @property {number} MEMINFO_DIRTY=17 MEMINFO_DIRTY value
	         * @property {number} MEMINFO_WRITEBACK=18 MEMINFO_WRITEBACK value
	         * @property {number} MEMINFO_ANON_PAGES=19 MEMINFO_ANON_PAGES value
	         * @property {number} MEMINFO_MAPPED=20 MEMINFO_MAPPED value
	         * @property {number} MEMINFO_SHMEM=21 MEMINFO_SHMEM value
	         * @property {number} MEMINFO_SLAB=22 MEMINFO_SLAB value
	         * @property {number} MEMINFO_SLAB_RECLAIMABLE=23 MEMINFO_SLAB_RECLAIMABLE value
	         * @property {number} MEMINFO_SLAB_UNRECLAIMABLE=24 MEMINFO_SLAB_UNRECLAIMABLE value
	         * @property {number} MEMINFO_KERNEL_STACK=25 MEMINFO_KERNEL_STACK value
	         * @property {number} MEMINFO_PAGE_TABLES=26 MEMINFO_PAGE_TABLES value
	         * @property {number} MEMINFO_COMMIT_LIMIT=27 MEMINFO_COMMIT_LIMIT value
	         * @property {number} MEMINFO_COMMITED_AS=28 MEMINFO_COMMITED_AS value
	         * @property {number} MEMINFO_VMALLOC_TOTAL=29 MEMINFO_VMALLOC_TOTAL value
	         * @property {number} MEMINFO_VMALLOC_USED=30 MEMINFO_VMALLOC_USED value
	         * @property {number} MEMINFO_VMALLOC_CHUNK=31 MEMINFO_VMALLOC_CHUNK value
	         * @property {number} MEMINFO_CMA_TOTAL=32 MEMINFO_CMA_TOTAL value
	         * @property {number} MEMINFO_CMA_FREE=33 MEMINFO_CMA_FREE value
	         * @property {number} MEMINFO_GPU=34 MEMINFO_GPU value
	         * @property {number} MEMINFO_ZRAM=35 MEMINFO_ZRAM value
	         * @property {number} MEMINFO_MISC=36 MEMINFO_MISC value
	         * @property {number} MEMINFO_ION_HEAP=37 MEMINFO_ION_HEAP value
	         * @property {number} MEMINFO_ION_HEAP_POOL=38 MEMINFO_ION_HEAP_POOL value
	         */
	        protos.MeminfoCounters = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "MEMINFO_UNSPECIFIED"] = 0;
	            values[valuesById[1] = "MEMINFO_MEM_TOTAL"] = 1;
	            values[valuesById[2] = "MEMINFO_MEM_FREE"] = 2;
	            values[valuesById[3] = "MEMINFO_MEM_AVAILABLE"] = 3;
	            values[valuesById[4] = "MEMINFO_BUFFERS"] = 4;
	            values[valuesById[5] = "MEMINFO_CACHED"] = 5;
	            values[valuesById[6] = "MEMINFO_SWAP_CACHED"] = 6;
	            values[valuesById[7] = "MEMINFO_ACTIVE"] = 7;
	            values[valuesById[8] = "MEMINFO_INACTIVE"] = 8;
	            values[valuesById[9] = "MEMINFO_ACTIVE_ANON"] = 9;
	            values[valuesById[10] = "MEMINFO_INACTIVE_ANON"] = 10;
	            values[valuesById[11] = "MEMINFO_ACTIVE_FILE"] = 11;
	            values[valuesById[12] = "MEMINFO_INACTIVE_FILE"] = 12;
	            values[valuesById[13] = "MEMINFO_UNEVICTABLE"] = 13;
	            values[valuesById[14] = "MEMINFO_MLOCKED"] = 14;
	            values[valuesById[15] = "MEMINFO_SWAP_TOTAL"] = 15;
	            values[valuesById[16] = "MEMINFO_SWAP_FREE"] = 16;
	            values[valuesById[17] = "MEMINFO_DIRTY"] = 17;
	            values[valuesById[18] = "MEMINFO_WRITEBACK"] = 18;
	            values[valuesById[19] = "MEMINFO_ANON_PAGES"] = 19;
	            values[valuesById[20] = "MEMINFO_MAPPED"] = 20;
	            values[valuesById[21] = "MEMINFO_SHMEM"] = 21;
	            values[valuesById[22] = "MEMINFO_SLAB"] = 22;
	            values[valuesById[23] = "MEMINFO_SLAB_RECLAIMABLE"] = 23;
	            values[valuesById[24] = "MEMINFO_SLAB_UNRECLAIMABLE"] = 24;
	            values[valuesById[25] = "MEMINFO_KERNEL_STACK"] = 25;
	            values[valuesById[26] = "MEMINFO_PAGE_TABLES"] = 26;
	            values[valuesById[27] = "MEMINFO_COMMIT_LIMIT"] = 27;
	            values[valuesById[28] = "MEMINFO_COMMITED_AS"] = 28;
	            values[valuesById[29] = "MEMINFO_VMALLOC_TOTAL"] = 29;
	            values[valuesById[30] = "MEMINFO_VMALLOC_USED"] = 30;
	            values[valuesById[31] = "MEMINFO_VMALLOC_CHUNK"] = 31;
	            values[valuesById[32] = "MEMINFO_CMA_TOTAL"] = 32;
	            values[valuesById[33] = "MEMINFO_CMA_FREE"] = 33;
	            values[valuesById[34] = "MEMINFO_GPU"] = 34;
	            values[valuesById[35] = "MEMINFO_ZRAM"] = 35;
	            values[valuesById[36] = "MEMINFO_MISC"] = 36;
	            values[valuesById[37] = "MEMINFO_ION_HEAP"] = 37;
	            values[valuesById[38] = "MEMINFO_ION_HEAP_POOL"] = 38;
	            return values;
	        })();

	        /**
	         * VmstatCounters enum.
	         * @name perfetto.protos.VmstatCounters
	         * @enum {number}
	         * @property {number} VMSTAT_UNSPECIFIED=0 VMSTAT_UNSPECIFIED value
	         * @property {number} VMSTAT_NR_FREE_PAGES=1 VMSTAT_NR_FREE_PAGES value
	         * @property {number} VMSTAT_NR_ALLOC_BATCH=2 VMSTAT_NR_ALLOC_BATCH value
	         * @property {number} VMSTAT_NR_INACTIVE_ANON=3 VMSTAT_NR_INACTIVE_ANON value
	         * @property {number} VMSTAT_NR_ACTIVE_ANON=4 VMSTAT_NR_ACTIVE_ANON value
	         * @property {number} VMSTAT_NR_INACTIVE_FILE=5 VMSTAT_NR_INACTIVE_FILE value
	         * @property {number} VMSTAT_NR_ACTIVE_FILE=6 VMSTAT_NR_ACTIVE_FILE value
	         * @property {number} VMSTAT_NR_UNEVICTABLE=7 VMSTAT_NR_UNEVICTABLE value
	         * @property {number} VMSTAT_NR_MLOCK=8 VMSTAT_NR_MLOCK value
	         * @property {number} VMSTAT_NR_ANON_PAGES=9 VMSTAT_NR_ANON_PAGES value
	         * @property {number} VMSTAT_NR_MAPPED=10 VMSTAT_NR_MAPPED value
	         * @property {number} VMSTAT_NR_FILE_PAGES=11 VMSTAT_NR_FILE_PAGES value
	         * @property {number} VMSTAT_NR_DIRTY=12 VMSTAT_NR_DIRTY value
	         * @property {number} VMSTAT_NR_WRITEBACK=13 VMSTAT_NR_WRITEBACK value
	         * @property {number} VMSTAT_NR_SLAB_RECLAIMABLE=14 VMSTAT_NR_SLAB_RECLAIMABLE value
	         * @property {number} VMSTAT_NR_SLAB_UNRECLAIMABLE=15 VMSTAT_NR_SLAB_UNRECLAIMABLE value
	         * @property {number} VMSTAT_NR_PAGE_TABLE_PAGES=16 VMSTAT_NR_PAGE_TABLE_PAGES value
	         * @property {number} VMSTAT_NR_KERNEL_STACK=17 VMSTAT_NR_KERNEL_STACK value
	         * @property {number} VMSTAT_NR_OVERHEAD=18 VMSTAT_NR_OVERHEAD value
	         * @property {number} VMSTAT_NR_UNSTABLE=19 VMSTAT_NR_UNSTABLE value
	         * @property {number} VMSTAT_NR_BOUNCE=20 VMSTAT_NR_BOUNCE value
	         * @property {number} VMSTAT_NR_VMSCAN_WRITE=21 VMSTAT_NR_VMSCAN_WRITE value
	         * @property {number} VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM=22 VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM value
	         * @property {number} VMSTAT_NR_WRITEBACK_TEMP=23 VMSTAT_NR_WRITEBACK_TEMP value
	         * @property {number} VMSTAT_NR_ISOLATED_ANON=24 VMSTAT_NR_ISOLATED_ANON value
	         * @property {number} VMSTAT_NR_ISOLATED_FILE=25 VMSTAT_NR_ISOLATED_FILE value
	         * @property {number} VMSTAT_NR_SHMEM=26 VMSTAT_NR_SHMEM value
	         * @property {number} VMSTAT_NR_DIRTIED=27 VMSTAT_NR_DIRTIED value
	         * @property {number} VMSTAT_NR_WRITTEN=28 VMSTAT_NR_WRITTEN value
	         * @property {number} VMSTAT_NR_PAGES_SCANNED=29 VMSTAT_NR_PAGES_SCANNED value
	         * @property {number} VMSTAT_WORKINGSET_REFAULT=30 VMSTAT_WORKINGSET_REFAULT value
	         * @property {number} VMSTAT_WORKINGSET_ACTIVATE=31 VMSTAT_WORKINGSET_ACTIVATE value
	         * @property {number} VMSTAT_WORKINGSET_NODERECLAIM=32 VMSTAT_WORKINGSET_NODERECLAIM value
	         * @property {number} VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES=33 VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES value
	         * @property {number} VMSTAT_NR_FREE_CMA=34 VMSTAT_NR_FREE_CMA value
	         * @property {number} VMSTAT_NR_SWAPCACHE=35 VMSTAT_NR_SWAPCACHE value
	         * @property {number} VMSTAT_NR_DIRTY_THRESHOLD=36 VMSTAT_NR_DIRTY_THRESHOLD value
	         * @property {number} VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD=37 VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD value
	         * @property {number} VMSTAT_PGPGIN=38 VMSTAT_PGPGIN value
	         * @property {number} VMSTAT_PGPGOUT=39 VMSTAT_PGPGOUT value
	         * @property {number} VMSTAT_PGPGOUTCLEAN=40 VMSTAT_PGPGOUTCLEAN value
	         * @property {number} VMSTAT_PSWPIN=41 VMSTAT_PSWPIN value
	         * @property {number} VMSTAT_PSWPOUT=42 VMSTAT_PSWPOUT value
	         * @property {number} VMSTAT_PGALLOC_DMA=43 VMSTAT_PGALLOC_DMA value
	         * @property {number} VMSTAT_PGALLOC_NORMAL=44 VMSTAT_PGALLOC_NORMAL value
	         * @property {number} VMSTAT_PGALLOC_MOVABLE=45 VMSTAT_PGALLOC_MOVABLE value
	         * @property {number} VMSTAT_PGFREE=46 VMSTAT_PGFREE value
	         * @property {number} VMSTAT_PGACTIVATE=47 VMSTAT_PGACTIVATE value
	         * @property {number} VMSTAT_PGDEACTIVATE=48 VMSTAT_PGDEACTIVATE value
	         * @property {number} VMSTAT_PGFAULT=49 VMSTAT_PGFAULT value
	         * @property {number} VMSTAT_PGMAJFAULT=50 VMSTAT_PGMAJFAULT value
	         * @property {number} VMSTAT_PGREFILL_DMA=51 VMSTAT_PGREFILL_DMA value
	         * @property {number} VMSTAT_PGREFILL_NORMAL=52 VMSTAT_PGREFILL_NORMAL value
	         * @property {number} VMSTAT_PGREFILL_MOVABLE=53 VMSTAT_PGREFILL_MOVABLE value
	         * @property {number} VMSTAT_PGSTEAL_KSWAPD_DMA=54 VMSTAT_PGSTEAL_KSWAPD_DMA value
	         * @property {number} VMSTAT_PGSTEAL_KSWAPD_NORMAL=55 VMSTAT_PGSTEAL_KSWAPD_NORMAL value
	         * @property {number} VMSTAT_PGSTEAL_KSWAPD_MOVABLE=56 VMSTAT_PGSTEAL_KSWAPD_MOVABLE value
	         * @property {number} VMSTAT_PGSTEAL_DIRECT_DMA=57 VMSTAT_PGSTEAL_DIRECT_DMA value
	         * @property {number} VMSTAT_PGSTEAL_DIRECT_NORMAL=58 VMSTAT_PGSTEAL_DIRECT_NORMAL value
	         * @property {number} VMSTAT_PGSTEAL_DIRECT_MOVABLE=59 VMSTAT_PGSTEAL_DIRECT_MOVABLE value
	         * @property {number} VMSTAT_PGSCAN_KSWAPD_DMA=60 VMSTAT_PGSCAN_KSWAPD_DMA value
	         * @property {number} VMSTAT_PGSCAN_KSWAPD_NORMAL=61 VMSTAT_PGSCAN_KSWAPD_NORMAL value
	         * @property {number} VMSTAT_PGSCAN_KSWAPD_MOVABLE=62 VMSTAT_PGSCAN_KSWAPD_MOVABLE value
	         * @property {number} VMSTAT_PGSCAN_DIRECT_DMA=63 VMSTAT_PGSCAN_DIRECT_DMA value
	         * @property {number} VMSTAT_PGSCAN_DIRECT_NORMAL=64 VMSTAT_PGSCAN_DIRECT_NORMAL value
	         * @property {number} VMSTAT_PGSCAN_DIRECT_MOVABLE=65 VMSTAT_PGSCAN_DIRECT_MOVABLE value
	         * @property {number} VMSTAT_PGSCAN_DIRECT_THROTTLE=66 VMSTAT_PGSCAN_DIRECT_THROTTLE value
	         * @property {number} VMSTAT_PGINODESTEAL=67 VMSTAT_PGINODESTEAL value
	         * @property {number} VMSTAT_SLABS_SCANNED=68 VMSTAT_SLABS_SCANNED value
	         * @property {number} VMSTAT_KSWAPD_INODESTEAL=69 VMSTAT_KSWAPD_INODESTEAL value
	         * @property {number} VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY=70 VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY value
	         * @property {number} VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY=71 VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY value
	         * @property {number} VMSTAT_PAGEOUTRUN=72 VMSTAT_PAGEOUTRUN value
	         * @property {number} VMSTAT_ALLOCSTALL=73 VMSTAT_ALLOCSTALL value
	         * @property {number} VMSTAT_PGROTATED=74 VMSTAT_PGROTATED value
	         * @property {number} VMSTAT_DROP_PAGECACHE=75 VMSTAT_DROP_PAGECACHE value
	         * @property {number} VMSTAT_DROP_SLAB=76 VMSTAT_DROP_SLAB value
	         * @property {number} VMSTAT_PGMIGRATE_SUCCESS=77 VMSTAT_PGMIGRATE_SUCCESS value
	         * @property {number} VMSTAT_PGMIGRATE_FAIL=78 VMSTAT_PGMIGRATE_FAIL value
	         * @property {number} VMSTAT_COMPACT_MIGRATE_SCANNED=79 VMSTAT_COMPACT_MIGRATE_SCANNED value
	         * @property {number} VMSTAT_COMPACT_FREE_SCANNED=80 VMSTAT_COMPACT_FREE_SCANNED value
	         * @property {number} VMSTAT_COMPACT_ISOLATED=81 VMSTAT_COMPACT_ISOLATED value
	         * @property {number} VMSTAT_COMPACT_STALL=82 VMSTAT_COMPACT_STALL value
	         * @property {number} VMSTAT_COMPACT_FAIL=83 VMSTAT_COMPACT_FAIL value
	         * @property {number} VMSTAT_COMPACT_SUCCESS=84 VMSTAT_COMPACT_SUCCESS value
	         * @property {number} VMSTAT_COMPACT_DAEMON_WAKE=85 VMSTAT_COMPACT_DAEMON_WAKE value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_CULLED=86 VMSTAT_UNEVICTABLE_PGS_CULLED value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_SCANNED=87 VMSTAT_UNEVICTABLE_PGS_SCANNED value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_RESCUED=88 VMSTAT_UNEVICTABLE_PGS_RESCUED value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_MLOCKED=89 VMSTAT_UNEVICTABLE_PGS_MLOCKED value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_MUNLOCKED=90 VMSTAT_UNEVICTABLE_PGS_MUNLOCKED value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_CLEARED=91 VMSTAT_UNEVICTABLE_PGS_CLEARED value
	         * @property {number} VMSTAT_UNEVICTABLE_PGS_STRANDED=92 VMSTAT_UNEVICTABLE_PGS_STRANDED value
	         * @property {number} VMSTAT_NR_ZSPAGES=93 VMSTAT_NR_ZSPAGES value
	         * @property {number} VMSTAT_NR_ION_HEAP=94 VMSTAT_NR_ION_HEAP value
	         * @property {number} VMSTAT_NR_GPU_HEAP=95 VMSTAT_NR_GPU_HEAP value
	         * @property {number} VMSTAT_ALLOCSTALL_DMA=96 VMSTAT_ALLOCSTALL_DMA value
	         * @property {number} VMSTAT_ALLOCSTALL_MOVABLE=97 VMSTAT_ALLOCSTALL_MOVABLE value
	         * @property {number} VMSTAT_ALLOCSTALL_NORMAL=98 VMSTAT_ALLOCSTALL_NORMAL value
	         * @property {number} VMSTAT_COMPACT_DAEMON_FREE_SCANNED=99 VMSTAT_COMPACT_DAEMON_FREE_SCANNED value
	         * @property {number} VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED=100 VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED value
	         * @property {number} VMSTAT_NR_FASTRPC=101 VMSTAT_NR_FASTRPC value
	         * @property {number} VMSTAT_NR_INDIRECTLY_RECLAIMABLE=102 VMSTAT_NR_INDIRECTLY_RECLAIMABLE value
	         * @property {number} VMSTAT_NR_ION_HEAP_POOL=103 VMSTAT_NR_ION_HEAP_POOL value
	         * @property {number} VMSTAT_NR_KERNEL_MISC_RECLAIMABLE=104 VMSTAT_NR_KERNEL_MISC_RECLAIMABLE value
	         * @property {number} VMSTAT_NR_SHADOW_CALL_STACK_BYTES=105 VMSTAT_NR_SHADOW_CALL_STACK_BYTES value
	         * @property {number} VMSTAT_NR_SHMEM_HUGEPAGES=106 VMSTAT_NR_SHMEM_HUGEPAGES value
	         * @property {number} VMSTAT_NR_SHMEM_PMDMAPPED=107 VMSTAT_NR_SHMEM_PMDMAPPED value
	         * @property {number} VMSTAT_NR_UNRECLAIMABLE_PAGES=108 VMSTAT_NR_UNRECLAIMABLE_PAGES value
	         * @property {number} VMSTAT_NR_ZONE_ACTIVE_ANON=109 VMSTAT_NR_ZONE_ACTIVE_ANON value
	         * @property {number} VMSTAT_NR_ZONE_ACTIVE_FILE=110 VMSTAT_NR_ZONE_ACTIVE_FILE value
	         * @property {number} VMSTAT_NR_ZONE_INACTIVE_ANON=111 VMSTAT_NR_ZONE_INACTIVE_ANON value
	         * @property {number} VMSTAT_NR_ZONE_INACTIVE_FILE=112 VMSTAT_NR_ZONE_INACTIVE_FILE value
	         * @property {number} VMSTAT_NR_ZONE_UNEVICTABLE=113 VMSTAT_NR_ZONE_UNEVICTABLE value
	         * @property {number} VMSTAT_NR_ZONE_WRITE_PENDING=114 VMSTAT_NR_ZONE_WRITE_PENDING value
	         * @property {number} VMSTAT_OOM_KILL=115 VMSTAT_OOM_KILL value
	         * @property {number} VMSTAT_PGLAZYFREE=116 VMSTAT_PGLAZYFREE value
	         * @property {number} VMSTAT_PGLAZYFREED=117 VMSTAT_PGLAZYFREED value
	         * @property {number} VMSTAT_PGREFILL=118 VMSTAT_PGREFILL value
	         * @property {number} VMSTAT_PGSCAN_DIRECT=119 VMSTAT_PGSCAN_DIRECT value
	         * @property {number} VMSTAT_PGSCAN_KSWAPD=120 VMSTAT_PGSCAN_KSWAPD value
	         * @property {number} VMSTAT_PGSKIP_DMA=121 VMSTAT_PGSKIP_DMA value
	         * @property {number} VMSTAT_PGSKIP_MOVABLE=122 VMSTAT_PGSKIP_MOVABLE value
	         * @property {number} VMSTAT_PGSKIP_NORMAL=123 VMSTAT_PGSKIP_NORMAL value
	         * @property {number} VMSTAT_PGSTEAL_DIRECT=124 VMSTAT_PGSTEAL_DIRECT value
	         * @property {number} VMSTAT_PGSTEAL_KSWAPD=125 VMSTAT_PGSTEAL_KSWAPD value
	         * @property {number} VMSTAT_SWAP_RA=126 VMSTAT_SWAP_RA value
	         * @property {number} VMSTAT_SWAP_RA_HIT=127 VMSTAT_SWAP_RA_HIT value
	         * @property {number} VMSTAT_WORKINGSET_RESTORE=128 VMSTAT_WORKINGSET_RESTORE value
	         * @property {number} VMSTAT_ALLOCSTALL_DEVICE=129 VMSTAT_ALLOCSTALL_DEVICE value
	         * @property {number} VMSTAT_ALLOCSTALL_DMA32=130 VMSTAT_ALLOCSTALL_DMA32 value
	         * @property {number} VMSTAT_BALLOON_DEFLATE=131 VMSTAT_BALLOON_DEFLATE value
	         * @property {number} VMSTAT_BALLOON_INFLATE=132 VMSTAT_BALLOON_INFLATE value
	         * @property {number} VMSTAT_BALLOON_MIGRATE=133 VMSTAT_BALLOON_MIGRATE value
	         * @property {number} VMSTAT_CMA_ALLOC_FAIL=134 VMSTAT_CMA_ALLOC_FAIL value
	         * @property {number} VMSTAT_CMA_ALLOC_SUCCESS=135 VMSTAT_CMA_ALLOC_SUCCESS value
	         * @property {number} VMSTAT_NR_FILE_HUGEPAGES=136 VMSTAT_NR_FILE_HUGEPAGES value
	         * @property {number} VMSTAT_NR_FILE_PMDMAPPED=137 VMSTAT_NR_FILE_PMDMAPPED value
	         * @property {number} VMSTAT_NR_FOLL_PIN_ACQUIRED=138 VMSTAT_NR_FOLL_PIN_ACQUIRED value
	         * @property {number} VMSTAT_NR_FOLL_PIN_RELEASED=139 VMSTAT_NR_FOLL_PIN_RELEASED value
	         * @property {number} VMSTAT_NR_SEC_PAGE_TABLE_PAGES=140 VMSTAT_NR_SEC_PAGE_TABLE_PAGES value
	         * @property {number} VMSTAT_NR_SHADOW_CALL_STACK=141 VMSTAT_NR_SHADOW_CALL_STACK value
	         * @property {number} VMSTAT_NR_SWAPCACHED=142 VMSTAT_NR_SWAPCACHED value
	         * @property {number} VMSTAT_NR_THROTTLED_WRITTEN=143 VMSTAT_NR_THROTTLED_WRITTEN value
	         * @property {number} VMSTAT_PGALLOC_DEVICE=144 VMSTAT_PGALLOC_DEVICE value
	         * @property {number} VMSTAT_PGALLOC_DMA32=145 VMSTAT_PGALLOC_DMA32 value
	         * @property {number} VMSTAT_PGDEMOTE_DIRECT=146 VMSTAT_PGDEMOTE_DIRECT value
	         * @property {number} VMSTAT_PGDEMOTE_KSWAPD=147 VMSTAT_PGDEMOTE_KSWAPD value
	         * @property {number} VMSTAT_PGREUSE=148 VMSTAT_PGREUSE value
	         * @property {number} VMSTAT_PGSCAN_ANON=149 VMSTAT_PGSCAN_ANON value
	         * @property {number} VMSTAT_PGSCAN_FILE=150 VMSTAT_PGSCAN_FILE value
	         * @property {number} VMSTAT_PGSKIP_DEVICE=151 VMSTAT_PGSKIP_DEVICE value
	         * @property {number} VMSTAT_PGSKIP_DMA32=152 VMSTAT_PGSKIP_DMA32 value
	         * @property {number} VMSTAT_PGSTEAL_ANON=153 VMSTAT_PGSTEAL_ANON value
	         * @property {number} VMSTAT_PGSTEAL_FILE=154 VMSTAT_PGSTEAL_FILE value
	         * @property {number} VMSTAT_THP_COLLAPSE_ALLOC=155 VMSTAT_THP_COLLAPSE_ALLOC value
	         * @property {number} VMSTAT_THP_COLLAPSE_ALLOC_FAILED=156 VMSTAT_THP_COLLAPSE_ALLOC_FAILED value
	         * @property {number} VMSTAT_THP_DEFERRED_SPLIT_PAGE=157 VMSTAT_THP_DEFERRED_SPLIT_PAGE value
	         * @property {number} VMSTAT_THP_FAULT_ALLOC=158 VMSTAT_THP_FAULT_ALLOC value
	         * @property {number} VMSTAT_THP_FAULT_FALLBACK=159 VMSTAT_THP_FAULT_FALLBACK value
	         * @property {number} VMSTAT_THP_FAULT_FALLBACK_CHARGE=160 VMSTAT_THP_FAULT_FALLBACK_CHARGE value
	         * @property {number} VMSTAT_THP_FILE_ALLOC=161 VMSTAT_THP_FILE_ALLOC value
	         * @property {number} VMSTAT_THP_FILE_FALLBACK=162 VMSTAT_THP_FILE_FALLBACK value
	         * @property {number} VMSTAT_THP_FILE_FALLBACK_CHARGE=163 VMSTAT_THP_FILE_FALLBACK_CHARGE value
	         * @property {number} VMSTAT_THP_FILE_MAPPED=164 VMSTAT_THP_FILE_MAPPED value
	         * @property {number} VMSTAT_THP_MIGRATION_FAIL=165 VMSTAT_THP_MIGRATION_FAIL value
	         * @property {number} VMSTAT_THP_MIGRATION_SPLIT=166 VMSTAT_THP_MIGRATION_SPLIT value
	         * @property {number} VMSTAT_THP_MIGRATION_SUCCESS=167 VMSTAT_THP_MIGRATION_SUCCESS value
	         * @property {number} VMSTAT_THP_SCAN_EXCEED_NONE_PTE=168 VMSTAT_THP_SCAN_EXCEED_NONE_PTE value
	         * @property {number} VMSTAT_THP_SCAN_EXCEED_SHARE_PTE=169 VMSTAT_THP_SCAN_EXCEED_SHARE_PTE value
	         * @property {number} VMSTAT_THP_SCAN_EXCEED_SWAP_PTE=170 VMSTAT_THP_SCAN_EXCEED_SWAP_PTE value
	         * @property {number} VMSTAT_THP_SPLIT_PAGE=171 VMSTAT_THP_SPLIT_PAGE value
	         * @property {number} VMSTAT_THP_SPLIT_PAGE_FAILED=172 VMSTAT_THP_SPLIT_PAGE_FAILED value
	         * @property {number} VMSTAT_THP_SPLIT_PMD=173 VMSTAT_THP_SPLIT_PMD value
	         * @property {number} VMSTAT_THP_SWPOUT=174 VMSTAT_THP_SWPOUT value
	         * @property {number} VMSTAT_THP_SWPOUT_FALLBACK=175 VMSTAT_THP_SWPOUT_FALLBACK value
	         * @property {number} VMSTAT_THP_ZERO_PAGE_ALLOC=176 VMSTAT_THP_ZERO_PAGE_ALLOC value
	         * @property {number} VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED=177 VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED value
	         * @property {number} VMSTAT_VMA_LOCK_ABORT=178 VMSTAT_VMA_LOCK_ABORT value
	         * @property {number} VMSTAT_VMA_LOCK_MISS=179 VMSTAT_VMA_LOCK_MISS value
	         * @property {number} VMSTAT_VMA_LOCK_RETRY=180 VMSTAT_VMA_LOCK_RETRY value
	         * @property {number} VMSTAT_VMA_LOCK_SUCCESS=181 VMSTAT_VMA_LOCK_SUCCESS value
	         * @property {number} VMSTAT_WORKINGSET_ACTIVATE_ANON=182 VMSTAT_WORKINGSET_ACTIVATE_ANON value
	         * @property {number} VMSTAT_WORKINGSET_ACTIVATE_FILE=183 VMSTAT_WORKINGSET_ACTIVATE_FILE value
	         * @property {number} VMSTAT_WORKINGSET_NODES=184 VMSTAT_WORKINGSET_NODES value
	         * @property {number} VMSTAT_WORKINGSET_REFAULT_ANON=185 VMSTAT_WORKINGSET_REFAULT_ANON value
	         * @property {number} VMSTAT_WORKINGSET_REFAULT_FILE=186 VMSTAT_WORKINGSET_REFAULT_FILE value
	         * @property {number} VMSTAT_WORKINGSET_RESTORE_ANON=187 VMSTAT_WORKINGSET_RESTORE_ANON value
	         * @property {number} VMSTAT_WORKINGSET_RESTORE_FILE=188 VMSTAT_WORKINGSET_RESTORE_FILE value
	         */
	        protos.VmstatCounters = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[0] = "VMSTAT_UNSPECIFIED"] = 0;
	            values[valuesById[1] = "VMSTAT_NR_FREE_PAGES"] = 1;
	            values[valuesById[2] = "VMSTAT_NR_ALLOC_BATCH"] = 2;
	            values[valuesById[3] = "VMSTAT_NR_INACTIVE_ANON"] = 3;
	            values[valuesById[4] = "VMSTAT_NR_ACTIVE_ANON"] = 4;
	            values[valuesById[5] = "VMSTAT_NR_INACTIVE_FILE"] = 5;
	            values[valuesById[6] = "VMSTAT_NR_ACTIVE_FILE"] = 6;
	            values[valuesById[7] = "VMSTAT_NR_UNEVICTABLE"] = 7;
	            values[valuesById[8] = "VMSTAT_NR_MLOCK"] = 8;
	            values[valuesById[9] = "VMSTAT_NR_ANON_PAGES"] = 9;
	            values[valuesById[10] = "VMSTAT_NR_MAPPED"] = 10;
	            values[valuesById[11] = "VMSTAT_NR_FILE_PAGES"] = 11;
	            values[valuesById[12] = "VMSTAT_NR_DIRTY"] = 12;
	            values[valuesById[13] = "VMSTAT_NR_WRITEBACK"] = 13;
	            values[valuesById[14] = "VMSTAT_NR_SLAB_RECLAIMABLE"] = 14;
	            values[valuesById[15] = "VMSTAT_NR_SLAB_UNRECLAIMABLE"] = 15;
	            values[valuesById[16] = "VMSTAT_NR_PAGE_TABLE_PAGES"] = 16;
	            values[valuesById[17] = "VMSTAT_NR_KERNEL_STACK"] = 17;
	            values[valuesById[18] = "VMSTAT_NR_OVERHEAD"] = 18;
	            values[valuesById[19] = "VMSTAT_NR_UNSTABLE"] = 19;
	            values[valuesById[20] = "VMSTAT_NR_BOUNCE"] = 20;
	            values[valuesById[21] = "VMSTAT_NR_VMSCAN_WRITE"] = 21;
	            values[valuesById[22] = "VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM"] = 22;
	            values[valuesById[23] = "VMSTAT_NR_WRITEBACK_TEMP"] = 23;
	            values[valuesById[24] = "VMSTAT_NR_ISOLATED_ANON"] = 24;
	            values[valuesById[25] = "VMSTAT_NR_ISOLATED_FILE"] = 25;
	            values[valuesById[26] = "VMSTAT_NR_SHMEM"] = 26;
	            values[valuesById[27] = "VMSTAT_NR_DIRTIED"] = 27;
	            values[valuesById[28] = "VMSTAT_NR_WRITTEN"] = 28;
	            values[valuesById[29] = "VMSTAT_NR_PAGES_SCANNED"] = 29;
	            values[valuesById[30] = "VMSTAT_WORKINGSET_REFAULT"] = 30;
	            values[valuesById[31] = "VMSTAT_WORKINGSET_ACTIVATE"] = 31;
	            values[valuesById[32] = "VMSTAT_WORKINGSET_NODERECLAIM"] = 32;
	            values[valuesById[33] = "VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES"] = 33;
	            values[valuesById[34] = "VMSTAT_NR_FREE_CMA"] = 34;
	            values[valuesById[35] = "VMSTAT_NR_SWAPCACHE"] = 35;
	            values[valuesById[36] = "VMSTAT_NR_DIRTY_THRESHOLD"] = 36;
	            values[valuesById[37] = "VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD"] = 37;
	            values[valuesById[38] = "VMSTAT_PGPGIN"] = 38;
	            values[valuesById[39] = "VMSTAT_PGPGOUT"] = 39;
	            values[valuesById[40] = "VMSTAT_PGPGOUTCLEAN"] = 40;
	            values[valuesById[41] = "VMSTAT_PSWPIN"] = 41;
	            values[valuesById[42] = "VMSTAT_PSWPOUT"] = 42;
	            values[valuesById[43] = "VMSTAT_PGALLOC_DMA"] = 43;
	            values[valuesById[44] = "VMSTAT_PGALLOC_NORMAL"] = 44;
	            values[valuesById[45] = "VMSTAT_PGALLOC_MOVABLE"] = 45;
	            values[valuesById[46] = "VMSTAT_PGFREE"] = 46;
	            values[valuesById[47] = "VMSTAT_PGACTIVATE"] = 47;
	            values[valuesById[48] = "VMSTAT_PGDEACTIVATE"] = 48;
	            values[valuesById[49] = "VMSTAT_PGFAULT"] = 49;
	            values[valuesById[50] = "VMSTAT_PGMAJFAULT"] = 50;
	            values[valuesById[51] = "VMSTAT_PGREFILL_DMA"] = 51;
	            values[valuesById[52] = "VMSTAT_PGREFILL_NORMAL"] = 52;
	            values[valuesById[53] = "VMSTAT_PGREFILL_MOVABLE"] = 53;
	            values[valuesById[54] = "VMSTAT_PGSTEAL_KSWAPD_DMA"] = 54;
	            values[valuesById[55] = "VMSTAT_PGSTEAL_KSWAPD_NORMAL"] = 55;
	            values[valuesById[56] = "VMSTAT_PGSTEAL_KSWAPD_MOVABLE"] = 56;
	            values[valuesById[57] = "VMSTAT_PGSTEAL_DIRECT_DMA"] = 57;
	            values[valuesById[58] = "VMSTAT_PGSTEAL_DIRECT_NORMAL"] = 58;
	            values[valuesById[59] = "VMSTAT_PGSTEAL_DIRECT_MOVABLE"] = 59;
	            values[valuesById[60] = "VMSTAT_PGSCAN_KSWAPD_DMA"] = 60;
	            values[valuesById[61] = "VMSTAT_PGSCAN_KSWAPD_NORMAL"] = 61;
	            values[valuesById[62] = "VMSTAT_PGSCAN_KSWAPD_MOVABLE"] = 62;
	            values[valuesById[63] = "VMSTAT_PGSCAN_DIRECT_DMA"] = 63;
	            values[valuesById[64] = "VMSTAT_PGSCAN_DIRECT_NORMAL"] = 64;
	            values[valuesById[65] = "VMSTAT_PGSCAN_DIRECT_MOVABLE"] = 65;
	            values[valuesById[66] = "VMSTAT_PGSCAN_DIRECT_THROTTLE"] = 66;
	            values[valuesById[67] = "VMSTAT_PGINODESTEAL"] = 67;
	            values[valuesById[68] = "VMSTAT_SLABS_SCANNED"] = 68;
	            values[valuesById[69] = "VMSTAT_KSWAPD_INODESTEAL"] = 69;
	            values[valuesById[70] = "VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY"] = 70;
	            values[valuesById[71] = "VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY"] = 71;
	            values[valuesById[72] = "VMSTAT_PAGEOUTRUN"] = 72;
	            values[valuesById[73] = "VMSTAT_ALLOCSTALL"] = 73;
	            values[valuesById[74] = "VMSTAT_PGROTATED"] = 74;
	            values[valuesById[75] = "VMSTAT_DROP_PAGECACHE"] = 75;
	            values[valuesById[76] = "VMSTAT_DROP_SLAB"] = 76;
	            values[valuesById[77] = "VMSTAT_PGMIGRATE_SUCCESS"] = 77;
	            values[valuesById[78] = "VMSTAT_PGMIGRATE_FAIL"] = 78;
	            values[valuesById[79] = "VMSTAT_COMPACT_MIGRATE_SCANNED"] = 79;
	            values[valuesById[80] = "VMSTAT_COMPACT_FREE_SCANNED"] = 80;
	            values[valuesById[81] = "VMSTAT_COMPACT_ISOLATED"] = 81;
	            values[valuesById[82] = "VMSTAT_COMPACT_STALL"] = 82;
	            values[valuesById[83] = "VMSTAT_COMPACT_FAIL"] = 83;
	            values[valuesById[84] = "VMSTAT_COMPACT_SUCCESS"] = 84;
	            values[valuesById[85] = "VMSTAT_COMPACT_DAEMON_WAKE"] = 85;
	            values[valuesById[86] = "VMSTAT_UNEVICTABLE_PGS_CULLED"] = 86;
	            values[valuesById[87] = "VMSTAT_UNEVICTABLE_PGS_SCANNED"] = 87;
	            values[valuesById[88] = "VMSTAT_UNEVICTABLE_PGS_RESCUED"] = 88;
	            values[valuesById[89] = "VMSTAT_UNEVICTABLE_PGS_MLOCKED"] = 89;
	            values[valuesById[90] = "VMSTAT_UNEVICTABLE_PGS_MUNLOCKED"] = 90;
	            values[valuesById[91] = "VMSTAT_UNEVICTABLE_PGS_CLEARED"] = 91;
	            values[valuesById[92] = "VMSTAT_UNEVICTABLE_PGS_STRANDED"] = 92;
	            values[valuesById[93] = "VMSTAT_NR_ZSPAGES"] = 93;
	            values[valuesById[94] = "VMSTAT_NR_ION_HEAP"] = 94;
	            values[valuesById[95] = "VMSTAT_NR_GPU_HEAP"] = 95;
	            values[valuesById[96] = "VMSTAT_ALLOCSTALL_DMA"] = 96;
	            values[valuesById[97] = "VMSTAT_ALLOCSTALL_MOVABLE"] = 97;
	            values[valuesById[98] = "VMSTAT_ALLOCSTALL_NORMAL"] = 98;
	            values[valuesById[99] = "VMSTAT_COMPACT_DAEMON_FREE_SCANNED"] = 99;
	            values[valuesById[100] = "VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED"] = 100;
	            values[valuesById[101] = "VMSTAT_NR_FASTRPC"] = 101;
	            values[valuesById[102] = "VMSTAT_NR_INDIRECTLY_RECLAIMABLE"] = 102;
	            values[valuesById[103] = "VMSTAT_NR_ION_HEAP_POOL"] = 103;
	            values[valuesById[104] = "VMSTAT_NR_KERNEL_MISC_RECLAIMABLE"] = 104;
	            values[valuesById[105] = "VMSTAT_NR_SHADOW_CALL_STACK_BYTES"] = 105;
	            values[valuesById[106] = "VMSTAT_NR_SHMEM_HUGEPAGES"] = 106;
	            values[valuesById[107] = "VMSTAT_NR_SHMEM_PMDMAPPED"] = 107;
	            values[valuesById[108] = "VMSTAT_NR_UNRECLAIMABLE_PAGES"] = 108;
	            values[valuesById[109] = "VMSTAT_NR_ZONE_ACTIVE_ANON"] = 109;
	            values[valuesById[110] = "VMSTAT_NR_ZONE_ACTIVE_FILE"] = 110;
	            values[valuesById[111] = "VMSTAT_NR_ZONE_INACTIVE_ANON"] = 111;
	            values[valuesById[112] = "VMSTAT_NR_ZONE_INACTIVE_FILE"] = 112;
	            values[valuesById[113] = "VMSTAT_NR_ZONE_UNEVICTABLE"] = 113;
	            values[valuesById[114] = "VMSTAT_NR_ZONE_WRITE_PENDING"] = 114;
	            values[valuesById[115] = "VMSTAT_OOM_KILL"] = 115;
	            values[valuesById[116] = "VMSTAT_PGLAZYFREE"] = 116;
	            values[valuesById[117] = "VMSTAT_PGLAZYFREED"] = 117;
	            values[valuesById[118] = "VMSTAT_PGREFILL"] = 118;
	            values[valuesById[119] = "VMSTAT_PGSCAN_DIRECT"] = 119;
	            values[valuesById[120] = "VMSTAT_PGSCAN_KSWAPD"] = 120;
	            values[valuesById[121] = "VMSTAT_PGSKIP_DMA"] = 121;
	            values[valuesById[122] = "VMSTAT_PGSKIP_MOVABLE"] = 122;
	            values[valuesById[123] = "VMSTAT_PGSKIP_NORMAL"] = 123;
	            values[valuesById[124] = "VMSTAT_PGSTEAL_DIRECT"] = 124;
	            values[valuesById[125] = "VMSTAT_PGSTEAL_KSWAPD"] = 125;
	            values[valuesById[126] = "VMSTAT_SWAP_RA"] = 126;
	            values[valuesById[127] = "VMSTAT_SWAP_RA_HIT"] = 127;
	            values[valuesById[128] = "VMSTAT_WORKINGSET_RESTORE"] = 128;
	            values[valuesById[129] = "VMSTAT_ALLOCSTALL_DEVICE"] = 129;
	            values[valuesById[130] = "VMSTAT_ALLOCSTALL_DMA32"] = 130;
	            values[valuesById[131] = "VMSTAT_BALLOON_DEFLATE"] = 131;
	            values[valuesById[132] = "VMSTAT_BALLOON_INFLATE"] = 132;
	            values[valuesById[133] = "VMSTAT_BALLOON_MIGRATE"] = 133;
	            values[valuesById[134] = "VMSTAT_CMA_ALLOC_FAIL"] = 134;
	            values[valuesById[135] = "VMSTAT_CMA_ALLOC_SUCCESS"] = 135;
	            values[valuesById[136] = "VMSTAT_NR_FILE_HUGEPAGES"] = 136;
	            values[valuesById[137] = "VMSTAT_NR_FILE_PMDMAPPED"] = 137;
	            values[valuesById[138] = "VMSTAT_NR_FOLL_PIN_ACQUIRED"] = 138;
	            values[valuesById[139] = "VMSTAT_NR_FOLL_PIN_RELEASED"] = 139;
	            values[valuesById[140] = "VMSTAT_NR_SEC_PAGE_TABLE_PAGES"] = 140;
	            values[valuesById[141] = "VMSTAT_NR_SHADOW_CALL_STACK"] = 141;
	            values[valuesById[142] = "VMSTAT_NR_SWAPCACHED"] = 142;
	            values[valuesById[143] = "VMSTAT_NR_THROTTLED_WRITTEN"] = 143;
	            values[valuesById[144] = "VMSTAT_PGALLOC_DEVICE"] = 144;
	            values[valuesById[145] = "VMSTAT_PGALLOC_DMA32"] = 145;
	            values[valuesById[146] = "VMSTAT_PGDEMOTE_DIRECT"] = 146;
	            values[valuesById[147] = "VMSTAT_PGDEMOTE_KSWAPD"] = 147;
	            values[valuesById[148] = "VMSTAT_PGREUSE"] = 148;
	            values[valuesById[149] = "VMSTAT_PGSCAN_ANON"] = 149;
	            values[valuesById[150] = "VMSTAT_PGSCAN_FILE"] = 150;
	            values[valuesById[151] = "VMSTAT_PGSKIP_DEVICE"] = 151;
	            values[valuesById[152] = "VMSTAT_PGSKIP_DMA32"] = 152;
	            values[valuesById[153] = "VMSTAT_PGSTEAL_ANON"] = 153;
	            values[valuesById[154] = "VMSTAT_PGSTEAL_FILE"] = 154;
	            values[valuesById[155] = "VMSTAT_THP_COLLAPSE_ALLOC"] = 155;
	            values[valuesById[156] = "VMSTAT_THP_COLLAPSE_ALLOC_FAILED"] = 156;
	            values[valuesById[157] = "VMSTAT_THP_DEFERRED_SPLIT_PAGE"] = 157;
	            values[valuesById[158] = "VMSTAT_THP_FAULT_ALLOC"] = 158;
	            values[valuesById[159] = "VMSTAT_THP_FAULT_FALLBACK"] = 159;
	            values[valuesById[160] = "VMSTAT_THP_FAULT_FALLBACK_CHARGE"] = 160;
	            values[valuesById[161] = "VMSTAT_THP_FILE_ALLOC"] = 161;
	            values[valuesById[162] = "VMSTAT_THP_FILE_FALLBACK"] = 162;
	            values[valuesById[163] = "VMSTAT_THP_FILE_FALLBACK_CHARGE"] = 163;
	            values[valuesById[164] = "VMSTAT_THP_FILE_MAPPED"] = 164;
	            values[valuesById[165] = "VMSTAT_THP_MIGRATION_FAIL"] = 165;
	            values[valuesById[166] = "VMSTAT_THP_MIGRATION_SPLIT"] = 166;
	            values[valuesById[167] = "VMSTAT_THP_MIGRATION_SUCCESS"] = 167;
	            values[valuesById[168] = "VMSTAT_THP_SCAN_EXCEED_NONE_PTE"] = 168;
	            values[valuesById[169] = "VMSTAT_THP_SCAN_EXCEED_SHARE_PTE"] = 169;
	            values[valuesById[170] = "VMSTAT_THP_SCAN_EXCEED_SWAP_PTE"] = 170;
	            values[valuesById[171] = "VMSTAT_THP_SPLIT_PAGE"] = 171;
	            values[valuesById[172] = "VMSTAT_THP_SPLIT_PAGE_FAILED"] = 172;
	            values[valuesById[173] = "VMSTAT_THP_SPLIT_PMD"] = 173;
	            values[valuesById[174] = "VMSTAT_THP_SWPOUT"] = 174;
	            values[valuesById[175] = "VMSTAT_THP_SWPOUT_FALLBACK"] = 175;
	            values[valuesById[176] = "VMSTAT_THP_ZERO_PAGE_ALLOC"] = 176;
	            values[valuesById[177] = "VMSTAT_THP_ZERO_PAGE_ALLOC_FAILED"] = 177;
	            values[valuesById[178] = "VMSTAT_VMA_LOCK_ABORT"] = 178;
	            values[valuesById[179] = "VMSTAT_VMA_LOCK_MISS"] = 179;
	            values[valuesById[180] = "VMSTAT_VMA_LOCK_RETRY"] = 180;
	            values[valuesById[181] = "VMSTAT_VMA_LOCK_SUCCESS"] = 181;
	            values[valuesById[182] = "VMSTAT_WORKINGSET_ACTIVATE_ANON"] = 182;
	            values[valuesById[183] = "VMSTAT_WORKINGSET_ACTIVATE_FILE"] = 183;
	            values[valuesById[184] = "VMSTAT_WORKINGSET_NODES"] = 184;
	            values[valuesById[185] = "VMSTAT_WORKINGSET_REFAULT_ANON"] = 185;
	            values[valuesById[186] = "VMSTAT_WORKINGSET_REFAULT_FILE"] = 186;
	            values[valuesById[187] = "VMSTAT_WORKINGSET_RESTORE_ANON"] = 187;
	            values[valuesById[188] = "VMSTAT_WORKINGSET_RESTORE_FILE"] = 188;
	            return values;
	        })();

	        protos.TestConfig = (function() {

	            /**
	             * Properties of a TestConfig.
	             * @memberof perfetto.protos
	             * @interface ITestConfig
	             * @property {number|null} [messageCount] TestConfig messageCount
	             * @property {number|null} [maxMessagesPerSecond] TestConfig maxMessagesPerSecond
	             * @property {number|null} [seed] TestConfig seed
	             * @property {number|null} [messageSize] TestConfig messageSize
	             * @property {boolean|null} [sendBatchOnRegister] TestConfig sendBatchOnRegister
	             * @property {perfetto.protos.TestConfig.IDummyFields|null} [dummyFields] TestConfig dummyFields
	             */

	            /**
	             * Constructs a new TestConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TestConfig.
	             * @implements ITestConfig
	             * @constructor
	             * @param {perfetto.protos.ITestConfig=} [p] Properties to set
	             */
	            function TestConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TestConfig messageCount.
	             * @member {number} messageCount
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             */
	            TestConfig.prototype.messageCount = 0;

	            /**
	             * TestConfig maxMessagesPerSecond.
	             * @member {number} maxMessagesPerSecond
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             */
	            TestConfig.prototype.maxMessagesPerSecond = 0;

	            /**
	             * TestConfig seed.
	             * @member {number} seed
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             */
	            TestConfig.prototype.seed = 0;

	            /**
	             * TestConfig messageSize.
	             * @member {number} messageSize
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             */
	            TestConfig.prototype.messageSize = 0;

	            /**
	             * TestConfig sendBatchOnRegister.
	             * @member {boolean} sendBatchOnRegister
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             */
	            TestConfig.prototype.sendBatchOnRegister = false;

	            /**
	             * TestConfig dummyFields.
	             * @member {perfetto.protos.TestConfig.IDummyFields|null|undefined} dummyFields
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             */
	            TestConfig.prototype.dummyFields = null;

	            /**
	             * Creates a new TestConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TestConfig
	             * @static
	             * @param {perfetto.protos.ITestConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.TestConfig} TestConfig instance
	             */
	            TestConfig.create = function create(properties) {
	                return new TestConfig(properties);
	            };

	            /**
	             * Encodes the specified TestConfig message. Does not implicitly {@link perfetto.protos.TestConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TestConfig
	             * @static
	             * @param {perfetto.protos.ITestConfig} m TestConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TestConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.messageCount != null && Object.hasOwnProperty.call(m, "messageCount"))
	                    w.uint32(8).uint32(m.messageCount);
	                if (m.maxMessagesPerSecond != null && Object.hasOwnProperty.call(m, "maxMessagesPerSecond"))
	                    w.uint32(16).uint32(m.maxMessagesPerSecond);
	                if (m.seed != null && Object.hasOwnProperty.call(m, "seed"))
	                    w.uint32(24).uint32(m.seed);
	                if (m.messageSize != null && Object.hasOwnProperty.call(m, "messageSize"))
	                    w.uint32(32).uint32(m.messageSize);
	                if (m.sendBatchOnRegister != null && Object.hasOwnProperty.call(m, "sendBatchOnRegister"))
	                    w.uint32(40).bool(m.sendBatchOnRegister);
	                if (m.dummyFields != null && Object.hasOwnProperty.call(m, "dummyFields"))
	                    $root.perfetto.protos.TestConfig.DummyFields.encode(m.dummyFields, w.uint32(50).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a TestConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TestConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TestConfig} TestConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TestConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TestConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.messageCount = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            m.maxMessagesPerSecond = r.uint32();
	                            break;
	                        }
	                    case 3: {
	                            m.seed = r.uint32();
	                            break;
	                        }
	                    case 4: {
	                            m.messageSize = r.uint32();
	                            break;
	                        }
	                    case 5: {
	                            m.sendBatchOnRegister = r.bool();
	                            break;
	                        }
	                    case 6: {
	                            m.dummyFields = $root.perfetto.protos.TestConfig.DummyFields.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TestConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TestConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TestConfig} TestConfig
	             */
	            TestConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TestConfig)
	                    return d;
	                var m = new $root.perfetto.protos.TestConfig();
	                if (d.messageCount != null) {
	                    m.messageCount = d.messageCount >>> 0;
	                }
	                if (d.maxMessagesPerSecond != null) {
	                    m.maxMessagesPerSecond = d.maxMessagesPerSecond >>> 0;
	                }
	                if (d.seed != null) {
	                    m.seed = d.seed >>> 0;
	                }
	                if (d.messageSize != null) {
	                    m.messageSize = d.messageSize >>> 0;
	                }
	                if (d.sendBatchOnRegister != null) {
	                    m.sendBatchOnRegister = Boolean(d.sendBatchOnRegister);
	                }
	                if (d.dummyFields != null) {
	                    if (typeof d.dummyFields !== "object")
	                        throw TypeError(".perfetto.protos.TestConfig.dummyFields: object expected");
	                    m.dummyFields = $root.perfetto.protos.TestConfig.DummyFields.fromObject(d.dummyFields);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TestConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TestConfig
	             * @static
	             * @param {perfetto.protos.TestConfig} m TestConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TestConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.messageCount = 0;
	                    d.maxMessagesPerSecond = 0;
	                    d.seed = 0;
	                    d.messageSize = 0;
	                    d.sendBatchOnRegister = false;
	                    d.dummyFields = null;
	                }
	                if (m.messageCount != null && m.hasOwnProperty("messageCount")) {
	                    d.messageCount = m.messageCount;
	                }
	                if (m.maxMessagesPerSecond != null && m.hasOwnProperty("maxMessagesPerSecond")) {
	                    d.maxMessagesPerSecond = m.maxMessagesPerSecond;
	                }
	                if (m.seed != null && m.hasOwnProperty("seed")) {
	                    d.seed = m.seed;
	                }
	                if (m.messageSize != null && m.hasOwnProperty("messageSize")) {
	                    d.messageSize = m.messageSize;
	                }
	                if (m.sendBatchOnRegister != null && m.hasOwnProperty("sendBatchOnRegister")) {
	                    d.sendBatchOnRegister = m.sendBatchOnRegister;
	                }
	                if (m.dummyFields != null && m.hasOwnProperty("dummyFields")) {
	                    d.dummyFields = $root.perfetto.protos.TestConfig.DummyFields.toObject(m.dummyFields, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this TestConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TestConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TestConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TestConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TestConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TestConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TestConfig";
	            };

	            TestConfig.DummyFields = (function() {

	                /**
	                 * Properties of a DummyFields.
	                 * @memberof perfetto.protos.TestConfig
	                 * @interface IDummyFields
	                 * @property {number|null} [fieldUint32] DummyFields fieldUint32
	                 * @property {number|null} [fieldInt32] DummyFields fieldInt32
	                 * @property {number|null} [fieldUint64] DummyFields fieldUint64
	                 * @property {number|null} [fieldInt64] DummyFields fieldInt64
	                 * @property {number|null} [fieldFixed64] DummyFields fieldFixed64
	                 * @property {number|null} [fieldSfixed64] DummyFields fieldSfixed64
	                 * @property {number|null} [fieldFixed32] DummyFields fieldFixed32
	                 * @property {number|null} [fieldSfixed32] DummyFields fieldSfixed32
	                 * @property {number|null} [fieldDouble] DummyFields fieldDouble
	                 * @property {number|null} [fieldFloat] DummyFields fieldFloat
	                 * @property {number|null} [fieldSint64] DummyFields fieldSint64
	                 * @property {number|null} [fieldSint32] DummyFields fieldSint32
	                 * @property {string|null} [fieldString] DummyFields fieldString
	                 * @property {Uint8Array|null} [fieldBytes] DummyFields fieldBytes
	                 */

	                /**
	                 * Constructs a new DummyFields.
	                 * @memberof perfetto.protos.TestConfig
	                 * @classdesc Represents a DummyFields.
	                 * @implements IDummyFields
	                 * @constructor
	                 * @param {perfetto.protos.TestConfig.IDummyFields=} [p] Properties to set
	                 */
	                function DummyFields(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * DummyFields fieldUint32.
	                 * @member {number} fieldUint32
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldUint32 = 0;

	                /**
	                 * DummyFields fieldInt32.
	                 * @member {number} fieldInt32
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldInt32 = 0;

	                /**
	                 * DummyFields fieldUint64.
	                 * @member {number} fieldUint64
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldUint64 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * DummyFields fieldInt64.
	                 * @member {number} fieldInt64
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldInt64 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * DummyFields fieldFixed64.
	                 * @member {number} fieldFixed64
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldFixed64 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * DummyFields fieldSfixed64.
	                 * @member {number} fieldSfixed64
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldSfixed64 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * DummyFields fieldFixed32.
	                 * @member {number} fieldFixed32
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldFixed32 = 0;

	                /**
	                 * DummyFields fieldSfixed32.
	                 * @member {number} fieldSfixed32
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldSfixed32 = 0;

	                /**
	                 * DummyFields fieldDouble.
	                 * @member {number} fieldDouble
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldDouble = 0;

	                /**
	                 * DummyFields fieldFloat.
	                 * @member {number} fieldFloat
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldFloat = 0;

	                /**
	                 * DummyFields fieldSint64.
	                 * @member {number} fieldSint64
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldSint64 = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	                /**
	                 * DummyFields fieldSint32.
	                 * @member {number} fieldSint32
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldSint32 = 0;

	                /**
	                 * DummyFields fieldString.
	                 * @member {string} fieldString
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldString = "";

	                /**
	                 * DummyFields fieldBytes.
	                 * @member {Uint8Array} fieldBytes
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 */
	                DummyFields.prototype.fieldBytes = $util.newBuffer([]);

	                /**
	                 * Creates a new DummyFields instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @static
	                 * @param {perfetto.protos.TestConfig.IDummyFields=} [properties] Properties to set
	                 * @returns {perfetto.protos.TestConfig.DummyFields} DummyFields instance
	                 */
	                DummyFields.create = function create(properties) {
	                    return new DummyFields(properties);
	                };

	                /**
	                 * Encodes the specified DummyFields message. Does not implicitly {@link perfetto.protos.TestConfig.DummyFields.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @static
	                 * @param {perfetto.protos.TestConfig.IDummyFields} m DummyFields message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                DummyFields.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.fieldUint32 != null && Object.hasOwnProperty.call(m, "fieldUint32"))
	                        w.uint32(8).uint32(m.fieldUint32);
	                    if (m.fieldInt32 != null && Object.hasOwnProperty.call(m, "fieldInt32"))
	                        w.uint32(16).int32(m.fieldInt32);
	                    if (m.fieldUint64 != null && Object.hasOwnProperty.call(m, "fieldUint64"))
	                        w.uint32(24).uint64(m.fieldUint64);
	                    if (m.fieldInt64 != null && Object.hasOwnProperty.call(m, "fieldInt64"))
	                        w.uint32(32).int64(m.fieldInt64);
	                    if (m.fieldFixed64 != null && Object.hasOwnProperty.call(m, "fieldFixed64"))
	                        w.uint32(41).fixed64(m.fieldFixed64);
	                    if (m.fieldSfixed64 != null && Object.hasOwnProperty.call(m, "fieldSfixed64"))
	                        w.uint32(49).sfixed64(m.fieldSfixed64);
	                    if (m.fieldFixed32 != null && Object.hasOwnProperty.call(m, "fieldFixed32"))
	                        w.uint32(61).fixed32(m.fieldFixed32);
	                    if (m.fieldSfixed32 != null && Object.hasOwnProperty.call(m, "fieldSfixed32"))
	                        w.uint32(69).sfixed32(m.fieldSfixed32);
	                    if (m.fieldDouble != null && Object.hasOwnProperty.call(m, "fieldDouble"))
	                        w.uint32(73).double(m.fieldDouble);
	                    if (m.fieldFloat != null && Object.hasOwnProperty.call(m, "fieldFloat"))
	                        w.uint32(85).float(m.fieldFloat);
	                    if (m.fieldSint64 != null && Object.hasOwnProperty.call(m, "fieldSint64"))
	                        w.uint32(88).sint64(m.fieldSint64);
	                    if (m.fieldSint32 != null && Object.hasOwnProperty.call(m, "fieldSint32"))
	                        w.uint32(96).sint32(m.fieldSint32);
	                    if (m.fieldString != null && Object.hasOwnProperty.call(m, "fieldString"))
	                        w.uint32(106).string(m.fieldString);
	                    if (m.fieldBytes != null && Object.hasOwnProperty.call(m, "fieldBytes"))
	                        w.uint32(114).bytes(m.fieldBytes);
	                    return w;
	                };

	                /**
	                 * Decodes a DummyFields message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.TestConfig.DummyFields} DummyFields
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                DummyFields.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TestConfig.DummyFields();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.fieldUint32 = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.fieldInt32 = r.int32();
	                                break;
	                            }
	                        case 3: {
	                                m.fieldUint64 = r.uint64();
	                                break;
	                            }
	                        case 4: {
	                                m.fieldInt64 = r.int64();
	                                break;
	                            }
	                        case 5: {
	                                m.fieldFixed64 = r.fixed64();
	                                break;
	                            }
	                        case 6: {
	                                m.fieldSfixed64 = r.sfixed64();
	                                break;
	                            }
	                        case 7: {
	                                m.fieldFixed32 = r.fixed32();
	                                break;
	                            }
	                        case 8: {
	                                m.fieldSfixed32 = r.sfixed32();
	                                break;
	                            }
	                        case 9: {
	                                m.fieldDouble = r.double();
	                                break;
	                            }
	                        case 10: {
	                                m.fieldFloat = r.float();
	                                break;
	                            }
	                        case 11: {
	                                m.fieldSint64 = r.sint64();
	                                break;
	                            }
	                        case 12: {
	                                m.fieldSint32 = r.sint32();
	                                break;
	                            }
	                        case 13: {
	                                m.fieldString = r.string();
	                                break;
	                            }
	                        case 14: {
	                                m.fieldBytes = r.bytes();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a DummyFields message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.TestConfig.DummyFields} DummyFields
	                 */
	                DummyFields.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.TestConfig.DummyFields)
	                        return d;
	                    var m = new $root.perfetto.protos.TestConfig.DummyFields();
	                    if (d.fieldUint32 != null) {
	                        m.fieldUint32 = d.fieldUint32 >>> 0;
	                    }
	                    if (d.fieldInt32 != null) {
	                        m.fieldInt32 = d.fieldInt32 | 0;
	                    }
	                    if (d.fieldUint64 != null) {
	                        if ($util.Long)
	                            (m.fieldUint64 = $util.Long.fromValue(d.fieldUint64)).unsigned = true;
	                        else if (typeof d.fieldUint64 === "string")
	                            m.fieldUint64 = parseInt(d.fieldUint64, 10);
	                        else if (typeof d.fieldUint64 === "number")
	                            m.fieldUint64 = d.fieldUint64;
	                        else if (typeof d.fieldUint64 === "object")
	                            m.fieldUint64 = new $util.LongBits(d.fieldUint64.low >>> 0, d.fieldUint64.high >>> 0).toNumber(true);
	                    }
	                    if (d.fieldInt64 != null) {
	                        if ($util.Long)
	                            (m.fieldInt64 = $util.Long.fromValue(d.fieldInt64)).unsigned = false;
	                        else if (typeof d.fieldInt64 === "string")
	                            m.fieldInt64 = parseInt(d.fieldInt64, 10);
	                        else if (typeof d.fieldInt64 === "number")
	                            m.fieldInt64 = d.fieldInt64;
	                        else if (typeof d.fieldInt64 === "object")
	                            m.fieldInt64 = new $util.LongBits(d.fieldInt64.low >>> 0, d.fieldInt64.high >>> 0).toNumber();
	                    }
	                    if (d.fieldFixed64 != null) {
	                        if ($util.Long)
	                            (m.fieldFixed64 = $util.Long.fromValue(d.fieldFixed64)).unsigned = false;
	                        else if (typeof d.fieldFixed64 === "string")
	                            m.fieldFixed64 = parseInt(d.fieldFixed64, 10);
	                        else if (typeof d.fieldFixed64 === "number")
	                            m.fieldFixed64 = d.fieldFixed64;
	                        else if (typeof d.fieldFixed64 === "object")
	                            m.fieldFixed64 = new $util.LongBits(d.fieldFixed64.low >>> 0, d.fieldFixed64.high >>> 0).toNumber();
	                    }
	                    if (d.fieldSfixed64 != null) {
	                        if ($util.Long)
	                            (m.fieldSfixed64 = $util.Long.fromValue(d.fieldSfixed64)).unsigned = false;
	                        else if (typeof d.fieldSfixed64 === "string")
	                            m.fieldSfixed64 = parseInt(d.fieldSfixed64, 10);
	                        else if (typeof d.fieldSfixed64 === "number")
	                            m.fieldSfixed64 = d.fieldSfixed64;
	                        else if (typeof d.fieldSfixed64 === "object")
	                            m.fieldSfixed64 = new $util.LongBits(d.fieldSfixed64.low >>> 0, d.fieldSfixed64.high >>> 0).toNumber();
	                    }
	                    if (d.fieldFixed32 != null) {
	                        m.fieldFixed32 = d.fieldFixed32 >>> 0;
	                    }
	                    if (d.fieldSfixed32 != null) {
	                        m.fieldSfixed32 = d.fieldSfixed32 | 0;
	                    }
	                    if (d.fieldDouble != null) {
	                        m.fieldDouble = Number(d.fieldDouble);
	                    }
	                    if (d.fieldFloat != null) {
	                        m.fieldFloat = Number(d.fieldFloat);
	                    }
	                    if (d.fieldSint64 != null) {
	                        if ($util.Long)
	                            (m.fieldSint64 = $util.Long.fromValue(d.fieldSint64)).unsigned = false;
	                        else if (typeof d.fieldSint64 === "string")
	                            m.fieldSint64 = parseInt(d.fieldSint64, 10);
	                        else if (typeof d.fieldSint64 === "number")
	                            m.fieldSint64 = d.fieldSint64;
	                        else if (typeof d.fieldSint64 === "object")
	                            m.fieldSint64 = new $util.LongBits(d.fieldSint64.low >>> 0, d.fieldSint64.high >>> 0).toNumber();
	                    }
	                    if (d.fieldSint32 != null) {
	                        m.fieldSint32 = d.fieldSint32 | 0;
	                    }
	                    if (d.fieldString != null) {
	                        m.fieldString = String(d.fieldString);
	                    }
	                    if (d.fieldBytes != null) {
	                        if (typeof d.fieldBytes === "string")
	                            $util.base64.decode(d.fieldBytes, m.fieldBytes = $util.newBuffer($util.base64.length(d.fieldBytes)), 0);
	                        else if (d.fieldBytes.length >= 0)
	                            m.fieldBytes = d.fieldBytes;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a DummyFields message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @static
	                 * @param {perfetto.protos.TestConfig.DummyFields} m DummyFields
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                DummyFields.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.fieldUint32 = 0;
	                        d.fieldInt32 = 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.fieldUint64 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.fieldUint64 = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.fieldInt64 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.fieldInt64 = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.fieldFixed64 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.fieldFixed64 = o.longs === String ? "0" : 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.fieldSfixed64 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.fieldSfixed64 = o.longs === String ? "0" : 0;
	                        d.fieldFixed32 = 0;
	                        d.fieldSfixed32 = 0;
	                        d.fieldDouble = 0;
	                        d.fieldFloat = 0;
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, false);
	                            d.fieldSint64 = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.fieldSint64 = o.longs === String ? "0" : 0;
	                        d.fieldSint32 = 0;
	                        d.fieldString = "";
	                        if (o.bytes === String)
	                            d.fieldBytes = "";
	                        else {
	                            d.fieldBytes = [];
	                            if (o.bytes !== Array)
	                                d.fieldBytes = $util.newBuffer(d.fieldBytes);
	                        }
	                    }
	                    if (m.fieldUint32 != null && m.hasOwnProperty("fieldUint32")) {
	                        d.fieldUint32 = m.fieldUint32;
	                    }
	                    if (m.fieldInt32 != null && m.hasOwnProperty("fieldInt32")) {
	                        d.fieldInt32 = m.fieldInt32;
	                    }
	                    if (m.fieldUint64 != null && m.hasOwnProperty("fieldUint64")) {
	                        if (typeof m.fieldUint64 === "number")
	                            d.fieldUint64 = o.longs === String ? String(m.fieldUint64) : m.fieldUint64;
	                        else
	                            d.fieldUint64 = o.longs === String ? $util.Long.prototype.toString.call(m.fieldUint64) : o.longs === Number ? new $util.LongBits(m.fieldUint64.low >>> 0, m.fieldUint64.high >>> 0).toNumber(true) : m.fieldUint64;
	                    }
	                    if (m.fieldInt64 != null && m.hasOwnProperty("fieldInt64")) {
	                        if (typeof m.fieldInt64 === "number")
	                            d.fieldInt64 = o.longs === String ? String(m.fieldInt64) : m.fieldInt64;
	                        else
	                            d.fieldInt64 = o.longs === String ? $util.Long.prototype.toString.call(m.fieldInt64) : o.longs === Number ? new $util.LongBits(m.fieldInt64.low >>> 0, m.fieldInt64.high >>> 0).toNumber() : m.fieldInt64;
	                    }
	                    if (m.fieldFixed64 != null && m.hasOwnProperty("fieldFixed64")) {
	                        if (typeof m.fieldFixed64 === "number")
	                            d.fieldFixed64 = o.longs === String ? String(m.fieldFixed64) : m.fieldFixed64;
	                        else
	                            d.fieldFixed64 = o.longs === String ? $util.Long.prototype.toString.call(m.fieldFixed64) : o.longs === Number ? new $util.LongBits(m.fieldFixed64.low >>> 0, m.fieldFixed64.high >>> 0).toNumber() : m.fieldFixed64;
	                    }
	                    if (m.fieldSfixed64 != null && m.hasOwnProperty("fieldSfixed64")) {
	                        if (typeof m.fieldSfixed64 === "number")
	                            d.fieldSfixed64 = o.longs === String ? String(m.fieldSfixed64) : m.fieldSfixed64;
	                        else
	                            d.fieldSfixed64 = o.longs === String ? $util.Long.prototype.toString.call(m.fieldSfixed64) : o.longs === Number ? new $util.LongBits(m.fieldSfixed64.low >>> 0, m.fieldSfixed64.high >>> 0).toNumber() : m.fieldSfixed64;
	                    }
	                    if (m.fieldFixed32 != null && m.hasOwnProperty("fieldFixed32")) {
	                        d.fieldFixed32 = m.fieldFixed32;
	                    }
	                    if (m.fieldSfixed32 != null && m.hasOwnProperty("fieldSfixed32")) {
	                        d.fieldSfixed32 = m.fieldSfixed32;
	                    }
	                    if (m.fieldDouble != null && m.hasOwnProperty("fieldDouble")) {
	                        d.fieldDouble = o.json && !isFinite(m.fieldDouble) ? String(m.fieldDouble) : m.fieldDouble;
	                    }
	                    if (m.fieldFloat != null && m.hasOwnProperty("fieldFloat")) {
	                        d.fieldFloat = o.json && !isFinite(m.fieldFloat) ? String(m.fieldFloat) : m.fieldFloat;
	                    }
	                    if (m.fieldSint64 != null && m.hasOwnProperty("fieldSint64")) {
	                        if (typeof m.fieldSint64 === "number")
	                            d.fieldSint64 = o.longs === String ? String(m.fieldSint64) : m.fieldSint64;
	                        else
	                            d.fieldSint64 = o.longs === String ? $util.Long.prototype.toString.call(m.fieldSint64) : o.longs === Number ? new $util.LongBits(m.fieldSint64.low >>> 0, m.fieldSint64.high >>> 0).toNumber() : m.fieldSint64;
	                    }
	                    if (m.fieldSint32 != null && m.hasOwnProperty("fieldSint32")) {
	                        d.fieldSint32 = m.fieldSint32;
	                    }
	                    if (m.fieldString != null && m.hasOwnProperty("fieldString")) {
	                        d.fieldString = m.fieldString;
	                    }
	                    if (m.fieldBytes != null && m.hasOwnProperty("fieldBytes")) {
	                        d.fieldBytes = o.bytes === String ? $util.base64.encode(m.fieldBytes, 0, m.fieldBytes.length) : o.bytes === Array ? Array.prototype.slice.call(m.fieldBytes) : m.fieldBytes;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this DummyFields to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                DummyFields.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for DummyFields
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.TestConfig.DummyFields
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                DummyFields.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.TestConfig.DummyFields";
	                };

	                return DummyFields;
	            })();

	            return TestConfig;
	        })();

	        protos.TrackEventConfig = (function() {

	            /**
	             * Properties of a TrackEventConfig.
	             * @memberof perfetto.protos
	             * @interface ITrackEventConfig
	             * @property {Array.<string>|null} [disabledCategories] TrackEventConfig disabledCategories
	             * @property {Array.<string>|null} [enabledCategories] TrackEventConfig enabledCategories
	             * @property {Array.<string>|null} [disabledTags] TrackEventConfig disabledTags
	             * @property {Array.<string>|null} [enabledTags] TrackEventConfig enabledTags
	             * @property {boolean|null} [disableIncrementalTimestamps] TrackEventConfig disableIncrementalTimestamps
	             * @property {number|null} [timestampUnitMultiplier] TrackEventConfig timestampUnitMultiplier
	             * @property {boolean|null} [filterDebugAnnotations] TrackEventConfig filterDebugAnnotations
	             * @property {boolean|null} [enableThreadTimeSampling] TrackEventConfig enableThreadTimeSampling
	             * @property {boolean|null} [filterDynamicEventNames] TrackEventConfig filterDynamicEventNames
	             */

	            /**
	             * Constructs a new TrackEventConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TrackEventConfig.
	             * @implements ITrackEventConfig
	             * @constructor
	             * @param {perfetto.protos.ITrackEventConfig=} [p] Properties to set
	             */
	            function TrackEventConfig(p) {
	                this.disabledCategories = [];
	                this.enabledCategories = [];
	                this.disabledTags = [];
	                this.enabledTags = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TrackEventConfig disabledCategories.
	             * @member {Array.<string>} disabledCategories
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.disabledCategories = $util.emptyArray;

	            /**
	             * TrackEventConfig enabledCategories.
	             * @member {Array.<string>} enabledCategories
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.enabledCategories = $util.emptyArray;

	            /**
	             * TrackEventConfig disabledTags.
	             * @member {Array.<string>} disabledTags
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.disabledTags = $util.emptyArray;

	            /**
	             * TrackEventConfig enabledTags.
	             * @member {Array.<string>} enabledTags
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.enabledTags = $util.emptyArray;

	            /**
	             * TrackEventConfig disableIncrementalTimestamps.
	             * @member {boolean} disableIncrementalTimestamps
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.disableIncrementalTimestamps = false;

	            /**
	             * TrackEventConfig timestampUnitMultiplier.
	             * @member {number} timestampUnitMultiplier
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.timestampUnitMultiplier = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * TrackEventConfig filterDebugAnnotations.
	             * @member {boolean} filterDebugAnnotations
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.filterDebugAnnotations = false;

	            /**
	             * TrackEventConfig enableThreadTimeSampling.
	             * @member {boolean} enableThreadTimeSampling
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.enableThreadTimeSampling = false;

	            /**
	             * TrackEventConfig filterDynamicEventNames.
	             * @member {boolean} filterDynamicEventNames
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             */
	            TrackEventConfig.prototype.filterDynamicEventNames = false;

	            /**
	             * Creates a new TrackEventConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TrackEventConfig
	             * @static
	             * @param {perfetto.protos.ITrackEventConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.TrackEventConfig} TrackEventConfig instance
	             */
	            TrackEventConfig.create = function create(properties) {
	                return new TrackEventConfig(properties);
	            };

	            /**
	             * Encodes the specified TrackEventConfig message. Does not implicitly {@link perfetto.protos.TrackEventConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TrackEventConfig
	             * @static
	             * @param {perfetto.protos.ITrackEventConfig} m TrackEventConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TrackEventConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.disabledCategories != null && m.disabledCategories.length) {
	                    for (var i = 0; i < m.disabledCategories.length; ++i)
	                        w.uint32(10).string(m.disabledCategories[i]);
	                }
	                if (m.enabledCategories != null && m.enabledCategories.length) {
	                    for (var i = 0; i < m.enabledCategories.length; ++i)
	                        w.uint32(18).string(m.enabledCategories[i]);
	                }
	                if (m.disabledTags != null && m.disabledTags.length) {
	                    for (var i = 0; i < m.disabledTags.length; ++i)
	                        w.uint32(26).string(m.disabledTags[i]);
	                }
	                if (m.enabledTags != null && m.enabledTags.length) {
	                    for (var i = 0; i < m.enabledTags.length; ++i)
	                        w.uint32(34).string(m.enabledTags[i]);
	                }
	                if (m.disableIncrementalTimestamps != null && Object.hasOwnProperty.call(m, "disableIncrementalTimestamps"))
	                    w.uint32(40).bool(m.disableIncrementalTimestamps);
	                if (m.timestampUnitMultiplier != null && Object.hasOwnProperty.call(m, "timestampUnitMultiplier"))
	                    w.uint32(48).uint64(m.timestampUnitMultiplier);
	                if (m.filterDebugAnnotations != null && Object.hasOwnProperty.call(m, "filterDebugAnnotations"))
	                    w.uint32(56).bool(m.filterDebugAnnotations);
	                if (m.enableThreadTimeSampling != null && Object.hasOwnProperty.call(m, "enableThreadTimeSampling"))
	                    w.uint32(64).bool(m.enableThreadTimeSampling);
	                if (m.filterDynamicEventNames != null && Object.hasOwnProperty.call(m, "filterDynamicEventNames"))
	                    w.uint32(72).bool(m.filterDynamicEventNames);
	                return w;
	            };

	            /**
	             * Decodes a TrackEventConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TrackEventConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TrackEventConfig} TrackEventConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TrackEventConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TrackEventConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.disabledCategories && m.disabledCategories.length))
	                                m.disabledCategories = [];
	                            m.disabledCategories.push(r.string());
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.enabledCategories && m.enabledCategories.length))
	                                m.enabledCategories = [];
	                            m.enabledCategories.push(r.string());
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.disabledTags && m.disabledTags.length))
	                                m.disabledTags = [];
	                            m.disabledTags.push(r.string());
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.enabledTags && m.enabledTags.length))
	                                m.enabledTags = [];
	                            m.enabledTags.push(r.string());
	                            break;
	                        }
	                    case 5: {
	                            m.disableIncrementalTimestamps = r.bool();
	                            break;
	                        }
	                    case 6: {
	                            m.timestampUnitMultiplier = r.uint64();
	                            break;
	                        }
	                    case 7: {
	                            m.filterDebugAnnotations = r.bool();
	                            break;
	                        }
	                    case 8: {
	                            m.enableThreadTimeSampling = r.bool();
	                            break;
	                        }
	                    case 9: {
	                            m.filterDynamicEventNames = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TrackEventConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TrackEventConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TrackEventConfig} TrackEventConfig
	             */
	            TrackEventConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TrackEventConfig)
	                    return d;
	                var m = new $root.perfetto.protos.TrackEventConfig();
	                if (d.disabledCategories) {
	                    if (!Array.isArray(d.disabledCategories))
	                        throw TypeError(".perfetto.protos.TrackEventConfig.disabledCategories: array expected");
	                    m.disabledCategories = [];
	                    for (var i = 0; i < d.disabledCategories.length; ++i) {
	                        m.disabledCategories[i] = String(d.disabledCategories[i]);
	                    }
	                }
	                if (d.enabledCategories) {
	                    if (!Array.isArray(d.enabledCategories))
	                        throw TypeError(".perfetto.protos.TrackEventConfig.enabledCategories: array expected");
	                    m.enabledCategories = [];
	                    for (var i = 0; i < d.enabledCategories.length; ++i) {
	                        m.enabledCategories[i] = String(d.enabledCategories[i]);
	                    }
	                }
	                if (d.disabledTags) {
	                    if (!Array.isArray(d.disabledTags))
	                        throw TypeError(".perfetto.protos.TrackEventConfig.disabledTags: array expected");
	                    m.disabledTags = [];
	                    for (var i = 0; i < d.disabledTags.length; ++i) {
	                        m.disabledTags[i] = String(d.disabledTags[i]);
	                    }
	                }
	                if (d.enabledTags) {
	                    if (!Array.isArray(d.enabledTags))
	                        throw TypeError(".perfetto.protos.TrackEventConfig.enabledTags: array expected");
	                    m.enabledTags = [];
	                    for (var i = 0; i < d.enabledTags.length; ++i) {
	                        m.enabledTags[i] = String(d.enabledTags[i]);
	                    }
	                }
	                if (d.disableIncrementalTimestamps != null) {
	                    m.disableIncrementalTimestamps = Boolean(d.disableIncrementalTimestamps);
	                }
	                if (d.timestampUnitMultiplier != null) {
	                    if ($util.Long)
	                        (m.timestampUnitMultiplier = $util.Long.fromValue(d.timestampUnitMultiplier)).unsigned = true;
	                    else if (typeof d.timestampUnitMultiplier === "string")
	                        m.timestampUnitMultiplier = parseInt(d.timestampUnitMultiplier, 10);
	                    else if (typeof d.timestampUnitMultiplier === "number")
	                        m.timestampUnitMultiplier = d.timestampUnitMultiplier;
	                    else if (typeof d.timestampUnitMultiplier === "object")
	                        m.timestampUnitMultiplier = new $util.LongBits(d.timestampUnitMultiplier.low >>> 0, d.timestampUnitMultiplier.high >>> 0).toNumber(true);
	                }
	                if (d.filterDebugAnnotations != null) {
	                    m.filterDebugAnnotations = Boolean(d.filterDebugAnnotations);
	                }
	                if (d.enableThreadTimeSampling != null) {
	                    m.enableThreadTimeSampling = Boolean(d.enableThreadTimeSampling);
	                }
	                if (d.filterDynamicEventNames != null) {
	                    m.filterDynamicEventNames = Boolean(d.filterDynamicEventNames);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TrackEventConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TrackEventConfig
	             * @static
	             * @param {perfetto.protos.TrackEventConfig} m TrackEventConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TrackEventConfig.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.disabledCategories = [];
	                    d.enabledCategories = [];
	                    d.disabledTags = [];
	                    d.enabledTags = [];
	                }
	                if (o.defaults) {
	                    d.disableIncrementalTimestamps = false;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.timestampUnitMultiplier = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.timestampUnitMultiplier = o.longs === String ? "0" : 0;
	                    d.filterDebugAnnotations = false;
	                    d.enableThreadTimeSampling = false;
	                    d.filterDynamicEventNames = false;
	                }
	                if (m.disabledCategories && m.disabledCategories.length) {
	                    d.disabledCategories = [];
	                    for (var j = 0; j < m.disabledCategories.length; ++j) {
	                        d.disabledCategories[j] = m.disabledCategories[j];
	                    }
	                }
	                if (m.enabledCategories && m.enabledCategories.length) {
	                    d.enabledCategories = [];
	                    for (var j = 0; j < m.enabledCategories.length; ++j) {
	                        d.enabledCategories[j] = m.enabledCategories[j];
	                    }
	                }
	                if (m.disabledTags && m.disabledTags.length) {
	                    d.disabledTags = [];
	                    for (var j = 0; j < m.disabledTags.length; ++j) {
	                        d.disabledTags[j] = m.disabledTags[j];
	                    }
	                }
	                if (m.enabledTags && m.enabledTags.length) {
	                    d.enabledTags = [];
	                    for (var j = 0; j < m.enabledTags.length; ++j) {
	                        d.enabledTags[j] = m.enabledTags[j];
	                    }
	                }
	                if (m.disableIncrementalTimestamps != null && m.hasOwnProperty("disableIncrementalTimestamps")) {
	                    d.disableIncrementalTimestamps = m.disableIncrementalTimestamps;
	                }
	                if (m.timestampUnitMultiplier != null && m.hasOwnProperty("timestampUnitMultiplier")) {
	                    if (typeof m.timestampUnitMultiplier === "number")
	                        d.timestampUnitMultiplier = o.longs === String ? String(m.timestampUnitMultiplier) : m.timestampUnitMultiplier;
	                    else
	                        d.timestampUnitMultiplier = o.longs === String ? $util.Long.prototype.toString.call(m.timestampUnitMultiplier) : o.longs === Number ? new $util.LongBits(m.timestampUnitMultiplier.low >>> 0, m.timestampUnitMultiplier.high >>> 0).toNumber(true) : m.timestampUnitMultiplier;
	                }
	                if (m.filterDebugAnnotations != null && m.hasOwnProperty("filterDebugAnnotations")) {
	                    d.filterDebugAnnotations = m.filterDebugAnnotations;
	                }
	                if (m.enableThreadTimeSampling != null && m.hasOwnProperty("enableThreadTimeSampling")) {
	                    d.enableThreadTimeSampling = m.enableThreadTimeSampling;
	                }
	                if (m.filterDynamicEventNames != null && m.hasOwnProperty("filterDynamicEventNames")) {
	                    d.filterDynamicEventNames = m.filterDynamicEventNames;
	                }
	                return d;
	            };

	            /**
	             * Converts this TrackEventConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TrackEventConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TrackEventConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TrackEventConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TrackEventConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TrackEventConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TrackEventConfig";
	            };

	            return TrackEventConfig;
	        })();

	        protos.SystemInfoConfig = (function() {

	            /**
	             * Properties of a SystemInfoConfig.
	             * @memberof perfetto.protos
	             * @interface ISystemInfoConfig
	             */

	            /**
	             * Constructs a new SystemInfoConfig.
	             * @memberof perfetto.protos
	             * @classdesc Represents a SystemInfoConfig.
	             * @implements ISystemInfoConfig
	             * @constructor
	             * @param {perfetto.protos.ISystemInfoConfig=} [p] Properties to set
	             */
	            function SystemInfoConfig(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new SystemInfoConfig instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @static
	             * @param {perfetto.protos.ISystemInfoConfig=} [properties] Properties to set
	             * @returns {perfetto.protos.SystemInfoConfig} SystemInfoConfig instance
	             */
	            SystemInfoConfig.create = function create(properties) {
	                return new SystemInfoConfig(properties);
	            };

	            /**
	             * Encodes the specified SystemInfoConfig message. Does not implicitly {@link perfetto.protos.SystemInfoConfig.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @static
	             * @param {perfetto.protos.ISystemInfoConfig} m SystemInfoConfig message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SystemInfoConfig.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a SystemInfoConfig message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.SystemInfoConfig} SystemInfoConfig
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SystemInfoConfig.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.SystemInfoConfig();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a SystemInfoConfig message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.SystemInfoConfig} SystemInfoConfig
	             */
	            SystemInfoConfig.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.SystemInfoConfig)
	                    return d;
	                return new $root.perfetto.protos.SystemInfoConfig();
	            };

	            /**
	             * Creates a plain object from a SystemInfoConfig message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @static
	             * @param {perfetto.protos.SystemInfoConfig} m SystemInfoConfig
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SystemInfoConfig.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this SystemInfoConfig to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SystemInfoConfig.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for SystemInfoConfig
	             * @function getTypeUrl
	             * @memberof perfetto.protos.SystemInfoConfig
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            SystemInfoConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.SystemInfoConfig";
	            };

	            return SystemInfoConfig;
	        })();

	        protos.IPCFrame = (function() {

	            /**
	             * Properties of a IPCFrame.
	             * @memberof perfetto.protos
	             * @interface IIPCFrame
	             * @property {number|null} [requestId] IPCFrame requestId
	             * @property {perfetto.protos.IPCFrame.IBindService|null} [msgBindService] IPCFrame msgBindService
	             * @property {perfetto.protos.IPCFrame.IBindServiceReply|null} [msgBindServiceReply] IPCFrame msgBindServiceReply
	             * @property {perfetto.protos.IPCFrame.IInvokeMethod|null} [msgInvokeMethod] IPCFrame msgInvokeMethod
	             * @property {perfetto.protos.IPCFrame.IInvokeMethodReply|null} [msgInvokeMethodReply] IPCFrame msgInvokeMethodReply
	             * @property {perfetto.protos.IPCFrame.IRequestError|null} [msgRequestError] IPCFrame msgRequestError
	             * @property {perfetto.protos.IPCFrame.ISetPeerIdentity|null} [setPeerIdentity] IPCFrame setPeerIdentity
	             * @property {Array.<Uint8Array>|null} [dataForTesting] IPCFrame dataForTesting
	             */

	            /**
	             * Constructs a new IPCFrame.
	             * @memberof perfetto.protos
	             * @classdesc Represents a IPCFrame.
	             * @implements IIPCFrame
	             * @constructor
	             * @param {perfetto.protos.IIPCFrame=} [p] Properties to set
	             */
	            function IPCFrame(p) {
	                this.dataForTesting = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * IPCFrame requestId.
	             * @member {number} requestId
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.requestId = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * IPCFrame msgBindService.
	             * @member {perfetto.protos.IPCFrame.IBindService|null|undefined} msgBindService
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.msgBindService = null;

	            /**
	             * IPCFrame msgBindServiceReply.
	             * @member {perfetto.protos.IPCFrame.IBindServiceReply|null|undefined} msgBindServiceReply
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.msgBindServiceReply = null;

	            /**
	             * IPCFrame msgInvokeMethod.
	             * @member {perfetto.protos.IPCFrame.IInvokeMethod|null|undefined} msgInvokeMethod
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.msgInvokeMethod = null;

	            /**
	             * IPCFrame msgInvokeMethodReply.
	             * @member {perfetto.protos.IPCFrame.IInvokeMethodReply|null|undefined} msgInvokeMethodReply
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.msgInvokeMethodReply = null;

	            /**
	             * IPCFrame msgRequestError.
	             * @member {perfetto.protos.IPCFrame.IRequestError|null|undefined} msgRequestError
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.msgRequestError = null;

	            /**
	             * IPCFrame setPeerIdentity.
	             * @member {perfetto.protos.IPCFrame.ISetPeerIdentity|null|undefined} setPeerIdentity
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.setPeerIdentity = null;

	            /**
	             * IPCFrame dataForTesting.
	             * @member {Array.<Uint8Array>} dataForTesting
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            IPCFrame.prototype.dataForTesting = $util.emptyArray;

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * IPCFrame msg.
	             * @member {"msgBindService"|"msgBindServiceReply"|"msgInvokeMethod"|"msgInvokeMethodReply"|"msgRequestError"|"setPeerIdentity"|undefined} msg
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             */
	            Object.defineProperty(IPCFrame.prototype, "msg", {
	                get: $util.oneOfGetter($oneOfFields = ["msgBindService", "msgBindServiceReply", "msgInvokeMethod", "msgInvokeMethodReply", "msgRequestError", "setPeerIdentity"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new IPCFrame instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.IPCFrame
	             * @static
	             * @param {perfetto.protos.IIPCFrame=} [properties] Properties to set
	             * @returns {perfetto.protos.IPCFrame} IPCFrame instance
	             */
	            IPCFrame.create = function create(properties) {
	                return new IPCFrame(properties);
	            };

	            /**
	             * Encodes the specified IPCFrame message. Does not implicitly {@link perfetto.protos.IPCFrame.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.IPCFrame
	             * @static
	             * @param {perfetto.protos.IIPCFrame} m IPCFrame message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            IPCFrame.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.dataForTesting != null && m.dataForTesting.length) {
	                    for (var i = 0; i < m.dataForTesting.length; ++i)
	                        w.uint32(10).bytes(m.dataForTesting[i]);
	                }
	                if (m.requestId != null && Object.hasOwnProperty.call(m, "requestId"))
	                    w.uint32(16).uint64(m.requestId);
	                if (m.msgBindService != null && Object.hasOwnProperty.call(m, "msgBindService"))
	                    $root.perfetto.protos.IPCFrame.BindService.encode(m.msgBindService, w.uint32(26).fork()).ldelim();
	                if (m.msgBindServiceReply != null && Object.hasOwnProperty.call(m, "msgBindServiceReply"))
	                    $root.perfetto.protos.IPCFrame.BindServiceReply.encode(m.msgBindServiceReply, w.uint32(34).fork()).ldelim();
	                if (m.msgInvokeMethod != null && Object.hasOwnProperty.call(m, "msgInvokeMethod"))
	                    $root.perfetto.protos.IPCFrame.InvokeMethod.encode(m.msgInvokeMethod, w.uint32(42).fork()).ldelim();
	                if (m.msgInvokeMethodReply != null && Object.hasOwnProperty.call(m, "msgInvokeMethodReply"))
	                    $root.perfetto.protos.IPCFrame.InvokeMethodReply.encode(m.msgInvokeMethodReply, w.uint32(50).fork()).ldelim();
	                if (m.msgRequestError != null && Object.hasOwnProperty.call(m, "msgRequestError"))
	                    $root.perfetto.protos.IPCFrame.RequestError.encode(m.msgRequestError, w.uint32(58).fork()).ldelim();
	                if (m.setPeerIdentity != null && Object.hasOwnProperty.call(m, "setPeerIdentity"))
	                    $root.perfetto.protos.IPCFrame.SetPeerIdentity.encode(m.setPeerIdentity, w.uint32(66).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a IPCFrame message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.IPCFrame
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.IPCFrame} IPCFrame
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            IPCFrame.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 2: {
	                            m.requestId = r.uint64();
	                            break;
	                        }
	                    case 3: {
	                            m.msgBindService = $root.perfetto.protos.IPCFrame.BindService.decode(r, r.uint32());
	                            break;
	                        }
	                    case 4: {
	                            m.msgBindServiceReply = $root.perfetto.protos.IPCFrame.BindServiceReply.decode(r, r.uint32());
	                            break;
	                        }
	                    case 5: {
	                            m.msgInvokeMethod = $root.perfetto.protos.IPCFrame.InvokeMethod.decode(r, r.uint32());
	                            break;
	                        }
	                    case 6: {
	                            m.msgInvokeMethodReply = $root.perfetto.protos.IPCFrame.InvokeMethodReply.decode(r, r.uint32());
	                            break;
	                        }
	                    case 7: {
	                            m.msgRequestError = $root.perfetto.protos.IPCFrame.RequestError.decode(r, r.uint32());
	                            break;
	                        }
	                    case 8: {
	                            m.setPeerIdentity = $root.perfetto.protos.IPCFrame.SetPeerIdentity.decode(r, r.uint32());
	                            break;
	                        }
	                    case 1: {
	                            if (!(m.dataForTesting && m.dataForTesting.length))
	                                m.dataForTesting = [];
	                            m.dataForTesting.push(r.bytes());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a IPCFrame message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.IPCFrame
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.IPCFrame} IPCFrame
	             */
	            IPCFrame.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.IPCFrame)
	                    return d;
	                var m = new $root.perfetto.protos.IPCFrame();
	                if (d.requestId != null) {
	                    if ($util.Long)
	                        (m.requestId = $util.Long.fromValue(d.requestId)).unsigned = true;
	                    else if (typeof d.requestId === "string")
	                        m.requestId = parseInt(d.requestId, 10);
	                    else if (typeof d.requestId === "number")
	                        m.requestId = d.requestId;
	                    else if (typeof d.requestId === "object")
	                        m.requestId = new $util.LongBits(d.requestId.low >>> 0, d.requestId.high >>> 0).toNumber(true);
	                }
	                if (d.msgBindService != null) {
	                    if (typeof d.msgBindService !== "object")
	                        throw TypeError(".perfetto.protos.IPCFrame.msgBindService: object expected");
	                    m.msgBindService = $root.perfetto.protos.IPCFrame.BindService.fromObject(d.msgBindService);
	                }
	                if (d.msgBindServiceReply != null) {
	                    if (typeof d.msgBindServiceReply !== "object")
	                        throw TypeError(".perfetto.protos.IPCFrame.msgBindServiceReply: object expected");
	                    m.msgBindServiceReply = $root.perfetto.protos.IPCFrame.BindServiceReply.fromObject(d.msgBindServiceReply);
	                }
	                if (d.msgInvokeMethod != null) {
	                    if (typeof d.msgInvokeMethod !== "object")
	                        throw TypeError(".perfetto.protos.IPCFrame.msgInvokeMethod: object expected");
	                    m.msgInvokeMethod = $root.perfetto.protos.IPCFrame.InvokeMethod.fromObject(d.msgInvokeMethod);
	                }
	                if (d.msgInvokeMethodReply != null) {
	                    if (typeof d.msgInvokeMethodReply !== "object")
	                        throw TypeError(".perfetto.protos.IPCFrame.msgInvokeMethodReply: object expected");
	                    m.msgInvokeMethodReply = $root.perfetto.protos.IPCFrame.InvokeMethodReply.fromObject(d.msgInvokeMethodReply);
	                }
	                if (d.msgRequestError != null) {
	                    if (typeof d.msgRequestError !== "object")
	                        throw TypeError(".perfetto.protos.IPCFrame.msgRequestError: object expected");
	                    m.msgRequestError = $root.perfetto.protos.IPCFrame.RequestError.fromObject(d.msgRequestError);
	                }
	                if (d.setPeerIdentity != null) {
	                    if (typeof d.setPeerIdentity !== "object")
	                        throw TypeError(".perfetto.protos.IPCFrame.setPeerIdentity: object expected");
	                    m.setPeerIdentity = $root.perfetto.protos.IPCFrame.SetPeerIdentity.fromObject(d.setPeerIdentity);
	                }
	                if (d.dataForTesting) {
	                    if (!Array.isArray(d.dataForTesting))
	                        throw TypeError(".perfetto.protos.IPCFrame.dataForTesting: array expected");
	                    m.dataForTesting = [];
	                    for (var i = 0; i < d.dataForTesting.length; ++i) {
	                        if (typeof d.dataForTesting[i] === "string")
	                            $util.base64.decode(d.dataForTesting[i], m.dataForTesting[i] = $util.newBuffer($util.base64.length(d.dataForTesting[i])), 0);
	                        else if (d.dataForTesting[i].length >= 0)
	                            m.dataForTesting[i] = d.dataForTesting[i];
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a IPCFrame message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.IPCFrame
	             * @static
	             * @param {perfetto.protos.IPCFrame} m IPCFrame
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            IPCFrame.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.dataForTesting = [];
	                }
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.requestId = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.requestId = o.longs === String ? "0" : 0;
	                }
	                if (m.dataForTesting && m.dataForTesting.length) {
	                    d.dataForTesting = [];
	                    for (var j = 0; j < m.dataForTesting.length; ++j) {
	                        d.dataForTesting[j] = o.bytes === String ? $util.base64.encode(m.dataForTesting[j], 0, m.dataForTesting[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.dataForTesting[j]) : m.dataForTesting[j];
	                    }
	                }
	                if (m.requestId != null && m.hasOwnProperty("requestId")) {
	                    if (typeof m.requestId === "number")
	                        d.requestId = o.longs === String ? String(m.requestId) : m.requestId;
	                    else
	                        d.requestId = o.longs === String ? $util.Long.prototype.toString.call(m.requestId) : o.longs === Number ? new $util.LongBits(m.requestId.low >>> 0, m.requestId.high >>> 0).toNumber(true) : m.requestId;
	                }
	                if (m.msgBindService != null && m.hasOwnProperty("msgBindService")) {
	                    d.msgBindService = $root.perfetto.protos.IPCFrame.BindService.toObject(m.msgBindService, o);
	                    if (o.oneofs)
	                        d.msg = "msgBindService";
	                }
	                if (m.msgBindServiceReply != null && m.hasOwnProperty("msgBindServiceReply")) {
	                    d.msgBindServiceReply = $root.perfetto.protos.IPCFrame.BindServiceReply.toObject(m.msgBindServiceReply, o);
	                    if (o.oneofs)
	                        d.msg = "msgBindServiceReply";
	                }
	                if (m.msgInvokeMethod != null && m.hasOwnProperty("msgInvokeMethod")) {
	                    d.msgInvokeMethod = $root.perfetto.protos.IPCFrame.InvokeMethod.toObject(m.msgInvokeMethod, o);
	                    if (o.oneofs)
	                        d.msg = "msgInvokeMethod";
	                }
	                if (m.msgInvokeMethodReply != null && m.hasOwnProperty("msgInvokeMethodReply")) {
	                    d.msgInvokeMethodReply = $root.perfetto.protos.IPCFrame.InvokeMethodReply.toObject(m.msgInvokeMethodReply, o);
	                    if (o.oneofs)
	                        d.msg = "msgInvokeMethodReply";
	                }
	                if (m.msgRequestError != null && m.hasOwnProperty("msgRequestError")) {
	                    d.msgRequestError = $root.perfetto.protos.IPCFrame.RequestError.toObject(m.msgRequestError, o);
	                    if (o.oneofs)
	                        d.msg = "msgRequestError";
	                }
	                if (m.setPeerIdentity != null && m.hasOwnProperty("setPeerIdentity")) {
	                    d.setPeerIdentity = $root.perfetto.protos.IPCFrame.SetPeerIdentity.toObject(m.setPeerIdentity, o);
	                    if (o.oneofs)
	                        d.msg = "setPeerIdentity";
	                }
	                return d;
	            };

	            /**
	             * Converts this IPCFrame to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.IPCFrame
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            IPCFrame.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for IPCFrame
	             * @function getTypeUrl
	             * @memberof perfetto.protos.IPCFrame
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            IPCFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.IPCFrame";
	            };

	            IPCFrame.BindService = (function() {

	                /**
	                 * Properties of a BindService.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @interface IBindService
	                 * @property {string|null} [serviceName] BindService serviceName
	                 */

	                /**
	                 * Constructs a new BindService.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @classdesc Represents a BindService.
	                 * @implements IBindService
	                 * @constructor
	                 * @param {perfetto.protos.IPCFrame.IBindService=} [p] Properties to set
	                 */
	                function BindService(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * BindService serviceName.
	                 * @member {string} serviceName
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @instance
	                 */
	                BindService.prototype.serviceName = "";

	                /**
	                 * Creates a new BindService instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IBindService=} [properties] Properties to set
	                 * @returns {perfetto.protos.IPCFrame.BindService} BindService instance
	                 */
	                BindService.create = function create(properties) {
	                    return new BindService(properties);
	                };

	                /**
	                 * Encodes the specified BindService message. Does not implicitly {@link perfetto.protos.IPCFrame.BindService.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IBindService} m BindService message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                BindService.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.serviceName != null && Object.hasOwnProperty.call(m, "serviceName"))
	                        w.uint32(10).string(m.serviceName);
	                    return w;
	                };

	                /**
	                 * Decodes a BindService message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.IPCFrame.BindService} BindService
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                BindService.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.BindService();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.serviceName = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a BindService message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.IPCFrame.BindService} BindService
	                 */
	                BindService.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.IPCFrame.BindService)
	                        return d;
	                    var m = new $root.perfetto.protos.IPCFrame.BindService();
	                    if (d.serviceName != null) {
	                        m.serviceName = String(d.serviceName);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a BindService message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.BindService} m BindService
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                BindService.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.serviceName = "";
	                    }
	                    if (m.serviceName != null && m.hasOwnProperty("serviceName")) {
	                        d.serviceName = m.serviceName;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this BindService to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                BindService.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for BindService
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.IPCFrame.BindService
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                BindService.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.IPCFrame.BindService";
	                };

	                return BindService;
	            })();

	            IPCFrame.BindServiceReply = (function() {

	                /**
	                 * Properties of a BindServiceReply.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @interface IBindServiceReply
	                 * @property {boolean|null} [success] BindServiceReply success
	                 * @property {number|null} [serviceId] BindServiceReply serviceId
	                 * @property {Array.<perfetto.protos.IPCFrame.BindServiceReply.IMethodInfo>|null} [methods] BindServiceReply methods
	                 */

	                /**
	                 * Constructs a new BindServiceReply.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @classdesc Represents a BindServiceReply.
	                 * @implements IBindServiceReply
	                 * @constructor
	                 * @param {perfetto.protos.IPCFrame.IBindServiceReply=} [p] Properties to set
	                 */
	                function BindServiceReply(p) {
	                    this.methods = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * BindServiceReply success.
	                 * @member {boolean} success
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @instance
	                 */
	                BindServiceReply.prototype.success = false;

	                /**
	                 * BindServiceReply serviceId.
	                 * @member {number} serviceId
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @instance
	                 */
	                BindServiceReply.prototype.serviceId = 0;

	                /**
	                 * BindServiceReply methods.
	                 * @member {Array.<perfetto.protos.IPCFrame.BindServiceReply.IMethodInfo>} methods
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @instance
	                 */
	                BindServiceReply.prototype.methods = $util.emptyArray;

	                /**
	                 * Creates a new BindServiceReply instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IBindServiceReply=} [properties] Properties to set
	                 * @returns {perfetto.protos.IPCFrame.BindServiceReply} BindServiceReply instance
	                 */
	                BindServiceReply.create = function create(properties) {
	                    return new BindServiceReply(properties);
	                };

	                /**
	                 * Encodes the specified BindServiceReply message. Does not implicitly {@link perfetto.protos.IPCFrame.BindServiceReply.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IBindServiceReply} m BindServiceReply message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                BindServiceReply.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.success != null && Object.hasOwnProperty.call(m, "success"))
	                        w.uint32(8).bool(m.success);
	                    if (m.serviceId != null && Object.hasOwnProperty.call(m, "serviceId"))
	                        w.uint32(16).uint32(m.serviceId);
	                    if (m.methods != null && m.methods.length) {
	                        for (var i = 0; i < m.methods.length; ++i)
	                            $root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo.encode(m.methods[i], w.uint32(26).fork()).ldelim();
	                    }
	                    return w;
	                };

	                /**
	                 * Decodes a BindServiceReply message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.IPCFrame.BindServiceReply} BindServiceReply
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                BindServiceReply.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.BindServiceReply();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.success = r.bool();
	                                break;
	                            }
	                        case 2: {
	                                m.serviceId = r.uint32();
	                                break;
	                            }
	                        case 3: {
	                                if (!(m.methods && m.methods.length))
	                                    m.methods = [];
	                                m.methods.push($root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo.decode(r, r.uint32()));
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a BindServiceReply message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.IPCFrame.BindServiceReply} BindServiceReply
	                 */
	                BindServiceReply.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.IPCFrame.BindServiceReply)
	                        return d;
	                    var m = new $root.perfetto.protos.IPCFrame.BindServiceReply();
	                    if (d.success != null) {
	                        m.success = Boolean(d.success);
	                    }
	                    if (d.serviceId != null) {
	                        m.serviceId = d.serviceId >>> 0;
	                    }
	                    if (d.methods) {
	                        if (!Array.isArray(d.methods))
	                            throw TypeError(".perfetto.protos.IPCFrame.BindServiceReply.methods: array expected");
	                        m.methods = [];
	                        for (var i = 0; i < d.methods.length; ++i) {
	                            if (typeof d.methods[i] !== "object")
	                                throw TypeError(".perfetto.protos.IPCFrame.BindServiceReply.methods: object expected");
	                            m.methods[i] = $root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo.fromObject(d.methods[i]);
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a BindServiceReply message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.BindServiceReply} m BindServiceReply
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                BindServiceReply.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.methods = [];
	                    }
	                    if (o.defaults) {
	                        d.success = false;
	                        d.serviceId = 0;
	                    }
	                    if (m.success != null && m.hasOwnProperty("success")) {
	                        d.success = m.success;
	                    }
	                    if (m.serviceId != null && m.hasOwnProperty("serviceId")) {
	                        d.serviceId = m.serviceId;
	                    }
	                    if (m.methods && m.methods.length) {
	                        d.methods = [];
	                        for (var j = 0; j < m.methods.length; ++j) {
	                            d.methods[j] = $root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo.toObject(m.methods[j], o);
	                        }
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this BindServiceReply to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                BindServiceReply.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for BindServiceReply
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                BindServiceReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.IPCFrame.BindServiceReply";
	                };

	                BindServiceReply.MethodInfo = (function() {

	                    /**
	                     * Properties of a MethodInfo.
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                     * @interface IMethodInfo
	                     * @property {number|null} [id] MethodInfo id
	                     * @property {string|null} [name] MethodInfo name
	                     */

	                    /**
	                     * Constructs a new MethodInfo.
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply
	                     * @classdesc Represents a MethodInfo.
	                     * @implements IMethodInfo
	                     * @constructor
	                     * @param {perfetto.protos.IPCFrame.BindServiceReply.IMethodInfo=} [p] Properties to set
	                     */
	                    function MethodInfo(p) {
	                        if (p)
	                            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                                if (p[ks[i]] != null)
	                                    this[ks[i]] = p[ks[i]];
	                    }

	                    /**
	                     * MethodInfo id.
	                     * @member {number} id
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @instance
	                     */
	                    MethodInfo.prototype.id = 0;

	                    /**
	                     * MethodInfo name.
	                     * @member {string} name
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @instance
	                     */
	                    MethodInfo.prototype.name = "";

	                    /**
	                     * Creates a new MethodInfo instance using the specified properties.
	                     * @function create
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @static
	                     * @param {perfetto.protos.IPCFrame.BindServiceReply.IMethodInfo=} [properties] Properties to set
	                     * @returns {perfetto.protos.IPCFrame.BindServiceReply.MethodInfo} MethodInfo instance
	                     */
	                    MethodInfo.create = function create(properties) {
	                        return new MethodInfo(properties);
	                    };

	                    /**
	                     * Encodes the specified MethodInfo message. Does not implicitly {@link perfetto.protos.IPCFrame.BindServiceReply.MethodInfo.verify|verify} messages.
	                     * @function encode
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @static
	                     * @param {perfetto.protos.IPCFrame.BindServiceReply.IMethodInfo} m MethodInfo message or plain object to encode
	                     * @param {$protobuf.Writer} [w] Writer to encode to
	                     * @returns {$protobuf.Writer} Writer
	                     */
	                    MethodInfo.encode = function encode(m, w) {
	                        if (!w)
	                            w = $Writer.create();
	                        if (m.id != null && Object.hasOwnProperty.call(m, "id"))
	                            w.uint32(8).uint32(m.id);
	                        if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                            w.uint32(18).string(m.name);
	                        return w;
	                    };

	                    /**
	                     * Decodes a MethodInfo message from the specified reader or buffer.
	                     * @function decode
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @static
	                     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                     * @param {number} [l] Message length if known beforehand
	                     * @returns {perfetto.protos.IPCFrame.BindServiceReply.MethodInfo} MethodInfo
	                     * @throws {Error} If the payload is not a reader or valid buffer
	                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                     */
	                    MethodInfo.decode = function decode(r, l) {
	                        if (!(r instanceof $Reader))
	                            r = $Reader.create(r);
	                        var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo();
	                        while (r.pos < c) {
	                            var t = r.uint32();
	                            switch (t >>> 3) {
	                            case 1: {
	                                    m.id = r.uint32();
	                                    break;
	                                }
	                            case 2: {
	                                    m.name = r.string();
	                                    break;
	                                }
	                            default:
	                                r.skipType(t & 7);
	                                break;
	                            }
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a MethodInfo message from a plain object. Also converts values to their respective internal types.
	                     * @function fromObject
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @static
	                     * @param {Object.<string,*>} d Plain object
	                     * @returns {perfetto.protos.IPCFrame.BindServiceReply.MethodInfo} MethodInfo
	                     */
	                    MethodInfo.fromObject = function fromObject(d) {
	                        if (d instanceof $root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo)
	                            return d;
	                        var m = new $root.perfetto.protos.IPCFrame.BindServiceReply.MethodInfo();
	                        if (d.id != null) {
	                            m.id = d.id >>> 0;
	                        }
	                        if (d.name != null) {
	                            m.name = String(d.name);
	                        }
	                        return m;
	                    };

	                    /**
	                     * Creates a plain object from a MethodInfo message. Also converts values to other types if specified.
	                     * @function toObject
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @static
	                     * @param {perfetto.protos.IPCFrame.BindServiceReply.MethodInfo} m MethodInfo
	                     * @param {$protobuf.IConversionOptions} [o] Conversion options
	                     * @returns {Object.<string,*>} Plain object
	                     */
	                    MethodInfo.toObject = function toObject(m, o) {
	                        if (!o)
	                            o = {};
	                        var d = {};
	                        if (o.defaults) {
	                            d.id = 0;
	                            d.name = "";
	                        }
	                        if (m.id != null && m.hasOwnProperty("id")) {
	                            d.id = m.id;
	                        }
	                        if (m.name != null && m.hasOwnProperty("name")) {
	                            d.name = m.name;
	                        }
	                        return d;
	                    };

	                    /**
	                     * Converts this MethodInfo to JSON.
	                     * @function toJSON
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @instance
	                     * @returns {Object.<string,*>} JSON object
	                     */
	                    MethodInfo.prototype.toJSON = function toJSON() {
	                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                    };

	                    /**
	                     * Gets the default type url for MethodInfo
	                     * @function getTypeUrl
	                     * @memberof perfetto.protos.IPCFrame.BindServiceReply.MethodInfo
	                     * @static
	                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                     * @returns {string} The default type url
	                     */
	                    MethodInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                        if (typeUrlPrefix === undefined) {
	                            typeUrlPrefix = "type.googleapis.com";
	                        }
	                        return typeUrlPrefix + "/perfetto.protos.IPCFrame.BindServiceReply.MethodInfo";
	                    };

	                    return MethodInfo;
	                })();

	                return BindServiceReply;
	            })();

	            IPCFrame.InvokeMethod = (function() {

	                /**
	                 * Properties of an InvokeMethod.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @interface IInvokeMethod
	                 * @property {number|null} [serviceId] InvokeMethod serviceId
	                 * @property {number|null} [methodId] InvokeMethod methodId
	                 * @property {Uint8Array|null} [argsProto] InvokeMethod argsProto
	                 * @property {boolean|null} [dropReply] InvokeMethod dropReply
	                 */

	                /**
	                 * Constructs a new InvokeMethod.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @classdesc Represents an InvokeMethod.
	                 * @implements IInvokeMethod
	                 * @constructor
	                 * @param {perfetto.protos.IPCFrame.IInvokeMethod=} [p] Properties to set
	                 */
	                function InvokeMethod(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * InvokeMethod serviceId.
	                 * @member {number} serviceId
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @instance
	                 */
	                InvokeMethod.prototype.serviceId = 0;

	                /**
	                 * InvokeMethod methodId.
	                 * @member {number} methodId
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @instance
	                 */
	                InvokeMethod.prototype.methodId = 0;

	                /**
	                 * InvokeMethod argsProto.
	                 * @member {Uint8Array} argsProto
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @instance
	                 */
	                InvokeMethod.prototype.argsProto = $util.newBuffer([]);

	                /**
	                 * InvokeMethod dropReply.
	                 * @member {boolean} dropReply
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @instance
	                 */
	                InvokeMethod.prototype.dropReply = false;

	                /**
	                 * Creates a new InvokeMethod instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IInvokeMethod=} [properties] Properties to set
	                 * @returns {perfetto.protos.IPCFrame.InvokeMethod} InvokeMethod instance
	                 */
	                InvokeMethod.create = function create(properties) {
	                    return new InvokeMethod(properties);
	                };

	                /**
	                 * Encodes the specified InvokeMethod message. Does not implicitly {@link perfetto.protos.IPCFrame.InvokeMethod.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IInvokeMethod} m InvokeMethod message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                InvokeMethod.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.serviceId != null && Object.hasOwnProperty.call(m, "serviceId"))
	                        w.uint32(8).uint32(m.serviceId);
	                    if (m.methodId != null && Object.hasOwnProperty.call(m, "methodId"))
	                        w.uint32(16).uint32(m.methodId);
	                    if (m.argsProto != null && Object.hasOwnProperty.call(m, "argsProto"))
	                        w.uint32(26).bytes(m.argsProto);
	                    if (m.dropReply != null && Object.hasOwnProperty.call(m, "dropReply"))
	                        w.uint32(32).bool(m.dropReply);
	                    return w;
	                };

	                /**
	                 * Decodes an InvokeMethod message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.IPCFrame.InvokeMethod} InvokeMethod
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                InvokeMethod.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.InvokeMethod();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.serviceId = r.uint32();
	                                break;
	                            }
	                        case 2: {
	                                m.methodId = r.uint32();
	                                break;
	                            }
	                        case 3: {
	                                m.argsProto = r.bytes();
	                                break;
	                            }
	                        case 4: {
	                                m.dropReply = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an InvokeMethod message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.IPCFrame.InvokeMethod} InvokeMethod
	                 */
	                InvokeMethod.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.IPCFrame.InvokeMethod)
	                        return d;
	                    var m = new $root.perfetto.protos.IPCFrame.InvokeMethod();
	                    if (d.serviceId != null) {
	                        m.serviceId = d.serviceId >>> 0;
	                    }
	                    if (d.methodId != null) {
	                        m.methodId = d.methodId >>> 0;
	                    }
	                    if (d.argsProto != null) {
	                        if (typeof d.argsProto === "string")
	                            $util.base64.decode(d.argsProto, m.argsProto = $util.newBuffer($util.base64.length(d.argsProto)), 0);
	                        else if (d.argsProto.length >= 0)
	                            m.argsProto = d.argsProto;
	                    }
	                    if (d.dropReply != null) {
	                        m.dropReply = Boolean(d.dropReply);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an InvokeMethod message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.InvokeMethod} m InvokeMethod
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                InvokeMethod.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.serviceId = 0;
	                        d.methodId = 0;
	                        if (o.bytes === String)
	                            d.argsProto = "";
	                        else {
	                            d.argsProto = [];
	                            if (o.bytes !== Array)
	                                d.argsProto = $util.newBuffer(d.argsProto);
	                        }
	                        d.dropReply = false;
	                    }
	                    if (m.serviceId != null && m.hasOwnProperty("serviceId")) {
	                        d.serviceId = m.serviceId;
	                    }
	                    if (m.methodId != null && m.hasOwnProperty("methodId")) {
	                        d.methodId = m.methodId;
	                    }
	                    if (m.argsProto != null && m.hasOwnProperty("argsProto")) {
	                        d.argsProto = o.bytes === String ? $util.base64.encode(m.argsProto, 0, m.argsProto.length) : o.bytes === Array ? Array.prototype.slice.call(m.argsProto) : m.argsProto;
	                    }
	                    if (m.dropReply != null && m.hasOwnProperty("dropReply")) {
	                        d.dropReply = m.dropReply;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this InvokeMethod to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                InvokeMethod.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for InvokeMethod
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethod
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                InvokeMethod.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.IPCFrame.InvokeMethod";
	                };

	                return InvokeMethod;
	            })();

	            IPCFrame.InvokeMethodReply = (function() {

	                /**
	                 * Properties of an InvokeMethodReply.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @interface IInvokeMethodReply
	                 * @property {boolean|null} [success] InvokeMethodReply success
	                 * @property {boolean|null} [hasMore] InvokeMethodReply hasMore
	                 * @property {Uint8Array|null} [replyProto] InvokeMethodReply replyProto
	                 */

	                /**
	                 * Constructs a new InvokeMethodReply.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @classdesc Represents an InvokeMethodReply.
	                 * @implements IInvokeMethodReply
	                 * @constructor
	                 * @param {perfetto.protos.IPCFrame.IInvokeMethodReply=} [p] Properties to set
	                 */
	                function InvokeMethodReply(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * InvokeMethodReply success.
	                 * @member {boolean} success
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @instance
	                 */
	                InvokeMethodReply.prototype.success = false;

	                /**
	                 * InvokeMethodReply hasMore.
	                 * @member {boolean} hasMore
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @instance
	                 */
	                InvokeMethodReply.prototype.hasMore = false;

	                /**
	                 * InvokeMethodReply replyProto.
	                 * @member {Uint8Array} replyProto
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @instance
	                 */
	                InvokeMethodReply.prototype.replyProto = $util.newBuffer([]);

	                /**
	                 * Creates a new InvokeMethodReply instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IInvokeMethodReply=} [properties] Properties to set
	                 * @returns {perfetto.protos.IPCFrame.InvokeMethodReply} InvokeMethodReply instance
	                 */
	                InvokeMethodReply.create = function create(properties) {
	                    return new InvokeMethodReply(properties);
	                };

	                /**
	                 * Encodes the specified InvokeMethodReply message. Does not implicitly {@link perfetto.protos.IPCFrame.InvokeMethodReply.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IInvokeMethodReply} m InvokeMethodReply message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                InvokeMethodReply.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.success != null && Object.hasOwnProperty.call(m, "success"))
	                        w.uint32(8).bool(m.success);
	                    if (m.hasMore != null && Object.hasOwnProperty.call(m, "hasMore"))
	                        w.uint32(16).bool(m.hasMore);
	                    if (m.replyProto != null && Object.hasOwnProperty.call(m, "replyProto"))
	                        w.uint32(26).bytes(m.replyProto);
	                    return w;
	                };

	                /**
	                 * Decodes an InvokeMethodReply message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.IPCFrame.InvokeMethodReply} InvokeMethodReply
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                InvokeMethodReply.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.InvokeMethodReply();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.success = r.bool();
	                                break;
	                            }
	                        case 2: {
	                                m.hasMore = r.bool();
	                                break;
	                            }
	                        case 3: {
	                                m.replyProto = r.bytes();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an InvokeMethodReply message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.IPCFrame.InvokeMethodReply} InvokeMethodReply
	                 */
	                InvokeMethodReply.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.IPCFrame.InvokeMethodReply)
	                        return d;
	                    var m = new $root.perfetto.protos.IPCFrame.InvokeMethodReply();
	                    if (d.success != null) {
	                        m.success = Boolean(d.success);
	                    }
	                    if (d.hasMore != null) {
	                        m.hasMore = Boolean(d.hasMore);
	                    }
	                    if (d.replyProto != null) {
	                        if (typeof d.replyProto === "string")
	                            $util.base64.decode(d.replyProto, m.replyProto = $util.newBuffer($util.base64.length(d.replyProto)), 0);
	                        else if (d.replyProto.length >= 0)
	                            m.replyProto = d.replyProto;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an InvokeMethodReply message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.InvokeMethodReply} m InvokeMethodReply
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                InvokeMethodReply.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.success = false;
	                        d.hasMore = false;
	                        if (o.bytes === String)
	                            d.replyProto = "";
	                        else {
	                            d.replyProto = [];
	                            if (o.bytes !== Array)
	                                d.replyProto = $util.newBuffer(d.replyProto);
	                        }
	                    }
	                    if (m.success != null && m.hasOwnProperty("success")) {
	                        d.success = m.success;
	                    }
	                    if (m.hasMore != null && m.hasOwnProperty("hasMore")) {
	                        d.hasMore = m.hasMore;
	                    }
	                    if (m.replyProto != null && m.hasOwnProperty("replyProto")) {
	                        d.replyProto = o.bytes === String ? $util.base64.encode(m.replyProto, 0, m.replyProto.length) : o.bytes === Array ? Array.prototype.slice.call(m.replyProto) : m.replyProto;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this InvokeMethodReply to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                InvokeMethodReply.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for InvokeMethodReply
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.IPCFrame.InvokeMethodReply
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                InvokeMethodReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.IPCFrame.InvokeMethodReply";
	                };

	                return InvokeMethodReply;
	            })();

	            IPCFrame.RequestError = (function() {

	                /**
	                 * Properties of a RequestError.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @interface IRequestError
	                 * @property {string|null} [error] RequestError error
	                 */

	                /**
	                 * Constructs a new RequestError.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @classdesc Represents a RequestError.
	                 * @implements IRequestError
	                 * @constructor
	                 * @param {perfetto.protos.IPCFrame.IRequestError=} [p] Properties to set
	                 */
	                function RequestError(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * RequestError error.
	                 * @member {string} error
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @instance
	                 */
	                RequestError.prototype.error = "";

	                /**
	                 * Creates a new RequestError instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IRequestError=} [properties] Properties to set
	                 * @returns {perfetto.protos.IPCFrame.RequestError} RequestError instance
	                 */
	                RequestError.create = function create(properties) {
	                    return new RequestError(properties);
	                };

	                /**
	                 * Encodes the specified RequestError message. Does not implicitly {@link perfetto.protos.IPCFrame.RequestError.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.IRequestError} m RequestError message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                RequestError.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                        w.uint32(10).string(m.error);
	                    return w;
	                };

	                /**
	                 * Decodes a RequestError message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.IPCFrame.RequestError} RequestError
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                RequestError.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.RequestError();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.error = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a RequestError message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.IPCFrame.RequestError} RequestError
	                 */
	                RequestError.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.IPCFrame.RequestError)
	                        return d;
	                    var m = new $root.perfetto.protos.IPCFrame.RequestError();
	                    if (d.error != null) {
	                        m.error = String(d.error);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a RequestError message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.RequestError} m RequestError
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                RequestError.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.error = "";
	                    }
	                    if (m.error != null && m.hasOwnProperty("error")) {
	                        d.error = m.error;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this RequestError to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                RequestError.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for RequestError
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.IPCFrame.RequestError
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                RequestError.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.IPCFrame.RequestError";
	                };

	                return RequestError;
	            })();

	            IPCFrame.SetPeerIdentity = (function() {

	                /**
	                 * Properties of a SetPeerIdentity.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @interface ISetPeerIdentity
	                 * @property {number|null} [pid] SetPeerIdentity pid
	                 * @property {number|null} [uid] SetPeerIdentity uid
	                 * @property {string|null} [machineIdHint] SetPeerIdentity machineIdHint
	                 */

	                /**
	                 * Constructs a new SetPeerIdentity.
	                 * @memberof perfetto.protos.IPCFrame
	                 * @classdesc Represents a SetPeerIdentity.
	                 * @implements ISetPeerIdentity
	                 * @constructor
	                 * @param {perfetto.protos.IPCFrame.ISetPeerIdentity=} [p] Properties to set
	                 */
	                function SetPeerIdentity(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * SetPeerIdentity pid.
	                 * @member {number} pid
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @instance
	                 */
	                SetPeerIdentity.prototype.pid = 0;

	                /**
	                 * SetPeerIdentity uid.
	                 * @member {number} uid
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @instance
	                 */
	                SetPeerIdentity.prototype.uid = 0;

	                /**
	                 * SetPeerIdentity machineIdHint.
	                 * @member {string} machineIdHint
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @instance
	                 */
	                SetPeerIdentity.prototype.machineIdHint = "";

	                /**
	                 * Creates a new SetPeerIdentity instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.ISetPeerIdentity=} [properties] Properties to set
	                 * @returns {perfetto.protos.IPCFrame.SetPeerIdentity} SetPeerIdentity instance
	                 */
	                SetPeerIdentity.create = function create(properties) {
	                    return new SetPeerIdentity(properties);
	                };

	                /**
	                 * Encodes the specified SetPeerIdentity message. Does not implicitly {@link perfetto.protos.IPCFrame.SetPeerIdentity.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.ISetPeerIdentity} m SetPeerIdentity message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                SetPeerIdentity.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.pid != null && Object.hasOwnProperty.call(m, "pid"))
	                        w.uint32(8).int32(m.pid);
	                    if (m.uid != null && Object.hasOwnProperty.call(m, "uid"))
	                        w.uint32(16).int32(m.uid);
	                    if (m.machineIdHint != null && Object.hasOwnProperty.call(m, "machineIdHint"))
	                        w.uint32(26).string(m.machineIdHint);
	                    return w;
	                };

	                /**
	                 * Decodes a SetPeerIdentity message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.IPCFrame.SetPeerIdentity} SetPeerIdentity
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                SetPeerIdentity.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.IPCFrame.SetPeerIdentity();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.pid = r.int32();
	                                break;
	                            }
	                        case 2: {
	                                m.uid = r.int32();
	                                break;
	                            }
	                        case 3: {
	                                m.machineIdHint = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a SetPeerIdentity message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.IPCFrame.SetPeerIdentity} SetPeerIdentity
	                 */
	                SetPeerIdentity.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.IPCFrame.SetPeerIdentity)
	                        return d;
	                    var m = new $root.perfetto.protos.IPCFrame.SetPeerIdentity();
	                    if (d.pid != null) {
	                        m.pid = d.pid | 0;
	                    }
	                    if (d.uid != null) {
	                        m.uid = d.uid | 0;
	                    }
	                    if (d.machineIdHint != null) {
	                        m.machineIdHint = String(d.machineIdHint);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a SetPeerIdentity message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @static
	                 * @param {perfetto.protos.IPCFrame.SetPeerIdentity} m SetPeerIdentity
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                SetPeerIdentity.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.pid = 0;
	                        d.uid = 0;
	                        d.machineIdHint = "";
	                    }
	                    if (m.pid != null && m.hasOwnProperty("pid")) {
	                        d.pid = m.pid;
	                    }
	                    if (m.uid != null && m.hasOwnProperty("uid")) {
	                        d.uid = m.uid;
	                    }
	                    if (m.machineIdHint != null && m.hasOwnProperty("machineIdHint")) {
	                        d.machineIdHint = m.machineIdHint;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this SetPeerIdentity to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                SetPeerIdentity.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for SetPeerIdentity
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.IPCFrame.SetPeerIdentity
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                SetPeerIdentity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.IPCFrame.SetPeerIdentity";
	                };

	                return SetPeerIdentity;
	            })();

	            return IPCFrame;
	        })();

	        protos.PerfettoMetatrace = (function() {

	            /**
	             * Properties of a PerfettoMetatrace.
	             * @memberof perfetto.protos
	             * @interface IPerfettoMetatrace
	             * @property {number|null} [eventId] PerfettoMetatrace eventId
	             * @property {number|null} [counterId] PerfettoMetatrace counterId
	             * @property {string|null} [eventName] PerfettoMetatrace eventName
	             * @property {number|null} [eventNameIid] PerfettoMetatrace eventNameIid
	             * @property {string|null} [counterName] PerfettoMetatrace counterName
	             * @property {number|null} [eventDurationNs] PerfettoMetatrace eventDurationNs
	             * @property {number|null} [counterValue] PerfettoMetatrace counterValue
	             * @property {number|null} [threadId] PerfettoMetatrace threadId
	             * @property {boolean|null} [hasOverruns] PerfettoMetatrace hasOverruns
	             * @property {Array.<perfetto.protos.PerfettoMetatrace.IArg>|null} [args] PerfettoMetatrace args
	             * @property {Array.<perfetto.protos.PerfettoMetatrace.IInternedString>|null} [internedStrings] PerfettoMetatrace internedStrings
	             */

	            /**
	             * Constructs a new PerfettoMetatrace.
	             * @memberof perfetto.protos
	             * @classdesc Represents a PerfettoMetatrace.
	             * @implements IPerfettoMetatrace
	             * @constructor
	             * @param {perfetto.protos.IPerfettoMetatrace=} [p] Properties to set
	             */
	            function PerfettoMetatrace(p) {
	                this.args = [];
	                this.internedStrings = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * PerfettoMetatrace eventId.
	             * @member {number|null|undefined} eventId
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.eventId = null;

	            /**
	             * PerfettoMetatrace counterId.
	             * @member {number|null|undefined} counterId
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.counterId = null;

	            /**
	             * PerfettoMetatrace eventName.
	             * @member {string|null|undefined} eventName
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.eventName = null;

	            /**
	             * PerfettoMetatrace eventNameIid.
	             * @member {number|null|undefined} eventNameIid
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.eventNameIid = null;

	            /**
	             * PerfettoMetatrace counterName.
	             * @member {string|null|undefined} counterName
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.counterName = null;

	            /**
	             * PerfettoMetatrace eventDurationNs.
	             * @member {number} eventDurationNs
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.eventDurationNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * PerfettoMetatrace counterValue.
	             * @member {number} counterValue
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.counterValue = 0;

	            /**
	             * PerfettoMetatrace threadId.
	             * @member {number} threadId
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.threadId = 0;

	            /**
	             * PerfettoMetatrace hasOverruns.
	             * @member {boolean} hasOverruns
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.hasOverruns = false;

	            /**
	             * PerfettoMetatrace args.
	             * @member {Array.<perfetto.protos.PerfettoMetatrace.IArg>} args
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.args = $util.emptyArray;

	            /**
	             * PerfettoMetatrace internedStrings.
	             * @member {Array.<perfetto.protos.PerfettoMetatrace.IInternedString>} internedStrings
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            PerfettoMetatrace.prototype.internedStrings = $util.emptyArray;

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * PerfettoMetatrace recordType.
	             * @member {"eventId"|"counterId"|"eventName"|"eventNameIid"|"counterName"|undefined} recordType
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             */
	            Object.defineProperty(PerfettoMetatrace.prototype, "recordType", {
	                get: $util.oneOfGetter($oneOfFields = ["eventId", "counterId", "eventName", "eventNameIid", "counterName"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new PerfettoMetatrace instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @static
	             * @param {perfetto.protos.IPerfettoMetatrace=} [properties] Properties to set
	             * @returns {perfetto.protos.PerfettoMetatrace} PerfettoMetatrace instance
	             */
	            PerfettoMetatrace.create = function create(properties) {
	                return new PerfettoMetatrace(properties);
	            };

	            /**
	             * Encodes the specified PerfettoMetatrace message. Does not implicitly {@link perfetto.protos.PerfettoMetatrace.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @static
	             * @param {perfetto.protos.IPerfettoMetatrace} m PerfettoMetatrace message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            PerfettoMetatrace.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.eventId != null && Object.hasOwnProperty.call(m, "eventId"))
	                    w.uint32(8).uint32(m.eventId);
	                if (m.counterId != null && Object.hasOwnProperty.call(m, "counterId"))
	                    w.uint32(16).uint32(m.counterId);
	                if (m.eventDurationNs != null && Object.hasOwnProperty.call(m, "eventDurationNs"))
	                    w.uint32(24).uint64(m.eventDurationNs);
	                if (m.counterValue != null && Object.hasOwnProperty.call(m, "counterValue"))
	                    w.uint32(32).int32(m.counterValue);
	                if (m.threadId != null && Object.hasOwnProperty.call(m, "threadId"))
	                    w.uint32(40).uint32(m.threadId);
	                if (m.hasOverruns != null && Object.hasOwnProperty.call(m, "hasOverruns"))
	                    w.uint32(48).bool(m.hasOverruns);
	                if (m.args != null && m.args.length) {
	                    for (var i = 0; i < m.args.length; ++i)
	                        $root.perfetto.protos.PerfettoMetatrace.Arg.encode(m.args[i], w.uint32(58).fork()).ldelim();
	                }
	                if (m.eventName != null && Object.hasOwnProperty.call(m, "eventName"))
	                    w.uint32(66).string(m.eventName);
	                if (m.counterName != null && Object.hasOwnProperty.call(m, "counterName"))
	                    w.uint32(74).string(m.counterName);
	                if (m.internedStrings != null && m.internedStrings.length) {
	                    for (var i = 0; i < m.internedStrings.length; ++i)
	                        $root.perfetto.protos.PerfettoMetatrace.InternedString.encode(m.internedStrings[i], w.uint32(82).fork()).ldelim();
	                }
	                if (m.eventNameIid != null && Object.hasOwnProperty.call(m, "eventNameIid"))
	                    w.uint32(88).uint64(m.eventNameIid);
	                return w;
	            };

	            /**
	             * Decodes a PerfettoMetatrace message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.PerfettoMetatrace} PerfettoMetatrace
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            PerfettoMetatrace.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfettoMetatrace();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.eventId = r.uint32();
	                            break;
	                        }
	                    case 2: {
	                            m.counterId = r.uint32();
	                            break;
	                        }
	                    case 8: {
	                            m.eventName = r.string();
	                            break;
	                        }
	                    case 11: {
	                            m.eventNameIid = r.uint64();
	                            break;
	                        }
	                    case 9: {
	                            m.counterName = r.string();
	                            break;
	                        }
	                    case 3: {
	                            m.eventDurationNs = r.uint64();
	                            break;
	                        }
	                    case 4: {
	                            m.counterValue = r.int32();
	                            break;
	                        }
	                    case 5: {
	                            m.threadId = r.uint32();
	                            break;
	                        }
	                    case 6: {
	                            m.hasOverruns = r.bool();
	                            break;
	                        }
	                    case 7: {
	                            if (!(m.args && m.args.length))
	                                m.args = [];
	                            m.args.push($root.perfetto.protos.PerfettoMetatrace.Arg.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 10: {
	                            if (!(m.internedStrings && m.internedStrings.length))
	                                m.internedStrings = [];
	                            m.internedStrings.push($root.perfetto.protos.PerfettoMetatrace.InternedString.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a PerfettoMetatrace message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.PerfettoMetatrace} PerfettoMetatrace
	             */
	            PerfettoMetatrace.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.PerfettoMetatrace)
	                    return d;
	                var m = new $root.perfetto.protos.PerfettoMetatrace();
	                if (d.eventId != null) {
	                    m.eventId = d.eventId >>> 0;
	                }
	                if (d.counterId != null) {
	                    m.counterId = d.counterId >>> 0;
	                }
	                if (d.eventName != null) {
	                    m.eventName = String(d.eventName);
	                }
	                if (d.eventNameIid != null) {
	                    if ($util.Long)
	                        (m.eventNameIid = $util.Long.fromValue(d.eventNameIid)).unsigned = true;
	                    else if (typeof d.eventNameIid === "string")
	                        m.eventNameIid = parseInt(d.eventNameIid, 10);
	                    else if (typeof d.eventNameIid === "number")
	                        m.eventNameIid = d.eventNameIid;
	                    else if (typeof d.eventNameIid === "object")
	                        m.eventNameIid = new $util.LongBits(d.eventNameIid.low >>> 0, d.eventNameIid.high >>> 0).toNumber(true);
	                }
	                if (d.counterName != null) {
	                    m.counterName = String(d.counterName);
	                }
	                if (d.eventDurationNs != null) {
	                    if ($util.Long)
	                        (m.eventDurationNs = $util.Long.fromValue(d.eventDurationNs)).unsigned = true;
	                    else if (typeof d.eventDurationNs === "string")
	                        m.eventDurationNs = parseInt(d.eventDurationNs, 10);
	                    else if (typeof d.eventDurationNs === "number")
	                        m.eventDurationNs = d.eventDurationNs;
	                    else if (typeof d.eventDurationNs === "object")
	                        m.eventDurationNs = new $util.LongBits(d.eventDurationNs.low >>> 0, d.eventDurationNs.high >>> 0).toNumber(true);
	                }
	                if (d.counterValue != null) {
	                    m.counterValue = d.counterValue | 0;
	                }
	                if (d.threadId != null) {
	                    m.threadId = d.threadId >>> 0;
	                }
	                if (d.hasOverruns != null) {
	                    m.hasOverruns = Boolean(d.hasOverruns);
	                }
	                if (d.args) {
	                    if (!Array.isArray(d.args))
	                        throw TypeError(".perfetto.protos.PerfettoMetatrace.args: array expected");
	                    m.args = [];
	                    for (var i = 0; i < d.args.length; ++i) {
	                        if (typeof d.args[i] !== "object")
	                            throw TypeError(".perfetto.protos.PerfettoMetatrace.args: object expected");
	                        m.args[i] = $root.perfetto.protos.PerfettoMetatrace.Arg.fromObject(d.args[i]);
	                    }
	                }
	                if (d.internedStrings) {
	                    if (!Array.isArray(d.internedStrings))
	                        throw TypeError(".perfetto.protos.PerfettoMetatrace.internedStrings: array expected");
	                    m.internedStrings = [];
	                    for (var i = 0; i < d.internedStrings.length; ++i) {
	                        if (typeof d.internedStrings[i] !== "object")
	                            throw TypeError(".perfetto.protos.PerfettoMetatrace.internedStrings: object expected");
	                        m.internedStrings[i] = $root.perfetto.protos.PerfettoMetatrace.InternedString.fromObject(d.internedStrings[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a PerfettoMetatrace message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @static
	             * @param {perfetto.protos.PerfettoMetatrace} m PerfettoMetatrace
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            PerfettoMetatrace.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.args = [];
	                    d.internedStrings = [];
	                }
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.eventDurationNs = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.eventDurationNs = o.longs === String ? "0" : 0;
	                    d.counterValue = 0;
	                    d.threadId = 0;
	                    d.hasOverruns = false;
	                }
	                if (m.eventId != null && m.hasOwnProperty("eventId")) {
	                    d.eventId = m.eventId;
	                    if (o.oneofs)
	                        d.recordType = "eventId";
	                }
	                if (m.counterId != null && m.hasOwnProperty("counterId")) {
	                    d.counterId = m.counterId;
	                    if (o.oneofs)
	                        d.recordType = "counterId";
	                }
	                if (m.eventDurationNs != null && m.hasOwnProperty("eventDurationNs")) {
	                    if (typeof m.eventDurationNs === "number")
	                        d.eventDurationNs = o.longs === String ? String(m.eventDurationNs) : m.eventDurationNs;
	                    else
	                        d.eventDurationNs = o.longs === String ? $util.Long.prototype.toString.call(m.eventDurationNs) : o.longs === Number ? new $util.LongBits(m.eventDurationNs.low >>> 0, m.eventDurationNs.high >>> 0).toNumber(true) : m.eventDurationNs;
	                }
	                if (m.counterValue != null && m.hasOwnProperty("counterValue")) {
	                    d.counterValue = m.counterValue;
	                }
	                if (m.threadId != null && m.hasOwnProperty("threadId")) {
	                    d.threadId = m.threadId;
	                }
	                if (m.hasOverruns != null && m.hasOwnProperty("hasOverruns")) {
	                    d.hasOverruns = m.hasOverruns;
	                }
	                if (m.args && m.args.length) {
	                    d.args = [];
	                    for (var j = 0; j < m.args.length; ++j) {
	                        d.args[j] = $root.perfetto.protos.PerfettoMetatrace.Arg.toObject(m.args[j], o);
	                    }
	                }
	                if (m.eventName != null && m.hasOwnProperty("eventName")) {
	                    d.eventName = m.eventName;
	                    if (o.oneofs)
	                        d.recordType = "eventName";
	                }
	                if (m.counterName != null && m.hasOwnProperty("counterName")) {
	                    d.counterName = m.counterName;
	                    if (o.oneofs)
	                        d.recordType = "counterName";
	                }
	                if (m.internedStrings && m.internedStrings.length) {
	                    d.internedStrings = [];
	                    for (var j = 0; j < m.internedStrings.length; ++j) {
	                        d.internedStrings[j] = $root.perfetto.protos.PerfettoMetatrace.InternedString.toObject(m.internedStrings[j], o);
	                    }
	                }
	                if (m.eventNameIid != null && m.hasOwnProperty("eventNameIid")) {
	                    if (typeof m.eventNameIid === "number")
	                        d.eventNameIid = o.longs === String ? String(m.eventNameIid) : m.eventNameIid;
	                    else
	                        d.eventNameIid = o.longs === String ? $util.Long.prototype.toString.call(m.eventNameIid) : o.longs === Number ? new $util.LongBits(m.eventNameIid.low >>> 0, m.eventNameIid.high >>> 0).toNumber(true) : m.eventNameIid;
	                    if (o.oneofs)
	                        d.recordType = "eventNameIid";
	                }
	                return d;
	            };

	            /**
	             * Converts this PerfettoMetatrace to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            PerfettoMetatrace.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for PerfettoMetatrace
	             * @function getTypeUrl
	             * @memberof perfetto.protos.PerfettoMetatrace
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            PerfettoMetatrace.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.PerfettoMetatrace";
	            };

	            PerfettoMetatrace.Arg = (function() {

	                /**
	                 * Properties of an Arg.
	                 * @memberof perfetto.protos.PerfettoMetatrace
	                 * @interface IArg
	                 * @property {string|null} [key] Arg key
	                 * @property {number|null} [keyIid] Arg keyIid
	                 * @property {string|null} [value] Arg value
	                 * @property {number|null} [valueIid] Arg valueIid
	                 */

	                /**
	                 * Constructs a new Arg.
	                 * @memberof perfetto.protos.PerfettoMetatrace
	                 * @classdesc Represents an Arg.
	                 * @implements IArg
	                 * @constructor
	                 * @param {perfetto.protos.PerfettoMetatrace.IArg=} [p] Properties to set
	                 */
	                function Arg(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Arg key.
	                 * @member {string|null|undefined} key
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 */
	                Arg.prototype.key = null;

	                /**
	                 * Arg keyIid.
	                 * @member {number|null|undefined} keyIid
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 */
	                Arg.prototype.keyIid = null;

	                /**
	                 * Arg value.
	                 * @member {string|null|undefined} value
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 */
	                Arg.prototype.value = null;

	                /**
	                 * Arg valueIid.
	                 * @member {number|null|undefined} valueIid
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 */
	                Arg.prototype.valueIid = null;

	                // OneOf field names bound to virtual getters and setters
	                var $oneOfFields;

	                /**
	                 * Arg keyOrInternedKey.
	                 * @member {"key"|"keyIid"|undefined} keyOrInternedKey
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 */
	                Object.defineProperty(Arg.prototype, "keyOrInternedKey", {
	                    get: $util.oneOfGetter($oneOfFields = ["key", "keyIid"]),
	                    set: $util.oneOfSetter($oneOfFields)
	                });

	                /**
	                 * Arg valueOrInternedValue.
	                 * @member {"value"|"valueIid"|undefined} valueOrInternedValue
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 */
	                Object.defineProperty(Arg.prototype, "valueOrInternedValue", {
	                    get: $util.oneOfGetter($oneOfFields = ["value", "valueIid"]),
	                    set: $util.oneOfSetter($oneOfFields)
	                });

	                /**
	                 * Creates a new Arg instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @static
	                 * @param {perfetto.protos.PerfettoMetatrace.IArg=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfettoMetatrace.Arg} Arg instance
	                 */
	                Arg.create = function create(properties) {
	                    return new Arg(properties);
	                };

	                /**
	                 * Encodes the specified Arg message. Does not implicitly {@link perfetto.protos.PerfettoMetatrace.Arg.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @static
	                 * @param {perfetto.protos.PerfettoMetatrace.IArg} m Arg message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Arg.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	                        w.uint32(10).string(m.key);
	                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
	                        w.uint32(18).string(m.value);
	                    if (m.keyIid != null && Object.hasOwnProperty.call(m, "keyIid"))
	                        w.uint32(24).uint64(m.keyIid);
	                    if (m.valueIid != null && Object.hasOwnProperty.call(m, "valueIid"))
	                        w.uint32(32).uint64(m.valueIid);
	                    return w;
	                };

	                /**
	                 * Decodes an Arg message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfettoMetatrace.Arg} Arg
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Arg.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfettoMetatrace.Arg();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.key = r.string();
	                                break;
	                            }
	                        case 3: {
	                                m.keyIid = r.uint64();
	                                break;
	                            }
	                        case 2: {
	                                m.value = r.string();
	                                break;
	                            }
	                        case 4: {
	                                m.valueIid = r.uint64();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an Arg message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfettoMetatrace.Arg} Arg
	                 */
	                Arg.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfettoMetatrace.Arg)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfettoMetatrace.Arg();
	                    if (d.key != null) {
	                        m.key = String(d.key);
	                    }
	                    if (d.keyIid != null) {
	                        if ($util.Long)
	                            (m.keyIid = $util.Long.fromValue(d.keyIid)).unsigned = true;
	                        else if (typeof d.keyIid === "string")
	                            m.keyIid = parseInt(d.keyIid, 10);
	                        else if (typeof d.keyIid === "number")
	                            m.keyIid = d.keyIid;
	                        else if (typeof d.keyIid === "object")
	                            m.keyIid = new $util.LongBits(d.keyIid.low >>> 0, d.keyIid.high >>> 0).toNumber(true);
	                    }
	                    if (d.value != null) {
	                        m.value = String(d.value);
	                    }
	                    if (d.valueIid != null) {
	                        if ($util.Long)
	                            (m.valueIid = $util.Long.fromValue(d.valueIid)).unsigned = true;
	                        else if (typeof d.valueIid === "string")
	                            m.valueIid = parseInt(d.valueIid, 10);
	                        else if (typeof d.valueIid === "number")
	                            m.valueIid = d.valueIid;
	                        else if (typeof d.valueIid === "object")
	                            m.valueIid = new $util.LongBits(d.valueIid.low >>> 0, d.valueIid.high >>> 0).toNumber(true);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an Arg message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @static
	                 * @param {perfetto.protos.PerfettoMetatrace.Arg} m Arg
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Arg.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (m.key != null && m.hasOwnProperty("key")) {
	                        d.key = m.key;
	                        if (o.oneofs)
	                            d.keyOrInternedKey = "key";
	                    }
	                    if (m.value != null && m.hasOwnProperty("value")) {
	                        d.value = m.value;
	                        if (o.oneofs)
	                            d.valueOrInternedValue = "value";
	                    }
	                    if (m.keyIid != null && m.hasOwnProperty("keyIid")) {
	                        if (typeof m.keyIid === "number")
	                            d.keyIid = o.longs === String ? String(m.keyIid) : m.keyIid;
	                        else
	                            d.keyIid = o.longs === String ? $util.Long.prototype.toString.call(m.keyIid) : o.longs === Number ? new $util.LongBits(m.keyIid.low >>> 0, m.keyIid.high >>> 0).toNumber(true) : m.keyIid;
	                        if (o.oneofs)
	                            d.keyOrInternedKey = "keyIid";
	                    }
	                    if (m.valueIid != null && m.hasOwnProperty("valueIid")) {
	                        if (typeof m.valueIid === "number")
	                            d.valueIid = o.longs === String ? String(m.valueIid) : m.valueIid;
	                        else
	                            d.valueIid = o.longs === String ? $util.Long.prototype.toString.call(m.valueIid) : o.longs === Number ? new $util.LongBits(m.valueIid.low >>> 0, m.valueIid.high >>> 0).toNumber(true) : m.valueIid;
	                        if (o.oneofs)
	                            d.valueOrInternedValue = "valueIid";
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Arg to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Arg.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Arg
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfettoMetatrace.Arg
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Arg.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfettoMetatrace.Arg";
	                };

	                return Arg;
	            })();

	            PerfettoMetatrace.InternedString = (function() {

	                /**
	                 * Properties of an InternedString.
	                 * @memberof perfetto.protos.PerfettoMetatrace
	                 * @interface IInternedString
	                 * @property {number|null} [iid] InternedString iid
	                 * @property {string|null} [value] InternedString value
	                 */

	                /**
	                 * Constructs a new InternedString.
	                 * @memberof perfetto.protos.PerfettoMetatrace
	                 * @classdesc Represents an InternedString.
	                 * @implements IInternedString
	                 * @constructor
	                 * @param {perfetto.protos.PerfettoMetatrace.IInternedString=} [p] Properties to set
	                 */
	                function InternedString(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * InternedString iid.
	                 * @member {number} iid
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @instance
	                 */
	                InternedString.prototype.iid = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	                /**
	                 * InternedString value.
	                 * @member {string} value
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @instance
	                 */
	                InternedString.prototype.value = "";

	                /**
	                 * Creates a new InternedString instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @static
	                 * @param {perfetto.protos.PerfettoMetatrace.IInternedString=} [properties] Properties to set
	                 * @returns {perfetto.protos.PerfettoMetatrace.InternedString} InternedString instance
	                 */
	                InternedString.create = function create(properties) {
	                    return new InternedString(properties);
	                };

	                /**
	                 * Encodes the specified InternedString message. Does not implicitly {@link perfetto.protos.PerfettoMetatrace.InternedString.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @static
	                 * @param {perfetto.protos.PerfettoMetatrace.IInternedString} m InternedString message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                InternedString.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.iid != null && Object.hasOwnProperty.call(m, "iid"))
	                        w.uint32(8).uint64(m.iid);
	                    if (m.value != null && Object.hasOwnProperty.call(m, "value"))
	                        w.uint32(18).string(m.value);
	                    return w;
	                };

	                /**
	                 * Decodes an InternedString message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.PerfettoMetatrace.InternedString} InternedString
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                InternedString.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.PerfettoMetatrace.InternedString();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.iid = r.uint64();
	                                break;
	                            }
	                        case 2: {
	                                m.value = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates an InternedString message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.PerfettoMetatrace.InternedString} InternedString
	                 */
	                InternedString.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.PerfettoMetatrace.InternedString)
	                        return d;
	                    var m = new $root.perfetto.protos.PerfettoMetatrace.InternedString();
	                    if (d.iid != null) {
	                        if ($util.Long)
	                            (m.iid = $util.Long.fromValue(d.iid)).unsigned = true;
	                        else if (typeof d.iid === "string")
	                            m.iid = parseInt(d.iid, 10);
	                        else if (typeof d.iid === "number")
	                            m.iid = d.iid;
	                        else if (typeof d.iid === "object")
	                            m.iid = new $util.LongBits(d.iid.low >>> 0, d.iid.high >>> 0).toNumber(true);
	                    }
	                    if (d.value != null) {
	                        m.value = String(d.value);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from an InternedString message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @static
	                 * @param {perfetto.protos.PerfettoMetatrace.InternedString} m InternedString
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                InternedString.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        if ($util.Long) {
	                            var n = new $util.Long(0, 0, true);
	                            d.iid = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                        } else
	                            d.iid = o.longs === String ? "0" : 0;
	                        d.value = "";
	                    }
	                    if (m.iid != null && m.hasOwnProperty("iid")) {
	                        if (typeof m.iid === "number")
	                            d.iid = o.longs === String ? String(m.iid) : m.iid;
	                        else
	                            d.iid = o.longs === String ? $util.Long.prototype.toString.call(m.iid) : o.longs === Number ? new $util.LongBits(m.iid.low >>> 0, m.iid.high >>> 0).toNumber(true) : m.iid;
	                    }
	                    if (m.value != null && m.hasOwnProperty("value")) {
	                        d.value = m.value;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this InternedString to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                InternedString.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for InternedString
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.PerfettoMetatrace.InternedString
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                InternedString.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.PerfettoMetatrace.InternedString";
	                };

	                return InternedString;
	            })();

	            return PerfettoMetatrace;
	        })();

	        /**
	         * TraceProcessorApiVersion enum.
	         * @name perfetto.protos.TraceProcessorApiVersion
	         * @enum {number}
	         * @property {number} TRACE_PROCESSOR_CURRENT_API_VERSION=14 TRACE_PROCESSOR_CURRENT_API_VERSION value
	         */
	        protos.TraceProcessorApiVersion = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[14] = "TRACE_PROCESSOR_CURRENT_API_VERSION"] = 14;
	            return values;
	        })();

	        protos.TraceProcessorRpcStream = (function() {

	            /**
	             * Properties of a TraceProcessorRpcStream.
	             * @memberof perfetto.protos
	             * @interface ITraceProcessorRpcStream
	             * @property {Array.<perfetto.protos.ITraceProcessorRpc>|null} [msg] TraceProcessorRpcStream msg
	             */

	            /**
	             * Constructs a new TraceProcessorRpcStream.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TraceProcessorRpcStream.
	             * @implements ITraceProcessorRpcStream
	             * @constructor
	             * @param {perfetto.protos.ITraceProcessorRpcStream=} [p] Properties to set
	             */
	            function TraceProcessorRpcStream(p) {
	                this.msg = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TraceProcessorRpcStream msg.
	             * @member {Array.<perfetto.protos.ITraceProcessorRpc>} msg
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @instance
	             */
	            TraceProcessorRpcStream.prototype.msg = $util.emptyArray;

	            /**
	             * Creates a new TraceProcessorRpcStream instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @static
	             * @param {perfetto.protos.ITraceProcessorRpcStream=} [properties] Properties to set
	             * @returns {perfetto.protos.TraceProcessorRpcStream} TraceProcessorRpcStream instance
	             */
	            TraceProcessorRpcStream.create = function create(properties) {
	                return new TraceProcessorRpcStream(properties);
	            };

	            /**
	             * Encodes the specified TraceProcessorRpcStream message. Does not implicitly {@link perfetto.protos.TraceProcessorRpcStream.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @static
	             * @param {perfetto.protos.ITraceProcessorRpcStream} m TraceProcessorRpcStream message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TraceProcessorRpcStream.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.msg != null && m.msg.length) {
	                    for (var i = 0; i < m.msg.length; ++i)
	                        $root.perfetto.protos.TraceProcessorRpc.encode(m.msg[i], w.uint32(10).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a TraceProcessorRpcStream message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TraceProcessorRpcStream} TraceProcessorRpcStream
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TraceProcessorRpcStream.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceProcessorRpcStream();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.msg && m.msg.length))
	                                m.msg = [];
	                            m.msg.push($root.perfetto.protos.TraceProcessorRpc.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TraceProcessorRpcStream message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TraceProcessorRpcStream} TraceProcessorRpcStream
	             */
	            TraceProcessorRpcStream.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TraceProcessorRpcStream)
	                    return d;
	                var m = new $root.perfetto.protos.TraceProcessorRpcStream();
	                if (d.msg) {
	                    if (!Array.isArray(d.msg))
	                        throw TypeError(".perfetto.protos.TraceProcessorRpcStream.msg: array expected");
	                    m.msg = [];
	                    for (var i = 0; i < d.msg.length; ++i) {
	                        if (typeof d.msg[i] !== "object")
	                            throw TypeError(".perfetto.protos.TraceProcessorRpcStream.msg: object expected");
	                        m.msg[i] = $root.perfetto.protos.TraceProcessorRpc.fromObject(d.msg[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TraceProcessorRpcStream message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @static
	             * @param {perfetto.protos.TraceProcessorRpcStream} m TraceProcessorRpcStream
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TraceProcessorRpcStream.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.msg = [];
	                }
	                if (m.msg && m.msg.length) {
	                    d.msg = [];
	                    for (var j = 0; j < m.msg.length; ++j) {
	                        d.msg[j] = $root.perfetto.protos.TraceProcessorRpc.toObject(m.msg[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this TraceProcessorRpcStream to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TraceProcessorRpcStream.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TraceProcessorRpcStream
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TraceProcessorRpcStream
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TraceProcessorRpcStream.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TraceProcessorRpcStream";
	            };

	            return TraceProcessorRpcStream;
	        })();

	        protos.TraceProcessorRpc = (function() {

	            /**
	             * Properties of a TraceProcessorRpc.
	             * @memberof perfetto.protos
	             * @interface ITraceProcessorRpc
	             * @property {number|null} [seq] TraceProcessorRpc seq
	             * @property {string|null} [fatalError] TraceProcessorRpc fatalError
	             * @property {perfetto.protos.TraceProcessorRpc.TraceProcessorMethod|null} [request] TraceProcessorRpc request
	             * @property {perfetto.protos.TraceProcessorRpc.TraceProcessorMethod|null} [response] TraceProcessorRpc response
	             * @property {perfetto.protos.TraceProcessorRpc.TraceProcessorMethod|null} [invalidRequest] TraceProcessorRpc invalidRequest
	             * @property {Uint8Array|null} [appendTraceData] TraceProcessorRpc appendTraceData
	             * @property {perfetto.protos.IQueryArgs|null} [queryArgs] TraceProcessorRpc queryArgs
	             * @property {perfetto.protos.IComputeMetricArgs|null} [computeMetricArgs] TraceProcessorRpc computeMetricArgs
	             * @property {perfetto.protos.IEnableMetatraceArgs|null} [enableMetatraceArgs] TraceProcessorRpc enableMetatraceArgs
	             * @property {perfetto.protos.IResetTraceProcessorArgs|null} [resetTraceProcessorArgs] TraceProcessorRpc resetTraceProcessorArgs
	             * @property {perfetto.protos.IRegisterSqlPackageArgs|null} [registerSqlPackageArgs] TraceProcessorRpc registerSqlPackageArgs
	             * @property {perfetto.protos.IAppendTraceDataResult|null} [appendResult] TraceProcessorRpc appendResult
	             * @property {perfetto.protos.IQueryResult|null} [queryResult] TraceProcessorRpc queryResult
	             * @property {perfetto.protos.IComputeMetricResult|null} [metricResult] TraceProcessorRpc metricResult
	             * @property {perfetto.protos.IDescriptorSet|null} [metricDescriptors] TraceProcessorRpc metricDescriptors
	             * @property {perfetto.protos.IDisableAndReadMetatraceResult|null} [metatrace] TraceProcessorRpc metatrace
	             * @property {perfetto.protos.IStatusResult|null} [status] TraceProcessorRpc status
	             * @property {perfetto.protos.IRegisterSqlPackageResult|null} [registerSqlPackageResult] TraceProcessorRpc registerSqlPackageResult
	             * @property {perfetto.protos.IFinalizeDataResult|null} [finalizeDataResult] TraceProcessorRpc finalizeDataResult
	             */

	            /**
	             * Constructs a new TraceProcessorRpc.
	             * @memberof perfetto.protos
	             * @classdesc Represents a TraceProcessorRpc.
	             * @implements ITraceProcessorRpc
	             * @constructor
	             * @param {perfetto.protos.ITraceProcessorRpc=} [p] Properties to set
	             */
	            function TraceProcessorRpc(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * TraceProcessorRpc seq.
	             * @member {number} seq
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * TraceProcessorRpc fatalError.
	             * @member {string} fatalError
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.fatalError = "";

	            /**
	             * TraceProcessorRpc request.
	             * @member {perfetto.protos.TraceProcessorRpc.TraceProcessorMethod|null|undefined} request
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.request = null;

	            /**
	             * TraceProcessorRpc response.
	             * @member {perfetto.protos.TraceProcessorRpc.TraceProcessorMethod|null|undefined} response
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.response = null;

	            /**
	             * TraceProcessorRpc invalidRequest.
	             * @member {perfetto.protos.TraceProcessorRpc.TraceProcessorMethod|null|undefined} invalidRequest
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.invalidRequest = null;

	            /**
	             * TraceProcessorRpc appendTraceData.
	             * @member {Uint8Array|null|undefined} appendTraceData
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.appendTraceData = null;

	            /**
	             * TraceProcessorRpc queryArgs.
	             * @member {perfetto.protos.IQueryArgs|null|undefined} queryArgs
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.queryArgs = null;

	            /**
	             * TraceProcessorRpc computeMetricArgs.
	             * @member {perfetto.protos.IComputeMetricArgs|null|undefined} computeMetricArgs
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.computeMetricArgs = null;

	            /**
	             * TraceProcessorRpc enableMetatraceArgs.
	             * @member {perfetto.protos.IEnableMetatraceArgs|null|undefined} enableMetatraceArgs
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.enableMetatraceArgs = null;

	            /**
	             * TraceProcessorRpc resetTraceProcessorArgs.
	             * @member {perfetto.protos.IResetTraceProcessorArgs|null|undefined} resetTraceProcessorArgs
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.resetTraceProcessorArgs = null;

	            /**
	             * TraceProcessorRpc registerSqlPackageArgs.
	             * @member {perfetto.protos.IRegisterSqlPackageArgs|null|undefined} registerSqlPackageArgs
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.registerSqlPackageArgs = null;

	            /**
	             * TraceProcessorRpc appendResult.
	             * @member {perfetto.protos.IAppendTraceDataResult|null|undefined} appendResult
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.appendResult = null;

	            /**
	             * TraceProcessorRpc queryResult.
	             * @member {perfetto.protos.IQueryResult|null|undefined} queryResult
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.queryResult = null;

	            /**
	             * TraceProcessorRpc metricResult.
	             * @member {perfetto.protos.IComputeMetricResult|null|undefined} metricResult
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.metricResult = null;

	            /**
	             * TraceProcessorRpc metricDescriptors.
	             * @member {perfetto.protos.IDescriptorSet|null|undefined} metricDescriptors
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.metricDescriptors = null;

	            /**
	             * TraceProcessorRpc metatrace.
	             * @member {perfetto.protos.IDisableAndReadMetatraceResult|null|undefined} metatrace
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.metatrace = null;

	            /**
	             * TraceProcessorRpc status.
	             * @member {perfetto.protos.IStatusResult|null|undefined} status
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.status = null;

	            /**
	             * TraceProcessorRpc registerSqlPackageResult.
	             * @member {perfetto.protos.IRegisterSqlPackageResult|null|undefined} registerSqlPackageResult
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.registerSqlPackageResult = null;

	            /**
	             * TraceProcessorRpc finalizeDataResult.
	             * @member {perfetto.protos.IFinalizeDataResult|null|undefined} finalizeDataResult
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            TraceProcessorRpc.prototype.finalizeDataResult = null;

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * TraceProcessorRpc type.
	             * @member {"request"|"response"|"invalidRequest"|undefined} type
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            Object.defineProperty(TraceProcessorRpc.prototype, "type", {
	                get: $util.oneOfGetter($oneOfFields = ["request", "response", "invalidRequest"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * TraceProcessorRpc args.
	             * @member {"appendTraceData"|"queryArgs"|"computeMetricArgs"|"enableMetatraceArgs"|"resetTraceProcessorArgs"|"registerSqlPackageArgs"|"appendResult"|"queryResult"|"metricResult"|"metricDescriptors"|"metatrace"|"status"|"registerSqlPackageResult"|"finalizeDataResult"|undefined} args
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             */
	            Object.defineProperty(TraceProcessorRpc.prototype, "args", {
	                get: $util.oneOfGetter($oneOfFields = ["appendTraceData", "queryArgs", "computeMetricArgs", "enableMetatraceArgs", "resetTraceProcessorArgs", "registerSqlPackageArgs", "appendResult", "queryResult", "metricResult", "metricDescriptors", "metatrace", "status", "registerSqlPackageResult", "finalizeDataResult"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new TraceProcessorRpc instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @static
	             * @param {perfetto.protos.ITraceProcessorRpc=} [properties] Properties to set
	             * @returns {perfetto.protos.TraceProcessorRpc} TraceProcessorRpc instance
	             */
	            TraceProcessorRpc.create = function create(properties) {
	                return new TraceProcessorRpc(properties);
	            };

	            /**
	             * Encodes the specified TraceProcessorRpc message. Does not implicitly {@link perfetto.protos.TraceProcessorRpc.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @static
	             * @param {perfetto.protos.ITraceProcessorRpc} m TraceProcessorRpc message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            TraceProcessorRpc.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.seq != null && Object.hasOwnProperty.call(m, "seq"))
	                    w.uint32(8).int64(m.seq);
	                if (m.request != null && Object.hasOwnProperty.call(m, "request"))
	                    w.uint32(16).int32(m.request);
	                if (m.response != null && Object.hasOwnProperty.call(m, "response"))
	                    w.uint32(24).int32(m.response);
	                if (m.invalidRequest != null && Object.hasOwnProperty.call(m, "invalidRequest"))
	                    w.uint32(32).int32(m.invalidRequest);
	                if (m.fatalError != null && Object.hasOwnProperty.call(m, "fatalError"))
	                    w.uint32(42).string(m.fatalError);
	                if (m.appendTraceData != null && Object.hasOwnProperty.call(m, "appendTraceData"))
	                    w.uint32(810).bytes(m.appendTraceData);
	                if (m.queryArgs != null && Object.hasOwnProperty.call(m, "queryArgs"))
	                    $root.perfetto.protos.QueryArgs.encode(m.queryArgs, w.uint32(826).fork()).ldelim();
	                if (m.computeMetricArgs != null && Object.hasOwnProperty.call(m, "computeMetricArgs"))
	                    $root.perfetto.protos.ComputeMetricArgs.encode(m.computeMetricArgs, w.uint32(842).fork()).ldelim();
	                if (m.enableMetatraceArgs != null && Object.hasOwnProperty.call(m, "enableMetatraceArgs"))
	                    $root.perfetto.protos.EnableMetatraceArgs.encode(m.enableMetatraceArgs, w.uint32(850).fork()).ldelim();
	                if (m.resetTraceProcessorArgs != null && Object.hasOwnProperty.call(m, "resetTraceProcessorArgs"))
	                    $root.perfetto.protos.ResetTraceProcessorArgs.encode(m.resetTraceProcessorArgs, w.uint32(858).fork()).ldelim();
	                if (m.registerSqlPackageArgs != null && Object.hasOwnProperty.call(m, "registerSqlPackageArgs"))
	                    $root.perfetto.protos.RegisterSqlPackageArgs.encode(m.registerSqlPackageArgs, w.uint32(866).fork()).ldelim();
	                if (m.appendResult != null && Object.hasOwnProperty.call(m, "appendResult"))
	                    $root.perfetto.protos.AppendTraceDataResult.encode(m.appendResult, w.uint32(1610).fork()).ldelim();
	                if (m.queryResult != null && Object.hasOwnProperty.call(m, "queryResult"))
	                    $root.perfetto.protos.QueryResult.encode(m.queryResult, w.uint32(1626).fork()).ldelim();
	                if (m.metricResult != null && Object.hasOwnProperty.call(m, "metricResult"))
	                    $root.perfetto.protos.ComputeMetricResult.encode(m.metricResult, w.uint32(1642).fork()).ldelim();
	                if (m.metricDescriptors != null && Object.hasOwnProperty.call(m, "metricDescriptors"))
	                    $root.perfetto.protos.DescriptorSet.encode(m.metricDescriptors, w.uint32(1650).fork()).ldelim();
	                if (m.metatrace != null && Object.hasOwnProperty.call(m, "metatrace"))
	                    $root.perfetto.protos.DisableAndReadMetatraceResult.encode(m.metatrace, w.uint32(1674).fork()).ldelim();
	                if (m.status != null && Object.hasOwnProperty.call(m, "status"))
	                    $root.perfetto.protos.StatusResult.encode(m.status, w.uint32(1682).fork()).ldelim();
	                if (m.registerSqlPackageResult != null && Object.hasOwnProperty.call(m, "registerSqlPackageResult"))
	                    $root.perfetto.protos.RegisterSqlPackageResult.encode(m.registerSqlPackageResult, w.uint32(1690).fork()).ldelim();
	                if (m.finalizeDataResult != null && Object.hasOwnProperty.call(m, "finalizeDataResult"))
	                    $root.perfetto.protos.FinalizeDataResult.encode(m.finalizeDataResult, w.uint32(1698).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes a TraceProcessorRpc message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.TraceProcessorRpc} TraceProcessorRpc
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            TraceProcessorRpc.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.TraceProcessorRpc();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.seq = r.int64();
	                            break;
	                        }
	                    case 5: {
	                            m.fatalError = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.request = r.int32();
	                            break;
	                        }
	                    case 3: {
	                            m.response = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            m.invalidRequest = r.int32();
	                            break;
	                        }
	                    case 101: {
	                            m.appendTraceData = r.bytes();
	                            break;
	                        }
	                    case 103: {
	                            m.queryArgs = $root.perfetto.protos.QueryArgs.decode(r, r.uint32());
	                            break;
	                        }
	                    case 105: {
	                            m.computeMetricArgs = $root.perfetto.protos.ComputeMetricArgs.decode(r, r.uint32());
	                            break;
	                        }
	                    case 106: {
	                            m.enableMetatraceArgs = $root.perfetto.protos.EnableMetatraceArgs.decode(r, r.uint32());
	                            break;
	                        }
	                    case 107: {
	                            m.resetTraceProcessorArgs = $root.perfetto.protos.ResetTraceProcessorArgs.decode(r, r.uint32());
	                            break;
	                        }
	                    case 108: {
	                            m.registerSqlPackageArgs = $root.perfetto.protos.RegisterSqlPackageArgs.decode(r, r.uint32());
	                            break;
	                        }
	                    case 201: {
	                            m.appendResult = $root.perfetto.protos.AppendTraceDataResult.decode(r, r.uint32());
	                            break;
	                        }
	                    case 203: {
	                            m.queryResult = $root.perfetto.protos.QueryResult.decode(r, r.uint32());
	                            break;
	                        }
	                    case 205: {
	                            m.metricResult = $root.perfetto.protos.ComputeMetricResult.decode(r, r.uint32());
	                            break;
	                        }
	                    case 206: {
	                            m.metricDescriptors = $root.perfetto.protos.DescriptorSet.decode(r, r.uint32());
	                            break;
	                        }
	                    case 209: {
	                            m.metatrace = $root.perfetto.protos.DisableAndReadMetatraceResult.decode(r, r.uint32());
	                            break;
	                        }
	                    case 210: {
	                            m.status = $root.perfetto.protos.StatusResult.decode(r, r.uint32());
	                            break;
	                        }
	                    case 211: {
	                            m.registerSqlPackageResult = $root.perfetto.protos.RegisterSqlPackageResult.decode(r, r.uint32());
	                            break;
	                        }
	                    case 212: {
	                            m.finalizeDataResult = $root.perfetto.protos.FinalizeDataResult.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a TraceProcessorRpc message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.TraceProcessorRpc} TraceProcessorRpc
	             */
	            TraceProcessorRpc.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.TraceProcessorRpc)
	                    return d;
	                var m = new $root.perfetto.protos.TraceProcessorRpc();
	                if (d.seq != null) {
	                    if ($util.Long)
	                        (m.seq = $util.Long.fromValue(d.seq)).unsigned = false;
	                    else if (typeof d.seq === "string")
	                        m.seq = parseInt(d.seq, 10);
	                    else if (typeof d.seq === "number")
	                        m.seq = d.seq;
	                    else if (typeof d.seq === "object")
	                        m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber();
	                }
	                if (d.fatalError != null) {
	                    m.fatalError = String(d.fatalError);
	                }
	                switch (d.request) {
	                default:
	                    if (typeof d.request === "number") {
	                        m.request = d.request;
	                        break;
	                    }
	                    break;
	                case "TPM_UNSPECIFIED":
	                case 0:
	                    m.request = 0;
	                    break;
	                case "TPM_APPEND_TRACE_DATA":
	                case 1:
	                    m.request = 1;
	                    break;
	                case "TPM_FINALIZE_TRACE_DATA":
	                case 2:
	                    m.request = 2;
	                    break;
	                case "TPM_QUERY_STREAMING":
	                case 3:
	                    m.request = 3;
	                    break;
	                case "TPM_COMPUTE_METRIC":
	                case 5:
	                    m.request = 5;
	                    break;
	                case "TPM_GET_METRIC_DESCRIPTORS":
	                case 6:
	                    m.request = 6;
	                    break;
	                case "TPM_RESTORE_INITIAL_TABLES":
	                case 7:
	                    m.request = 7;
	                    break;
	                case "TPM_ENABLE_METATRACE":
	                case 8:
	                    m.request = 8;
	                    break;
	                case "TPM_DISABLE_AND_READ_METATRACE":
	                case 9:
	                    m.request = 9;
	                    break;
	                case "TPM_GET_STATUS":
	                case 10:
	                    m.request = 10;
	                    break;
	                case "TPM_RESET_TRACE_PROCESSOR":
	                case 11:
	                    m.request = 11;
	                    break;
	                case "TPM_REGISTER_SQL_PACKAGE":
	                case 13:
	                    m.request = 13;
	                    break;
	                }
	                switch (d.response) {
	                default:
	                    if (typeof d.response === "number") {
	                        m.response = d.response;
	                        break;
	                    }
	                    break;
	                case "TPM_UNSPECIFIED":
	                case 0:
	                    m.response = 0;
	                    break;
	                case "TPM_APPEND_TRACE_DATA":
	                case 1:
	                    m.response = 1;
	                    break;
	                case "TPM_FINALIZE_TRACE_DATA":
	                case 2:
	                    m.response = 2;
	                    break;
	                case "TPM_QUERY_STREAMING":
	                case 3:
	                    m.response = 3;
	                    break;
	                case "TPM_COMPUTE_METRIC":
	                case 5:
	                    m.response = 5;
	                    break;
	                case "TPM_GET_METRIC_DESCRIPTORS":
	                case 6:
	                    m.response = 6;
	                    break;
	                case "TPM_RESTORE_INITIAL_TABLES":
	                case 7:
	                    m.response = 7;
	                    break;
	                case "TPM_ENABLE_METATRACE":
	                case 8:
	                    m.response = 8;
	                    break;
	                case "TPM_DISABLE_AND_READ_METATRACE":
	                case 9:
	                    m.response = 9;
	                    break;
	                case "TPM_GET_STATUS":
	                case 10:
	                    m.response = 10;
	                    break;
	                case "TPM_RESET_TRACE_PROCESSOR":
	                case 11:
	                    m.response = 11;
	                    break;
	                case "TPM_REGISTER_SQL_PACKAGE":
	                case 13:
	                    m.response = 13;
	                    break;
	                }
	                switch (d.invalidRequest) {
	                default:
	                    if (typeof d.invalidRequest === "number") {
	                        m.invalidRequest = d.invalidRequest;
	                        break;
	                    }
	                    break;
	                case "TPM_UNSPECIFIED":
	                case 0:
	                    m.invalidRequest = 0;
	                    break;
	                case "TPM_APPEND_TRACE_DATA":
	                case 1:
	                    m.invalidRequest = 1;
	                    break;
	                case "TPM_FINALIZE_TRACE_DATA":
	                case 2:
	                    m.invalidRequest = 2;
	                    break;
	                case "TPM_QUERY_STREAMING":
	                case 3:
	                    m.invalidRequest = 3;
	                    break;
	                case "TPM_COMPUTE_METRIC":
	                case 5:
	                    m.invalidRequest = 5;
	                    break;
	                case "TPM_GET_METRIC_DESCRIPTORS":
	                case 6:
	                    m.invalidRequest = 6;
	                    break;
	                case "TPM_RESTORE_INITIAL_TABLES":
	                case 7:
	                    m.invalidRequest = 7;
	                    break;
	                case "TPM_ENABLE_METATRACE":
	                case 8:
	                    m.invalidRequest = 8;
	                    break;
	                case "TPM_DISABLE_AND_READ_METATRACE":
	                case 9:
	                    m.invalidRequest = 9;
	                    break;
	                case "TPM_GET_STATUS":
	                case 10:
	                    m.invalidRequest = 10;
	                    break;
	                case "TPM_RESET_TRACE_PROCESSOR":
	                case 11:
	                    m.invalidRequest = 11;
	                    break;
	                case "TPM_REGISTER_SQL_PACKAGE":
	                case 13:
	                    m.invalidRequest = 13;
	                    break;
	                }
	                if (d.appendTraceData != null) {
	                    if (typeof d.appendTraceData === "string")
	                        $util.base64.decode(d.appendTraceData, m.appendTraceData = $util.newBuffer($util.base64.length(d.appendTraceData)), 0);
	                    else if (d.appendTraceData.length >= 0)
	                        m.appendTraceData = d.appendTraceData;
	                }
	                if (d.queryArgs != null) {
	                    if (typeof d.queryArgs !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.queryArgs: object expected");
	                    m.queryArgs = $root.perfetto.protos.QueryArgs.fromObject(d.queryArgs);
	                }
	                if (d.computeMetricArgs != null) {
	                    if (typeof d.computeMetricArgs !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.computeMetricArgs: object expected");
	                    m.computeMetricArgs = $root.perfetto.protos.ComputeMetricArgs.fromObject(d.computeMetricArgs);
	                }
	                if (d.enableMetatraceArgs != null) {
	                    if (typeof d.enableMetatraceArgs !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.enableMetatraceArgs: object expected");
	                    m.enableMetatraceArgs = $root.perfetto.protos.EnableMetatraceArgs.fromObject(d.enableMetatraceArgs);
	                }
	                if (d.resetTraceProcessorArgs != null) {
	                    if (typeof d.resetTraceProcessorArgs !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.resetTraceProcessorArgs: object expected");
	                    m.resetTraceProcessorArgs = $root.perfetto.protos.ResetTraceProcessorArgs.fromObject(d.resetTraceProcessorArgs);
	                }
	                if (d.registerSqlPackageArgs != null) {
	                    if (typeof d.registerSqlPackageArgs !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.registerSqlPackageArgs: object expected");
	                    m.registerSqlPackageArgs = $root.perfetto.protos.RegisterSqlPackageArgs.fromObject(d.registerSqlPackageArgs);
	                }
	                if (d.appendResult != null) {
	                    if (typeof d.appendResult !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.appendResult: object expected");
	                    m.appendResult = $root.perfetto.protos.AppendTraceDataResult.fromObject(d.appendResult);
	                }
	                if (d.queryResult != null) {
	                    if (typeof d.queryResult !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.queryResult: object expected");
	                    m.queryResult = $root.perfetto.protos.QueryResult.fromObject(d.queryResult);
	                }
	                if (d.metricResult != null) {
	                    if (typeof d.metricResult !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.metricResult: object expected");
	                    m.metricResult = $root.perfetto.protos.ComputeMetricResult.fromObject(d.metricResult);
	                }
	                if (d.metricDescriptors != null) {
	                    if (typeof d.metricDescriptors !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.metricDescriptors: object expected");
	                    m.metricDescriptors = $root.perfetto.protos.DescriptorSet.fromObject(d.metricDescriptors);
	                }
	                if (d.metatrace != null) {
	                    if (typeof d.metatrace !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.metatrace: object expected");
	                    m.metatrace = $root.perfetto.protos.DisableAndReadMetatraceResult.fromObject(d.metatrace);
	                }
	                if (d.status != null) {
	                    if (typeof d.status !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.status: object expected");
	                    m.status = $root.perfetto.protos.StatusResult.fromObject(d.status);
	                }
	                if (d.registerSqlPackageResult != null) {
	                    if (typeof d.registerSqlPackageResult !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.registerSqlPackageResult: object expected");
	                    m.registerSqlPackageResult = $root.perfetto.protos.RegisterSqlPackageResult.fromObject(d.registerSqlPackageResult);
	                }
	                if (d.finalizeDataResult != null) {
	                    if (typeof d.finalizeDataResult !== "object")
	                        throw TypeError(".perfetto.protos.TraceProcessorRpc.finalizeDataResult: object expected");
	                    m.finalizeDataResult = $root.perfetto.protos.FinalizeDataResult.fromObject(d.finalizeDataResult);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a TraceProcessorRpc message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @static
	             * @param {perfetto.protos.TraceProcessorRpc} m TraceProcessorRpc
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            TraceProcessorRpc.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.seq = o.longs === String ? "0" : 0;
	                    d.fatalError = "";
	                }
	                if (m.seq != null && m.hasOwnProperty("seq")) {
	                    if (typeof m.seq === "number")
	                        d.seq = o.longs === String ? String(m.seq) : m.seq;
	                    else
	                        d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber() : m.seq;
	                }
	                if (m.request != null && m.hasOwnProperty("request")) {
	                    d.request = o.enums === String ? $root.perfetto.protos.TraceProcessorRpc.TraceProcessorMethod[m.request] === undefined ? m.request : $root.perfetto.protos.TraceProcessorRpc.TraceProcessorMethod[m.request] : m.request;
	                    if (o.oneofs)
	                        d.type = "request";
	                }
	                if (m.response != null && m.hasOwnProperty("response")) {
	                    d.response = o.enums === String ? $root.perfetto.protos.TraceProcessorRpc.TraceProcessorMethod[m.response] === undefined ? m.response : $root.perfetto.protos.TraceProcessorRpc.TraceProcessorMethod[m.response] : m.response;
	                    if (o.oneofs)
	                        d.type = "response";
	                }
	                if (m.invalidRequest != null && m.hasOwnProperty("invalidRequest")) {
	                    d.invalidRequest = o.enums === String ? $root.perfetto.protos.TraceProcessorRpc.TraceProcessorMethod[m.invalidRequest] === undefined ? m.invalidRequest : $root.perfetto.protos.TraceProcessorRpc.TraceProcessorMethod[m.invalidRequest] : m.invalidRequest;
	                    if (o.oneofs)
	                        d.type = "invalidRequest";
	                }
	                if (m.fatalError != null && m.hasOwnProperty("fatalError")) {
	                    d.fatalError = m.fatalError;
	                }
	                if (m.appendTraceData != null && m.hasOwnProperty("appendTraceData")) {
	                    d.appendTraceData = o.bytes === String ? $util.base64.encode(m.appendTraceData, 0, m.appendTraceData.length) : o.bytes === Array ? Array.prototype.slice.call(m.appendTraceData) : m.appendTraceData;
	                    if (o.oneofs)
	                        d.args = "appendTraceData";
	                }
	                if (m.queryArgs != null && m.hasOwnProperty("queryArgs")) {
	                    d.queryArgs = $root.perfetto.protos.QueryArgs.toObject(m.queryArgs, o);
	                    if (o.oneofs)
	                        d.args = "queryArgs";
	                }
	                if (m.computeMetricArgs != null && m.hasOwnProperty("computeMetricArgs")) {
	                    d.computeMetricArgs = $root.perfetto.protos.ComputeMetricArgs.toObject(m.computeMetricArgs, o);
	                    if (o.oneofs)
	                        d.args = "computeMetricArgs";
	                }
	                if (m.enableMetatraceArgs != null && m.hasOwnProperty("enableMetatraceArgs")) {
	                    d.enableMetatraceArgs = $root.perfetto.protos.EnableMetatraceArgs.toObject(m.enableMetatraceArgs, o);
	                    if (o.oneofs)
	                        d.args = "enableMetatraceArgs";
	                }
	                if (m.resetTraceProcessorArgs != null && m.hasOwnProperty("resetTraceProcessorArgs")) {
	                    d.resetTraceProcessorArgs = $root.perfetto.protos.ResetTraceProcessorArgs.toObject(m.resetTraceProcessorArgs, o);
	                    if (o.oneofs)
	                        d.args = "resetTraceProcessorArgs";
	                }
	                if (m.registerSqlPackageArgs != null && m.hasOwnProperty("registerSqlPackageArgs")) {
	                    d.registerSqlPackageArgs = $root.perfetto.protos.RegisterSqlPackageArgs.toObject(m.registerSqlPackageArgs, o);
	                    if (o.oneofs)
	                        d.args = "registerSqlPackageArgs";
	                }
	                if (m.appendResult != null && m.hasOwnProperty("appendResult")) {
	                    d.appendResult = $root.perfetto.protos.AppendTraceDataResult.toObject(m.appendResult, o);
	                    if (o.oneofs)
	                        d.args = "appendResult";
	                }
	                if (m.queryResult != null && m.hasOwnProperty("queryResult")) {
	                    d.queryResult = $root.perfetto.protos.QueryResult.toObject(m.queryResult, o);
	                    if (o.oneofs)
	                        d.args = "queryResult";
	                }
	                if (m.metricResult != null && m.hasOwnProperty("metricResult")) {
	                    d.metricResult = $root.perfetto.protos.ComputeMetricResult.toObject(m.metricResult, o);
	                    if (o.oneofs)
	                        d.args = "metricResult";
	                }
	                if (m.metricDescriptors != null && m.hasOwnProperty("metricDescriptors")) {
	                    d.metricDescriptors = $root.perfetto.protos.DescriptorSet.toObject(m.metricDescriptors, o);
	                    if (o.oneofs)
	                        d.args = "metricDescriptors";
	                }
	                if (m.metatrace != null && m.hasOwnProperty("metatrace")) {
	                    d.metatrace = $root.perfetto.protos.DisableAndReadMetatraceResult.toObject(m.metatrace, o);
	                    if (o.oneofs)
	                        d.args = "metatrace";
	                }
	                if (m.status != null && m.hasOwnProperty("status")) {
	                    d.status = $root.perfetto.protos.StatusResult.toObject(m.status, o);
	                    if (o.oneofs)
	                        d.args = "status";
	                }
	                if (m.registerSqlPackageResult != null && m.hasOwnProperty("registerSqlPackageResult")) {
	                    d.registerSqlPackageResult = $root.perfetto.protos.RegisterSqlPackageResult.toObject(m.registerSqlPackageResult, o);
	                    if (o.oneofs)
	                        d.args = "registerSqlPackageResult";
	                }
	                if (m.finalizeDataResult != null && m.hasOwnProperty("finalizeDataResult")) {
	                    d.finalizeDataResult = $root.perfetto.protos.FinalizeDataResult.toObject(m.finalizeDataResult, o);
	                    if (o.oneofs)
	                        d.args = "finalizeDataResult";
	                }
	                return d;
	            };

	            /**
	             * Converts this TraceProcessorRpc to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            TraceProcessorRpc.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for TraceProcessorRpc
	             * @function getTypeUrl
	             * @memberof perfetto.protos.TraceProcessorRpc
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            TraceProcessorRpc.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.TraceProcessorRpc";
	            };

	            /**
	             * TraceProcessorMethod enum.
	             * @name perfetto.protos.TraceProcessorRpc.TraceProcessorMethod
	             * @enum {number}
	             * @property {number} TPM_UNSPECIFIED=0 TPM_UNSPECIFIED value
	             * @property {number} TPM_APPEND_TRACE_DATA=1 TPM_APPEND_TRACE_DATA value
	             * @property {number} TPM_FINALIZE_TRACE_DATA=2 TPM_FINALIZE_TRACE_DATA value
	             * @property {number} TPM_QUERY_STREAMING=3 TPM_QUERY_STREAMING value
	             * @property {number} TPM_COMPUTE_METRIC=5 TPM_COMPUTE_METRIC value
	             * @property {number} TPM_GET_METRIC_DESCRIPTORS=6 TPM_GET_METRIC_DESCRIPTORS value
	             * @property {number} TPM_RESTORE_INITIAL_TABLES=7 TPM_RESTORE_INITIAL_TABLES value
	             * @property {number} TPM_ENABLE_METATRACE=8 TPM_ENABLE_METATRACE value
	             * @property {number} TPM_DISABLE_AND_READ_METATRACE=9 TPM_DISABLE_AND_READ_METATRACE value
	             * @property {number} TPM_GET_STATUS=10 TPM_GET_STATUS value
	             * @property {number} TPM_RESET_TRACE_PROCESSOR=11 TPM_RESET_TRACE_PROCESSOR value
	             * @property {number} TPM_REGISTER_SQL_PACKAGE=13 TPM_REGISTER_SQL_PACKAGE value
	             */
	            TraceProcessorRpc.TraceProcessorMethod = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "TPM_UNSPECIFIED"] = 0;
	                values[valuesById[1] = "TPM_APPEND_TRACE_DATA"] = 1;
	                values[valuesById[2] = "TPM_FINALIZE_TRACE_DATA"] = 2;
	                values[valuesById[3] = "TPM_QUERY_STREAMING"] = 3;
	                values[valuesById[5] = "TPM_COMPUTE_METRIC"] = 5;
	                values[valuesById[6] = "TPM_GET_METRIC_DESCRIPTORS"] = 6;
	                values[valuesById[7] = "TPM_RESTORE_INITIAL_TABLES"] = 7;
	                values[valuesById[8] = "TPM_ENABLE_METATRACE"] = 8;
	                values[valuesById[9] = "TPM_DISABLE_AND_READ_METATRACE"] = 9;
	                values[valuesById[10] = "TPM_GET_STATUS"] = 10;
	                values[valuesById[11] = "TPM_RESET_TRACE_PROCESSOR"] = 11;
	                values[valuesById[13] = "TPM_REGISTER_SQL_PACKAGE"] = 13;
	                return values;
	            })();

	            return TraceProcessorRpc;
	        })();

	        protos.AppendTraceDataResult = (function() {

	            /**
	             * Properties of an AppendTraceDataResult.
	             * @memberof perfetto.protos
	             * @interface IAppendTraceDataResult
	             * @property {number|null} [totalBytesParsed] AppendTraceDataResult totalBytesParsed
	             * @property {string|null} [error] AppendTraceDataResult error
	             */

	            /**
	             * Constructs a new AppendTraceDataResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents an AppendTraceDataResult.
	             * @implements IAppendTraceDataResult
	             * @constructor
	             * @param {perfetto.protos.IAppendTraceDataResult=} [p] Properties to set
	             */
	            function AppendTraceDataResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * AppendTraceDataResult totalBytesParsed.
	             * @member {number} totalBytesParsed
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @instance
	             */
	            AppendTraceDataResult.prototype.totalBytesParsed = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * AppendTraceDataResult error.
	             * @member {string} error
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @instance
	             */
	            AppendTraceDataResult.prototype.error = "";

	            /**
	             * Creates a new AppendTraceDataResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @static
	             * @param {perfetto.protos.IAppendTraceDataResult=} [properties] Properties to set
	             * @returns {perfetto.protos.AppendTraceDataResult} AppendTraceDataResult instance
	             */
	            AppendTraceDataResult.create = function create(properties) {
	                return new AppendTraceDataResult(properties);
	            };

	            /**
	             * Encodes the specified AppendTraceDataResult message. Does not implicitly {@link perfetto.protos.AppendTraceDataResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @static
	             * @param {perfetto.protos.IAppendTraceDataResult} m AppendTraceDataResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            AppendTraceDataResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.totalBytesParsed != null && Object.hasOwnProperty.call(m, "totalBytesParsed"))
	                    w.uint32(8).int64(m.totalBytesParsed);
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(18).string(m.error);
	                return w;
	            };

	            /**
	             * Decodes an AppendTraceDataResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.AppendTraceDataResult} AppendTraceDataResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            AppendTraceDataResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.AppendTraceDataResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.totalBytesParsed = r.int64();
	                            break;
	                        }
	                    case 2: {
	                            m.error = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an AppendTraceDataResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.AppendTraceDataResult} AppendTraceDataResult
	             */
	            AppendTraceDataResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.AppendTraceDataResult)
	                    return d;
	                var m = new $root.perfetto.protos.AppendTraceDataResult();
	                if (d.totalBytesParsed != null) {
	                    if ($util.Long)
	                        (m.totalBytesParsed = $util.Long.fromValue(d.totalBytesParsed)).unsigned = false;
	                    else if (typeof d.totalBytesParsed === "string")
	                        m.totalBytesParsed = parseInt(d.totalBytesParsed, 10);
	                    else if (typeof d.totalBytesParsed === "number")
	                        m.totalBytesParsed = d.totalBytesParsed;
	                    else if (typeof d.totalBytesParsed === "object")
	                        m.totalBytesParsed = new $util.LongBits(d.totalBytesParsed.low >>> 0, d.totalBytesParsed.high >>> 0).toNumber();
	                }
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an AppendTraceDataResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @static
	             * @param {perfetto.protos.AppendTraceDataResult} m AppendTraceDataResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            AppendTraceDataResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.totalBytesParsed = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.totalBytesParsed = o.longs === String ? "0" : 0;
	                    d.error = "";
	                }
	                if (m.totalBytesParsed != null && m.hasOwnProperty("totalBytesParsed")) {
	                    if (typeof m.totalBytesParsed === "number")
	                        d.totalBytesParsed = o.longs === String ? String(m.totalBytesParsed) : m.totalBytesParsed;
	                    else
	                        d.totalBytesParsed = o.longs === String ? $util.Long.prototype.toString.call(m.totalBytesParsed) : o.longs === Number ? new $util.LongBits(m.totalBytesParsed.low >>> 0, m.totalBytesParsed.high >>> 0).toNumber() : m.totalBytesParsed;
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                return d;
	            };

	            /**
	             * Converts this AppendTraceDataResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            AppendTraceDataResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for AppendTraceDataResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.AppendTraceDataResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            AppendTraceDataResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.AppendTraceDataResult";
	            };

	            return AppendTraceDataResult;
	        })();

	        protos.QueryArgs = (function() {

	            /**
	             * Properties of a QueryArgs.
	             * @memberof perfetto.protos
	             * @interface IQueryArgs
	             * @property {string|null} [sqlQuery] QueryArgs sqlQuery
	             * @property {string|null} [tag] QueryArgs tag
	             */

	            /**
	             * Constructs a new QueryArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents a QueryArgs.
	             * @implements IQueryArgs
	             * @constructor
	             * @param {perfetto.protos.IQueryArgs=} [p] Properties to set
	             */
	            function QueryArgs(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * QueryArgs sqlQuery.
	             * @member {string} sqlQuery
	             * @memberof perfetto.protos.QueryArgs
	             * @instance
	             */
	            QueryArgs.prototype.sqlQuery = "";

	            /**
	             * QueryArgs tag.
	             * @member {string} tag
	             * @memberof perfetto.protos.QueryArgs
	             * @instance
	             */
	            QueryArgs.prototype.tag = "";

	            /**
	             * Creates a new QueryArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.QueryArgs
	             * @static
	             * @param {perfetto.protos.IQueryArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.QueryArgs} QueryArgs instance
	             */
	            QueryArgs.create = function create(properties) {
	                return new QueryArgs(properties);
	            };

	            /**
	             * Encodes the specified QueryArgs message. Does not implicitly {@link perfetto.protos.QueryArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.QueryArgs
	             * @static
	             * @param {perfetto.protos.IQueryArgs} m QueryArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            QueryArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.sqlQuery != null && Object.hasOwnProperty.call(m, "sqlQuery"))
	                    w.uint32(10).string(m.sqlQuery);
	                if (m.tag != null && Object.hasOwnProperty.call(m, "tag"))
	                    w.uint32(26).string(m.tag);
	                return w;
	            };

	            /**
	             * Decodes a QueryArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.QueryArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.QueryArgs} QueryArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            QueryArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.sqlQuery = r.string();
	                            break;
	                        }
	                    case 3: {
	                            m.tag = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a QueryArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.QueryArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.QueryArgs} QueryArgs
	             */
	            QueryArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.QueryArgs)
	                    return d;
	                var m = new $root.perfetto.protos.QueryArgs();
	                if (d.sqlQuery != null) {
	                    m.sqlQuery = String(d.sqlQuery);
	                }
	                if (d.tag != null) {
	                    m.tag = String(d.tag);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a QueryArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.QueryArgs
	             * @static
	             * @param {perfetto.protos.QueryArgs} m QueryArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            QueryArgs.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.sqlQuery = "";
	                    d.tag = "";
	                }
	                if (m.sqlQuery != null && m.hasOwnProperty("sqlQuery")) {
	                    d.sqlQuery = m.sqlQuery;
	                }
	                if (m.tag != null && m.hasOwnProperty("tag")) {
	                    d.tag = m.tag;
	                }
	                return d;
	            };

	            /**
	             * Converts this QueryArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.QueryArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            QueryArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for QueryArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.QueryArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            QueryArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.QueryArgs";
	            };

	            return QueryArgs;
	        })();

	        protos.QueryResult = (function() {

	            /**
	             * Properties of a QueryResult.
	             * @memberof perfetto.protos
	             * @interface IQueryResult
	             * @property {Array.<string>|null} [columnNames] QueryResult columnNames
	             * @property {string|null} [error] QueryResult error
	             * @property {Array.<perfetto.protos.QueryResult.ICellsBatch>|null} [batch] QueryResult batch
	             * @property {number|null} [statementCount] QueryResult statementCount
	             * @property {number|null} [statementWithOutputCount] QueryResult statementWithOutputCount
	             * @property {string|null} [lastStatementSql] QueryResult lastStatementSql
	             */

	            /**
	             * Constructs a new QueryResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents a QueryResult.
	             * @implements IQueryResult
	             * @constructor
	             * @param {perfetto.protos.IQueryResult=} [p] Properties to set
	             */
	            function QueryResult(p) {
	                this.columnNames = [];
	                this.batch = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * QueryResult columnNames.
	             * @member {Array.<string>} columnNames
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             */
	            QueryResult.prototype.columnNames = $util.emptyArray;

	            /**
	             * QueryResult error.
	             * @member {string} error
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             */
	            QueryResult.prototype.error = "";

	            /**
	             * QueryResult batch.
	             * @member {Array.<perfetto.protos.QueryResult.ICellsBatch>} batch
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             */
	            QueryResult.prototype.batch = $util.emptyArray;

	            /**
	             * QueryResult statementCount.
	             * @member {number} statementCount
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             */
	            QueryResult.prototype.statementCount = 0;

	            /**
	             * QueryResult statementWithOutputCount.
	             * @member {number} statementWithOutputCount
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             */
	            QueryResult.prototype.statementWithOutputCount = 0;

	            /**
	             * QueryResult lastStatementSql.
	             * @member {string} lastStatementSql
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             */
	            QueryResult.prototype.lastStatementSql = "";

	            /**
	             * Creates a new QueryResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.QueryResult
	             * @static
	             * @param {perfetto.protos.IQueryResult=} [properties] Properties to set
	             * @returns {perfetto.protos.QueryResult} QueryResult instance
	             */
	            QueryResult.create = function create(properties) {
	                return new QueryResult(properties);
	            };

	            /**
	             * Encodes the specified QueryResult message. Does not implicitly {@link perfetto.protos.QueryResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.QueryResult
	             * @static
	             * @param {perfetto.protos.IQueryResult} m QueryResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            QueryResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.columnNames != null && m.columnNames.length) {
	                    for (var i = 0; i < m.columnNames.length; ++i)
	                        w.uint32(10).string(m.columnNames[i]);
	                }
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(18).string(m.error);
	                if (m.batch != null && m.batch.length) {
	                    for (var i = 0; i < m.batch.length; ++i)
	                        $root.perfetto.protos.QueryResult.CellsBatch.encode(m.batch[i], w.uint32(26).fork()).ldelim();
	                }
	                if (m.statementCount != null && Object.hasOwnProperty.call(m, "statementCount"))
	                    w.uint32(32).uint32(m.statementCount);
	                if (m.statementWithOutputCount != null && Object.hasOwnProperty.call(m, "statementWithOutputCount"))
	                    w.uint32(40).uint32(m.statementWithOutputCount);
	                if (m.lastStatementSql != null && Object.hasOwnProperty.call(m, "lastStatementSql"))
	                    w.uint32(50).string(m.lastStatementSql);
	                return w;
	            };

	            /**
	             * Decodes a QueryResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.QueryResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.QueryResult} QueryResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            QueryResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.columnNames && m.columnNames.length))
	                                m.columnNames = [];
	                            m.columnNames.push(r.string());
	                            break;
	                        }
	                    case 2: {
	                            m.error = r.string();
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.batch && m.batch.length))
	                                m.batch = [];
	                            m.batch.push($root.perfetto.protos.QueryResult.CellsBatch.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 4: {
	                            m.statementCount = r.uint32();
	                            break;
	                        }
	                    case 5: {
	                            m.statementWithOutputCount = r.uint32();
	                            break;
	                        }
	                    case 6: {
	                            m.lastStatementSql = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a QueryResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.QueryResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.QueryResult} QueryResult
	             */
	            QueryResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.QueryResult)
	                    return d;
	                var m = new $root.perfetto.protos.QueryResult();
	                if (d.columnNames) {
	                    if (!Array.isArray(d.columnNames))
	                        throw TypeError(".perfetto.protos.QueryResult.columnNames: array expected");
	                    m.columnNames = [];
	                    for (var i = 0; i < d.columnNames.length; ++i) {
	                        m.columnNames[i] = String(d.columnNames[i]);
	                    }
	                }
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                if (d.batch) {
	                    if (!Array.isArray(d.batch))
	                        throw TypeError(".perfetto.protos.QueryResult.batch: array expected");
	                    m.batch = [];
	                    for (var i = 0; i < d.batch.length; ++i) {
	                        if (typeof d.batch[i] !== "object")
	                            throw TypeError(".perfetto.protos.QueryResult.batch: object expected");
	                        m.batch[i] = $root.perfetto.protos.QueryResult.CellsBatch.fromObject(d.batch[i]);
	                    }
	                }
	                if (d.statementCount != null) {
	                    m.statementCount = d.statementCount >>> 0;
	                }
	                if (d.statementWithOutputCount != null) {
	                    m.statementWithOutputCount = d.statementWithOutputCount >>> 0;
	                }
	                if (d.lastStatementSql != null) {
	                    m.lastStatementSql = String(d.lastStatementSql);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a QueryResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.QueryResult
	             * @static
	             * @param {perfetto.protos.QueryResult} m QueryResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            QueryResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.columnNames = [];
	                    d.batch = [];
	                }
	                if (o.defaults) {
	                    d.error = "";
	                    d.statementCount = 0;
	                    d.statementWithOutputCount = 0;
	                    d.lastStatementSql = "";
	                }
	                if (m.columnNames && m.columnNames.length) {
	                    d.columnNames = [];
	                    for (var j = 0; j < m.columnNames.length; ++j) {
	                        d.columnNames[j] = m.columnNames[j];
	                    }
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                if (m.batch && m.batch.length) {
	                    d.batch = [];
	                    for (var j = 0; j < m.batch.length; ++j) {
	                        d.batch[j] = $root.perfetto.protos.QueryResult.CellsBatch.toObject(m.batch[j], o);
	                    }
	                }
	                if (m.statementCount != null && m.hasOwnProperty("statementCount")) {
	                    d.statementCount = m.statementCount;
	                }
	                if (m.statementWithOutputCount != null && m.hasOwnProperty("statementWithOutputCount")) {
	                    d.statementWithOutputCount = m.statementWithOutputCount;
	                }
	                if (m.lastStatementSql != null && m.hasOwnProperty("lastStatementSql")) {
	                    d.lastStatementSql = m.lastStatementSql;
	                }
	                return d;
	            };

	            /**
	             * Converts this QueryResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.QueryResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            QueryResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for QueryResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.QueryResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            QueryResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.QueryResult";
	            };

	            QueryResult.CellsBatch = (function() {

	                /**
	                 * Properties of a CellsBatch.
	                 * @memberof perfetto.protos.QueryResult
	                 * @interface ICellsBatch
	                 * @property {Array.<perfetto.protos.QueryResult.CellsBatch.CellType>|null} [cells] CellsBatch cells
	                 * @property {Array.<number>|null} [varintCells] CellsBatch varintCells
	                 * @property {Array.<number>|null} [float64Cells] CellsBatch float64Cells
	                 * @property {Array.<Uint8Array>|null} [blobCells] CellsBatch blobCells
	                 * @property {string|null} [stringCells] CellsBatch stringCells
	                 * @property {boolean|null} [isLastBatch] CellsBatch isLastBatch
	                 */

	                /**
	                 * Constructs a new CellsBatch.
	                 * @memberof perfetto.protos.QueryResult
	                 * @classdesc Represents a CellsBatch.
	                 * @implements ICellsBatch
	                 * @constructor
	                 * @param {perfetto.protos.QueryResult.ICellsBatch=} [p] Properties to set
	                 */
	                function CellsBatch(p) {
	                    this.cells = [];
	                    this.varintCells = [];
	                    this.float64Cells = [];
	                    this.blobCells = [];
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * CellsBatch cells.
	                 * @member {Array.<perfetto.protos.QueryResult.CellsBatch.CellType>} cells
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 */
	                CellsBatch.prototype.cells = $util.emptyArray;

	                /**
	                 * CellsBatch varintCells.
	                 * @member {Array.<number>} varintCells
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 */
	                CellsBatch.prototype.varintCells = $util.emptyArray;

	                /**
	                 * CellsBatch float64Cells.
	                 * @member {Array.<number>} float64Cells
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 */
	                CellsBatch.prototype.float64Cells = $util.emptyArray;

	                /**
	                 * CellsBatch blobCells.
	                 * @member {Array.<Uint8Array>} blobCells
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 */
	                CellsBatch.prototype.blobCells = $util.emptyArray;

	                /**
	                 * CellsBatch stringCells.
	                 * @member {string} stringCells
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 */
	                CellsBatch.prototype.stringCells = "";

	                /**
	                 * CellsBatch isLastBatch.
	                 * @member {boolean} isLastBatch
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 */
	                CellsBatch.prototype.isLastBatch = false;

	                /**
	                 * Creates a new CellsBatch instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @static
	                 * @param {perfetto.protos.QueryResult.ICellsBatch=} [properties] Properties to set
	                 * @returns {perfetto.protos.QueryResult.CellsBatch} CellsBatch instance
	                 */
	                CellsBatch.create = function create(properties) {
	                    return new CellsBatch(properties);
	                };

	                /**
	                 * Encodes the specified CellsBatch message. Does not implicitly {@link perfetto.protos.QueryResult.CellsBatch.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @static
	                 * @param {perfetto.protos.QueryResult.ICellsBatch} m CellsBatch message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                CellsBatch.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.cells != null && m.cells.length) {
	                        w.uint32(10).fork();
	                        for (var i = 0; i < m.cells.length; ++i)
	                            w.int32(m.cells[i]);
	                        w.ldelim();
	                    }
	                    if (m.varintCells != null && m.varintCells.length) {
	                        w.uint32(18).fork();
	                        for (var i = 0; i < m.varintCells.length; ++i)
	                            w.int64(m.varintCells[i]);
	                        w.ldelim();
	                    }
	                    if (m.float64Cells != null && m.float64Cells.length) {
	                        w.uint32(26).fork();
	                        for (var i = 0; i < m.float64Cells.length; ++i)
	                            w.double(m.float64Cells[i]);
	                        w.ldelim();
	                    }
	                    if (m.blobCells != null && m.blobCells.length) {
	                        for (var i = 0; i < m.blobCells.length; ++i)
	                            w.uint32(34).bytes(m.blobCells[i]);
	                    }
	                    if (m.stringCells != null && Object.hasOwnProperty.call(m, "stringCells"))
	                        w.uint32(42).string(m.stringCells);
	                    if (m.isLastBatch != null && Object.hasOwnProperty.call(m, "isLastBatch"))
	                        w.uint32(48).bool(m.isLastBatch);
	                    return w;
	                };

	                /**
	                 * Decodes a CellsBatch message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.QueryResult.CellsBatch} CellsBatch
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                CellsBatch.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.QueryResult.CellsBatch();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                if (!(m.cells && m.cells.length))
	                                    m.cells = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.cells.push(r.int32());
	                                } else
	                                    m.cells.push(r.int32());
	                                break;
	                            }
	                        case 2: {
	                                if (!(m.varintCells && m.varintCells.length))
	                                    m.varintCells = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.varintCells.push(r.int64());
	                                } else
	                                    m.varintCells.push(r.int64());
	                                break;
	                            }
	                        case 3: {
	                                if (!(m.float64Cells && m.float64Cells.length))
	                                    m.float64Cells = [];
	                                if ((t & 7) === 2) {
	                                    var c2 = r.uint32() + r.pos;
	                                    while (r.pos < c2)
	                                        m.float64Cells.push(r.double());
	                                } else
	                                    m.float64Cells.push(r.double());
	                                break;
	                            }
	                        case 4: {
	                                if (!(m.blobCells && m.blobCells.length))
	                                    m.blobCells = [];
	                                m.blobCells.push(r.bytes());
	                                break;
	                            }
	                        case 5: {
	                                m.stringCells = r.string();
	                                break;
	                            }
	                        case 6: {
	                                m.isLastBatch = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a CellsBatch message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.QueryResult.CellsBatch} CellsBatch
	                 */
	                CellsBatch.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.QueryResult.CellsBatch)
	                        return d;
	                    var m = new $root.perfetto.protos.QueryResult.CellsBatch();
	                    if (d.cells) {
	                        if (!Array.isArray(d.cells))
	                            throw TypeError(".perfetto.protos.QueryResult.CellsBatch.cells: array expected");
	                        m.cells = [];
	                        for (var i = 0; i < d.cells.length; ++i) {
	                            switch (d.cells[i]) {
	                            default:
	                                if (typeof d.cells[i] === "number") {
	                                    m.cells[i] = d.cells[i];
	                                    break;
	                                }
	                            case "CELL_INVALID":
	                            case 0:
	                                m.cells[i] = 0;
	                                break;
	                            case "CELL_NULL":
	                            case 1:
	                                m.cells[i] = 1;
	                                break;
	                            case "CELL_VARINT":
	                            case 2:
	                                m.cells[i] = 2;
	                                break;
	                            case "CELL_FLOAT64":
	                            case 3:
	                                m.cells[i] = 3;
	                                break;
	                            case "CELL_STRING":
	                            case 4:
	                                m.cells[i] = 4;
	                                break;
	                            case "CELL_BLOB":
	                            case 5:
	                                m.cells[i] = 5;
	                                break;
	                            }
	                        }
	                    }
	                    if (d.varintCells) {
	                        if (!Array.isArray(d.varintCells))
	                            throw TypeError(".perfetto.protos.QueryResult.CellsBatch.varintCells: array expected");
	                        m.varintCells = [];
	                        for (var i = 0; i < d.varintCells.length; ++i) {
	                            if ($util.Long)
	                                (m.varintCells[i] = $util.Long.fromValue(d.varintCells[i])).unsigned = false;
	                            else if (typeof d.varintCells[i] === "string")
	                                m.varintCells[i] = parseInt(d.varintCells[i], 10);
	                            else if (typeof d.varintCells[i] === "number")
	                                m.varintCells[i] = d.varintCells[i];
	                            else if (typeof d.varintCells[i] === "object")
	                                m.varintCells[i] = new $util.LongBits(d.varintCells[i].low >>> 0, d.varintCells[i].high >>> 0).toNumber();
	                        }
	                    }
	                    if (d.float64Cells) {
	                        if (!Array.isArray(d.float64Cells))
	                            throw TypeError(".perfetto.protos.QueryResult.CellsBatch.float64Cells: array expected");
	                        m.float64Cells = [];
	                        for (var i = 0; i < d.float64Cells.length; ++i) {
	                            m.float64Cells[i] = Number(d.float64Cells[i]);
	                        }
	                    }
	                    if (d.blobCells) {
	                        if (!Array.isArray(d.blobCells))
	                            throw TypeError(".perfetto.protos.QueryResult.CellsBatch.blobCells: array expected");
	                        m.blobCells = [];
	                        for (var i = 0; i < d.blobCells.length; ++i) {
	                            if (typeof d.blobCells[i] === "string")
	                                $util.base64.decode(d.blobCells[i], m.blobCells[i] = $util.newBuffer($util.base64.length(d.blobCells[i])), 0);
	                            else if (d.blobCells[i].length >= 0)
	                                m.blobCells[i] = d.blobCells[i];
	                        }
	                    }
	                    if (d.stringCells != null) {
	                        m.stringCells = String(d.stringCells);
	                    }
	                    if (d.isLastBatch != null) {
	                        m.isLastBatch = Boolean(d.isLastBatch);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a CellsBatch message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @static
	                 * @param {perfetto.protos.QueryResult.CellsBatch} m CellsBatch
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                CellsBatch.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.arrays || o.defaults) {
	                        d.cells = [];
	                        d.varintCells = [];
	                        d.float64Cells = [];
	                        d.blobCells = [];
	                    }
	                    if (o.defaults) {
	                        d.stringCells = "";
	                        d.isLastBatch = false;
	                    }
	                    if (m.cells && m.cells.length) {
	                        d.cells = [];
	                        for (var j = 0; j < m.cells.length; ++j) {
	                            d.cells[j] = o.enums === String ? $root.perfetto.protos.QueryResult.CellsBatch.CellType[m.cells[j]] === undefined ? m.cells[j] : $root.perfetto.protos.QueryResult.CellsBatch.CellType[m.cells[j]] : m.cells[j];
	                        }
	                    }
	                    if (m.varintCells && m.varintCells.length) {
	                        d.varintCells = [];
	                        for (var j = 0; j < m.varintCells.length; ++j) {
	                            if (typeof m.varintCells[j] === "number")
	                                d.varintCells[j] = o.longs === String ? String(m.varintCells[j]) : m.varintCells[j];
	                            else
	                                d.varintCells[j] = o.longs === String ? $util.Long.prototype.toString.call(m.varintCells[j]) : o.longs === Number ? new $util.LongBits(m.varintCells[j].low >>> 0, m.varintCells[j].high >>> 0).toNumber() : m.varintCells[j];
	                        }
	                    }
	                    if (m.float64Cells && m.float64Cells.length) {
	                        d.float64Cells = [];
	                        for (var j = 0; j < m.float64Cells.length; ++j) {
	                            d.float64Cells[j] = o.json && !isFinite(m.float64Cells[j]) ? String(m.float64Cells[j]) : m.float64Cells[j];
	                        }
	                    }
	                    if (m.blobCells && m.blobCells.length) {
	                        d.blobCells = [];
	                        for (var j = 0; j < m.blobCells.length; ++j) {
	                            d.blobCells[j] = o.bytes === String ? $util.base64.encode(m.blobCells[j], 0, m.blobCells[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blobCells[j]) : m.blobCells[j];
	                        }
	                    }
	                    if (m.stringCells != null && m.hasOwnProperty("stringCells")) {
	                        d.stringCells = m.stringCells;
	                    }
	                    if (m.isLastBatch != null && m.hasOwnProperty("isLastBatch")) {
	                        d.isLastBatch = m.isLastBatch;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this CellsBatch to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                CellsBatch.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for CellsBatch
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.QueryResult.CellsBatch
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                CellsBatch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.QueryResult.CellsBatch";
	                };

	                /**
	                 * CellType enum.
	                 * @name perfetto.protos.QueryResult.CellsBatch.CellType
	                 * @enum {number}
	                 * @property {number} CELL_INVALID=0 CELL_INVALID value
	                 * @property {number} CELL_NULL=1 CELL_NULL value
	                 * @property {number} CELL_VARINT=2 CELL_VARINT value
	                 * @property {number} CELL_FLOAT64=3 CELL_FLOAT64 value
	                 * @property {number} CELL_STRING=4 CELL_STRING value
	                 * @property {number} CELL_BLOB=5 CELL_BLOB value
	                 */
	                CellsBatch.CellType = (function() {
	                    var valuesById = {}, values = Object.create(valuesById);
	                    values[valuesById[0] = "CELL_INVALID"] = 0;
	                    values[valuesById[1] = "CELL_NULL"] = 1;
	                    values[valuesById[2] = "CELL_VARINT"] = 2;
	                    values[valuesById[3] = "CELL_FLOAT64"] = 3;
	                    values[valuesById[4] = "CELL_STRING"] = 4;
	                    values[valuesById[5] = "CELL_BLOB"] = 5;
	                    return values;
	                })();

	                return CellsBatch;
	            })();

	            return QueryResult;
	        })();

	        protos.StatusArgs = (function() {

	            /**
	             * Properties of a StatusArgs.
	             * @memberof perfetto.protos
	             * @interface IStatusArgs
	             */

	            /**
	             * Constructs a new StatusArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents a StatusArgs.
	             * @implements IStatusArgs
	             * @constructor
	             * @param {perfetto.protos.IStatusArgs=} [p] Properties to set
	             */
	            function StatusArgs(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new StatusArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.StatusArgs
	             * @static
	             * @param {perfetto.protos.IStatusArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.StatusArgs} StatusArgs instance
	             */
	            StatusArgs.create = function create(properties) {
	                return new StatusArgs(properties);
	            };

	            /**
	             * Encodes the specified StatusArgs message. Does not implicitly {@link perfetto.protos.StatusArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.StatusArgs
	             * @static
	             * @param {perfetto.protos.IStatusArgs} m StatusArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            StatusArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a StatusArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.StatusArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.StatusArgs} StatusArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            StatusArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.StatusArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a StatusArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.StatusArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.StatusArgs} StatusArgs
	             */
	            StatusArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.StatusArgs)
	                    return d;
	                return new $root.perfetto.protos.StatusArgs();
	            };

	            /**
	             * Creates a plain object from a StatusArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.StatusArgs
	             * @static
	             * @param {perfetto.protos.StatusArgs} m StatusArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            StatusArgs.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this StatusArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.StatusArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            StatusArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for StatusArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.StatusArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            StatusArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.StatusArgs";
	            };

	            return StatusArgs;
	        })();

	        protos.StatusResult = (function() {

	            /**
	             * Properties of a StatusResult.
	             * @memberof perfetto.protos
	             * @interface IStatusResult
	             * @property {string|null} [loadedTraceName] StatusResult loadedTraceName
	             * @property {string|null} [humanReadableVersion] StatusResult humanReadableVersion
	             * @property {number|null} [apiVersion] StatusResult apiVersion
	             * @property {string|null} [versionCode] StatusResult versionCode
	             */

	            /**
	             * Constructs a new StatusResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents a StatusResult.
	             * @implements IStatusResult
	             * @constructor
	             * @param {perfetto.protos.IStatusResult=} [p] Properties to set
	             */
	            function StatusResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * StatusResult loadedTraceName.
	             * @member {string} loadedTraceName
	             * @memberof perfetto.protos.StatusResult
	             * @instance
	             */
	            StatusResult.prototype.loadedTraceName = "";

	            /**
	             * StatusResult humanReadableVersion.
	             * @member {string} humanReadableVersion
	             * @memberof perfetto.protos.StatusResult
	             * @instance
	             */
	            StatusResult.prototype.humanReadableVersion = "";

	            /**
	             * StatusResult apiVersion.
	             * @member {number} apiVersion
	             * @memberof perfetto.protos.StatusResult
	             * @instance
	             */
	            StatusResult.prototype.apiVersion = 0;

	            /**
	             * StatusResult versionCode.
	             * @member {string} versionCode
	             * @memberof perfetto.protos.StatusResult
	             * @instance
	             */
	            StatusResult.prototype.versionCode = "";

	            /**
	             * Creates a new StatusResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.StatusResult
	             * @static
	             * @param {perfetto.protos.IStatusResult=} [properties] Properties to set
	             * @returns {perfetto.protos.StatusResult} StatusResult instance
	             */
	            StatusResult.create = function create(properties) {
	                return new StatusResult(properties);
	            };

	            /**
	             * Encodes the specified StatusResult message. Does not implicitly {@link perfetto.protos.StatusResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.StatusResult
	             * @static
	             * @param {perfetto.protos.IStatusResult} m StatusResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            StatusResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.loadedTraceName != null && Object.hasOwnProperty.call(m, "loadedTraceName"))
	                    w.uint32(10).string(m.loadedTraceName);
	                if (m.humanReadableVersion != null && Object.hasOwnProperty.call(m, "humanReadableVersion"))
	                    w.uint32(18).string(m.humanReadableVersion);
	                if (m.apiVersion != null && Object.hasOwnProperty.call(m, "apiVersion"))
	                    w.uint32(24).int32(m.apiVersion);
	                if (m.versionCode != null && Object.hasOwnProperty.call(m, "versionCode"))
	                    w.uint32(34).string(m.versionCode);
	                return w;
	            };

	            /**
	             * Decodes a StatusResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.StatusResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.StatusResult} StatusResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            StatusResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.StatusResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.loadedTraceName = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.humanReadableVersion = r.string();
	                            break;
	                        }
	                    case 3: {
	                            m.apiVersion = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            m.versionCode = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a StatusResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.StatusResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.StatusResult} StatusResult
	             */
	            StatusResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.StatusResult)
	                    return d;
	                var m = new $root.perfetto.protos.StatusResult();
	                if (d.loadedTraceName != null) {
	                    m.loadedTraceName = String(d.loadedTraceName);
	                }
	                if (d.humanReadableVersion != null) {
	                    m.humanReadableVersion = String(d.humanReadableVersion);
	                }
	                if (d.apiVersion != null) {
	                    m.apiVersion = d.apiVersion | 0;
	                }
	                if (d.versionCode != null) {
	                    m.versionCode = String(d.versionCode);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a StatusResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.StatusResult
	             * @static
	             * @param {perfetto.protos.StatusResult} m StatusResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            StatusResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.loadedTraceName = "";
	                    d.humanReadableVersion = "";
	                    d.apiVersion = 0;
	                    d.versionCode = "";
	                }
	                if (m.loadedTraceName != null && m.hasOwnProperty("loadedTraceName")) {
	                    d.loadedTraceName = m.loadedTraceName;
	                }
	                if (m.humanReadableVersion != null && m.hasOwnProperty("humanReadableVersion")) {
	                    d.humanReadableVersion = m.humanReadableVersion;
	                }
	                if (m.apiVersion != null && m.hasOwnProperty("apiVersion")) {
	                    d.apiVersion = m.apiVersion;
	                }
	                if (m.versionCode != null && m.hasOwnProperty("versionCode")) {
	                    d.versionCode = m.versionCode;
	                }
	                return d;
	            };

	            /**
	             * Converts this StatusResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.StatusResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            StatusResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for StatusResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.StatusResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            StatusResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.StatusResult";
	            };

	            return StatusResult;
	        })();

	        protos.ComputeMetricArgs = (function() {

	            /**
	             * Properties of a ComputeMetricArgs.
	             * @memberof perfetto.protos
	             * @interface IComputeMetricArgs
	             * @property {Array.<string>|null} [metricNames] ComputeMetricArgs metricNames
	             * @property {perfetto.protos.ComputeMetricArgs.ResultFormat|null} [format] ComputeMetricArgs format
	             */

	            /**
	             * Constructs a new ComputeMetricArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ComputeMetricArgs.
	             * @implements IComputeMetricArgs
	             * @constructor
	             * @param {perfetto.protos.IComputeMetricArgs=} [p] Properties to set
	             */
	            function ComputeMetricArgs(p) {
	                this.metricNames = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ComputeMetricArgs metricNames.
	             * @member {Array.<string>} metricNames
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @instance
	             */
	            ComputeMetricArgs.prototype.metricNames = $util.emptyArray;

	            /**
	             * ComputeMetricArgs format.
	             * @member {perfetto.protos.ComputeMetricArgs.ResultFormat} format
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @instance
	             */
	            ComputeMetricArgs.prototype.format = 0;

	            /**
	             * Creates a new ComputeMetricArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @static
	             * @param {perfetto.protos.IComputeMetricArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.ComputeMetricArgs} ComputeMetricArgs instance
	             */
	            ComputeMetricArgs.create = function create(properties) {
	                return new ComputeMetricArgs(properties);
	            };

	            /**
	             * Encodes the specified ComputeMetricArgs message. Does not implicitly {@link perfetto.protos.ComputeMetricArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @static
	             * @param {perfetto.protos.IComputeMetricArgs} m ComputeMetricArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ComputeMetricArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.metricNames != null && m.metricNames.length) {
	                    for (var i = 0; i < m.metricNames.length; ++i)
	                        w.uint32(10).string(m.metricNames[i]);
	                }
	                if (m.format != null && Object.hasOwnProperty.call(m, "format"))
	                    w.uint32(16).int32(m.format);
	                return w;
	            };

	            /**
	             * Decodes a ComputeMetricArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ComputeMetricArgs} ComputeMetricArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ComputeMetricArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ComputeMetricArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.metricNames && m.metricNames.length))
	                                m.metricNames = [];
	                            m.metricNames.push(r.string());
	                            break;
	                        }
	                    case 2: {
	                            m.format = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ComputeMetricArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ComputeMetricArgs} ComputeMetricArgs
	             */
	            ComputeMetricArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ComputeMetricArgs)
	                    return d;
	                var m = new $root.perfetto.protos.ComputeMetricArgs();
	                if (d.metricNames) {
	                    if (!Array.isArray(d.metricNames))
	                        throw TypeError(".perfetto.protos.ComputeMetricArgs.metricNames: array expected");
	                    m.metricNames = [];
	                    for (var i = 0; i < d.metricNames.length; ++i) {
	                        m.metricNames[i] = String(d.metricNames[i]);
	                    }
	                }
	                switch (d.format) {
	                default:
	                    if (typeof d.format === "number") {
	                        m.format = d.format;
	                        break;
	                    }
	                    break;
	                case "BINARY_PROTOBUF":
	                case 0:
	                    m.format = 0;
	                    break;
	                case "TEXTPROTO":
	                case 1:
	                    m.format = 1;
	                    break;
	                case "JSON":
	                case 2:
	                    m.format = 2;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ComputeMetricArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @static
	             * @param {perfetto.protos.ComputeMetricArgs} m ComputeMetricArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ComputeMetricArgs.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.metricNames = [];
	                }
	                if (o.defaults) {
	                    d.format = o.enums === String ? "BINARY_PROTOBUF" : 0;
	                }
	                if (m.metricNames && m.metricNames.length) {
	                    d.metricNames = [];
	                    for (var j = 0; j < m.metricNames.length; ++j) {
	                        d.metricNames[j] = m.metricNames[j];
	                    }
	                }
	                if (m.format != null && m.hasOwnProperty("format")) {
	                    d.format = o.enums === String ? $root.perfetto.protos.ComputeMetricArgs.ResultFormat[m.format] === undefined ? m.format : $root.perfetto.protos.ComputeMetricArgs.ResultFormat[m.format] : m.format;
	                }
	                return d;
	            };

	            /**
	             * Converts this ComputeMetricArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ComputeMetricArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ComputeMetricArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ComputeMetricArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ComputeMetricArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ComputeMetricArgs";
	            };

	            /**
	             * ResultFormat enum.
	             * @name perfetto.protos.ComputeMetricArgs.ResultFormat
	             * @enum {number}
	             * @property {number} BINARY_PROTOBUF=0 BINARY_PROTOBUF value
	             * @property {number} TEXTPROTO=1 TEXTPROTO value
	             * @property {number} JSON=2 JSON value
	             */
	            ComputeMetricArgs.ResultFormat = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "BINARY_PROTOBUF"] = 0;
	                values[valuesById[1] = "TEXTPROTO"] = 1;
	                values[valuesById[2] = "JSON"] = 2;
	                return values;
	            })();

	            return ComputeMetricArgs;
	        })();

	        protos.ComputeMetricResult = (function() {

	            /**
	             * Properties of a ComputeMetricResult.
	             * @memberof perfetto.protos
	             * @interface IComputeMetricResult
	             * @property {Uint8Array|null} [metrics] ComputeMetricResult metrics
	             * @property {string|null} [metricsAsPrototext] ComputeMetricResult metricsAsPrototext
	             * @property {string|null} [metricsAsJson] ComputeMetricResult metricsAsJson
	             * @property {string|null} [error] ComputeMetricResult error
	             */

	            /**
	             * Constructs a new ComputeMetricResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ComputeMetricResult.
	             * @implements IComputeMetricResult
	             * @constructor
	             * @param {perfetto.protos.IComputeMetricResult=} [p] Properties to set
	             */
	            function ComputeMetricResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ComputeMetricResult metrics.
	             * @member {Uint8Array|null|undefined} metrics
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @instance
	             */
	            ComputeMetricResult.prototype.metrics = null;

	            /**
	             * ComputeMetricResult metricsAsPrototext.
	             * @member {string|null|undefined} metricsAsPrototext
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @instance
	             */
	            ComputeMetricResult.prototype.metricsAsPrototext = null;

	            /**
	             * ComputeMetricResult metricsAsJson.
	             * @member {string|null|undefined} metricsAsJson
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @instance
	             */
	            ComputeMetricResult.prototype.metricsAsJson = null;

	            /**
	             * ComputeMetricResult error.
	             * @member {string} error
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @instance
	             */
	            ComputeMetricResult.prototype.error = "";

	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;

	            /**
	             * ComputeMetricResult result.
	             * @member {"metrics"|"metricsAsPrototext"|"metricsAsJson"|undefined} result
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @instance
	             */
	            Object.defineProperty(ComputeMetricResult.prototype, "result", {
	                get: $util.oneOfGetter($oneOfFields = ["metrics", "metricsAsPrototext", "metricsAsJson"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });

	            /**
	             * Creates a new ComputeMetricResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @static
	             * @param {perfetto.protos.IComputeMetricResult=} [properties] Properties to set
	             * @returns {perfetto.protos.ComputeMetricResult} ComputeMetricResult instance
	             */
	            ComputeMetricResult.create = function create(properties) {
	                return new ComputeMetricResult(properties);
	            };

	            /**
	             * Encodes the specified ComputeMetricResult message. Does not implicitly {@link perfetto.protos.ComputeMetricResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @static
	             * @param {perfetto.protos.IComputeMetricResult} m ComputeMetricResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ComputeMetricResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.metrics != null && Object.hasOwnProperty.call(m, "metrics"))
	                    w.uint32(10).bytes(m.metrics);
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(18).string(m.error);
	                if (m.metricsAsPrototext != null && Object.hasOwnProperty.call(m, "metricsAsPrototext"))
	                    w.uint32(26).string(m.metricsAsPrototext);
	                if (m.metricsAsJson != null && Object.hasOwnProperty.call(m, "metricsAsJson"))
	                    w.uint32(34).string(m.metricsAsJson);
	                return w;
	            };

	            /**
	             * Decodes a ComputeMetricResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ComputeMetricResult} ComputeMetricResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ComputeMetricResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ComputeMetricResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.metrics = r.bytes();
	                            break;
	                        }
	                    case 3: {
	                            m.metricsAsPrototext = r.string();
	                            break;
	                        }
	                    case 4: {
	                            m.metricsAsJson = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.error = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ComputeMetricResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ComputeMetricResult} ComputeMetricResult
	             */
	            ComputeMetricResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ComputeMetricResult)
	                    return d;
	                var m = new $root.perfetto.protos.ComputeMetricResult();
	                if (d.metrics != null) {
	                    if (typeof d.metrics === "string")
	                        $util.base64.decode(d.metrics, m.metrics = $util.newBuffer($util.base64.length(d.metrics)), 0);
	                    else if (d.metrics.length >= 0)
	                        m.metrics = d.metrics;
	                }
	                if (d.metricsAsPrototext != null) {
	                    m.metricsAsPrototext = String(d.metricsAsPrototext);
	                }
	                if (d.metricsAsJson != null) {
	                    m.metricsAsJson = String(d.metricsAsJson);
	                }
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ComputeMetricResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @static
	             * @param {perfetto.protos.ComputeMetricResult} m ComputeMetricResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ComputeMetricResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.error = "";
	                }
	                if (m.metrics != null && m.hasOwnProperty("metrics")) {
	                    d.metrics = o.bytes === String ? $util.base64.encode(m.metrics, 0, m.metrics.length) : o.bytes === Array ? Array.prototype.slice.call(m.metrics) : m.metrics;
	                    if (o.oneofs)
	                        d.result = "metrics";
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                if (m.metricsAsPrototext != null && m.hasOwnProperty("metricsAsPrototext")) {
	                    d.metricsAsPrototext = m.metricsAsPrototext;
	                    if (o.oneofs)
	                        d.result = "metricsAsPrototext";
	                }
	                if (m.metricsAsJson != null && m.hasOwnProperty("metricsAsJson")) {
	                    d.metricsAsJson = m.metricsAsJson;
	                    if (o.oneofs)
	                        d.result = "metricsAsJson";
	                }
	                return d;
	            };

	            /**
	             * Converts this ComputeMetricResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ComputeMetricResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ComputeMetricResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ComputeMetricResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ComputeMetricResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ComputeMetricResult";
	            };

	            return ComputeMetricResult;
	        })();

	        protos.EnableMetatraceArgs = (function() {

	            /**
	             * Properties of an EnableMetatraceArgs.
	             * @memberof perfetto.protos
	             * @interface IEnableMetatraceArgs
	             * @property {perfetto.protos.MetatraceCategories|null} [categories] EnableMetatraceArgs categories
	             */

	            /**
	             * Constructs a new EnableMetatraceArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EnableMetatraceArgs.
	             * @implements IEnableMetatraceArgs
	             * @constructor
	             * @param {perfetto.protos.IEnableMetatraceArgs=} [p] Properties to set
	             */
	            function EnableMetatraceArgs(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * EnableMetatraceArgs categories.
	             * @member {perfetto.protos.MetatraceCategories} categories
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @instance
	             */
	            EnableMetatraceArgs.prototype.categories = 1;

	            /**
	             * Creates a new EnableMetatraceArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @static
	             * @param {perfetto.protos.IEnableMetatraceArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.EnableMetatraceArgs} EnableMetatraceArgs instance
	             */
	            EnableMetatraceArgs.create = function create(properties) {
	                return new EnableMetatraceArgs(properties);
	            };

	            /**
	             * Encodes the specified EnableMetatraceArgs message. Does not implicitly {@link perfetto.protos.EnableMetatraceArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @static
	             * @param {perfetto.protos.IEnableMetatraceArgs} m EnableMetatraceArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EnableMetatraceArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.categories != null && Object.hasOwnProperty.call(m, "categories"))
	                    w.uint32(8).int32(m.categories);
	                return w;
	            };

	            /**
	             * Decodes an EnableMetatraceArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EnableMetatraceArgs} EnableMetatraceArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EnableMetatraceArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EnableMetatraceArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.categories = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EnableMetatraceArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EnableMetatraceArgs} EnableMetatraceArgs
	             */
	            EnableMetatraceArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EnableMetatraceArgs)
	                    return d;
	                var m = new $root.perfetto.protos.EnableMetatraceArgs();
	                switch (d.categories) {
	                default:
	                    if (typeof d.categories === "number") {
	                        m.categories = d.categories;
	                        break;
	                    }
	                    break;
	                case "QUERY_TIMELINE":
	                case 1:
	                    m.categories = 1;
	                    break;
	                case "QUERY_DETAILED":
	                case 2:
	                    m.categories = 2;
	                    break;
	                case "FUNCTION_CALL":
	                case 4:
	                    m.categories = 4;
	                    break;
	                case "DB":
	                case 8:
	                    m.categories = 8;
	                    break;
	                case "API_TIMELINE":
	                case 16:
	                    m.categories = 16;
	                    break;
	                case "NONE":
	                case 0:
	                    m.categories = 0;
	                    break;
	                case "ALL":
	                case 31:
	                    m.categories = 31;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an EnableMetatraceArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @static
	             * @param {perfetto.protos.EnableMetatraceArgs} m EnableMetatraceArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EnableMetatraceArgs.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.categories = o.enums === String ? "QUERY_TIMELINE" : 1;
	                }
	                if (m.categories != null && m.hasOwnProperty("categories")) {
	                    d.categories = o.enums === String ? $root.perfetto.protos.MetatraceCategories[m.categories] === undefined ? m.categories : $root.perfetto.protos.MetatraceCategories[m.categories] : m.categories;
	                }
	                return d;
	            };

	            /**
	             * Converts this EnableMetatraceArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EnableMetatraceArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EnableMetatraceArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EnableMetatraceArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EnableMetatraceArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EnableMetatraceArgs";
	            };

	            return EnableMetatraceArgs;
	        })();

	        protos.EnableMetatraceResult = (function() {

	            /**
	             * Properties of an EnableMetatraceResult.
	             * @memberof perfetto.protos
	             * @interface IEnableMetatraceResult
	             */

	            /**
	             * Constructs a new EnableMetatraceResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EnableMetatraceResult.
	             * @implements IEnableMetatraceResult
	             * @constructor
	             * @param {perfetto.protos.IEnableMetatraceResult=} [p] Properties to set
	             */
	            function EnableMetatraceResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new EnableMetatraceResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @static
	             * @param {perfetto.protos.IEnableMetatraceResult=} [properties] Properties to set
	             * @returns {perfetto.protos.EnableMetatraceResult} EnableMetatraceResult instance
	             */
	            EnableMetatraceResult.create = function create(properties) {
	                return new EnableMetatraceResult(properties);
	            };

	            /**
	             * Encodes the specified EnableMetatraceResult message. Does not implicitly {@link perfetto.protos.EnableMetatraceResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @static
	             * @param {perfetto.protos.IEnableMetatraceResult} m EnableMetatraceResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EnableMetatraceResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes an EnableMetatraceResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EnableMetatraceResult} EnableMetatraceResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EnableMetatraceResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EnableMetatraceResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EnableMetatraceResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EnableMetatraceResult} EnableMetatraceResult
	             */
	            EnableMetatraceResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EnableMetatraceResult)
	                    return d;
	                return new $root.perfetto.protos.EnableMetatraceResult();
	            };

	            /**
	             * Creates a plain object from an EnableMetatraceResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @static
	             * @param {perfetto.protos.EnableMetatraceResult} m EnableMetatraceResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EnableMetatraceResult.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this EnableMetatraceResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EnableMetatraceResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EnableMetatraceResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EnableMetatraceResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EnableMetatraceResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EnableMetatraceResult";
	            };

	            return EnableMetatraceResult;
	        })();

	        protos.DisableAndReadMetatraceArgs = (function() {

	            /**
	             * Properties of a DisableAndReadMetatraceArgs.
	             * @memberof perfetto.protos
	             * @interface IDisableAndReadMetatraceArgs
	             */

	            /**
	             * Constructs a new DisableAndReadMetatraceArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DisableAndReadMetatraceArgs.
	             * @implements IDisableAndReadMetatraceArgs
	             * @constructor
	             * @param {perfetto.protos.IDisableAndReadMetatraceArgs=} [p] Properties to set
	             */
	            function DisableAndReadMetatraceArgs(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new DisableAndReadMetatraceArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @static
	             * @param {perfetto.protos.IDisableAndReadMetatraceArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.DisableAndReadMetatraceArgs} DisableAndReadMetatraceArgs instance
	             */
	            DisableAndReadMetatraceArgs.create = function create(properties) {
	                return new DisableAndReadMetatraceArgs(properties);
	            };

	            /**
	             * Encodes the specified DisableAndReadMetatraceArgs message. Does not implicitly {@link perfetto.protos.DisableAndReadMetatraceArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @static
	             * @param {perfetto.protos.IDisableAndReadMetatraceArgs} m DisableAndReadMetatraceArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DisableAndReadMetatraceArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes a DisableAndReadMetatraceArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DisableAndReadMetatraceArgs} DisableAndReadMetatraceArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DisableAndReadMetatraceArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DisableAndReadMetatraceArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DisableAndReadMetatraceArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DisableAndReadMetatraceArgs} DisableAndReadMetatraceArgs
	             */
	            DisableAndReadMetatraceArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DisableAndReadMetatraceArgs)
	                    return d;
	                return new $root.perfetto.protos.DisableAndReadMetatraceArgs();
	            };

	            /**
	             * Creates a plain object from a DisableAndReadMetatraceArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @static
	             * @param {perfetto.protos.DisableAndReadMetatraceArgs} m DisableAndReadMetatraceArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DisableAndReadMetatraceArgs.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this DisableAndReadMetatraceArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DisableAndReadMetatraceArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DisableAndReadMetatraceArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DisableAndReadMetatraceArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DisableAndReadMetatraceArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DisableAndReadMetatraceArgs";
	            };

	            return DisableAndReadMetatraceArgs;
	        })();

	        protos.DisableAndReadMetatraceResult = (function() {

	            /**
	             * Properties of a DisableAndReadMetatraceResult.
	             * @memberof perfetto.protos
	             * @interface IDisableAndReadMetatraceResult
	             * @property {Uint8Array|null} [metatrace] DisableAndReadMetatraceResult metatrace
	             * @property {string|null} [error] DisableAndReadMetatraceResult error
	             */

	            /**
	             * Constructs a new DisableAndReadMetatraceResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DisableAndReadMetatraceResult.
	             * @implements IDisableAndReadMetatraceResult
	             * @constructor
	             * @param {perfetto.protos.IDisableAndReadMetatraceResult=} [p] Properties to set
	             */
	            function DisableAndReadMetatraceResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * DisableAndReadMetatraceResult metatrace.
	             * @member {Uint8Array} metatrace
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @instance
	             */
	            DisableAndReadMetatraceResult.prototype.metatrace = $util.newBuffer([]);

	            /**
	             * DisableAndReadMetatraceResult error.
	             * @member {string} error
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @instance
	             */
	            DisableAndReadMetatraceResult.prototype.error = "";

	            /**
	             * Creates a new DisableAndReadMetatraceResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @static
	             * @param {perfetto.protos.IDisableAndReadMetatraceResult=} [properties] Properties to set
	             * @returns {perfetto.protos.DisableAndReadMetatraceResult} DisableAndReadMetatraceResult instance
	             */
	            DisableAndReadMetatraceResult.create = function create(properties) {
	                return new DisableAndReadMetatraceResult(properties);
	            };

	            /**
	             * Encodes the specified DisableAndReadMetatraceResult message. Does not implicitly {@link perfetto.protos.DisableAndReadMetatraceResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @static
	             * @param {perfetto.protos.IDisableAndReadMetatraceResult} m DisableAndReadMetatraceResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DisableAndReadMetatraceResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.metatrace != null && Object.hasOwnProperty.call(m, "metatrace"))
	                    w.uint32(10).bytes(m.metatrace);
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(18).string(m.error);
	                return w;
	            };

	            /**
	             * Decodes a DisableAndReadMetatraceResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DisableAndReadMetatraceResult} DisableAndReadMetatraceResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DisableAndReadMetatraceResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DisableAndReadMetatraceResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.metatrace = r.bytes();
	                            break;
	                        }
	                    case 2: {
	                            m.error = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DisableAndReadMetatraceResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DisableAndReadMetatraceResult} DisableAndReadMetatraceResult
	             */
	            DisableAndReadMetatraceResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DisableAndReadMetatraceResult)
	                    return d;
	                var m = new $root.perfetto.protos.DisableAndReadMetatraceResult();
	                if (d.metatrace != null) {
	                    if (typeof d.metatrace === "string")
	                        $util.base64.decode(d.metatrace, m.metatrace = $util.newBuffer($util.base64.length(d.metatrace)), 0);
	                    else if (d.metatrace.length >= 0)
	                        m.metatrace = d.metatrace;
	                }
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a DisableAndReadMetatraceResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @static
	             * @param {perfetto.protos.DisableAndReadMetatraceResult} m DisableAndReadMetatraceResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DisableAndReadMetatraceResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    if (o.bytes === String)
	                        d.metatrace = "";
	                    else {
	                        d.metatrace = [];
	                        if (o.bytes !== Array)
	                            d.metatrace = $util.newBuffer(d.metatrace);
	                    }
	                    d.error = "";
	                }
	                if (m.metatrace != null && m.hasOwnProperty("metatrace")) {
	                    d.metatrace = o.bytes === String ? $util.base64.encode(m.metatrace, 0, m.metatrace.length) : o.bytes === Array ? Array.prototype.slice.call(m.metatrace) : m.metatrace;
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                return d;
	            };

	            /**
	             * Converts this DisableAndReadMetatraceResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DisableAndReadMetatraceResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DisableAndReadMetatraceResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DisableAndReadMetatraceResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DisableAndReadMetatraceResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DisableAndReadMetatraceResult";
	            };

	            return DisableAndReadMetatraceResult;
	        })();

	        protos.DescriptorSet = (function() {

	            /**
	             * Properties of a DescriptorSet.
	             * @memberof perfetto.protos
	             * @interface IDescriptorSet
	             * @property {Array.<perfetto.protos.IDescriptorProto>|null} [descriptors] DescriptorSet descriptors
	             */

	            /**
	             * Constructs a new DescriptorSet.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DescriptorSet.
	             * @implements IDescriptorSet
	             * @constructor
	             * @param {perfetto.protos.IDescriptorSet=} [p] Properties to set
	             */
	            function DescriptorSet(p) {
	                this.descriptors = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * DescriptorSet descriptors.
	             * @member {Array.<perfetto.protos.IDescriptorProto>} descriptors
	             * @memberof perfetto.protos.DescriptorSet
	             * @instance
	             */
	            DescriptorSet.prototype.descriptors = $util.emptyArray;

	            /**
	             * Creates a new DescriptorSet instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DescriptorSet
	             * @static
	             * @param {perfetto.protos.IDescriptorSet=} [properties] Properties to set
	             * @returns {perfetto.protos.DescriptorSet} DescriptorSet instance
	             */
	            DescriptorSet.create = function create(properties) {
	                return new DescriptorSet(properties);
	            };

	            /**
	             * Encodes the specified DescriptorSet message. Does not implicitly {@link perfetto.protos.DescriptorSet.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DescriptorSet
	             * @static
	             * @param {perfetto.protos.IDescriptorSet} m DescriptorSet message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DescriptorSet.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.descriptors != null && m.descriptors.length) {
	                    for (var i = 0; i < m.descriptors.length; ++i)
	                        $root.perfetto.protos.DescriptorProto.encode(m.descriptors[i], w.uint32(10).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a DescriptorSet message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DescriptorSet
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DescriptorSet} DescriptorSet
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DescriptorSet.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DescriptorSet();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.descriptors && m.descriptors.length))
	                                m.descriptors = [];
	                            m.descriptors.push($root.perfetto.protos.DescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DescriptorSet message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DescriptorSet
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DescriptorSet} DescriptorSet
	             */
	            DescriptorSet.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DescriptorSet)
	                    return d;
	                var m = new $root.perfetto.protos.DescriptorSet();
	                if (d.descriptors) {
	                    if (!Array.isArray(d.descriptors))
	                        throw TypeError(".perfetto.protos.DescriptorSet.descriptors: array expected");
	                    m.descriptors = [];
	                    for (var i = 0; i < d.descriptors.length; ++i) {
	                        if (typeof d.descriptors[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorSet.descriptors: object expected");
	                        m.descriptors[i] = $root.perfetto.protos.DescriptorProto.fromObject(d.descriptors[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a DescriptorSet message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DescriptorSet
	             * @static
	             * @param {perfetto.protos.DescriptorSet} m DescriptorSet
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DescriptorSet.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.descriptors = [];
	                }
	                if (m.descriptors && m.descriptors.length) {
	                    d.descriptors = [];
	                    for (var j = 0; j < m.descriptors.length; ++j) {
	                        d.descriptors[j] = $root.perfetto.protos.DescriptorProto.toObject(m.descriptors[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this DescriptorSet to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DescriptorSet
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DescriptorSet.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DescriptorSet
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DescriptorSet
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DescriptorSet";
	            };

	            return DescriptorSet;
	        })();

	        protos.ResetTraceProcessorArgs = (function() {

	            /**
	             * Properties of a ResetTraceProcessorArgs.
	             * @memberof perfetto.protos
	             * @interface IResetTraceProcessorArgs
	             * @property {perfetto.protos.ResetTraceProcessorArgs.DropTrackEventDataBefore|null} [dropTrackEventDataBefore] ResetTraceProcessorArgs dropTrackEventDataBefore
	             * @property {boolean|null} [ingestFtraceInRawTable] ResetTraceProcessorArgs ingestFtraceInRawTable
	             * @property {boolean|null} [analyzeTraceProtoContent] ResetTraceProcessorArgs analyzeTraceProtoContent
	             * @property {boolean|null} [ftraceDropUntilAllCpusValid] ResetTraceProcessorArgs ftraceDropUntilAllCpusValid
	             * @property {perfetto.protos.ResetTraceProcessorArgs.ParsingMode|null} [parsingMode] ResetTraceProcessorArgs parsingMode
	             */

	            /**
	             * Constructs a new ResetTraceProcessorArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents a ResetTraceProcessorArgs.
	             * @implements IResetTraceProcessorArgs
	             * @constructor
	             * @param {perfetto.protos.IResetTraceProcessorArgs=} [p] Properties to set
	             */
	            function ResetTraceProcessorArgs(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * ResetTraceProcessorArgs dropTrackEventDataBefore.
	             * @member {perfetto.protos.ResetTraceProcessorArgs.DropTrackEventDataBefore} dropTrackEventDataBefore
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @instance
	             */
	            ResetTraceProcessorArgs.prototype.dropTrackEventDataBefore = 0;

	            /**
	             * ResetTraceProcessorArgs ingestFtraceInRawTable.
	             * @member {boolean} ingestFtraceInRawTable
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @instance
	             */
	            ResetTraceProcessorArgs.prototype.ingestFtraceInRawTable = false;

	            /**
	             * ResetTraceProcessorArgs analyzeTraceProtoContent.
	             * @member {boolean} analyzeTraceProtoContent
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @instance
	             */
	            ResetTraceProcessorArgs.prototype.analyzeTraceProtoContent = false;

	            /**
	             * ResetTraceProcessorArgs ftraceDropUntilAllCpusValid.
	             * @member {boolean} ftraceDropUntilAllCpusValid
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @instance
	             */
	            ResetTraceProcessorArgs.prototype.ftraceDropUntilAllCpusValid = false;

	            /**
	             * ResetTraceProcessorArgs parsingMode.
	             * @member {perfetto.protos.ResetTraceProcessorArgs.ParsingMode} parsingMode
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @instance
	             */
	            ResetTraceProcessorArgs.prototype.parsingMode = 0;

	            /**
	             * Creates a new ResetTraceProcessorArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @static
	             * @param {perfetto.protos.IResetTraceProcessorArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.ResetTraceProcessorArgs} ResetTraceProcessorArgs instance
	             */
	            ResetTraceProcessorArgs.create = function create(properties) {
	                return new ResetTraceProcessorArgs(properties);
	            };

	            /**
	             * Encodes the specified ResetTraceProcessorArgs message. Does not implicitly {@link perfetto.protos.ResetTraceProcessorArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @static
	             * @param {perfetto.protos.IResetTraceProcessorArgs} m ResetTraceProcessorArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ResetTraceProcessorArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.dropTrackEventDataBefore != null && Object.hasOwnProperty.call(m, "dropTrackEventDataBefore"))
	                    w.uint32(8).int32(m.dropTrackEventDataBefore);
	                if (m.ingestFtraceInRawTable != null && Object.hasOwnProperty.call(m, "ingestFtraceInRawTable"))
	                    w.uint32(16).bool(m.ingestFtraceInRawTable);
	                if (m.analyzeTraceProtoContent != null && Object.hasOwnProperty.call(m, "analyzeTraceProtoContent"))
	                    w.uint32(24).bool(m.analyzeTraceProtoContent);
	                if (m.ftraceDropUntilAllCpusValid != null && Object.hasOwnProperty.call(m, "ftraceDropUntilAllCpusValid"))
	                    w.uint32(32).bool(m.ftraceDropUntilAllCpusValid);
	                if (m.parsingMode != null && Object.hasOwnProperty.call(m, "parsingMode"))
	                    w.uint32(40).int32(m.parsingMode);
	                return w;
	            };

	            /**
	             * Decodes a ResetTraceProcessorArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.ResetTraceProcessorArgs} ResetTraceProcessorArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ResetTraceProcessorArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.ResetTraceProcessorArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.dropTrackEventDataBefore = r.int32();
	                            break;
	                        }
	                    case 2: {
	                            m.ingestFtraceInRawTable = r.bool();
	                            break;
	                        }
	                    case 3: {
	                            m.analyzeTraceProtoContent = r.bool();
	                            break;
	                        }
	                    case 4: {
	                            m.ftraceDropUntilAllCpusValid = r.bool();
	                            break;
	                        }
	                    case 5: {
	                            m.parsingMode = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a ResetTraceProcessorArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.ResetTraceProcessorArgs} ResetTraceProcessorArgs
	             */
	            ResetTraceProcessorArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.ResetTraceProcessorArgs)
	                    return d;
	                var m = new $root.perfetto.protos.ResetTraceProcessorArgs();
	                switch (d.dropTrackEventDataBefore) {
	                default:
	                    if (typeof d.dropTrackEventDataBefore === "number") {
	                        m.dropTrackEventDataBefore = d.dropTrackEventDataBefore;
	                        break;
	                    }
	                    break;
	                case "NO_DROP":
	                case 0:
	                    m.dropTrackEventDataBefore = 0;
	                    break;
	                case "TRACK_EVENT_RANGE_OF_INTEREST":
	                case 1:
	                    m.dropTrackEventDataBefore = 1;
	                    break;
	                }
	                if (d.ingestFtraceInRawTable != null) {
	                    m.ingestFtraceInRawTable = Boolean(d.ingestFtraceInRawTable);
	                }
	                if (d.analyzeTraceProtoContent != null) {
	                    m.analyzeTraceProtoContent = Boolean(d.analyzeTraceProtoContent);
	                }
	                if (d.ftraceDropUntilAllCpusValid != null) {
	                    m.ftraceDropUntilAllCpusValid = Boolean(d.ftraceDropUntilAllCpusValid);
	                }
	                switch (d.parsingMode) {
	                default:
	                    if (typeof d.parsingMode === "number") {
	                        m.parsingMode = d.parsingMode;
	                        break;
	                    }
	                    break;
	                case "DEFAULT":
	                case 0:
	                    m.parsingMode = 0;
	                    break;
	                case "TOKENIZE_ONLY":
	                case 1:
	                    m.parsingMode = 1;
	                    break;
	                case "TOKENIZE_AND_SORT":
	                case 2:
	                    m.parsingMode = 2;
	                    break;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a ResetTraceProcessorArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @static
	             * @param {perfetto.protos.ResetTraceProcessorArgs} m ResetTraceProcessorArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ResetTraceProcessorArgs.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.dropTrackEventDataBefore = o.enums === String ? "NO_DROP" : 0;
	                    d.ingestFtraceInRawTable = false;
	                    d.analyzeTraceProtoContent = false;
	                    d.ftraceDropUntilAllCpusValid = false;
	                    d.parsingMode = o.enums === String ? "DEFAULT" : 0;
	                }
	                if (m.dropTrackEventDataBefore != null && m.hasOwnProperty("dropTrackEventDataBefore")) {
	                    d.dropTrackEventDataBefore = o.enums === String ? $root.perfetto.protos.ResetTraceProcessorArgs.DropTrackEventDataBefore[m.dropTrackEventDataBefore] === undefined ? m.dropTrackEventDataBefore : $root.perfetto.protos.ResetTraceProcessorArgs.DropTrackEventDataBefore[m.dropTrackEventDataBefore] : m.dropTrackEventDataBefore;
	                }
	                if (m.ingestFtraceInRawTable != null && m.hasOwnProperty("ingestFtraceInRawTable")) {
	                    d.ingestFtraceInRawTable = m.ingestFtraceInRawTable;
	                }
	                if (m.analyzeTraceProtoContent != null && m.hasOwnProperty("analyzeTraceProtoContent")) {
	                    d.analyzeTraceProtoContent = m.analyzeTraceProtoContent;
	                }
	                if (m.ftraceDropUntilAllCpusValid != null && m.hasOwnProperty("ftraceDropUntilAllCpusValid")) {
	                    d.ftraceDropUntilAllCpusValid = m.ftraceDropUntilAllCpusValid;
	                }
	                if (m.parsingMode != null && m.hasOwnProperty("parsingMode")) {
	                    d.parsingMode = o.enums === String ? $root.perfetto.protos.ResetTraceProcessorArgs.ParsingMode[m.parsingMode] === undefined ? m.parsingMode : $root.perfetto.protos.ResetTraceProcessorArgs.ParsingMode[m.parsingMode] : m.parsingMode;
	                }
	                return d;
	            };

	            /**
	             * Converts this ResetTraceProcessorArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ResetTraceProcessorArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for ResetTraceProcessorArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.ResetTraceProcessorArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            ResetTraceProcessorArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.ResetTraceProcessorArgs";
	            };

	            /**
	             * DropTrackEventDataBefore enum.
	             * @name perfetto.protos.ResetTraceProcessorArgs.DropTrackEventDataBefore
	             * @enum {number}
	             * @property {number} NO_DROP=0 NO_DROP value
	             * @property {number} TRACK_EVENT_RANGE_OF_INTEREST=1 TRACK_EVENT_RANGE_OF_INTEREST value
	             */
	            ResetTraceProcessorArgs.DropTrackEventDataBefore = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "NO_DROP"] = 0;
	                values[valuesById[1] = "TRACK_EVENT_RANGE_OF_INTEREST"] = 1;
	                return values;
	            })();

	            /**
	             * ParsingMode enum.
	             * @name perfetto.protos.ResetTraceProcessorArgs.ParsingMode
	             * @enum {number}
	             * @property {number} DEFAULT=0 DEFAULT value
	             * @property {number} TOKENIZE_ONLY=1 TOKENIZE_ONLY value
	             * @property {number} TOKENIZE_AND_SORT=2 TOKENIZE_AND_SORT value
	             */
	            ResetTraceProcessorArgs.ParsingMode = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[0] = "DEFAULT"] = 0;
	                values[valuesById[1] = "TOKENIZE_ONLY"] = 1;
	                values[valuesById[2] = "TOKENIZE_AND_SORT"] = 2;
	                return values;
	            })();

	            return ResetTraceProcessorArgs;
	        })();

	        protos.RegisterSqlPackageArgs = (function() {

	            /**
	             * Properties of a RegisterSqlPackageArgs.
	             * @memberof perfetto.protos
	             * @interface IRegisterSqlPackageArgs
	             * @property {string|null} [packageName] RegisterSqlPackageArgs packageName
	             * @property {Array.<perfetto.protos.RegisterSqlPackageArgs.IModule>|null} [modules] RegisterSqlPackageArgs modules
	             * @property {boolean|null} [allowOverride] RegisterSqlPackageArgs allowOverride
	             */

	            /**
	             * Constructs a new RegisterSqlPackageArgs.
	             * @memberof perfetto.protos
	             * @classdesc Represents a RegisterSqlPackageArgs.
	             * @implements IRegisterSqlPackageArgs
	             * @constructor
	             * @param {perfetto.protos.IRegisterSqlPackageArgs=} [p] Properties to set
	             */
	            function RegisterSqlPackageArgs(p) {
	                this.modules = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * RegisterSqlPackageArgs packageName.
	             * @member {string} packageName
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @instance
	             */
	            RegisterSqlPackageArgs.prototype.packageName = "";

	            /**
	             * RegisterSqlPackageArgs modules.
	             * @member {Array.<perfetto.protos.RegisterSqlPackageArgs.IModule>} modules
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @instance
	             */
	            RegisterSqlPackageArgs.prototype.modules = $util.emptyArray;

	            /**
	             * RegisterSqlPackageArgs allowOverride.
	             * @member {boolean} allowOverride
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @instance
	             */
	            RegisterSqlPackageArgs.prototype.allowOverride = false;

	            /**
	             * Creates a new RegisterSqlPackageArgs instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @static
	             * @param {perfetto.protos.IRegisterSqlPackageArgs=} [properties] Properties to set
	             * @returns {perfetto.protos.RegisterSqlPackageArgs} RegisterSqlPackageArgs instance
	             */
	            RegisterSqlPackageArgs.create = function create(properties) {
	                return new RegisterSqlPackageArgs(properties);
	            };

	            /**
	             * Encodes the specified RegisterSqlPackageArgs message. Does not implicitly {@link perfetto.protos.RegisterSqlPackageArgs.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @static
	             * @param {perfetto.protos.IRegisterSqlPackageArgs} m RegisterSqlPackageArgs message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            RegisterSqlPackageArgs.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.packageName != null && Object.hasOwnProperty.call(m, "packageName"))
	                    w.uint32(10).string(m.packageName);
	                if (m.modules != null && m.modules.length) {
	                    for (var i = 0; i < m.modules.length; ++i)
	                        $root.perfetto.protos.RegisterSqlPackageArgs.Module.encode(m.modules[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.allowOverride != null && Object.hasOwnProperty.call(m, "allowOverride"))
	                    w.uint32(24).bool(m.allowOverride);
	                return w;
	            };

	            /**
	             * Decodes a RegisterSqlPackageArgs message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.RegisterSqlPackageArgs} RegisterSqlPackageArgs
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            RegisterSqlPackageArgs.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.RegisterSqlPackageArgs();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.packageName = r.string();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.modules && m.modules.length))
	                                m.modules = [];
	                            m.modules.push($root.perfetto.protos.RegisterSqlPackageArgs.Module.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 3: {
	                            m.allowOverride = r.bool();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a RegisterSqlPackageArgs message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.RegisterSqlPackageArgs} RegisterSqlPackageArgs
	             */
	            RegisterSqlPackageArgs.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.RegisterSqlPackageArgs)
	                    return d;
	                var m = new $root.perfetto.protos.RegisterSqlPackageArgs();
	                if (d.packageName != null) {
	                    m.packageName = String(d.packageName);
	                }
	                if (d.modules) {
	                    if (!Array.isArray(d.modules))
	                        throw TypeError(".perfetto.protos.RegisterSqlPackageArgs.modules: array expected");
	                    m.modules = [];
	                    for (var i = 0; i < d.modules.length; ++i) {
	                        if (typeof d.modules[i] !== "object")
	                            throw TypeError(".perfetto.protos.RegisterSqlPackageArgs.modules: object expected");
	                        m.modules[i] = $root.perfetto.protos.RegisterSqlPackageArgs.Module.fromObject(d.modules[i]);
	                    }
	                }
	                if (d.allowOverride != null) {
	                    m.allowOverride = Boolean(d.allowOverride);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a RegisterSqlPackageArgs message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @static
	             * @param {perfetto.protos.RegisterSqlPackageArgs} m RegisterSqlPackageArgs
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            RegisterSqlPackageArgs.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.modules = [];
	                }
	                if (o.defaults) {
	                    d.packageName = "";
	                    d.allowOverride = false;
	                }
	                if (m.packageName != null && m.hasOwnProperty("packageName")) {
	                    d.packageName = m.packageName;
	                }
	                if (m.modules && m.modules.length) {
	                    d.modules = [];
	                    for (var j = 0; j < m.modules.length; ++j) {
	                        d.modules[j] = $root.perfetto.protos.RegisterSqlPackageArgs.Module.toObject(m.modules[j], o);
	                    }
	                }
	                if (m.allowOverride != null && m.hasOwnProperty("allowOverride")) {
	                    d.allowOverride = m.allowOverride;
	                }
	                return d;
	            };

	            /**
	             * Converts this RegisterSqlPackageArgs to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            RegisterSqlPackageArgs.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for RegisterSqlPackageArgs
	             * @function getTypeUrl
	             * @memberof perfetto.protos.RegisterSqlPackageArgs
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            RegisterSqlPackageArgs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.RegisterSqlPackageArgs";
	            };

	            RegisterSqlPackageArgs.Module = (function() {

	                /**
	                 * Properties of a Module.
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs
	                 * @interface IModule
	                 * @property {string|null} [name] Module name
	                 * @property {string|null} [sql] Module sql
	                 */

	                /**
	                 * Constructs a new Module.
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs
	                 * @classdesc Represents a Module.
	                 * @implements IModule
	                 * @constructor
	                 * @param {perfetto.protos.RegisterSqlPackageArgs.IModule=} [p] Properties to set
	                 */
	                function Module(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * Module name.
	                 * @member {string} name
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @instance
	                 */
	                Module.prototype.name = "";

	                /**
	                 * Module sql.
	                 * @member {string} sql
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @instance
	                 */
	                Module.prototype.sql = "";

	                /**
	                 * Creates a new Module instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @static
	                 * @param {perfetto.protos.RegisterSqlPackageArgs.IModule=} [properties] Properties to set
	                 * @returns {perfetto.protos.RegisterSqlPackageArgs.Module} Module instance
	                 */
	                Module.create = function create(properties) {
	                    return new Module(properties);
	                };

	                /**
	                 * Encodes the specified Module message. Does not implicitly {@link perfetto.protos.RegisterSqlPackageArgs.Module.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @static
	                 * @param {perfetto.protos.RegisterSqlPackageArgs.IModule} m Module message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                Module.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                        w.uint32(10).string(m.name);
	                    if (m.sql != null && Object.hasOwnProperty.call(m, "sql"))
	                        w.uint32(18).string(m.sql);
	                    return w;
	                };

	                /**
	                 * Decodes a Module message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.RegisterSqlPackageArgs.Module} Module
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                Module.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.RegisterSqlPackageArgs.Module();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.name = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.sql = r.string();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a Module message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.RegisterSqlPackageArgs.Module} Module
	                 */
	                Module.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.RegisterSqlPackageArgs.Module)
	                        return d;
	                    var m = new $root.perfetto.protos.RegisterSqlPackageArgs.Module();
	                    if (d.name != null) {
	                        m.name = String(d.name);
	                    }
	                    if (d.sql != null) {
	                        m.sql = String(d.sql);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a Module message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @static
	                 * @param {perfetto.protos.RegisterSqlPackageArgs.Module} m Module
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                Module.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.name = "";
	                        d.sql = "";
	                    }
	                    if (m.name != null && m.hasOwnProperty("name")) {
	                        d.name = m.name;
	                    }
	                    if (m.sql != null && m.hasOwnProperty("sql")) {
	                        d.sql = m.sql;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this Module to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                Module.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for Module
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.RegisterSqlPackageArgs.Module
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                Module.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.RegisterSqlPackageArgs.Module";
	                };

	                return Module;
	            })();

	            return RegisterSqlPackageArgs;
	        })();

	        protos.RegisterSqlPackageResult = (function() {

	            /**
	             * Properties of a RegisterSqlPackageResult.
	             * @memberof perfetto.protos
	             * @interface IRegisterSqlPackageResult
	             * @property {string|null} [error] RegisterSqlPackageResult error
	             */

	            /**
	             * Constructs a new RegisterSqlPackageResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents a RegisterSqlPackageResult.
	             * @implements IRegisterSqlPackageResult
	             * @constructor
	             * @param {perfetto.protos.IRegisterSqlPackageResult=} [p] Properties to set
	             */
	            function RegisterSqlPackageResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * RegisterSqlPackageResult error.
	             * @member {string} error
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @instance
	             */
	            RegisterSqlPackageResult.prototype.error = "";

	            /**
	             * Creates a new RegisterSqlPackageResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @static
	             * @param {perfetto.protos.IRegisterSqlPackageResult=} [properties] Properties to set
	             * @returns {perfetto.protos.RegisterSqlPackageResult} RegisterSqlPackageResult instance
	             */
	            RegisterSqlPackageResult.create = function create(properties) {
	                return new RegisterSqlPackageResult(properties);
	            };

	            /**
	             * Encodes the specified RegisterSqlPackageResult message. Does not implicitly {@link perfetto.protos.RegisterSqlPackageResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @static
	             * @param {perfetto.protos.IRegisterSqlPackageResult} m RegisterSqlPackageResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            RegisterSqlPackageResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(10).string(m.error);
	                return w;
	            };

	            /**
	             * Decodes a RegisterSqlPackageResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.RegisterSqlPackageResult} RegisterSqlPackageResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            RegisterSqlPackageResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.RegisterSqlPackageResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.error = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a RegisterSqlPackageResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.RegisterSqlPackageResult} RegisterSqlPackageResult
	             */
	            RegisterSqlPackageResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.RegisterSqlPackageResult)
	                    return d;
	                var m = new $root.perfetto.protos.RegisterSqlPackageResult();
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a RegisterSqlPackageResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @static
	             * @param {perfetto.protos.RegisterSqlPackageResult} m RegisterSqlPackageResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            RegisterSqlPackageResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.error = "";
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                return d;
	            };

	            /**
	             * Converts this RegisterSqlPackageResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            RegisterSqlPackageResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for RegisterSqlPackageResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.RegisterSqlPackageResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            RegisterSqlPackageResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.RegisterSqlPackageResult";
	            };

	            return RegisterSqlPackageResult;
	        })();

	        protos.FinalizeDataResult = (function() {

	            /**
	             * Properties of a FinalizeDataResult.
	             * @memberof perfetto.protos
	             * @interface IFinalizeDataResult
	             * @property {string|null} [error] FinalizeDataResult error
	             */

	            /**
	             * Constructs a new FinalizeDataResult.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FinalizeDataResult.
	             * @implements IFinalizeDataResult
	             * @constructor
	             * @param {perfetto.protos.IFinalizeDataResult=} [p] Properties to set
	             */
	            function FinalizeDataResult(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FinalizeDataResult error.
	             * @member {string} error
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @instance
	             */
	            FinalizeDataResult.prototype.error = "";

	            /**
	             * Creates a new FinalizeDataResult instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @static
	             * @param {perfetto.protos.IFinalizeDataResult=} [properties] Properties to set
	             * @returns {perfetto.protos.FinalizeDataResult} FinalizeDataResult instance
	             */
	            FinalizeDataResult.create = function create(properties) {
	                return new FinalizeDataResult(properties);
	            };

	            /**
	             * Encodes the specified FinalizeDataResult message. Does not implicitly {@link perfetto.protos.FinalizeDataResult.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @static
	             * @param {perfetto.protos.IFinalizeDataResult} m FinalizeDataResult message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FinalizeDataResult.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.error != null && Object.hasOwnProperty.call(m, "error"))
	                    w.uint32(10).string(m.error);
	                return w;
	            };

	            /**
	             * Decodes a FinalizeDataResult message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FinalizeDataResult} FinalizeDataResult
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FinalizeDataResult.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FinalizeDataResult();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.error = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FinalizeDataResult message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FinalizeDataResult} FinalizeDataResult
	             */
	            FinalizeDataResult.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FinalizeDataResult)
	                    return d;
	                var m = new $root.perfetto.protos.FinalizeDataResult();
	                if (d.error != null) {
	                    m.error = String(d.error);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FinalizeDataResult message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @static
	             * @param {perfetto.protos.FinalizeDataResult} m FinalizeDataResult
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FinalizeDataResult.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.error = "";
	                }
	                if (m.error != null && m.hasOwnProperty("error")) {
	                    d.error = m.error;
	                }
	                return d;
	            };

	            /**
	             * Converts this FinalizeDataResult to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FinalizeDataResult.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FinalizeDataResult
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FinalizeDataResult
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FinalizeDataResult.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FinalizeDataResult";
	            };

	            return FinalizeDataResult;
	        })();

	        protos.FileDescriptorSet = (function() {

	            /**
	             * Properties of a FileDescriptorSet.
	             * @memberof perfetto.protos
	             * @interface IFileDescriptorSet
	             * @property {Array.<perfetto.protos.IFileDescriptorProto>|null} [file] FileDescriptorSet file
	             */

	            /**
	             * Constructs a new FileDescriptorSet.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FileDescriptorSet.
	             * @implements IFileDescriptorSet
	             * @constructor
	             * @param {perfetto.protos.IFileDescriptorSet=} [p] Properties to set
	             */
	            function FileDescriptorSet(p) {
	                this.file = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FileDescriptorSet file.
	             * @member {Array.<perfetto.protos.IFileDescriptorProto>} file
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @instance
	             */
	            FileDescriptorSet.prototype.file = $util.emptyArray;

	            /**
	             * Creates a new FileDescriptorSet instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @static
	             * @param {perfetto.protos.IFileDescriptorSet=} [properties] Properties to set
	             * @returns {perfetto.protos.FileDescriptorSet} FileDescriptorSet instance
	             */
	            FileDescriptorSet.create = function create(properties) {
	                return new FileDescriptorSet(properties);
	            };

	            /**
	             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link perfetto.protos.FileDescriptorSet.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @static
	             * @param {perfetto.protos.IFileDescriptorSet} m FileDescriptorSet message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FileDescriptorSet.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.file != null && m.file.length) {
	                    for (var i = 0; i < m.file.length; ++i)
	                        $root.perfetto.protos.FileDescriptorProto.encode(m.file[i], w.uint32(10).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a FileDescriptorSet message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FileDescriptorSet} FileDescriptorSet
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FileDescriptorSet.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FileDescriptorSet();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            if (!(m.file && m.file.length))
	                                m.file = [];
	                            m.file.push($root.perfetto.protos.FileDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FileDescriptorSet} FileDescriptorSet
	             */
	            FileDescriptorSet.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FileDescriptorSet)
	                    return d;
	                var m = new $root.perfetto.protos.FileDescriptorSet();
	                if (d.file) {
	                    if (!Array.isArray(d.file))
	                        throw TypeError(".perfetto.protos.FileDescriptorSet.file: array expected");
	                    m.file = [];
	                    for (var i = 0; i < d.file.length; ++i) {
	                        if (typeof d.file[i] !== "object")
	                            throw TypeError(".perfetto.protos.FileDescriptorSet.file: object expected");
	                        m.file[i] = $root.perfetto.protos.FileDescriptorProto.fromObject(d.file[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @static
	             * @param {perfetto.protos.FileDescriptorSet} m FileDescriptorSet
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FileDescriptorSet.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.file = [];
	                }
	                if (m.file && m.file.length) {
	                    d.file = [];
	                    for (var j = 0; j < m.file.length; ++j) {
	                        d.file[j] = $root.perfetto.protos.FileDescriptorProto.toObject(m.file[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this FileDescriptorSet to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FileDescriptorSet.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FileDescriptorSet
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FileDescriptorSet
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FileDescriptorSet";
	            };

	            return FileDescriptorSet;
	        })();

	        protos.FileDescriptorProto = (function() {

	            /**
	             * Properties of a FileDescriptorProto.
	             * @memberof perfetto.protos
	             * @interface IFileDescriptorProto
	             * @property {string|null} [name] FileDescriptorProto name
	             * @property {string|null} ["package"] FileDescriptorProto package
	             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
	             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
	             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
	             * @property {Array.<perfetto.protos.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
	             * @property {Array.<perfetto.protos.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
	             * @property {Array.<perfetto.protos.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
	             */

	            /**
	             * Constructs a new FileDescriptorProto.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FileDescriptorProto.
	             * @implements IFileDescriptorProto
	             * @constructor
	             * @param {perfetto.protos.IFileDescriptorProto=} [p] Properties to set
	             */
	            function FileDescriptorProto(p) {
	                this.dependency = [];
	                this.publicDependency = [];
	                this.weakDependency = [];
	                this.messageType = [];
	                this.enumType = [];
	                this.extension = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FileDescriptorProto name.
	             * @member {string} name
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.name = "";

	            /**
	             * FileDescriptorProto package.
	             * @member {string} package
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype["package"] = "";

	            /**
	             * FileDescriptorProto dependency.
	             * @member {Array.<string>} dependency
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.dependency = $util.emptyArray;

	            /**
	             * FileDescriptorProto publicDependency.
	             * @member {Array.<number>} publicDependency
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

	            /**
	             * FileDescriptorProto weakDependency.
	             * @member {Array.<number>} weakDependency
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

	            /**
	             * FileDescriptorProto messageType.
	             * @member {Array.<perfetto.protos.IDescriptorProto>} messageType
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.messageType = $util.emptyArray;

	            /**
	             * FileDescriptorProto enumType.
	             * @member {Array.<perfetto.protos.IEnumDescriptorProto>} enumType
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.enumType = $util.emptyArray;

	            /**
	             * FileDescriptorProto extension.
	             * @member {Array.<perfetto.protos.IFieldDescriptorProto>} extension
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             */
	            FileDescriptorProto.prototype.extension = $util.emptyArray;

	            /**
	             * Creates a new FileDescriptorProto instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @static
	             * @param {perfetto.protos.IFileDescriptorProto=} [properties] Properties to set
	             * @returns {perfetto.protos.FileDescriptorProto} FileDescriptorProto instance
	             */
	            FileDescriptorProto.create = function create(properties) {
	                return new FileDescriptorProto(properties);
	            };

	            /**
	             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link perfetto.protos.FileDescriptorProto.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @static
	             * @param {perfetto.protos.IFileDescriptorProto} m FileDescriptorProto message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FileDescriptorProto.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m["package"] != null && Object.hasOwnProperty.call(m, "package"))
	                    w.uint32(18).string(m["package"]);
	                if (m.dependency != null && m.dependency.length) {
	                    for (var i = 0; i < m.dependency.length; ++i)
	                        w.uint32(26).string(m.dependency[i]);
	                }
	                if (m.messageType != null && m.messageType.length) {
	                    for (var i = 0; i < m.messageType.length; ++i)
	                        $root.perfetto.protos.DescriptorProto.encode(m.messageType[i], w.uint32(34).fork()).ldelim();
	                }
	                if (m.enumType != null && m.enumType.length) {
	                    for (var i = 0; i < m.enumType.length; ++i)
	                        $root.perfetto.protos.EnumDescriptorProto.encode(m.enumType[i], w.uint32(42).fork()).ldelim();
	                }
	                if (m.extension != null && m.extension.length) {
	                    for (var i = 0; i < m.extension.length; ++i)
	                        $root.perfetto.protos.FieldDescriptorProto.encode(m.extension[i], w.uint32(58).fork()).ldelim();
	                }
	                if (m.publicDependency != null && m.publicDependency.length) {
	                    for (var i = 0; i < m.publicDependency.length; ++i)
	                        w.uint32(80).int32(m.publicDependency[i]);
	                }
	                if (m.weakDependency != null && m.weakDependency.length) {
	                    for (var i = 0; i < m.weakDependency.length; ++i)
	                        w.uint32(88).int32(m.weakDependency[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a FileDescriptorProto message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FileDescriptorProto} FileDescriptorProto
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FileDescriptorProto.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FileDescriptorProto();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m["package"] = r.string();
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.dependency && m.dependency.length))
	                                m.dependency = [];
	                            m.dependency.push(r.string());
	                            break;
	                        }
	                    case 10: {
	                            if (!(m.publicDependency && m.publicDependency.length))
	                                m.publicDependency = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.publicDependency.push(r.int32());
	                            } else
	                                m.publicDependency.push(r.int32());
	                            break;
	                        }
	                    case 11: {
	                            if (!(m.weakDependency && m.weakDependency.length))
	                                m.weakDependency = [];
	                            if ((t & 7) === 2) {
	                                var c2 = r.uint32() + r.pos;
	                                while (r.pos < c2)
	                                    m.weakDependency.push(r.int32());
	                            } else
	                                m.weakDependency.push(r.int32());
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.messageType && m.messageType.length))
	                                m.messageType = [];
	                            m.messageType.push($root.perfetto.protos.DescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 5: {
	                            if (!(m.enumType && m.enumType.length))
	                                m.enumType = [];
	                            m.enumType.push($root.perfetto.protos.EnumDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 7: {
	                            if (!(m.extension && m.extension.length))
	                                m.extension = [];
	                            m.extension.push($root.perfetto.protos.FieldDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FileDescriptorProto} FileDescriptorProto
	             */
	            FileDescriptorProto.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FileDescriptorProto)
	                    return d;
	                var m = new $root.perfetto.protos.FileDescriptorProto();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d["package"] != null) {
	                    m["package"] = String(d["package"]);
	                }
	                if (d.dependency) {
	                    if (!Array.isArray(d.dependency))
	                        throw TypeError(".perfetto.protos.FileDescriptorProto.dependency: array expected");
	                    m.dependency = [];
	                    for (var i = 0; i < d.dependency.length; ++i) {
	                        m.dependency[i] = String(d.dependency[i]);
	                    }
	                }
	                if (d.publicDependency) {
	                    if (!Array.isArray(d.publicDependency))
	                        throw TypeError(".perfetto.protos.FileDescriptorProto.publicDependency: array expected");
	                    m.publicDependency = [];
	                    for (var i = 0; i < d.publicDependency.length; ++i) {
	                        m.publicDependency[i] = d.publicDependency[i] | 0;
	                    }
	                }
	                if (d.weakDependency) {
	                    if (!Array.isArray(d.weakDependency))
	                        throw TypeError(".perfetto.protos.FileDescriptorProto.weakDependency: array expected");
	                    m.weakDependency = [];
	                    for (var i = 0; i < d.weakDependency.length; ++i) {
	                        m.weakDependency[i] = d.weakDependency[i] | 0;
	                    }
	                }
	                if (d.messageType) {
	                    if (!Array.isArray(d.messageType))
	                        throw TypeError(".perfetto.protos.FileDescriptorProto.messageType: array expected");
	                    m.messageType = [];
	                    for (var i = 0; i < d.messageType.length; ++i) {
	                        if (typeof d.messageType[i] !== "object")
	                            throw TypeError(".perfetto.protos.FileDescriptorProto.messageType: object expected");
	                        m.messageType[i] = $root.perfetto.protos.DescriptorProto.fromObject(d.messageType[i]);
	                    }
	                }
	                if (d.enumType) {
	                    if (!Array.isArray(d.enumType))
	                        throw TypeError(".perfetto.protos.FileDescriptorProto.enumType: array expected");
	                    m.enumType = [];
	                    for (var i = 0; i < d.enumType.length; ++i) {
	                        if (typeof d.enumType[i] !== "object")
	                            throw TypeError(".perfetto.protos.FileDescriptorProto.enumType: object expected");
	                        m.enumType[i] = $root.perfetto.protos.EnumDescriptorProto.fromObject(d.enumType[i]);
	                    }
	                }
	                if (d.extension) {
	                    if (!Array.isArray(d.extension))
	                        throw TypeError(".perfetto.protos.FileDescriptorProto.extension: array expected");
	                    m.extension = [];
	                    for (var i = 0; i < d.extension.length; ++i) {
	                        if (typeof d.extension[i] !== "object")
	                            throw TypeError(".perfetto.protos.FileDescriptorProto.extension: object expected");
	                        m.extension[i] = $root.perfetto.protos.FieldDescriptorProto.fromObject(d.extension[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @static
	             * @param {perfetto.protos.FileDescriptorProto} m FileDescriptorProto
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FileDescriptorProto.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.dependency = [];
	                    d.messageType = [];
	                    d.enumType = [];
	                    d.extension = [];
	                    d.publicDependency = [];
	                    d.weakDependency = [];
	                }
	                if (o.defaults) {
	                    d.name = "";
	                    d["package"] = "";
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m["package"] != null && m.hasOwnProperty("package")) {
	                    d["package"] = m["package"];
	                }
	                if (m.dependency && m.dependency.length) {
	                    d.dependency = [];
	                    for (var j = 0; j < m.dependency.length; ++j) {
	                        d.dependency[j] = m.dependency[j];
	                    }
	                }
	                if (m.messageType && m.messageType.length) {
	                    d.messageType = [];
	                    for (var j = 0; j < m.messageType.length; ++j) {
	                        d.messageType[j] = $root.perfetto.protos.DescriptorProto.toObject(m.messageType[j], o);
	                    }
	                }
	                if (m.enumType && m.enumType.length) {
	                    d.enumType = [];
	                    for (var j = 0; j < m.enumType.length; ++j) {
	                        d.enumType[j] = $root.perfetto.protos.EnumDescriptorProto.toObject(m.enumType[j], o);
	                    }
	                }
	                if (m.extension && m.extension.length) {
	                    d.extension = [];
	                    for (var j = 0; j < m.extension.length; ++j) {
	                        d.extension[j] = $root.perfetto.protos.FieldDescriptorProto.toObject(m.extension[j], o);
	                    }
	                }
	                if (m.publicDependency && m.publicDependency.length) {
	                    d.publicDependency = [];
	                    for (var j = 0; j < m.publicDependency.length; ++j) {
	                        d.publicDependency[j] = m.publicDependency[j];
	                    }
	                }
	                if (m.weakDependency && m.weakDependency.length) {
	                    d.weakDependency = [];
	                    for (var j = 0; j < m.weakDependency.length; ++j) {
	                        d.weakDependency[j] = m.weakDependency[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this FileDescriptorProto to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FileDescriptorProto.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FileDescriptorProto
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FileDescriptorProto
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FileDescriptorProto";
	            };

	            return FileDescriptorProto;
	        })();

	        protos.DescriptorProto = (function() {

	            /**
	             * Properties of a DescriptorProto.
	             * @memberof perfetto.protos
	             * @interface IDescriptorProto
	             * @property {string|null} [name] DescriptorProto name
	             * @property {Array.<perfetto.protos.IFieldDescriptorProto>|null} [field] DescriptorProto field
	             * @property {Array.<perfetto.protos.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
	             * @property {Array.<perfetto.protos.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
	             * @property {Array.<perfetto.protos.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
	             * @property {Array.<perfetto.protos.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
	             * @property {Array.<perfetto.protos.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
	             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
	             */

	            /**
	             * Constructs a new DescriptorProto.
	             * @memberof perfetto.protos
	             * @classdesc Represents a DescriptorProto.
	             * @implements IDescriptorProto
	             * @constructor
	             * @param {perfetto.protos.IDescriptorProto=} [p] Properties to set
	             */
	            function DescriptorProto(p) {
	                this.field = [];
	                this.extension = [];
	                this.nestedType = [];
	                this.enumType = [];
	                this.oneofDecl = [];
	                this.reservedRange = [];
	                this.reservedName = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * DescriptorProto name.
	             * @member {string} name
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.name = "";

	            /**
	             * DescriptorProto field.
	             * @member {Array.<perfetto.protos.IFieldDescriptorProto>} field
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.field = $util.emptyArray;

	            /**
	             * DescriptorProto extension.
	             * @member {Array.<perfetto.protos.IFieldDescriptorProto>} extension
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.extension = $util.emptyArray;

	            /**
	             * DescriptorProto nestedType.
	             * @member {Array.<perfetto.protos.IDescriptorProto>} nestedType
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.nestedType = $util.emptyArray;

	            /**
	             * DescriptorProto enumType.
	             * @member {Array.<perfetto.protos.IEnumDescriptorProto>} enumType
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.enumType = $util.emptyArray;

	            /**
	             * DescriptorProto oneofDecl.
	             * @member {Array.<perfetto.protos.IOneofDescriptorProto>} oneofDecl
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

	            /**
	             * DescriptorProto reservedRange.
	             * @member {Array.<perfetto.protos.DescriptorProto.IReservedRange>} reservedRange
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.reservedRange = $util.emptyArray;

	            /**
	             * DescriptorProto reservedName.
	             * @member {Array.<string>} reservedName
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             */
	            DescriptorProto.prototype.reservedName = $util.emptyArray;

	            /**
	             * Creates a new DescriptorProto instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.DescriptorProto
	             * @static
	             * @param {perfetto.protos.IDescriptorProto=} [properties] Properties to set
	             * @returns {perfetto.protos.DescriptorProto} DescriptorProto instance
	             */
	            DescriptorProto.create = function create(properties) {
	                return new DescriptorProto(properties);
	            };

	            /**
	             * Encodes the specified DescriptorProto message. Does not implicitly {@link perfetto.protos.DescriptorProto.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.DescriptorProto
	             * @static
	             * @param {perfetto.protos.IDescriptorProto} m DescriptorProto message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            DescriptorProto.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.field != null && m.field.length) {
	                    for (var i = 0; i < m.field.length; ++i)
	                        $root.perfetto.protos.FieldDescriptorProto.encode(m.field[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.nestedType != null && m.nestedType.length) {
	                    for (var i = 0; i < m.nestedType.length; ++i)
	                        $root.perfetto.protos.DescriptorProto.encode(m.nestedType[i], w.uint32(26).fork()).ldelim();
	                }
	                if (m.enumType != null && m.enumType.length) {
	                    for (var i = 0; i < m.enumType.length; ++i)
	                        $root.perfetto.protos.EnumDescriptorProto.encode(m.enumType[i], w.uint32(34).fork()).ldelim();
	                }
	                if (m.extension != null && m.extension.length) {
	                    for (var i = 0; i < m.extension.length; ++i)
	                        $root.perfetto.protos.FieldDescriptorProto.encode(m.extension[i], w.uint32(50).fork()).ldelim();
	                }
	                if (m.oneofDecl != null && m.oneofDecl.length) {
	                    for (var i = 0; i < m.oneofDecl.length; ++i)
	                        $root.perfetto.protos.OneofDescriptorProto.encode(m.oneofDecl[i], w.uint32(66).fork()).ldelim();
	                }
	                if (m.reservedRange != null && m.reservedRange.length) {
	                    for (var i = 0; i < m.reservedRange.length; ++i)
	                        $root.perfetto.protos.DescriptorProto.ReservedRange.encode(m.reservedRange[i], w.uint32(74).fork()).ldelim();
	                }
	                if (m.reservedName != null && m.reservedName.length) {
	                    for (var i = 0; i < m.reservedName.length; ++i)
	                        w.uint32(82).string(m.reservedName[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes a DescriptorProto message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.DescriptorProto
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.DescriptorProto} DescriptorProto
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            DescriptorProto.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DescriptorProto();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.field && m.field.length))
	                                m.field = [];
	                            m.field.push($root.perfetto.protos.FieldDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 6: {
	                            if (!(m.extension && m.extension.length))
	                                m.extension = [];
	                            m.extension.push($root.perfetto.protos.FieldDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 3: {
	                            if (!(m.nestedType && m.nestedType.length))
	                                m.nestedType = [];
	                            m.nestedType.push($root.perfetto.protos.DescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 4: {
	                            if (!(m.enumType && m.enumType.length))
	                                m.enumType = [];
	                            m.enumType.push($root.perfetto.protos.EnumDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 8: {
	                            if (!(m.oneofDecl && m.oneofDecl.length))
	                                m.oneofDecl = [];
	                            m.oneofDecl.push($root.perfetto.protos.OneofDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 9: {
	                            if (!(m.reservedRange && m.reservedRange.length))
	                                m.reservedRange = [];
	                            m.reservedRange.push($root.perfetto.protos.DescriptorProto.ReservedRange.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 10: {
	                            if (!(m.reservedName && m.reservedName.length))
	                                m.reservedName = [];
	                            m.reservedName.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.DescriptorProto
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.DescriptorProto} DescriptorProto
	             */
	            DescriptorProto.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.DescriptorProto)
	                    return d;
	                var m = new $root.perfetto.protos.DescriptorProto();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.field) {
	                    if (!Array.isArray(d.field))
	                        throw TypeError(".perfetto.protos.DescriptorProto.field: array expected");
	                    m.field = [];
	                    for (var i = 0; i < d.field.length; ++i) {
	                        if (typeof d.field[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorProto.field: object expected");
	                        m.field[i] = $root.perfetto.protos.FieldDescriptorProto.fromObject(d.field[i]);
	                    }
	                }
	                if (d.extension) {
	                    if (!Array.isArray(d.extension))
	                        throw TypeError(".perfetto.protos.DescriptorProto.extension: array expected");
	                    m.extension = [];
	                    for (var i = 0; i < d.extension.length; ++i) {
	                        if (typeof d.extension[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorProto.extension: object expected");
	                        m.extension[i] = $root.perfetto.protos.FieldDescriptorProto.fromObject(d.extension[i]);
	                    }
	                }
	                if (d.nestedType) {
	                    if (!Array.isArray(d.nestedType))
	                        throw TypeError(".perfetto.protos.DescriptorProto.nestedType: array expected");
	                    m.nestedType = [];
	                    for (var i = 0; i < d.nestedType.length; ++i) {
	                        if (typeof d.nestedType[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorProto.nestedType: object expected");
	                        m.nestedType[i] = $root.perfetto.protos.DescriptorProto.fromObject(d.nestedType[i]);
	                    }
	                }
	                if (d.enumType) {
	                    if (!Array.isArray(d.enumType))
	                        throw TypeError(".perfetto.protos.DescriptorProto.enumType: array expected");
	                    m.enumType = [];
	                    for (var i = 0; i < d.enumType.length; ++i) {
	                        if (typeof d.enumType[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorProto.enumType: object expected");
	                        m.enumType[i] = $root.perfetto.protos.EnumDescriptorProto.fromObject(d.enumType[i]);
	                    }
	                }
	                if (d.oneofDecl) {
	                    if (!Array.isArray(d.oneofDecl))
	                        throw TypeError(".perfetto.protos.DescriptorProto.oneofDecl: array expected");
	                    m.oneofDecl = [];
	                    for (var i = 0; i < d.oneofDecl.length; ++i) {
	                        if (typeof d.oneofDecl[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorProto.oneofDecl: object expected");
	                        m.oneofDecl[i] = $root.perfetto.protos.OneofDescriptorProto.fromObject(d.oneofDecl[i]);
	                    }
	                }
	                if (d.reservedRange) {
	                    if (!Array.isArray(d.reservedRange))
	                        throw TypeError(".perfetto.protos.DescriptorProto.reservedRange: array expected");
	                    m.reservedRange = [];
	                    for (var i = 0; i < d.reservedRange.length; ++i) {
	                        if (typeof d.reservedRange[i] !== "object")
	                            throw TypeError(".perfetto.protos.DescriptorProto.reservedRange: object expected");
	                        m.reservedRange[i] = $root.perfetto.protos.DescriptorProto.ReservedRange.fromObject(d.reservedRange[i]);
	                    }
	                }
	                if (d.reservedName) {
	                    if (!Array.isArray(d.reservedName))
	                        throw TypeError(".perfetto.protos.DescriptorProto.reservedName: array expected");
	                    m.reservedName = [];
	                    for (var i = 0; i < d.reservedName.length; ++i) {
	                        m.reservedName[i] = String(d.reservedName[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.DescriptorProto
	             * @static
	             * @param {perfetto.protos.DescriptorProto} m DescriptorProto
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            DescriptorProto.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.field = [];
	                    d.nestedType = [];
	                    d.enumType = [];
	                    d.extension = [];
	                    d.oneofDecl = [];
	                    d.reservedRange = [];
	                    d.reservedName = [];
	                }
	                if (o.defaults) {
	                    d.name = "";
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.field && m.field.length) {
	                    d.field = [];
	                    for (var j = 0; j < m.field.length; ++j) {
	                        d.field[j] = $root.perfetto.protos.FieldDescriptorProto.toObject(m.field[j], o);
	                    }
	                }
	                if (m.nestedType && m.nestedType.length) {
	                    d.nestedType = [];
	                    for (var j = 0; j < m.nestedType.length; ++j) {
	                        d.nestedType[j] = $root.perfetto.protos.DescriptorProto.toObject(m.nestedType[j], o);
	                    }
	                }
	                if (m.enumType && m.enumType.length) {
	                    d.enumType = [];
	                    for (var j = 0; j < m.enumType.length; ++j) {
	                        d.enumType[j] = $root.perfetto.protos.EnumDescriptorProto.toObject(m.enumType[j], o);
	                    }
	                }
	                if (m.extension && m.extension.length) {
	                    d.extension = [];
	                    for (var j = 0; j < m.extension.length; ++j) {
	                        d.extension[j] = $root.perfetto.protos.FieldDescriptorProto.toObject(m.extension[j], o);
	                    }
	                }
	                if (m.oneofDecl && m.oneofDecl.length) {
	                    d.oneofDecl = [];
	                    for (var j = 0; j < m.oneofDecl.length; ++j) {
	                        d.oneofDecl[j] = $root.perfetto.protos.OneofDescriptorProto.toObject(m.oneofDecl[j], o);
	                    }
	                }
	                if (m.reservedRange && m.reservedRange.length) {
	                    d.reservedRange = [];
	                    for (var j = 0; j < m.reservedRange.length; ++j) {
	                        d.reservedRange[j] = $root.perfetto.protos.DescriptorProto.ReservedRange.toObject(m.reservedRange[j], o);
	                    }
	                }
	                if (m.reservedName && m.reservedName.length) {
	                    d.reservedName = [];
	                    for (var j = 0; j < m.reservedName.length; ++j) {
	                        d.reservedName[j] = m.reservedName[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this DescriptorProto to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.DescriptorProto
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            DescriptorProto.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for DescriptorProto
	             * @function getTypeUrl
	             * @memberof perfetto.protos.DescriptorProto
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.DescriptorProto";
	            };

	            DescriptorProto.ReservedRange = (function() {

	                /**
	                 * Properties of a ReservedRange.
	                 * @memberof perfetto.protos.DescriptorProto
	                 * @interface IReservedRange
	                 * @property {number|null} [start] ReservedRange start
	                 * @property {number|null} [end] ReservedRange end
	                 */

	                /**
	                 * Constructs a new ReservedRange.
	                 * @memberof perfetto.protos.DescriptorProto
	                 * @classdesc Represents a ReservedRange.
	                 * @implements IReservedRange
	                 * @constructor
	                 * @param {perfetto.protos.DescriptorProto.IReservedRange=} [p] Properties to set
	                 */
	                function ReservedRange(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * ReservedRange start.
	                 * @member {number} start
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @instance
	                 */
	                ReservedRange.prototype.start = 0;

	                /**
	                 * ReservedRange end.
	                 * @member {number} end
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @instance
	                 */
	                ReservedRange.prototype.end = 0;

	                /**
	                 * Creates a new ReservedRange instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @static
	                 * @param {perfetto.protos.DescriptorProto.IReservedRange=} [properties] Properties to set
	                 * @returns {perfetto.protos.DescriptorProto.ReservedRange} ReservedRange instance
	                 */
	                ReservedRange.create = function create(properties) {
	                    return new ReservedRange(properties);
	                };

	                /**
	                 * Encodes the specified ReservedRange message. Does not implicitly {@link perfetto.protos.DescriptorProto.ReservedRange.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @static
	                 * @param {perfetto.protos.DescriptorProto.IReservedRange} m ReservedRange message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                ReservedRange.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.start != null && Object.hasOwnProperty.call(m, "start"))
	                        w.uint32(8).int32(m.start);
	                    if (m.end != null && Object.hasOwnProperty.call(m, "end"))
	                        w.uint32(16).int32(m.end);
	                    return w;
	                };

	                /**
	                 * Decodes a ReservedRange message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.DescriptorProto.ReservedRange} ReservedRange
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                ReservedRange.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.DescriptorProto.ReservedRange();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.start = r.int32();
	                                break;
	                            }
	                        case 2: {
	                                m.end = r.int32();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.DescriptorProto.ReservedRange} ReservedRange
	                 */
	                ReservedRange.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.DescriptorProto.ReservedRange)
	                        return d;
	                    var m = new $root.perfetto.protos.DescriptorProto.ReservedRange();
	                    if (d.start != null) {
	                        m.start = d.start | 0;
	                    }
	                    if (d.end != null) {
	                        m.end = d.end | 0;
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @static
	                 * @param {perfetto.protos.DescriptorProto.ReservedRange} m ReservedRange
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                ReservedRange.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.start = 0;
	                        d.end = 0;
	                    }
	                    if (m.start != null && m.hasOwnProperty("start")) {
	                        d.start = m.start;
	                    }
	                    if (m.end != null && m.hasOwnProperty("end")) {
	                        d.end = m.end;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this ReservedRange to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                ReservedRange.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for ReservedRange
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.DescriptorProto.ReservedRange
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.DescriptorProto.ReservedRange";
	                };

	                return ReservedRange;
	            })();

	            return DescriptorProto;
	        })();

	        protos.UninterpretedOption = (function() {

	            /**
	             * Properties of an UninterpretedOption.
	             * @memberof perfetto.protos
	             * @interface IUninterpretedOption
	             * @property {Array.<perfetto.protos.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
	             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
	             * @property {number|null} [positiveIntValue] UninterpretedOption positiveIntValue
	             * @property {number|null} [negativeIntValue] UninterpretedOption negativeIntValue
	             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
	             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
	             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
	             */

	            /**
	             * Constructs a new UninterpretedOption.
	             * @memberof perfetto.protos
	             * @classdesc Represents an UninterpretedOption.
	             * @implements IUninterpretedOption
	             * @constructor
	             * @param {perfetto.protos.IUninterpretedOption=} [p] Properties to set
	             */
	            function UninterpretedOption(p) {
	                this.name = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * UninterpretedOption name.
	             * @member {Array.<perfetto.protos.UninterpretedOption.INamePart>} name
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.name = $util.emptyArray;

	            /**
	             * UninterpretedOption identifierValue.
	             * @member {string} identifierValue
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.identifierValue = "";

	            /**
	             * UninterpretedOption positiveIntValue.
	             * @member {number} positiveIntValue
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

	            /**
	             * UninterpretedOption negativeIntValue.
	             * @member {number} negativeIntValue
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

	            /**
	             * UninterpretedOption doubleValue.
	             * @member {number} doubleValue
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.doubleValue = 0;

	            /**
	             * UninterpretedOption stringValue.
	             * @member {Uint8Array} stringValue
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

	            /**
	             * UninterpretedOption aggregateValue.
	             * @member {string} aggregateValue
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             */
	            UninterpretedOption.prototype.aggregateValue = "";

	            /**
	             * Creates a new UninterpretedOption instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.UninterpretedOption
	             * @static
	             * @param {perfetto.protos.IUninterpretedOption=} [properties] Properties to set
	             * @returns {perfetto.protos.UninterpretedOption} UninterpretedOption instance
	             */
	            UninterpretedOption.create = function create(properties) {
	                return new UninterpretedOption(properties);
	            };

	            /**
	             * Encodes the specified UninterpretedOption message. Does not implicitly {@link perfetto.protos.UninterpretedOption.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.UninterpretedOption
	             * @static
	             * @param {perfetto.protos.IUninterpretedOption} m UninterpretedOption message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            UninterpretedOption.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && m.name.length) {
	                    for (var i = 0; i < m.name.length; ++i)
	                        $root.perfetto.protos.UninterpretedOption.NamePart.encode(m.name[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.identifierValue != null && Object.hasOwnProperty.call(m, "identifierValue"))
	                    w.uint32(26).string(m.identifierValue);
	                if (m.positiveIntValue != null && Object.hasOwnProperty.call(m, "positiveIntValue"))
	                    w.uint32(32).uint64(m.positiveIntValue);
	                if (m.negativeIntValue != null && Object.hasOwnProperty.call(m, "negativeIntValue"))
	                    w.uint32(40).int64(m.negativeIntValue);
	                if (m.doubleValue != null && Object.hasOwnProperty.call(m, "doubleValue"))
	                    w.uint32(49).double(m.doubleValue);
	                if (m.stringValue != null && Object.hasOwnProperty.call(m, "stringValue"))
	                    w.uint32(58).bytes(m.stringValue);
	                if (m.aggregateValue != null && Object.hasOwnProperty.call(m, "aggregateValue"))
	                    w.uint32(66).string(m.aggregateValue);
	                return w;
	            };

	            /**
	             * Decodes an UninterpretedOption message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.UninterpretedOption
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.UninterpretedOption} UninterpretedOption
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            UninterpretedOption.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.UninterpretedOption();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 2: {
	                            if (!(m.name && m.name.length))
	                                m.name = [];
	                            m.name.push($root.perfetto.protos.UninterpretedOption.NamePart.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 3: {
	                            m.identifierValue = r.string();
	                            break;
	                        }
	                    case 4: {
	                            m.positiveIntValue = r.uint64();
	                            break;
	                        }
	                    case 5: {
	                            m.negativeIntValue = r.int64();
	                            break;
	                        }
	                    case 6: {
	                            m.doubleValue = r.double();
	                            break;
	                        }
	                    case 7: {
	                            m.stringValue = r.bytes();
	                            break;
	                        }
	                    case 8: {
	                            m.aggregateValue = r.string();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.UninterpretedOption
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.UninterpretedOption} UninterpretedOption
	             */
	            UninterpretedOption.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.UninterpretedOption)
	                    return d;
	                var m = new $root.perfetto.protos.UninterpretedOption();
	                if (d.name) {
	                    if (!Array.isArray(d.name))
	                        throw TypeError(".perfetto.protos.UninterpretedOption.name: array expected");
	                    m.name = [];
	                    for (var i = 0; i < d.name.length; ++i) {
	                        if (typeof d.name[i] !== "object")
	                            throw TypeError(".perfetto.protos.UninterpretedOption.name: object expected");
	                        m.name[i] = $root.perfetto.protos.UninterpretedOption.NamePart.fromObject(d.name[i]);
	                    }
	                }
	                if (d.identifierValue != null) {
	                    m.identifierValue = String(d.identifierValue);
	                }
	                if (d.positiveIntValue != null) {
	                    if ($util.Long)
	                        (m.positiveIntValue = $util.Long.fromValue(d.positiveIntValue)).unsigned = true;
	                    else if (typeof d.positiveIntValue === "string")
	                        m.positiveIntValue = parseInt(d.positiveIntValue, 10);
	                    else if (typeof d.positiveIntValue === "number")
	                        m.positiveIntValue = d.positiveIntValue;
	                    else if (typeof d.positiveIntValue === "object")
	                        m.positiveIntValue = new $util.LongBits(d.positiveIntValue.low >>> 0, d.positiveIntValue.high >>> 0).toNumber(true);
	                }
	                if (d.negativeIntValue != null) {
	                    if ($util.Long)
	                        (m.negativeIntValue = $util.Long.fromValue(d.negativeIntValue)).unsigned = false;
	                    else if (typeof d.negativeIntValue === "string")
	                        m.negativeIntValue = parseInt(d.negativeIntValue, 10);
	                    else if (typeof d.negativeIntValue === "number")
	                        m.negativeIntValue = d.negativeIntValue;
	                    else if (typeof d.negativeIntValue === "object")
	                        m.negativeIntValue = new $util.LongBits(d.negativeIntValue.low >>> 0, d.negativeIntValue.high >>> 0).toNumber();
	                }
	                if (d.doubleValue != null) {
	                    m.doubleValue = Number(d.doubleValue);
	                }
	                if (d.stringValue != null) {
	                    if (typeof d.stringValue === "string")
	                        $util.base64.decode(d.stringValue, m.stringValue = $util.newBuffer($util.base64.length(d.stringValue)), 0);
	                    else if (d.stringValue.length >= 0)
	                        m.stringValue = d.stringValue;
	                }
	                if (d.aggregateValue != null) {
	                    m.aggregateValue = String(d.aggregateValue);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.UninterpretedOption
	             * @static
	             * @param {perfetto.protos.UninterpretedOption} m UninterpretedOption
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            UninterpretedOption.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.name = [];
	                }
	                if (o.defaults) {
	                    d.identifierValue = "";
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, true);
	                        d.positiveIntValue = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.positiveIntValue = o.longs === String ? "0" : 0;
	                    if ($util.Long) {
	                        var n = new $util.Long(0, 0, false);
	                        d.negativeIntValue = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	                    } else
	                        d.negativeIntValue = o.longs === String ? "0" : 0;
	                    d.doubleValue = 0;
	                    if (o.bytes === String)
	                        d.stringValue = "";
	                    else {
	                        d.stringValue = [];
	                        if (o.bytes !== Array)
	                            d.stringValue = $util.newBuffer(d.stringValue);
	                    }
	                    d.aggregateValue = "";
	                }
	                if (m.name && m.name.length) {
	                    d.name = [];
	                    for (var j = 0; j < m.name.length; ++j) {
	                        d.name[j] = $root.perfetto.protos.UninterpretedOption.NamePart.toObject(m.name[j], o);
	                    }
	                }
	                if (m.identifierValue != null && m.hasOwnProperty("identifierValue")) {
	                    d.identifierValue = m.identifierValue;
	                }
	                if (m.positiveIntValue != null && m.hasOwnProperty("positiveIntValue")) {
	                    if (typeof m.positiveIntValue === "number")
	                        d.positiveIntValue = o.longs === String ? String(m.positiveIntValue) : m.positiveIntValue;
	                    else
	                        d.positiveIntValue = o.longs === String ? $util.Long.prototype.toString.call(m.positiveIntValue) : o.longs === Number ? new $util.LongBits(m.positiveIntValue.low >>> 0, m.positiveIntValue.high >>> 0).toNumber(true) : m.positiveIntValue;
	                }
	                if (m.negativeIntValue != null && m.hasOwnProperty("negativeIntValue")) {
	                    if (typeof m.negativeIntValue === "number")
	                        d.negativeIntValue = o.longs === String ? String(m.negativeIntValue) : m.negativeIntValue;
	                    else
	                        d.negativeIntValue = o.longs === String ? $util.Long.prototype.toString.call(m.negativeIntValue) : o.longs === Number ? new $util.LongBits(m.negativeIntValue.low >>> 0, m.negativeIntValue.high >>> 0).toNumber() : m.negativeIntValue;
	                }
	                if (m.doubleValue != null && m.hasOwnProperty("doubleValue")) {
	                    d.doubleValue = o.json && !isFinite(m.doubleValue) ? String(m.doubleValue) : m.doubleValue;
	                }
	                if (m.stringValue != null && m.hasOwnProperty("stringValue")) {
	                    d.stringValue = o.bytes === String ? $util.base64.encode(m.stringValue, 0, m.stringValue.length) : o.bytes === Array ? Array.prototype.slice.call(m.stringValue) : m.stringValue;
	                }
	                if (m.aggregateValue != null && m.hasOwnProperty("aggregateValue")) {
	                    d.aggregateValue = m.aggregateValue;
	                }
	                return d;
	            };

	            /**
	             * Converts this UninterpretedOption to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.UninterpretedOption
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            UninterpretedOption.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for UninterpretedOption
	             * @function getTypeUrl
	             * @memberof perfetto.protos.UninterpretedOption
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.UninterpretedOption";
	            };

	            UninterpretedOption.NamePart = (function() {

	                /**
	                 * Properties of a NamePart.
	                 * @memberof perfetto.protos.UninterpretedOption
	                 * @interface INamePart
	                 * @property {string|null} [namePart] NamePart namePart
	                 * @property {boolean|null} [isExtension] NamePart isExtension
	                 */

	                /**
	                 * Constructs a new NamePart.
	                 * @memberof perfetto.protos.UninterpretedOption
	                 * @classdesc Represents a NamePart.
	                 * @implements INamePart
	                 * @constructor
	                 * @param {perfetto.protos.UninterpretedOption.INamePart=} [p] Properties to set
	                 */
	                function NamePart(p) {
	                    if (p)
	                        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                            if (p[ks[i]] != null)
	                                this[ks[i]] = p[ks[i]];
	                }

	                /**
	                 * NamePart namePart.
	                 * @member {string} namePart
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @instance
	                 */
	                NamePart.prototype.namePart = "";

	                /**
	                 * NamePart isExtension.
	                 * @member {boolean} isExtension
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @instance
	                 */
	                NamePart.prototype.isExtension = false;

	                /**
	                 * Creates a new NamePart instance using the specified properties.
	                 * @function create
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @static
	                 * @param {perfetto.protos.UninterpretedOption.INamePart=} [properties] Properties to set
	                 * @returns {perfetto.protos.UninterpretedOption.NamePart} NamePart instance
	                 */
	                NamePart.create = function create(properties) {
	                    return new NamePart(properties);
	                };

	                /**
	                 * Encodes the specified NamePart message. Does not implicitly {@link perfetto.protos.UninterpretedOption.NamePart.verify|verify} messages.
	                 * @function encode
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @static
	                 * @param {perfetto.protos.UninterpretedOption.INamePart} m NamePart message or plain object to encode
	                 * @param {$protobuf.Writer} [w] Writer to encode to
	                 * @returns {$protobuf.Writer} Writer
	                 */
	                NamePart.encode = function encode(m, w) {
	                    if (!w)
	                        w = $Writer.create();
	                    if (m.namePart != null && Object.hasOwnProperty.call(m, "namePart"))
	                        w.uint32(10).string(m.namePart);
	                    if (m.isExtension != null && Object.hasOwnProperty.call(m, "isExtension"))
	                        w.uint32(16).bool(m.isExtension);
	                    return w;
	                };

	                /**
	                 * Decodes a NamePart message from the specified reader or buffer.
	                 * @function decode
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @static
	                 * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	                 * @param {number} [l] Message length if known beforehand
	                 * @returns {perfetto.protos.UninterpretedOption.NamePart} NamePart
	                 * @throws {Error} If the payload is not a reader or valid buffer
	                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
	                 */
	                NamePart.decode = function decode(r, l) {
	                    if (!(r instanceof $Reader))
	                        r = $Reader.create(r);
	                    var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.UninterpretedOption.NamePart();
	                    while (r.pos < c) {
	                        var t = r.uint32();
	                        switch (t >>> 3) {
	                        case 1: {
	                                m.namePart = r.string();
	                                break;
	                            }
	                        case 2: {
	                                m.isExtension = r.bool();
	                                break;
	                            }
	                        default:
	                            r.skipType(t & 7);
	                            break;
	                        }
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
	                 * @function fromObject
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @static
	                 * @param {Object.<string,*>} d Plain object
	                 * @returns {perfetto.protos.UninterpretedOption.NamePart} NamePart
	                 */
	                NamePart.fromObject = function fromObject(d) {
	                    if (d instanceof $root.perfetto.protos.UninterpretedOption.NamePart)
	                        return d;
	                    var m = new $root.perfetto.protos.UninterpretedOption.NamePart();
	                    if (d.namePart != null) {
	                        m.namePart = String(d.namePart);
	                    }
	                    if (d.isExtension != null) {
	                        m.isExtension = Boolean(d.isExtension);
	                    }
	                    return m;
	                };

	                /**
	                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
	                 * @function toObject
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @static
	                 * @param {perfetto.protos.UninterpretedOption.NamePart} m NamePart
	                 * @param {$protobuf.IConversionOptions} [o] Conversion options
	                 * @returns {Object.<string,*>} Plain object
	                 */
	                NamePart.toObject = function toObject(m, o) {
	                    if (!o)
	                        o = {};
	                    var d = {};
	                    if (o.defaults) {
	                        d.namePart = "";
	                        d.isExtension = false;
	                    }
	                    if (m.namePart != null && m.hasOwnProperty("namePart")) {
	                        d.namePart = m.namePart;
	                    }
	                    if (m.isExtension != null && m.hasOwnProperty("isExtension")) {
	                        d.isExtension = m.isExtension;
	                    }
	                    return d;
	                };

	                /**
	                 * Converts this NamePart to JSON.
	                 * @function toJSON
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @instance
	                 * @returns {Object.<string,*>} JSON object
	                 */
	                NamePart.prototype.toJSON = function toJSON() {
	                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	                };

	                /**
	                 * Gets the default type url for NamePart
	                 * @function getTypeUrl
	                 * @memberof perfetto.protos.UninterpretedOption.NamePart
	                 * @static
	                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	                 * @returns {string} The default type url
	                 */
	                NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                    if (typeUrlPrefix === undefined) {
	                        typeUrlPrefix = "type.googleapis.com";
	                    }
	                    return typeUrlPrefix + "/perfetto.protos.UninterpretedOption.NamePart";
	                };

	                return NamePart;
	            })();

	            return UninterpretedOption;
	        })();

	        protos.FieldOptions = (function() {

	            /**
	             * Properties of a FieldOptions.
	             * @memberof perfetto.protos
	             * @interface IFieldOptions
	             * @property {boolean|null} [packed] FieldOptions packed
	             * @property {Array.<perfetto.protos.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
	             */

	            /**
	             * Constructs a new FieldOptions.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FieldOptions.
	             * @implements IFieldOptions
	             * @constructor
	             * @param {perfetto.protos.IFieldOptions=} [p] Properties to set
	             */
	            function FieldOptions(p) {
	                this.uninterpretedOption = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FieldOptions packed.
	             * @member {boolean} packed
	             * @memberof perfetto.protos.FieldOptions
	             * @instance
	             */
	            FieldOptions.prototype.packed = false;

	            /**
	             * FieldOptions uninterpretedOption.
	             * @member {Array.<perfetto.protos.IUninterpretedOption>} uninterpretedOption
	             * @memberof perfetto.protos.FieldOptions
	             * @instance
	             */
	            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

	            /**
	             * Creates a new FieldOptions instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FieldOptions
	             * @static
	             * @param {perfetto.protos.IFieldOptions=} [properties] Properties to set
	             * @returns {perfetto.protos.FieldOptions} FieldOptions instance
	             */
	            FieldOptions.create = function create(properties) {
	                return new FieldOptions(properties);
	            };

	            /**
	             * Encodes the specified FieldOptions message. Does not implicitly {@link perfetto.protos.FieldOptions.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FieldOptions
	             * @static
	             * @param {perfetto.protos.IFieldOptions} m FieldOptions message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FieldOptions.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.packed != null && Object.hasOwnProperty.call(m, "packed"))
	                    w.uint32(16).bool(m.packed);
	                if (m.uninterpretedOption != null && m.uninterpretedOption.length) {
	                    for (var i = 0; i < m.uninterpretedOption.length; ++i)
	                        $root.perfetto.protos.UninterpretedOption.encode(m.uninterpretedOption[i], w.uint32(7994).fork()).ldelim();
	                }
	                return w;
	            };

	            /**
	             * Decodes a FieldOptions message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FieldOptions
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FieldOptions} FieldOptions
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FieldOptions.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FieldOptions();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 2: {
	                            m.packed = r.bool();
	                            break;
	                        }
	                    case 999: {
	                            if (!(m.uninterpretedOption && m.uninterpretedOption.length))
	                                m.uninterpretedOption = [];
	                            m.uninterpretedOption.push($root.perfetto.protos.UninterpretedOption.decode(r, r.uint32()));
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FieldOptions
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FieldOptions} FieldOptions
	             */
	            FieldOptions.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FieldOptions)
	                    return d;
	                var m = new $root.perfetto.protos.FieldOptions();
	                if (d.packed != null) {
	                    m.packed = Boolean(d.packed);
	                }
	                if (d.uninterpretedOption) {
	                    if (!Array.isArray(d.uninterpretedOption))
	                        throw TypeError(".perfetto.protos.FieldOptions.uninterpretedOption: array expected");
	                    m.uninterpretedOption = [];
	                    for (var i = 0; i < d.uninterpretedOption.length; ++i) {
	                        if (typeof d.uninterpretedOption[i] !== "object")
	                            throw TypeError(".perfetto.protos.FieldOptions.uninterpretedOption: object expected");
	                        m.uninterpretedOption[i] = $root.perfetto.protos.UninterpretedOption.fromObject(d.uninterpretedOption[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FieldOptions
	             * @static
	             * @param {perfetto.protos.FieldOptions} m FieldOptions
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FieldOptions.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.uninterpretedOption = [];
	                }
	                if (o.defaults) {
	                    d.packed = false;
	                }
	                if (m.packed != null && m.hasOwnProperty("packed")) {
	                    d.packed = m.packed;
	                }
	                if (m.uninterpretedOption && m.uninterpretedOption.length) {
	                    d.uninterpretedOption = [];
	                    for (var j = 0; j < m.uninterpretedOption.length; ++j) {
	                        d.uninterpretedOption[j] = $root.perfetto.protos.UninterpretedOption.toObject(m.uninterpretedOption[j], o);
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this FieldOptions to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FieldOptions
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FieldOptions.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FieldOptions
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FieldOptions
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FieldOptions";
	            };

	            return FieldOptions;
	        })();

	        protos.FieldDescriptorProto = (function() {

	            /**
	             * Properties of a FieldDescriptorProto.
	             * @memberof perfetto.protos
	             * @interface IFieldDescriptorProto
	             * @property {string|null} [name] FieldDescriptorProto name
	             * @property {number|null} [number] FieldDescriptorProto number
	             * @property {perfetto.protos.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
	             * @property {perfetto.protos.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
	             * @property {string|null} [typeName] FieldDescriptorProto typeName
	             * @property {string|null} [extendee] FieldDescriptorProto extendee
	             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
	             * @property {perfetto.protos.IFieldOptions|null} [options] FieldDescriptorProto options
	             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
	             */

	            /**
	             * Constructs a new FieldDescriptorProto.
	             * @memberof perfetto.protos
	             * @classdesc Represents a FieldDescriptorProto.
	             * @implements IFieldDescriptorProto
	             * @constructor
	             * @param {perfetto.protos.IFieldDescriptorProto=} [p] Properties to set
	             */
	            function FieldDescriptorProto(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * FieldDescriptorProto name.
	             * @member {string} name
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.name = "";

	            /**
	             * FieldDescriptorProto number.
	             * @member {number} number
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.number = 0;

	            /**
	             * FieldDescriptorProto label.
	             * @member {perfetto.protos.FieldDescriptorProto.Label} label
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.label = 1;

	            /**
	             * FieldDescriptorProto type.
	             * @member {perfetto.protos.FieldDescriptorProto.Type} type
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.type = 1;

	            /**
	             * FieldDescriptorProto typeName.
	             * @member {string} typeName
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.typeName = "";

	            /**
	             * FieldDescriptorProto extendee.
	             * @member {string} extendee
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.extendee = "";

	            /**
	             * FieldDescriptorProto defaultValue.
	             * @member {string} defaultValue
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.defaultValue = "";

	            /**
	             * FieldDescriptorProto options.
	             * @member {perfetto.protos.IFieldOptions|null|undefined} options
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.options = null;

	            /**
	             * FieldDescriptorProto oneofIndex.
	             * @member {number} oneofIndex
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             */
	            FieldDescriptorProto.prototype.oneofIndex = 0;

	            /**
	             * Creates a new FieldDescriptorProto instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @static
	             * @param {perfetto.protos.IFieldDescriptorProto=} [properties] Properties to set
	             * @returns {perfetto.protos.FieldDescriptorProto} FieldDescriptorProto instance
	             */
	            FieldDescriptorProto.create = function create(properties) {
	                return new FieldDescriptorProto(properties);
	            };

	            /**
	             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link perfetto.protos.FieldDescriptorProto.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @static
	             * @param {perfetto.protos.IFieldDescriptorProto} m FieldDescriptorProto message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            FieldDescriptorProto.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.extendee != null && Object.hasOwnProperty.call(m, "extendee"))
	                    w.uint32(18).string(m.extendee);
	                if (m.number != null && Object.hasOwnProperty.call(m, "number"))
	                    w.uint32(24).int32(m.number);
	                if (m.label != null && Object.hasOwnProperty.call(m, "label"))
	                    w.uint32(32).int32(m.label);
	                if (m.type != null && Object.hasOwnProperty.call(m, "type"))
	                    w.uint32(40).int32(m.type);
	                if (m.typeName != null && Object.hasOwnProperty.call(m, "typeName"))
	                    w.uint32(50).string(m.typeName);
	                if (m.defaultValue != null && Object.hasOwnProperty.call(m, "defaultValue"))
	                    w.uint32(58).string(m.defaultValue);
	                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
	                    $root.perfetto.protos.FieldOptions.encode(m.options, w.uint32(66).fork()).ldelim();
	                if (m.oneofIndex != null && Object.hasOwnProperty.call(m, "oneofIndex"))
	                    w.uint32(72).int32(m.oneofIndex);
	                return w;
	            };

	            /**
	             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.FieldDescriptorProto} FieldDescriptorProto
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            FieldDescriptorProto.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.FieldDescriptorProto();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 3: {
	                            m.number = r.int32();
	                            break;
	                        }
	                    case 4: {
	                            m.label = r.int32();
	                            break;
	                        }
	                    case 5: {
	                            m.type = r.int32();
	                            break;
	                        }
	                    case 6: {
	                            m.typeName = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.extendee = r.string();
	                            break;
	                        }
	                    case 7: {
	                            m.defaultValue = r.string();
	                            break;
	                        }
	                    case 8: {
	                            m.options = $root.perfetto.protos.FieldOptions.decode(r, r.uint32());
	                            break;
	                        }
	                    case 9: {
	                            m.oneofIndex = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.FieldDescriptorProto} FieldDescriptorProto
	             */
	            FieldDescriptorProto.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.FieldDescriptorProto)
	                    return d;
	                var m = new $root.perfetto.protos.FieldDescriptorProto();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.number != null) {
	                    m.number = d.number | 0;
	                }
	                switch (d.label) {
	                default:
	                    if (typeof d.label === "number") {
	                        m.label = d.label;
	                        break;
	                    }
	                    break;
	                case "LABEL_OPTIONAL":
	                case 1:
	                    m.label = 1;
	                    break;
	                case "LABEL_REQUIRED":
	                case 2:
	                    m.label = 2;
	                    break;
	                case "LABEL_REPEATED":
	                case 3:
	                    m.label = 3;
	                    break;
	                }
	                switch (d.type) {
	                default:
	                    if (typeof d.type === "number") {
	                        m.type = d.type;
	                        break;
	                    }
	                    break;
	                case "TYPE_DOUBLE":
	                case 1:
	                    m.type = 1;
	                    break;
	                case "TYPE_FLOAT":
	                case 2:
	                    m.type = 2;
	                    break;
	                case "TYPE_INT64":
	                case 3:
	                    m.type = 3;
	                    break;
	                case "TYPE_UINT64":
	                case 4:
	                    m.type = 4;
	                    break;
	                case "TYPE_INT32":
	                case 5:
	                    m.type = 5;
	                    break;
	                case "TYPE_FIXED64":
	                case 6:
	                    m.type = 6;
	                    break;
	                case "TYPE_FIXED32":
	                case 7:
	                    m.type = 7;
	                    break;
	                case "TYPE_BOOL":
	                case 8:
	                    m.type = 8;
	                    break;
	                case "TYPE_STRING":
	                case 9:
	                    m.type = 9;
	                    break;
	                case "TYPE_GROUP":
	                case 10:
	                    m.type = 10;
	                    break;
	                case "TYPE_MESSAGE":
	                case 11:
	                    m.type = 11;
	                    break;
	                case "TYPE_BYTES":
	                case 12:
	                    m.type = 12;
	                    break;
	                case "TYPE_UINT32":
	                case 13:
	                    m.type = 13;
	                    break;
	                case "TYPE_ENUM":
	                case 14:
	                    m.type = 14;
	                    break;
	                case "TYPE_SFIXED32":
	                case 15:
	                    m.type = 15;
	                    break;
	                case "TYPE_SFIXED64":
	                case 16:
	                    m.type = 16;
	                    break;
	                case "TYPE_SINT32":
	                case 17:
	                    m.type = 17;
	                    break;
	                case "TYPE_SINT64":
	                case 18:
	                    m.type = 18;
	                    break;
	                }
	                if (d.typeName != null) {
	                    m.typeName = String(d.typeName);
	                }
	                if (d.extendee != null) {
	                    m.extendee = String(d.extendee);
	                }
	                if (d.defaultValue != null) {
	                    m.defaultValue = String(d.defaultValue);
	                }
	                if (d.options != null) {
	                    if (typeof d.options !== "object")
	                        throw TypeError(".perfetto.protos.FieldDescriptorProto.options: object expected");
	                    m.options = $root.perfetto.protos.FieldOptions.fromObject(d.options);
	                }
	                if (d.oneofIndex != null) {
	                    m.oneofIndex = d.oneofIndex | 0;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @static
	             * @param {perfetto.protos.FieldDescriptorProto} m FieldDescriptorProto
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            FieldDescriptorProto.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                    d.extendee = "";
	                    d.number = 0;
	                    d.label = o.enums === String ? "LABEL_OPTIONAL" : 1;
	                    d.type = o.enums === String ? "TYPE_DOUBLE" : 1;
	                    d.typeName = "";
	                    d.defaultValue = "";
	                    d.options = null;
	                    d.oneofIndex = 0;
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.extendee != null && m.hasOwnProperty("extendee")) {
	                    d.extendee = m.extendee;
	                }
	                if (m.number != null && m.hasOwnProperty("number")) {
	                    d.number = m.number;
	                }
	                if (m.label != null && m.hasOwnProperty("label")) {
	                    d.label = o.enums === String ? $root.perfetto.protos.FieldDescriptorProto.Label[m.label] === undefined ? m.label : $root.perfetto.protos.FieldDescriptorProto.Label[m.label] : m.label;
	                }
	                if (m.type != null && m.hasOwnProperty("type")) {
	                    d.type = o.enums === String ? $root.perfetto.protos.FieldDescriptorProto.Type[m.type] === undefined ? m.type : $root.perfetto.protos.FieldDescriptorProto.Type[m.type] : m.type;
	                }
	                if (m.typeName != null && m.hasOwnProperty("typeName")) {
	                    d.typeName = m.typeName;
	                }
	                if (m.defaultValue != null && m.hasOwnProperty("defaultValue")) {
	                    d.defaultValue = m.defaultValue;
	                }
	                if (m.options != null && m.hasOwnProperty("options")) {
	                    d.options = $root.perfetto.protos.FieldOptions.toObject(m.options, o);
	                }
	                if (m.oneofIndex != null && m.hasOwnProperty("oneofIndex")) {
	                    d.oneofIndex = m.oneofIndex;
	                }
	                return d;
	            };

	            /**
	             * Converts this FieldDescriptorProto to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            FieldDescriptorProto.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for FieldDescriptorProto
	             * @function getTypeUrl
	             * @memberof perfetto.protos.FieldDescriptorProto
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.FieldDescriptorProto";
	            };

	            /**
	             * Type enum.
	             * @name perfetto.protos.FieldDescriptorProto.Type
	             * @enum {number}
	             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
	             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
	             * @property {number} TYPE_INT64=3 TYPE_INT64 value
	             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
	             * @property {number} TYPE_INT32=5 TYPE_INT32 value
	             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
	             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
	             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
	             * @property {number} TYPE_STRING=9 TYPE_STRING value
	             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
	             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
	             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
	             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
	             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
	             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
	             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
	             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
	             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
	             */
	            FieldDescriptorProto.Type = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
	                values[valuesById[2] = "TYPE_FLOAT"] = 2;
	                values[valuesById[3] = "TYPE_INT64"] = 3;
	                values[valuesById[4] = "TYPE_UINT64"] = 4;
	                values[valuesById[5] = "TYPE_INT32"] = 5;
	                values[valuesById[6] = "TYPE_FIXED64"] = 6;
	                values[valuesById[7] = "TYPE_FIXED32"] = 7;
	                values[valuesById[8] = "TYPE_BOOL"] = 8;
	                values[valuesById[9] = "TYPE_STRING"] = 9;
	                values[valuesById[10] = "TYPE_GROUP"] = 10;
	                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
	                values[valuesById[12] = "TYPE_BYTES"] = 12;
	                values[valuesById[13] = "TYPE_UINT32"] = 13;
	                values[valuesById[14] = "TYPE_ENUM"] = 14;
	                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
	                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
	                values[valuesById[17] = "TYPE_SINT32"] = 17;
	                values[valuesById[18] = "TYPE_SINT64"] = 18;
	                return values;
	            })();

	            /**
	             * Label enum.
	             * @name perfetto.protos.FieldDescriptorProto.Label
	             * @enum {number}
	             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
	             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
	             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
	             */
	            FieldDescriptorProto.Label = (function() {
	                var valuesById = {}, values = Object.create(valuesById);
	                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
	                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
	                values[valuesById[3] = "LABEL_REPEATED"] = 3;
	                return values;
	            })();

	            return FieldDescriptorProto;
	        })();

	        protos.OneofDescriptorProto = (function() {

	            /**
	             * Properties of an OneofDescriptorProto.
	             * @memberof perfetto.protos
	             * @interface IOneofDescriptorProto
	             * @property {string|null} [name] OneofDescriptorProto name
	             * @property {perfetto.protos.IOneofOptions|null} [options] OneofDescriptorProto options
	             */

	            /**
	             * Constructs a new OneofDescriptorProto.
	             * @memberof perfetto.protos
	             * @classdesc Represents an OneofDescriptorProto.
	             * @implements IOneofDescriptorProto
	             * @constructor
	             * @param {perfetto.protos.IOneofDescriptorProto=} [p] Properties to set
	             */
	            function OneofDescriptorProto(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * OneofDescriptorProto name.
	             * @member {string} name
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @instance
	             */
	            OneofDescriptorProto.prototype.name = "";

	            /**
	             * OneofDescriptorProto options.
	             * @member {perfetto.protos.IOneofOptions|null|undefined} options
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @instance
	             */
	            OneofDescriptorProto.prototype.options = null;

	            /**
	             * Creates a new OneofDescriptorProto instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @static
	             * @param {perfetto.protos.IOneofDescriptorProto=} [properties] Properties to set
	             * @returns {perfetto.protos.OneofDescriptorProto} OneofDescriptorProto instance
	             */
	            OneofDescriptorProto.create = function create(properties) {
	                return new OneofDescriptorProto(properties);
	            };

	            /**
	             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link perfetto.protos.OneofDescriptorProto.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @static
	             * @param {perfetto.protos.IOneofDescriptorProto} m OneofDescriptorProto message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            OneofDescriptorProto.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.options != null && Object.hasOwnProperty.call(m, "options"))
	                    $root.perfetto.protos.OneofOptions.encode(m.options, w.uint32(18).fork()).ldelim();
	                return w;
	            };

	            /**
	             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.OneofDescriptorProto} OneofDescriptorProto
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            OneofDescriptorProto.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.OneofDescriptorProto();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.options = $root.perfetto.protos.OneofOptions.decode(r, r.uint32());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.OneofDescriptorProto} OneofDescriptorProto
	             */
	            OneofDescriptorProto.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.OneofDescriptorProto)
	                    return d;
	                var m = new $root.perfetto.protos.OneofDescriptorProto();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.options != null) {
	                    if (typeof d.options !== "object")
	                        throw TypeError(".perfetto.protos.OneofDescriptorProto.options: object expected");
	                    m.options = $root.perfetto.protos.OneofOptions.fromObject(d.options);
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @static
	             * @param {perfetto.protos.OneofDescriptorProto} m OneofDescriptorProto
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            OneofDescriptorProto.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                    d.options = null;
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.options != null && m.hasOwnProperty("options")) {
	                    d.options = $root.perfetto.protos.OneofOptions.toObject(m.options, o);
	                }
	                return d;
	            };

	            /**
	             * Converts this OneofDescriptorProto to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            OneofDescriptorProto.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for OneofDescriptorProto
	             * @function getTypeUrl
	             * @memberof perfetto.protos.OneofDescriptorProto
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.OneofDescriptorProto";
	            };

	            return OneofDescriptorProto;
	        })();

	        protos.EnumDescriptorProto = (function() {

	            /**
	             * Properties of an EnumDescriptorProto.
	             * @memberof perfetto.protos
	             * @interface IEnumDescriptorProto
	             * @property {string|null} [name] EnumDescriptorProto name
	             * @property {Array.<perfetto.protos.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
	             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
	             */

	            /**
	             * Constructs a new EnumDescriptorProto.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EnumDescriptorProto.
	             * @implements IEnumDescriptorProto
	             * @constructor
	             * @param {perfetto.protos.IEnumDescriptorProto=} [p] Properties to set
	             */
	            function EnumDescriptorProto(p) {
	                this.value = [];
	                this.reservedName = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * EnumDescriptorProto name.
	             * @member {string} name
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @instance
	             */
	            EnumDescriptorProto.prototype.name = "";

	            /**
	             * EnumDescriptorProto value.
	             * @member {Array.<perfetto.protos.IEnumValueDescriptorProto>} value
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @instance
	             */
	            EnumDescriptorProto.prototype.value = $util.emptyArray;

	            /**
	             * EnumDescriptorProto reservedName.
	             * @member {Array.<string>} reservedName
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @instance
	             */
	            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

	            /**
	             * Creates a new EnumDescriptorProto instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @static
	             * @param {perfetto.protos.IEnumDescriptorProto=} [properties] Properties to set
	             * @returns {perfetto.protos.EnumDescriptorProto} EnumDescriptorProto instance
	             */
	            EnumDescriptorProto.create = function create(properties) {
	                return new EnumDescriptorProto(properties);
	            };

	            /**
	             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link perfetto.protos.EnumDescriptorProto.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @static
	             * @param {perfetto.protos.IEnumDescriptorProto} m EnumDescriptorProto message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EnumDescriptorProto.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.value != null && m.value.length) {
	                    for (var i = 0; i < m.value.length; ++i)
	                        $root.perfetto.protos.EnumValueDescriptorProto.encode(m.value[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.reservedName != null && m.reservedName.length) {
	                    for (var i = 0; i < m.reservedName.length; ++i)
	                        w.uint32(42).string(m.reservedName[i]);
	                }
	                return w;
	            };

	            /**
	             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EnumDescriptorProto} EnumDescriptorProto
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EnumDescriptorProto.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EnumDescriptorProto();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            if (!(m.value && m.value.length))
	                                m.value = [];
	                            m.value.push($root.perfetto.protos.EnumValueDescriptorProto.decode(r, r.uint32()));
	                            break;
	                        }
	                    case 5: {
	                            if (!(m.reservedName && m.reservedName.length))
	                                m.reservedName = [];
	                            m.reservedName.push(r.string());
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EnumDescriptorProto} EnumDescriptorProto
	             */
	            EnumDescriptorProto.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EnumDescriptorProto)
	                    return d;
	                var m = new $root.perfetto.protos.EnumDescriptorProto();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.value) {
	                    if (!Array.isArray(d.value))
	                        throw TypeError(".perfetto.protos.EnumDescriptorProto.value: array expected");
	                    m.value = [];
	                    for (var i = 0; i < d.value.length; ++i) {
	                        if (typeof d.value[i] !== "object")
	                            throw TypeError(".perfetto.protos.EnumDescriptorProto.value: object expected");
	                        m.value[i] = $root.perfetto.protos.EnumValueDescriptorProto.fromObject(d.value[i]);
	                    }
	                }
	                if (d.reservedName) {
	                    if (!Array.isArray(d.reservedName))
	                        throw TypeError(".perfetto.protos.EnumDescriptorProto.reservedName: array expected");
	                    m.reservedName = [];
	                    for (var i = 0; i < d.reservedName.length; ++i) {
	                        m.reservedName[i] = String(d.reservedName[i]);
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @static
	             * @param {perfetto.protos.EnumDescriptorProto} m EnumDescriptorProto
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EnumDescriptorProto.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.value = [];
	                    d.reservedName = [];
	                }
	                if (o.defaults) {
	                    d.name = "";
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.value && m.value.length) {
	                    d.value = [];
	                    for (var j = 0; j < m.value.length; ++j) {
	                        d.value[j] = $root.perfetto.protos.EnumValueDescriptorProto.toObject(m.value[j], o);
	                    }
	                }
	                if (m.reservedName && m.reservedName.length) {
	                    d.reservedName = [];
	                    for (var j = 0; j < m.reservedName.length; ++j) {
	                        d.reservedName[j] = m.reservedName[j];
	                    }
	                }
	                return d;
	            };

	            /**
	             * Converts this EnumDescriptorProto to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EnumDescriptorProto.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EnumDescriptorProto
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EnumDescriptorProto
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EnumDescriptorProto";
	            };

	            return EnumDescriptorProto;
	        })();

	        protos.EnumValueDescriptorProto = (function() {

	            /**
	             * Properties of an EnumValueDescriptorProto.
	             * @memberof perfetto.protos
	             * @interface IEnumValueDescriptorProto
	             * @property {string|null} [name] EnumValueDescriptorProto name
	             * @property {number|null} [number] EnumValueDescriptorProto number
	             */

	            /**
	             * Constructs a new EnumValueDescriptorProto.
	             * @memberof perfetto.protos
	             * @classdesc Represents an EnumValueDescriptorProto.
	             * @implements IEnumValueDescriptorProto
	             * @constructor
	             * @param {perfetto.protos.IEnumValueDescriptorProto=} [p] Properties to set
	             */
	            function EnumValueDescriptorProto(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * EnumValueDescriptorProto name.
	             * @member {string} name
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @instance
	             */
	            EnumValueDescriptorProto.prototype.name = "";

	            /**
	             * EnumValueDescriptorProto number.
	             * @member {number} number
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @instance
	             */
	            EnumValueDescriptorProto.prototype.number = 0;

	            /**
	             * Creates a new EnumValueDescriptorProto instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @static
	             * @param {perfetto.protos.IEnumValueDescriptorProto=} [properties] Properties to set
	             * @returns {perfetto.protos.EnumValueDescriptorProto} EnumValueDescriptorProto instance
	             */
	            EnumValueDescriptorProto.create = function create(properties) {
	                return new EnumValueDescriptorProto(properties);
	            };

	            /**
	             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link perfetto.protos.EnumValueDescriptorProto.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @static
	             * @param {perfetto.protos.IEnumValueDescriptorProto} m EnumValueDescriptorProto message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            EnumValueDescriptorProto.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.name != null && Object.hasOwnProperty.call(m, "name"))
	                    w.uint32(10).string(m.name);
	                if (m.number != null && Object.hasOwnProperty.call(m, "number"))
	                    w.uint32(16).int32(m.number);
	                return w;
	            };

	            /**
	             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.EnumValueDescriptorProto} EnumValueDescriptorProto
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            EnumValueDescriptorProto.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.EnumValueDescriptorProto();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1: {
	                            m.name = r.string();
	                            break;
	                        }
	                    case 2: {
	                            m.number = r.int32();
	                            break;
	                        }
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.EnumValueDescriptorProto} EnumValueDescriptorProto
	             */
	            EnumValueDescriptorProto.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.EnumValueDescriptorProto)
	                    return d;
	                var m = new $root.perfetto.protos.EnumValueDescriptorProto();
	                if (d.name != null) {
	                    m.name = String(d.name);
	                }
	                if (d.number != null) {
	                    m.number = d.number | 0;
	                }
	                return m;
	            };

	            /**
	             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @static
	             * @param {perfetto.protos.EnumValueDescriptorProto} m EnumValueDescriptorProto
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            EnumValueDescriptorProto.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.defaults) {
	                    d.name = "";
	                    d.number = 0;
	                }
	                if (m.name != null && m.hasOwnProperty("name")) {
	                    d.name = m.name;
	                }
	                if (m.number != null && m.hasOwnProperty("number")) {
	                    d.number = m.number;
	                }
	                return d;
	            };

	            /**
	             * Converts this EnumValueDescriptorProto to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for EnumValueDescriptorProto
	             * @function getTypeUrl
	             * @memberof perfetto.protos.EnumValueDescriptorProto
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.EnumValueDescriptorProto";
	            };

	            return EnumValueDescriptorProto;
	        })();

	        protos.OneofOptions = (function() {

	            /**
	             * Properties of an OneofOptions.
	             * @memberof perfetto.protos
	             * @interface IOneofOptions
	             */

	            /**
	             * Constructs a new OneofOptions.
	             * @memberof perfetto.protos
	             * @classdesc Represents an OneofOptions.
	             * @implements IOneofOptions
	             * @constructor
	             * @param {perfetto.protos.IOneofOptions=} [p] Properties to set
	             */
	            function OneofOptions(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }

	            /**
	             * Creates a new OneofOptions instance using the specified properties.
	             * @function create
	             * @memberof perfetto.protos.OneofOptions
	             * @static
	             * @param {perfetto.protos.IOneofOptions=} [properties] Properties to set
	             * @returns {perfetto.protos.OneofOptions} OneofOptions instance
	             */
	            OneofOptions.create = function create(properties) {
	                return new OneofOptions(properties);
	            };

	            /**
	             * Encodes the specified OneofOptions message. Does not implicitly {@link perfetto.protos.OneofOptions.verify|verify} messages.
	             * @function encode
	             * @memberof perfetto.protos.OneofOptions
	             * @static
	             * @param {perfetto.protos.IOneofOptions} m OneofOptions message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            OneofOptions.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                return w;
	            };

	            /**
	             * Decodes an OneofOptions message from the specified reader or buffer.
	             * @function decode
	             * @memberof perfetto.protos.OneofOptions
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {perfetto.protos.OneofOptions} OneofOptions
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            OneofOptions.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.perfetto.protos.OneofOptions();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };

	            /**
	             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof perfetto.protos.OneofOptions
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {perfetto.protos.OneofOptions} OneofOptions
	             */
	            OneofOptions.fromObject = function fromObject(d) {
	                if (d instanceof $root.perfetto.protos.OneofOptions)
	                    return d;
	                return new $root.perfetto.protos.OneofOptions();
	            };

	            /**
	             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof perfetto.protos.OneofOptions
	             * @static
	             * @param {perfetto.protos.OneofOptions} m OneofOptions
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            OneofOptions.toObject = function toObject() {
	                return {};
	            };

	            /**
	             * Converts this OneofOptions to JSON.
	             * @function toJSON
	             * @memberof perfetto.protos.OneofOptions
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            OneofOptions.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };

	            /**
	             * Gets the default type url for OneofOptions
	             * @function getTypeUrl
	             * @memberof perfetto.protos.OneofOptions
	             * @static
	             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
	             * @returns {string} The default type url
	             */
	            OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
	                if (typeUrlPrefix === undefined) {
	                    typeUrlPrefix = "type.googleapis.com";
	                }
	                return typeUrlPrefix + "/perfetto.protos.OneofOptions";
	            };

	            return OneofOptions;
	        })();

	        /**
	         * MetatraceCategories enum.
	         * @name perfetto.protos.MetatraceCategories
	         * @enum {number}
	         * @property {number} QUERY_TIMELINE=1 QUERY_TIMELINE value
	         * @property {number} QUERY_DETAILED=2 QUERY_DETAILED value
	         * @property {number} FUNCTION_CALL=4 FUNCTION_CALL value
	         * @property {number} DB=8 DB value
	         * @property {number} API_TIMELINE=16 API_TIMELINE value
	         * @property {number} NONE=0 NONE value
	         * @property {number} ALL=31 ALL value
	         */
	        protos.MetatraceCategories = (function() {
	            var valuesById = {}, values = Object.create(valuesById);
	            values[valuesById[1] = "QUERY_TIMELINE"] = 1;
	            values[valuesById[2] = "QUERY_DETAILED"] = 2;
	            values[valuesById[4] = "FUNCTION_CALL"] = 4;
	            values[valuesById[8] = "DB"] = 8;
	            values[valuesById[16] = "API_TIMELINE"] = 16;
	            values[valuesById[0] = "NONE"] = 0;
	            values[valuesById[31] = "ALL"] = 31;
	            return values;
	        })();

	        return protos;
	    })();

	    return perfetto;
	})();

	protos$1 = $root;
	return protos$1;
}

var hasRequiredProtos$1;

function requireProtos$1 () {
	if (hasRequiredProtos$1) return protos$2;
	hasRequiredProtos$1 = 1;
	// Copyright (C) 2024 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(protos$2, "__esModule", { value: true });
	protos$2.SysStatsConfig = protos$2.StatusResult = protos$2.StatsdTracingConfig = protos$2.StatsdPullAtomConfig = protos$2.StatCounters = protos$2.ResetTraceProcessorArgs = protos$2.RegisterSqlPackageResult = protos$2.RegisterSqlPackageArgs = protos$2.ReadBuffersResponse = protos$2.ReadBuffersRequest = protos$2.QueryServiceStateResponse = protos$2.QueryServiceStateRequest = protos$2.QueryResult = protos$2.QueryArgs = protos$2.ProcessStatsConfig = protos$2.PerfEvents = protos$2.PerfEventConfig = protos$2.PerfettoMetatrace = protos$2.NetworkPacketTraceConfig = protos$2.NativeContinuousDumpConfig = protos$2.MetatraceCategories = protos$2.MeminfoCounters = protos$2.JavaHprofConfig = protos$2.JavaContinuousDumpConfig = protos$2.IPCFrame = protos$2.HeapprofdConfig = protos$2.GetTraceStatsResponse = protos$2.GetTraceStatsRequest = protos$2.FtraceConfig = protos$2.FreeBuffersResponse = protos$2.FreeBuffersRequest = protos$2.EtwConfig = protos$2.EnableTracingResponse = protos$2.EnableTracingRequest = protos$2.EnableMetatraceArgs = protos$2.DisableTracingResponse = protos$2.DisableTracingRequest = protos$2.DisableAndReadMetatraceResult = protos$2.DataSourceDescriptor = protos$2.DataSourceConfig = protos$2.ConsumerPort = protos$2.ComputeMetricResult = protos$2.ComputeMetricArgs = protos$2.ChromeConfig = protos$2.BufferConfig = protos$2.BatteryCounters = protos$2.AtomId = protos$2.AndroidPowerConfig = protos$2.AndroidLogId = protos$2.AndroidLogConfig = void 0;
	protos$2.VmstatCounters = protos$2.TrackEventConfig = protos$2.TraceProcessorRpcStream = protos$2.TraceProcessorRpc = protos$2.TraceProcessorApiVersion = protos$2.TraceConfig = void 0;
	const tslib_1 = require$$0;
	// TODO(primiano): this file is temporary. It's just to avoid rewriting all the
	// protos import in Recording V1, which is going to go away soon.
	const protos_1 = tslib_1.__importDefault(requireProtos$2());
	// Aliases protos to avoid the super nested namespaces.
	// See https://www.typescriptlang.org/docs/handbook/namespaces.html#aliases
	var AndroidLogConfig = protos_1.default.perfetto.protos.AndroidLogConfig;
	protos$2.AndroidLogConfig = AndroidLogConfig;
	var AndroidLogId = protos_1.default.perfetto.protos.AndroidLogId;
	protos$2.AndroidLogId = AndroidLogId;
	var AndroidPowerConfig = protos_1.default.perfetto.protos.AndroidPowerConfig;
	protos$2.AndroidPowerConfig = AndroidPowerConfig;
	var AtomId = protos_1.default.perfetto.protos.AtomId;
	protos$2.AtomId = AtomId;
	var BatteryCounters = protos_1.default.perfetto.protos.AndroidPowerConfig.BatteryCounters;
	protos$2.BatteryCounters = BatteryCounters;
	var BufferConfig = protos_1.default.perfetto.protos.TraceConfig.BufferConfig;
	protos$2.BufferConfig = BufferConfig;
	var ChromeConfig = protos_1.default.perfetto.protos.ChromeConfig;
	protos$2.ChromeConfig = ChromeConfig;
	var ComputeMetricArgs = protos_1.default.perfetto.protos.ComputeMetricArgs;
	protos$2.ComputeMetricArgs = ComputeMetricArgs;
	var ComputeMetricResult = protos_1.default.perfetto.protos.ComputeMetricResult;
	protos$2.ComputeMetricResult = ComputeMetricResult;
	var ConsumerPort = protos_1.default.perfetto.protos.ConsumerPort;
	protos$2.ConsumerPort = ConsumerPort;
	var DataSourceConfig = protos_1.default.perfetto.protos.DataSourceConfig;
	protos$2.DataSourceConfig = DataSourceConfig;
	var DataSourceDescriptor = protos_1.default.perfetto.protos.DataSourceDescriptor;
	protos$2.DataSourceDescriptor = DataSourceDescriptor;
	var DisableAndReadMetatraceResult = protos_1.default.perfetto.protos.DisableAndReadMetatraceResult;
	protos$2.DisableAndReadMetatraceResult = DisableAndReadMetatraceResult;
	var DisableTracingRequest = protos_1.default.perfetto.protos.DisableTracingRequest;
	protos$2.DisableTracingRequest = DisableTracingRequest;
	var DisableTracingResponse = protos_1.default.perfetto.protos.DisableTracingResponse;
	protos$2.DisableTracingResponse = DisableTracingResponse;
	var EnableMetatraceArgs = protos_1.default.perfetto.protos.EnableMetatraceArgs;
	protos$2.EnableMetatraceArgs = EnableMetatraceArgs;
	var EnableTracingRequest = protos_1.default.perfetto.protos.EnableTracingRequest;
	protos$2.EnableTracingRequest = EnableTracingRequest;
	var EnableTracingResponse = protos_1.default.perfetto.protos.EnableTracingResponse;
	protos$2.EnableTracingResponse = EnableTracingResponse;
	var EtwConfig = protos_1.default.perfetto.protos.EtwConfig;
	protos$2.EtwConfig = EtwConfig;
	var FreeBuffersRequest = protos_1.default.perfetto.protos.FreeBuffersRequest;
	protos$2.FreeBuffersRequest = FreeBuffersRequest;
	var FreeBuffersResponse = protos_1.default.perfetto.protos.FreeBuffersResponse;
	protos$2.FreeBuffersResponse = FreeBuffersResponse;
	var FtraceConfig = protos_1.default.perfetto.protos.FtraceConfig;
	protos$2.FtraceConfig = FtraceConfig;
	var GetTraceStatsRequest = protos_1.default.perfetto.protos.GetTraceStatsRequest;
	protos$2.GetTraceStatsRequest = GetTraceStatsRequest;
	var GetTraceStatsResponse = protos_1.default.perfetto.protos.GetTraceStatsResponse;
	protos$2.GetTraceStatsResponse = GetTraceStatsResponse;
	var HeapprofdConfig = protos_1.default.perfetto.protos.HeapprofdConfig;
	protos$2.HeapprofdConfig = HeapprofdConfig;
	var IPCFrame = protos_1.default.perfetto.protos.IPCFrame;
	protos$2.IPCFrame = IPCFrame;
	var JavaContinuousDumpConfig = protos_1.default.perfetto.protos.JavaHprofConfig.ContinuousDumpConfig;
	protos$2.JavaContinuousDumpConfig = JavaContinuousDumpConfig;
	var JavaHprofConfig = protos_1.default.perfetto.protos.JavaHprofConfig;
	protos$2.JavaHprofConfig = JavaHprofConfig;
	var MeminfoCounters = protos_1.default.perfetto.protos.MeminfoCounters;
	protos$2.MeminfoCounters = MeminfoCounters;
	var MetatraceCategories = protos_1.default.perfetto.protos.MetatraceCategories;
	protos$2.MetatraceCategories = MetatraceCategories;
	var NativeContinuousDumpConfig = protos_1.default.perfetto.protos.HeapprofdConfig.ContinuousDumpConfig;
	protos$2.NativeContinuousDumpConfig = NativeContinuousDumpConfig;
	var NetworkPacketTraceConfig = protos_1.default.perfetto.protos.NetworkPacketTraceConfig;
	protos$2.NetworkPacketTraceConfig = NetworkPacketTraceConfig;
	var PerfEventConfig = protos_1.default.perfetto.protos.PerfEventConfig;
	protos$2.PerfEventConfig = PerfEventConfig;
	var PerfEvents = protos_1.default.perfetto.protos.PerfEvents;
	protos$2.PerfEvents = PerfEvents;
	var PerfettoMetatrace = protos_1.default.perfetto.protos.PerfettoMetatrace;
	protos$2.PerfettoMetatrace = PerfettoMetatrace;
	var ProcessStatsConfig = protos_1.default.perfetto.protos.ProcessStatsConfig;
	protos$2.ProcessStatsConfig = ProcessStatsConfig;
	var QueryArgs = protos_1.default.perfetto.protos.QueryArgs;
	protos$2.QueryArgs = QueryArgs;
	var QueryResult = protos_1.default.perfetto.protos.QueryResult;
	protos$2.QueryResult = QueryResult;
	var QueryServiceStateRequest = protos_1.default.perfetto.protos.QueryServiceStateRequest;
	protos$2.QueryServiceStateRequest = QueryServiceStateRequest;
	var QueryServiceStateResponse = protos_1.default.perfetto.protos.QueryServiceStateResponse;
	protos$2.QueryServiceStateResponse = QueryServiceStateResponse;
	var ReadBuffersRequest = protos_1.default.perfetto.protos.ReadBuffersRequest;
	protos$2.ReadBuffersRequest = ReadBuffersRequest;
	var ReadBuffersResponse = protos_1.default.perfetto.protos.ReadBuffersResponse;
	protos$2.ReadBuffersResponse = ReadBuffersResponse;
	var RegisterSqlPackageArgs = protos_1.default.perfetto.protos.RegisterSqlPackageArgs;
	protos$2.RegisterSqlPackageArgs = RegisterSqlPackageArgs;
	var RegisterSqlPackageResult = protos_1.default.perfetto.protos.RegisterSqlPackageResult;
	protos$2.RegisterSqlPackageResult = RegisterSqlPackageResult;
	var ResetTraceProcessorArgs = protos_1.default.perfetto.protos.ResetTraceProcessorArgs;
	protos$2.ResetTraceProcessorArgs = ResetTraceProcessorArgs;
	var StatCounters = protos_1.default.perfetto.protos.SysStatsConfig.StatCounters;
	protos$2.StatCounters = StatCounters;
	var StatsdPullAtomConfig = protos_1.default.perfetto.protos.StatsdPullAtomConfig;
	protos$2.StatsdPullAtomConfig = StatsdPullAtomConfig;
	var StatsdTracingConfig = protos_1.default.perfetto.protos.StatsdTracingConfig;
	protos$2.StatsdTracingConfig = StatsdTracingConfig;
	var StatusResult = protos_1.default.perfetto.protos.StatusResult;
	protos$2.StatusResult = StatusResult;
	var SysStatsConfig = protos_1.default.perfetto.protos.SysStatsConfig;
	protos$2.SysStatsConfig = SysStatsConfig;
	var TraceConfig = protos_1.default.perfetto.protos.TraceConfig;
	protos$2.TraceConfig = TraceConfig;
	var TraceProcessorApiVersion = protos_1.default.perfetto.protos.TraceProcessorApiVersion;
	protos$2.TraceProcessorApiVersion = TraceProcessorApiVersion;
	var TraceProcessorRpc = protos_1.default.perfetto.protos.TraceProcessorRpc;
	protos$2.TraceProcessorRpc = TraceProcessorRpc;
	var TraceProcessorRpcStream = protos_1.default.perfetto.protos.TraceProcessorRpcStream;
	protos$2.TraceProcessorRpcStream = TraceProcessorRpcStream;
	var TrackEventConfig = protos_1.default.perfetto.protos.TrackEventConfig;
	protos$2.TrackEventConfig = TrackEventConfig;
	var VmstatCounters = protos_1.default.perfetto.protos.VmstatCounters;
	protos$2.VmstatCounters = VmstatCounters;
	
	return protos$2;
}

var hasRequiredTrace_config_utils;

function requireTrace_config_utils () {
	if (hasRequiredTrace_config_utils) return trace_config_utils;
	hasRequiredTrace_config_utils = 1;
	// Copyright (C) 2019 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(trace_config_utils, "__esModule", { value: true });
	trace_config_utils.extractTraceConfig = extractTraceConfig;
	trace_config_utils.extractDurationFromTraceConfig = extractDurationFromTraceConfig;
	trace_config_utils.browserSupportsPerfettoConfig = browserSupportsPerfettoConfig;
	trace_config_utils.hasSystemDataSourceConfig = hasSystemDataSourceConfig;
	const protos_1 = requireProtos$1();
	// In this file are contained a few functions to simplify the proto parsing.
	function extractTraceConfig(enableTracingRequest) {
	    try {
	        const enableTracingObject = protos_1.EnableTracingRequest.decode(enableTracingRequest);
	        if (!enableTracingObject.traceConfig)
	            return undefined;
	        return protos_1.TraceConfig.encode(enableTracingObject.traceConfig).finish();
	    }
	    catch (e) {
	        // This catch is for possible proto encoding/decoding issues.
	        console.error('Error extracting the config: ', e.message);
	        return undefined;
	    }
	}
	function extractDurationFromTraceConfig(traceConfigProto) {
	    try {
	        return protos_1.TraceConfig.decode(traceConfigProto).durationMs;
	    }
	    catch (e) {
	        // This catch is for possible proto encoding/decoding issues.
	        return undefined;
	    }
	}
	function browserSupportsPerfettoConfig() {
	    const minimumChromeVersion = '91.0.4448.0';
	    const runningVersion = String((/Chrome\/(([0-9]+\.?){4})/.exec(navigator.userAgent) || [, 0])[1]);
	    if (!runningVersion)
	        return false;
	    const minVerArray = minimumChromeVersion.split('.').map(Number);
	    const runVerArray = runningVersion.split('.').map(Number);
	    for (let index = 0; index < minVerArray.length; index++) {
	        if (runVerArray[index] === minVerArray[index])
	            continue;
	        return runVerArray[index] > minVerArray[index];
	    }
	    return true; // Exact version match.
	}
	function hasSystemDataSourceConfig(config) {
	    for (const ds of config.dataSources) {
	        if (!(ds.config?.name ?? '').startsWith('org.chromium.')) {
	            return true;
	        }
	    }
	    return false;
	}
	
	return trace_config_utils;
}

var protos = {};

var hasRequiredProtos;

function requireProtos () {
	if (hasRequiredProtos) return protos;
	hasRequiredProtos = 1;
	// Copyright (C) 2018 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(protos, "__esModule", { value: true });
	const tslib_1 = require$$0;
	/**
	 * This file actas as a namespace alias. It allows to import protos as follows
	 * import protos from '../protos';
	 * const x = new protos.TraceConfig.
	 *
	 * Rather than using the longer protos.perfetto.protos namespace that comes from
	 * ProtobufJS's gen/protos.
	 */
	const protos_1 = tslib_1.__importDefault(requireProtos$2());
	protos.default = protos_1.default.perfetto.protos;
	
	return protos;
}

var devtools_socket = {};

var hasRequiredDevtools_socket;

function requireDevtools_socket () {
	if (hasRequiredDevtools_socket) return devtools_socket;
	hasRequiredDevtools_socket = 1;
	// Copyright (C) 2019 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(devtools_socket, "__esModule", { value: true });
	devtools_socket.DevToolsSocket = void 0;
	// To really understand how this works it is useful to see the implementation
	// of noice-json-rpc.
	class DevToolsSocket {
	    messageCallback = (_) => { };
	    openCallback = () => { };
	    closeCallback = () => { };
	    target;
	    constructor() {
	        chrome.debugger.onDetach.addListener(this.onDetach.bind(this));
	        chrome.debugger.onEvent.addListener((_source, method, params) => {
	            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
	            if (this.messageCallback) {
	                const msg = { method, params };
	                this.messageCallback(JSON.stringify(msg));
	            }
	        });
	    }
	    send(message) {
	        if (this.target === undefined)
	            return;
	        const msg = JSON.parse(message);
	        chrome.debugger.sendCommand(this.target, msg.method, msg.params, (result) => {
	            if (result === undefined)
	                result = {};
	            const response = { id: msg.id, result };
	            this.messageCallback(JSON.stringify(response));
	        });
	    }
	    // This method will be called once for each event soon after the creation of
	    // this object. To understand better what happens, checking the implementation
	    // of noice-json-rpc is very useful.
	    // While the events "message" and "open" are for implementing the LikeSocket,
	    // "close" is a callback set from ChromeTracingController, to reset the state
	    // after a detach.
	    on(event, cb) {
	        if (event === 'message') {
	            this.messageCallback = cb;
	        }
	        else if (event === 'open') {
	            this.openCallback = cb;
	        }
	        else if (event === 'close') {
	            this.closeCallback = cb;
	        }
	    }
	    removeListener(_event, _cb) {
	        throw new Error('Call unexpected');
	    }
	    attachToBrowser(then) {
	        this.attachToTarget({ targetId: 'browser' }, then);
	    }
	    attachToTarget(target, then) {
	        chrome.debugger.attach(target, /* requiredVersion=*/ '1.3', () => {
	            if (chrome.runtime.lastError) {
	                then(chrome.runtime.lastError.message);
	                return;
	            }
	            this.target = target;
	            this.openCallback();
	            then();
	        });
	    }
	    detach() {
	        if (this.target === undefined)
	            return;
	        chrome.debugger.detach(this.target, () => {
	            this.target = undefined;
	        });
	    }
	    onDetach(_source, _reason) {
	        if (_source === this.target) {
	            this.target = undefined;
	            this.closeCallback();
	        }
	    }
	    isAttached() {
	        return this.target !== undefined;
	    }
	}
	devtools_socket.DevToolsSocket = DevToolsSocket;
	
	return devtools_socket;
}

var hasRequiredChrome_tracing_controller;

function requireChrome_tracing_controller () {
	if (hasRequiredChrome_tracing_controller) return chrome_tracing_controller;
	hasRequiredChrome_tracing_controller = 1;
	// Copyright (C) 2019 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(chrome_tracing_controller, "__esModule", { value: true });
	chrome_tracing_controller.ChromeTracingController = void 0;
	const tslib_1 = require$$0;
	const noice_json_rpc_1 = requireNoiceJsonRpc();
	const string_utils_1 = requireString_utils();
	const record_controller_interfaces_1 = requireRecord_controller_interfaces();
	const trace_config_utils_1 = requireTrace_config_utils();
	const protos_1 = tslib_1.__importDefault(requireProtos());
	const devtools_socket_1 = requireDevtools_socket();
	const utils_1 = requireUtils();
	const CHUNK_SIZE = 1024 * 1024 * 16; // 16Mb
	class ChromeTracingController extends record_controller_interfaces_1.RpcConsumerPort {
	    streamHandle = undefined;
	    uiPort;
	    api;
	    devtoolsSocket;
	    lastBufferUsageEvent;
	    tracingSessionOngoing = false;
	    tracingSessionId = 0;
	    constructor(port) {
	        super({
	            onConsumerPortResponse: (message) => this.uiPort.postMessage(message),
	            onError: (error) => this.uiPort.postMessage({ type: 'ChromeExtensionError', error }),
	            onStatus: (status) => this.uiPort.postMessage({ type: 'ChromeExtensionStatus', status }),
	        });
	        this.uiPort = port;
	        this.devtoolsSocket = new devtools_socket_1.DevToolsSocket();
	        this.devtoolsSocket.on('close', () => this.resetState());
	        const rpcClient = new noice_json_rpc_1.Client(this.devtoolsSocket);
	        this.api = rpcClient.api();
	        this.api.Tracing.on('tracingComplete', this.onTracingComplete.bind(this));
	        this.api.Tracing.on('bufferUsage', this.onBufferUsage.bind(this));
	        this.uiPort.onDisconnect.addListener(() => {
	            this.devtoolsSocket.detach();
	        });
	    }
	    handleCommand(methodName, requestData) {
	        switch (methodName) {
	            case 'EnableTracing':
	                this.enableTracing(requestData);
	                break;
	            case 'FreeBuffers':
	                this.freeBuffers();
	                break;
	            case 'ReadBuffers':
	                this.readBuffers();
	                break;
	            case 'DisableTracing':
	                this.disableTracing();
	                break;
	            case 'GetTraceStats':
	                this.getTraceStats();
	                break;
	            case 'GetCategories':
	                this.getCategories();
	                break;
	            default:
	                this.sendErrorMessage('Action not recognized');
	                console.log('Received not recognized message: ', methodName);
	                break;
	        }
	    }
	    enableTracing(enableTracingRequest) {
	        this.resetState();
	        const traceConfigProto = (0, trace_config_utils_1.extractTraceConfig)(enableTracingRequest);
	        if (!traceConfigProto) {
	            this.sendErrorMessage('Invalid trace config');
	            return;
	        }
	        this.handleStartTracing(traceConfigProto);
	    }
	    toCamelCase(key, separator) {
	        return key
	            .split(separator)
	            .map((part, index) => {
	            return index === 0 ? part : part[0].toUpperCase() + part.slice(1);
	        })
	            .join('');
	    }
	    // eslint-disable-next-line @typescript-eslint/no-explicit-any
	    convertDictKeys(obj) {
	        if (Array.isArray(obj)) {
	            return obj.map((v) => this.convertDictKeys(v));
	        }
	        if (typeof obj === 'object' && obj !== null) {
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            const converted = {};
	            for (const key of Object.keys(obj)) {
	                converted[this.toCamelCase(key, '_')] = this.convertDictKeys(obj[key]);
	            }
	            return converted;
	        }
	        return obj;
	    }
	    convertToDevToolsConfig(config) {
	        // DevTools uses a different naming style for config properties: Dictionary
	        // keys are named "camelCase" style, rather than "underscore_case" style as
	        // in the TraceConfig.
	        const convertedConfig = this.convertDictKeys(config);
	        // recordMode is specified as an enum with camelCase values.
	        if (convertedConfig.recordMode) {
	            convertedConfig.recordMode = this.toCamelCase(convertedConfig.recordMode, '-');
	        }
	        return convertedConfig;
	    }
	    // TODO(nicomazz): write unit test for this
	    extractChromeConfig(perfettoConfig) {
	        for (const ds of perfettoConfig.dataSources) {
	            if (ds.config &&
	                ds.config.name === 'org.chromium.trace_event' &&
	                (0, utils_1.exists)(ds.config.chromeConfig) &&
	                (0, utils_1.exists)(ds.config.chromeConfig.traceConfig)) {
	                const chromeConfigJsonString = ds.config.chromeConfig.traceConfig;
	                const config = JSON.parse(chromeConfigJsonString);
	                return this.convertToDevToolsConfig(config);
	            }
	        }
	        return {};
	    }
	    freeBuffers() {
	        this.devtoolsSocket.detach();
	        this.sendMessage({ type: 'FreeBuffersResponse' });
	    }
	    async readBuffers(offset = 0) {
	        if (!this.devtoolsSocket.isAttached() || this.streamHandle === undefined) {
	            this.sendErrorMessage('No tracing session to read from');
	            return;
	        }
	        const res = await this.api.IO.read({
	            handle: this.streamHandle,
	            offset,
	            size: CHUNK_SIZE,
	        });
	        if (res === undefined)
	            return;
	        const chunk = res.base64Encoded ? atob(res.data) : res.data;
	        // The 'as {} as UInt8Array' is done because we can't send ArrayBuffers
	        // trough a chrome.runtime.Port. The conversion from string to ArrayBuffer
	        // takes place on the other side of the port.
	        const response = {
	            type: 'ReadBuffersResponse',
	            slices: [{ data: chunk, lastSliceForPacket: res.eof }],
	        };
	        this.sendMessage(response);
	        if (res.eof)
	            return;
	        this.readBuffers(offset + chunk.length);
	    }
	    async disableTracing() {
	        await this.endTracing(this.tracingSessionId);
	        this.sendMessage({ type: 'DisableTracingResponse' });
	    }
	    async endTracing(tracingSessionId) {
	        if (tracingSessionId !== this.tracingSessionId) {
	            return;
	        }
	        if (this.tracingSessionOngoing) {
	            await this.api.Tracing.end();
	        }
	        this.tracingSessionOngoing = false;
	    }
	    getTraceStats() {
	        // If the statistics are not available yet, it is 0.
	        const percentFull = this.lastBufferUsageEvent?.percentFull ?? 0;
	        const stats = {
	            bufferStats: [
	                { bufferSize: 1000, bytesWritten: Math.round(percentFull * 1000) },
	            ],
	        };
	        const response = {
	            type: 'GetTraceStatsResponse',
	            traceStats: stats,
	        };
	        this.sendMessage(response);
	    }
	    getCategories() {
	        const fetchCategories = async () => {
	            const categories = (await this.api.Tracing.getCategories()).categories;
	            this.uiPort.postMessage({ type: 'GetCategoriesResponse', categories });
	        };
	        // If a target is already attached, we simply fetch the categories.
	        if (this.devtoolsSocket.isAttached()) {
	            fetchCategories();
	            return;
	        }
	        // Otherwise, we attach temporarily.
	        this.devtoolsSocket.attachToBrowser(async (error) => {
	            if (error) {
	                this.sendErrorMessage(`Could not attach to DevTools browser target ` +
	                    `(req. Chrome >= M81): ${error}`);
	                return;
	            }
	            fetchCategories();
	            this.devtoolsSocket.detach();
	        });
	    }
	    resetState() {
	        this.devtoolsSocket.detach();
	        this.streamHandle = undefined;
	    }
	    onTracingComplete(params) {
	        this.streamHandle = params.stream;
	        this.sendMessage({ type: 'EnableTracingResponse' });
	    }
	    onBufferUsage(params) {
	        this.lastBufferUsageEvent = params;
	    }
	    handleStartTracing(traceConfigProto) {
	        this.devtoolsSocket.attachToBrowser(async (error) => {
	            if (error) {
	                this.sendErrorMessage(`Could not attach to DevTools browser target ` +
	                    `(req. Chrome >= M81): ${error}`);
	                return;
	            }
	            const requestParams = {
	                streamFormat: 'proto',
	                transferMode: 'ReturnAsStream',
	                streamCompression: 'gzip',
	                bufferUsageReportingInterval: 200,
	            };
	            const traceConfig = protos_1.default.TraceConfig.decode(traceConfigProto);
	            if ((0, trace_config_utils_1.browserSupportsPerfettoConfig)()) {
	                const configEncoded = (0, string_utils_1.base64Encode)(traceConfigProto);
	                await this.api.Tracing.start({
	                    perfettoConfig: configEncoded,
	                    ...requestParams,
	                });
	                this.tracingSessionOngoing = true;
	                const tracingSessionId = ++this.tracingSessionId;
	                setTimeout(() => this.endTracing(tracingSessionId), traceConfig.durationMs);
	            }
	            else {
	                console.log('Used Chrome version is too old to support ' +
	                    'perfettoConfig parameter. Using chrome config only instead.');
	                if ((0, trace_config_utils_1.hasSystemDataSourceConfig)(traceConfig)) {
	                    this.sendErrorMessage('System tracing is not supported by this Chrome version. Choose' +
	                        " the 'Chrome' target instead to record a Chrome-only trace.");
	                    return;
	                }
	                const chromeConfig = this.extractChromeConfig(traceConfig);
	                await this.api.Tracing.start({
	                    traceConfig: chromeConfig,
	                    ...requestParams,
	                });
	            }
	        });
	    }
	}
	chrome_tracing_controller.ChromeTracingController = ChromeTracingController;
	
	return chrome_tracing_controller;
}

var hasRequiredChrome_extension;

function requireChrome_extension () {
	if (hasRequiredChrome_extension) return chrome_extension;
	hasRequiredChrome_extension = 1;
	// Copyright (C) 2019 The Android Open Source Project
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	Object.defineProperty(chrome_extension, "__esModule", { value: true });
	const string_utils_1 = requireString_utils();
	const chrome_tracing_controller_1 = requireChrome_tracing_controller();
	let chromeTraceController = undefined;
	enableOnlyOnPerfettoHost();
	// Listen for messages from the perfetto ui.
	// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
	if (globalThis.chrome) {
	    chrome.runtime.onConnectExternal.addListener((port) => {
	        chromeTraceController = new chrome_tracing_controller_1.ChromeTracingController(port);
	        port.onMessage.addListener(onUIMessage);
	    });
	}
	function onUIMessage(message, port) {
	    if (message.method === 'ExtensionVersion') {
	        port.postMessage({ version: chrome.runtime.getManifest().version });
	        return;
	    }
	    console.assert(chromeTraceController !== undefined);
	    if (!chromeTraceController)
	        return;
	    // ChromeExtensionConsumerPort sends the request data as string because
	    // chrome.runtime.port doesn't support ArrayBuffers.
	    const requestDataArray = message.requestData
	        ? (0, string_utils_1.binaryDecode)(message.requestData)
	        : new Uint8Array();
	    chromeTraceController.handleCommand(message.method, requestDataArray);
	}
	function enableOnlyOnPerfettoHost() {
	    function enableOnHostWithSuffix(suffix) {
	        return {
	            conditions: [
	                new chrome.declarativeContent.PageStateMatcher({
	                    pageUrl: { hostSuffix: suffix },
	                }),
	            ],
	            actions: [new chrome.declarativeContent.ShowPageAction()],
	        };
	    }
	    chrome.declarativeContent.onPageChanged.removeRules(undefined, () => {
	        chrome.declarativeContent.onPageChanged.addRules([
	            enableOnHostWithSuffix('localhost'),
	            enableOnHostWithSuffix('127.0.0.1'),
	            enableOnHostWithSuffix('.perfetto.dev'),
	            enableOnHostWithSuffix('.storage.googleapis.com'),
	        ]);
	    });
	}
	
	return chrome_extension;
}

var chrome_extensionExports = requireChrome_extension();
var index = /*@__PURE__*/getDefaultExportFromCjs(chrome_extensionExports);

return index;

})();
//# sourceMappingURL=chrome_extension_bundle.js.map
